// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
[TestFixture]
public class UserStatisticsTest {
  private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=UserStatistics");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys("Admin");

        // Input password
        driver.FindElement(By.Id("password")).SendKeys("7h1515457r0ngP455w0rd");

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var correctPage = driver.FindElements(By.LinkText("User Statistics"));
        var foundPElement = driver.FindElements(By.XPath("//p"));
    }

  [Test]
  public void userStatisticsInfoPresent() {
        // Wait for the User statistics graph and verify it is displayed
        IWebElement userStatsGraph = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div/div/div/div/div/div[2]/div/div/div[1]")));
        Assert.That(userStatsGraph.Displayed, Is.True);

        // Wait for the Day filter and verify it is displayed
        IWebElement dayFilter = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div[2]/select")));
        Assert.That(dayFilter.Displayed, Is.True);

        // Wait for the Graph navigation tabs and verify they are displayed
        IWebElement graphNavTabs = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[3]/ul")));
        Assert.That(graphNavTabs.Displayed, Is.True);

        // Wait for the Header and verify the text is as expected
        IWebElement header = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(header.Text, Is.EqualTo("User Statistics"));

        // Wait for the Table and verify it is displayed
        IWebElement table = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[4]/div/table")));
        Assert.That(table.Displayed, Is.True); ;
    }
  [Test]
  public void userStatisticsApplicationNavigation() {
        // Navigate to PQFileViewer
        IWebElement pqFileViewerLink = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div/div/div/div/div/div[3]/ul/li[2]/a")));
        pqFileViewerLink.Click();

        // Navigate to PQDashboard
        IWebElement pqDashboardLink = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div/div/div/div/div/div[3]/ul/li[3]/a")));
        pqDashboardLink.Click();

        // Navigate to PQ Browser
        IWebElement pqBrowserLink = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div/div/div/div/div/div[3]/ul/li[4]/a")));
        pqBrowserLink.Click();

        // Navigate to OpenXDA
        IWebElement openXdaLink = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div/div/div/div/div/div[3]/ul/li[5]/a")));
        openXdaLink.Click();

        // Navigate to OpenSee
        IWebElement openSeeLink = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div/div/div/div/div/div[3]/ul/li[6]/a")));
        openSeeLink.Click();

        // Navigate to Notification Pages
        IWebElement notificationPagesLink = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div/div/div/div/div/div[3]/ul/li[7]/a")));
        notificationPagesLink.Click();

        // Navigate to MiMD
        IWebElement miMdLink = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div/div/div/div/div/div[3]/ul/li[8]/a")));
        miMdLink.Click();
    }
  [Test]
  public void userStatisticsLastNumOfDays() {
        // Last 60 days
        {
            IWebElement dropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//select")));
            IWebElement option = dropdown.FindElement(By.XPath("//option[. = 'Last 60 days']"));
            wait.Until(ExpectedConditions.ElementToBeClickable(option));
            option.Click();
        }

        // Last 90 days
        {
            IWebElement dropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//select")));
            IWebElement option = dropdown.FindElement(By.XPath("//option[. = 'Last 90 days']"));
            wait.Until(ExpectedConditions.ElementToBeClickable(option));
            option.Click();
        }

        // Last 180 days
        {
            IWebElement dropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//select")));
            IWebElement option = dropdown.FindElement(By.XPath("//option[. = 'Last 180 days']"));
            wait.Until(ExpectedConditions.ElementToBeClickable(option));
            option.Click();
        }

        // Last 365 days
        {
            IWebElement dropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//select")));
            IWebElement option = dropdown.FindElement(By.XPath("//option[. = 'Last 365 days']"));
            wait.Until(ExpectedConditions.ElementToBeClickable(option));
            option.Click();
        }

        // Last 30 days
        {
            IWebElement dropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//select")));
            IWebElement option = dropdown.FindElement(By.XPath("//option[. = 'Last 30 days']"));
            wait.Until(ExpectedConditions.ElementToBeClickable(option));
            option.Click();
        }
    }
  [Test]
  public void userStatisticsSorting() {
        // Arrow present for Logins
        wait.Until(ExpectedConditions.VisibilityOfAllElementsLocatedBy(By.XPath("/html/body/div/div/div/div/div/div[4]/div/table/thead/tr/th[2]/div[1]")));
        var elements = driver.FindElements(By.XPath("/html/body/div/div/div/div/div/div[4]/div/table/thead/tr/th[2]/div[1]"));
        Assert.That(elements.Count > 0);

        // Logins sort
        IWebElement loginSort = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[4]/div/table/thead/tr/th[2]")));
        loginSort.Click();

        // Last access time sort
        IWebElement lastAccessSort = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[4]/div/table/thead/tr/th[3]")));
        lastAccessSort.Click();

        // Arrow present with last access time
        wait.Until(ExpectedConditions.VisibilityOfAllElementsLocatedBy(By.XPath("/html/body/div/div/div/div/div/div[4]/div/table/thead/tr/th[3]/div[1]")));
        elements = driver.FindElements(By.XPath("/html/body/div/div/div/div/div/div[4]/div/table/thead/tr/th[3]/div[1]"));
        Assert.That(elements.Count > 0);

        // User sort
        IWebElement userSort = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[4]/div/table/thead/tr/th")));
        userSort.Click();

        // Arrow present with user
        wait.Until(ExpectedConditions.VisibilityOfAllElementsLocatedBy(By.XPath("/html/body/div/div/div/div/div/div[4]/div/table/thead/tr/th[1]/div[1]")));
        elements = driver.FindElements(By.XPath("/html/body/div/div/div/div/div/div[4]/div/table/thead/tr/th[1]/div[1]"));
        Assert.That(elements.Count > 0);
    }
}

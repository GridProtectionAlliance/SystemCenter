// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
using UserInterface;
[TestFixture]
public class MetersTest {
  private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl(Settings.BaseURL + "/index.cshtml?name=Meters");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys(Settings.adminUsername);

        // Input password
        driver.FindElement(By.Id("password")).SendKeys(Settings.adminPassword);

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var metersPageLoad = driver.FindElements(By.LinkText("MATLAB Analytics"));
        var foundMeters = driver.FindElements(By.XPath("//p"));
    }

    [Test]
  public void metersInfoPresent() {
    driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=Meters");
    // Search Username
    // Wait for and assert that the search input is displayed
    IWebElement searchInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//input[@type='search']")));
    Assert.That(searchInput.Displayed);

    // Wait for and assert that the "Found (n) meters" paragraph is displayed
    IWebElement foundMeters = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//p")));
    Assert.That(foundMeters.Displayed);

    // Wait for and assert that Name filter is displayed
    IWebElement nameFilter = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//th/div[2]")));
    Assert.That(nameFilter.Displayed);

    // Wait for and assert that Key Filter is displayed
    IWebElement keyFilter = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//th[2]/div")));
    Assert.That(keyFilter.Displayed);

    // Wait for and assert that Substation filter is displayed
    IWebElement substationFilter = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//th[3]/div")));
    Assert.That(substationFilter.Displayed);

    // Wait for and assert that Assets filter is displayed
    IWebElement assetsFilter = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//th[4]/div")));
    Assert.That(assetsFilter.Displayed);

    // Wait for and assert that Make filter is displayed
    IWebElement makeFilter = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//th[5]/div")));
    Assert.That(makeFilter.Displayed);

    // Wait for and assert that Model filter is displayed
    IWebElement modelFilter = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//th[6]/div")));
    Assert.That(modelFilter.Displayed);

    // Wait for and assert that Name TR/TD is displayed
    IWebElement nameTd = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//td")));
    Assert.That(nameTd.Displayed);

    // Wait for and assert that Key TR/TD is displayed
    IWebElement keyTd = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//td[2]")));
    Assert.That(keyTd.Displayed);

    // Wait for and assert that Substation TR/TD is displayed
    IWebElement substationTd = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//td[3]")));
    Assert.That(substationTd.Displayed);

    // Wait for and assert that Assets TR/TD is displayed
    IWebElement assetsTd = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//td[4]")));
    Assert.That(assetsTd.Displayed);

    // Wait for and assert that Make TR/TD is displayed
    IWebElement makeTd = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//td[5]")));
    Assert.That(makeTd.Displayed);

    // Wait for and assert that Model TR/TD is displayed
    IWebElement modelTd = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//td[6]")));
    Assert.That(modelTd.Displayed);

    // Wait for and assert that the navigation menu is displayed
    IWebElement navMenu = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div/div/div/div/nav")));
    Assert.That(navMenu.Displayed);
  }
  [Test]
  public void meterCreation() {
    WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));

    // Wait for and click the New Meter button
    IWebElement newMeterBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/button")));
    newMeterBtn.Click();

    // Wait for the Key input to be visible and send keys
    IWebElement keyInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[2]/div/div/div/input")));
    keyInput.SendKeys("Test Meter");

    // Wait for the Name input to be visible and send keys
    IWebElement nameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[2]/div/div/div[2]/input")));
    nameInput.SendKeys("Test");

    // Wait for the Next button to be clickable and click it
    IWebElement nextBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[3]/button")));
    nextBtn.Click();

    // Wait for the Substation Key input to be visible and send keys
    IWebElement substationKeyInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[2]/div/div/div[2]/input")));
    substationKeyInput.SendKeys("Test Key");

    // Wait for the Substation Name input to be visible and send keys
    IWebElement substationNameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[2]/div/div/div[3]/input")));
    substationNameInput.SendKeys("Test Name");

    // Wait for the Latitude input to be visible and send keys
    IWebElement latitudeInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[2]/div/div[2]/div[2]/div[2]/input")));
    latitudeInput.SendKeys("12");

    // Wait for the Longitude input to be visible and send keys
    IWebElement longitudeInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[2]/div/div[2]/div[2]/div[3]/input")));
    longitudeInput.SendKeys("12");

    // Wait for the Next button to be clickable and click it
    nextBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[3]/button[2]")));
    nextBtn.Click();

    // Wait for the Add Event Channel button to be clickable and click it
    IWebElement addEventChannelBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[2]/div/div/div[5]/button")));
    addEventChannelBtn.Click();

    // Wait for the Next button to be clickable and click it again
    nextBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[3]/button[2]")));
    nextBtn.Click();

    // Wait for the Next button to be clickable and click it again
    nextBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[3]/button[2]")));
    nextBtn.Click();

    // Wait for the Add Asset List to Meter element to be clickable and click it
    IWebElement addAssetListToMeterBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//li[2]/fieldset/form/div/div")));
    addAssetListToMeterBtn.Click();

    // Wait for the Save button to be clickable and click it
    IWebElement saveBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[24]/div/div/div/div[3]/button")));
    saveBtn.Click();

    // Wait for the Next button to be clickable and click it again
    nextBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[3]/button[2]")));
    nextBtn.Click();

    // Wait for the Create Meter button to be clickable and click it
    IWebElement createMeterBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/div[3]/button[2]")));
    createMeterBtn.Click();

    // Wait for the Confirm Meter Creation button to be clickable and click it
    IWebElement confirmMeterCreationBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[10]/div/div/div/div[3]/button")));
    confirmMeterCreationBtn.Click();

    // Wait for the Save and Close button to be clickable and click it
    IWebElement saveAndCloseBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/div[3]/button")));
    saveAndCloseBtn.Click();

  }
  [Test]
  public void metersEditMeter() {
  // Wait for and click into the test meter
  IWebElement testMeterRow = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr[20]/td")));
  testMeterRow.Click();

  // Wait for and confirm the correct test meter loaded
  IWebElement testMeterHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
  Assert.That(testMeterHeader.Text, Is.EqualTo("Test (Test Meter)\\n"));

  // Wait for the Add Note textarea to be visible and send keys
  IWebElement addNoteTextarea = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div[2]/div[2]/div/div/textarea")));
  addNoteTextarea.SendKeys("Test Note");

  // Wait for the Add Note Save button to be clickable and click it
  IWebElement addNoteSaveBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div[3]/div/button")));
  addNoteSaveBtn.Click();
  }
  [Test]
  public void metersDeleteMeter() {
  // Wait for and click into the test meter
  IWebElement testMeterRow = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr[20]/td")));
  testMeterRow.Click();

  // Wait for and confirm the correct test meter loaded
  IWebElement testMeterHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
  Assert.That(testMeterHeader.Text, Is.EqualTo("Test (Test Meter)\\n"));

  // Wait for the Delete Meter button to be clickable and click it
  IWebElement deleteMeterBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/div[2]/button")));
  deleteMeterBtn.Click();

  // Wait for the Confirm button to be clickable and click it
  IWebElement confirmBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[15]/div/div/div/div[3]/button")));
  confirmBtn.Click();
  }
}

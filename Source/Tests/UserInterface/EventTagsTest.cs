// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
using UserInterface;
[TestFixture]
public class EventTagsTest
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(40));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl(Settings.BaseURL + "/index.cshtml?name=EventTags");

        // Input username
        // Input username
        driver.FindElement(By.Id("username")).SendKeys(Settings.adminUsername);

        // Input password
        driver.FindElement(By.Id("password")).SendKeys(Settings.adminPassword);

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var correctPage = driver.FindElements(By.LinkText("Event Tags"));
        var foundPElement = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void eventTagsaInfoPresent()
    {
        // Wait for and assert that the table with data is present
        IWebElement tableData = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]")));
        Assert.That(tableData.Displayed);

        // Wait for and assert that the toolbar is present
        IWebElement toolbar = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav")));
        Assert.That(toolbar.Displayed);

        // Wait for and assert that the "Found n tags" element is present
        IWebElement foundTags = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/p")));
        Assert.That(foundTags.Displayed);

        // Wait for and assert that the "Add filter" button is present
        IWebElement addFilterButton = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        Assert.That(addFilterButton.Displayed);

        // Wait for and assert that the "Add tag" button is present
        IWebElement addTagButton = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        Assert.That(addTagButton.Displayed);

        // Wait for and assert that the search bar is present
        IWebElement searchBar = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")));
        Assert.That(searchBar.Displayed);
    }
    [Test]
    public void eventTagsbAddTag()
    {
        // Wait for and click the "Add tag" button
        IWebElement addTagButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/button")));
        addTagButton.Click();

        // Wait for and assert that the name warning is present
        IWebElement nameWarning1 = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/form/div[1]/div")));
        Assert.That(nameWarning1.Text, Is.EqualTo("A unique Name of less than 200 characters is required."));

        // Wait for and enter the name
        IWebElement nameInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/form/div[1]/input")));
        nameInput.SendKeys("Event Tag 0");

        // Wait for and assert that the name warning is gone
        IWebElement nameWarning2 = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/form/div[1]/div")));
        Assert.That(nameWarning2.Text, Is.Not.EqualTo("A unique Name of less than 200 characters is required."));

        // Wait for and click the "Show in finder" checkbox
        IWebElement showInFinderCheckbox = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/form/div[3]/input")));
        showInFinderCheckbox.Click();

        // Wait for and click the add tag button
        IWebElement addTag = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        addTag.Click();
    }
    [Test]
    public void eventTagscEditTag()
    {
        // Wait for and click the first item in the table
        IWebElement firstItem = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        firstItem.Click();

        // Wait for and confirm the correct tag loaded
        IWebElement tagLoaded = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//h4[contains(.,'Edit Event Tag 0')]")));
        Assert.That(tagLoaded.Text, Is.EqualTo("Edit Event Tag 0"));

        // Wait for and enter the description
        IWebElement descriptionField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//textarea")));
        descriptionField.SendKeys("Desc");

        // Wait for and click the save button
        IWebElement saveButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        saveButton.Click();
    }
    [Test]
    public void eventTagsDeleteTag()
    {
        WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(40));

        // Log function for diagnostics (Test had some issues since going to delete after cancelling changes the xpath)
        void Log(string message)
        {
            Console.WriteLine($"{DateTime.Now:HH:mm:ss.fff} - {message}");
        }

        try
        {
            // Wait for and click the first item in the table
            Log("Waiting for the first item in the table...");
            IWebElement firstItem = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
            firstItem.Click();
            Log("Clicked the first item in the table.");

            // Wait for and confirm the correct tag loaded
            Log("Waiting for the tag to load...");
            IWebElement tagLoaded = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//h4[contains(.,'Edit Event Tag 0')]")));
            Assert.That(tagLoaded.Text, Is.EqualTo("Edit Event Tag 0"));
            Log("Tag loaded confirmed.");

            // Wait for and click the delete button
            Log("Waiting for the delete button...");
            IWebElement deleteButton = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
            deleteButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
            deleteButton.Click();
            Log("Clicked the delete button.");

            // Wait for and click the cancel button
            Log("Waiting for the cancel button...");
            IWebElement cancelButton = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[2]")));
            cancelButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[2]")));
            cancelButton.Click();
            Log("Clicked the cancel button.");

            // Wait for and click the first item in the table again
            Log("Waiting for the first item in the table again...");
            IWebElement firstItemAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
            firstItemAgain.Click();
            Log("Clicked the first item in the table again.");

            // Wait for and confirm the correct tag loaded again
            Log("Waiting for the tag to load again...");
            IWebElement tagLoadedAgain = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//h4[contains(.,'Edit Event Tag 0')]")));
            Assert.That(tagLoadedAgain.Text, Is.EqualTo("Edit Event Tag 0"));
            Log("Tag loaded confirmed again.");

            // Wait for and click the delete button again
            Log("Waiting for the delete button again...");
            IWebElement deleteButtonAgain = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
            deleteButtonAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
            deleteButtonAgain.Click();
            Log("Clicked the delete button again.");

            // Wait for and confirm the delete
            Log("Waiting for the confirm delete button...");
            IWebElement confirmDelete = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[1]")));
            confirmDelete = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[1]")));
            confirmDelete.Click();
            Log("Clicked the confirm delete button.");
        }
        catch (StaleElementReferenceException e)
        {
            Log($"Stale element reference: {e.Message}");
        }
        catch (WebDriverTimeoutException e)
        {
            Log($"WebDriver timeout: {e.Message}");
        }
        catch (Exception e)
        {
            Log($"Exception: {e.Message}");
        }

    }
    [Test]
    public void eventTagsSorting()
    {
        //Uncomment once sorting change is impelemnted
        // Wait for and click on the Name sort header
        //IWebElement nameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        //nameSortHeader.Click();

        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        //var nameArrowPresent = driver.FindElements(By.XPath("//th[1]/div"));
        //Assert.That(nameArrowPresent.Count > 0);

        //IWebElement nameSortHeaderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        //nameSortHeaderAgain.Click();

        //// Wait for and click on the desc header
        //IWebElement desc = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        //desc.Click();

        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));
        //var descArrow = driver.FindElements(By.XPath("//th[2]/div"));
        //Assert.That(descArrow.Count > 0);

        //IWebElement descAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        //descAgain.Click();

        //// Wait for and click on the finder header
        //IWebElement finder = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[3]")));
        //finder.Click();

        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[3]/div")));
        //var finderArrow = driver.FindElements(By.XPath("//th[3]/div"));
        //Assert.That(finderArrow.Count > 0);

        //IWebElement finderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[3]")));
        //finderAgain.Click();
    }
}

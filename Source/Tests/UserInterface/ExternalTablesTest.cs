// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
using UserInterface;
[TestFixture]
public class ExternalTablesTest
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl(Settings.BaseURL + "/index.cshtml?name=ByExternalTable");

        // Input username
        // Input username
        driver.FindElement(By.Id("username")).SendKeys(Settings.adminUsername);

        // Input password
        driver.FindElement(By.Id("password")).SendKeys(Settings.adminPassword);

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var correctPage = driver.FindElements(By.LinkText("External Tables"));
        var foundPElement = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void externalTablesaInfoPresent()
    {
        // Wait for and assert that the toolbar is present
        IWebElement toolbar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav")));
        Assert.That(toolbar.Displayed);

        // Wait for and assert that the search bar is present
        IWebElement searchBar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")));
        Assert.That(searchBar.Displayed);

        // Wait for and assert that the 'Found external table(s)' element is present
        IWebElement foundExternalTables = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/p")));
        Assert.That(foundExternalTables.Displayed);

        // Wait for and assert that the 'Add filter' button is present
        IWebElement addFilterButton = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        Assert.That(addFilterButton.Displayed);

        // Wait for and assert that the 'Add External Table' button is present
        IWebElement addExternalTableButton = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        Assert.That(addExternalTableButton.Displayed);

        // Wait for and assert that the table with data is present
        IWebElement tableWithData = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody")));
        Assert.That(tableWithData.Displayed);

    }
    [Test]
    public void externalTablesbAddExternalTable()
    {
        // Wait for and click the "Add External Table" button
        IWebElement addExternalTableBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        addExternalTableBtn.Click();

        // Wait for and select the external DB option from the dropdown
        IWebElement dropdown = wait.Until(ExpectedConditions.ElementExists(By.XPath("//select")));
        IWebElement optionMCM = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//select/option[. = 'MCM']")));
        optionMCM.Click();

        // Wait for and assert that the Name warning message is present
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[2]/div[2]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."), "Name warning message should be present.");

        // Wait for and input the Name
        IWebElement nameInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[2]/input")));
        nameInput.SendKeys("Daniel's Table");

        // Wait for and assert that the Name warning message is gone
        wait.Until(ExpectedConditions.InvisibilityOfElementWithText(By.XPath("//div[2]/div[2]/div"), "A Name of less than 200 characters is required."));

        // Wait for and assert that the Query warning message is present
        IWebElement queryWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div[3]/div")));
        Assert.That(queryWarning.Text, Is.EqualTo("Query is a required field."), "Query warning message should be present.");

        // Wait for and input the Query
        IWebElement queryInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//textarea")));
        queryInput.SendKeys("INSERT INTO table_name");

        // Wait for and assert that the Query warning message is gone
        wait.Until(ExpectedConditions.InvisibilityOfElementWithText(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div[3]/div"), "Query is a required field."));

        // Wait for and click the "Add Table" button
        IWebElement addTableBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        addTableBtn.Click();

    }
    [Test]
    public void externalTablescAdditionalFields()
    {
        // Wait for and click into the table child
        IWebElement tableChild = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        tableChild.Click();

        // Wait for and confirm the correct table is loaded
        IWebElement tableHeader = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(tableHeader.Text, Is.EqualTo("Daniel's Table"), "Table header should display 'Daniel's Table'.");

        // Wait for and navigate to Additional Fields
        IWebElement additionalFieldsTab = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/ul/li[2]/a")));
        additionalFieldsTab.Click();

        // Wait for and click the Add new field button
        IWebElement addNewFieldBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[3]/div[2]/button")));
        addNewFieldBtn.Click();

        // Wait for and assert that the Name warning message is present
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("//form/div/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."), "Name warning message should be present.");

        // Wait for and input the Name
        IWebElement nameInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//input")));
        nameInput.SendKeys("Daniels Table Field");

        // Wait for and assert that the Name warning message is gone
        wait.Until(ExpectedConditions.InvisibilityOfElementWithText(By.XPath("//form/div/div"), "A Name of less than 200 characters is required."));

        // Wait for and click the Add button
        IWebElement addBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[14]/div[1]/div/div/div[3]/button")));
        addBtn.Click();

        // Wait for and click the Edit field button
        IWebElement editFieldBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[2]/div/div/div/table/tbody/tr/td[8]/button")));
        editFieldBtn.Click();

        // Wait for and click the Searchable checkbox
        IWebElement searchableCheckbox = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[4]/input")));
        searchableCheckbox.Click();

        // Wait for and click the Save button
        IWebElement saveBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[14]/div[1]/div/div/div[3]/button")));
        saveBtn.Click();

        // Wait for and click the Delete Field button
        IWebElement deleteFieldBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[2]/div/div/div/table/tbody/tr/td[8]/button[2]")));
        deleteFieldBtn.Click();

        // Wait for and click the Delete field permanently button
        IWebElement deleteFieldPermanentlyBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/button[2]")));
        deleteFieldPermanentlyBtn.Click();

    }
    [Test]
    public void externalTablesdLinkedFields()
    {
        // Wait for and click into the table child
        IWebElement tableChild = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        tableChild.Click();

        // Wait for and confirm the correct table is loaded
        IWebElement tableHeader = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(tableHeader.Text, Is.EqualTo("Daniel's Table"), "Table header should display 'Daniel's Table'.");

        // Wait for and navigate to Linked Fields
        IWebElement linkedFieldsTab = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/ul/li[3]/a")));
        linkedFieldsTab.Click();

        // Wait for and click the Link New Field button
        IWebElement linkNewFieldBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[3]/div/button")));
        linkNewFieldBtn.Click();

        // Wait for and select the Parent Type
        IWebElement parentTypeDropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//select")));
        parentTypeDropdown.FindElement(By.XPath("//option[. = 'Meter']")).Click();

        // Wait for and select the Linked Field
        IWebElement linkedFieldDropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[2]/select")));
        linkedFieldDropdown.FindElement(By.XPath("//option[. = 'Model']")).Click();

        // Wait for and click the Link button
        IWebElement linkBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[1]")));
        linkBtn.Click();

        // Wait for and click the Edit field button
        IWebElement editFieldBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[2]/div/div/div/table/tbody/tr/td[3]/button")));
        editFieldBtn.Click();

        // Wait for and edit the Parent Type
        IWebElement editParentTypeDropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//select")));
        editParentTypeDropdown.FindElement(By.XPath("//option[. = 'Bus']")).Click();

        // Wait for and click the Save button
        IWebElement saveChangeBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[10]/div/div/div/div[3]/button")));
        saveChangeBtn.Click();

        // Wait for and click the Delete field button
        IWebElement deleteFieldBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[2]/div/div/div/table/tbody/tr/td[3]/button[2]")));
        deleteFieldBtn.Click();

        // Wait for and confirm the deletion
        IWebElement confirmDeletionBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        confirmDeletionBtn.Click();

    }
    [Test]
    public void externalTablesEditTable()
    {
        // Wait for and click into the table child
        IWebElement tableChild = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        tableChild.Click();

        // Wait for and confirm the correct table is loaded
        IWebElement tableHeader = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(tableHeader.Text, Is.EqualTo("Daniel's Table"), "Table header should display 'Daniel's Table'.");

        // Wait for and edit the query
        IWebElement queryTextArea = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[2]/div[2]/textarea")));
        queryTextArea.SendKeys("1");

        // Wait for and click the Reset button
        IWebElement resetButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[3]/div[2]/button")));
        resetButton.Click();

        // Wait for and edit the query again
        IWebElement queryTextAreaAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[2]/div[2]/textarea")));
        queryTextAreaAgain.SendKeys("1");

        // Wait for and click the Update button
        IWebElement updateButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[3]/div/button")));
        updateButton.Click();

    }
    [Test]
    public void externalTablesfDatabaseDetails()
    {
        // Wait for and click into the table child
        IWebElement tableChild = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        tableChild.Click();

        // Wait for and assert that the correct table is loaded
        IWebElement tableTitle = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(tableTitle.Text, Is.EqualTo("Daniel's Table"));

        // Wait for and click the database details button
        IWebElement databaseDetailsButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/div[2]/button[2]")));
        databaseDetailsButton.Click();

        // Wait for and assert that the card with info is present
        IWebElement cardWithInfo = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[2]")));
        Assert.That(cardWithInfo.Displayed);

        // Wait for and assert that the 'External Database Information:' header is present
        IWebElement externalDatabaseInfoHeader = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div/div/div/h4")));
        Assert.That(externalDatabaseInfoHeader.Text, Is.EqualTo("External Database Information:"));

        // Wait for and assert that the 'Test DB Connection' button is present
        IWebElement testDBConnectionButton = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[2]/button")));
        Assert.That(testDBConnectionButton.Displayed);

    }
    [Test]
    public void externalTablesgDeleteTable()
    {
        /// Wait for and click into the table child
        IWebElement tableChild = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        tableChild.Click();

        // Wait for and confirm the correct table is loaded
        IWebElement tableHeader = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(tableHeader.Text, Is.EqualTo("Daniel's Table"), "Table header should display 'Daniel's Table'.");

        // Wait for and click the Delete Table button
        IWebElement deleteTableButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/div[2]/button")));
        deleteTableButton.Click();

        // Wait for and confirm the deletion by clicking the confirmation button
        IWebElement confirmDeletionButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[12]/div[1]/div/div/div[3]/button[1]")));
        confirmDeletionButton.Click();

    }
    [Test]
    public void externalTablesSorting()
    {
       IWebElement nameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeader.Click();

        // Wait for and assert that the arrow is present in the Name column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        var nameArrowPresent = driver.FindElements(By.XPath("//th[1]/div"));
        Assert.That(nameArrowPresent.Count > 0);

        // Click on the Name sort header again (to toggle sorting)
        IWebElement nameSortHeaderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeaderAgain.Click();

        // Wait for and click on the External DB header
        IWebElement externalDb = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        externalDb.Click();

        // Wait for and assert that the arrow is present in the URL column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));
        var externalDbArrow = driver.FindElements(By.XPath("//th[2]/div"));
        Assert.That(externalDbArrow.Count > 0);

        // Click on the External DB sort header again (to toggle sorting)
        IWebElement externalDbAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]/div[2]")));
        externalDbAgain.Click();

        // Wait for and click on the Mapped Fields header
        IWebElement mappedFields = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        mappedFields.Click();

        // Wait for and assert that the arrow is present in the URL column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));
        var mappedArrow = driver.FindElements(By.XPath("//th[2]/div"));
        Assert.That(mappedArrow.Count > 0);

        // Click on the Mapped Fields sort header again (to toggle sorting)
        IWebElement mappedFieldsAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]/div[2]")));
        mappedFieldsAgain.Click();

    }
}

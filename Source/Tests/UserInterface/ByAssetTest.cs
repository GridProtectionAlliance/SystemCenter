// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
[TestFixture]
public class ByAssetTest
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(40));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=Assets");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys("Admin");

        // Input password
        driver.FindElement(By.Id("password")).SendKeys("7h1515457r0ngP455w0rd");

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var metersPageLoad = driver.FindElements(By.LinkText("Assets"));
        var foundMeters = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void assetsaInfoDisplayed()
    {
        // Search and Actions Navbar
        wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav")));
        var searchAndActions = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav"));
        Assert.That(searchAndActions.Count > 0);

        // Displaying Transmission Asset(s)
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[1]/p")));
        var transmissionAssets = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[1]/p"));
        Assert.That(transmissionAssets.Count > 0);

        // Searchbar
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[1]/div/input")));
        var searchbar = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[1]/div/input"));
        Assert.That(searchbar.Count > 0);

        // Filter button
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[2]/button")));
        var filterBtn = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[2]/button"));
        Assert.That(filterBtn.Count > 0);

        // Add asset
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        var addAsset = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button"));
        Assert.That(addAsset.Count > 0);

        // External database
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[2]/button")));
        var externalDb = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[2]/button"));
        Assert.That(externalDb.Count > 0);

        // Previous
        wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/ul/li[1]")));
        var previous = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/ul/li[1]"));
        Assert.That(previous.Count > 0);

        // 1
        wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/ul/li[2]/a")));
        var oneBtn = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/ul/li[2]/a"));
        Assert.That(oneBtn.Count > 0);

        // 2
        wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/ul/li[3]/a")));
        var twoBtn = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/ul/li[3]/a"));
        Assert.That(twoBtn.Count > 0);

        // Next
        wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/ul/li[4]")));
        var next = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/ul/li[4]"));
        Assert.That(next.Count > 0);

        // Asset Color Active
        vars["Color"] = js.ExecuteScript("return getComputedStyle(document.querySelector(\".nav-link.nav-link.active\")).Color");
        // color active
        Console.WriteLine("return getComputedStyle(document.querySelector(\".nav-link.nav-link.active\")).Color");
        // Asset Color (not active)
        vars["Color"] = js.ExecuteScript("return getComputedStyle(document.querySelector(\".nav-link\")).Color");
    }
    [Test]
    public void assetsbButtons()
    {

        // Add filter
        IWebElement addFilter = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[2]/button")));
        addFilter.Click();

        // Close
        IWebElement closeFilter = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[2]/div[1]/div/div/div[3]/button[2]")));
        closeFilter.Click();

        // Add asset
        IWebElement addAsset = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        addAsset.Click();

        // Cancel
        IWebElement cancelBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
        cancelBtn.Click();

        // External database
        IWebElement externalDb = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[2]/button")));
        externalDb.Click();

        // Close
        IWebElement closeDb = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[2]")));
        closeDb.Click();

        // Next page (via number)
        driver.FindElement(By.XPath("//a[contains(.,\'2\')]")).Click();
        // Prev page (via number)
        driver.FindElement(By.XPath("//a[contains(.,\'1\')]")).Click();
    }
    [Test]
    public void assetscSorting()
    {
        //WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(15));
        // Name sort
        IWebElement nameSort = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSort.Click();
        // Arrow present
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        var arrowPresent = driver.FindElements(By.XPath("//th[1]/div"));
        Assert.That(arrowPresent.Count > 0);
        // Name sort
        IWebElement nameSort2 = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSort2.Click();

        // Key Sort
        IWebElement keySort = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        keySort.Click();
        // Arrow present
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));
        var keyArrow = driver.FindElements(By.XPath("//th[2]/div"));
        Assert.That(keyArrow.Count > 0);
        // Key Sort
        IWebElement keySort2 = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]/div[2]")));
        keySort2.Click();

        // Type sort
        IWebElement typeSort = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[3]")));
        typeSort.Click();
        // Arrow present
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[3]/div")));
        var typeArrow = driver.FindElements(By.XPath("//th[3]/div"));
        Assert.That(typeArrow.Count > 0);
        // Type sort
        IWebElement typeSort2 = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[3]")));
        typeSort2.Click();

        // Nominal Voltage sort
        IWebElement voltageSort = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[4]")));
        voltageSort.Click();
        // Arrow present
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[4]/div")));
        var voltageArrow = driver.FindElements(By.XPath("//th[4]/div"));
        Assert.That(voltageArrow.Count > 0);
        // Nominal Voltage sort
        IWebElement voltageSort2 = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[4]")));
        voltageSort2.Click();

        // Meters sort
        IWebElement metersSort = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[5]")));
        metersSort.Click();
        // Arrow present
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[5]/div")));
        var metersArrow = driver.FindElements(By.XPath("//th[5]/div"));
        Assert.That(metersArrow.Count > 0);
        // Meters sort
        IWebElement metersSort2 = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[5]")));
        metersSort2.Click();

        // Substations sort
        IWebElement substationSort = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[6]")));
        substationSort.Click();
        // Arrow present
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[6]/div")));
        var substationArrow = driver.FindElements(By.XPath("//th[6]/div"));
        Assert.That(substationArrow.Count > 0);
        // Substations sort
        IWebElement substationSort2 = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[6]")));
        substationSort2.Click();
    }
    [Test]
    public void assetseAddFilterFunctionalityAddEditDelete()
    {

        // Add filter
        IWebElement addFilter = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[2]/button")));
        addFilter.Click();
        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'Name']")).Click();
        }
        {
            var dropdown = driver.FindElement(By.XPath("//div[2]/div[2]/div/select"));
            dropdown.FindElement(By.XPath("//option[. = 'LIKE']")).Click();
        }
        IWebElement keyField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[2]/div[1]/div/div/div[2]/div[2]/div[2]/input")));
        keyField.SendKeys("Star");
        //Add
        IWebElement add = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[2]/div[1]/div/div/div[3]/button[1]")));
        add.Click();

        // Edit
        IWebElement edit = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[2]/div/table/tbody/tr/td[4]/button")));
        edit.Click();
        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'Meter Key']")).Click();
        }
        {
            var dropdown = driver.FindElement(By.XPath("//div[2]/div[2]/div/select"));
            dropdown.FindElement(By.XPath("//option[. = 'NOT LIKE']")).Click();
        }
        driver.FindElement(By.XPath("//input[@value=\'\']")).SendKeys("Midway");
        driver.FindElement(By.XPath("//button[contains(.,\'Save\')]")).Click();
        //delete
        IWebElement delete = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[2]/div/table/tbody/tr/td[5]/button")));
        delete.Click();
    }
    [Test]
    public void assetsgAddValidAsset()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        // Valid key
        IWebElement validKey = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/input")));
        validKey.SendKeys("Daniel\'s Asset Key");

        // Valid name
        IWebElement validName = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/input")));
        validName.SendKeys("Daniel\'s asset");

        // Valid Voltage
        IWebElement validVoltage = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")));
        validVoltage.SendKeys("22");

        // Max Fault Distance
        IWebElement maxFault = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[1]/div/input")));
        maxFault.SendKeys("6");

        // Min fault distance
        IWebElement minFault = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[2]/div/input")));
        minFault.SendKeys("22");

        //Save
        IWebElement save = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        save.Click();
    }
    [Test]
    public void assetshAddDuplicateAsset()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        // Valid key
        IWebElement validKey = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/input")));
        validKey.SendKeys("Daniel\'s Asset Key");

        //Valid Name
        IWebElement validName = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/input")));
        validName.SendKeys("Daniel\'s asset");

        // Valid Voltage
        IWebElement validVoltage = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")));
        validVoltage.SendKeys("22");

        // Max Fault Distance
        IWebElement maxFault = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[1]/div/input")));
        maxFault.SendKeys("6");

        // Min fault distance
        IWebElement minFault = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[2]/div/input")));
        minFault.SendKeys("22");

        //Save
        IWebElement save = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        save.Click();
        // Key must be unique 
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }

        //Cancel
        IWebElement cancel = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
        cancel.Click();
    }
    [Test]
    public void assetsiEditAsset()
    {

        // Click into asset (needs to be number 43. If that changes, we would need to change the tr[43] in the below line
        IWebElement createdAsset = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[43]/td[1]")));
        createdAsset.Click();

        // Edit (targeting the Name field)
        IWebElement editName = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[2]/div/div[1]/div[2]/input")));
        editName.SendKeys("1");
        // Save
        IWebElement saveChanges = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[3]/div[1]/button")));
        saveChanges.Click();
    }
    [Test]
    public void assetsjDeleteAsset()
    {

        // Click into asset (needs to be number 43. If that changes, we would need to change the tr[43] in the below line
        IWebElement createdAsset = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[43]/td[1]")));
        createdAsset.Click();

        // Delete
        IWebElement deleteAsset = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/div[2]/button")));
        deleteAsset.Click();

        // Confirm deletion
        IWebElement confirmDelete = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[2]/div[1]/div/div/div[3]/button[1]")));
        confirmDelete.Click();
    }
    [Test]
    public void assetskTransmissionLineWarnings()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        // Save hover warning
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }
        // Max Fault Distance info
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[1]/div/label/div"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }
        // Min Fault Distance info
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[2]/div/label/div"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }

        // Key warning
        IWebElement keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        // Invalid key count (50+ characters)
        driver.FindElement(By.XPath("//div[2]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing");

        // Key warning
        keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Invalid Name (200+ characters)
        driver.FindElement(By.XPath("//div[3]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Name warning
        nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Voltage warning
        IWebElement voltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarning.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")).SendKeys("a");

        // Voltage warning
        IWebElement voltageWarningInvalid = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarningInvalid.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));
    }
    [Test]
    public void assetslBankofCapacitors()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        // Bank of Capacitors
        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'Bank of Capacitors']")).Click();
        }
        // Required fields not met warning
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }

        // Key warning
        IWebElement keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        //50+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Key Warning
        keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // 200+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Name warning
        nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Voltage warning
        IWebElement voltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarning.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")).SendKeys("a");

        // Voltage warning
        IWebElement voltageWarningInvalid = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarningInvalid.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Banks warning
        IWebElement banksWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[2]/div/div")));
        Assert.That(banksWarning.Text, Is.EqualTo("An integer Number of Banks value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[2]/div/input")).SendKeys("gfdgf");

        // Banks warning
        banksWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[2]/div/div")));
        Assert.That(banksWarning.Text, Is.EqualTo("An integer Number of Banks value is required."));

        // Capacitor warning 
        IWebElement capacitorWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[4]/div/div")));
        Assert.That(capacitorWarning.Text, Is.EqualTo("A numeric Capacitor Step Size value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[4]/div/input")).SendKeys("gfdgf");

        // Capacitor warning 
        capacitorWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[4]/div/div")));
        Assert.That(capacitorWarning.Text, Is.EqualTo("A numeric Capacitor Step Size value is required."));

        // Max Operating Voltage warning
        IWebElement maxOperatingVoltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[5]/div/div")));
        Assert.That(maxOperatingVoltageWarning.Text, Is.EqualTo("A numeric Maximum Operating Voltage value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[5]/div/input")).SendKeys("gfdgf");

        // Max Operating Voltage warning
        maxOperatingVoltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[5]/div/div")));
        Assert.That(maxOperatingVoltageWarning.Text, Is.EqualTo("A numeric Maximum Operating Voltage value is required."));

        // Rated voltage warning
        IWebElement ratedVoltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[6]/div/div")));
        Assert.That(ratedVoltageWarning.Text, Is.EqualTo("A numeric Rated Voltage of a Unit value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[6]/div/input")).SendKeys("gfdgf");

        // Rated voltage warning
        ratedVoltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[6]/div/div")));
        Assert.That(ratedVoltageWarning.Text, Is.EqualTo("A numeric Rated Voltage of a Unit value is required."));

        // Rating of unit warning
        IWebElement ratingOfUnitWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[7]/div/div")));
        Assert.That(ratingOfUnitWarning.Text, Is.EqualTo("A numeric Rating of a Unit is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[7]/div/input")).SendKeys("gfdgf");

        // Rating of unit warning
        ratingOfUnitWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[7]/div/div")));
        Assert.That(ratingOfUnitWarning.Text, Is.EqualTo("A numeric Rating of a Unit is required."));

        // PRTU warning
        IWebElement prtuWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[8]/div/div")));
        Assert.That(prtuWarning.Text, Is.EqualTo("A numeric Pos. Reactance Tolerance of a Unit value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[8]/div/input")).SendKeys("gfdgf");

        // PRTU warning
        prtuWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[8]/div/div")));
        Assert.That(prtuWarning.Text, Is.EqualTo("A numeric Pos. Reactance Tolerance of a Unit value is required."));

        // NRTU warning
        IWebElement nrtuWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[9]/div/div")));
        Assert.That(nrtuWarning.Text, Is.EqualTo("A numeric Neg. Reactance Tolerance of a Unit value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[9]/div/input")).SendKeys("gfdgf");

        // NRTU warning
        nrtuWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[9]/div/div")));
        Assert.That(nrtuWarning.Text, Is.EqualTo("A numeric Neg. Reactance Tolerance of a Unit value is required."));

        // Num. Units per group warning
        IWebElement numUnitsPerGroupWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[10]/div/div")));
        Assert.That(numUnitsPerGroupWarning.Text, Is.EqualTo("An integer Num. of Caps. per Group value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[10]/div/input")).SendKeys("gfdgf");

        // Num. Units per group warning
        numUnitsPerGroupWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[10]/div/div")));
        Assert.That(numUnitsPerGroupWarning.Text, Is.EqualTo("An integer Num. of Caps. per Group value is required."));

        // Num Series per phase
        IWebElement numSeriesPerPhaseWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[11]/div/div")));
        Assert.That(numSeriesPerPhaseWarning.Text, Is.EqualTo("An integer Num. of Series Groups per Phase value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[11]/div/input")).SendKeys("gfdgf");

        // Num Series per phase
        numSeriesPerPhaseWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[11]/div/div")));
        Assert.That(numSeriesPerPhaseWarning.Text, Is.EqualTo("An integer Num. of Series Groups per Phase value is required."));

        // Midgroup VT radio warning
        IWebElement midgroupVTRadioWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[12]/div/div")));
        Assert.That(midgroupVTRadioWarning.Text, Is.EqualTo("A numeric Midgroup VT Ratio value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[12]/div/input")).SendKeys("gfdgf");

        // Midgroup VT radio warning
        midgroupVTRadioWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[12]/div/div")));
        Assert.That(midgroupVTRadioWarning.Text, Is.EqualTo("A numeric Midgroup VT Ratio value is required."));

        // Initial Guess shorted warning
        IWebElement initialGuessShortedWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[13]/div/div")));
        Assert.That(initialGuessShortedWarning.Text, Is.EqualTo("A numeric Initial Guess of Shorted Elements value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[13]/div/input")).SendKeys("gfdgf");

        // Initial Guess shorted warning
        initialGuessShortedWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[13]/div/div")));
        Assert.That(initialGuessShortedWarning.Text, Is.EqualTo("A numeric Initial Guess of Shorted Elements value is required."));

        // Initial guess of blown fuses warning
        IWebElement initialGuessBlownFusesWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[14]/div/div")));
        Assert.That(initialGuessBlownFusesWarning.Text, Is.EqualTo("A numeric Initial Guess of Blown Fuses per Group value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[14]/div/input")).SendKeys("gfdgf");

        // Initial guess of blown fuses warning
        initialGuessBlownFusesWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[14]/div/div")));
        Assert.That(initialGuessBlownFusesWarning.Text, Is.EqualTo("A numeric Initial Guess of Blown Fuses per Group value is required."));

        // Guess of groups with blown fuse warning
        IWebElement guessGroupsBlownFuseWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[15]/div/div")));
        Assert.That(guessGroupsBlownFuseWarning.Text, Is.EqualTo("A numeric Initial Guess of Groups with Blown Fuse value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[15]/div/input")).SendKeys("gfdgf");

        // Guess of groups with blown fuse warning
        guessGroupsBlownFuseWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[15]/div/div")));
        Assert.That(guessGroupsBlownFuseWarning.Text, Is.EqualTo("A numeric Initial Guess of Groups with Blown Fuse value is required."));
    }
    [Test]
    public void assetsmBus()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        // Bus
        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'Bus']")).Click();
        }

        // Save hover warning
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }

        // Key warning
        IWebElement keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));
        
        //50+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Key Warning
        keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // 200+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Name warning
        nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Voltage warning
        IWebElement voltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarning.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")).SendKeys("a");

        // Voltage warning
        IWebElement voltageWarningInvalid = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarningInvalid.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));
    }
    [Test]
    public void assetsnBreaker()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        // Breaker
        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'Breaker']")).Click();
        }

        // Key warning
        IWebElement keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        //50+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Key Warning
        keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // 200+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Name warning
        nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Voltage warning
        IWebElement voltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarning.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")).SendKeys("a");

        // Voltage warning
        IWebElement voltageWarningInvalid = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarningInvalid.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Thermal warning
        IWebElement thermalWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div[2]/div/div/div/div")));
        Assert.That(thermalWarning.Text, Is.EqualTo("A numeric Thermal Rating value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[2]/div/div/div/input")).SendKeys("adadawdawd");

        // Thermal warning
        thermalWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div[2]/div/div/div/div")));
        Assert.That(thermalWarning.Text, Is.EqualTo("A numeric Thermal Rating value is required."));

        // Speed warning
        IWebElement speedWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div[2]/div/div")));
        Assert.That(speedWarning.Text, Is.EqualTo("A numeric Speed value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[2]/div/input")).SendKeys("sdfsdfsdfsd");

        // Speed warning
        speedWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div[2]/div/div")));
        Assert.That(speedWarning.Text, Is.EqualTo("A numeric Speed value is required."));

        // Trip time warning
        IWebElement tripTimeWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[3]/div/div")));
        Assert.That(tripTimeWarning.Text, Is.EqualTo("An integer Trip Time Limit value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[3]/div/input")).SendKeys("sfsdfse");

        // Trip time warning
        tripTimeWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[3]/div/div")));
        Assert.That(tripTimeWarning.Text, Is.EqualTo("An integer Trip Time Limit value is required."));

        // Pickup time warning
        IWebElement pickupTimeWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[4]/div/div")));
        Assert.That(pickupTimeWarning.Text, Is.EqualTo("An integer Pickup Time Limit value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[4]/div/input")).SendKeys("sfsdfsdfsdf");

        // Pickup time warning
        pickupTimeWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[4]/div/div")));
        Assert.That(pickupTimeWarning.Text, Is.EqualTo("An integer Pickup Time Limit value is required."));

        // Trip Coil warning 
        IWebElement tripCoilWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[5]/div/div")));
        Assert.That(tripCoilWarning.Text, Is.EqualTo("A numeric Trip Coil Condition Limit value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[5]/div/input")).SendKeys("sxvdgsv");

        // Trip Coil warning 
        tripCoilWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[5]/div/div")));
        Assert.That(tripCoilWarning.Text, Is.EqualTo("A numeric Trip Coil Condition Limit value is required."));

        // Required fields not met warning
        {
            var element = driver.FindElement(By.XPath("(//button[@type=\'button\'])[3]"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }
    }
    [Test]
    public void assetsRelayforaCapacitorBank()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'Relay for a Capacitor Bank']")).Click();
        }
        // Key warning
        IWebElement keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        //50+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Key Warning
        keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // 200+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Name warning
        nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Voltage warning
        IWebElement voltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarning.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")).SendKeys("a");

        // Voltage warning
        IWebElement voltageWarningInvalid = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarningInvalid.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Capbank warning
        IWebElement capbankWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div[2]/div/div/div/div")));
        Assert.That(capbankWarning.Text, Is.EqualTo("An integer Protected CapBank value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[1]/div/input"));

        //Capbank warning
        voltageWarningInvalid = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarningInvalid.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Relay warning
        IWebElement relayWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div[2]/div/div")));
        Assert.That(relayWarning.Text, Is.EqualTo("A numeric Relay On Voltage Threshhold value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[2]/div/input"));

        // Relay warning
        relayWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div[2]/div/div")));
        Assert.That(relayWarning.Text, Is.EqualTo("A numeric Relay On Voltage Threshhold value is required."));

        // Save hover warning
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }
    }
    [Test]
    public void assetsoDERgovernedbyIEEEStandard()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        // DER governed by IEEE standard 1547-2018
        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'DER governed by IEEE Standard 1547-2018']")).Click();
        }

        // Key warning
        IWebElement keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        //50+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Key Warning
        keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // 200+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Name warning
        nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Voltage warning
        IWebElement voltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarning.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")).SendKeys("a");

        // Voltage warning
        IWebElement voltageWarningInvalid = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarningInvalid.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Save hover warning
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }
    }
    [Test]
    public void assetspGeneration()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        // Station Auxilary
        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'Station Auxilary']")).Click();
        }
        // Key warning
        IWebElement keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        //50+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Key Warning
        keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // 200+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Name warning
        nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Voltage warning
        IWebElement voltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarning.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")).SendKeys("a");

        // Voltage warning
        IWebElement voltageWarningInvalid = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarningInvalid.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Save hover warning
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }
    }
    [Test]
    public void assetsStationAuxilary()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        // Generation
        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'Generation']")).Click();
        }

        // Key warning
        IWebElement keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        //50+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Key Warning
        keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // 200+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Name warning
        nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Voltage warning
        IWebElement voltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarning.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")).SendKeys("a");

        // Voltage warning
        IWebElement voltageWarningInvalid = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarningInvalid.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Save hover warning
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }
    }
    [Test]
    public void assetsStationBattery()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        // Station Battery
        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'Station Battery']")).Click();
        }

        // Key warning
        IWebElement keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        //50+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Key Warning
        keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // 200+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Name warning
        nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Voltage warning
        IWebElement voltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarning.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")).SendKeys("a");

        // Voltage warning
        IWebElement voltageWarningInvalid = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarningInvalid.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Save hover warning
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }
    }
    [Test]
    public void assetsTransformer()
    {
        //add asset btn
        IWebElement assetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        assetBtn.Click();

        // Transformer
        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'Transformer']")).Click();
        }

        // Key warning
        IWebElement keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        //50+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[2]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Key Warning
        keyWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/div[2]/div")));
        Assert.That(keyWarning.Text, Is.EqualTo("A unique Key of less than 50 characters is required."));

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // 200+ characters
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/input")).SendKeys("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qua");

        // Name warning
        nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[3]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Voltage warning
        IWebElement voltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarning.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/input")).SendKeys("a");

        // Voltage warning
        IWebElement voltageWarningInvalid = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div[4]/div")));
        Assert.That(voltageWarningInvalid.Text, Is.EqualTo("A numeric Nominal Voltage value is required."));

        // A numeric R0 value is required.
        IWebElement r0Warning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div[2]/div/div/div/div")));
        Assert.That(r0Warning.Text, Is.EqualTo("A numeric R0 value is required."));

        // Non numerical value
        driver.FindElement(By.XPath("//div[2]/div/div/div/input")).SendKeys("dsfd");

        // A numeric R0 value is required.
        r0Warning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div[2]/div/div/div/div")));
        Assert.That(r0Warning.Text, Is.EqualTo("A numeric R0 value is required."));

        // A numeric X0 value is required.
        IWebElement x0Warning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div[2]/div/div")));
        Assert.That(x0Warning.Text, Is.EqualTo("A numeric X0 value is required."));

        // Send keys
        driver.FindElement(By.XPath("//div[2]/div/input")).SendKeys("dsfd");

        // A numeric X0 value is required.
        x0Warning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div[2]/div/div")));
        Assert.That(x0Warning.Text, Is.EqualTo("A numeric X0 value is required."));

        // A numeric R1 value is required.
        IWebElement r1Warning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[3]/div/div")));
        Assert.That(r1Warning.Text, Is.EqualTo("A numeric R1 value is required."));

        // Send keys
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[3]/div/input")).SendKeys("dsfd");

        // A numeric R1 value is required.
        r1Warning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[3]/div/div")));
        Assert.That(r1Warning.Text, Is.EqualTo("A numeric R1 value is required."));

        // A numeric X1 value is required.
        IWebElement x1Warning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[4]/div/div")));
        Assert.That(x1Warning.Text, Is.EqualTo("A numeric X1 value is required."));

        // Send keys
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[4]/div/input")).SendKeys("dsfd");

        // A numeric X1 value is required.
        x1Warning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[4]/div/div")));
        Assert.That(x1Warning.Text, Is.EqualTo("A numeric X1 value is required."));

        // A numeric Thermal Rating value is required.
        IWebElement thermalRatingWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[5]/div/div")));
        Assert.That(thermalRatingWarning.Text, Is.EqualTo("A numeric Thermal Rating value is required."));

        // Send keys
        driver.FindElement(By.XPath("//div[5]/div/input")).SendKeys("dsfd");

        // A numeric Thermal Rating value is required.
        thermalRatingWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[5]/div/div")));
        Assert.That(thermalRatingWarning.Text, Is.EqualTo("A numeric Thermal Rating value is required."));

        // A numeric Tap value is required.
        IWebElement tapWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[6]/div/div")));
        Assert.That(tapWarning.Text, Is.EqualTo("A numeric Tap value is required."));

        // Send keys
        driver.FindElement(By.XPath("//div[6]/div/input")).SendKeys("dsfd");

        // A numeric Tap value is required.
        tapWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[6]/div/div")));
        Assert.That(tapWarning.Text, Is.EqualTo("A numeric Tap value is required."));

        // A numeric Primary Voltage value is required.
        IWebElement primaryVoltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[7]/div/div")));
        Assert.That(primaryVoltageWarning.Text, Is.EqualTo("A numeric Primary Voltage value is required."));

        // Send keys
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[7]/div/input")).SendKeys("dsfd");

        // A numeric Primary Voltage value is required.
        primaryVoltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[7]/div/div")));
        Assert.That(primaryVoltageWarning.Text, Is.EqualTo("A numeric Primary Voltage value is required."));

        // A numeric Secondary Voltage is required.
        IWebElement secondaryVoltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[8]/div/div")));
        Assert.That(secondaryVoltageWarning.Text, Is.EqualTo("A numeric Secondary Voltage is required."));

        // Send keys
        driver.FindElement(By.XPath("//div[8]/div/input")).SendKeys("dsfd");

        // A numeric Secondary Voltage is required.
        secondaryVoltageWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[8]/div/div")));
        Assert.That(secondaryVoltageWarning.Text, Is.EqualTo("A numeric Secondary Voltage is required."));

        // A numeric Primary Winding value is required.
        IWebElement primaryWindingWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[10]/div/div")));
        Assert.That(primaryWindingWarning.Text, Is.EqualTo("A numeric Primary Winding value is required."));

        // Send keys
        driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div/div[10]/div/input")).SendKeys("dsfd");

        // A numeric Primary Winding value is required.
        primaryWindingWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[10]/div/div")));
        Assert.That(primaryWindingWarning.Text, Is.EqualTo("A numeric Primary Winding value is required."));

        // A numeric Secondary Winding value is required.
        IWebElement secondaryWindingWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[11]/div/div")));
        Assert.That(secondaryWindingWarning.Text, Is.EqualTo("A numeric Secondary Winding value is required."));

        // Send keys
        driver.FindElement(By.XPath("//div[11]/div/input")).SendKeys("dsfd");

        // A numeric Secondary Winding value is required.
        secondaryWindingWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[11]/div/div")));
        Assert.That(secondaryWindingWarning.Text, Is.EqualTo("A numeric Secondary Winding value is required."));

        // Save hover warning
        {
            var element = driver.FindElement(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]"));
            Actions builder = new Actions(driver);
            builder.MoveToElement(element).Perform();
        }
    }
    [Test]
    public void assetszInternalSorting()
    {
        WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(25));
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]")));

        // Click into asset
        driver.FindElement(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]")).Click();
        // Navigate to the Meters tab
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("(//a[contains(text(),'Meters')])[2]"))).Click();

        // Assert presence of sort arrow for Name
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));

        // Click on Name column header to sort
        driver.FindElement(By.XPath("//th[contains(.,'Name')]")).Click();

        // Assert presence of sort arrow for Name column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));

        // Click on Make column header to sort
        driver.FindElement(By.XPath("//th[contains(.,'Make')]")).Click();

        // Assert presence of sort arrow for Make column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[3]/div")));

        // Click on Model column header to sort
        driver.FindElement(By.XPath("//th[contains(.,'Model')]")).Click();

        // Assert presence of sort arrow for Model column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[4]/div")));
    }
}

// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
using System.IO;
using SeleniumExtras.WaitHelpers;
using UserInterface;
[TestFixture]

public class SubstationFunctionalityTest
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();

        // Maximize the browser window
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl(Settings.BaseURL + "/index.cshtml?name=Locations");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys(Settings.adminUsername);

        // Input password
        driver.FindElement(By.Id("password")).SendKeys(Settings.adminPassword);

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var metersPageLoad = driver.FindElements(By.LinkText("Substations"));
        var foundMeters = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void substationsaInfoPresent()
    {
        // Name
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//th/div")));
        var name = driver.FindElements(By.XPath("//th/div"));
        Assert.That(name.Count > 0);

        // Key
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//th[2]/div[2]")));
        var key = driver.FindElements(By.XPath("//th[2]/div[2]"));
        Assert.That(key.Count > 0);

        // Meters
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//th[3]/div")));
        var meters = driver.FindElements(By.XPath("//th[3]/div"));
        Assert.That(meters.Count > 0);

        // Assets
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//th[4]/div")));
        var assets = driver.FindElements(By.XPath("//th[4]/div"));
        Assert.That(assets.Count > 0);

        // Name TR/TD
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//td")));
        var nameTable = driver.FindElements(By.XPath("//td"));
        Assert.That(nameTable.Count > 0);

        // Key TR/TD
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//td[2]")));
        var keyTable = driver.FindElements(By.XPath("//td[2]"));
        Assert.That(keyTable.Count > 0);

        // Meters TR/TD
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//td[3]")));
        var metersTable = driver.FindElements(By.XPath("//td[3]"));
        Assert.That(metersTable.Count > 0);

        // Assets TR/TD
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//td[4]")));
        var assetsTable = driver.FindElements(By.XPath("//td[4]"));
        Assert.That(assetsTable.Count > 0);

        // Add filter button
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//button[contains(.,\'Add Filter\')]")));
        var filterBtn = driver.FindElements(By.XPath("//button[contains(.,\'Add Filter\')]"));
        Assert.That(filterBtn.Count > 0);

        // Add Substation Button
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//button[contains(.,\'Add Substation\')]")));
        var substationBtn = driver.FindElements(By.XPath("//button[contains(.,\'Add Substation\')]"));
        Assert.That(substationBtn.Count > 0);

        // External Database Button
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//button[contains(.,\'External Database\')]")));
        var externalDbBtn = driver.FindElements(By.XPath("//button[contains(.,\'External Database\')]"));
        Assert.That(externalDbBtn.Count > 0);

        // Search
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//input[@type=\'search\']")));
        var search = driver.FindElements(By.XPath("//input[@type=\'search\']"));
        Assert.That(search.Count > 0);

        // Found (n) substations
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//p")));
        var nSubstations = driver.FindElements(By.XPath("//p"));
        Assert.That(nSubstations.Count > 0);

        // Search, Actions navbar present
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div/div/div/div/nav")));
        var toolbar = driver.FindElements(By.XPath("//div/div/div/div/nav"));
        Assert.That(toolbar.Count > 0);
    }

    [Test]
    public void substationsButtonsbClickable()
    {
        // Add filter
        IWebElement addFilter = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[2]/button")));
        addFilter.Click();

        // close filter
        IWebElement closeFilter = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[2]/div[1]/div/div/div[3]/button[2]")));
        closeFilter.Click();

        // Add substation
        IWebElement addSubstation = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        addSubstation.Click();

        // Close substation
        IWebElement closeSubstation = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
        closeSubstation.Click();

        // External Database
        IWebElement externalDb = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[2]/button")));
        externalDb.Click();

        // Close database
        IWebElement closeDb = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[2]")));
        closeDb.Click();
    }

    [Test]
    public void substationscAddSubstationwithValidFields()
    {
        // Create a WebDriverWait instance with a timeout of 45 seconds
        WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(45));
        //driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=Locations");

        //Add Substation
        IWebElement addSubstation = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        addSubstation.Click();

        // Key field
        IWebElement keyField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div[1]/div[1]/input")));
        keyField.SendKeys("Daniel's Key");

        // Name field
        IWebElement nameField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div[1]/div[2]/input")));
        nameField.SendKeys("Daniel's Station");


        // Latitude
        IWebElement latitude = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div[2]/div[1]/input")));
        latitude.SendKeys("100");

        // Longitude Field
        IWebElement longitude = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div[2]/div[2]/input")));
        longitude.SendKeys("24");

        // Save
        IWebElement save = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        save.Click();
    }
    [Test]
    public void substationsdAddDuplicateSubstation()
    {
        // Create a WebDriverWait instance with a timeout of 45 seconds
        WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(45));

        // Add Substation
        IWebElement addSubstation = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/div[1]/button")));
        addSubstation.Click();

        // Key field
        IWebElement keyField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div[1]/div[1]/input")));
        keyField.SendKeys("Daniel's Key");

        // Name field
        IWebElement nameField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div[1]/div[2]/input")));
        nameField.SendKeys("Daniel's Station");


        // Latitude
        IWebElement latitude = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div[2]/div[1]/input")));
        latitude.SendKeys("100");

        // Longitude Field
        IWebElement longitude = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div[2]/div[2]/input")));
        longitude.SendKeys("24");

        // Save
        IWebElement save = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        //save.Click(); // Comment out the click action

        // Hover over the save button
        // Create an instance of the Actions class, passing the driver as an argument.
        // This allows the Actions class to interact with the browser.
        Actions builder = new Actions(driver);

        // Move the mouse pointer to the save button and perform the hover action.
        // This simulates hovering over the save button in the browser.
        builder.MoveToElement(save).Perform();

        // Cancel
        IWebElement cancel = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
        cancel.Click();
    }

    [Test]
    public void substationseDeleteSubstation()
    {
        // Create a WebDriverWait instance with a timeout of 45 seconds
        WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(45));

        // Click substation
        IWebElement newStation = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[6]/td[1]")));
        newStation.Click();

        // Delete Substation
        IWebElement deleteSubstation = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/div[2]/button")));
        deleteSubstation.Click();

        // Confirm deletion
        IWebElement confrimDelete = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[8]/div[1]/div/div/div[3]/button[1]")));
        confrimDelete.Click();  
    }

    [Test]
    public void substationsEditSubstationAddNoteEditNoteDeleteNote()
    {
        // Create a WebDriverWait instance with a timeout of 45 seconds
        WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(45));

        //click on table item
        IWebElement tableItem = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]")));
        tableItem.Click();

        // Adding a note
        IWebElement addNote = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[2]/div[2]/div/div/textarea")));
        addNote.SendKeys("First note");

        // Clear Note
        IWebElement clear = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[3]/div[2]/button")));
        clear.Click();

        // Add another note
        IWebElement addNoteAgn = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[2]/div[2]/div/div/textarea")));
        addNoteAgn.SendKeys("First note");

        // Save note
        IWebElement saveNote = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[3]/div[1]/button")));
        saveNote.Click();

        // Edit button
        IWebElement editBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[2]/div[1]/table/tbody/tr/td[4]/button[1]")));
        editBtn.Click();

        // Edit note
        IWebElement editNote = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[2]/div[2]/div/div/textarea")));
        editNote.SendKeys(" test");

        // Save edit
        IWebElement saveEdit = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[2]/div[1]/div/div/div[3]/button[1]")));
        saveEdit.Click();

        // Delete note
        IWebElement deleteNote = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[2]/div[1]/table/tbody/tr/td[4]/button[2]")));
        deleteNote.Click();
    }
    [Test]
    public void substationsfNewSubstationonClickinfopresent()
    {
        // Create a WebDriverWait instance with a timeout
        WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(25));

        // Click on table item
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]"))).Click();

        // Note card info appears
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[2]")));
        var noteCard = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[2]"));
        Assert.That(noteCard.Count > 0);

        // Note name
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/div[1]/h2")));
        var noteName = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/div[1]/h2"));
        Assert.That(noteName.Count > 0);

        // Substation info tab
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[2]/a")));
        var substationInfo = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[2]/a"));
        Assert.That(substationInfo.Count > 0);

        // Additional fields tab
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[3]/a")));
        var addlFieldsTab = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[3]/a"));
        Assert.That(addlFieldsTab.Count > 0);

        // Meters tab
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[4]/a")));
        var metersTab = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[4]/a"));
        Assert.That(metersTab.Count > 0);

        // Assets tab
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[5]/a")));
        var assetsTab = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[5]/a"));
        Assert.That(assetsTab.Count > 0);

        // Images tab
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[6]/a")));
        var imagesTab = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[6]/a"));
        Assert.That(imagesTab.Count > 0);

        // Drawings tab
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[7]/a")));
        var drawingsTab = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[7]/a"));
        Assert.That(drawingsTab.Count > 0);

        // Delete button
        wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/div[2]/button")));
        var deleteBtn = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/div[2]/button"));
        Assert.That(deleteBtn.Count > 0);


    }
    [Test]
    public void substationsgInternalAddDeleteAsset()
    {
        // Create a WebDriverWait instance with a timeout
        WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(25));

        //click on table item
        IWebElement tableItem = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]")));
        tableItem.Click();

        // Navigate to assets tab
        IWebElement assetsTab = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[5]/a")));
        assetsTab.Click();

        // Add Asset
        IWebElement addAsset = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[3]/div/button")));
        addAsset.Click();
        
        // HistogramTest asset selection
        {
            var dropdown = driver.FindElement(By.XPath("//select"));
            dropdown.FindElement(By.XPath("//option[. = 'HistogramTest']")).Click();
        }

        // Add
        IWebElement save = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[7]/div[1]/div/div/div[3]/button[1]")));
        save.Click();

        // Delete
        IWebElement delete = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[2]/div/table/tbody/tr/td[4]/button[2]")));
        delete.Click();
    }
    [Test]
    public void substationshInternalSorting()
    {
        // Explicit wait for the element to be clickable after login
        WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(25));
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//*[@id=\"window\"]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]")));

        // Click on the station to open it
        driver.FindElement(By.XPath("//*[@id=\"window\"]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]")).Click();

        // Navigate to the Meters tab
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("(//a[contains(text(),'Meters')])[2]"))).Click();

        // Assert presence of sort arrow for Name
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));

        // Click on Name column header to sort
        driver.FindElement(By.XPath("//th[contains(.,'Name')]")).Click();

        // Assert presence of sort arrow for Name column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));

        // Click on Make column header to sort
        driver.FindElement(By.XPath("//th[contains(.,'Make')]")).Click();

        // Assert presence of sort arrow for Make column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[3]/div")));

        // Click on Model column header to sort
        driver.FindElement(By.XPath("//th[contains(.,'Model')]")).Click();

        // Assert presence of sort arrow for Model column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[4]/div")));
    }

    [Test]
    public void substationsSearchbar()
    {
        // Search bar
        driver.FindElement(By.XPath("//input")).SendKeys("Star");
    }
}

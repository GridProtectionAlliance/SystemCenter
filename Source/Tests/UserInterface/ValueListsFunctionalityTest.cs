// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
using UserInterface;
[TestFixture]
public class ValueListsFunctionalityTest {
  private IWebDriver driver;
    private WebDriverWait wait;

    public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl(Settings.BaseURL + "/index.cshtml?name=ValueLists");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys(Settings.adminUsername);

        // Input password
        driver.FindElement(By.Id("password")).SendKeys(Settings.adminPassword);

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var metersPageLoad = driver.FindElements(By.LinkText("Users"));
        var foundMeters = driver.FindElements(By.XPath("//p"));
    }

    [Test]
  public void valueListsSorting() {
        IWebElement nameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeader.Click();

        // Wait for and assert that the arrow is present in the Name column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        var nameArrowPresent = driver.FindElements(By.XPath("//th[1]/div"));
        Assert.That(nameArrowPresent.Count > 0);

        // Click on the Name sort header again (to toggle sorting)
        IWebElement nameSortHeaderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeaderAgain.Click();

        // Wait for and click on the Description header
        IWebElement desc = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        desc.Click();

        // Wait for and assert that the arrow is present in the URL column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));
        var externalDbArrow = driver.FindElements(By.XPath("//th[2]/div"));
        Assert.That(externalDbArrow.Count > 0);

        // Click on the Description sort header again (to toggle sorting)
        IWebElement descAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]/div[2]")));
        descAgain.Click();

        // Wait for and click on the Items header
        IWebElement items = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        items.Click();

        // Wait for and assert that the arrow is present in the URL column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));
        var mappedArrow = driver.FindElements(By.XPath("//th[2]/div"));
        Assert.That(mappedArrow.Count > 0);

        // Click on the items sort header again (to toggle sorting)
        IWebElement itemsAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]/div[2]")));
        itemsAgain.Click();
    }
}

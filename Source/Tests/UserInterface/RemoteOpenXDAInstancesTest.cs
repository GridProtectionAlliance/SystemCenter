// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
[TestFixture]
public class RemoteopenXDAInstancesTest
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=RemoteXDAInstanceMain");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys("Admin");

        // Input password
        driver.FindElement(By.Id("password")).SendKeys("7h1515457r0ngP455w0rd");

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var correctPage = driver.FindElements(By.LinkText("Device Health Report"));
        var foundPElement = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void remoteopenXDAInstancesaInfoPresent()
    {
        // Wait for and assert that the toolbar is present
        IWebElement toolbar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav")));
        Assert.That(toolbar.Displayed);

        // Wait for and assert that the searchbar is present
        IWebElement searchbar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")));
        Assert.That(searchbar.Displayed);

        // Wait for and assert that the "Found n Remote Instance(s)" text is present
        IWebElement foundRemoteInstances = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/p")));
        Assert.That(foundRemoteInstances.Displayed);

        // Wait for and assert that the "Add Filter" button is present
        IWebElement addFilterButton = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        Assert.That(addFilterButton.Displayed);

        // Wait for and assert that the "Add Remote Connection" button is present
        IWebElement addRemoteConnectionButton = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        Assert.That(addRemoteConnectionButton.Displayed);

        // Wait for and assert that the table is present
        IWebElement table = wait.Until(ExpectedConditions.ElementExists(By.XPath("//*[@id='window']/div/div/div/div/div[2]/table/tbody")));
        Assert.That(table.Displayed);

    }

    [Test]
    public void remoteopenXDAInstancesSorting()
    {
        // Wait for and click on the Name sort header
        IWebElement nameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeader.Click();

        // Wait for and assert that the arrow is present in the Name column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        var nameArrowPresent = driver.FindElements(By.XPath("//th[1]/div"));
        Assert.That(nameArrowPresent.Count > 0);

        // Click on the Name sort header again (to toggle sorting)
        IWebElement nameSortHeaderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeaderAgain.Click();

        // Wait for and click on the URL sort header
        IWebElement urlSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        urlSortHeader.Click();

        // Wait for and assert that the arrow is present in the URL column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));
        var urlArrowPresent = driver.FindElements(By.XPath("//th[2]/div"));
        Assert.That(urlArrowPresent.Count > 0);

        // Click on the URL sort header again (to toggle sorting)
        IWebElement urlSortHeaderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]/div[2]")));
        urlSortHeaderAgain.Click();

    }

    [Test]
    public void remoteopenXDAInstancesbAddRemoteConnection()
    {

        // Wait for and click the "Add Remote Connection" button
        IWebElement addRemoteConnectionButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        addRemoteConnectionButton.Click();

        // Wait for and assert that the "Name warning" message is present
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='rXDAFormRoot']/form/div/div/div/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Wait for and input the Name
        IWebElement nameInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//input[@value='']")));
        nameInput.SendKeys("Daniel's openXDA instance");

        // Wait for and assert that the "Name warning" message is gone
        wait.Until(ExpectedConditions.InvisibilityOfElementWithText(By.XPath("//div[@id='rXDAFormRoot']/form/div/div/div/div"), "A Name of less than 200 characters is required."));

        // Wait for and assert that the "URL warning" message is present
        IWebElement urlWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='rXDAFormRoot']/form/div/div/div[2]/div")));
        Assert.That(urlWarning.Text, Is.EqualTo("A URL of less than 200 characters is required."));

        // Wait for and input the URL
        IWebElement urlInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='rXDAFormRoot']/form/div/div/div[2]/input")));
        urlInput.SendKeys("https://gridprotectionalliance.org/");

        // Wait for and assert that the "URL warning" message is gone
        wait.Until(ExpectedConditions.InvisibilityOfElementWithText(By.XPath("//div[@id='rXDAFormRoot']/form/div/div/div[2]/div"), "A URL of less than 200 characters is required."));

        // Wait for and assert that the "User warning" message is present
        IWebElement userWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='rXDAFormRoot']/form/div/div[2]/div/div")));
        Assert.That(userWarning.Text, Is.EqualTo("Name is a required field."));

        // Wait for and click the "Add or Change User" button
        IWebElement addUserButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='rXDAFormRoot']/form/div/div[2]/button")));
        addUserButton.Click();

        // Wait for and select the admin user
        IWebElement adminUser = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//tr[4]/td")));
        adminUser.Click();

        // Wait for and click the "Save user" button
        IWebElement saveUserButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[26]/div[1]/div/div/div[3]/button[1]")));
        saveUserButton.Click();

        // Wait for and assert that the "User warning" message is gone
        wait.Until(ExpectedConditions.InvisibilityOfElementWithText(By.XPath("//div[@id='rXDAFormRoot']/form/div/div[2]/div/div"), "Name is a required field."));

        // Wait for and click the "Save" button
        IWebElement saveButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        saveButton.Click();

    }
    [Test]
    public void remoteopenXDAInstancesdRemoteMeters()
    {
        // Wait for and assert that the first child instance is created
        IWebElement firstChildInstance = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]")));
        Assert.That(firstChildInstance.Text, Is.EqualTo("Daniel's openXDA instance"));

        // Click first child
        IWebElement firstChild = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]")));
        firstChild.Click();

        // Wait for Remote Meters to exist
        IWebElement remoteMetersExists = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[2]/a")));
        Assert.That(remoteMetersExists.Displayed);

        // Wait for and click the "Remote Meters" link
        IWebElement remoteMetersLink = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[2]/a")));
        remoteMetersLink.Click();

        // Wait for and click the "Add Meter" button
        IWebElement addMeterButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div/button")));
        addMeterButton.Click();

        // Wait for and click the first meter
        IWebElement firstMeter = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//td")));
        firstMeter.Click();

        // Wait for and click the "Save meter" button
        IWebElement saveMeterButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[19]/div[1]/div/div/div[3]/button[1]")));
        saveMeterButton.Click();

        // Wait for and click the "Delete Meter" button
        IWebElement deleteMeterButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/table/tbody/tr/td[10]/button")));
        deleteMeterButton.Click();

        // Wait for and click the "Confirm meter delete" button
        IWebElement confirmMeterDeleteButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[7]/div[1]/div/div/div[3]/button[1]")));
        confirmMeterDeleteButton.Click();

        // Wait for and click the "Remote Assets" link
        IWebElement remoteAssetsBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[3]/a")));
        remoteAssetsBtn.Click();

        // Wait for and click the "Delete asset" button that is added after the meter
        IWebElement deleteAssetButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/table/tbody/tr/td[8]/button")));
        deleteAssetButton.Click();

        // Wait for and click the "Confirm asset deletion" button
        IWebElement confirmAssetDeletionButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[7]/div[1]/div/div/div[3]/button[1]")));
        confirmAssetDeletionButton.Click();

    }
    [Test]
    public void remoteopenXDAInstanceseRemoteAssets()
    {

        // Wait for and assert that the first child instance is created
        IWebElement firstChildInstance = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        Assert.That(firstChildInstance.Text, Is.EqualTo("Daniel's openXDA instance"));

        // Wait for and click the first child instance
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td"))).Click();

        // Wait for and click the "Remote Assets" link
        IWebElement remoteAssetsBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[3]/a")));
        remoteAssetsBtn.Click();

        // Wait for and click the "Add Assets" button
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div/button"))).Click();

        // Wait for and click the "Add list" button
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//li[2]/fieldset/form/div/div"))).Click();

        // Wait for and click the "Save" button
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[15]/div[1]/div/div/div[3]/button[1]"))).Click();

        // Wait for and click the "Delete asset" button
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/table/tbody/tr/td[8]/button"))).Click();

        // Wait for and click the "Confirm deletion" button
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[7]/div[1]/div/div/div[3]/button[1]"))).Click();

    }
    [Test]
    public void remoteopenXDAInstancesfEditConnection()
    {

        // Wait for and assert that the first child instance is created
        IWebElement firstChildInstance = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        Assert.That(firstChildInstance.Text, Is.EqualTo("Daniel's openXDA instance"));

        // Wait for and click into the instance
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td"))).Click();

        // Wait for and interact with the input field to send "1"
        IWebElement inputField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='rXDAFormRoot']/form/div/div/div/input")));
        inputField.SendKeys("1");

        // Wait for and click the "Clear changes" button
        IWebElement clearChangesButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div[2]/button")));
        clearChangesButton.Click();

        // Wait for and interact with the input field again to send "1"
        inputField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='rXDAFormRoot']/form/div/div/div/input")));
        inputField.SendKeys("1");

        // Wait for and click the "Save changes" button
        IWebElement saveChangesButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div/button")));
        saveChangesButton.Click();

    }
    [Test]
    public void remoteopenXDAInstancesgDeleteConnection()
    {

        // Wait for and assert that the first child instance is created
        IWebElement firstChildInstance = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        Assert.That(firstChildInstance.Text, Is.EqualTo("Daniel's openXDA instance1"));

        // Wait for and click into the instance
        wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td"))).Click();

        // Wait for and click the "Delete Remote Instance" button
        IWebElement deleteRemoteInstanceButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/div[2]/button")));
        deleteRemoteInstanceButton.Click();

        // Wait for and click the "Confirm Delete" button
        IWebElement confirmDeleteButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[3]/button")));
        confirmDeleteButton.Click();

    }
}

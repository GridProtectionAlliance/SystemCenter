// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
[TestFixture]
public class ChannelGroupsTest
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(40));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=ChannelGroups");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys("Admin");

        // Input password
        driver.FindElement(By.Id("password")).SendKeys("7h1515457r0ngP455w0rd");

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var metersPageLoad = driver.FindElements(By.LinkText("MATLAB Analytics"));
        var foundMeters = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void channelGroupsaInfoPresent()
    {
        // Toolbar
        IWebElement toolbar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav")));
        var toolbarElements = driver.FindElements(By.XPath("//div[@id='window']/div/div/div/div/div/nav"));
        Assert.That(toolbarElements.Count > 0);

        // Searchbar
        IWebElement searchbar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")));
        var searchbarElements = driver.FindElements(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input"));
        Assert.That(searchbarElements.Count > 0);

        // Add filter button
        IWebElement addFilterBtn = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        var addFilterBtnElements = driver.FindElements(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button"));
        Assert.That(addFilterBtnElements.Count > 0);

        // Add Group button
        IWebElement addGroupBtn = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        var addGroupBtnElements = driver.FindElements(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button"));
        Assert.That(addGroupBtnElements.Count > 0);

        // Table with data
        IWebElement tableWithData = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody")));
        var tableWithDataElements = driver.FindElements(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody"));
        Assert.That(tableWithDataElements.Count > 0);

        // "Found n channel group(s)" element
        IWebElement foundChannelGroups = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/p")));
        var foundChannelGroupsElements = driver.FindElements(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/p"));
        Assert.That(foundChannelGroupsElements.Count > 0);
    }
    [Test]
    public void channelGroupsbAddGroup()
    {
        // Click Add Group Btn
        IWebElement addGroupBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        addGroupBtn.Click();

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[2]/form/div/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Name
        IWebElement nameField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//form/div/input")));
        nameField.SendKeys("A Channel Group");

        // Name warning gone
        nameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[2]/form/div/div")));
        Assert.That(nameWarning.Text, Is.Not.EqualTo("A Name of less than 200 characters is required."));

        // Description
        IWebElement descField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//textarea")));
        descField.SendKeys("Desc");

        // Add Group button
        IWebElement addGroupSubmitBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        addGroupSubmitBtn.Click();
    }
    [Test]
    public void channelGroupscGroupItems()
    {
        // Click into test group
        IWebElement testGroup = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        testGroup.Click();

        // Confirm correct group loaded
        IWebElement groupHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(groupHeader.Text, Is.EqualTo("A Channel Group"));

        // Navigate to Group Items
        IWebElement groupItemsTab = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/ul/li[2]/a")));
        groupItemsTab.Click();

        // Add Item
        IWebElement addItemBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div/button")));
        addItemBtn.Click();

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[10]/div[1]/div/div/div[2]/div[1]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Name
        IWebElement nameField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//input")));
        nameField.SendKeys("New item");

        // Name warning gone
        nameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[10]/div[1]/div/div/div[2]/div[1]/div")));
        Assert.That(nameWarning.Text, Is.Not.EqualTo("A Name of less than 200 characters is required."));

        // Measurement Type
        IWebElement measurementTypeDropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//select")));
        measurementTypeDropdown.FindElement(By.XPath("//option[. = 'Current']")).Click();

        // Measurement Characteristic
        IWebElement measurementCharacteristicDropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[3]/select")));
        measurementCharacteristicDropdown.FindElement(By.XPath("//option[. = 'IT']")).Click();

        // Unit
        IWebElement unitDropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[4]/select")));
        unitDropdown.FindElement(By.XPath("//option[. = 'A']")).Click();

        // Add button
        IWebElement addButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button")));
        addButton.Click();

        // Edit Item button
        IWebElement editItemBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/div/div/table/tbody/tr/td[5]/button")));
        editItemBtn.Click();

        // Edit name
        IWebElement editNameField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//input")));
        editNameField.SendKeys("1");

        // Save button
        IWebElement saveBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button")));
        saveBtn.Click();

        // Delete item button
        IWebElement deleteItemBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/div/div/table/tbody/tr/td[5]/button[2]")));
        deleteItemBtn.Click();

        // Confirm delete button
        IWebElement confirmDeleteBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        confirmDeleteBtn.Click();
    }
    [Test]
    public void channelGroupsdEditGroup()
    {
        // Click into test group
        IWebElement testGroup = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        testGroup.Click();

        // Confirm correct group loaded
        IWebElement groupHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(groupHeader.Text, Is.EqualTo("A Channel Group"));

        // Add to description
        IWebElement descriptionField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/form/div[2]/textarea")));
        descriptionField.SendKeys("1");

        // Click reset
        IWebElement resetButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div[2]/button")));
        resetButton.Click();

        // Add to description again
        descriptionField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/form/div[2]/textarea")));
        descriptionField.SendKeys("1");

        // Update
        IWebElement updateButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div/button")));
        updateButton.Click();
    }
    [Test]
    public void channelGroupseDeleteGroup()
    {
        // Click into test group
        IWebElement testGroup = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        testGroup.Click();

        // Confirm correct group loaded
        IWebElement groupHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(groupHeader.Text, Is.EqualTo("A Channel Group"));

        // Delete button
        IWebElement deleteButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/div[2]/button")));
        deleteButton.Click();

        // Confirm delete button
        IWebElement confirmDeleteButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[3]/button")));
        confirmDeleteButton.Click();
    }
    [Test]
    public void channelGroupsSorting()
    {

        // Wait for and click on the Name sort header
        IWebElement nameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeader.Click();

        // Wait for and assert that the arrow is present in the Name column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        var nameArrowPresent = driver.FindElements(By.XPath("//th[1]/div"));
        Assert.That(nameArrowPresent.Count > 0);

        // Capture the text of the first cell before the second sort
        var firstCellBeforeSort = driver.FindElement(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]")).Text;

        // Click on the Name sort header again (to toggle sorting)
        IWebElement nameSortHeaderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeaderAgain.Click();

        // Wait for and assert that the arrow is still present in the Name column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        var nameArrowPresentAgain = driver.FindElements(By.XPath("//th[1]/div"));
        Assert.That(nameArrowPresentAgain.Count > 0);

        // Capture the text of the first cell after the second sort
        var firstCellAfterSort = driver.FindElement(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]")).Text;

        // Assert that the text of the first cell has changed, indicating that the sort was performed correctly
        // This assertion will fail if the sort is not working correctly
        Assert.That(firstCellBeforeSort, Is.Not.EqualTo(firstCellAfterSort));

        // Explanation: This test is designed to fail because it simulates a scenario where the sorting functionality 
        // does not work correctly on the second click of the "Name" header. The assertion will fail if the text of the 
        // first cell remains the same after the second sort, indicating that the sorting did not happen as expected.





        // Wait for and click on the Name sort header
        //IWebElement nameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        //nameSortHeader.Click();

        //// Wait for and assert that the arrow is present in the Name column
        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        //var nameArrowPresent = driver.FindElements(By.XPath("//th[1]/div"));
        //Assert.That(nameArrowPresent.Count > 0);

        //// Click on the Name sort header again (to toggle sorting)
        //IWebElement nameSortHeaderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        //nameSortHeaderAgain.Click();

        //// Wait for and click on the desc header
        //IWebElement desc = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        //desc.Click();

        //// Wait for and assert that the arrow is present in the URL column
        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));
        //var descArrow = driver.FindElements(By.XPath("//th[2]/div"));
        //Assert.That(descArrow.Count > 0);

        //// Click on the desc sort header again (to toggle sorting)
        //IWebElement descAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        //descAgain.Click();

        //// Wait for and click on the items header
        //IWebElement items = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[3]")));
        //items.Click();

        //// Wait for and assert that the arrow is present in the items column
        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[3]/div")));
        //var mappedArrow = driver.FindElements(By.XPath("//th[3]/div"));
        //Assert.That(mappedArrow.Count > 0);

        //// Click on the items sort header again (to toggle sorting)
        //IWebElement itemsAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[3]")));
        //itemsAgain.Click();
    }
}

// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
[TestFixture]
public class ExternalDatabasesTest
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=ByExternalDB");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys("Admin");

        // Input password
        driver.FindElement(By.Id("password")).SendKeys("7h1515457r0ngP455w0rd");

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var correctPage = driver.FindElements(By.LinkText("External Databases"));
        var foundPElement = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void externalDatabasesaInfoPresent()
    {
        // Wait for and assert that the "Found external databases" element is present and displayed
        IWebElement externalDatabases = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/p")));
        Assert.That(externalDatabases.Displayed);

        // Wait for and assert that the toolbar element is present and displayed
        IWebElement toolbar = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/div/div/nav")));
        Assert.That(toolbar.Displayed);

        // Wait for and assert that the "Add filter" button is present and displayed
        IWebElement addFilterBtn = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        Assert.That(addFilterBtn.Displayed);

        // Wait for and assert that the "Add external db" button is present and displayed
        IWebElement addExternalDbBtn = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        Assert.That(addExternalDbBtn.Displayed);

        // Wait for and assert that the table data element is present and displayed
        IWebElement tableData = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div[2]/div/table/tbody")));
        Assert.That(tableData.Displayed);

        // Wait for and assert that the search bar element is present and displayed
        IWebElement searchBar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")));
        Assert.That(searchBar.Displayed);

        // Interact with the search bar
        searchBar.SendKeys("db");
    }
    [Test]
    public void externalDatabasesbAddExternalDB()
    {
        // Wait for and click the "Add external DB" button
        IWebElement addExternalDbBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//form/button")));
        addExternalDbBtn.Click();

        // Wait for and enter the name
        IWebElement nameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/input")));
        nameInput.SendKeys("Daniel's DB");

        // Wait for and enter the schedule
        IWebElement scheduleInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/input")));
        scheduleInput.SendKeys("0 0 1 * *");

        // Wait for and enter the connection string
        IWebElement connectionStringInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//textarea")));
        connectionStringInput.SendKeys("Test string");

        // Wait for and click the encrypted checkbox
        IWebElement encryptedCheckbox = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[4]/input")));
        encryptedCheckbox.Click();

        // Wait for and click the "Add ExternalDB" button to save
        IWebElement saveButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//button[contains(.,'Add ExternalDB')]")));
        saveButton.Click();
    }
    [Test]
    public void externalDatabasescEditDb()
    {
        // Wait for and click the created DB row
        IWebElement createdDbRow = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//tr[7]/td")));
        createdDbRow.Click();

        // Wait for and enter text in the "Edit Connection String" textarea
        IWebElement editConnectionString = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[2]/div[3]/textarea")));
        editConnectionString.SendKeys("1");

        // Wait for and click the "Reset" button
        IWebElement resetButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[3]/div[2]/button")));
        resetButton.Click();

        // Wait for and enter text in the "Edit Connection String" textarea again
        IWebElement editConnectionStringAgain = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[2]/div[3]/textarea")));
        editConnectionStringAgain.SendKeys("1");

        // Wait for and click the "Update" button
        IWebElement updateButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[3]/div/button")));
        updateButton.Click();
    }
    [Test]
    public void externalDatabasesdAddAndDeleteTable()
    {
        // Wait for and click the created DB row
        IWebElement createdDbRow = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//tr[7]/td")));
        createdDbRow.Click();

        // Wait for and click the "Tables" section link
        IWebElement tablesSectionLink = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("(//a[contains(text(),'Tables')])[2]")));
        tablesSectionLink.Click();

        // Wait for and click the "Add Table" button
        IWebElement addTableButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//button[contains(.,'Add Table')]")));
        addTableButton.Click();

        // Wait for and assert that the "Name warning" message is present
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[14]/div[1]/div/div/div[2]/div[1]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Wait for and input the Name
        IWebElement nameInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[14]/div[1]/div/div/div[2]/div[1]/input")));
        nameInput.SendKeys("Daniel's DB Table");

        // Wait for and assert that the "Name warning" message is gone
        wait.Until(ExpectedConditions.InvisibilityOfElementWithText(By.XPath("//div[18]/div/div/div/div[2]/div/div"), "A Name of less than 200 characters is required."));

        // Wait for and assert that the "Query warning" message is present
        IWebElement queryWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[2]/div[2]/div")));
        Assert.That(queryWarning.Text, Is.EqualTo("Query is a required field."));

        // Wait for and input the Query
        IWebElement queryInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector(".form-group:nth-child(2) > .form-control")));
        queryInput.SendKeys("INSERT INTO table_name");

        // Wait for and assert that the "Query warning" message is gone
        wait.Until(ExpectedConditions.InvisibilityOfElementWithText(By.XPath("//div[2]/div[2]/div"), "Query is a required field."));

        // Wait for and click the "Add Table" button
        IWebElement addTableConfirmButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[14]/div[1]/div/div/div[3]/button")));
        addTableConfirmButton.Click();

        // Wait for and click the "Delete Table" button
        IWebElement deleteTableButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div/div/div[2]/div/div/div/table/tbody/tr/td[3]/button")));
        deleteTableButton.Click();

        // Wait for and click the "Confirm Deletion" button
        IWebElement confirmDeletionButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[1]")));
        confirmDeletionButton.Click();

    }
    [Test]
    public void externalTablesDeleteDb()
    {
        // Wait for and click the created DB row
        IWebElement createdDbRow = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//tr[7]/td")));
        createdDbRow.Click();

        // Wait for and click the "Delete external DB" button
        IWebElement deleteExternalDbButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/div[2]/button")));
        deleteExternalDbButton.Click();

        // Wait for and click the "Confirm Deletion" button
        IWebElement confirmDeletionButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[8]/div[1]/div/div/div[3]/button[1]")));
        confirmDeletionButton.Click();

    }

    [Test]
    public void externalTablesSorting()
    {
        // Wait for and click on the Name sort header
        IWebElement nameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeader.Click();

        // Wait for and assert that the arrow is present in the Name column
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        var nameArrowPresent = driver.FindElements(By.XPath("//th[1]/div"));
        Assert.That(nameArrowPresent.Count > 0, "Arrow for Name column should be present after clicking the header.");

        // Click on the Name sort header again (to toggle sorting)
        IWebElement nameSortHeaderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeaderAgain.Click();

        // Wait for and assert that the arrow is still present in the Name column
        // This assertion is meant to fail because the arrow is not expected to move with the sorting header.
        // The arrow should have been removed or moved to another header to indicate the new sorting state.
        wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        var nameArrowPresentAgain = driver.FindElements(By.XPath("//th[1]/div"));
        Assert.That(nameArrowPresentAgain.Count > 0, "Arrow for Name column should still be present after toggling sorting.");

        // Click on the Mapped Fields sort header
        IWebElement mappedFieldsSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[3]")));
        mappedFieldsSortHeader.Click();

        // Click on the Last Updated sort header
        IWebElement lastUpdatedSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[4]")));
        lastUpdatedSortHeader.Click();

        // PASSING TEST: Use once sorting issue is fixed
        // Wait for and click on the Name sort header
        //IWebElement nameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        //nameSortHeader.Click();

        //// Wait for and assert that the arrow is present in the Name column
        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        //var nameArrowPresent = driver.FindElements(By.XPath("//th[1]/div"));
        //Assert.That(nameArrowPresent.Count > 0, "Arrow for Name column should be present after clicking the header.");

        //// Click on the Name sort header again (to toggle sorting)
        //IWebElement nameSortHeaderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        //nameSortHeaderAgain.Click();

        //// Wait for and assert that the arrow has moved to the URL column after toggling the Name sort header
        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));
        //var urlArrowPresent = driver.FindElements(By.XPath("//th[2]/div"));
        //Assert.That(urlArrowPresent.Count > 0, "Arrow should be present in the URL column after toggling Name sort header.");

        //// Click on the Mapped Fields sort header
        //IWebElement mappedFieldsSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[3]")));
        //mappedFieldsSortHeader.Click();

        //// Wait for and assert that the arrow is present in the Mapped Fields column
        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[3]/div")));
        //var mappedFieldsArrowPresent = driver.FindElements(By.XPath("//th[3]/div"));
        //Assert.That(mappedFieldsArrowPresent.Count > 0, "Arrow for Mapped Fields column should be present after clicking the header.");

        //// Click on the Last Updated sort header
        //IWebElement lastUpdatedSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[4]")));
        //lastUpdatedSortHeader.Click();

        //// Wait for and assert that the arrow is present in the Last Updated column
        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[4]/div")));
        //var lastUpdatedArrowPresent = driver.FindElements(By.XPath("//th[4]/div"));
        //Assert.That(lastUpdatedArrowPresent.Count > 0, "Arrow for Last Updated column should be present after clicking the header.");

    }

    // Replaced sorting
}

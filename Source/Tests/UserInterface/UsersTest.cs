// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
using System.Xml.Linq;
[TestFixture]
public class UsersTest {
  private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=Users");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys("Admin");

        // Input password
        driver.FindElement(By.Id("password")).SendKeys("7h1515457r0ngP455w0rd");

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var metersPageLoad = driver.FindElements(By.LinkText("Users"));
        var foundMeters = driver.FindElements(By.XPath("//p"));
    }

    [Test]
  public void usersaInfopresent() {
        // Wait for and assert that the toolbar is displayed
        IWebElement toolbar = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav")));
        Assert.That(toolbar.Displayed);

        // Wait for and assert that the searchbar is displayed
        IWebElement searchbar = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")));
        Assert.That(searchbar.Displayed);

        // Wait for and assert that the found n users text is displayed
        IWebElement foundUsers = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/p")));
        Assert.That(foundUsers.Displayed);

        // Wait for and assert that the add filter button is displayed
        IWebElement addFilterBtn = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        Assert.That(addFilterBtn.Displayed);

        // Wait for and assert that the add user button is displayed
        IWebElement addUserBtn = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        Assert.That(addUserBtn.Displayed);

        // Wait for and assert that the table with data is displayed
        IWebElement tableWithData = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody")));
        Assert.That(tableWithData.Displayed); ;
  }
  [Test]
  public void usersbAddUser() {
        // Wait for and click the Add User button
        IWebElement addUserBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        addUserBtn.Click();

        // Wait for the name warning to be visible and assert its text
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/form/div/div/div[1]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name of less than 200 characters is required."));

        // Wait for the username input to be visible and send keys
        IWebElement usernameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/form/div/div/div/input")));
        usernameInput.SendKeys("AddTestUser");

        // Wait for the name warning to be visible again and assert the warning is gone
        nameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/form/div/div/div[1]/div")));
        Assert.That(nameWarning.Text, Is.Not.EqualTo("A Name of less than 200 characters is required."));

        // Wait for the Save button to be clickable and click it
        IWebElement saveBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        saveBtn.Click();
    }
  [Test]
  public void userscEditUser() {
        // Wait for and click into the test user
        IWebElement testUser = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr[13]/td")));
        testUser.Click();

        // Wait for and confirm the correct user is loaded
        IWebElement userHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(userHeader.Text, Is.EqualTo("(AddTestUser)"));

        // Wait for the phone input to be clickable and click it
        IWebElement phoneInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/form/div/div/div[3]/div[2]/div[2]/div[2]/div/input")));
        phoneInput.Click();

        // Wait for the Update button to be clickable and click it
        IWebElement updateButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div/button")));
        updateButton.Click();

        // Wait for the Permissions link to be clickable and click it
        IWebElement permissionsLink = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[2]/a")));
        permissionsLink.Click();

        // Wait for the body with application options to be visible and assert
        IWebElement applicationOptions = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]")));
        Assert.That(applicationOptions.Displayed);

        // Wait for the Admin Role for System Center checkbox to be clickable and click it
        IWebElement adminRoleCheckbox = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/div/div/fieldset/form/ul/li[6]/label/input")));
        adminRoleCheckbox.Click();

        // Wait for the Update button to be clickable and click it
        updateButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div/button")));
        updateButton.Click();

        // Wait for the Additional Fields navigation to be clickable and click it
        IWebElement additionalFieldsNav = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/ul/li[3]/a")));
        additionalFieldsNav.Click();

        // Wait for the Toggle Edit button to be clickable and click it
        IWebElement toggleEditButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div[2]/button")));
        toggleEditButton.Click();

        // Wait for the Add Field button to be clickable and click it
        IWebElement addFieldButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div/button")));
        addFieldButton.Click();

        // Wait for the field name input to be visible and send keys
        IWebElement fieldNameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/input")));
        fieldNameInput.SendKeys("Uneven");

        // Wait for the save button to be visible and click it
        IWebElement saveAddtField = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[14]/div[1]/div/div/div[3]/button")));
        saveAddtField.Click();

        // Wait for the Delete Uneven Field button to be clickable and click it
        IWebElement deleteFieldButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div/div[2]/table/tbody/tr[3]/td[5]/button")));
        deleteFieldButton.Click();

        // Wait for the delete confirmation header to be visible and assert
        IWebElement deleteHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//h4[contains(.,'Delete Uneven')]")));
        Assert.That(deleteHeader.Text, Is.EqualTo("Delete Uneven"));

        // Wait for the confirm button to be clickable and click it
        IWebElement confirmButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[1]")));
        confirmButton.Click();

        // Wait for the Toggle View button to be clickable and click it
        IWebElement toggleViewButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div/div/div[2]/button")));
        toggleViewButton.Click();
    }
  [Test]
  public void usersDeleteUser() {
        // Wait for and click into the test user
        IWebElement testUser = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr[13]/td")));
        testUser.Click();

        // Wait for and confirm the correct user is loaded
        IWebElement userHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(userHeader.Text, Is.EqualTo("(AddTestUser)"));

        // Wait for and click the Delete User button
        IWebElement deleteUserButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/div[2]/button")));
        deleteUserButton.Click();

        // Wait for and click the Confirm button
        IWebElement confirmButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[3]/div[1]/div/div/div[3]/button[1]")));
        confirmButton.Click();
    }
  [Test]
  public void usersSorting() {
        // Click the Username sort header
        IWebElement usernameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/thead/tr/th")));
        usernameSortHeader.Click();

        // Define a condition to check (e.g., visibility of sorted table)
        try
        {
            // Wait for the table to be sorted and loaded properly
            wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody")));

            // If the expected condition is met, you can include a message or further actions here
            Console.WriteLine("Table sorted and loaded successfully.");
        }
        catch (WebDriverTimeoutException)
        {
            // If the condition is not met, force the test to fail
            Assert.Fail("Test failed: Page did not load correctly after clicking the sort header.");
        }
    }
}

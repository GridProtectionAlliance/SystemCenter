// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
[TestFixture]
public class DataOperationsTest
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=DataOperations&System=OpenXDA");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys("Admin");

        // Input password
        driver.FindElement(By.Id("password")).SendKeys("7h1515457r0ngP455w0rd");

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var metersPageLoad = driver.FindElements(By.LinkText("Data Operations"));
        var foundMeters = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void dataOperationsaInfoPresent()
    {
        //var wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));
        // Found (n) operations
        wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[1]/p")));
        var foundOperations = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[1]/p"));
        Assert.That(foundOperations.Count > 0);

        // Data operations toolbar
        wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav")));
        var toolbar = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav"));
        Assert.That(toolbar.Count > 0);

        // Add Operation btn
        wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/button")));
        var addOppBtn = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/button"));
        Assert.That(addOppBtn.Count > 0);

        // Search bar present
        wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[1]/div/input")));
        var searchbar = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[1]/div/input"));
        Assert.That(searchbar.Count > 0);

        // Add Filter btn
        wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[2]/button")));
        var filtersBtn = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[2]/button"));
        Assert.That(filtersBtn.Count > 0);
    }

    [Test]
    public void dataOperationsAddOperationWarnings()
    {
        // Add Operation button
        IWebElement addOperationButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/button")));
        addOperationButton.Click();

        // Name warning
        IWebElement nameWarningElement = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(nameWarningElement.Text, Is.EqualTo("An Assembly Name is required"));

        // Type name warning
        IWebElement typeNameWarningElement = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div")));
        Assert.That(typeNameWarningElement.Text, Is.EqualTo("A Type Name is required."));

        // Attempt to save
        IWebElement attemptSaveButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        attemptSaveButton.Click();

        // Save warning due to invalid fields (mouse over command)
        IWebElement saveWarningElement = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        Actions builder = new Actions(driver);
        builder.MoveToElement(saveWarningElement).Perform();
    }

    [Test]
    public void dataOperationsbAddOperation()
    {
        // Add Operation button
        IWebElement addOperationButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/button")));
        addOperationButton.Click();

        // Name warning
        IWebElement nameWarningElement = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(nameWarningElement.Text, Is.EqualTo("An Assembly Name is required"));

        // Send keys to assembly name field
        IWebElement assemblyNameField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/input")));
        assemblyNameField.SendKeys("Daniel's Operation");

        // Name warning gone
        IWebElement updatedNameWarningElement = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(updatedNameWarningElement.Text, Is.Not.EqualTo("An Assembly Name is required"));

        // Type name warning
        IWebElement typeNameWarningElement = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div")));
        Assert.That(typeNameWarningElement.Text, Is.EqualTo("A Type Name is required."));

        // Send keys to type name field
        IWebElement typeNameField = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/input")));
        typeNameField.SendKeys("Daniel's assembly");

        // Type name warning gone
        IWebElement updatedTypeNameWarningElement = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div")));
        Assert.That(updatedTypeNameWarningElement.Text, Is.Not.EqualTo("A Type Name is required."));

        // Save
        IWebElement saveOperation = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        saveOperation.Click();
    }
    [Test]
    public void dataOperationscEditOperation()
    {// Confirm first table child is the test operation
        IWebElement firstTableChild = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[1]/td[1]")));
        Assert.That(firstTableChild.Text, Is.EqualTo("Daniel's Operation"));

        // Click into created asset
        firstTableChild.Click();

        // Add to load order
        IWebElement addToLoadOrderInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[3]/input")));
        addToLoadOrderInput.SendKeys("17");

        // Save button
        IWebElement saveButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        saveButton.Click();
    }
    [Test]
    public void dataOperationsDeleteOperation()
    {
        // Confirm LAST table child is the test operation
        IWebElement lastTableChild = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[17]/td[1]")));
        Assert.That(lastTableChild.Text, Is.EqualTo("Daniel\'s Operation"));

        // Click into created asset
        IWebElement createdAsset = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[17]/td[1]")));
        createdAsset.Click();

        // Delete btn
        IWebElement deleteBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
        deleteBtn.Click();

        // Confirm btn
        IWebElement confirmBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[1]")));
        confirmBtn.Click();
    }
    [Test]
    public void dataOperationsFIlters()
    {
        try
        {
            // Wait for the Name column header to be clickable
            IWebElement nameHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]")));
            nameHeader.Click();

            // Assume there's a loading indicator we can wait for
            // Here we're using a hypothetical spinner element with id 'loadingSpinner'
            IWebElement loadingSpinner = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("loadingSpinner")));

            // Wait for the loading spinner to disappear
            bool loadingFinished = wait.Until(ExpectedConditions.InvisibilityOfElementLocated(By.Id("loadingSpinner")));

            // If the loading spinner is still visible, assert failure
            if (!loadingFinished)
            {
                Assert.Fail("The page did not load correctly after clicking the Name column header.");
            }
        }
        catch (WebDriverTimeoutException)
        {
            // Handle the case where the element does not become clickable or the loading spinner never disappears
            Assert.Fail("The page did not load correctly after clicking the Name column header due to a timeout.");
        }
        catch (Exception ex)
        {
            // Handle any other exceptions that might occur
            Assert.Fail($"An unexpected exception occurred: {ex.Message}");
        }
    }
}

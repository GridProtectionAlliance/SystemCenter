// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
[TestFixture]
public class MATLABAnalyticsTests
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=MATLABAnalytics");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys("Admin");

        // Input password
        driver.FindElement(By.Id("password")).SendKeys("7h1515457r0ngP455w0rd");

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var metersPageLoad = driver.FindElements(By.LinkText("MATLAB Analytics"));
        var foundMeters = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void mATLABAnalyticsaInfoPresent()
    {
        // Wait for and assert that the "Found n analytics" element is present
        IWebElement foundAnalytics = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div[2]/div/nav/div/ul/li/fieldset/form/div/div/p")));
        Assert.That(foundAnalytics.Displayed);

        // Wait for and assert that the MATLAB toolbar is present
        IWebElement matlabToolbar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div[2]/div/nav")));
        Assert.That(matlabToolbar.Displayed);

        // Wait for and assert that the add analytics button is present
        IWebElement addAnalyticsButton = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div[2]/div/nav/div/ul/li[2]/fieldset/form/button")));
        Assert.That(addAnalyticsButton.Displayed);

        // Wait for and assert that the add filter button is present
        IWebElement addFilterButton = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div[2]/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        Assert.That(addFilterButton.Displayed);

        // Wait for and assert that the table with data is present
        IWebElement tableWithData = wait.Until(ExpectedConditions.ElementExists(By.XPath("//*[@id='window']/div/div/div/div[2]/div[2]/table/tbody")));
        Assert.That(tableWithData.Displayed);

    }
    [Test]
    public void mATLABAnalyticsbNewanalyticwarnings()
    {
        // Wait for and click the "Add Analytic" button
        IWebElement addAnalytic = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div[2]/div/nav/div/ul/li[2]/fieldset/form/button")));
        addAnalytic.Click();

        // Wait for and assert that the method name warning is present
        IWebElement methodNameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//form/div/div/div/div")));
        Assert.That(methodNameWarning.Text, Is.EqualTo("A Method Name is required."));

        // Wait for and assert that the assembly name warning is present
        IWebElement assemblyNameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//form/div/div/div[2]/div")));
        Assert.That(assemblyNameWarning.Text, Is.EqualTo("An Assembly Name is required."));

        // Wait for the element to hover over
        IWebElement hoverElement = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        Actions builder = new Actions(driver);
        builder.MoveToElement(hoverElement).Perform();

        // Wait for the "Close" button to be clickable and click it
        IWebElement closeButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[1]/button")));
        closeButton.Click();

    }
    [Test]
    public void mATLABAnalyticscAddAnalytic()
    {
        // Wait for and click the "Add Analytic" button
        IWebElement addAnalyticButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div[2]/div/nav/div/ul/li[2]/fieldset/form/button")));
        addAnalyticButton.Click();

        // Wait for and assert that the method name warning is present
        IWebElement methodNameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//form/div/div/div/div")));
        Assert.That(methodNameWarning.Text, Is.EqualTo("A Method Name is required."));

        // Wait for the method name input to be visible and send keys
        IWebElement methodNameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/form/div/div/div/input")));
        methodNameInput.SendKeys("Daniel's Analytics");

        // Wait for and assert that the method name warning is gone
        methodNameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("//form/div/div/div/div")));
        Assert.That(methodNameWarning.Text, Is.Not.EqualTo("A Method Name is required."));

        // Wait for and assert that the assembly name warning is present
        IWebElement assemblyNameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//form/div/div/div[2]/div")));
        Assert.That(assemblyNameWarning.Text, Is.EqualTo("An Assembly Name is required."));

        // Wait for the assembly name input to be visible and send keys
        IWebElement assemblyNameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/input")));
        assemblyNameInput.SendKeys("Daniel's Assembly");

        // Wait for and assert that the assembly name warning is gone
        assemblyNameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("//form/div/div/div[2]/div")));
        Assert.That(assemblyNameWarning.Text, Is.Not.EqualTo("An Assembly Name is required."));

        // Wait for the load order input to be visible and send keys
        IWebElement loadOrderInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[3]/input")));
        loadOrderInput.SendKeys("3");

        // Wait for the event type button to be clickable and click it
        IWebElement eventTypeButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[2]/div/div/button")));
        eventTypeButton.Click();

        // Wait for the "Select All" checkbox to be clickable and click it
        IWebElement selectAllCheckbox = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//td/input")));
        selectAllCheckbox.Click();

        // Wait for the modal body to be clickable and click off
        IWebElement modalBody = wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector(".show .modal-body")));
        modalBody.Click();

        // Wait for the asset type button to be clickable and click it
        IWebElement assetTypeButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[2]/div/button")));
        assetTypeButton.Click();

        // Wait for the "Select All" checkbox to be clickable and click it
        IWebElement assetSelectAllCheckbox = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[2]/div/div/table/tbody/tr/td/input")));
        assetSelectAllCheckbox.Click();

        // Wait for the modal body to be clickable and click off
        modalBody = wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector(".show .modal-body")));
        modalBody.Click();

        // Wait for the "Add Analytic" save button to be clickable and click it
        IWebElement addAnalyticSaveButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        addAnalyticSaveButton.Click();

    }
    [Test]
    public void mATLABAnalyticsdEditAnalytic()
    {
        // Confirm table child is created analytic
        IWebElement tableChild = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div[2]/div[2]/table/tbody/tr[2]/td[1]")));
        Assert.That(tableChild.Text, Is.EqualTo("Daniel's Analytics"));

        // Click into test analytic
        IWebElement testAnalytic = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//tr[2]/td")));
        testAnalytic.Click();

        // Double click to select the load order input
        IWebElement loadOrderInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div[1]/div/div[2]/form/div/div[1]/div[3]/input")));
        Actions builder = new Actions(driver);
        builder.DoubleClick(loadOrderInput).Perform();

        // Change load order by clearing the current value and sending new keys
        loadOrderInput.Clear();
        loadOrderInput.SendKeys("0");

        // Update analytic
        IWebElement updateButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div[1]/div/div[3]/div[1]/button")));
        updateButton.Click();

        // Navigate to settings
        IWebElement settingsLink = wait.Until(ExpectedConditions.ElementToBeClickable(By.LinkText("Settings")));
        settingsLink.Click();

        // SQL Settings
        IWebElement sqlTextarea = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//textarea")));
        sqlTextarea.SendKeys("INSERT INTO table_name");

        // Update SQL settings
        IWebElement updateSqlButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='settings']/div/div[3]/div/button")));
        updateSqlButton.Click();

    }
    [Test]
    public void mATLABAnalyticseDeleteAnalytic()
    {
        // Wait for and confirm that the first table child is the created analytic
        IWebElement firstTableChild = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div[2]/div[2]/table/tbody/tr[1]/td[1]")));
        Assert.That(firstTableChild.Text, Is.EqualTo("Daniel's Analytics"));

        // Wait for and click into the test analytic
        IWebElement testAnalytic = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div[2]/div[2]/table/tbody/tr/td")));
        testAnalytic.Click();

        // Wait for and click the delete button
        IWebElement deleteButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/div[2]/button")));
        deleteButton.Click();

        // Wait for and click the confirm deletion button
        IWebElement confirmDeletionButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[3]/button")));
        confirmDeletionButton.Click();

    }
}

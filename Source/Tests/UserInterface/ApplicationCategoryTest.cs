// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
using UserInterface;
[TestFixture]
public class ApplicationCategoryTest {
  private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(40));
        PerformLogin();
    }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl(Settings.BaseURL + "/index.cshtml?name=ByApplicationCategory");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys(Settings.adminUsername);

        // Input password
        driver.FindElement(By.Id("password")).SendKeys(Settings.adminPassword);

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var correctPage = driver.FindElements(By.LinkText("Application Categories"));
        var foundPElement = driver.FindElements(By.XPath("//p"));
    }

    [Test]
  public void applicationCategoriesaInfopresent() {
        // Wait for and assert that the table with data is displayed
        IWebElement tableData = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]")));
        Assert.That(tableData.Displayed);

        // Wait for and assert that the toolbar is displayed
        IWebElement toolbar = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav")));
        Assert.That(toolbar.Displayed);

        // Wait for and assert that the search bar is displayed
        IWebElement searchBar = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")));
        Assert.That(searchBar.Displayed);

        // Wait for and assert that the "Found n application categories" element is displayed
        IWebElement foundCategories = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/p")));
        Assert.That(foundCategories.Displayed);

        // Wait for and assert that the add filter button is displayed
        IWebElement addFilterButton = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        Assert.That(addFilterButton.Displayed);

        // Wait for and assert that the add application category button is displayed
        IWebElement addApplicationCategoryButton = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        Assert.That(addApplicationCategoryButton.Displayed);
    }
  [Test]
  public void applicationCategoriesbAddCategory() {
        // Wait for and click the Add Application Category button
        IWebElement addAppCategoryBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[2]/fieldset/form/button")));
        addAppCategoryBtn.Click();

        // Wait for and assert that the Name warning is present
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A unique Name is required."));

        // Wait for and input the Name
        IWebElement nameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div/input")));
        nameInput.SendKeys("Application Category");

        // Wait for and assert that the Name warning is gone
        IWebElement nameWarningGone = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(nameWarningGone.Text, Is.Not.EqualTo("A unique Name is required."));

        // Wait for and assert that the Order warning is present
        IWebElement orderWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div")));
        Assert.That(orderWarning.Text, Is.EqualTo("A numeric Sort Order value is required."));

        // Wait for and input the Sort Order
        IWebElement sortOrderInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/input")));
        sortOrderInput.SendKeys("1");

        // Wait for and assert that the Order warning is gone
        IWebElement orderWarningGone = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div")));
        Assert.That(orderWarningGone.Text, Is.Not.EqualTo("A numeric Sort Order value is required."));

        // Wait for and click the Save button
        IWebElement saveButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        saveButton.Click();
    }
  [Test]
  public void applicationCategoriescEditCategory() {
        // Wait for and click into the created test app category
        IWebElement testAppCategory = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[5]/td[1]")));
        testAppCategory.Click();

        // Wait for and confirm the correct app category loaded
        IWebElement appCategoryHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(appCategoryHeader.Text, Is.EqualTo("Application Category"));

        //// Wait for and edit the app category
        //IWebElement editInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//*[@id=\"window\"]/div/div/div/div/div[3]/div[2]/div/div[1]/input")));
        //editInput.SendKeys("1");

        //// Wait for and click the Reset button
        //IWebElement resetButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div[2]/button")));
        //resetButton.Click();

        // Wait for and edit the app category again
        IWebElement editInputAgain = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//*[@id=\"window\"]/div/div/div/div/div[3]/div[2]/div/div[1]/input")));
        editInputAgain.SendKeys("1");

        // Wait for and click the Update button
        IWebElement updateButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div[3]/div[1]/button")));
        updateButton.Click();
    }
  [Test]
  public void applicationCategoriesdInternalAddApplication() {
        // Wait for and click into the created test app category
        IWebElement testAppCategory = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[5]/td[1]")));
        testAppCategory.Click();

        // Wait for and confirm the correct app category loaded
        IWebElement appCategoryHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(appCategoryHeader.Text, Is.EqualTo("Application Category1"));

        // Wait for and navigate to the Applications tab
        IWebElement applicationsTab = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/ul/li[2]/a")));
        applicationsTab.Click();

        // Wait for and click the Add Application button
        IWebElement addApplicationButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[3]/div[3]/div/button")));
        addApplicationButton.Click();

        // Wait for and assert that the Name warning is displayed
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name is required."));

        // Wait for and enter the Name
        IWebElement nameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//input")));
        nameInput.SendKeys("Internal App");

        // Wait for and assert that the Name warning is gone
        IWebElement nameWarningGone = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(nameWarningGone.Text, Is.Not.EqualTo("A Name is required."));

        // Wait for and assert that the URL warning is displayed
        IWebElement urlWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/div/div/div[2]/div")));
        Assert.That(urlWarning.Text, Is.EqualTo("A URL is required."));

        // Wait for and enter the URL
        IWebElement urlInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/input")));
        urlInput.SendKeys("gridprotectionalliance.org");

        // Wait for and assert that the URL warning is gone
        IWebElement urlWarningGone = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[2]/div/div/div[2]/div")));
        Assert.That(urlWarningGone.Text, Is.Not.EqualTo("A URL is required."));

        // Wait for and save new internal app
        IWebElement saveApp = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        saveApp.Click();

        //// Wait for and click the created internal app category
        //IWebElement createdAppCategory = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/table/tbody/tr/td")));
        //createdAppCategory.Click();

        //// Wait for and confirm the correct asset loaded
        //IWebElement assetHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[1]/h4")));
        //Assert.That(assetHeader.Text, Is.EqualTo("Edit Internal App"));

        //// Wait for and edit the sort order
        //IWebElement sortOrderInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[3]/input")));
        //sortOrderInput.SendKeys("1");

        //// Wait for and click the Save button
        //IWebElement saveButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        //saveButton.Click();

        //// Wait for and click the created internal app category again
        //IWebElement createdAppCategoryAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/table/tbody/tr/td")));
        //createdAppCategoryAgain.Click();

        //// Wait for and confirm the correct asset loaded again
        //IWebElement assetHeaderAgain = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[1]/h4")));
        //Assert.That(assetHeaderAgain.Text, Is.EqualTo("Edit Internal App"));

        //// Wait for and click the Delete button
        //IWebElement deleteButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
        //deleteButton.Click();

        //// Wait for and confirm the deletion
        //IWebElement confirmDeletionButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[1]")));
        //confirmDeletionButton.Click();
    }
  [Test]
  public void applicationCategorieseDeleteApplication() {
        // Wait for and click into the created test app category
        IWebElement testAppCategory = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/tbody/tr[5]/td[1]")));
        testAppCategory.Click();

        // Wait for and confirm the correct app category loaded
        IWebElement appCategoryHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(appCategoryHeader.Text, Is.EqualTo("Application Category1"));

        // Wait for and click the Delete button
        IWebElement deleteButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/div[2]/button")));
        deleteButton.Click();

        // Wait for and confirm the deletion
        IWebElement confirmDeletionButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[3]/button")));
        confirmDeletionButton.Click();

    }

  [Test]
  public void applicationCategoriesSorting() {
        // Wait for and assert that the name arrow is present
        IWebElement nameArrow = wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector(".feather")));
        Assert.That(nameArrow.Displayed);

        // Wait for and click on the Name sort header
        IWebElement nameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/thead/tr/th")));
        nameSortHeader.Click();

        // Wait for and click on the Name sort arrow
        IWebElement nameSortArrow = wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector(".feather")));
        nameSortArrow.Click();

        // Wait for and click on the Order sort header
        IWebElement orderSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        orderSortHeader.Click();

        // Wait for and assert that the order arrow is present
        IWebElement orderArrow = wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector(".feather")));
        Assert.That(orderArrow.Displayed);

        // Wait for and click on the Order sort arrow
        IWebElement orderSortArrow = wait.Until(ExpectedConditions.ElementToBeClickable(By.CssSelector(".feather")));
        orderSortArrow.Click();
    }
}

// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
[TestFixture]
public class PQBrowserTabsTest
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=SEBrowserTabs");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys("Admin");

        // Input password
        driver.FindElement(By.Id("password")).SendKeys("7h1515457r0ngP455w0rd");

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var correctPage = driver.FindElements(By.LinkText("PQ Browser Tabs"));
        var foundPElement = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void pQBrowserTabsaInfoPresent()
    {
        // Wait for and assert that the table with data is present
        IWebElement tableWithData = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody")));
        Assert.That(tableWithData.Displayed);

        // Wait for and assert that the toolbar is present
        IWebElement toolbar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav")));
        Assert.That(toolbar.Displayed);

        // Wait for and assert that the Add Filter button is present
        IWebElement addFilterBtn = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        Assert.That(addFilterBtn.Displayed);

        // Wait for and assert that the Add Tab button is present
        IWebElement addTabBtn = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        Assert.That(addTabBtn.Displayed);

        // Wait for and assert that the "Found n tab(s)" element is present
        IWebElement foundTabs = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/p")));
        Assert.That(foundTabs.Displayed);

        // Wait for and assert that the search bar is present
        IWebElement searchBar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")));
        Assert.That(searchBar.Displayed);
    }
    [Test]
    public void pQBrowserTabsbAddTab()
    {
        // Wait for and click the Add Tab button
        IWebElement addTabBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        addTabBtn.Click();

        // Wait for and assert that the "Add New SE Browser tab" warning is present
        IWebElement tabWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(tabWarning.Text, Is.EqualTo("A unique Name is required."));

        // Wait for and enter the Name
        IWebElement nameInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[2]/div/div/div/input")));
        nameInput.SendKeys("A new tab");

        // Wait for and assert that the "Add New SE Browser tab" warning is gone
        IWebElement tabWarningGone = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(tabWarningGone.Text, Is.Not.EqualTo("A unique Name is required."));

        // Save 
        IWebElement save = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        save.Click();
    }
    [Test]
    public void pQBrowserTabscEditTab()
    {
        // Wait for and click into the first item
        IWebElement firstItem = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        firstItem.Click();

        // Wait for and confirm the correct test loaded
        IWebElement testLoaded = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(testLoaded.Text, Is.EqualTo("A new tab"));

        // Wait for and edit the name
        IWebElement nameInput = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/div/div/input")));
        nameInput.SendKeys("1");

        // Wait for and click the Update button
        IWebElement updateBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div/button")));
        updateBtn.Click();

        // Wait for and navigate to the widgets tab
        IWebElement widgetsTab = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/ul/li[2]/a")));
        widgetsTab.Click();

        // Wait for and click the Add Widget button
        IWebElement addWidgetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[3]/div/button")));
        addWidgetBtn.Click();

        // Wait for and select the Widget
        IWebElement widgetDropdown = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//select")));
        widgetDropdown.FindElement(By.XPath("//option[. = 'EventInfo']")).Click();

        // Wait for and click the Add Widget button
        IWebElement addWidgetConfirmBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button")));
        addWidgetConfirmBtn.Click();

        // Wait for and click the Delete Widget button
        IWebElement deleteWidgetBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/div/table/tbody/tr/td[3]/button")));
        deleteWidgetBtn.Click();

        // Wait for and click the Confirm button
        IWebElement confirmBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        confirmBtn.Click();
    }
    [Test]
    public void pQBrowserTabsdWidgetSorting()
    {
        // Wait for and click into the first item
        IWebElement firstItem = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        // Introduce a delay to simulate an issue with loading or element visibility
        System.Threading.Thread.Sleep(5000);  // This will cause a delay that might lead to a timeout or stale element reference
        firstItem.Click();

        // Wait for and confirm the correct test loaded
        IWebElement testLoaded = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        // Deliberately set an incorrect expected value to cause the assertion to fail
        Assert.That(testLoaded.Text, Is.EqualTo("Incorrect Tab Name"));

        // Wait for and navigate to the widgets tab
        IWebElement widgetsTab = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/ul/li[2]/a")));
        widgetsTab.Click();

        // Wait for and assert that the arrow is present with widget name
        IList<IWebElement> elements = wait.Until(ExpectedConditions.PresenceOfAllElementsLocatedBy(By.CssSelector(".feather")));
        // Deliberately check for an incorrect class name or change the condition to fail
        Assert.That(elements.Count, Is.LessThan(5));  // Assumes there should be at least 5 elements; this will fail if there are 5 or more

        // Wait for and click the widget name sort header
        IWebElement widgetNameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/div/table/thead/tr/th")));
        // Introduce a delay or change the condition to simulate a load issue
        System.Threading.Thread.Sleep(5000);  // This will cause a delay that might lead to a timeout or stale element reference
        widgetNameSortHeader.Click();

        //// Wait for and click into the first item
        //IWebElement firstItem = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        //firstItem.Click();

        //// Wait for and confirm the correct test loaded
        //IWebElement testLoaded = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        //Assert.That(testLoaded.Text, Is.EqualTo("A new tab1"));

        //// Wait for and navigate to the widgets tab
        //IWebElement widgetsTab = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/ul/li[2]/a")));
        //widgetsTab.Click();

        //// Wait for and assert that the arrow is present with widget name
        //IList<IWebElement> elements = wait.Until(ExpectedConditions.PresenceOfAllElementsLocatedBy(By.CssSelector(".feather")));
        //Assert.That(elements.Count > 0);

        //// Wait for and click the widget name sort header
        //IWebElement widgetNameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[3]/div/div[2]/div/table/thead/tr/th")));
        //widgetNameSortHeader.Click();
    }
    [Test]
    public void pQBrowserTabseDeleteTab()
    {
        // Wait for and click into the first item
        IWebElement firstItem = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        firstItem.Click();

        // Wait for and confirm the correct test loaded
        IWebElement testLoaded = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/div/h2")));
        Assert.That(testLoaded.Text, Is.EqualTo("A new tab1"));

        // Delete btn
        IWebElement delete = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/div[2]/button")));
        delete.Click();

        // Confirm deletion
        IWebElement confirmDelete = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[4]/div[1]/div/div/div[3]/button[1]")));
        confirmDelete.Click();
    }
    [Test]
    public void pQBrowserTabsSorting()
    {
        // Wait for and click on the Name sort header
        IWebElement nameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeader.Click();

        // Wait for and assert that the arrow is present in the Name column
        // Check for an incorrect condition or simulate the arrow being in the wrong spot
        var nameArrowPresent = driver.FindElements(By.XPath("//th[1]/div"));
        // Fail the test by asserting an incorrect number of arrows, simulating the wrong placement
        Assert.That(nameArrowPresent.Count, Is.EqualTo(0));  // Expecting 0 arrows where there should be at least 1

        // Click on the Name sort header again (to toggle sorting)
        IWebElement nameSortHeaderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        nameSortHeaderAgain.Click();

        // Wait for and click on the order by header
        IWebElement order = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        order.Click();

        // Wait for and assert that the arrow is present in the order column
        // Check for an incorrect condition or simulate the arrow being in the wrong spot
        var orderArrow = driver.FindElements(By.XPath("//th[2]/div"));
        // Fail the test by asserting an incorrect number of arrows, simulating the wrong placement
        Assert.That(orderArrow.Count, Is.EqualTo(0));  // Expecting 0 arrows where there should be at least 1

        // Click on the order sort header again (to toggle sorting)
        IWebElement orderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        orderAgain.Click();


        // Wait for and click on the Name sort header
        //IWebElement nameSortHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        //nameSortHeader.Click();

        //// Wait for and assert that the arrow is present in the Name column
        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[1]/div")));
        //var nameArrowPresent = driver.FindElements(By.XPath("//th[1]/div"));
        //Assert.That(nameArrowPresent.Count > 0);

        //// Click on the Name sort header again (to toggle sorting)
        //IWebElement nameSortHeaderAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[1]/div[1]")));
        //nameSortHeaderAgain.Click();

        //// Wait for and click on the order by header
        //IWebElement order = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        //order.Click();

        //// Wait for and assert that the arrow is present in the order column
        //wait.Until(ExpectedConditions.ElementExists(By.XPath("//th[2]/div")));
        //var orderArrow = driver.FindElements(By.XPath("//th[2]/div"));
        //Assert.That(orderArrow.Count > 0);

        //// Click on the desc sort header again (to toggle sorting)
        //IWebElement arrowAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[1]/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        //arrowAgain.Click();


    }
}

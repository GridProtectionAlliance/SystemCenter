// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
[TestFixture]
public class DataReadersFunctionalityTest
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl("https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=DataReaders&System=OpenXDA");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys("Admin");

        // Input password
        driver.FindElement(By.Id("password")).SendKeys("7h1515457r0ngP455w0rd");

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var metersPageLoad = driver.FindElements(By.LinkText("Data Readers"));
        var foundMeters = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void dataReadersaInfoPresent()
    {
        // Wait for and assert that the add filter button is present
        IWebElement addFilterButton = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        Assert.That(addFilterButton.Displayed);

        // Wait for and assert that the add operation button is present
        IWebElement addOperationButton = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        Assert.That(addOperationButton.Displayed);

        // Wait for and assert that the toolbar is present
        IWebElement toolbar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav")));
        Assert.That(toolbar.Displayed);

        // Wait for and assert that the table data is present
        IWebElement tableData = wait.Until(ExpectedConditions.ElementExists(By.XPath("//*[@id='window']/div/div/div/div/div[2]/table")));
        Assert.That(tableData.Displayed);

        // Wait for and assert that the search bar is present
        IWebElement searchBar = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")));
        Assert.That(searchBar.Displayed);

        // Wait for and assert that the "Found n Data Readers" element is present
        IWebElement dataReadersElement = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/p")));
        Assert.That(dataReadersElement.Displayed);

    }
    [Test]
    public void dataReadersButtons()
    {
        // Wait for and click the add filter button
        IWebElement addFilterButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        addFilterButton.Click();

        // Wait for and click the close filter button
        IWebElement closeFilterButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//button[2]")));
        closeFilterButton.Click();

        // Wait for and click the add operation button
        var addOperationButtonElements = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        addOperationButtonElements.Click();

        // Wait for and click the close operation button
        IWebElement closeOperationButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[1]/button")));
        closeOperationButton.Click();

    }
    [Test]
    public void dataReaderscSorting()
    {
        //This test will purposely fail due to the load error you get when attempting to sort on this page
        try
        {
            // Wait for the Name column header to be clickable
            IWebElement nameHeader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[9]/div/div/div/div/div[2]/table/thead/tr/th[1]")));
            nameHeader.Click();

            // Assume there's a loading indicator we can wait for
            // Here we're using a hypothetical spinner element with id 'loadingSpinner'
            IWebElement loadingSpinner = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("loadingSpinner")));

            // Wait for the loading spinner to disappear
            bool loadingFinished = wait.Until(ExpectedConditions.InvisibilityOfElementLocated(By.Id("loadingSpinner")));

            // If the loading spinner is still visible, assert failure
            if (!loadingFinished)
            {
                Assert.Fail("The page did not load correctly after clicking the Name column header.");
            }
        }
        catch (WebDriverTimeoutException)
        {
            // Handle the case where the element does not become clickable or the loading spinner never disappears
            Assert.Fail("The page did not load correctly after clicking the Name column header due to a timeout.");
        }
        catch (Exception ex)
        {
            // Handle any other exceptions that might occur
            Assert.Fail($"An unexpected exception occurred: {ex.Message}");
        }
    }
    [Test]
    public void dataReadersdAddOperation()
    {
        // Wait for and click the "Add operation" button
        IWebElement addOperationBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        addOperationBtn.Click();

        // Wait for and verify the "A File Pattern is required" warning
        IWebElement filePatternWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(filePatternWarning.Text, Is.EqualTo("A File Pattern is required"));

        // Wait for and input the file pattern name
        IWebElement filePatternInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/input")));
        filePatternInput.SendKeys("**\\*.dan");

        // Wait for and verify the "A File Pattern is required" warning is gone
        // Commented out until https://github.com/GridProtectionAlliance/SystemCenter/blob/master/Source/Applications/SystemCenter/wwwroot/Scripts/TSX/SystemCenter/Settings/DataReaders.tsx#L179 is fixed
        //IWebElement filePatternWarningGone = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        //Assert.That(filePatternWarningGone.Text, Is.Not.EqualTo("A File Pattern is required"));

        // Wait for and verify the "An Assembly name is required" warning
        IWebElement assemblyNameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div")));
        Assert.That(assemblyNameWarning.Text, Is.EqualTo("An Assembly name is required"));

        // Wait for and input the assembly name
        IWebElement assemblyNameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/input")));
        assemblyNameInput.SendKeys("FaultData.dan");

        // Verify the "An Assembly name is required" warning is gone
        IWebElement assemblyNameWarningGone = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div")));
        Assert.That(assemblyNameWarningGone.Text, Is.Not.EqualTo("An Assembly name is required"));

        // Wait for and verify the "A Type Name is required" warning
        IWebElement typeNameWarning = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[3]/div")));
        Assert.That(typeNameWarning.Text, Is.EqualTo("A Type Name is required."));

        // Wait for and input the type name
        IWebElement typeNameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[3]/input")));
        typeNameInput.SendKeys("FaultDataDan");

        // Verify the "A Type Name is required" warning is gone
        IWebElement typeNameWarningGone = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[3]/div")));
        Assert.That(typeNameWarningGone.Text, Is.Not.EqualTo("A Type Name is required."));

        // Wait for and click the "Save" button
        IWebElement saveBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        saveBtn.Click();

    }
    [Test]
    public void dataReadersEditOperation()
    {
        // Wait for and click into the test reader
        IWebElement testReader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        testReader.Click();

        // Wait for and confirm the test reader loaded
        IWebElement testReaderHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//h4[contains(.,'Edit FaultData.dan')]")));
        Assert.That(testReaderHeader.Text, Is.EqualTo("Edit FaultData.dan"));

        // Wait for and add keys to name
        IWebElement nameInput = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/input")));
        nameInput.SendKeys("iel");

        // Wait for and click the save button
        IWebElement saveButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        saveButton.Click();

    }
    [Test]
    public void dataReadersfDeleteOperation()
    {
        // Wait for and click into the test reader
        IWebElement testReader = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        testReader.Click();

        // Wait for and confirm the test reader loaded
        IWebElement testReaderHeader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[1]/h4")));
        Assert.That(testReaderHeader.Text, Is.EqualTo("Edit FaultData.daniel"));

        // Wait for and click the delete button
        IWebElement deleteButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
        deleteButton.Click();

        // Wait for and confirm the deletion
        IWebElement confirmDeleteButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[1]")));
        confirmDeleteButton.Click();

    }

    [Test]
    public void dataReadersdSearch()
    {
        // runs after creating a new reader bc all assembly names are the same without it
        IWebElement searchbar = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[1]/div/input")));
        searchbar.SendKeys("daniel");

        // confirm only 1 reader
        IWebElement confirmOneReader = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[1]/div/div/div/div/div[1]/nav/div/ul/li[1]/fieldset/form/div/div[1]/p")));
        Assert.That(confirmOneReader.Text, Is.EqualTo("Found 1 Data Reader(s)"));

    }
}

// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using SeleniumExtras.WaitHelpers;
using NUnit.Framework;
using UserInterface;
[TestFixture]
public class DatabaseCleanupTest
{
    private IWebDriver driver;
    private WebDriverWait wait;
    public IDictionary<string, object> vars { get; private set; }
    private IJavaScriptExecutor js;
    [SetUp]
    public void SetUp()
    {
        driver = new ChromeDriver();
        js = (IJavaScriptExecutor)driver;
        vars = new Dictionary<string, object>();
        driver.Manage().Window.Maximize();
        wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
        PerformLogin();
    }
    [TearDown]
    protected void TearDown()
    {
        driver.Quit();
    }

    //handle login prior to tests running
    private void PerformLogin()
    {
        // Navigate to the login page
        driver.Navigate().GoToUrl(Settings.BaseURL + "https://systemcenter.demo.gridprotectionalliance.org/index.cshtml?name=DBCleanup");

        // Input username
        driver.FindElement(By.Id("username")).SendKeys(Settings.adminUsername);

        // Input password
        driver.FindElement(By.Id("password")).SendKeys(Settings.adminPassword);

        // Click login button
        driver.FindElement(By.Id("login")).Click();

        // Optional: Verify login success
        var metersPageLoad = driver.FindElements(By.LinkText("Database Cleanup"));
        var foundMeters = driver.FindElements(By.XPath("//p"));
    }

    [Test]
    public void databaseCleanupaInfopresent()
    {
        // Contains n databases cleanup(s)
        IWebElement cleanupParagraph = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//p")));
        Assert.That(driver.FindElements(By.XPath("//p")).Count > 0);

        // DB Cleanup toolbar
        IWebElement dbCleanupToolbar = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div/div/div/div/nav")));
        Assert.That(driver.FindElements(By.XPath("//div/div/div/div/nav")).Count > 0);

        // Add filter btn
        IWebElement addFilterBtn = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")));
        Assert.That(driver.FindElements(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div[2]/button")).Count > 0);

        // Add db cleanup btn
        IWebElement addDbCleanupBtn = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        Assert.That(driver.FindElements(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")).Count > 0);

        // Searchbar
        IWebElement searchBar = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")));
        Assert.That(driver.FindElements(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")).Count > 0);

    }
    [Test]
    public void databaseCleanupbWarnings()
    {
        // click add db btn
        IWebElement addDbBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        addDbBtn.Click();

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name is required."));

        // Schedule warning
        IWebElement scheduleWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div")));
        Assert.That(scheduleWarning.Text, Is.EqualTo("A Schedule is required."));

        // SQL cmd warning
        IWebElement sqlCmdWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[3]/div")));
        Assert.That(sqlCmdWarning.Text, Is.EqualTo("A SQL Command is required."));

        // Save hover warnings
        {
            IWebElement saveButton = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
            Actions builder = new Actions(driver);
            builder.MoveToElement(saveButton).Perform();
        }

        // Close
        IWebElement closeButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[1]/button")));
        closeButton.Click();

    }
    [Test]
    public void databaseCleanupcAddDBCleanup()
    {
        // Click add db btn
        IWebElement addDbBtn = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li[2]/fieldset/form/button")));
        addDbBtn.Click();

        // Name warning
        IWebElement nameWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(nameWarning.Text, Is.EqualTo("A Name is required."));

        // Name text area
        IWebElement nameTextArea = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/textarea")));
        nameTextArea.SendKeys("Daniel's DB Clean");

        // Name warning gone
        IWebElement nameWarningGone = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[1]/div")));
        Assert.That(nameWarningGone.Text, Is.Not.EqualTo("A Name is required."));

        // Schedule warning
        IWebElement scheduleWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div")));
        Assert.That(scheduleWarning.Text, Is.EqualTo("A Schedule is required."));

        // Schedule
        IWebElement scheduleTextArea = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/textarea")));
        scheduleTextArea.SendKeys("5000");

        // Schedule warning gone
        IWebElement scheduleWarningGone = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[2]/div")));
        Assert.That(scheduleWarningGone.Text, Is.Not.EqualTo("A Schedule is required."));

        // SQL cmd warning
        IWebElement sqlCmdWarning = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[3]/div")));
        Assert.That(sqlCmdWarning.Text, Is.EqualTo("A SQL Command is required."));

        // SQL Command
        IWebElement sqlCmdTextArea = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[3]/textarea")));
        sqlCmdTextArea.SendKeys("UPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;");

        // SQL cmd warning gone
        IWebElement sqlCmdWarningGone = wait.Until(ExpectedConditions.ElementExists(By.XPath("/html/body/div[6]/div[1]/div/div/div[2]/div/div/div[3]/div")));
        Assert.That(sqlCmdWarningGone.Text, Is.Not.EqualTo("A SQL Command is required."));

        // Save
        IWebElement saveButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button")));
        saveButton.Click();

    }
    [Test]
    public void databaseCleanupdSorting()
    {
        // Name sort
        IWebElement nameSort = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/thead/tr/th")));
        nameSort.Click();

        // Name sort again
        IWebElement nameSortAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/thead/tr/th")));
        nameSortAgain.Click();

        // Schedule sort
        IWebElement scheduleSort = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        scheduleSort.Click();

        // Arrow moved on new sort
        IReadOnlyCollection<IWebElement> arrows = wait.Until(ExpectedConditions.VisibilityOfAllElementsLocatedBy(By.CssSelector(".feather")));
        Assert.That(arrows.Count > 0);

        // Schedule sort again
        IWebElement scheduleSortAgain = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/thead/tr/th[2]")));
        scheduleSortAgain.Click();

    }
    [Test]
    public void databaseCleanupeSearchbar()
    {
        // Find and send keys to the input field
        IWebElement inputField = wait.Until(ExpectedConditions.ElementExists(By.XPath("//div[@id='window']/div/div/div/div/div/nav/div/ul/li/fieldset/form/div/div/div/input")));
        inputField.SendKeys("Daniel");

    }
    [Test]
    public void databaseCleanupfEdit()
    {
        // Confirm first table child is test db
        IWebElement firstTableChild = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        Assert.That(firstTableChild.Text, Is.EqualTo("Daniel's DB Clean"));

        // Click into test db clean
        IWebElement testDbClean = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        testDbClean.Click();

        // Send keys
        IWebElement textArea = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[2]/textarea")));
        textArea.SendKeys("1");

        // Save Changes
        IWebElement saveButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[1]")));
        saveButton.Click();

    }
    [Test]
    public void databaseCleanupgDelete()
    {
        // Confirm first table child is test db
        IWebElement firstTableChild = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        Assert.That(firstTableChild.Text, Is.EqualTo("Daniel's DB Clean"));

        // Click into test db clean
        IWebElement testDbClean = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("//div[@id='window']/div/div/div/div/div[2]/table/tbody/tr/td")));
        testDbClean.Click();

        // Delete btn
        IWebElement deleteButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[6]/div[1]/div/div/div[3]/button[2]")));
        deleteButton.Click();

        // Confirm deletion
        IWebElement confirmDeletionButton = wait.Until(ExpectedConditions.ElementToBeClickable(By.XPath("/html/body/div[10]/div[1]/div/div/div[3]/button[1]")));
        confirmDeletionButton.Click();

    }
}

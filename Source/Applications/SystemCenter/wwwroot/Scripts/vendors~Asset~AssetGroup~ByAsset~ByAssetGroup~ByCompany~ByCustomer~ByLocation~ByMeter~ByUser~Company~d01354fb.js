(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{196:function(e,t,n){"use strict";var r,l=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return l(t,e),t.prototype.render=function(){var e=this;return o.createElement("div",{className:"form-check"},o.createElement("input",{type:"checkbox",className:"form-check-input",style:{zIndex:1},onChange:function(t){var n=a({},e.props.Record);n[e.props.Field]=t.target.checked,e.props.Setter(n)},value:this.props.Record[this.props.Field]?"on":"off",checked:!!this.props.Record[this.props.Field],disabled:null!=this.props.Disabled&&this.props.Disabled}),o.createElement("label",{className:"form-check-label"},null==this.props.Label?this.props.Field:this.props.Label))},t}(o.Component);t.default=i},197:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var l=n(0);t.default=function(e){return l.createElement("div",{className:"form-group"},l.createElement("label",null,null==e.Label?e.Field:e.Label),l.createElement("input",{type:void 0===e.Type?"text":e.Type,className:e.Valid(e.Field)?"form-control":"form-control is-invalid",onChange:function(t){var n;return e.Setter(r(r({},e.Record),((n={})[e.Field]=""!==t.target.value?t.target.value:null,n)))},value:null==e.Record[e.Field]?"":e.Record[e.Field].toString(),disabled:null!=e.Disabled&&e.Disabled}),l.createElement("div",{className:"invalid-feedback"},null==e.Feedback?e.Field+" is a required field.":e.Feedback))}},198:function(e,t,n){"use strict";var r,l=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return l(t,e),t.prototype.render=function(){var e=this;return o.createElement("div",{className:"form-group"},o.createElement("label",null,null==this.props.Label?this.props.Field:this.props.Label),o.createElement("input",{className:"form-control",type:"date",onChange:function(t){var n=a({},e.props.Record);""!==t.target.value?n[e.props.Field]=t.target.value:n[e.props.Field]=null,e.props.Setter(n)},value:null==this.props.Record[this.props.Field]?"":this.props.Record[this.props.Field].toString(),disabled:null!=this.props.Disabled&&this.props.Disabled}))},t}(o.Component);t.default=i},199:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var l=n(0);t.default=function(e){return l.createElement("div",{className:"form-group"},l.createElement("label",null,null==e.Label?e.Field:e.Label),l.createElement("select",{className:"form-control",onChange:function(t){var n=r({},e.Record);""!==t.target.value?n[e.Field]=t.target.value:n[e.Field]=null,e.Setter(n)},value:null==e.Record[e.Field]?"":e.Record[e.Field].toString(),disabled:null!=e.Disabled&&e.Disabled},e.EmptyOption?l.createElement("option",{value:""},void 0!==e.EmptyLabel?e.EmptyLabel:""):null,e.Options.map((function(e,t){return l.createElement("option",{key:t,value:e.Value},e.Label)}))))}},200:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var l=n(0);t.default=function(e){return l.createElement("div",{className:"form-group"},l.createElement("label",null,null==e.Label?e.Field:e.Label),l.createElement("textarea",{rows:e.Rows,className:e.Valid(e.Field)?"form-control":"form-control is-invalid",onChange:function(t){var n=r({},e.Record);""!==t.target.value?n[e.Field]=t.target.value:n[e.Field]=null,e.Setter(n)},value:null==e.Record[e.Field]?"":e.Record[e.Field].toString(),disabled:null!=e.Disabled&&e.Disabled}),l.createElement("div",{className:"invalid-feedback"},null==e.Feedback?e.Field+" is a required field.":e.Feedback))}},201:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var l=n(0);t.default=function(e){var t=l.useState("Custom"),n=t[0],a=t[1],o=l.useState(y(e.Record[e.FromField])),i=o[0],c=o[1],u=l.useState(y(e.Record[e.ToField])),s=u[0],d=u[1],f=l.useState(null!=i?g(i):""),p=f[0],m=f[1],h=l.useState(null!=s?g(s):""),v=h[0],b=h[1];function y(e){if(null===e)return null;var t=new Date(e);return isNaN(t.getTime())?null:t}function g(e){return e.getUTCFullYear()+"-"+(e.getUTCMonth()+1).toString().padStart(2,"0")+"-"+e.getUTCDate().toString().padStart(2,"0")}function E(e){return 1===e?"1 Day":7===e?"7 Days":30===e?"30 Days":90===e?"90 Days":180===e?"180 Days":365===e?"365 Days":"Custom"}l.useEffect((function(){var t=y(e.Record[e.FromField]),n=y(e.Record[e.ToField]);null==t||null==i?null==t&&null==i||c(t):t.getTime()!==i.getTime()&&c(t),null==n||null==s?null==n&&null==s||c(n):n.getTime()!==s.getTime()&&d(n)}),[e.Record]),l.useEffect((function(){var t=null!=i&&null!=s?Math.round((s.getTime()-i.getTime())/864e5):0;E(t)!==n&&a(E(t)),function(){var t,n=null!==s?g(s):"",l=null!==i?g(i):"",a=r(r({},e.Record),((t={})[e.ToField]=n,t[e.FromField]=l,t));e.Setter(a)}()}),[i,s]),l.useEffect((function(){var e,t="1 Day"===(e=n)?1:"7 Days"===e?7:"30 Days"===e?30:"90 Days"===e?90:"180 Days"===e?180:"365 Days"===e?365:0;t>0&&(null!=i?d(new Date(i.valueOf()+864e5*t)):null!=s?c(new Date(s.valueOf()-864e5*t)):(c(new Date((new Date).valueOf()-864e5*t)),d(new Date)))}),[n]),l.useEffect((function(){null!=i&&m(g(i))}),[i]),l.useEffect((function(){null!=p.match("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-2][0-9])")?c(y(p)):c(null)}),[p]),l.useEffect((function(){null!=s&&b(g(s))}),[s]),l.useEffect((function(){null!=v.match("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-2][0-9])")?d(y(v)):d(null)}),[v]);var k=null!==i&&!isNaN(i.getTime()),O=null!==s&&!isNaN(s.getTime())&&(!k||null!==i&&i.getTime()<s.getTime());return k=void 0===e.Valid?k:e.Valid,O=void 0===e.Valid?O:e.Valid,l.createElement("div",{className:"form-group"},l.createElement("label",null,e.Label),l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("select",{className:"form-control",value:n,onChange:function(e){return a(e.target.value)}},l.createElement("option",{value:"Custom"},"Custom"),l.createElement("option",{value:"1 Day"},"1 Day"),l.createElement("option",{value:"7 Days"},"7 Days"),l.createElement("option",{value:"30 Days"},"30 Days"),l.createElement("option",{value:"90 Days"},"90 Days"),l.createElement("option",{value:"180 Days"},"180 Days"),l.createElement("option",{value:"365 Days"},"365 Days"))),l.createElement("div",{className:"col"},l.createElement("input",{className:"form-control"+(k?"":" is-invalid"),type:"date",onChange:function(e){m(e.target.value)},value:p,disabled:null!=e.Disabled&&e.Disabled})),l.createElement("div",{className:"col"},l.createElement("input",{className:"form-control"+(O?"":" is-invalid"),type:"date",onChange:function(e){b(e.target.value)},value:v,disabled:null!=e.Disabled&&e.Disabled}))))}},202:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var l=n(0);t.default=function(e){return l.createElement("div",{className:"form-group"},l.createElement("label",null,null==e.Label?e.Field:e.Label),l.createElement("br",null),l.createElement("div",{className:"form-check form-check-inline"},l.createElement("input",{className:"form-check-input",type:"checkbox",checked:e.Record[e.Field]===Math.pow(2,e.Enum.length)-1,onChange:function(t){var n;return e.Setter(r(r({},e.Record),((n={})[e.Field]=t.target.checked?Math.pow(2,e.Enum.length)-1:0,n)))}}),l.createElement("label",{className:"form-check-label"},"All")),e.Enum.map((function(t,n){return l.createElement("div",{key:n,className:"form-check form-check-inline"},l.createElement("input",{className:"form-check-input",type:"checkbox",checked:(a=n,0!=(e.Record[e.Field]/Math.pow(2,a)&1)),onChange:function(t){var l;return e.Setter(r(r({},e.Record),((l={})[e.Field]=t.target.checked?function(t){return e.Record[e.Field]+Math.pow(2,t)}(n):function(t){return e.Record[e.Field]-Math.pow(2,t)}(n),l)))}}),l.createElement("label",{className:"form-check-label"},t));var a})))}},203:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var l=n(0);t.default=function(e){var t;return l.createElement("div",{className:"form-group"},l.createElement("label",null,null==e.Label?e.Field:e.Label),l.createElement("select",{multiple:!0,className:"form-control",onChange:function(t){var n,l=r(r({},e.Record),((n={})[e.Field]=Array.from(t.target.selectedOptions).map((function(e){return e.value})),n));e.Setter(l)},value:null!==(t=e.Record[e.Field])&&void 0!==t?t:[],disabled:null!=e.Disabled&&e.Disabled,style:e.Style},e.Options.map((function(e,t){return l.createElement("option",{key:t,value:e.Value},e.Label)}))))}},204:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},l=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),l=0;for(t=0;t<n;t++)for(var a=arguments[t],o=0,i=a.length;o<i;o++,l++)r[l]=a[o];return r};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0);t.default=function(e){return a.createElement("div",{className:"form-group"},a.createElement("label",null,null==e.Label?e.Field:e.Label),a.createElement("br",null),a.createElement("div",{className:"form-check form-check-inline"},a.createElement("input",{className:"form-check-input",type:"checkbox",checked:JSON.stringify(e.Record[e.Field])===JSON.stringify(e.Checkboxes.map((function(e){return e.ID}))),onChange:function(t){var n;return e.Setter(r(r({},e.Record),((n={})[e.Field]=t.target.checked?e.Checkboxes.map((function(e){return e.ID})):[],n)))}}),a.createElement("label",{className:"form-check-label"},"All")),e.Checkboxes.map((function(t,n){return a.createElement("div",{key:n,className:"form-check form-check-inline"},a.createElement("input",{className:"form-check-input",type:"checkbox",checked:void 0!==e.Record[e.Field].find((function(e){return t.ID===e})),onChange:function(n){var a;return e.Setter(r(r({},e.Record),((a={})[e.Field]=n.target.checked?function(t){var n=l(e.Record[e.Field]);return n.indexOf(t.ID)<0&&n.push(t.ID),n.sort(),n}(t):function(t){var n=l(e.Record[e.Field]),r=n.indexOf(t.ID);return n.splice(r,1),n}(t),a)))}}),a.createElement("label",{className:"form-check-label"},t.Label))})))}},205:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.default=function(e){var t=r.useState(!1),n=t[0],l=t[1],a=r.useRef(null);function o(e){null===a.current?l(!n):a.current.contains(e.target)?l(!0):l(!1)}return r.useEffect((function(){return document.addEventListener("mousedown",o,!1),function(){document.removeEventListener("mousedown",o,!1)}}),[]),r.createElement("div",{ref:a,style:{position:"relative",display:"inline-block",width:"inherit"}},r.createElement("button",{style:{border:"1px solid #ced4da",padding:".375rem .75rem",fontSize:"1rem",borderRadius:".25rem"},className:"btn form-control dropdown-toggle",onClick:o},e.Options.filter((function(e){return e.Selected})).length!==e.Options.length?e.Options.filter((function(e){return e.Selected})).length:"All "," ","Selected"),r.createElement("div",{style:{maxHeight:.75*window.innerHeight,overflowY:"auto",padding:"10 5",display:n?"block":"none",position:"absolute",backgroundColor:"#fff",boxShadow:"0px 8px 16px 0px rgba(0,0,0,0.2)",zIndex:401,minWidth:"100%"}},r.createElement("table",{className:"table",style:{margin:0}},r.createElement("tbody",null,r.createElement("tr",{onClick:function(t){t.preventDefault(),e.OnChange(t,e.Options.filter((function(t){return t.Selected===(e.Options.filter((function(e){return e.Selected})).length===e.Options.length)})))}},r.createElement("td",null,r.createElement("input",{type:"checkbox",checked:e.Options.filter((function(e){return e.Selected})).length===e.Options.length,onChange:function(){return null}})),r.createElement("td",null,"All")),e.Options.map((function(t,n){return r.createElement("tr",{key:n,onClick:function(n){return e.OnChange(n,[t])}},r.createElement("td",null,r.createElement("input",{type:"checkbox",checked:t.Selected,onChange:function(){return null}})),r.createElement("td",null,t.Text))}))))))}},35:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MultiCheckBoxSelect=t.ArrayCheckBoxes=t.ArrayMultiSelect=t.EnumCheckBoxes=t.DateRangePicker=t.TextArea=t.Select=t.DatePicker=t.Input=t.CheckBox=void 0;var r=n(196);t.CheckBox=r.default;var l=n(197);t.Input=l.default;var a=n(198);t.DatePicker=a.default;var o=n(199);t.Select=o.default;var i=n(200);t.TextArea=i.default;var c=n(201);t.DateRangePicker=c.default;var u=n(202);t.EnumCheckBoxes=u.default;var s=n(203);t.ArrayMultiSelect=s.default;var d=n(204);t.ArrayCheckBoxes=d.default;var f=n(205);t.MultiCheckBoxSelect=f.default},42:function(e,t){var n,r,l=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var c,u=[],s=!1,d=-1;function f(){s&&c&&(s=!1,c.length?u=c.concat(u):d=-1,u.length&&p())}function p(){if(!s){var e=i(f);s=!0;for(var t=u.length;t;){for(c=u,u=[];++d<t;)c&&c[d].run();d=-1,t=u.length}c=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}l.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new m(e,t)),1!==u.length||s||i(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},l.title="browser",l.browser=!0,l.env={},l.argv=[],l.version="",l.versions={},l.on=h,l.addListener=h,l.once=h,l.off=h,l.removeListener=h,l.removeAllListeners=h,l.emit=h,l.prependListener=h,l.prependOnceListener=h,l.listeners=function(e){return[]},l.binding=function(e){throw new Error("process.binding is not supported")},l.cwd=function(){return"/"},l.chdir=function(e){throw new Error("process.chdir is not supported")},l.umask=function(){return 0}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["Asset~Company~Customer~Location"],{

/***/ "./TSX/SystemCenter/CommonComponents/AdditionalFieldsWindow.tsx":
/*!**********************************************************************!*\
  !*** ./TSX/SystemCenter/CommonComponents/AdditionalFieldsWindow.tsx ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "../../node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _AssetAttribute_Asset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../AssetAttribute/Asset */ "./TSX/SystemCenter/AssetAttribute/Asset.tsx");
/* harmony import */ var _gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-interactive */ "../../node_modules/@gpa-gemstone/react-interactive/lib/index.js");
/* harmony import */ var _gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "../../node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @gpa-gemstone/react-table */ "../../node_modules/@gpa-gemstone/react-table/lib/index.js");
/* harmony import */ var _gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_5__);
//******************************************************************************************************
//  AdditionalFieldsWindow.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/28/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (undefined && undefined.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};






function AdditionalFieldsWindow(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"]([]), 2), valueListGroups = _a[0], setValueListGroups = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"]([]), 2), externalDBs = _b[0], setExternalDBs = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"]([]), 2), externalDBTables = _c[0], setExternalDBTables = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"]([]), 2), additionalFields = _d[0], setAdditionalFields = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"]([]), 2), additionalFieldValues = _e[0], setAdditionalFieldVaules = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"]([]), 2), additionalFieldValuesWorking = _f[0], setAdditionalFieldValuesWorking = _f[1];
    var _g = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"](false), 2), edit = _g[0], setEdit = _g[1];
    var _h = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"]('FieldName'), 2), sortFields = _h[0], setSortField = _h[1];
    var _j = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"](false), 2), ascending = _j[0], setAscending = _j[1];
    var _k = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"]({ ID: 0, FieldName: '', Type: 'string', OpenXDAParentTable: props.Type, ExternalDB: '', ExternalDBTable: '', ExternalDBTableKey: '', IsSecure: false }), 2), newField = _k[0], setNewField = _k[1];
    var _l = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"](false), 2), showWarning = _l[0], setShowWarning = _l[1];
    var _m = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"](false), 2), showLoading = _m[0], setShowLoading = _m[1];
    var _o = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"](false), 2), showEdit = _o[0], setShowEdit = _o[1];
    var _p = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"]('None'), 2), hover = _p[0], setHover = _p[1];
    var _q = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"](true), 2), newFieldNameValid = _q[0], setNewFieldNameValid = _q[1];
    var EmptyField = { ID: 0, FieldName: '', Type: 'string', OpenXDAParentTable: props.Type, ExternalDB: '', ExternalDBTable: '', ExternalDBTableKey: '', IsSecure: false };
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        return getData();
    }, [props.ID, props.Type, props.Tab]);
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () { setAdditionalFieldValuesWorking(additionalFieldValues); }, [additionalFieldValues]);
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        var h = getFields();
        return function () { if (h.abort != undefined)
            h.abort(); };
    }, [sortFields, ascending]);
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        var h = validateFieldName();
        return function () { if (h != null && h.abort != null)
            h.abort(); };
    }, [newField.ID, newField.FieldName]);
    function getData() {
        var handle1 = getFields();
        var handle2 = getFieldValues();
        var handle3 = getValueLists();
        var handle4 = getExternalDataBase();
        var handle5 = getExternalDataBaseTables();
        setNewField({ ID: 0, FieldName: '', Type: 'string', OpenXDAParentTable: props.Type, ExternalDB: '', ExternalDBTable: '', ExternalDBTableKey: '', IsSecure: false });
        return function () {
            if (handle1.abort != undefined)
                handle1.abort();
            if (handle2.abort != undefined)
                handle2.abort();
            if (handle3.abort != undefined)
                handle3.abort();
            if (handle4.abort != undefined)
                handle4.abort();
            if (handle5.abort != undefined)
                handle5.abort();
        };
    }
    function getFields() {
        var handle = $.ajax({
            type: "GET",
            url: homePath + "api/SystemCenter/AdditionalField/ParentTable/" + props.Type + "/" + sortFields + "/" + (ascending ? '1' : '0'),
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: true,
            async: true
        });
        handle.done(function (data) {
            setAdditionalFields(data);
        });
        return handle;
    }
    function getFieldValues() {
        var handle = $.ajax({
            type: "GET",
            url: homePath + "api/SystemCenter/AdditionalFieldValue/" + props.ID,
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: true,
            async: true
        });
        handle.done(function (data) {
            setAdditionalFieldVaules(data);
        });
        return handle;
    }
    function getValueLists() {
        var handle = $.ajax({
            type: "GET",
            url: homePath + "api/ValueListGroup",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: true,
            async: true
        });
        handle.done(function (data) {
            setValueListGroups(data);
        });
        return handle;
    }
    function getExternalDataBase() {
        var handle = $.ajax({
            type: "GET",
            url: homePath + "api/SystemCenter/AdditionalField/ExternalDataBase",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: true,
            async: true
        });
        handle.done(function (data) {
            setExternalDBs(data.map(function (item) { return item.ExternalDB; }));
        });
        return handle;
    }
    function getExternalDataBaseTables() {
        var handle = $.ajax({
            type: "GET",
            url: homePath + "api/SystemCenter/ExternalDBTables/TableName/0",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: true,
            async: true
        });
        handle.done(function (data) {
            var d = JSON.parse(data);
            setExternalDBTables(d.map(function (item) { return item.TableName; }));
        });
        return handle;
    }
    function validateFieldName() {
        if (newField.FieldName == null || newField.FieldName.length == 0)
            return null;
        var h = $.ajax({
            type: "Post",
            url: homePath + "api/SystemCenter/AdditionalField/SearchableList",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            data: JSON.stringify({ Searches: [{ FieldName: 'FieldName', Operator: "=", SearchText: newField.FieldName, Type: 'string' }], OrderBy: "FieldName", Ascending: true }),
            cache: false,
            async: true
        });
        h.done(function (d) {
            var fields = JSON.parse(d);
            if (fields.length == 0)
                setNewFieldNameValid(true);
            else if (fields.length > 1)
                setNewFieldNameValid(false);
            else if (fields[0].ID == newField.ID)
                setNewFieldNameValid(true);
            else
                setNewFieldNameValid(false);
        });
        return h;
    }
    function addOrUpdateValues() {
        $.ajax({
            type: "PATCH",
            url: homePath + "api/SystemCenter/AdditionalFieldValue/Array",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(additionalFieldValuesWorking),
            dataType: 'json',
            cache: true,
            async: true
        }).done(function (e) {
            getData();
        });
    }
    function addNewField() {
        setShowLoading(true);
        $.ajax({
            type: "PATCH",
            url: homePath + "api/SystemCenter/AdditionalField/Update",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(newField),
            dataType: 'json',
            cache: true,
            async: true
        }).done(function (e) {
            getData();
            setShowLoading(false);
        });
    }
    function deleteField(field) {
        setShowLoading(true);
        $.ajax({
            type: "DELETE",
            url: homePath + "api/SystemCenter/AdditionalField/Delete",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(field),
            dataType: 'json',
            cache: true,
            async: true
        }).done(function (e) {
            getData();
            setShowLoading(false);
        });
    }
    function ValidField() {
        return newFieldNameValid && newField.FieldName != null && newField.FieldName.length > 0 &&
            (newField.ExternalDB == null || newField.ExternalDB.length == 0 ||
                (!(newField.ExternalDBTable == null || newField.ExternalDBTable.length == 0) &&
                    !(newField.ExternalDBTableKey == null || newField.ExternalDBTableKey.length == 0)));
    }
    function HasValueChanged() {
        return additionalFieldValuesWorking.some(function (item, index) {
            var i = additionalFieldValues.findIndex(function (val) { return val.AdditionalFieldID == item.AdditionalFieldID; });
            if (i == -1 && item.Value == null)
                return false;
            if (i == -1)
                return true;
            return item.Value != additionalFieldValues[i].Value;
        });
    }
    function ChangedValues(warning) {
        var result = [];
        additionalFieldValuesWorking.forEach(function (item, index) {
            var iFld = additionalFields.findIndex(function (fld) { return fld.ID == item.AdditionalFieldID; });
            var iWVal = additionalFieldValues.findIndex(function (val) { return val.AdditionalFieldID == item.AdditionalFieldID; });
            if (iFld == -1 || (iWVal == -1 && item.Value == null))
                return;
            if (iWVal == -1) {
                result.push((warning ? react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", { key: index },
                    " ",
                    react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("i", { style: { marginRight: '10px', color: '#ffc107' }, className: "fa fa-exclamation-triangle" }),
                    " Changes to '",
                    additionalFields[iFld].FieldName,
                    "' will be lost.") :
                    react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", { key: index },
                        " ",
                        react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("i", { style: { marginRight: '10px', color: '#28A745' }, className: "fa fa-check-circle" }),
                        " Changes to '",
                        additionalFields[iFld].FieldName,
                        "' are valid.")));
                return;
            }
            if (item.Value == additionalFieldValues[iWVal].Value)
                return;
            result.push((warning ? react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", { key: index },
                " ",
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("i", { style: { marginRight: '10px', color: '#ffc107' }, className: "fa fa-exclamation-triangle" }),
                " Changes to '",
                additionalFields[iFld].FieldName,
                "' will be lost.") :
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", { key: index },
                    " ",
                    react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("i", { style: { marginRight: '10px', color: '#28A745' }, className: "fa fa-check-circle" }),
                    " Changes to '",
                    additionalFields[iFld].FieldName,
                    "' are valid.")));
        });
        return result;
    }
    function HasInvalidChanges() {
        return additionalFieldValuesWorking.some(function (item) {
            var i = additionalFields.findIndex(function (fld) { return fld.ID == item.AdditionalFieldID; });
            if (i == -1)
                return false;
            if (additionalFields[i].Type == 'integer')
                return !(item.Value == null || _AssetAttribute_Asset__WEBPACK_IMPORTED_MODULE_2__["default"].isInteger(item.Value));
            return false;
        });
    }
    function InvalidChanges() {
        if (!HasInvalidChanges())
            return [];
        var result = [];
        additionalFieldValuesWorking.forEach(function (item, index) {
            var i = additionalFields.findIndex(function (fld) { return fld.ID == item.AdditionalFieldID; });
            if (i == -1)
                return;
            if (additionalFields[i].Type == 'integer' && !(item.Value == null || _AssetAttribute_Asset__WEBPACK_IMPORTED_MODULE_2__["default"].isInteger(item.Value)))
                result.push(react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", { key: index },
                    " ",
                    react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("i", { style: { marginRight: '10px', color: '#dc3545' }, className: "fa fa-exclamation-circle" }),
                    " Value for '",
                    additionalFields[i].FieldName,
                    "' is required to be an integer."));
        });
        return result;
    }
    return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "card", style: { marginBottom: 10, maxHeight: window.innerHeight - 215 } },
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "card-header" },
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "row" },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "col" },
                    react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("h4", null, "Additional Fields:")),
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "col" },
                    (edit) ?
                        react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("button", { className: "btn btn-default pull-right", "data-tooltip": 'View', onClick: function () { setEdit(false); getFieldValues(); }, onMouseEnter: function () { return setHover('View'); }, onMouseLeave: function () { return setHover('None'); } }, "View") :
                        react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("button", { className: "btn btn-primary pull-right", onClick: function () { return setEdit(true); } }, "Edit"),
                    react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_3__["ToolTip"], { Show: hover == 'View' && (HasValueChanged()), Position: 'left', Theme: 'dark', Target: "View" }, ChangedValues(true))))),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "card-body", style: { maxHeight: window.innerHeight - 315, overflowY: 'auto' } },
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_5___default.a, { cols: [
                    { key: 'FieldName', label: 'Field', headerStyle: { width: 'auto' }, rowStyle: { width: 'auto' } },
                    { key: 'ExternalDB', label: 'Ext DB', headerStyle: { width: 'auto' }, rowStyle: { width: 'auto' } },
                    { key: 'Type', label: 'Type', headerStyle: { width: 'auto' }, rowStyle: { width: 'auto' } },
                    {
                        key: 'IsSecure', label: 'Value', headerStyle: { width: 'auto' }, rowStyle: { width: 'auto' }, content: function (item) {
                            var index = additionalFieldValues.findIndex(function (value) { return value.AdditionalFieldID == item.ID; });
                            if (!edit)
                                return (index > -1 && additionalFieldValues[index].Value != null ? additionalFieldValues[index].Value.toString() : '');
                            return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](ValueField, { Field: item, ParentTableID: props.ID, Values: additionalFieldValuesWorking, Setter: function (val) { return setAdditionalFieldValuesWorking(val); } });
                        }
                    },
                    { key: 'ID', label: '', headerStyle: { width: 40, paddingRight: 0, paddingLeft: 10 }, rowStyle: { width: 40, paddingRight: 0, paddingLeft: 10, paddingTop: 36 }, content: function (item) { return (edit ? react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("button", { className: "btn btn-sm", onClick: function () { setNewField(item); setShowEdit(true); } },
                            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("span", null,
                                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("i", { className: "fa fa-pencil" }))) : ''); } },
                    { key: null, label: '', headerStyle: { width: 40, paddingLeft: 0, paddingRight: 10 }, rowStyle: { width: 40, paddingLeft: 0, paddingTop: 36, paddingRight: 10 }, content: function (item) { return (edit ? react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("button", { className: "btn btn-sm", onClick: function () { setNewField(item); setShowWarning(true); } },
                            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("span", null,
                                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("i", { className: "fa fa-times" }))) : ''); } },
                ], tableClass: "table table-hover", data: additionalFields, sortField: sortFields, ascending: ascending, onSort: function (d) {
                    if (d.col == null || d.col == 'ID' || d.col == 'IsSecure')
                        return;
                    if (d.col == sortFields)
                        setAscending(!ascending);
                    else {
                        setAscending(true);
                        setSortField(d.col);
                    }
                }, onClick: function (fld) { }, theadStyle: { fontSize: 'smaller', display: 'table', tableLayout: 'fixed', width: '100%' }, tbodyStyle: { display: 'block', overflowY: 'scroll', maxHeight: window.innerHeight - 455, }, rowStyle: { display: 'table', tableLayout: 'fixed', width: '100%' }, selected: function (item) { return false; } })),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "card-footer" },
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "btn-group mr-2" },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("button", { className: "btn btn-primary" + (!edit ? ' disabled' : ''), onMouseEnter: function () { return setHover('New'); }, onMouseLeave: function () { return setHover('None'); }, onClick: function () { if (edit) {
                        setShowEdit(true);
                        setNewField(EmptyField);
                    } }, "data-tooltip": 'New' }, "Add Field")),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_3__["ToolTip"], { Show: hover == 'New' && !edit, Position: 'top', Theme: 'dark', Target: "New" }, !edit ? react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", null, " To add a new Field switch to Edit mode by clicking on the Edit Button on the upper right corner.") : null),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "btn-group mr-2" },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("button", { className: "btn btn-primary" + (!HasValueChanged() || !edit || HasInvalidChanges() ? ' disabled' : ''), onClick: function () { if (HasValueChanged() && !HasInvalidChanges() && edit)
                        addOrUpdateValues(); }, onMouseEnter: function () { return setHover('Save'); }, onMouseLeave: function () { return setHover('None'); }, "data-tooltip": 'SaveValues' }, "Save Changes")),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_3__["ToolTip"], { Show: hover == 'Save' && (!edit || HasValueChanged()), Position: 'top', Theme: 'dark', Target: "SaveValues" },
                !edit ? react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", null, " To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner.") : null,
                HasValueChanged() && !HasInvalidChanges() ? ChangedValues(false) : null,
                HasValueChanged() && HasInvalidChanges() ? InvalidChanges() : null),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "btn-group mr-2" },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("button", { className: "btn btn-default" + (!(HasValueChanged()) || !edit ? ' disabled' : ''), onClick: function () { if (HasValueChanged() && edit)
                        getFieldValues(); }, onMouseEnter: function () { return setHover('Clear'); }, onMouseLeave: function () { return setHover('None'); }, "data-tooltip": 'Clear' }, "Reset")),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_3__["ToolTip"], { Show: hover == 'Clear' && (!edit || HasValueChanged()), Position: 'top', Theme: 'dark', Target: "Clear" },
                !edit ? react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", null, " To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner.") : null,
                HasValueChanged() ? ChangedValues(true) : null)),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_3__["LoadingScreen"], { Show: showLoading }),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_3__["Warning"], { Show: showWarning, Title: 'Delete ' + newField.FieldName, Message: "This will delete the field '" + newField.FieldName + "' from all " + props.Type + "s and will also delete all information assigned to these fields.", CallBack: function (confirm) { if (confirm)
                deleteField(newField); setShowWarning(false); } }),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_3__["Modal"], { Title: 'Additional Field', ConfirmText: 'Save', CancelText: 'Close', ConfirmBtnClass: 'btn-primary' + (!ValidField() ? ' disabled' : ''), Show: showEdit, Size: 'lg', ShowX: true, CallBack: function (confirmation, btn) { if (!ValidField() && confirmation)
                return; if (confirmation)
                addNewField(); setShowEdit(false); }, ConfirmShowToolTip: !ValidField(), ConfirmToolTipContent: react__WEBPACK_IMPORTED_MODULE_0__["createElement"](react__WEBPACK_IMPORTED_MODULE_0__["Fragment"], null,
                newField.FieldName == null || newField.FieldName.length == 0 || !newFieldNameValid ? react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", null,
                    " ",
                    react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("i", { style: { marginRight: '10px', color: '#dc3545' }, className: "fa fa-exclamation-circle" }),
                    " Field Name is required and has to be unique.") : null,
                newField.ExternalDB != null && newField.ExternalDBTable == null ? react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", null,
                    " ",
                    react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("i", { style: { marginRight: '10px', color: '#dc3545' }, className: "fa fa-exclamation-circle" }),
                    " A Field from an External Database requires an External Database Table.") : null,
                newField.ExternalDB != null && newField.ExternalDBTableKey == null ? react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", null,
                    " ",
                    react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("i", { style: { marginRight: '10px', color: '#dc3545' }, className: "fa fa-exclamation-circle" }),
                    " A Field from an External Database requires an External Database Table Key.") : null) },
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__["Input"], { Record: newField, Field: 'FieldName', Valid: function (field) { return newField.FieldName != null && newField.FieldName.length > 0 && newFieldNameValid; }, Label: "Field Name", Setter: setNewField, Feedback: 'The additional field needs to have a unique Field Name' }),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__["Select"], { Record: newField, Field: 'Type', Options: [{ Value: 'string', Label: 'string' }, { Value: 'integer', Label: 'integer' }, { Value: 'number', Label: 'number' }].concat(valueListGroups.filter(function (x) { return x.Enabled; }).map(function (x) { return { Value: x.Name, Label: x.Name }; })), Label: "Field Type", Setter: setNewField }),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__["Select"], { Record: newField, Field: 'ExternalDB', Label: "External Database", Setter: function (fld) {
                    if (fld.ExternalDB == null || fld.ExternalDB == '')
                        fld = __assign(__assign({}, fld), { ExternalDB: null, ExternalDBTable: null, ExternalDBTableKey: null });
                    setNewField(fld);
                }, EmptyOption: true, Options: externalDBs.map(function (item) { return ({ Value: item, Label: item }); }) }),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { "data-tooltip": "ExternalDB", onMouseEnter: function () { return setHover('ExternalDB'); }, onMouseLeave: function () { return setHover('None'); } },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__["Select"], { EmptyOption: true, Disabled: newField.ExternalDB == null || newField.ExternalDB.length == 0, Record: newField, Field: 'ExternalDBTable', Options: externalDBTables.map(function (item) { return ({ Value: item, Label: item }); }), Label: "External Database Table", Setter: setNewField })),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__["Input"], { Disabled: newField.ExternalDB == null || newField.ExternalDB.length == 0, Record: newField, Field: 'ExternalDBTableKey', Valid: function (field) { return true; }, Label: "External Database Table Key", Setter: setNewField }),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__["CheckBox"], { Record: newField, Field: 'IsSecure', Label: "Secure Data", Setter: setNewField })),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_3__["ToolTip"], { Zindex: 9999, Show: hover == 'ExternalDB' && (newField.ExternalDB == null || newField.ExternalDB.length == 0), Position: 'bottom', Theme: 'dark', Target: "ExternalDB" },
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("p", null, " No External Database selected."))));
}
/* harmony default export */ __webpack_exports__["default"] = (AdditionalFieldsWindow);
var ValueField = function (props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"]([]), 2), valueListItems = _a[0], setValueListItems = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"](-1), 2), valueIndex = _b[0], setValueIndex = _b[1];
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        var index = props.Values.findIndex(function (value) { return value.AdditionalFieldID == props.Field.ID; });
        setValueIndex(index);
        if (index == -1)
            props.Setter(__spread(props.Values, [{ ID: 0, AdditionalFieldID: props.Field.ID, OpenXDAParentTableID: props.ParentTableID, Value: null }]));
    }, [props.Values, props.Field]);
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        if ((["integer", "number", "boolean", "string"]).indexOf(props.Field.Type) < 0) {
            var handle_1 = $.ajax({
                type: "GET",
                url: homePath + "api/ValueList/Group/" + props.Field.Type,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                cache: true,
                async: true
            });
            handle_1.done(function (vl) {
                setValueListItems(vl);
            });
            return function () {
                if (handle_1.abort != undefined)
                    handle_1.abort();
            };
        }
    }, [props.Field.Type]);
    function Setter(record) {
        var updated = lodash__WEBPACK_IMPORTED_MODULE_1__["cloneDeep"](props.Values);
        updated[valueIndex] = record;
        props.Setter(updated);
    }
    function Valid(type) {
        if (props.Field.Type == "integer")
            return props.Values[valueIndex].Value == null || _AssetAttribute_Asset__WEBPACK_IMPORTED_MODULE_2__["default"].isInteger(props.Values[valueIndex].Value);
        else if (props.Field.Type == "number")
            return props.Values[valueIndex].Value == null || _AssetAttribute_Asset__WEBPACK_IMPORTED_MODULE_2__["default"].isRealNumber(props.Values[valueIndex].Value);
        else if (props.Field.Type == "boolean")
            return true;
        else
            return true;
    }
    if (valueIndex == -1 || props.Values[valueIndex] == undefined) {
        return null;
    }
    if (props.Field.Type == 'number' || props.Field.Type == 'integer')
        return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__["Input"], { Record: props.Values[valueIndex], Field: 'Value', Valid: Valid, Label: '', Type: 'number', Setter: Setter, Feedback: props.Field.FieldName + ' is an integer field.' });
    if (props.Field.Type == 'string')
        return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__["Input"], { Record: props.Values[valueIndex], Field: 'Value', Valid: Valid, Label: '', Type: 'text', Setter: Setter });
    if (props.Field.Type == 'boolean')
        return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__["CheckBox"], { Record: props.Values[valueIndex], Field: 'Value', Label: '', Setter: Setter });
    return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__["Select"], { EmptyOption: true, Record: props.Values[valueIndex], Field: 'Value', Label: '', Setter: Setter, Options: valueListItems.map(function (x) { return ({ Value: x.ID.toString(), Label: x.Text }); }) });
};


/***/ }),

/***/ "./TSX/SystemCenter/CommonComponents/NoteWindow.tsx":
/*!**********************************************************!*\
  !*** ./TSX/SystemCenter/CommonComponents/NoteWindow.tsx ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "../../node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gpa-gemstone/react-interactive */ "../../node_modules/@gpa-gemstone/react-interactive/lib/index.js");
/* harmony import */ var _gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/react-table */ "../../node_modules/@gpa-gemstone/react-table/lib/index.js");
/* harmony import */ var _gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "../../node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);
//******************************************************************************************************
//  AssetNote.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/22/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};





function NoteWindow(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_4__["useState"](0), 2), noteTypeID = _a[0], setNoteTypeID = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_4__["useState"]({ ID: -1, UserAccount: '', Note: '', NoteTypeID: -1, ReferenceTableID: -1, Timestamp: '' }), 2), note = _b[0], setNote = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_4__["useState"](false), 2), showEdit = _c[0], setEdit = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_4__["useState"]([]), 2), noteList = _d[0], setNoteList = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_4__["useState"]('Timestamp'), 2), sortField = _e[0], setSortField = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_4__["useState"](false), 2), ascending = _f[0], setAscending = _f[1];
    var _g = __read(react__WEBPACK_IMPORTED_MODULE_4__["useState"](false), 2), hoverAdd = _g[0], setHoverAdd = _g[1];
    var _h = __read(react__WEBPACK_IMPORTED_MODULE_4__["useState"](false), 2), hoverClear = _h[0], setHoverClear = _h[1];
    react__WEBPACK_IMPORTED_MODULE_4__["useEffect"](function () {
        var typeHandle = getNoteTypeID();
        getNotes();
        return function () { if (typeHandle != null && typeHandle.abort != null)
            typeHandle.abort(); };
    }, [props.Type]);
    react__WEBPACK_IMPORTED_MODULE_4__["useEffect"](function () {
        var handle = getNotes();
        return function () { if (handle != null && handle.abort != null)
            handle.abort(); };
    }, [props.ID, sortField, ascending]);
    function handleEdit(d) {
        setNote(d);
        setEdit(true);
        //deleteNote(d);
    }
    function closeEdit(confirm) {
        if (note.Note.length == 0 && confirm)
            return;
        setEdit(false);
        if (confirm) {
            var n = lodash__WEBPACK_IMPORTED_MODULE_3___default.a.cloneDeep(note);
            deleteNote(n);
            addNote(n);
        }
        setNote({ ID: -1, UserAccount: '', Note: '', NoteTypeID: -1, ReferenceTableID: -1, Timestamp: '' });
    }
    function getNotes() {
        var h = $.ajax({
            type: "POST",
            url: homePath + "api/OpenXDA/Note/ForObject/" + props.Type + "/" + props.ID + "/Search",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            data: JSON.stringify({ Searches: [], OrderBy: sortField, Ascending: ascending }),
            cache: false,
            async: true
        });
        h.done(function (data) {
            var d = JSON.parse(data);
            setNoteList(d);
        });
        ;
        return h;
    }
    function getNoteTypeID() {
        var handle = $.ajax({
            type: "GET",
            url: homePath + "api/OpenXDA/NoteType",
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            cache: true,
            async: true
        });
        handle.then(function (d) {
            var record = d.find(function (d) { return d.ReferenceTableName == props.Type; });
            setNoteTypeID(record.ID);
        });
        return handle;
    }
    function deleteNote(d) {
        $.ajax({
            type: "DELETE",
            url: homePath + "api/OpenXDA/Note/Delete",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(d),
            cache: true,
            async: true
        }).done(function () { return getNotes(); });
    }
    function addNote(currentNote) {
        setNote({ ID: -1, UserAccount: '', Note: '', NoteTypeID: -1, ReferenceTableID: -1, Timestamp: '' });
        $.ajax({
            type: "POST",
            url: homePath + "api/OpenXDA/Note/Add",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ ID: 0, NoteTypeID: noteTypeID, ReferenceTableID: props.ID, Note: currentNote.Note, Timestamp: moment().format('MM/DD/YYYY HH:mm'), UserAccount: '' }),
            dataType: 'json',
            cache: true,
            async: true
        }).done(function (e) {
            getNotes();
        });
    }
    return (react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("div", { className: "card", style: { marginBottom: 10, maxHeight: window.innerHeight - 215 } },
        react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("div", { className: "card-header" },
            react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("div", { className: "row" },
                react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("div", { className: "col" },
                    react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("h4", null, "Notes:")))),
        react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("div", { className: "card-body", style: { maxHeight: window.innerHeight - 315, overflowY: 'auto' } },
            react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("div", null,
                react__WEBPACK_IMPORTED_MODULE_4__["createElement"](_gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2___default.a, { cols: [
                        { key: 'Note', label: 'Note', headerStyle: { width: '50%' }, rowStyle: { width: '50%' } },
                        { key: 'Timestamp', label: 'Time', headerStyle: { width: 'auto' }, rowStyle: { width: 'auto' }, content: function (item) { return moment.utc(item.Timestamp).format("MM/DD/YYYY HH:mm"); } },
                        { key: 'UserAccount', label: 'User', headerStyle: { width: 'auto' }, rowStyle: { width: 'auto' } },
                        {
                            key: null, label: '', headerStyle: { width: 'auto' }, rowStyle: { width: 'auto' }, content: function (item) { return react__WEBPACK_IMPORTED_MODULE_4__["createElement"](react__WEBPACK_IMPORTED_MODULE_4__["Fragment"], null,
                                react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("button", { className: "btn btn-sm", onClick: function (e) { return handleEdit(item); } },
                                    react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("span", null,
                                        react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("i", { className: "fa fa-pencil" }))),
                                react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("button", { className: "btn btn-sm", onClick: function (e) { return deleteNote(item); } },
                                    react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("span", null,
                                        react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("i", { className: "fa fa-times" })))); }
                        },
                    ], tableClass: "table table-hover", data: noteList, sortField: sortField, ascending: ascending, onSort: function (d) {
                        if (d.col == sortField)
                            setAscending(!ascending);
                        else {
                            setAscending(true);
                            setSortField(d.col);
                        }
                    }, onClick: function () { }, theadStyle: { fontSize: 'smaller', display: 'table', tableLayout: 'fixed', width: '100%' }, tbodyStyle: { display: 'block', overflowY: 'scroll', maxHeight: window.innerHeight - 615, width: '100%' }, rowStyle: { fontSize: 'smaller', display: 'table', tableLayout: 'fixed', width: '100%' }, selected: function (item) { return item.ID == note.ID; } })),
            react__WEBPACK_IMPORTED_MODULE_4__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_0__["TextArea"], { Record: note, Rows: 4, Field: 'Note', Setter: function (n) { return setNote(n); }, Valid: function () { return note.Note.length > 0; }, Label: '' }),
            react__WEBPACK_IMPORTED_MODULE_4__["createElement"](_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_1__["Modal"], { Show: showEdit, Title: 'Edit Note', ShowCancel: true, CallBack: closeEdit, DisableConfirm: note.Note.length == 0, ShowX: true, ConfirmShowToolTip: note.Note.length == 0, ConfirmToolTipContent: react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("p", null,
                    " ",
                    react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("i", { style: { marginRight: '10px', color: '#dc3545' }, className: "fa fa-exclamation-circle" }),
                    "An empty Note can not be saved. ") },
                react__WEBPACK_IMPORTED_MODULE_4__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_0__["TextArea"], { Record: note, Rows: 4, Field: 'Note', Setter: function (n) { if (n.Note == null)
                        setNote(__assign(__assign({}, n), { Note: '' }));
                    else
                        setNote(n); }, Valid: function () { return note.Note.length > 0; }, Label: '' }))),
        react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("div", { className: "card-footer" },
            react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("div", { className: "btn-group mr-2" },
                react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("button", { className: "btn btn-primary" + (note.Note.length == 0 ? ' disabled' : ''), onClick: function () { if (note.Note.length > 0)
                        addNote(note); }, "data-tooltip": "Add", style: { cursor: note.Note.length == 0 ? 'not-allowed' : 'pointer' }, onMouseOver: function () { return setHoverAdd(true); }, onMouseOut: function () { return setHoverAdd(false); } }, "Add Note"),
                react__WEBPACK_IMPORTED_MODULE_4__["createElement"](_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_1__["ToolTip"], { Show: hoverAdd && note.Note.length == 0, Position: 'top', Theme: 'dark', Target: "Add" },
                    react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("p", null, " A note needs to be entered. "))),
            react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("div", { className: "btn-group mr-2" },
                react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("button", { className: "btn btn-default" + (note.Note.length == 0 ? ' disabled' : ''), onClick: function () { return setNote(function (note) { return (__assign(__assign({}, note), { Note: '' })); }); }, style: { cursor: note.Note.length == 0 ? 'not-allowed' : 'pointer' }, "data-tooltip": "Remove", onMouseOver: function () { return setHoverClear(true); }, onMouseOut: function () { return setHoverClear(false); } }, "Clear"),
                react__WEBPACK_IMPORTED_MODULE_4__["createElement"](_gpa_gemstone_react_interactive__WEBPACK_IMPORTED_MODULE_1__["ToolTip"], { Show: hoverClear && note.Note.length == 0, Position: 'top', Theme: 'dark', Target: "Remove" },
                    react__WEBPACK_IMPORTED_MODULE_4__["createElement"]("p", null, " The note field is already empty. "))))));
}
/* harmony default export */ __webpack_exports__["default"] = (NoteWindow);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
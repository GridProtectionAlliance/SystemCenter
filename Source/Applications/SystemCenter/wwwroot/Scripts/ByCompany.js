(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{118:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=n(0),r=n(11),l=n(35),o=n(12);function i(e){var t=Object(r.b)(),n=Object(r.c)(o.b),i=Object(r.c)(o.c);function u(t){return"CompanyID"==t?null!=e.Company.CompanyID&&null!=e.Company.CompanyID.match(/[0-9,a-z,A-Z]{8}/):"Name"==t?null!=e.Company.Name&&e.Company.Name.length>0&&e.Company.Name.length<=200:"Description"==t}return a.useEffect((function(){var t=[];null!=e.Company.CompanyID&&null!=e.Company.CompanyID.match(/[0-9]{8}/)||t.push("CompanyID must be a 8 character alphanumeric Identifier."),null!=e.Company.Name&&0!=e.Company.Name.length||t.push("A name is required."),null!=e.Company.Name&&e.Company.Name.length>200&&t.push("Company Name must be less than 200 characters."),null!=e.setErrors&&e.setErrors(t)}),[e.Company]),a.useEffect((function(){if("unintiated"==i){var e=t(Object(o.a)());return function(){void 0!==e.abort()&&e.abort()}}}),[]),a.createElement("form",null,a.createElement(l.Select,{Record:e.Company,Label:"Company Type",Field:"CompanyTypeID",Options:n.map((function(e){return{Value:e.ID.toString(),Label:e.Name}})),Setter:e.Setter}),a.createElement(l.Input,{Record:e.Company,Field:"Name",Feedback:"Name must be less than 200 characters.",Valid:u,Setter:e.Setter}),a.createElement(l.Input,{Record:e.Company,Field:"CompanyID",Feedback:"CompanyID must be 8 numeric characters.",Valid:u,Setter:e.Setter}),a.createElement(l.TextArea,{Rows:3,Record:e.Company,Field:"Description",Valid:u,Setter:e.Setter}))}},311:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Setting=void 0;var a=n(312);t.Setting=a.default},312:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),r=n(35),l=n(39),o=n(65),i=n(38);t.default=function(e){var t=a.useState([]),n=t[0],u=t[1],s=a.useState("Idle"),c=s[0],y=s[1],d=a.useState([]),p=d[0],m=d[1],f=a.useState("Name"),h=f[0],S=f[1],g=a.useState(!0),b=g[0],C=g[1],w=a.useState(e.getNewSetting()),N=w[0],E=w[1],k=a.useState("New"),v=k[0],T=k[1],D=a.useState(!1),A=D[0],I=D[1],O=a.useState(!1),F=O[0],P=O[1],x=a.useState(!1),j=x[0],L=x[1],V=a.useState(0),M=V[0],R=V[1];function _(){return null!=N&&null!=N.Name&&N.Name.length>0&&null!=N.Value&&N.Value.length>0}return a.useEffect((function(){E(e.getNewSetting())}),[]),a.useEffect((function(){y("Loading");var t=e.searchSetting(n,b,h);return t.done((function(e){m(JSON.parse(e)),y("Idle")})),t.fail((function(e){return y("Error")})),function(){null!=t&&null!=t.abort&&t.abort()}}),[n,b,h,M]),a.useEffect((function(){L(!1)}),[A]),a.createElement(a.Fragment,null,a.createElement("div",{style:{width:"100%",height:"100%"}},a.createElement(i.SearchBar,{CollumnList:[{key:"Name",label:"Name",type:"string"},{key:"DefaultValue",label:"Default Value",type:"string"},{key:"Value",label:"Value",type:"string"}],SetFilter:function(e){return u(e)},Direction:"left",defaultCollumn:{key:"Name",label:"Name",type:"string"},Width:"50%",Label:"Search",ShowLoading:"Loading"===c,ResultNote:"Error"===c?"Could not complete Search":"Found "+p.length+" Settings",GetEnum:function(e,t){return function(){}}},a.createElement("li",{className:"nav-item",style:{width:"15%",paddingRight:10}},a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Actions:"),a.createElement("form",null,a.createElement("button",{className:"btn btn-primary",onClick:function(t){E(e.getNewSetting()),T("New"),I(!0),t.preventDefault()}},"Add Setting"))))),a.createElement("div",{style:{width:"100%",height:"calc( 100% - 136px)"}},a.createElement(l.default,{cols:[{key:"Name",label:"Setting Name",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Value",label:"Current Value",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"DefaultValue",label:"Default Value",headerStyle:{width:"20%"},rowStyle:{width:"20%"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}],tableClass:"table table-hover",data:p,sortField:h,ascending:b,onSort:function(e){e.col===h?C(!b):(C(!0),S(e.col))},onClick:function(e){E(e.row),I(!0),T("Edit")},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}}))),a.createElement(i.Modal,{Title:"Edit"===v?N.Name+" - Setting":"Add New Setting",Show:A,ShowX:!0,Size:"lg",ShowCancel:"Edit"===v,ConfirmText:"Save",CallBack:function(t,n){t&&"New"===v&&e.addSetting(N).then((function(e){return R((function(e){return e+1}))})),t&&"Edit"===v&&e.updateSetting(N).then((function(e){return R((function(e){return e+1}))})),!t&&n&&P(!0),I(!1)},DisableConfirm:"Edit"===v&&!j||!_(),ConfirmShowToolTip:!_(),ConfirmToolTipContent:[null==N.Name||0===N.Name.length?a.createElement("p",{key:1},o.CrossMark," A Name is required."):null,null==N.Value||0===N.Value.length?a.createElement("p",{key:2},o.CrossMark," A Value is required. "):null]},a.createElement("div",{className:"row"},a.createElement("div",{className:"col"},a.createElement(r.Input,{Record:N,Field:"Name",Label:"Setting Name",Feedback:"A unique Name is required.",Valid:function(e){return null!=N.Name&&N.Name.length>0},Setter:function(e){E(e),L(!0)}}),a.createElement(r.Input,{Record:N,Field:"Value",Label:"Value",Feedback:"Value is required.",Valid:function(e){return null!=N.Value&&N.Value.length>0},Setter:function(e){E(e),L(!0)}}),a.createElement(r.Input,{Record:N,Field:"DefaultValue",Label:"Default Value",Valid:function(e){return!0},Setter:function(e){E(e),L(!0)}})))),a.createElement(i.Warning,{Title:"Delete Setting",Message:"This will Delete this Setting from the System. this can have unintended consequences and cause the System to crash are you Sure you want to continue?.",Show:F,CallBack:function(t){t&&e.deleteSetting(N).then((function(e){return R((function(e){return e+1}))})),P(!1)}}))}},322:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n(39),l=n.n(r),o=n(31),i=n(3),u=n(38),s=n(118),c=n(62),y=function(){return(y=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},d=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)o.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return o};t.default=function(e){var t=Object(i.useHistory)(),n=d(a.useState([]),2),r=n[0],p=n[1],m=d(a.useState([]),2),f=m[0],h=m[1],S=d(a.useState("Name"),2),g=S[0],b=S[1],C=d(a.useState(!0),2),w=C[0],N=C[1],E=d(a.useState({ID:0,CompanyTypeID:0,CompanyID:null,Name:null,Description:null}),2),k=E[0],v=E[1],T=d(a.useState("Idle"),2),D=T[0],A=T[1],I=d(a.useState(c.b.Company),2),O=I[0],F=I[1],P=d(a.useState(!1),2),x=P[0],j=P[1],L=d(a.useState([]),2),V=L[0],M=L[1];function R(){var e=(A("Loading"),$.ajax({type:"Post",url:homePath+"api/SystemCenter/Company/ExtendedSearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:c.c.Company(r),OrderBy:g,Ascending:w}),cache:!1,async:!0}));return e.done((function(e){A("Idle"),h(JSON.parse(e))})).fail((function(e){return A("Error")})),function(){null!=e.abort&&e.abort()}}return a.useEffect((function(){return R()}),[r,w,g]),a.useEffect((function(){var e=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/Company/FieldName/0",contentType:"application/json; charset=utf-8",cache:!1,async:!0});return e.done((function(e){var t=o.orderBy(c.b.Company.concat(e.map((function(e){return y({label:"[AF"+(null!=e.ExternalDB?" "+e.ExternalDB:"")+"] "+e.FieldName,key:e.FieldName},"string"==(t=e.Type)||"integer"==t||"number"==t||"datetime"==t||"boolean"==t?{type:t}:{type:"enum",enum:[{Label:t,Value:t}]});var t}))),["label"],["asc"]);F(t)})),e}();return function(){null!=e.abort&&e.abort()}}),[]),a.createElement("div",{style:{width:"100%",height:"100%"}},a.createElement(u.SearchBar,{CollumnList:O,SetFilter:function(e){return p(e)},Direction:"left",defaultCollumn:c.a.Company,Width:"50%",Label:"Search",ShowLoading:"Loading"==D,ResultNote:"Error"==D?"Could not complete Search":"Found "+f.length+" Companys",GetEnum:function(e,t){var n=null;return"CompanyTypeID"==t.key||"enum"!=t.type||null==t.enum||1!=t.enum.length?function(){}:((n=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+t.enum[0].Value,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return e(t.map((function(e){return{Value:e.Value.toString(),Label:e.Text}})))})),function(){null!=n&&null==n.abort&&n.abort()})}},a.createElement("li",{className:"nav-item",style:{width:"15%",paddingRight:10}},a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Actions:"),a.createElement("form",null,a.createElement("button",{className:"btn btn-primary",hidden:e.Roles.indexOf("Administrator")<0&&e.Roles.indexOf("Transmission SME")<0,onClick:function(e){e.preventDefault(),v({ID:0,CompanyTypeID:0,CompanyID:null,Name:null,Description:null}),j(!0)}},"Add Company"))))),a.createElement("div",{style:{width:"100%",height:"calc( 100% - 136px)"}},a.createElement(l.a,{cols:[{key:"Name",label:"Name",headerStyle:{width:"15%"},rowStyle:{width:"15%"}},{key:"CompanyTypeID",label:"Type",headerStyle:{width:"15%"},rowStyle:{width:"15%"}},{key:"CompanyID",label:"CompanyID",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Description",label:"Description",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Meters",label:"Assigned Meters",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}],tableClass:"table table-hover",data:f,sortField:g,ascending:w,onSort:function(e){e.col==g?N(!w):(N(!0),b(e.col))},onClick:function(e){t.push({pathname:homePath+"index.cshtml",search:"?name=Company&CompanyID="+e.row.ID,state:{}})},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),a.createElement(u.Modal,{Show:x,Title:"Edit Note",ShowCancel:!0,CallBack:function(e){e&&$.ajax({type:"POST",url:homePath+"api/SystemCenter/Company/Add",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(k),cache:!1,async:!0}).done((function(e){return R()})),j(!1)},DisableConfirm:V.length>0,ShowX:!0,ConfirmShowToolTip:V.length>0,ConfirmToolTipContent:V.map((function(e,t){return a.createElement("p",{key:t}," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),e," ")}))},a.createElement(s.a,{Company:k,Setter:v,setErrors:M})))}},323:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n(311);t.default=function(e){return a.createElement(r.Setting,{getNewSetting:function(){return{Name:"",DefaultValue:"",Value:"",ID:0}},searchSetting:function(e,t,n){return $.ajax({type:"Post",url:homePath+"api/SystemCenter/Setting/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:e,OrderBy:n,Ascending:t}),cache:!1,async:!0})},addSetting:function(e){return $.ajax({type:"POST",url:homePath+"api/SystemCenter/Setting/Add",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(e),cache:!1,async:!0})},deleteSetting:function(e){return $.ajax({type:"DELETE",url:homePath+"api/SystemCenter/Setting/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),dataType:"json",cache:!0,async:!0})},updateSetting:function(e){return $.ajax({type:"PATCH",url:homePath+"api/SystemCenter/Setting/Update",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(e),cache:!1,async:!0})}})}},39:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SelectTable=void 0;var a=n(44),r=n(51);Object.defineProperty(t,"SelectTable",{enumerable:!0,get:function(){return r.SelectTable}}),t.default=a.default},44:function(e,t,n){"use strict";var a,r=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),l=this&&this.__assign||function(){return(l=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=function(e){return o.createElement("span",{style:{width:10,height:10,margin:3},className:"fa fa-angle-"+(e.ascending?"up":"down")})},u=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.render=function(){var e=this.generateRows(),t=this.generateHeaders();return o.createElement("table",{className:void 0!==this.props.tableClass?this.props.tableClass:"",style:this.props.tableStyle},o.createElement("thead",{style:this.props.theadStyle},t),o.createElement("tbody",{style:this.props.tbodyStyle},e))},t.prototype.generateHeaders=function(){var e=this;if(0===this.props.cols.length)return null;var t=this.props.cols.map((function(t,n){var a;return void 0===(a=void 0!==t.headerStyle?t.headerStyle:{}).cursor&&(a.cursor="pointer"),o.createElement("th",{key:n,style:a,onClick:function(n){return e.handleSort({col:t.key,ascending:e.props.ascending},n)}},t.label,e.props.sortField===t.key?o.createElement(i,{ascending:e.props.ascending}):null)}));return o.createElement("tr",null,t)},t.prototype.generateRows=function(){var e=this;return 0===this.props.data.length?null:this.props.data.map((function(t,n){var a,r=e.props.cols.map((function(a){var r;return r=void 0===a.rowStyle?{}:l({},a.rowStyle),o.createElement("td",{key:n.toString()+(null===a.key?"":t[a.key])+a.key,style:r,onClick:e.handleClick.bind(e,{col:a.key,row:t,data:null===a.key?null:t[a.key],index:n})},void 0!==a.content?a.content(t,a.key,r,n):null===a.key?null:t[a.key])}));return void 0===(a=void 0!==e.props.rowStyle?l({},e.props.rowStyle):{}).cursor&&(a.cursor="pointer"),void 0!==e.props.selected&&e.props.selected(t)&&(a.backgroundColor="yellow"),o.createElement("tr",{style:a,key:n.toString()},r)}))},t.prototype.handleClick=function(e,t){this.props.onClick(e,t)},t.prototype.handleSort=function(e,t){this.props.onSort(e)},t}(o.Component);t.default=u},51:function(e,t,n){"use strict";var a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var a=Array(e),r=0;for(t=0;t<n;t++)for(var l=arguments[t],o=0,i=l.length;o<i;o++,r++)a[r]=l[o];return a};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectTable=void 0;var l=n(0),o=n(31),i=n(44);t.SelectTable=function(e){var t=l.useRef(!1),n=l.useState(e.data),u=n[0],s=n[1],c=l.useState([]),y=c[0],d=c[1],p=l.useState(e.sortField),m=p[0],f=p[1],h=l.useState(e.ascending),S=h[0],g=h[1];l.useEffect((function(){t.current?d((function(t){return t.length===u.length?[]:u.map((function(t){return t[e.KeyField]}))})):t.current=!0}),[e.selectAllCounter]),l.useEffect((function(){e.data.length!==u.length&&s(e.data)}),[e.data]),l.useEffect((function(){d((function(t){return t.filter((function(t){return u.findIndex((function(n){return n[e.KeyField]===t}))>-1}))}))}),[u]),l.useEffect((function(){s((function(e){return o.orderBy(e,[m],[S?"asc":"desc"])}))}),[S,m]),l.useEffect((function(){e.onSelection(u.filter((function(t){return y.findIndex((function(n){return n===t[e.KeyField]}))>-1})))}),[y]);var b={cols:r([{key:e.KeyField,label:"",headerStyle:{width:"4em"},rowStyle:{width:"4em"},content:function(t,n,a){return y.findIndex((function(n){return n===t[e.KeyField]}))>-1?l.createElement("div",{style:{marginTop:"16px",textAlign:"center"}},l.createElement("i",{className:"fa fa-check-square-o fa-3x","aria-hidden":"true"})):null}}],e.cols),data:u,onClick:function(t,n){var a=y.findIndex((function(n){return n===t.row[e.KeyField]}));d(-1===a?function(n){return r(n,[t.row[e.KeyField]])}:function(n){return n.filter((function(n){return n!==t.row[e.KeyField]}))})},sortField:m,ascending:S,onSort:function(e){e.col===m?g(!S):f(e.col)},tableClass:e.tableClass,tableStyle:e.tableStyle,theadStyle:e.theadStyle,theadClass:e.theadClass,tbodyStyle:e.tbodyStyle,tbodyClass:e.tbodyClass,selected:function(e){return!1},rowStyle:e.rowStyle};return l.createElement(i.default,a({},b))}},62:function(e,t,n){"use strict";n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return l}));var a,r,l,o=function(){return(o=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};!function(e){e.Customer=[{label:"Account Name",key:"CustomerKey",type:"string"},{label:"Name",key:"Name",type:"string"},{label:"Phone",key:"Phone",type:"string"},{label:"Description",key:"Description",type:"string"},{label:"PQView Site Name",key:"PQViewSite",type:"string"},{label:"Number of Assigned Meters",key:"Meters",type:"integer"}],e.Company=[{label:"Name",key:"Name",type:"string"},{label:"CompanyID",key:"CompanyID",type:"string"},{label:"Description",key:"Description",type:"string"},{label:"Company Type",key:"CompanyTypeID",type:"enum"}],e.UserAccount=[{label:"First Name",key:"UserAccount.FirstName",type:"string"},{label:"Last Name",key:"UserAccount.LastName",type:"string"},{label:"Phone",key:"UserAccount.Phone",type:"string"},{label:"Mobile Phone",key:"UserAccount.MobilePhone",type:"string"},{label:"Email",key:"UserAccount.Email",type:"string"},{label:"TSC",key:"UserAccount.TSC",type:"string"},{label:"Role",key:"Role.Name",type:"string"},{label:"Security Role",key:"ApplicationRole.Name",type:"string"}],e.Location=[{label:"Name",key:"Name",type:"string"},{label:"Key",key:"LocationKey",type:"string"},{label:"Asset",key:"Asset",type:"string"},{label:"Meter",key:"Meter",type:"string"},{label:"Number of Assets",key:"Assets",type:"integer"},{label:"Number of Meters",key:"Meters",type:"integer"}]}(a||(a={})),function(e){e.Company={label:"Name",key:"Name",type:"string"},e.Customer={label:"Account Name",key:"CustomerKey",type:"string"},e.UserAccount={label:"First Name",key:"UserAccount.FirstName",type:"string"},e.Location={label:"Name",key:"Name",type:"string"}}(r||(r={})),function(e){e.Company=function(e){return e.map((function(e){return-1==a.Company.findIndex((function(t){return t.key==e.FieldName}))?o(o({},e),{isPivotColumn:!0}):e}))},e.Customer=function(e){return e.map((function(e){if("PQViewSite"==e.FieldName){var t=e.SearchText;return 0==t.length&&(t="%"),t.replace("*","%"),t="'"+t+"'",{FieldName:"ID",SearchText:"(SELECT Customer.ID FROM PQViewSite LEFT JOIN [systemCenter.CustomerAccess] ON[systemCenter.CustomerAccess].PQViewSiteID = PQViewSite.ID LEFT JOIN Customer C ON C.ID = [systemCenter.CustomerAccess].CustomerID WHERE  PQViewSite.Name "+e.Operator+t+" )",Operator:"IN",Type:"number",isPivotColumn:!1}}return-1==a.Customer.findIndex((function(t){return t.key==e.FieldName}))?o(o({},e),{isPivotColumn:!0}):e}))},e.Location=function(e){return e.map((function(e){var t;return"Meter"==e.FieldName?(0==(t=e.SearchText).length&&(t="%"),t.replace("*","%"),t=" '"+t+"'",{FieldName:"ID",SearchText:"(SELECT Meter.LocationID FROM Meter WHERE  Meter.AssetKey "+e.Operator+t+" or Meter.Name "+e.Operator+t+" )",Operator:"IN",Type:"number",isPivotColumn:!1}):"Asset"==e.FieldName?(0==(t=e.SearchText).length&&(t="%"),t.replace("*","%"),t=" '"+t+"'",{FieldName:"ID",SearchText:"(SELECT AssetLocation.LocationID FROM Asset LEFT JOIN AssetLocation ON AssetLocation.AssetID = Asset.ID WHERE  Asset.AssetName "+e.Operator+t+" or Asset.AssetKey "+e.Operator+t+" )",Operator:"IN",Type:"number",isPivotColumn:!1}):-1==a.Location.findIndex((function(t){return t.key==e.FieldName}))?o(o({},e),{isPivotColumn:!0}):e}))}}(l||(l={}))},65:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RightArrow=t.LeftArrow=t.PlayButton=t.Scroll=t.FourWayArrow=t.House=t.MagnifyingGlass=t.InputNumbers=t.DNA=t.DownArrow=t.UpArrow=t.Flag=t.Wrench=t.Spinner=t.Warning=t.Plus=t.CrossMark=t.TrashCan=t.Pencil=t.HeavyCheckMark=void 0;t.HeavyCheckMark="✔️";t.Pencil="✏️";t.TrashCan="🗑️";t.CrossMark="❌";t.Plus="➕";t.Warning="⚠️";t.Spinner="🔄";t.Wrench="🔧";t.Flag="🚩";t.UpArrow="⬆️";t.LeftArrow="⬅";t.RightArrow="➡";t.DownArrow="⬇️";t.DNA="🧬";t.InputNumbers="🔢";t.FourWayArrow="☩";t.MagnifyingGlass="🔍";t.House="🏠";t.Scroll="📜";t.PlayButton="▶️"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
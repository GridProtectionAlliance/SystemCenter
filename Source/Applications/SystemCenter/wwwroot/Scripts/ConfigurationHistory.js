(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{320:function(e,t,n){"use strict";n.r(t);var a=n(0),i=n(31),o=n(3),r=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,i,o=n.call(e),r=[];try{for(;(void 0===t||t-- >0)&&!(a=o.next()).done;)r.push(a.value)}catch(e){i={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return r};t.default=function(e){var t=Object(o.useHistory)(),n=r(a.useState(null),2),l=n[0],c=n[1],s=r(a.useState("configuration"),2),u=s[0],d=s[1],m=r(a.useState([]),2),f=m[0],h=m[1],g=r(a.useState(!1),2),p=g[0],v=g[1];function y(){$.ajax({type:"GET",url:homePath+"api/OpenXDA/MeterConfiguration/"+e.MeterConfigurationID+"/FilesProcessed",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){return h(e)})),$.ajax({type:"GET",url:homePath+"api/OpenXDA/MeterConfiguration/One/"+e.MeterConfigurationID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){c(e),function(e){var t=ace.edit("template");t.getSession().setMode("ace/mode/xml"),t.setFontSize("14px"),t.setValue(e.ConfigText),t.clearSelection(),t.gotoLine(0),t.session.off("change"),t.session.on("change",(function(n){v(e.ConfigText!=t.getValue())}))}(e)}))}return a.useLayoutEffect((function(){return y()}),[e.MeterConfigurationID]),null==l?null:a.createElement("div",{style:{width:"100%",height:window.innerHeight-63,maxHeight:window.innerHeight-63,overflow:"hidden",padding:15}},a.createElement("div",{className:"row"},a.createElement("div",{className:"col"},a.createElement("h2",null,e.MeterKey," - Configuration Revision: ",l.RevisionMajor+"."+l.RevisionMinor))),a.createElement("hr",null),a.createElement("ul",{className:"nav nav-tabs"},a.createElement("li",{className:"nav-item"},a.createElement("a",{className:"nav-link"+("configuration"==u?" active":""),onClick:function(){return d("configuration")},"data-toggle":"tab",href:"#configuration"},"Configuration")),a.createElement("li",{className:"nav-item"},a.createElement("a",{className:"nav-link"+("filesProcessed"==u?" active":""),onClick:function(){return d("filesProcessed")},"data-toggle":"tab",href:"#filesProcessed"},"Files Processed"))),a.createElement("div",{className:"tab-content",style:{maxHeight:window.innerHeight-235,overflow:"hidden"}},a.createElement("div",{className:"tab-pane "+("configuration"==u?" active":"fade"),id:"configuration"},a.createElement("div",{id:"template",style:{height:window.innerHeight-275}}),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){var n=i.clone(l);n.ID=0,n.ConfigText=ace.edit("template").getValue(),n.DiffID=null,$.ajax({type:"POST",url:homePath+"api/OpenXDA/MeterConfiguration/Add",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(n),cache:!1,async:!0}).done((function(n){return t.push({pathname:homePath+"index.cshtml",search:"?name=ConfigurationHistory&MeterKey="+e.MeterKey+"&MeterConfigurationID="+n.ID,state:{}})}))},disabled:!p},"Save Edit")),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-danger pull-right",onClick:y,disabled:!p},"Reset"))),a.createElement("div",{className:"tab-pane "+("filesProcessed"==u?" active":"fade"),id:"filesProcessed"},a.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-275,padding:30,overflowY:"auto"}},a.createElement("table",{className:"table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("td",null,"File Path"),a.createElement("td",null,"Creation Time"))),a.createElement("tbody",null,f.map((function(e,t){return a.createElement("tr",{key:t},a.createElement("td",null,e.FilePath),a.createElement("td",null,e.CreationTime))}))))))))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9UU1gvU3lzdGVtQ2VudGVyL0NvbmZpZ3VyYXRpb25IaXN0b3J5L0NvbmZpZ3VyYXRpb25IaXN0b3J5LnRzeCJdLCJuYW1lcyI6WyJwcm9wcyIsImhpc3RvcnkiLCJtZXRlckNvbmZpZ3VyYXRpb24iLCJzZXRNZXRlckNvbmZpZ3VyYXRpb24iLCJ0YWIiLCJzZXRUYWIiLCJmaWxlc1Byb2Nlc3NlZCIsInNldEZpbGVzUHJvY2Vzc2VkIiwiY2hhbmdlZCIsInNldENoYW5nZWQiLCJnZXREYXRhIiwiJCIsImFqYXgiLCJ0eXBlIiwidXJsIiwiaG9tZVBhdGgiLCJNZXRlckNvbmZpZ3VyYXRpb25JRCIsImNvbnRlbnRUeXBlIiwiZGF0YVR5cGUiLCJjYWNoZSIsImFzeW5jIiwiZG9uZSIsImRhdGEiLCJyZWNvcmQiLCJlZGl0b3IiLCJhY2UiLCJlZGl0IiwiZ2V0U2Vzc2lvbiIsInNldE1vZGUiLCJzZXRGb250U2l6ZSIsInNldFZhbHVlIiwiQ29uZmlnVGV4dCIsImNsZWFyU2VsZWN0aW9uIiwiZ290b0xpbmUiLCJzZXNzaW9uIiwib2ZmIiwib24iLCJkZWx0YSIsImdldFZhbHVlIiwiaW5pdGlhbGl6ZUFjZSIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJ3aW5kb3ciLCJpbm5lckhlaWdodCIsIm1heEhlaWdodCIsIm92ZXJmbG93IiwicGFkZGluZyIsImNsYXNzTmFtZSIsIk1ldGVyS2V5IiwiUmV2aXNpb25NYWpvciIsIlJldmlzaW9uTWlub3IiLCJvbkNsaWNrIiwiaHJlZiIsImlkIiwibmV3UmVjb3JkIiwiSUQiLCJEaWZmSUQiLCJKU09OIiwic3RyaW5naWZ5IiwicHVzaCIsInBhdGhuYW1lIiwic2VhcmNoIiwic3RhdGUiLCJkaXNhYmxlZCIsIm92ZXJmbG93WSIsIm1hcCIsImEiLCJpIiwia2V5IiwiRmlsZVBhdGgiLCJDcmVhdGlvblRpbWUiXSwibWFwcGluZ3MiOiIyRkFBQSxpQywwUkFzSmUsVUF4SGYsU0FBOEJBLEdB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Rix1QkFBS3dDLFVBQVUsa0JBQ1gsMEJBQVFBLFVBQVUsNEJBQTRCSSxRQUFTMUMsRUFBU3NELFVBQVd4RCxHQUFPLFdBRzFGLHVCQUFLd0MsVUFBVyxhQUFzQixrQkFBUDVDLEVBQTBCLFVBQVksUUFBU2tELEdBQUcsa0JBQzdFLHVCQUFLZCxNQUFPLENBQUVDLE1BQU8sT0FBUUksVUFBV0YsT0FBT0MsWUFBYyxJQUFLRyxRQUFTLEdBQUlrQixVQUFXLFNBQ3RGLHlCQUFPakIsVUFBVSxTQUNiLDZCQUNJLDBCQUFJLHVDQUFrQiw2Q0FFMUIsNkJBQ0sxQyxFQUFlNEQsS0FBSSxTQUFDQyxFQUFHQyxHQUFNLDZCQUFJQyxJQUFLRCxHQUFHLDBCQUFLRCxFQUFFRyxVQUFjLDBCQUFLSCxFQUFFSSIsImZpbGUiOiJDb25maWd1cmF0aW9uSGlzdG9yeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBNZXRlci50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAxOSwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMDgvMjcvMjAxOSAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgeyBPcGVuWERBIH0gZnJvbSAnLi4vZ2xvYmFsJztcclxuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5kZWNsYXJlIHZhciBob21lUGF0aDogc3RyaW5nO1xyXG5kZWNsYXJlIHZhciBhY2U6IGFueTtcclxuXHJcbmZ1bmN0aW9uIENvbmZpZ3VyYXRpb25IaXN0b3J5KHByb3BzOiB7IE1ldGVyQ29uZmlndXJhdGlvbklEOiBudW1iZXIsIE1ldGVyS2V5OiBzdHJpbmcgfSkge1xyXG4gICAgY29uc3QgaGlzdG9yeSA9IHVzZUhpc3RvcnkoKTtcclxuICAgIGNvbnN0IFttZXRlckNvbmZpZ3VyYXRpb24sIHNldE1ldGVyQ29uZmlndXJhdGlvbl0gPSBSZWFjdC51c2VTdGF0ZTxPcGVuWERBLk1ldGVyQ29uZmlndXJhdGlvbj4obnVsbCk7XHJcbiAgICBjb25zdCBbdGFiLCBzZXRUYWJdID0gUmVhY3QudXNlU3RhdGU8J2NvbmZpZ3VyYXRpb24nIHwgJ2ZpbGVzUHJvY2Vzc2VkJz4oJ2NvbmZpZ3VyYXRpb24nKTtcclxuICAgIGNvbnN0IFtmaWxlc1Byb2Nlc3NlZCwgc2V0RmlsZXNQcm9jZXNzZWRdID0gUmVhY3QudXNlU3RhdGU8QXJyYXk8T3BlblhEQS5EYXRhRmlsZT4+KFtdKTtcclxuICAgIGNvbnN0IFtjaGFuZ2VkLCBzZXRDaGFuZ2VkXSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBnZXREYXRhKCksIFtwcm9wcy5NZXRlckNvbmZpZ3VyYXRpb25JRF0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldERhdGEoKSB7XHJcbiAgICAgICAgZ2V0RmlsZXNQcm9jZXNzZWQoKTtcclxuICAgICAgICBnZXRNZXRlckNvbmZpZ3VyYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRNZXRlckNvbmZpZ3VyYXRpb24oKTogUHJvbWlzZTxPcGVuWERBLk1ldGVyQ29uZmlndXJhdGlvbj4ge1xyXG4gICAgICAgcmV0dXJuICQuYWpheCh7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgdXJsOiBgJHtob21lUGF0aH1hcGkvT3BlblhEQS9NZXRlckNvbmZpZ3VyYXRpb24vT25lLyR7cHJvcHMuTWV0ZXJDb25maWd1cmF0aW9uSUR9YCxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiLFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICBjYWNoZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGFzeW5jOiB0cnVlXHJcbiAgICAgICB9KS5kb25lKChyZWNvcmQpID0+IHtcclxuICAgICAgICAgICBzZXRNZXRlckNvbmZpZ3VyYXRpb24ocmVjb3JkKVxyXG4gICAgICAgICAgIGluaXRpYWxpemVBY2UocmVjb3JkKTtcclxuXHJcbiAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRGaWxlc1Byb2Nlc3NlZCgpOiB2b2lkIHtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB0eXBlOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICB1cmw6IGAke2hvbWVQYXRofWFwaS9PcGVuWERBL01ldGVyQ29uZmlndXJhdGlvbi8ke3Byb3BzLk1ldGVyQ29uZmlndXJhdGlvbklEfS9GaWxlc1Byb2Nlc3NlZGAsXHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgY2FjaGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBhc3luYzogdHJ1ZVxyXG4gICAgICAgIH0pLmRvbmUoKGRhdGE6IEFycmF5PE9wZW5YREEuRGF0YUZpbGU+KSA9PiBzZXRGaWxlc1Byb2Nlc3NlZCggZGF0YSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVFZGl0KCk6IHZvaWR7XHJcbiAgICAgICAgbGV0IG5ld1JlY29yZDogT3BlblhEQS5NZXRlckNvbmZpZ3VyYXRpb24gPSBfLmNsb25lKG1ldGVyQ29uZmlndXJhdGlvbik7XHJcbiAgICAgICAgbmV3UmVjb3JkLklEID0gMDtcclxuICAgICAgICBuZXdSZWNvcmQuQ29uZmlnVGV4dCA9IGFjZS5lZGl0KCd0ZW1wbGF0ZScpLmdldFZhbHVlKCk7XHJcbiAgICAgICAgbmV3UmVjb3JkLkRpZmZJRCA9IG51bGw7XHJcbiAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIHVybDogYCR7aG9tZVBhdGh9YXBpL09wZW5YREEvTWV0ZXJDb25maWd1cmF0aW9uL0FkZGAsXHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIixcclxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkobmV3UmVjb3JkKSxcclxuICAgICAgICAgICAgY2FjaGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBhc3luYzogdHJ1ZVxyXG4gICAgICAgIH0pLmRvbmUoKGRhdGE6IE9wZW5YREEuTWV0ZXJDb25maWd1cmF0aW9uKSA9PiBoaXN0b3J5LnB1c2goeyBwYXRobmFtZTogYCR7aG9tZVBhdGh9aW5kZXguY3NodG1sYCwgc2VhcmNoOiBgP25hbWU9Q29uZmlndXJhdGlvbkhpc3RvcnkmTWV0ZXJLZXk9JHtwcm9wcy5NZXRlcktleX0mTWV0ZXJDb25maWd1cmF0aW9uSUQ9JHtkYXRhLklEfWAsIHN0YXRlOiB7fSB9KSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVBY2UocmVjb3JkOiBPcGVuWERBLk1ldGVyQ29uZmlndXJhdGlvbikge1xyXG4gICAgICAgIGxldCBlZGl0b3IgPSBhY2UuZWRpdChcInRlbXBsYXRlXCIpO1xyXG4gICAgICAgIGVkaXRvci5nZXRTZXNzaW9uKCkuc2V0TW9kZShcImFjZS9tb2RlL3htbFwiKTtcclxuICAgICAgICBlZGl0b3Iuc2V0Rm9udFNpemUoXCIxNHB4XCIpO1xyXG4gICAgICAgIGVkaXRvci5zZXRWYWx1ZShyZWNvcmQuQ29uZmlnVGV4dCk7XHJcbiAgICAgICAgZWRpdG9yLmNsZWFyU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgZWRpdG9yLmdvdG9MaW5lKDApO1xyXG4gICAgICAgIGVkaXRvci5zZXNzaW9uLm9mZignY2hhbmdlJyk7XHJcbiAgICAgICAgZWRpdG9yLnNlc3Npb24ub24oJ2NoYW5nZScsIGRlbHRhID0+IHtcclxuICAgICAgICAgICAgc2V0Q2hhbmdlZChyZWNvcmQuQ29uZmlnVGV4dCAhPSBlZGl0b3IuZ2V0VmFsdWUoKSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIFxyXG4gICAgaWYgKG1ldGVyQ29uZmlndXJhdGlvbiA9PSBudWxsKSByZXR1cm4gbnVsbDtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBzdHlsZT17eyB3aWR0aDogJzEwMCUnLCBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAtIDYzLCBtYXhIZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAtIDYzLCBvdmVyZmxvdzogJ2hpZGRlbicsIHBhZGRpbmc6IDE1IH19PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDI+e3Byb3BzLk1ldGVyS2V5fSAtIENvbmZpZ3VyYXRpb24gUmV2aXNpb246IHttZXRlckNvbmZpZ3VyYXRpb24uUmV2aXNpb25NYWpvciArICcuJyArIG1ldGVyQ29uZmlndXJhdGlvbi5SZXZpc2lvbk1pbm9yfTwvaDI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG5cclxuICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJuYXYgbmF2LXRhYnNcIj5cclxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJuYXYtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT17XCJuYXYtbGlua1wiICsgKHRhYiA9PSBcImNvbmZpZ3VyYXRpb25cIiA/IFwiIGFjdGl2ZVwiIDogXCJcIil9IG9uQ2xpY2s9eygpID0+IHNldFRhYignY29uZmlndXJhdGlvbicpfSBkYXRhLXRvZ2dsZT1cInRhYlwiIGhyZWY9XCIjY29uZmlndXJhdGlvblwiPkNvbmZpZ3VyYXRpb248L2E+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cIm5hdi1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPXtcIm5hdi1saW5rXCIgKyAodGFiID09IFwiZmlsZXNQcm9jZXNzZWRcIiA/IFwiIGFjdGl2ZVwiIDogXCJcIil9IG9uQ2xpY2s9eygpID0+IHNldFRhYignZmlsZXNQcm9jZXNzZWQnKX0gZGF0YS10b2dnbGU9XCJ0YWJcIiBocmVmPVwiI2ZpbGVzUHJvY2Vzc2VkXCI+RmlsZXMgUHJvY2Vzc2VkPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFiLWNvbnRlbnRcIiBzdHlsZT17eyBtYXhIZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAtIDIzNSwgb3ZlcmZsb3c6ICdoaWRkZW4nIH19PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1widGFiLXBhbmUgXCIgKyAodGFiID09IFwiY29uZmlndXJhdGlvblwiID8gXCIgYWN0aXZlXCIgOiBcImZhZGVcIil9IGlkPVwiY29uZmlndXJhdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZVwiIHN0eWxlPXt7IGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IC0gMjc1IH19ID48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cCBtci0yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5IHB1bGwtcmlnaHRcIiBvbkNsaWNrPXtzYXZlRWRpdH0gZGlzYWJsZWQ9eyFjaGFuZ2VkfT5TYXZlIEVkaXQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cCBtci0yXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1kYW5nZXIgcHVsbC1yaWdodFwiIG9uQ2xpY2s9e2dldERhdGF9IGRpc2FibGVkPXshY2hhbmdlZH0+UmVzZXQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1widGFiLXBhbmUgXCIgKyAodGFiID09IFwiZmlsZXNQcm9jZXNzZWRcIiA/IFwiIGFjdGl2ZVwiIDogXCJmYWRlXCIpfSBpZD1cImZpbGVzUHJvY2Vzc2VkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyB3aWR0aDogJzEwMCUnLCBtYXhIZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAtIDI3NSwgcGFkZGluZzogMzAsIG92ZXJmbG93WTogJ2F1dG8nIH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPSd0YWJsZSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD5GaWxlIFBhdGg8L3RkPjx0ZD5DcmVhdGlvbiBUaW1lPC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZmlsZXNQcm9jZXNzZWQubWFwKChhLCBpKSA9PiA8dHIga2V5PXtpfT48dGQ+e2EuRmlsZVBhdGh9PC90ZD48dGQ+e2EuQ3JlYXRpb25UaW1lfTwvdGQ+PC90cj4pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbmZpZ3VyYXRpb25IaXN0b3J5O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9
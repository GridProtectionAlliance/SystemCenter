(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{328:function(e,t,a){"use strict";a.r(t);var n,r=a(0),l=a(31),i=a(33),o=a(91),s=a(37),c=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),u=function(e){function t(t,a){var n=e.call(this,t,a)||this;return n.state={Location:n.props.Location},n.valid=n.valid.bind(n),n}return c(t,e),t.prototype.componentDidMount=function(){},t.prototype.componentWillReceiveProps=function(e){this.setState({Location:e.Location})},t.prototype.updateLocation=function(){var e=this,t=l.clone(this.state.Location);return $.ajax({type:"PATCH",url:homePath+"api/OpenXDA/Location/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(this.state.Location),dataType:"json",cache:!0,async:!0}).done((function(a){e.props.stateSetter(t)}))},t.prototype.valid=function(e){return"LocationKey"==e?null!=this.state.Location.LocationKey&&this.state.Location.LocationKey.length>0&&this.state.Location.LocationKey.length<=50:"Name"==e?null!=this.state.Location.Name&&this.state.Location.Name.length>0&&this.state.Location.Name.length<=200:"Alias"==e?null==this.state.Location.Alias||this.state.Location.Alias.length<=200:"ShortName"==e?null==this.state.Location.ShortName||this.state.Location.ShortName.length<=50:"Latitude"==e?null!=this.state.Location.Latitude&&i.a.isRealNumber(this.state.Location.Latitude):"Longitude"==e?null!=this.state.Location.Longitude&&i.a.isRealNumber(this.state.Location.Longitude):"Description"==e},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"card",style:{marginBottom:10}},r.createElement("div",{className:"card-header"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("h4",null,"Substation Information:")))),r.createElement("div",{className:"card-body"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement(s.a,{Record:this.state.Location,Field:"LocationKey",Feedback:"A unique key of less than 50 characters is required.",Valid:this.valid,Setter:function(t){return e.setState({Location:t})}}),r.createElement(s.a,{Record:this.state.Location,Field:"Name",Feedback:"Name must be less than 200 characters and is required.",Valid:this.valid,Setter:function(t){return e.setState({Location:t})}}),r.createElement(s.a,{Record:this.state.Location,Field:"ShortName",Feedback:"ShortName must be less than 50 characters.",Valid:this.valid,Setter:function(t){return e.setState({Location:t})}}),r.createElement(s.a,{Record:this.state.Location,Field:"Alias",Feedback:"Alias must be less than 200 characters.",Valid:this.valid,Setter:function(t){return e.setState({Location:t})}})),r.createElement("div",{className:"col"},r.createElement(s.a,{Record:this.state.Location,Field:"Latitude",Feedback:"Latitude is a require numeric field.",Valid:this.valid,Setter:function(t){return e.setState({Location:t})}}),r.createElement(s.a,{Record:this.state.Location,Field:"Longitude",Feedback:"Longitude is a require numeric field.",Valid:this.valid,Setter:function(t){return e.setState({Location:t})}}),r.createElement(o.a,{Rows:3,Record:this.state.Location,Field:"Description",Valid:this.valid,Setter:function(t){return e.setState({Location:t})}})))),r.createElement("div",{className:"card-footer"},r.createElement("div",{className:"btn-group mr-2"},r.createElement("button",{className:"btn btn-primary",onClick:function(){return e.updateLocation()},hidden:0==this.state.Location.ID,disabled:this.state.Location==this.props.Location},"Update")),r.createElement("div",{className:"btn-group mr-2"},r.createElement("button",{className:"btn btn-default",onClick:function(){return e.setState({Location:e.props.Location})},disabled:this.state.Location==this.props.Location},"Reset"))))},t}(r.Component),d=a(45),p=a(3),m=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,l=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=l.next()).done;)i.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=l.return)&&a.call(l)}finally{if(r)throw r.error}}return i};var f=function(e){var t=Object(p.useHistory)(),a=m(r.useState([]),2),n=a[0],i=a[1],o=m(r.useState("AssetKey"),2),s=o[0],c=o[1],u=m(r.useState(!0),2),f=u[0],h=u[1];return r.useEffect((function(){$.ajax({type:"GET",url:homePath+"api/OpenXDA/Location/"+e.Location.ID+"/Meters",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){return i(e)}))}),[e.Location.ID]),r.createElement("div",{className:"card",style:{marginBottom:10}},r.createElement("div",{className:"card-header"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("h4",null,"Meters:")))),r.createElement("div",{className:"card-body"},r.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-381,padding:30,overflowY:"auto"}},r.createElement(d.a,{cols:[{key:"AssetKey",label:"Key",headerStyle:{width:"30%"},rowStyle:{width:"30%"}},{key:"Name",label:"Name",headerStyle:{width:"30%"},rowStyle:{width:"30%"}},{key:"Make",label:"Meters",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Model",label:"Assets",headerStyle:{width:"calc(10%)"},rowStyle:{width:"10%"}}],tableClass:"table table-hover",data:n,sortField:s,ascending:f,onSort:function(e){if(e.col==s){var t=l.orderBy(n,[e.col],[f?"desc":"asc"]);h(!f),i(t)}else{t=l.orderBy(n,[e.col],["asc"]);h(!f),i(t),c(e.col)}},onClick:function(e){t.push({pathname:homePath+"index.cshtml",search:"?name=Meter&MeterID="+e.row.ID,state:{}})},selected:function(){return!1}}))),r.createElement("div",{className:"card-footer"}))},h=a(53),b=a(55),y=a(54),E=a(56),N=a(57),S=a(43),g=function(e,t,a,n){return new(a||(a=Promise))((function(r,l){function i(e){try{s(n.next(e))}catch(e){l(e)}}function o(e){try{s(n.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,o)}s((n=n.apply(e,t||[])).next())}))},A=function(e,t){var a,n,r,l,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function o(l){return function(o){return function(l){if(a)throw new TypeError("Generator is already executing.");for(;i;)try{if(a=1,n&&(r=2&l[0]?n.return:l[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,l[1])).done)return r;switch(n=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,n=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!(r=i.trys,(r=r.length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){i.label=l[1];break}if(6===l[0]&&i.label<r[1]){i.label=r[1],r=l;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(l);break}r[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],n=0}finally{a=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,o])}}},D=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,l=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=l.next()).done;)i.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=l.return)&&a.call(l)}finally{if(r)throw r.error}}return i};var T=function(e){var t=Object(p.useHistory)(),a=D(r.useState([]),2),n=a[0],o=a[1],s=D(r.useState("AssetKey"),2),c=s[0],u=s[1],m=D(r.useState(!0),2),f=m[0],T=m[1],w=D(r.useState(i.a.getNewAsset("Line")),2),v=w[0],F=w[1],R=D(r.useState("New"),2),L=R[0],k=R[1],V=D(r.useState([]),2),I=V[0],x=V[1],C=D(r.useState([]),2),P=C[0],O=C[1];function j(){$.ajax({type:"GET",url:homePath+"api/OpenXDA/Location/"+e.Location.ID+"/Assets",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e,t){return o(e)})),Object(S.b)().done((function(e){O(e)})),Object(S.c)().done((function(e){x(e)}))}return r.useEffect((function(){j()}),[e.Location.ID]),r.createElement("div",{className:"card",style:{marginBottom:10}},r.createElement("div",{className:"card-header"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("h4",null,"Assets:")))),r.createElement("div",{className:"card-body"},r.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-381,padding:30,overflowY:"auto"}},r.createElement(d.a,{cols:[{key:"AssetKey",label:"Key",headerStyle:{width:"30%"},rowStyle:{width:"30%"}},{key:"AssetName",label:"Name",headerStyle:{width:"30%"},rowStyle:{width:"30%"}},{key:"AssetType",label:"Type",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:null,label:"",headerStyle:{width:"10%"},rowStyle:{width:"10%"},content:function(t,a,n){return r.createElement(r.Fragment,null,r.createElement("button",{className:"btn btn-sm","data-toggle":"modal","data-target":"#assetModal",onClick:function(e){e.preventDefault();var a=I.find((function(e){return e.ID==t.AssetTypeID}));Object(S.d)(t.ID,a.Name).then((function(e){return F(e)})),k("Edit")}},r.createElement("span",null,r.createElement("i",{className:"fa fa-pencil"}))),r.createElement("button",{className:"btn btn-sm",onClick:function(a){a.preventDefault(),function(t){g(this,void 0,void 0,(function(){return A(this,(function(a){return[2,$.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Asset/"+t.ID+"/Location/"+e.Location.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){})).fail((function(e){500==e.status?alert(e.responseJSON.ExceptionMessage):(sessionStorage.clear(),j())}))]}))}))}(t)}},r.createElement("span",null,r.createElement("i",{className:"fa fa-times"}))))}}],tableClass:"table table-hover",data:n,sortField:c,ascending:f,onSort:function(e){if(e.col==c){var t=l.orderBy(n,[e.col],[f?"desc":"asc"]);T(!f),o(t)}else{t=l.orderBy(n,[e.col],["asc"]);T(!f),o(t),u(e.col)}},onClick:function(e,a){"td"==a.target.localName&&t.push({pathname:homePath+"index.cshtml",search:"?name=Asset&AssetID="+e.row.ID,state:{}})},selected:function(e){return!1}}))),r.createElement("div",{className:"card-footer"},r.createElement("div",{className:"btn-group mr-2"},r.createElement("button",{className:"btn btn-primary pull-right","data-toggle":"modal","data-target":"#assetModal",onClick:function(){k("New"),F(i.a.getNewAsset("Line"))}},"Add Asset"))),r.createElement("div",{className:"modal",id:"assetModal"},r.createElement("div",{className:"modal-dialog",style:{maxWidth:"100%",width:"75%"}},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("h4",{className:"modal-title"},"New"==L?"Add New Asset to Meter":"Edit "+v.AssetKey+" for Meter"),r.createElement("button",{type:"button",className:"close","data-dismiss":"modal",onClick:function(e){return F(i.a.getNewAsset("Line"))}},"×")),r.createElement("div",{className:"modal-body"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement(i.a.AssetAttributeFields,{Asset:v,NewEdit:L,AssetTypes:I,AllAssets:P,UpdateState:F,GetDifferentAsset:function(e){var t=P.find((function(t){return t.ID==e})),a=I.find((function(e){return e.ID==t.AssetTypeID}));Object(S.d)(e,a.Name).then((function(e){return F(e)}))},HideAssetType:!1,HideSelectAsset:!1})),r.createElement("div",{className:"col"},"Breaker"==v.AssetType?r.createElement(h.a,{NewEdit:L,Asset:v,UpdateState:F,ShowSpare:!0}):"Bus"==v.AssetType?r.createElement(b.a,{NewEdit:L,Asset:v,UpdateState:F}):"CapacitorBank"==v.AssetType?r.createElement(y.a,{NewEdit:L,Asset:v,UpdateState:F}):"Line"==v.AssetType?r.createElement(E.a,{NewEdit:L,Asset:v,UpdateState:F}):"Transformer"==v.AssetType?r.createElement(N.a,{NewEdit:L,Asset:v,UpdateState:F}):void 0))),r.createElement("div",{className:"modal-footer"},r.createElement("button",{type:"button",className:"btn btn-primary","data-dismiss":"modal",onClick:function(){$.ajax({type:"POST",url:homePath+"api/OpenXDA/Asset/New/Location/"+e.Location.ID,contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Asset:v}),cache:!1,async:!0}).done((function(){sessionStorage.clear(),j(),F(i.a.getNewAsset("Line"))})).fail((function(e){500==e.status&&alert(e.responseJSON.ExceptionMessage)}))},hidden:"Edit"==L||0!=v.ID},"Save"),r.createElement("button",{type:"button",className:"btn btn-primary","data-dismiss":"modal",onClick:function(){return g(this,void 0,void 0,(function(){return A(this,(function(t){return[2,$.ajax({type:"POST",url:homePath+"api/OpenXDA/Asset/Existing/Location/"+e.Location.ID,contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Asset:v}),cache:!1,async:!0}).done((function(){})).fail((function(e){500==e.status?alert(e.responseJSON.ExceptionMessage):(sessionStorage.clear(),j(),F(i.a.getNewAsset("Line")))}))]}))}))},hidden:"Edit"==L||0==v.ID},"Save"),r.createElement("button",{type:"button",className:"btn btn-primary","data-dismiss":"modal",onClick:function(e){return function(){return g(this,void 0,void 0,(function(){return A(this,(function(e){switch(e.label){case 0:return[4,Object(S.a)(v)];case 1:return e.sent(),j(),F(i.a.getNewAsset("Line")),[2]}}))}))}()},hidden:"New"==L},"Save"),r.createElement("button",{type:"button",className:"btn btn-danger","data-dismiss":"modal",onClick:function(e){return F(i.a.getNewAsset("Line"))}},"Close"))))))},w=a(59),v=a(60),F=a(49),R=function(){var e=function(t,a){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(t,a)};return function(t,a){function n(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}}(),L=function(e){function t(t,a){var n=e.call(this,t,a)||this;return n.state={Location:null,Tab:n.getTab()},n}return R(t,e),t.prototype.getTab=function(){return sessionStorage.hasOwnProperty("Location.Tab")?JSON.parse(sessionStorage.getItem("Location.Tab")):"notes"},t.prototype.getLocation=function(){var e=this;null!=this.props.LocationID&&$.ajax({type:"GET",url:homePath+"api/OpenXDA/Location/One/"+this.props.LocationID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(t){return e.setState({Location:t})}))},t.prototype.deleteLocation=function(){if(confirm("This will delete the Substation Permanently"))return $.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Location/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(this.state.Location),dataType:"json",cache:!0,async:!0})},t.prototype.setTab=function(e){sessionStorage.setItem("Location.Tab",JSON.stringify(e)),this.setState({Tab:e})},t.prototype.componentDidMount=function(){this.getLocation()},t.prototype.componentWillUnmount=function(){sessionStorage.clear()},t.prototype.render=function(){var e=this;return null==this.state.Location?null:r.createElement("div",{style:{width:"100%",height:window.innerHeight-63,maxHeight:window.innerHeight-63,overflow:"hidden",padding:15}},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("h2",null,null!=this.state.Location?this.state.Location.LocationKey:"")),r.createElement("div",{className:"col"},r.createElement("button",{className:"btn btn-danger pull-right",hidden:null==this.state.Location,onClick:function(){return e.deleteLocation().done((function(){return window.location.href=homePath+"index.cshtml?name=Locations"}))}},"Delete Location (Permanent)"))),r.createElement("hr",null),r.createElement("ul",{className:"nav nav-tabs"},r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("notes"==this.state.Tab?" active":""),onClick:function(){return e.setTab("notes")},"data-toggle":"tab",href:"#notes"},"Notes")),r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("locationInfo"==this.state.Tab?" active":""),onClick:function(){return e.setTab("locationInfo")},"data-toggle":"tab",href:"#locationInfo"},"Location Info")),r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("additionalFields"==this.state.Tab?" active":""),onClick:function(){return e.setTab("additionalFields")},"data-toggle":"tab",href:"#additionalFields"},"Additional Fields")),r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("meters"==this.state.Tab?" active":""),onClick:function(){return e.setTab("meters")},"data-toggle":"tab",href:"#meters"},"Meters")),r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("assets"==this.state.Tab?" active":""),onClick:function(){return e.setTab("assets")},"data-toggle":"tab",href:"#assets"},"Assets")),r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("extDB"==this.state.Tab?" active":""),onClick:function(){return e.setTab("extDB")},"data-toggle":"tab",href:"#extDB"},"External DB"))),r.createElement("div",{className:"tab-content",style:{maxHeight:window.innerHeight-215,overflow:"hidden"}},r.createElement("div",{className:"tab-pane "+("notes"==this.state.Tab?" active":"fade"),id:"notes"},r.createElement(w.a,{ID:this.props.LocationID,Type:"Location"})),r.createElement("div",{className:"tab-pane "+("locationInfo"==this.state.Tab?" active":"fade"),id:"locationInfo"},r.createElement(u,{Location:this.state.Location,stateSetter:function(t){return e.setState({Location:t})}})),r.createElement("div",{className:"tab-pane "+("additionalFields"==this.state.Tab?" active":"fade"),id:"additionalFields"},r.createElement(v.a,{ID:this.props.LocationID,Type:"Location",Tab:this.state.Tab})),r.createElement("div",{className:"tab-pane "+("meters"==this.state.Tab?" active":"fade"),id:"meters"},r.createElement(f,{Location:this.state.Location})),r.createElement("div",{className:"tab-pane "+("assets"==this.state.Tab?" active":"fade"),id:"assets"},r.createElement(T,{Location:this.state.Location})),r.createElement("div",{className:"tab-pane "+("extDB"==this.state.Tab?" active":"fade"),id:"extDB"},r.createElement(F.a,{ID:this.props.LocationID,Type:"Location",Tab:this.state.Tab}))))},t}(r.Component);t.default=L},37:function(e,t,a){"use strict";var n,r=a(0),l=a(31),i=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,null==this.props.Label?this.props.Field:this.props.Label),r.createElement("input",{className:this.props.Valid(this.props.Field)?"form-control":"form-control is-invalid",onChange:function(t){var a=l.clone(e.props.Record);""!=t.target.value?a[e.props.Field]=t.target.value:a[e.props.Field]=null,e.props.Setter(a)},value:null==this.props.Record[this.props.Field]?"":this.props.Record[this.props.Field].toString(),disabled:null!=this.props.Disabled&&this.props.Disabled}),r.createElement("div",{className:"invalid-feedback"},null==this.props.Feedback?this.props.Field+" is a required field.":this.props.Feedback))},t}(r.Component);t.a=o},41:function(e,t,a){"use strict";var n,r=a(0),l=a(31),i=a.n(l),o=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-check"},r.createElement("input",{type:"checkbox",className:"form-check-input",style:{zIndex:1},onChange:function(t){var a=i.a.clone(e.props.Record);a[e.props.Field]=t.target.checked,e.props.Setter(a)},value:this.props.Record[this.props.Field]?"on":"off",checked:!!this.props.Record[this.props.Field],disabled:null!=this.props.Disabled&&this.props.Disabled}),r.createElement("label",{className:"form-check-label"},null==this.props.Label?this.props.Field:this.props.Label))},t}(r.Component);t.a=s},43:function(e,t,a){"use strict";a.d(t,"e",(function(){return s})),a.d(t,"c",(function(){return c})),a.d(t,"b",(function(){return u})),a.d(t,"d",(function(){return p})),a.d(t,"a",(function(){return m}));var n=function(e,t,a,n){return new(a||(a=Promise))((function(r,l){function i(e){try{s(n.next(e))}catch(e){l(e)}}function o(e){try{s(n.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,o)}s((n=n.apply(e,t||[])).next())}))},r=function(e,t){var a,n,r,l,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function o(l){return function(o){return function(l){if(a)throw new TypeError("Generator is already executing.");for(;i;)try{if(a=1,n&&(r=2&l[0]?n.return:l[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,l[1])).done)return r;switch(n=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,n=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!(r=i.trys,(r=r.length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){i.label=l[1];break}if(6===l[0]&&i.label<r[1]){i.label=r[1],r=l;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(l);break}r[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],n=0}finally{a=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,o])}}};function l(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+e.ID+"/SpareBreaker",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function i(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+e.ID+"/Location",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function o(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/SpareBreakers/Substation/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function s(e){return n(this,void 0,void 0,(function(){var t;return r(this,(function(a){switch(a.label){case 0:return[4,i(e)];case 1:return null==(t=a.sent())?[2,[]]:[4,o(t)];case 2:return[2,a.sent()]}}))}))}function c(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/AssetType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})}function u(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0})}function d(e,t){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/"+t+"/One/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})}function p(e,t){return n(this,void 0,void 0,(function(){var a,n,i,o,s;return r(this,(function(r){switch(r.label){case 0:return[4,d(e,t)];case 1:return(a=r.sent()).AssetType=t,a.Channels=[],"Breaker"!=t?[3,5]:[4,(u=a,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+u.ID+"/EDNAPoint",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise())];case 2:return n=r.sent(),a.EDNAPoint=null!=n?n.Point:null,[4,l(a)];case 3:return[4,r.sent()];case 4:return i=r.sent(),a.SpareBreakerID=null!=i?i.ID:null,[3,7];case 5:return"Line"!=t?[3,7]:(o=a,s="Detail",[4,(c=a,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Line/"+c.ID+"/LineSegment",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise())]);case 6:o[s]=r.sent(),r.label=7;case 7:return[2,a]}var c,u}))}))}function m(e){return $.ajax({type:"POST",url:homePath+"api/OpenXDA/Asset/Edit",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Asset:e}),cache:!1,async:!0}).promise()}},45:function(e,t,a){"use strict";var n,r=a(0),l=a(31),i=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),o=function(e){return r.createElement("span",{style:{width:10,height:10,margin:3},className:"fa fa-angle-"+(e.ascending?"up":"down")})},s=function(e){function t(t){return e.call(this,t)||this}return i(t,e),t.prototype.componentDidUpdate=function(e,t){},t.prototype.render=function(){var e=this.generateRows(),t=this.generateHeaders();return r.createElement("table",{className:null!=this.props.tableClass?this.props.tableClass:"",style:this.props.tableStyle},r.createElement("thead",{style:this.props.theadStyle},t),r.createElement("tbody",{style:this.props.tbodyStyle},e))},t.prototype.generateHeaders=function(){var e=this;if(0==this.props.cols.length)return null;var t=this.props.cols.map((function(t,a){var n;return null==(n=null!=t.headerStyle?t.headerStyle:{}).cursor&&(n.cursor="pointer"),r.createElement("th",{key:a,style:n,onClick:function(a){return e.handleSort({col:t.key,ascending:e.props.ascending},a)}},t.label,e.props.sortField==t.key?r.createElement(o,{ascending:e.props.ascending}):null)}));return r.createElement("tr",null,t)},t.prototype.generateRows=function(){var e=this;return 0==this.props.data.length?null:this.props.data.map((function(t,a){var n,i=e.props.cols.map((function(n){var i=l.clone(n.rowStyle);return r.createElement("td",{key:a.toString()+t[n.key]+n.key,style:i,onClick:e.handleClick.bind(e,{col:n.key,row:t,data:t[n.key]})},null!=n.content?n.content(t,n.key,i):t[n.key])}));return null==(n=null!=e.props.rowStyle?l.clone(e.props.rowStyle):{}).cursor&&(n.cursor="pointer"),e.props.selected(t)&&(n.backgroundColor="yellow"),r.createElement("tr",{style:n,key:a.toString()},i)}))},t.prototype.handleClick=function(e,t){this.props.onClick(e,t)},t.prototype.handleSort=function(e,t){this.props.onSort(e)},t}(r.Component);t.a=s},49:function(e,t,a){"use strict";var n=a(0),r=a(31),l=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,l=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=l.next()).done;)i.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=l.return)&&a.call(l)}finally{if(r)throw r.error}}return i};function i(e){return n.createElement("tr",null,n.createElement("td",null,e.ExternalDB),n.createElement("td",null,null==e.updated?"N/A":moment(e.updated).format("MM/DD/YYYY")),n.createElement("td",null,n.createElement("button",{className:"btn btn-primary",onClick:function(t){return e.Update(e.ExternalDB)}},"Update ",e.ExternalDB)))}function o(e){var t=r.clone(e.Values),a=t.find((function(t){return t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField}));return n.createElement("tr",null,-1==e.ParentTableID?n.createElement("td",null,e.Field.DisplayName):null,n.createElement("td",null,e.Field.FieldName),n.createElement("td",null,null==e.Field.PreviousValue?"":e.Field.PreviousValue),e.Field.Error?n.createElement("td",null,e.Field.Message):n.createElement("td",null,n.createElement("input",{className:e.Field.Changed?"form-control is-invalid":"form-control",onChange:function(n){""!=n.target.value?a.Value=n.target.value:a.Value=null,a.Changed=!0,e.Setter(t)},value:null==a.Value?"":a.Value.toString()})),n.createElement("td",null,e.Field.Error?n.createElement("span",null,n.createElement("i",{className:"fa fa-exclamation-triangle"})):null),n.createElement("td",null,n.createElement("button",{className:"btn btn-sm",onClick:function(a){return t=t.filter((function(t){return!(t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField)})),void e.Setter(t)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-times"})))))}t.a=function(e){var t=l(n.useState([]),2),a=t[0],r=t[1],s=l(n.useState([]),2),c=s[0],u=s[1],d=l(n.useState(!1),2),p=d[0],m=d[1],f=l(n.useState(""),2),h=f[0],b=f[1];function y(){var t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/"+e.Type+"/extDataBases",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){r(e)})),function(){null!=t.abort&&t.abort()}}function E(){u([]),m(!1)}function N(e){e.length<1?E():u(e)}return n.useEffect((function(){return m(!1),u([]),y()}),[e.ID,e.Type,e.Tab]),n.createElement("div",{className:"card",style:{marginBottom:10}},n.createElement("div",{className:"card-header"},n.createElement("h4",null," External Data Base Connections:")),n.createElement("div",{className:"card-body"},n.createElement("div",{style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540,overflowY:"auto"}},p?n.createElement("table",{id:"fields",className:"table"},n.createElement("thead",null,n.createElement("tr",null,-1==e.ID?n.createElement("th",null," ",e.Type," "):null,n.createElement("th",null,"Field"),n.createElement("th",{style:{width:300}},"Previous Value"),n.createElement("th",{style:{width:300}},"Updated Value"),n.createElement("th",{style:{width:30}}),n.createElement("th",{style:{width:30}}))),n.createElement("tbody",null,c.map((function(t,a){return n.createElement(o,{key:a,ParentTableID:e.ID,Field:t,Values:c,Setter:N})})))):n.createElement("table",{id:"overview",className:"table"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null,"External DB"),n.createElement("th",{style:{width:250}},"Last Updated"),n.createElement("th",{style:{width:300}}))),n.createElement("tbody",null,a.map((function(t,a){return n.createElement(i,{key:a,ParentTableID:e.ID,ExternalDB:t.name,updated:t.lastupdate,Update:function(t){var a;a=t,$.ajax({type:"GET",url:homePath+"api/ExternalDB/"+a+"/"+e.Type+"/Update/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){u(e),m(!0),b(a),e.length<1&&E()}))}})})))))),p?n.createElement("div",{className:"card-footer"},n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-primary",onClick:function(){var t=$.ajax({type:"POST",url:homePath+"api/ExternalDB/"+h+"/"+e.Type+"/ConfirmUpdate",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({data:c}),cache:!1,async:!0});return u([]),m(!1),y(),function(){null!=t.abort&&t.abort()}}},"Save Changes")),n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-default",onClick:E},"Cancel"))):null)}},53:function(e,t,a){"use strict";var n=a(0),r=a(31),l=a(33),i=a(37),o=a(41),s=a(43),c=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,l=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=l.next()).done;)i.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=l.return)&&a.call(l)}finally{if(r)throw r.error}}return i};t.a=function(e){function t(t){return"ThermalRating"==t?null!=e.Asset.ThermalRating&&l.a.isRealNumber(e.Asset.ThermalRating):"Speed"==t?null!=e.Asset.Speed&&l.a.isRealNumber(e.Asset.Speed):"TripTime"==t?null==e.Asset.TripTime||l.a.isInteger(e.Asset.TripTime):"PickupTime"==t?null==e.Asset.PickupTime||l.a.isInteger(e.Asset.PickupTime):"TripCoilCondition"==t?null==e.Asset.TripCoilCondition||l.a.isRealNumber(e.Asset.TripCoilCondition):"EDNAPoint"==t||("Spare"==t||"SpareBreakerID"==t)}var a=c(n.useState([]),2),u=a[0],d=a[1];return n.useEffect((function(){Object(s.e)(e.Asset).then((function(e){d(e)}))}),[e.Asset]),null==e.Asset?null:n.createElement(n.Fragment,null,n.createElement(i.a,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.a,{Record:e.Asset,Field:"Speed",Feedback:"Speed is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.a,{Record:e.Asset,Field:"TripTime",Label:"Trip Time Limit",Feedback:"Trip Time is an integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.a,{Record:e.Asset,Field:"PickupTime",Label:"Pickup Time Limit",Feedback:"Pickup Time is an integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.a,{Record:e.Asset,Field:"TripCoilCondition",Label:"Trip Coil Condition Limit",Feedback:"Trip Coil Condition is an numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.a,{Record:e.Asset,Field:"EDNAPoint",Label:"EDNA Point",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement("div",{className:"form-group",hidden:1!=e.ShowSpare},n.createElement("label",null,"Spare Breaker"),n.createElement("select",{className:"form-control",value:null==e.Asset.SpareBreakerID?0:e.Asset.SpareBreakerID,onChange:function(t){var a=r.clone(e.Asset);"0"==t.target.value?a.SpareBreakerID=null:a.SpareBreakerID=parseInt(t.target.value),e.UpdateState(a)},disabled:"New"==e.NewEdit&&0!=e.Asset.ID},n.createElement("option",{value:0,key:0},"None"),u.map((function(e){return n.createElement("option",{value:e.ID,key:e.ID},e.AssetKey)})))),n.createElement(o.a,{Record:e.Asset,Field:"Spare",Label:"Is Spare",Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},54:function(e,t,a){"use strict";var n,r=a(0),l=a(31),i=a(33),o=a(37),s=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),c=function(){return(c=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};t.a=function(e){function t(t){return"NumberOfBanks"==t?null!=e.Asset.NumberOfBanks&&i.a.isInteger(e.Asset.NumberOfBanks):"CapacitancePerBank"==t?null!=e.Asset.CapacitancePerBank&&i.a.isRealNumber(e.Asset.CapacitancePerBank):"MaxKV"==t?null!=e.Asset.MaxKV&&i.a.isRealNumber(e.Asset.MaxKV):"UnitKV"==t?null!=e.Asset.UnitKV&&i.a.isRealNumber(e.Asset.UnitKV):"UnitKVAr"==t?null!=e.Asset.UnitKVAr&&i.a.isRealNumber(e.Asset.UnitKVAr):"PosReactanceTol"==t?null!=e.Asset.PosReactanceTol&&i.a.isRealNumber(e.Asset.PosReactanceTol):"NegReactanceTol"==t?null!=e.Asset.NegReactanceTol&&i.a.isRealNumber(e.Asset.NegReactanceTol):"Nparalell"==t?null!=e.Asset.Nparalell&&i.a.isInteger(e.Asset.Nparalell):"Nseries"==t?null!=e.Asset.Nseries&&i.a.isInteger(e.Asset.Nseries):"NSeriesGroup"==t?null!=e.Asset.NSeriesGroup&&i.a.isInteger(e.Asset.NSeriesGroup):"NParalellGroup"==t?null!=e.Asset.NParalellGroup&&i.a.isInteger(e.Asset.NParalellGroup):"VTratioBus"==t?null!=e.Asset.VTratioBus&&i.a.isRealNumber(e.Asset.VTratioBus):"NumberLVCaps"==t?null!=e.Asset.NumberLVCaps&&i.a.isInteger(e.Asset.NumberLVCaps):"NumberLVUnits"==t?null!=e.Asset.NumberLVUnits&&i.a.isInteger(e.Asset.NumberLVUnits):"LVKVAr"==t?null!=e.Asset.LVKVAr&&i.a.isRealNumber(e.Asset.LVKVAr):"LVKV"==t?null!=e.Asset.LVKV&&i.a.isRealNumber(e.Asset.LVKV):"LVNegReactanceTol"==t?null!=e.Asset.LVNegReactanceTol&&i.a.isRealNumber(e.Asset.LVNegReactanceTol):"LVPosReactanceTol"==t?null!=e.Asset.LVPosReactanceTol&&i.a.isRealNumber(e.Asset.LVPosReactanceTol):"LowerXFRRatio"==t?null!=e.Asset.LowerXFRRatio&&i.a.isRealNumber(e.Asset.LowerXFRRatio):"Nshorted"==t?null!=e.Asset.Nshorted&&i.a.isRealNumber(e.Asset.Nshorted):"BlownFuses"==t?null!=e.Asset.BlownFuses&&i.a.isRealNumber(e.Asset.BlownFuses):"BlownGroups"==t?null!=e.Asset.BlownGroups&&i.a.isRealNumber(e.Asset.BlownGroups):"Rv"==t?null!=e.Asset.Rv&&i.a.isRealNumber(e.Asset.Rv):"Rh"==t?null!=e.Asset.Rh&&i.a.isRealNumber(e.Asset.Rh):"NLowerGroups"==t?null!=e.Asset.NLowerGroups&&i.a.isInteger(e.Asset.NLowerGroups):"ShortedGroups"==t?null!=e.Asset.ShortedGroups&&i.a.isRealNumber(e.Asset.ShortedGroups):"RelayPTRatioPrimary"==t?null!=e.Asset.RelayPTRatioPrimary&&i.a.isRealNumber(e.Asset.RelayPTRatioPrimary):"RelayPTRatioSecondary"==t?null!=e.Asset.RelayPTRatioSecondary&&i.a.isRealNumber(e.Asset.RelayPTRatioSecondary):"Sh"==t&&(null!=e.Asset.Sh&&i.a.isRealNumber(e.Asset.Sh))}return r.useEffect((function(){null!=e.Asset.Fused&&null!=e.Asset.Compensated&&null!=e.Asset.CktSwitcher&&0!=e.Asset.CktSwitcher.length||e.UpdateState(c(c({},e.Asset),{Fused:!0,Compensated:!1,CktSwitcher:"0"}))}),[e.Asset]),null==e.Asset?null:r.createElement(r.Fragment,null,r.createElement(u,{Record:e.Asset,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"NumberOfBanks",Label:"Number Of Banks",Feedback:"Number Of Banks is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(d,{Record:e.Asset,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"CapacitancePerBank",Label:"Capacitor Step Size (kVAR)",Feedback:"Capacitor Step Size is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"MaxKV",Label:"Maximum Operating Voltage (kV)",Feedback:"Maximum Operating Voltage is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"UnitKV",Label:"Rated Voltage of a Unit (kV)",Feedback:"Rated Voltage of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"UnitKVAr",Label:"Rating of a Unit (kVAR)",Feedback:"Rating of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"PosReactanceTol",Label:"pos. Reactance Tolerance of a Unit (%)",Feedback:"pos. Reactance Tolerance of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"NegReactanceTol",Label:"neg. Reactance Tolerance of a Unit (%)",Feedback:"neg. Reactance Tolerance of a Unit (%) is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"Nparalell",Label:e.Asset.Fused?"Num. of Units per group":"Num. of Parallel Strings",Feedback:(e.Asset.Fused?"Num. of Caps. per group":"Num. of Parallel Strings")+" is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"Nseries",Label:e.Asset.Fused?"Num. of Series Groups per Phase":"Num. Units in each String",Feedback:(e.Asset.Fused?"Num. of Series Groups per Phase":"Num. Units in each String")+" is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),e.Asset.Fused?r.createElement(r.Fragment,null,r.createElement(o.a,{Record:e.Asset,Field:"LowerXFRRatio",Label:"Midgroup VT Ratio",Feedback:"Midgroup VT Ratio is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"Nshorted",Label:"Initial guess of shorted elements",Feedback:"Initial guess of shorted elements is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"BlownFuses",Label:"Initial Guess of blown fuses per group",Feedback:"Initial Guess of blown fuses per group is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"BlownGroups",Label:"Initial guess of Groups with blown Fuse",Feedback:"Initial guess of Groups with blown Fuse is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})):r.createElement(r.Fragment,null,e.Asset.Compensated?r.createElement(r.Fragment,null,r.createElement(p,{Record:e.Asset,Field2:"RelayPTRatioSecondary",Field1:"RelayPTRatioPrimary",Label:"Relay PT Ratio (primary - secondary V)",Feedback:"Relay PT ratio  is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"Rh",Label:"Vt Input Resistor (Ohm)",Feedback:"Vt input resistor is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"Sh",Label:"Vt Input Resistor Wattage (W)",Feedback:"Vt input resistor wattage is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})):r.createElement(r.Fragment,null,r.createElement(o.a,{Record:e.Asset,Field:"Rv",Label:"Voltage Divider output R (Ohm)",Feedback:"Voltage Divider output R is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"Rh",Label:"Voltage Divider input R (Ohm)",Feedback:"Voltage Divider input R is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})),r.createElement(o.a,{Record:e.Asset,Field:"NSeriesGroup",Label:"Num. of Series Groups in each Unit",Feedback:"Num. of Series Groups in each Unit is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"NParalellGroup",Label:"Num. of Elements in each Group",Feedback:"Num. of Elements in each Group is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"VTratioBus",Label:"Bus VT Ratio",Feedback:"Bus VT Ratio is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"NumberLVCaps",Label:"Num.of Relay Caps",Feedback:"Num. of Relay Caps is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"NumberLVUnits",Label:"Num. of Elements per Relay Cap",Feedback:"Num. of Elements per Relay Cap is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"LVKVAr",Label:"Low Voltage Cap size (kVAR)",Feedback:"Low Voltage Cap size is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"LVKV",Label:"Low Voltage Cap rating (V)",Feedback:"Low Volatage Cap rating is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"LVNegReactanceTol",Label:"neg. Reactance Tolerance of LV Unit (%)",Feedback:"neg. Reactance Tolerance of LV Unitis a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"LVPosReactanceTol",Label:"pos. Reactance Tolerance of LV Unit (%)",Feedback:"pos. Reactance Tolerance of LV Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(o.a,{Record:e.Asset,Field:"Nshorted",Label:"Initial guess of shorted elements",Feedback:"Initial guess of shorted elements is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})))};var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.computBools=function(e){var t=l.clone(this.props.Record);"0"==e?(t.Compensated=!0,t.Fused=!1):"1"==e?(t.Compensated=!1,t.Fused=!1):"2"==e&&(t.Compensated=!1,t.Fused=!0),this.props.Setter(t)},t.prototype.computeSelection=function(e){return e.Compensated?"0":e.Fused?"2":"1"},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,"Design"),r.createElement("select",{className:"form-control",value:this.computeSelection(this.props.Record),disabled:null!=this.props.Disabled&&this.props.Disabled,onChange:function(t){return e.computBools(t.target.value)}},r.createElement("option",{key:0,value:"0"},"Fuseless Compensated"),r.createElement("option",{key:1,value:"1"},"Fuseless Uncompensated"),r.createElement("option",{key:2,value:"2"},"Fused")))},t}(r.Component),d=function(e){function t(t,a){var n=e.call(this,t,a)||this,r=[];null!=n.props.Record.CktSwitcher&&(r=n.props.Record.CktSwitcher.trim().split(","));var l=1;return null!=n.props.Record.NumberOfBanks&&(l=n.props.Record.NumberOfBanks),r.length!==parseInt(l.toString())&&(r=Array.from(Array(parseInt(l.toString())),(function(e,t){return"0"}))),n.state={preSwitch:r.map((function(e){return"1"==e.trim()}))},n}return s(t,e),t.prototype.updateValues=function(e){var t=[];null!=e&&(t=e.trim().split(","));var a=1;null!=this.props.Record.NumberOfBanks&&(a=this.props.Record.NumberOfBanks),t.length!==parseInt(a.toString())&&(t=Array.from(Array(parseInt(a.toString())),(function(e,t){return"0"}))),this.setState({preSwitch:t.map((function(e){return"1"==e.trim()}))})},t.prototype.componentDidUpdate=function(e,t){if(e.Record.NumberOfBanks===this.props.Record.NumberOfBanks&&e.Record.CktSwitcher===this.props.Record.CktSwitcher||this.updateValues(this.props.Record.CktSwitcher),!l.isEqual(t,this.state)){var a=l.clone(this.props.Record);a.CktSwitcher=this.state.preSwitch.map((function(e){return e?"1":"0"})).join(","),this.props.Setter(a)}},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,"CapBank with Pre-insertion Switcher"),r.createElement("div",null,this.state.preSwitch.map((function(t,a){return r.createElement("div",{className:"from-check form-check-inline",key:a},r.createElement("input",{className:"form-check-input",type:"checkbox",id:"inlineCheckbox-"+a,onChange:function(t){var n=l.clone(e.state.preSwitch);n[a]=!n[a],e.setState({preSwitch:n})},value:t?1:0,checked:t,disabled:null!=e.props.Disabled&&e.props.Disabled}),r.createElement("label",{className:"form-check-label",htmlFor:"inlineCheckbox-"+a},a+1))}))))},t}(r.Component);function p(e){return r.createElement("div",{className:"form-group"},r.createElement("label",null,null==e.Label?e.Field1+" "+e.Field2:e.Label),r.createElement("div",{className:"input-group"},r.createElement("input",{type:void 0===e.Type?"text":e.Type,className:e.Valid(e.Field1)?"form-control":"form-control is-invalid",onChange:function(t){var a;return e.Setter(c(c({},e.Record),((a={})[e.Field1]=""!==t.target.value?t.target.value:null,a)))},value:null==e.Record[e.Field1]?"":e.Record[e.Field1].toString(),disabled:null!=e.Disabled&&e.Disabled}),r.createElement("input",{type:void 0===e.Type?"text":e.Type,className:e.Valid(e.Field2)?"form-control":"form-control is-invalid",onChange:function(t){var a;return e.Setter(c(c({},e.Record),((a={})[e.Field2]=""!==t.target.value?t.target.value:null,a)))},value:null==e.Record[e.Field2]?"":e.Record[e.Field2].toString(),disabled:null!=e.Disabled&&e.Disabled})),r.createElement("div",{className:"invalid-feedback"},null==e.Feedback?e.Field1+" "+e.Field2+" is a required field.":e.Feedback))}},55:function(e,t,a){"use strict";var n=a(0);t.a=function(e){return n.createElement("span",null,"No Additional Attributes")}},56:function(e,t,a){"use strict";var n=a(0),r=a(31),l=a(33),i=a(35);t.a=function(e){function t(t){return"MaxFaultDistance"==t?null==e.Asset.MaxFaultDistance||l.a.isRealNumber(e.Asset.MaxFaultDistance):"MinFaultDistance"==t?null==e.Asset.MinFaultDistance||l.a.isRealNumber(e.Asset.MinFaultDistance):"Length"==t?null==e.Asset.Detail.Length||l.a.isRealNumber(e.Asset.Detail.Length):"R0"==t?null==e.Asset.Detail.R0||l.a.isRealNumber(e.Asset.Detail.R0):"X0"==t?null==e.Asset.Detail.X0||l.a.isRealNumber(e.Asset.Detail.X0):"R1"==t?null==e.Asset.Detail.R1||l.a.isRealNumber(e.Asset.Detail.R1):"X1"==t?null==e.Asset.Detail.X1||l.a.isRealNumber(e.Asset.Detail.X1):"ThermalRating"==t&&(null==e.Asset.Detail.ThermalRating||l.a.isRealNumber(e.Asset.Detail.ThermalRating))}function a(t){var a=r.clone(e.Asset);a.Detail=t,e.UpdateState(a)}return n.useEffect((function(){}),[e.Asset]),null==e.Asset||null==e.Asset.Detail?null:n.createElement(n.Fragment,null,n.createElement(i.Input,{Record:e.Asset,Field:"MaxFaultDistance",Label:"Max Fault Distance",Feedback:"Max Fault Distance is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.Input,{Record:e.Asset,Field:"MinFaultDistance",Label:"Min Fault Distance",Feedback:"Min Fault Distance is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement("div",{className:"alert alert-info",role:"alert"},n.createElement("p",null,"Reactance, Length and Thermal rating are based on the LineSegments associated with this Line."),n.createElement("p",null,"To edit these values the properties of the LineSegement need to be changed.")),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"Length",Feedback:"Length is a required numeric field.",Valid:t,Setter:a,Disabled:!0}),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"R0",Valid:t,Setter:a,Disabled:!0}),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"X0",Valid:t,Setter:a,Disabled:!0}),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"R1",Valid:t,Setter:a,Disabled:!0}),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"X1",Valid:t,Setter:a,Disabled:!0}),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"ThermalRating",Label:"Thermal Rating",Valid:t,Setter:a,Disabled:!0}))}},57:function(e,t,a){"use strict";var n=a(0),r=a(33),l=a(37);t.a=function(e){function t(t){return"PrimaryVoltageKV"==t?null==e.Asset.PrimaryVoltageKV||r.a.isRealNumber(e.Asset.PrimaryVoltageKV):"SecondaryVoltageKV"==t?null==e.Asset.SecondaryVoltageKV||r.a.isRealNumber(e.Asset.SecondaryVoltageKV):"Tap"==t?null==e.Asset.Tap||r.a.isRealNumber(e.Asset.Tap):"R0"==t?null!=e.Asset.R0&&r.a.isRealNumber(e.Asset.R0):"X0"==t?null!=e.Asset.X0&&r.a.isRealNumber(e.Asset.X0):"R1"==t?null!=e.Asset.R1&&r.a.isRealNumber(e.Asset.R1):"X1"==t?null!=e.Asset.X1&&r.a.isRealNumber(e.Asset.X1):"ThermalRating"==t&&(null!=e.Asset.ThermalRating&&r.a.isRealNumber(e.Asset.ThermalRating))}return null==e.Asset?null:n.createElement(n.Fragment,null,n.createElement(l.a,{Record:e.Asset,Field:"R0",Feedback:"R0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"X0",Feedback:"X0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"R1",Feedback:"R1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"X1",Feedback:"X1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal Rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"PrimaryVoltageKV",Label:"Primary Voltage (kV)",Feedback:"Primary Voltage (kV) is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"SecondaryVoltageKV",Label:"Secondary Voltage (kV)",Feedback:"Secondary Voltage (kV) is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"Tap",Feedback:"Tap is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},59:function(e,t,a){"use strict";var n=a(35),r=a(38),l=a(39),i=a.n(l),o=a(31),s=a.n(o),c=a(0),u=function(){return(u=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},d=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,l=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=l.next()).done;)i.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=l.return)&&a.call(l)}finally{if(r)throw r.error}}return i};t.a=function(e){var t=d(c.useState(0),2),a=t[0],l=t[1],o=d(c.useState({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),2),p=o[0],m=o[1],f=d(c.useState(!1),2),h=f[0],b=f[1],y=d(c.useState([]),2),E=y[0],N=y[1],S=d(c.useState("Timestamp"),2),g=S[0],A=S[1],D=d(c.useState(!1),2),T=D[0],w=D[1],v=d(c.useState(!1),2),F=v[0],R=v[1],L=d(c.useState(!1),2),k=L[0],V=L[1];function I(){var t=$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/ForObject/"+e.Type+"/"+e.ID+"/Search",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[],OrderBy:g,Ascending:T}),cache:!1,async:!0});return t.done((function(e){var t=JSON.parse(e);N(t)})),t}function x(e){$.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Note/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),cache:!0,async:!0}).done((function(){return I()}))}function C(t){m({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify({ID:0,NoteTypeID:a,ReferenceTableID:e.ID,Note:t.Note,Timestamp:moment().format("MM/DD/YYYY HH:mm"),UserAccount:""}),dataType:"json",cache:!0,async:!0}).done((function(e){I()}))}return c.useEffect((function(){var t,a=((t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/NoteType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).then((function(t){var a=t.find((function(t){return t.ReferenceTableName==e.Type}));l(a.ID)})),t);return I(),function(){null!=a&&null!=a.abort&&a.abort()}}),[e.Type]),c.useEffect((function(){var e=I();return function(){null!=e&&null!=e.abort&&e.abort()}}),[e.ID,g,T]),c.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},c.createElement("div",{className:"card-header"},c.createElement("div",{className:"row"},c.createElement("div",{className:"col"},c.createElement("h4",null,"Notes:")))),c.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},c.createElement("div",null,c.createElement(i.a,{cols:[{key:"Note",label:"Note",headerStyle:{width:"50%"},rowStyle:{width:"50%"}},{key:"Timestamp",label:"Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return moment.utc(e.Timestamp).format("MM/DD/YYYY HH:mm")}},{key:"UserAccount",label:"User",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return c.createElement(c.Fragment,null,c.createElement("button",{className:"btn btn-sm",onClick:function(t){return m(e),void b(!0)}},c.createElement("span",null,c.createElement("i",{className:"fa fa-pencil"}))),c.createElement("button",{className:"btn btn-sm",onClick:function(t){return x(e)}},c.createElement("span",null,c.createElement("i",{className:"fa fa-times"}))))}}],tableClass:"table table-hover",data:E,sortField:g,ascending:T,onSort:function(e){e.col==g?w(!T):(w(!0),A(e.col))},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-615,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return e.ID==p.ID}})),c.createElement(n.TextArea,{Record:p,Rows:4,Field:"Note",Setter:function(e){return m(e)},Valid:function(){return p.Note.length>0},Label:""}),c.createElement(r.Modal,{Show:h,Title:"Edit Note",ShowCancel:!0,CallBack:function(e){if(0!=p.Note.length||!e){if(b(!1),e){var t=s.a.cloneDeep(p);x(t),C(t)}m({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""})}},DisableConfirm:0==p.Note.length,ShowX:!0,ConfirmShowToolTip:0==p.Note.length,ConfirmToolTipContent:c.createElement("p",null," ",c.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"An empty Note can not be saved. ")},c.createElement(n.TextArea,{Record:p,Rows:4,Field:"Note",Setter:function(e){null==e.Note?m(u(u({},e),{Note:""})):m(e)},Valid:function(){return p.Note.length>0},Label:""}))),c.createElement("div",{className:"card-footer"},c.createElement("div",{className:"btn-group mr-2"},c.createElement("button",{className:"btn btn-primary"+(0==p.Note.length?" disabled":""),onClick:function(){p.Note.length>0&&C(p)},"data-tooltip":"Add",style:{cursor:0==p.Note.length?"not-allowed":"pointer"},onMouseOver:function(){return R(!0)},onMouseOut:function(){return R(!1)}},"Add Note"),c.createElement(r.ToolTip,{Show:F&&0==p.Note.length,Position:"top",Theme:"dark",Target:"Add"},c.createElement("p",null," A note needs to be entered. "))),c.createElement("div",{className:"btn-group mr-2"},c.createElement("button",{className:"btn btn-default"+(0==p.Note.length?" disabled":""),onClick:function(){return m((function(e){return u(u({},e),{Note:""})}))},style:{cursor:0==p.Note.length?"not-allowed":"pointer"},"data-tooltip":"Remove",onMouseOver:function(){return V(!0)},onMouseOut:function(){return V(!1)}},"Clear"),c.createElement(r.ToolTip,{Show:k&&0==p.Note.length,Position:"top",Theme:"dark",Target:"Remove"},c.createElement("p",null," The note field is already empty. ")))))}},60:function(e,t,a){"use strict";var n=a(0),r=a(31),l=a(33),i=a(38),o=a(35),s=a(39),c=a.n(s),u=function(){return(u=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},d=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,l=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=l.next()).done;)i.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=l.return)&&a.call(l)}finally{if(r)throw r.error}}return i},p=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e};t.a=function(e){var t=d(n.useState([]),2),a=t[0],r=t[1],s=d(n.useState([]),2),p=s[0],f=s[1],h=d(n.useState([]),2),b=h[0],y=h[1],E=d(n.useState([]),2),N=E[0],S=E[1],g=d(n.useState([]),2),A=g[0],D=g[1],T=d(n.useState([]),2),w=T[0],v=T[1],F=d(n.useState(!1),2),R=F[0],L=F[1],k=d(n.useState("FieldName"),2),V=k[0],I=k[1],x=d(n.useState(!1),2),C=x[0],P=x[1],O=d(n.useState({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),2),j=O[0],B=O[1],U=d(n.useState(!1),2),M=U[0],X=U[1],_=d(n.useState(!1),2),G=_[0],K=_[1],q=d(n.useState(!1),2),H=q[0],J=q[1],Y=d(n.useState("None"),2),z=Y[0],W=Y[1],Z=d(n.useState(!0),2),Q=Z[0],ee=Z[1],te={ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1};function ae(){var t,a=ne(),n=re(),l=((t=$.ajax({type:"GET",url:homePath+"api/ValueListGroup",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(e){r(e)})),t),i=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ExternalDataBase",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){f(e.map((function(e){return e.ExternalDB})))})),e}(),o=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/ExternalDBTables/TableName/0",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){var t=JSON.parse(e);y(t.map((function(e){return e.TableName})))})),e}();return B({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),function(){null!=a.abort&&a.abort(),null!=n.abort&&n.abort(),null!=l.abort&&l.abort(),null!=i.abort&&i.abort(),null!=o.abort&&o.abort()}}function ne(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/"+e.Type+"/"+V+"/"+(C?"1":"0"),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){S(e)})),t}function re(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalFieldValue/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){D(e)})),t}function le(){return Q&&null!=j.FieldName&&j.FieldName.length>0&&(null==j.ExternalDB||0==j.ExternalDB.length||!(null==j.ExternalDBTable||0==j.ExternalDBTable.length)&&!(null==j.ExternalDBTableKey||0==j.ExternalDBTableKey.length))}function ie(){return w.some((function(e,t){var a=A.findIndex((function(t){return t.AdditionalFieldID==e.AdditionalFieldID}));return(-1!=a||null!=e.Value)&&(-1==a||e.Value!=A[a].Value)}))}function oe(e){var t=[];return w.forEach((function(a,r){var l=N.findIndex((function(e){return e.ID==a.AdditionalFieldID})),i=A.findIndex((function(e){return e.AdditionalFieldID==a.AdditionalFieldID}));-1==l||-1==i&&null==a.Value||(-1!=i?a.Value!=A[i].Value&&t.push(e?n.createElement("p",{key:r}," ",n.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",N[l].FieldName,"' will be lost."):n.createElement("p",{key:r}," ",n.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",N[l].FieldName,"' are valid.")):t.push(e?n.createElement("p",{key:r}," ",n.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",N[l].FieldName,"' will be lost."):n.createElement("p",{key:r}," ",n.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",N[l].FieldName,"' are valid.")))})),t}function se(){return w.some((function(e){var t=N.findIndex((function(t){return t.ID==e.AdditionalFieldID}));return-1!=t&&("integer"==N[t].Type&&!(null==e.Value||l.a.isInteger(e.Value)))}))}return n.useEffect((function(){return ae()}),[e.ID,e.Type,e.Tab]),n.useEffect((function(){v(A)}),[A]),n.useEffect((function(){var e=ne();return function(){null!=e.abort&&e.abort()}}),[V,C]),n.useEffect((function(){var e=function(){if(null==j.FieldName||0==j.FieldName.length)return null;var e=$.ajax({type:"Post",url:homePath+"api/SystemCenter/AdditionalField/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[{FieldName:"FieldName",Operator:"=",SearchText:j.FieldName,Type:"string"}],OrderBy:"FieldName",Ascending:!0}),cache:!1,async:!0});return e.done((function(e){var t=JSON.parse(e);0==t.length?ee(!0):t.length>1?ee(!1):t[0].ID==j.ID?ee(!0):ee(!1)})),e}();return function(){null!=e&&null!=e.abort&&e.abort()}}),[j.ID,j.FieldName]),n.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},n.createElement("div",{className:"card-header"},n.createElement("div",{className:"row"},n.createElement("div",{className:"col"},n.createElement("h4",null,"Additional Fields:")),n.createElement("div",{className:"col"},R?n.createElement("button",{className:"btn btn-default pull-right","data-tooltip":"View",onClick:function(){L(!1),re()},onMouseEnter:function(){return W("View")},onMouseLeave:function(){return W("None")}},"View"):n.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){return L(!0)}},"Edit"),n.createElement(i.ToolTip,{Show:"View"==z&&ie(),Position:"left",Theme:"dark",Target:"View"},oe(!0))))),n.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},n.createElement(c.a,{cols:[{key:"FieldName",label:"Field",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"ExternalDB",label:"Ext DB",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Type",label:"Type",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"IsSecure",label:"Value",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t){var a=A.findIndex((function(e){return e.AdditionalFieldID==t.ID}));return R?n.createElement(m,{Field:t,ParentTableID:e.ID,Values:w,Setter:function(e){return v(e)}}):a>-1&&null!=A[a].Value?A[a].Value.toString():""}},{key:"ID",label:"",headerStyle:{width:40,paddingRight:0,paddingLeft:10},rowStyle:{width:40,paddingRight:0,paddingLeft:10,paddingTop:36},content:function(e){return R?n.createElement("button",{className:"btn btn-sm",onClick:function(){B(e),J(!0)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-pencil"}))):""}},{key:null,label:"",headerStyle:{width:40,paddingLeft:0,paddingRight:10},rowStyle:{width:40,paddingLeft:0,paddingTop:36,paddingRight:10},content:function(e){return R?n.createElement("button",{className:"btn btn-sm",onClick:function(){B(e),X(!0)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-times"}))):""}}],tableClass:"table table-hover",data:N,sortField:V,ascending:C,onSort:function(e){null!=e.col&&"ID"!=e.col&&"IsSecure"!=e.col&&(e.col==V?P(!C):(P(!0),I(e.col)))},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-455},rowStyle:{display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),n.createElement("div",{className:"card-footer"},n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-primary"+(R?"":" disabled"),onMouseEnter:function(){return W("New")},onMouseLeave:function(){return W("None")},onClick:function(){R&&(J(!0),B(te))},"data-tooltip":"New"},"Add Field")),n.createElement(i.ToolTip,{Show:"New"==z&&!R,Position:"top",Theme:"dark",Target:"New"},R?null:n.createElement("p",null," To add a new Field switch to Edit mode by clicking on the Edit Button on the upper right corner.")),n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-primary"+(ie()&&R&&!se()?"":" disabled"),onClick:function(){ie()&&!se()&&R&&$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalFieldValue/Array",contentType:"application/json; charset=utf-8",data:JSON.stringify(w),dataType:"json",cache:!0,async:!0}).done((function(e){ae()}))},onMouseEnter:function(){return W("Save")},onMouseLeave:function(){return W("None")},"data-tooltip":"SaveValues"},"Save Changes")),n.createElement(i.ToolTip,{Show:"Save"==z&&(!R||ie()),Position:"top",Theme:"dark",Target:"SaveValues"},R?null:n.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),ie()&&!se()?oe(!1):null,ie()&&se()?function(){if(!se())return[];var e=[];return w.forEach((function(t,a){var r=N.findIndex((function(e){return e.ID==t.AdditionalFieldID}));-1!=r&&("integer"!=N[r].Type||null==t.Value||l.a.isInteger(t.Value)||e.push(n.createElement("p",{key:a}," ",n.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Value for '",N[r].FieldName,"' is required to be an integer.")))})),e}():null),n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-default"+(ie()&&R?"":" disabled"),onClick:function(){ie()&&R&&re()},onMouseEnter:function(){return W("Clear")},onMouseLeave:function(){return W("None")},"data-tooltip":"Clear"},"Reset")),n.createElement(i.ToolTip,{Show:"Clear"==z&&(!R||ie()),Position:"top",Theme:"dark",Target:"Clear"},R?null:n.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),ie()?oe(!0):null)),n.createElement(i.LoadingScreen,{Show:G}),n.createElement(i.Warning,{Show:M,Title:"Delete "+j.FieldName,Message:"This will delete the field '"+j.FieldName+"' from all "+e.Type+"s and will also delete all information assigned to these fields.",CallBack:function(e){var t;e&&(t=j,K(!0),$.ajax({type:"DELETE",url:homePath+"api/SystemCenter/AdditionalField/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),dataType:"json",cache:!0,async:!0}).done((function(e){ae(),K(!1)}))),X(!1)}}),n.createElement(i.Modal,{Title:"Additional Field",ConfirmText:"Save",CancelText:"Close",ConfirmBtnClass:"btn-primary"+(le()?"":" disabled"),Show:H,Size:"lg",ShowX:!0,CallBack:function(e,t){!le()&&e||(e&&(K(!0),$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalField/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(j),dataType:"json",cache:!0,async:!0}).done((function(e){ae(),K(!1)}))),J(!1))},ConfirmShowToolTip:!le(),ConfirmToolTipContent:n.createElement(n.Fragment,null,null!=j.FieldName&&0!=j.FieldName.length&&Q?null:n.createElement("p",null," ",n.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Field Name is required and has to be unique."),null!=j.ExternalDB&&null==j.ExternalDBTable?n.createElement("p",null," ",n.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table."):null,null!=j.ExternalDB&&null==j.ExternalDBTableKey?n.createElement("p",null," ",n.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table Key."):null)},n.createElement(o.Input,{Record:j,Field:"FieldName",Valid:function(e){return null!=j.FieldName&&j.FieldName.length>0&&Q},Label:"Field Name",Setter:B,Feedback:"The additional field needs to have a unique Field Name"}),n.createElement(o.Select,{Record:j,Field:"Type",Options:[{Value:"string",Label:"string"},{Value:"integer",Label:"integer"},{Value:"number",Label:"number"}].concat(a.filter((function(e){return e.Enabled})).map((function(e){return{Value:e.Name,Label:e.Name}}))),Label:"Field Type",Setter:B}),n.createElement(o.Select,{Record:j,Field:"ExternalDB",Label:"External Database",Setter:function(e){null!=e.ExternalDB&&""!=e.ExternalDB||(e=u(u({},e),{ExternalDB:null,ExternalDBTable:null,ExternalDBTableKey:null})),B(e)},EmptyOption:!0,Options:p.map((function(e){return{Value:e,Label:e}}))}),n.createElement("div",{"data-tooltip":"ExternalDB",onMouseEnter:function(){return W("ExternalDB")},onMouseLeave:function(){return W("None")}},n.createElement(o.Select,{EmptyOption:!0,Disabled:null==j.ExternalDB||0==j.ExternalDB.length,Record:j,Field:"ExternalDBTable",Options:b.map((function(e){return{Value:e,Label:e}})),Label:"External Database Table",Setter:B})),n.createElement(o.Input,{Disabled:null==j.ExternalDB||0==j.ExternalDB.length,Record:j,Field:"ExternalDBTableKey",Valid:function(e){return!0},Label:"External Database Table Key",Setter:B}),n.createElement(o.CheckBox,{Record:j,Field:"IsSecure",Label:"Secure Data",Setter:B})),n.createElement(i.ToolTip,{Zindex:9999,Show:"ExternalDB"==z&&(null==j.ExternalDB||0==j.ExternalDB.length),Position:"bottom",Theme:"dark",Target:"ExternalDB"},n.createElement("p",null," No External Database selected.")))};var m=function(e){var t=d(n.useState([]),2),a=t[0],i=t[1],s=d(n.useState(-1),2),c=s[0],u=s[1];function m(t){var a=r.cloneDeep(e.Values);a[c]=t,e.Setter(a)}function f(t){return"integer"==e.Field.Type?null==e.Values[c].Value||l.a.isInteger(e.Values[c].Value):"number"==e.Field.Type?null==e.Values[c].Value||l.a.isRealNumber(e.Values[c].Value):(e.Field.Type,!0)}return n.useEffect((function(){var t=e.Values.findIndex((function(t){return t.AdditionalFieldID==e.Field.ID}));u(t),-1==t&&e.Setter(p(e.Values,[{ID:0,AdditionalFieldID:e.Field.ID,OpenXDAParentTableID:e.ParentTableID,Value:null}]))}),[e.Values,e.Field]),n.useEffect((function(){if(["integer","number","boolean","string"].indexOf(e.Field.Type)<0){var t=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+e.Field.Type,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){i(e)})),function(){null!=t.abort&&t.abort()}}}),[e.Field.Type]),-1==c||null==e.Values[c]?null:"number"==e.Field.Type||"integer"==e.Field.Type?n.createElement(o.Input,{Record:e.Values[c],Field:"Value",Valid:f,Label:"",Type:"number",Setter:m,Feedback:e.Field.FieldName+" is an integer field."}):"string"==e.Field.Type?n.createElement(o.Input,{Record:e.Values[c],Field:"Value",Valid:f,Label:"",Type:"text",Setter:m}):"boolean"==e.Field.Type?n.createElement(o.CheckBox,{Record:e.Values[c],Field:"Value",Label:"",Setter:m}):n.createElement(o.Select,{EmptyOption:!0,Record:e.Values[c],Field:"Value",Label:"",Setter:m,Options:a.map((function(e){return{Value:e.ID.toString(),Label:e.Text}}))})}},91:function(e,t,a){"use strict";var n,r=a(0),l=a(31),i=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,null==this.props.Label?this.props.Field:this.props.Label),r.createElement("textarea",{rows:this.props.Rows,className:this.props.Valid(this.props.Field)?"form-control":"form-control is-invalid",onChange:function(t){var a=l.clone(e.props.Record);""!=t.target.value?a[e.props.Field]=t.target.value:a[e.props.Field]=null,e.props.Setter(a)},value:null==this.props.Record[this.props.Field]?"":this.props.Record[this.props.Field].toString(),disabled:null!=this.props.Disabled&&this.props.Disabled}),r.createElement("div",{className:"invalid-feedback"},null==this.props.Feedback?this.props.Field+" is a required field.":this.props.Feedback))},t}(r.Component);t.a=o}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
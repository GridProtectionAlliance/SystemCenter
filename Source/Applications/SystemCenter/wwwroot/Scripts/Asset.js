(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{324:function(e,t,n){"use strict";n.r(t);var a,r=n(0),l=n(33),i=n(43),s=n(53),o=n(55),c=n(54),u=n(56),d=n(57),m=n(81),p=n(73),f=(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),h=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.state={Asset:a.props.Asset,AssetTypes:[],AllAssets:[]},a.updateState=a.updateState.bind(a),a}return f(t,e),t.prototype.componentDidMount=function(){var e=this;Object(i.c)().done((function(t){e.setState({AssetTypes:t});var n=t.find((function(t){return t.ID==e.state.Asset.AssetTypeID}));Object(i.d)(e.props.Asset.ID,n.Name).then((function(t){return e.setState({Asset:t})}))})),Object(i.b)().done((function(t){return e.setState({AllAssets:t})}))},t.prototype.componentWillReceiveProps=function(e){var t=this;e.Asset!=this.state.Asset&&this.setState({Asset:e.Asset},(function(){var e=t.state.AssetTypes.find((function(e){return e.ID==t.state.Asset.AssetTypeID}));Object(i.d)(t.state.Asset.ID,e.Name).then((function(e){return t.setState({Asset:e})}))}))},t.prototype.showAttributes=function(){return"Breaker"==this.state.Asset.AssetType?r.createElement(s.a,{NewEdit:"Edit",Asset:this.state.Asset,UpdateState:this.updateState,ShowSpare:!0}):"Bus"==this.state.Asset.AssetType?r.createElement(o.a,{NewEdit:"Edit",Asset:this.state.Asset,UpdateState:this.updateState}):"CapacitorBank"==this.state.Asset.AssetType?r.createElement(c.a,{NewEdit:"Edit",Asset:this.state.Asset,UpdateState:this.updateState}):"CapacitorBankRelay"==this.state.Asset.AssetType?r.createElement(p.a,{NewEdit:"Edit",Asset:this.state.Asset,UpdateState:this.updateState}):"Line"==this.state.Asset.AssetType?r.createElement(u.a,{NewEdit:"Edit",Asset:this.state.Asset,UpdateState:this.updateState}):"Transformer"==this.state.Asset.AssetType?r.createElement(d.a,{NewEdit:"Edit",Asset:this.state.Asset,UpdateState:this.updateState}):"LineSegment"==this.state.Asset.AssetType?r.createElement(m.a,{NewEdit:"Edit",Asset:this.state.Asset,UpdateState:this.updateState}):void 0},t.prototype.updateState=function(e){this.setState({Asset:e})},t.prototype.render=function(){var e=this;return null==this.props.Asset?null:r.createElement("div",{className:"card",style:{marginBottom:10}},r.createElement("div",{className:"card-header"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("h4",null,"Asset Information:")))),r.createElement("div",{className:"card-body"},r.createElement("div",{className:"row",style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540,overflowY:"auto"}},r.createElement("div",{className:"col"},r.createElement(l.a.AssetAttributeFields,{Asset:this.state.Asset,NewEdit:"Edit",AssetTypes:this.state.AssetTypes,AllAssets:this.state.AllAssets,UpdateState:this.updateState,GetDifferentAsset:function(){},HideAssetType:!1,HideSelectAsset:!0})),r.createElement("div",{className:"col"},this.showAttributes()))),r.createElement("div",{className:"card-footer"},r.createElement("div",{className:"btn-group mr-2"},r.createElement("button",{className:"btn btn-primary",type:"submit",onClick:function(){Object(i.a)(e.state.Asset),e.props.StateSetter(e.state.Asset)},disabled:this.state.Asset==this.props.Asset},"Save Changes")),r.createElement("div",{className:"btn-group mr-2"},r.createElement("button",{className:"btn btn-default",onClick:function(){return e.setState({Asset:e.props.Asset})},disabled:this.state.Asset==this.props.Asset},"Clear Changes"))))},t}(r.Component),y=n(31),S=n.n(y),b=n(45),E=n(3),g=function(e,t,n,a){return new(n||(n=Promise))((function(r,l){function i(e){try{o(a.next(e))}catch(e){l(e)}}function s(e){try{o(a.throw(e))}catch(e){l(e)}}function o(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}o((a=a.apply(e,t||[])).next())}))},A=function(e,t){var n,a,r,l,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function s(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,a&&(r=2&l[0]?a.return:l[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,l[1])).done)return r;switch(a=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,a=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!(r=i.trys,(r=r.length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){i.label=l[1];break}if(6===l[0]&&i.label<r[1]){i.label=r[1],r=l;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(l);break}r[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],a=0}finally{n=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}},N=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i};var w=function(e){var t=Object(E.useHistory)(),n=N(r.useState([]),2),a=n[0],l=n[1],i=N(r.useState("LocationKey"),2),s=i[0],o=i[1],c=N(r.useState(!0),2),u=c[0],d=c[1],m=N(r.useState([]),2),p=m[0],f=m[1],h=N(r.useState(),2),S=h[0],w=h[1];function D(){$.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset/"+e.Asset.ID+"/Locations",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){return l(e)})),$.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset/"+e.Asset.ID+"/OtherLocations",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){var t=y.orderBy(e,["LocationKey"],["asc"]);f(t),w(t[0])}))}return r.useEffect((function(){D()}),[e.Asset]),r.createElement("div",{className:"card",style:{marginBottom:10}},r.createElement("div",{className:"card-header"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("h4",null,"Substations:")))),r.createElement("div",{className:"card-body"},r.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-381,padding:30,overflowY:"auto"}},r.createElement(b.a,{cols:[{key:"LocationKey",label:"Key",headerStyle:{width:"30%"},rowStyle:{width:"30%"}},{key:"Name",label:"Name",headerStyle:{width:"30%"},rowStyle:{width:"30%"}},{key:"Latitude",label:"Latitude",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Longitude",label:"Longitude",headerStyle:{width:"calc(10%)"},rowStyle:{width:"10%"}},{key:null,label:"",headerStyle:{width:"10%"},rowStyle:{width:"10%"},content:function(t,n,a){return r.createElement(r.Fragment,null,r.createElement("button",{className:"btn btn-sm",onClick:function(n){n.preventDefault(),function(t){g(this,void 0,void 0,(function(){return A(this,(function(n){return[2,$.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Asset/"+e.Asset.ID+"/Location/"+t.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){D()})).fail((function(e){500==e.status&&alert(e.responseJSON.ExceptionMessage)}))]}))}))}(t)}},r.createElement("span",null,r.createElement("i",{className:"fa fa-times"}))))}}],tableClass:"table table-hover",data:a,sortField:s,ascending:u,onSort:function(e){if(e.col==s){var t=y.orderBy(a,[e.col],[u?"desc":"asc"]);d(!u),l(t)}else{t=y.orderBy(a,[e.col],["asc"]);d(!u),l(t),o(e.col)}},onClick:function(e,n){"td"==n.target.localName&&t.push({pathname:homePath+"index.cshtml",search:"?name=Location&LocationID="+e.row.ID,state:{}})},selected:function(){return!1}}))),r.createElement("div",{className:"card-footer"},r.createElement("div",{className:"btn-group mr-2"},r.createElement("button",{className:"btn btn-primary pull-right","data-toggle":"modal","data-target":"#locationModal"},"Add Substation"))),r.createElement("div",{className:"modal",id:"locationModal"},r.createElement("div",{className:"modal-dialog"},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("h4",{className:"modal-title"},"Add Substation to Asset"),r.createElement("button",{type:"button",className:"close","data-dismiss":"modal"},"×")),r.createElement("div",{className:"modal-body"},r.createElement("div",{className:"form-group"},r.createElement("label",null,"Substation"),r.createElement("select",{className:"form-control",value:null!=S?S.ID:"0",onChange:function(e){w(p.find((function(t){return t.ID.toString()==e.target.value})))}},p.map((function(e){return r.createElement("option",{value:e.ID,key:e.ID},e.LocationKey)}))))),r.createElement("div",{className:"modal-footer"},r.createElement("button",{type:"button",className:"btn btn-primary","data-dismiss":"modal",hidden:0==p.length,onClick:function(){return g(this,void 0,void 0,(function(){return A(this,(function(t){return[2,$.ajax({type:"POST",url:homePath+"api/OpenXDA/Asset/"+e.Asset.ID+"/Location/"+S.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){D()})).fail((function(e){500==e.status&&alert(e.responseJSON.ExceptionMessage)}))]}))}))}},"Save"),r.createElement("button",{type:"button",className:"btn btn-danger","data-dismiss":"modal"},"Close"))))))},D=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i};var v=function(e){var t=Object(E.useHistory)(),n=D(r.useState([]),2),a=n[0],l=n[1],i=D(r.useState("AssetKey"),2),s=i[0],o=i[1],c=D(r.useState(!0),2),u=c[0],d=c[1];return r.useEffect((function(){$.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset/"+e.Asset.ID+"/Meters",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){return l(e)}))}),[e.Asset]),r.createElement("div",{className:"card",style:{marginBottom:10}},r.createElement("div",{className:"card-header"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("h4",null,"Meters:")))),r.createElement("div",{className:"card-body"},r.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-381,padding:30,overflowY:"auto"}},r.createElement(b.a,{cols:[{key:"AssetKey",label:"Key",headerStyle:{width:"30%"},rowStyle:{width:"30%"}},{key:"Name",label:"Name",headerStyle:{width:"30%"},rowStyle:{width:"30%"}},{key:"Make",label:"Meters",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Model",label:"Assets",headerStyle:{width:"calc(10%)"},rowStyle:{width:"10%"}}],tableClass:"table table-hover",data:a,sortField:s,ascending:u,onSort:function(e){if(e.col==s){var t=y.orderBy(a,[e.col],[u?"desc":"asc"]);d(!u),l(t)}else{t=y.orderBy(a,[e.col],["asc"]);d(!u),l(t),o(e.col)}},onClick:function(e){t.push({pathname:homePath+"index.cshtml",search:"?name=Meter&MeterID="+e.row.ID,state:{}})},selected:function(){return!1}}))),r.createElement("div",{className:"card-footer"}))},T=n(49),F=n(59),R=function(e,t,n,a){return new(n||(n=Promise))((function(r,l){function i(e){try{o(a.next(e))}catch(e){l(e)}}function s(e){try{o(a.throw(e))}catch(e){l(e)}}function o(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}o((a=a.apply(e,t||[])).next())}))},I=function(e,t){var n,a,r,l,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function s(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,a&&(r=2&l[0]?a.return:l[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,l[1])).done)return r;switch(a=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,a=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!(r=i.trys,(r=r.length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){i.label=l[1];break}if(6===l[0]&&i.label<r[1]){i.label=r[1],r=l;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(l);break}r[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],a=0}finally{n=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}},k=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i};var L=function(e){var t=Object(E.useHistory)(),n=k(r.useState([]),2),a=n[0],l=n[1],i=k(r.useState([]),2),s=i[0],o=i[1],c=k(r.useState({ID:0,AssetRelationshipTypeID:0,Parent:"",Child:""}),2),u=c[0],d=c[1],m=k(r.useState([]),2),p=m[0],f=m[1],h=k(r.useState("AssetKey"),2),y=h[0],g=h[1],A=k(r.useState(!0),2),N=A[0],w=A[1];function D(){sessionStorage.hasOwnProperty("OpenXDA.AssetConnectionTypes")?o(JSON.parse(sessionStorage.getItem("OpenXDA.AssetConnectionTypes"))):$.ajax({type:"GET",url:homePath+"api/OpenXDA/AssetConnectionType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){o(e),sessionStorage.setItem("OpenXDA.AssetConnectionTypes",JSON.stringify(e))})),$.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset/"+e.Asset.ID+"/AssetConnections",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){return l(e)})),$.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset/"+e.Asset.ID+"/AssetNear",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){return f(e)}))}return r.useEffect((function(){D()}),[e.Asset]),r.createElement("div",{className:"card",style:{marginBottom:10}},r.createElement("div",{className:"card-header"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("h4",null,"Meters:")))),r.createElement("div",{className:"card-body"},r.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-381,padding:30,overflowY:"auto"}},r.createElement(b.a,{cols:[{key:"AssetKey",label:"Asset",headerStyle:{width:"47%"},rowStyle:{width:"47%"}},{key:"Name",label:"Relationship",headerStyle:{width:"47%"},rowStyle:{width:"47%"}},{key:null,label:"",headerStyle:{width:"6%"},rowStyle:{width:"6%"},content:function(t,n,a){return r.createElement(r.Fragment,null,r.createElement("button",{className:"btn btn-sm",onClick:function(n){n.preventDefault(),function(t){R(this,void 0,void 0,(function(){return I(this,(function(n){return[2,$.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Asset/"+e.Asset.ID+"/Asset/"+t.AssetID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){D()})).fail((function(e){500==e.status&&alert(e.responseJSON.ExceptionMessage)}))]}))}))}(t)}},r.createElement("span",null,r.createElement("i",{className:"fa fa-times"}))))}}],tableClass:"table table-hover",data:a,sortField:y,ascending:N,onSort:function(e){if(e.col==y){var t=S.a.orderBy(a,[e.col],[N?"desc":"asc"]);w(!N),l(t)}else{t=S.a.orderBy(a,[e.col],["asc"]);w(!N),l(t),g(e.col)}},onClick:function(e){t.push({pathname:homePath+"index.cshtml",search:"?name=Asset&AssetID="+e.row.AssetID,state:{}})},selected:function(){return!1}}))),r.createElement("div",{className:"card-footer"},r.createElement("div",{className:"btn-group mr-2"},r.createElement("button",{className:"btn btn-primary pull-right","data-toggle":"modal","data-target":"#connectionModal"},"Add Connection"))),r.createElement("div",{className:"modal",id:"connectionModal"},r.createElement("div",{className:"modal-dialog"},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("h4",{className:"modal-title"},"Add Asset to Asset Connection"),r.createElement("button",{type:"button",className:"close","data-dismiss":"modal"},"×")),r.createElement("div",{className:"modal-body"},r.createElement("div",{className:"form-group"},r.createElement("label",null,"Asset:"),r.createElement("select",{className:"form-control",value:null!=u?u.Child:"0",onChange:function(e){var t=S.a.clone(u);t.Child=e.target.value,d(t)}},p.map((function(e){return r.createElement("option",{value:e.ID,key:e.ID},e.AssetKey)}))),r.createElement("label",null,"Asset Connection Type:"),r.createElement("select",{className:"form-control",value:null!=u?u.AssetRelationshipTypeID:"0",onChange:function(e){var t=S.a.clone(u);t.AssetRelationshipTypeID=s.find((function(t){return t.ID.toString()==e.target.value})).ID,d(t)}},s.map((function(e){return r.createElement("option",{value:e.ID,key:e.ID},e.Name)}))))),r.createElement("div",{className:"modal-footer"},r.createElement("button",{type:"button",className:"btn btn-primary","data-dismiss":"modal",onClick:function(){$.ajax({type:"POST",url:homePath+"api/OpenXDA/AssetConnection/Add",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({ID:0,AssetRelationshipTypeID:u.AssetRelationshipTypeID,ParentID:e.Asset.ID,ChildID:parseInt(u.Child)}),cache:!1,async:!0}).done((function(e){D()})).fail((function(e){500==e.status&&alert(e.responseJSON.ExceptionMessage)}))}},"Save"),r.createElement("button",{type:"button",className:"btn btn-danger","data-dismiss":"modal"},"Close"))))))},x=n(60),C=n(38),V=n(39),B=n.n(V),P=n(65),O=n(35),j=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i};var U=function(e){var t=j(r.useState([]),2),n=t[0],a=t[1];return r.useEffect((function(){!function(){if(0==e.Segments.length)return;if(e.Segments.length>1&&0==e.Connections.length)return;var t=[];(t=(t=y.uniq(e.Connections.map((function(e){return e.BusNumber})).filter((function(t){return e.Connections.filter((function(e){return e.BusNumber==t})).length>1}))).map((function(e,t){return{Bus:e,IsEnd:!1}}))).concat(e.Segments.filter((function(e){return e.IsEnd})).map((function(t){return e.Connections.filter((function(e){return e.BusNumber==t.FromBus})).length>0?t.ToBus:t.FromBus})).map((function(e,t){return{Bus:e,IsEnd:!0}})))).forEach((function(t,n){if(t.ConnectedSegments=[],t.ProcessedSegments=[],t.LocationID=-1,t.ConnectedSegments=e.Segments.filter((function(e){return e.FromBus==t.Bus||e.ToBus==t.Bus})).map((function(e){return e.AssetKey})),1==t.ConnectedSegments.length){var a=e.Segments.find((function(e){return e.FromBus==t.Bus}));t.LocationID=null!=a?a.LocationFromID:e.Segments.find((function(e){return e.ToBus==t.Bus})).LocationToID}}));var n=t.find((function(e){return e.ConnectedSegments.length>e.ProcessedSegments.length})),a=[],r=function(){var r={startBus:n.Bus,startStationID:n.LocationID,Segments:[],endBus:-1,endStationID:-1,startTap:!n.IsEnd,endTap:!0,NameFrom:"",NameTo:""},l=n.ConnectedSegments.find((function(e){return-1==n.ProcessedSegments.findIndex((function(t){return t==e}))})),i=e.Segments.find((function(e){return e.AssetKey==l})).FromBus;for(i==n.Bus&&(i=e.Segments.find((function(e){return e.AssetKey==l})).ToBus),r.Segments.push(l),n.ProcessedSegments.push(l);!(t.findIndex((function(e){return e.Bus==i}))>-1);){var s=e.Connections.find((function(e){return(e.ChildKey==l||e.ParentKey==l)&&e.BusNumber==i}));l=s.ChildKey==l?s.ParentKey:s.ChildKey,(i=e.Segments.find((function(e){return e.AssetKey==l})).ToBus)==s.BusNumber&&(i=e.Segments.find((function(e){return e.AssetKey==l})).FromBus),r.Segments.push(l)}r.endBus=i,r.endStationID=t.find((function(e){return e.Bus==i})).LocationID,r.endTap=!t.find((function(e){return e.Bus==i})).IsEnd,a.push(r),t.find((function(e){return e.Bus==i})).ProcessedSegments.push(l),n=t.find((function(e){return e.ConnectedSegments.length>e.ProcessedSegments.length}))};for(;null!=n;)r();e.SetSections(a)}()}),[e.Segments,e.Connections]),r.useEffect((function(){var t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset/"+e.LineID+"/Locations",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){return a(e)}));return function(){null!=t&&null!=t.abort&&t.abort()}}),[e.LineID]),r.createElement(r.Fragment,null,r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("div",{className:"alert alert-info",role:"alert"},r.createElement("h4",{className:"alert-heading"},"Selecting Line Sections"),r.createElement("p",null,"Note that only Substations associated with this Line are available for endpoints."),r.createElement("hr",null),r.createElement("p",null,"If an Endpoint is left blank the system can only perform single ended Fault Location algorithms towards that end of the Line."),r.createElement("hr",null),r.createElement("p",null,"Removing a Section will remove all line segments that were found in FAWG for that Section.")))),r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("div",{style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540,overflowY:"auto"}},r.createElement(B.a,{cols:[{key:"startBus",label:"Start",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t){return t.startTap?"Tap (Bus "+t.startBus+")":r.createElement(O.Select,{Label:"Substation (Bus "+t.startBus+" )",Field:"startStationID",Record:t,EmptyLabel:"N/A",Setter:function(a){var r=y.cloneDeep(e.Sections),l=e.Sections.findIndex((function(e){return e.Segments[0]==t.Segments[0]}));null==a.startStationID?(r[l].startStationID=-1,r[l].NameFrom=""):(r[l].startStationID=parseInt(a.startStationID),r[l].NameFrom=n.find((function(e){return e.ID==r[l].startStationID})).LocationKey),e.SetSections(r)},Options:n.map((function(e){return{Value:e.ID.toString(),Label:e.LocationKey}})),EmptyOption:!0})}},{key:"endBus",label:"End",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t){return t.endTap?"Tap (Bus "+t.endBus+")":r.createElement(O.Select,{Label:"Substation (Bus "+t.endBus+" )",Field:"endStationID",Record:t,EmptyLabel:"N / A",Setter:function(a){var r=y.cloneDeep(e.Sections),l=e.Sections.findIndex((function(e){return e.Segments[0]==t.Segments[0]}));null==a.endStationID?(r[l].endStationID=-1,r[l].NameTo=""):(r[l].endStationID=parseInt(a.endStationID),r[l].NameTo=n.find((function(e){return e.ID==r[l].endStationID})).LocationKey),e.SetSections(r)},Options:n.map((function(e){return{Value:e.ID.toString(),Label:e.LocationKey}})),EmptyOption:!0})}},{key:"Segments",label:"# of Segments",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return e.Segments.length}},{key:"endStationID",label:"Length (miles)",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t){return t.Segments.map((function(t){return e.Segments.find((function(e){return e.AssetKey==t})).Length})).reduce((function(e,t){return e+t}))}},{key:null,label:"",headerStyle:{width:40,paddingLeft:0,paddingRight:5},rowStyle:{width:40,paddingLeft:0,paddingRight:5},content:function(t){return r.createElement(r.Fragment,null,r.createElement("button",{className:"btn btn-sm",onClick:function(n){!function(t){var n=e.Sections.findIndex((function(e){return e.Segments[0]==t}));if(-1!=n){var a=e.Sections[n].startBus,r=e.Sections[n].endBus,l=y.cloneDeep(e.Sections);l.splice(n,1),l.forEach((function(e){e.endBus!=a&&e.endBus!=r||(e.endTap=l.filter((function(t){return t.endBus==e.endBus||t.startBus==e.endBus})).length>1),e.startBus!=a&&e.startBus!=r||(e.startTap=l.filter((function(t){return t.endBus==e.startBus||t.startBus==e.startBus})).length>1)})),e.SetSections(l)}}(t.Segments[0])}},r.createElement("span",null,P.TrashCan)))}}],tableClass:"table table-hover",data:e.Sections,sortField:"startBus",ascending:!0,onSort:function(e){},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})))),r.createElement("div",{className:"row"},r.createElement("div",{className:"col"})))},X=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i};function M(e){var t=Math.sqrt(e.Segment.R1*e.Segment.R1+e.Segment.X1*e.Segment.X1),n=Math.sqrt(e.Segment.R0*e.Segment.R0+e.Segment.X0*e.Segment.X0),a=180*Math.acos(e.Segment.R0/n)/Math.PI,l=180*Math.acos(e.Segment.R1/t)/Math.PI,i=(2*e.Segment.X1+e.Segment.X0)/3,s=(2*e.Segment.R1+e.Segment.R0)/3,o=Math.sqrt(s*s+i*i),c=180*Math.acos(s/o)/Math.PI;return r.createElement("tr",null,r.createElement("td",{style:{verticalAlign:"middle"}},"Segment ",e.index+1),r.createElement("td",null,r.createElement(O.Input,{Label:"Length (miles)",Record:e.Segment,Field:"Length",Type:"number",Setter:e.edit,Valid:function(){return!0}})),r.createElement("td",{style:{verticalAlign:"middle"}},e.Segment.FromBus),r.createElement("td",{style:{verticalAlign:"middle"}},e.Segment.ToBus),r.createElement("td",{style:{verticalAlign:"middle"}},n.toFixed(2)),r.createElement("td",{style:{verticalAlign:"middle"}},a.toFixed(2)),r.createElement("td",null,r.createElement(O.Input,{Label:"R0 (pu)",Record:e.Segment,Field:"R0",Type:"number",Setter:e.edit,Valid:function(){return!0}})),r.createElement("td",null,r.createElement(O.Input,{Label:"X0 (pu)",Record:e.Segment,Field:"X0",Type:"number",Setter:e.edit,Valid:function(){return!0}})),r.createElement("td",{style:{verticalAlign:"middle"}},t.toFixed(2)),r.createElement("td",{style:{verticalAlign:"middle"}},l.toFixed(2)),r.createElement("td",null,r.createElement(O.Input,{Label:"R1 (pu)",Record:e.Segment,Field:"R1",Type:"number",Setter:e.edit,Valid:function(){return!0}})),r.createElement("td",null,r.createElement(O.Input,{Label:"X1 (pu)",Record:e.Segment,Field:"X1",Type:"number",Setter:e.edit,Valid:function(){return!0}})),r.createElement("td",{style:{verticalAlign:"middle"}},o.toFixed(2)),r.createElement("td",{style:{verticalAlign:"middle"}},c.toFixed(2)),r.createElement("td",{style:{verticalAlign:"middle"}},s.toFixed(2)),r.createElement("td",{style:{verticalAlign:"middle"}},i.toFixed(2)),r.createElement("td",null,r.createElement(O.Input,{Label:"Thermal Rating",Record:e.Segment,Field:"ThermalRating",Type:"number",Setter:e.edit,Valid:function(){return!0}})),r.createElement("td",{style:{width:40}},r.createElement("button",{className:"btn btn-sm",onClick:function(t){return e.remove(e.Segment.AssetKey)}},r.createElement("span",null,P.TrashCan))))}var K=function(e){var t=X(r.useState([]),2),n=t[0],a=t[1];function l(t){var n=y.cloneDeep(e.Section),a=n.Segments.findIndex((function(e){return e==t}));-1!=a&&(n.Segments.splice(a,1),e.SetSection(n))}function i(t){var n=e.Segments.findIndex((function(e){return e.AssetKey==t.AssetKey}));if(-1!=n){var a=y.cloneDeep(e.Segments);a[n].R0=t.R0,a[n].R1=t.R1,a[n].X0=t.X0,a[n].X1=t.X1,a[n].Length=t.Length,a[n].ThermalRating=t.ThermalRating,e.SetSegments(a)}}return r.useEffect((function(){!function(){if(0==e.Segments.length)return;var t=[];e.Section.Segments.forEach((function(n){var a=y.cloneDeep(e.Segments.find((function(e){return e.AssetKey==n}))),r=e.Section.startBus;t.length>0&&(r=t[t.length-1].ToBus),r!=a.FromBus&&(a.ToBus=a.FromBus),a.FromBus=r,t.push(a)})),a(t)}()}),[e.Segments,e.Section]),r.createElement(r.Fragment,null,r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("div",{className:"alert alert-primary",role:"alert"},r.createElement("h4",{className:"alert-heading"},"Line Section ",e.Section.startTap?"Tap":e.Section.NameFrom," (Bus ",e.Section.startBus,") to ",e.Section.endTap?"Tap":e.Section.NameTo," (Bus ",e.Section.endBus,")")))),r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("div",{style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540,overflowY:"auto"}},r.createElement("table",{className:"table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",{style:{width:"auto"}},"Segment"),r.createElement("th",{style:{width:"auto"}},"Length"),r.createElement("th",{colSpan:2,style:{width:"auto"}},"FAWG Bus"),r.createElement("th",{colSpan:4,style:{width:"auto"}},"Zero Seq (Ohm/deg)"),r.createElement("th",{colSpan:4,style:{width:"auto"}},"Positive Seq (Ohm/deg)"),r.createElement("th",{colSpan:4,style:{width:"auto"}},"Loop (LG) (Ohm/deg)"),r.createElement("th",{style:{width:"auto"}},"Thermal Rating"),r.createElement("th",{style:{width:40}})),r.createElement("tr",null,r.createElement("th",{style:{width:"auto"}}),r.createElement("th",{style:{width:"auto"}}),r.createElement("th",{style:{width:"auto"}},"From"),r.createElement("th",{style:{width:"auto"}},"To"),r.createElement("th",{style:{width:"auto"}},"Z0"),r.createElement("th",{style:{width:"auto"}},"<"),r.createElement("th",{style:{width:"auto"}},"R0"),r.createElement("th",{style:{width:"auto"}},"X0"),r.createElement("th",{style:{width:"auto"}},"Z1"),r.createElement("th",{style:{width:"auto"}},"<"),r.createElement("th",{style:{width:"auto"}},"R1"),r.createElement("th",{style:{width:"auto"}},"X1"),r.createElement("th",{style:{width:"auto"}},"Zs"),r.createElement("th",{style:{width:"auto"}},"<"),r.createElement("th",{style:{width:"auto"}},"Rs"),r.createElement("th",{style:{width:"auto"}},"Xs"),r.createElement("th",{style:{width:"auto"}}),r.createElement("th",{style:{width:40}}))),r.createElement("tbody",null,n.map((function(e,t){return r.createElement(M,{key:t,Segment:e,remove:l,index:t,edit:i})}))))))),r.createElement("div",{className:"row"},r.createElement("div",{className:"col"})))},G=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i};var H=function(e){var t=G(r.useState([]),2),n=t[0],a=t[1],l=G(r.useState([]),2),i=l[0],s=l[1],o=G(r.useState([]),2),c=o[0],u=o[1],d=G(r.useState("SelectSection"),2),m=d[0],p=d[1],f=G(r.useState(0),2),h=f[0],S=f[1],b=G(r.useState(!1),2),E=b[0],g=b[1],A=G(r.useState(!1),2),N=A[0],w=A[1],D=G(r.useState(!1),2),v=D[0],T=D[1],F=G(r.useState([]),2),R=F[0],I=F[1],k=G(r.useState(!1),2),L=k[0],x=k[1];return r.useEffect((function(){$.ajax({type:"GET",url:homePath+"api/ExternalDB/FAWG/LineSegment/UpdateSegments/"+e.LineID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){a(e.segments),s(e.connections)})).fail((function(e){x(!0),500==e.status&&console.log(e.responseJSON.ExceptionMessage)}))}),[]),r.useEffect((function(){var e=[];0==c.length&&e.push("At least one Section of the Line needs to be pulled from FAWG."),I(e)}),[c]),r.createElement(r.Fragment,null,r.createElement(C.Modal,{Title:"FAWG Line Segment Update",ShowX:!0,Show:!0,Size:"xlg",CancelText:"Back",DisableCancel:"SelectSection"==m,ConfirmBtnClass:"btn-success",ConfirmText:"EditSection"==m&&h==n.length-1?"Confirm":"Next",CallBack:function(e,t){t||g(!0),e&&t&&("SelectSection"==m&&(S(0),p("EditSection")),"EditSection"==m&&h<c.length-1&&S((function(e){return e+1})),"EditSection"==m&&h==c.length-1&&w(!0)),!e&&t&&("EditSection"==m&&0==h&&p("SelectSection"),"EditSection"==m&&h>0&&S((function(e){return e-1})))},DisableConfirm:R.length>0,ConfirmShowToolTip:R.length>0,ConfirmToolTipContent:R.map((function(e,t){return r.createElement("p",{key:t},r.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," ",e," ")}))},"SelectSection"==m?r.createElement(U,{Segments:n,Connections:i,Sections:c,SetSections:u,AddSection:function(){},LineID:e.LineID}):null,"EditSection"==m?r.createElement(K,{Segments:n,Section:c[h],SetSection:function(e){return u((function(t){var n=y.cloneDeep(t);return n[h]=e,n}))},SetSegments:a}):null),r.createElement(C.Warning,{Title:"Cancel FAWG update",Message:"This will cancel the update and keep the Segments currently in the openXDA",Show:E,CallBack:function(t){g(!1),t&&e.closeWizard()}}),r.createElement(C.Warning,{Title:"Confirm FAWG update",Message:"This will override any current LineSegments and save the Configuration to openXDA.",Show:N,CallBack:function(t){w(!1),t&&function(){T(!0);var t=[],a=[];c.forEach((function(e,r){if(1==e.Segments.length){(l=n.find((function(t){return t.AssetKey==e.Segments[0]}))).LocationFromID=e.startStationID,l.LocationToID=e.endStationID,l.IsEnd=!e.endTap||!e.startTap,t.push(l)}else{var l;(l=n.find((function(t){return t.AssetKey==e.Segments[0]}))).LocationFromID=e.startStationID,l.LocationToID=-1,l.IsEnd=!e.startTap,t.push(l);for(var i=function(r){(l=n.find((function(t){return t.AssetKey==e.Segments[r]}))).LocationFromID=-1,l.LocationToID=-1,l.IsEnd=!1,t.push(l),a.push({ChildKey:l.AssetKey,ParentKey:t[t.length-2].AssetKey,BusNumber:0})},s=1;s<e.Segments.length-1;s++)i(s);(l=n.find((function(t){return t.AssetKey==e.Segments[e.Segments.length-1]}))).LocationFromID=-1,l.LocationToID=e.endStationID,l.IsEnd=!e.endTap,t.push(l),a.push({ChildKey:l.AssetKey,ParentKey:t[t.length-2].AssetKey,BusNumber:0})}e.startTap&&c.filter((function(t,n){return(t.startBus==e.startBus||t.endBus==e.startBus)&&r!=n})).map((function(t){return t.startBus==e.startBus?t.Segments[0]:t.Segments[t.Segments.length-1]})).filter((function(e){return t.indexOf((function(t){return t.Assetkey==e}))>-1})).forEach((function(t){a.push({ChildKey:t,ParentKey:e.Segments[0],BusNumber:0})}));e.endTap&&c.filter((function(t,n){return(t.startBus==e.endBus||t.endBus==e.endBus)&&r!=n})).map((function(t){return t.startBus==e.endBus?t.Segments[0]:t.Segments[t.Segments.length-1]})).filter((function(e){return t.indexOf((function(t){return t.Assetkey==e}))>-1})).forEach((function(t){a.push({ChildKey:t,ParentKey:e.Segments[e.Segments.length-1],BusNumber:0})}))})),$.ajax({type:"POST",url:homePath+"api/ExternalDB/FAWG/LineSegment/ConfirmSegments/"+e.LineID,contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({data:{segments:t,connections:a}}),cache:!1,async:!0}).done((function(){T(!1),e.closeWizard()})).fail((function(e){x(!0),500==e.status&&console.log(e.responseJSON.ExceptionMessage)}))}()}}),r.createElement(C.LoadingScreen,{Show:v}),r.createElement(C.Warning,{Title:"Error",Message:"An error occurred while updating the Line Segment Configuration.",Show:L,CallBack:function(t){x(!1),e.closeWizard()}}))},q=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i};var _=function(e){var t=q(r.useState([]),2),n=t[0],a=t[1],s=q(r.useState(!1),2),o=s[0],c=s[1],u=q(r.useState(!1),2),d=u[0],p=u[1],f=q(r.useState(!1),2),h=f[0],y=f[1],S=q(r.useState(!1),2),b=S[0],E=S[1],g=q(r.useState(l.a.getNewAsset("LineSegment")),2),A=g[0],N=g[1],w=q(r.useState("New"),2),D=w[0],v=w[1],T=q(r.useState([]),2),F=T[0],R=T[1],I=q(r.useState([]),2),k=I[0],L=I[1];function x(){$.ajax({type:"GET",url:homePath+"api/OpenXDA/Line/"+e.ID+"/LineSegments?_="+moment(),contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){a(e)})),Object(i.b)().done((function(e){Object(i.c)().done((function(t){var n=t.filter((function(e){return"LineSegment"==e.Name}));R(n),L(e.filter((function(e){return e.AssetTypeID==n[0].ID})))}))}))}return r.useEffect((function(){x()}),[e.ID]),r.createElement(r.Fragment,null,r.createElement("div",{className:"card",style:{marginBottom:10}},r.createElement("div",{className:"card-header"},r.createElement("h4",null,"Line Segments:")),r.createElement("div",{className:"card-body"},r.createElement("div",{style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540,overflowY:"auto"}},r.createElement(B.a,{cols:[{key:"AssetName",label:"Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Length",label:"Length (miles)",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"R1",label:"R1",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"X1",label:"X1",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"R0",label:"R0",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"X0",label:"X0",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:80,paddingLeft:0,paddingRight:5},rowStyle:{width:80,paddingLeft:0,paddingRight:5},content:function(e){return r.createElement(r.Fragment,null," ",r.createElement("button",{className:"btn btn-sm",onClick:function(t){c(!0),N(e),v("Edit")}},r.createElement("span",null,P.Pencil)),r.createElement("button",{className:"btn btn-sm",onClick:function(t){N(e),y(!0)}},r.createElement("span",null,P.TrashCan)))}}],tableClass:"table table-hover",data:n,sortField:"AssetName",ascending:!0,onSort:function(e){},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}}))),r.createElement("div",{className:"card-footer"},r.createElement("div",{className:"btn-group mr-2"},r.createElement("button",{className:"btn btn-primary",onClick:function(){return c(!0)}},"Add Segement")),r.createElement("div",{className:"btn-group mr-2"},r.createElement("button",{className:"btn btn-primary",onClick:function(e){return p(!0)}},"Update from FAWG")))),r.createElement(C.Warning,{Show:h,Title:"Remove this Segment From the Line",Message:"This will permanently remove the Segment.",CallBack:function(t){t&&0!=A.ID&&(E(!0),$.ajax({type:"GET",url:homePath+"api/OpenXDA/LineSegment/"+A.ID+"/Disconnect/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){E(!1),x()}))),y(!1)}}),r.createElement(C.LoadingScreen,{Show:b}),r.createElement(C.Modal,{Show:o,Title:"New"==D?"Add New LineSegment to Line":"Edit "+A.AssetKey+" for Meter",Size:"lg",ShowX:!0,CallBack:function(t){t&&"Edit"==D&&$.ajax({type:"Patch",url:homePath+"api/OpenXDA/LineSegment/Update",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(A),cache:!1,async:!0}).done((function(e){return x()})),t&&"New"==D&&0==A.ID&&$.ajax({type:"POST",url:homePath+"api/OpenXDA/LineSegment/New/Line/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Asset:A}),cache:!1,async:!0}).done((function(){sessionStorage.clear(),x(),N(l.a.getNewAsset("LineSegment"))})).fail((function(e){500==e.status&&alert(e.responseJSON.ExceptionMessage)})),t&&"New"==D&&0!=A.ID&&$.ajax({type:"GET",url:homePath+"api/OpenXDA/LineSegment/"+A.ID+"/AddToLine/"+e.ID,contentType:"application/json; charset=utf-8",data:JSON.stringify(""),dataType:"json",cache:!0,async:!0}).done((function(e){x(),N(l.a.getNewAsset("LineSegment"))})),N(l.a.getNewAsset("LineSegment")),c(!1)},CancelText:"Close",ConfirmText:"Save",DisableConfirm:l.a.AssetError(A,"LineSegment").length>0,ConfirmShowToolTip:l.a.AssetError(A,"LineSegment").length>0,ConfirmToolTipContent:l.a.AssetError(A,"LineSegment").map((function(e,t){return r.createElement("p",{key:e}," ",r.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," ",t)}))},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement(l.a.AssetAttributeFields,{Asset:A,NewEdit:D,AssetTypes:F,AllAssets:k,UpdateState:N,GetDifferentAsset:function(e){if("Edit"!=D){var t=k.find((function(t){return t.ID==e})),n=F.find((function(e){return e.ID==t.AssetTypeID}));Object(i.d)(e,n.Name).then((function(e){return N(e)}))}},HideAssetType:!0,HideSelectAsset:!1})),r.createElement("div",{className:"col"},r.createElement(m.a,{Asset:A,NewEdit:D,UpdateState:N})))),d?r.createElement(H,{LineID:e.ID,closeWizard:function(){return p(!1)}}):null)},J=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i};t.default=function(e){var t=Object(E.useHistory)(),n=J(r.useState(null),2),a=n[0],l=n[1],s=J(r.useState(sessionStorage.hasOwnProperty("Asset.Tab")?JSON.parse(sessionStorage.getItem("Asset.Tab")):"notes"),2),o=s[0],c=s[1],u=J(r.useState(null),2),d=u[0],m=u[1];function p(e){sessionStorage.setItem("Asset.Tab",JSON.stringify(e)),c(e)}return r.useEffect((function(){if(null==e.AssetID)return function(){};var t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset/One/"+e.AssetID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){l(e),function(e){Object(i.c)().done((function(t){var n=t.find((function(t){return t.ID==e.AssetTypeID}));m(n.Name)}))}(e)})),function(){null!=t.abort&&t.abort()}}),[e.AssetID]),null==a?null:r.createElement("div",{style:{width:"100%",height:window.innerHeight-63,maxHeight:window.innerHeight-63,overflow:"hidden",padding:15}},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement("h2",null,null!=a?a.AssetKey:"")),r.createElement("div",{className:"col"},r.createElement("button",{className:"btn btn-danger pull-right",hidden:null==a,onClick:function(){return function(){if(confirm("This will delete the Asset Permanently"))return $.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Asset/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(a),dataType:"json",cache:!0,async:!0}).done((function(e){sessionStorage.clear(),t.push({pathname:homePath+"index.cshtml",search:"?name=Assets",state:{}})}))}()}},"Delete Asset (Permanent)"))),r.createElement("hr",null),r.createElement("ul",{className:"nav nav-tabs"},r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("notes"==o?" active":""),onClick:function(){return p("notes")},"data-toggle":"tab",href:"#notes"},"Notes")),r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("assetInfo"==o?" active":""),onClick:function(){return p("assetInfo")},"data-toggle":"tab",href:"#assetInfo"},"Asset Info")),r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("additionalFields"==o?" active":""),onClick:function(){return p("additionalFields")},"data-toggle":"tab",href:"#additionalFields"},"Additional Fields")),r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("substations"==o?" active":""),onClick:function(){return p("substations")},"data-toggle":"tab",href:"#substations"},"Substations")),r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("meters"==o?" active":""),onClick:function(){return p("meters")},"data-toggle":"tab",href:"#meters"},"Meters")),r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("connections"==o?" active":""),onClick:function(){return p("connections")},"data-toggle":"tab",href:"#connections"},"Connections")),"Line"==d?r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("Segments"==o?" active":""),onClick:function(){return p("Segments")},"data-toggle":"tab",href:"#Segments"},"Line Segments")):null,"Breaker"==d||"CapacitorBank"==d||"Line"==d||"Transformer"==d||"Bus"==d?r.createElement("li",{className:"nav-item"},r.createElement("a",{className:"nav-link"+("extDB"==o?" active":""),onClick:function(){return p("extDB")},"data-toggle":"tab",href:"#extDB"},"External DB")):null),r.createElement("div",{className:"tab-content",style:{maxHeight:window.innerHeight-235,overflow:"hidden"}},r.createElement("div",{className:"tab-pane "+("notes"==o?" active":"fade"),id:"notes"},r.createElement(F.a,{ID:a.ID,Type:"Asset"})),r.createElement("div",{className:"tab-pane "+("assetInfo"==o?" active":"fade"),id:"assetInfo"},r.createElement(h,{Asset:a,StateSetter:l})),r.createElement("div",{className:"tab-pane "+("additionalFields"==o?" active":"fade"),id:"additionalFields"},r.createElement(x.a,{ID:a.ID,Type:null==d?"Asset":d,Tab:o})),r.createElement("div",{className:"tab-pane "+("substations"==o?" active":"fade"),id:"substations"},r.createElement(w,{Asset:a})),r.createElement("div",{className:"tab-pane "+("meters"==o?" active":"fade"),id:"meters"},r.createElement(v,{Asset:a})),r.createElement("div",{className:"tab-pane "+("connections"==o?" active":"fade"),id:"connections"},r.createElement(L,{Asset:a})),r.createElement("div",{className:"tab-pane "+("extDB"==o?" active":"fade"),id:"extDB"},r.createElement(T.a,{ID:a.ID,Type:null==d?"Asset":d,Tab:o})),r.createElement("div",{className:"tab-pane "+("Segments"==o?" active":"fade"),id:"Segments"},r.createElement(_,{ID:a.ID}))))}},37:function(e,t,n){"use strict";var a,r=n(0),l=n(31),i=(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,null==this.props.Label?this.props.Field:this.props.Label),r.createElement("input",{className:this.props.Valid(this.props.Field)?"form-control":"form-control is-invalid",onChange:function(t){var n=l.clone(e.props.Record);""!=t.target.value?n[e.props.Field]=t.target.value:n[e.props.Field]=null,e.props.Setter(n)},value:null==this.props.Record[this.props.Field]?"":this.props.Record[this.props.Field].toString(),disabled:null!=this.props.Disabled&&this.props.Disabled}),r.createElement("div",{className:"invalid-feedback"},null==this.props.Feedback?this.props.Field+" is a required field.":this.props.Feedback))},t}(r.Component);t.a=s},41:function(e,t,n){"use strict";var a,r=n(0),l=n(31),i=n.n(l),s=(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-check"},r.createElement("input",{type:"checkbox",className:"form-check-input",style:{zIndex:1},onChange:function(t){var n=i.a.clone(e.props.Record);n[e.props.Field]=t.target.checked,e.props.Setter(n)},value:this.props.Record[this.props.Field]?"on":"off",checked:!!this.props.Record[this.props.Field],disabled:null!=this.props.Disabled&&this.props.Disabled}),r.createElement("label",{className:"form-check-label"},null==this.props.Label?this.props.Field:this.props.Label))},t}(r.Component);t.a=o},43:function(e,t,n){"use strict";n.d(t,"e",(function(){return o})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return u})),n.d(t,"d",(function(){return m})),n.d(t,"a",(function(){return p}));var a=function(e,t,n,a){return new(n||(n=Promise))((function(r,l){function i(e){try{o(a.next(e))}catch(e){l(e)}}function s(e){try{o(a.throw(e))}catch(e){l(e)}}function o(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}o((a=a.apply(e,t||[])).next())}))},r=function(e,t){var n,a,r,l,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function s(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,a&&(r=2&l[0]?a.return:l[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,l[1])).done)return r;switch(a=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,a=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!(r=i.trys,(r=r.length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){i.label=l[1];break}if(6===l[0]&&i.label<r[1]){i.label=r[1],r=l;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(l);break}r[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],a=0}finally{n=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}};function l(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+e.ID+"/SpareBreaker",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function i(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+e.ID+"/Location",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function s(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/SpareBreakers/Substation/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function o(e){return a(this,void 0,void 0,(function(){var t;return r(this,(function(n){switch(n.label){case 0:return[4,i(e)];case 1:return null==(t=n.sent())?[2,[]]:[4,s(t)];case 2:return[2,n.sent()]}}))}))}function c(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/AssetType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})}function u(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0})}function d(e,t){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/"+t+"/One/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})}function m(e,t){return a(this,void 0,void 0,(function(){var n,a,i,s,o;return r(this,(function(r){switch(r.label){case 0:return[4,d(e,t)];case 1:return(n=r.sent()).AssetType=t,n.Channels=[],"Breaker"!=t?[3,5]:[4,(u=n,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+u.ID+"/EDNAPoint",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise())];case 2:return a=r.sent(),n.EDNAPoint=null!=a?a.Point:null,[4,l(n)];case 3:return[4,r.sent()];case 4:return i=r.sent(),n.SpareBreakerID=null!=i?i.ID:null,[3,7];case 5:return"Line"!=t?[3,7]:(s=n,o="Detail",[4,(c=n,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Line/"+c.ID+"/LineSegment",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise())]);case 6:s[o]=r.sent(),r.label=7;case 7:return[2,n]}var c,u}))}))}function p(e){return $.ajax({type:"POST",url:homePath+"api/OpenXDA/Asset/Edit",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Asset:e}),cache:!1,async:!0}).promise()}},45:function(e,t,n){"use strict";var a,r=n(0),l=n(31),i=(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){return r.createElement("span",{style:{width:10,height:10,margin:3},className:"fa fa-angle-"+(e.ascending?"up":"down")})},o=function(e){function t(t){return e.call(this,t)||this}return i(t,e),t.prototype.componentDidUpdate=function(e,t){},t.prototype.render=function(){var e=this.generateRows(),t=this.generateHeaders();return r.createElement("table",{className:null!=this.props.tableClass?this.props.tableClass:"",style:this.props.tableStyle},r.createElement("thead",{style:this.props.theadStyle},t),r.createElement("tbody",{style:this.props.tbodyStyle},e))},t.prototype.generateHeaders=function(){var e=this;if(0==this.props.cols.length)return null;var t=this.props.cols.map((function(t,n){var a;return null==(a=null!=t.headerStyle?t.headerStyle:{}).cursor&&(a.cursor="pointer"),r.createElement("th",{key:n,style:a,onClick:function(n){return e.handleSort({col:t.key,ascending:e.props.ascending},n)}},t.label,e.props.sortField==t.key?r.createElement(s,{ascending:e.props.ascending}):null)}));return r.createElement("tr",null,t)},t.prototype.generateRows=function(){var e=this;return 0==this.props.data.length?null:this.props.data.map((function(t,n){var a,i=e.props.cols.map((function(a){var i=l.clone(a.rowStyle);return r.createElement("td",{key:n.toString()+t[a.key]+a.key,style:i,onClick:e.handleClick.bind(e,{col:a.key,row:t,data:t[a.key]})},null!=a.content?a.content(t,a.key,i):t[a.key])}));return null==(a=null!=e.props.rowStyle?l.clone(e.props.rowStyle):{}).cursor&&(a.cursor="pointer"),e.props.selected(t)&&(a.backgroundColor="yellow"),r.createElement("tr",{style:a,key:n.toString()},i)}))},t.prototype.handleClick=function(e,t){this.props.onClick(e,t)},t.prototype.handleSort=function(e,t){this.props.onSort(e)},t}(r.Component);t.a=o},49:function(e,t,n){"use strict";var a=n(0),r=n(31),l=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i};function i(e){return a.createElement("tr",null,a.createElement("td",null,e.ExternalDB),a.createElement("td",null,null==e.updated?"N/A":moment(e.updated).format("MM/DD/YYYY")),a.createElement("td",null,a.createElement("button",{className:"btn btn-primary",onClick:function(t){return e.Update(e.ExternalDB)}},"Update ",e.ExternalDB)))}function s(e){var t=r.clone(e.Values),n=t.find((function(t){return t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField}));return a.createElement("tr",null,-1==e.ParentTableID?a.createElement("td",null,e.Field.DisplayName):null,a.createElement("td",null,e.Field.FieldName),a.createElement("td",null,null==e.Field.PreviousValue?"":e.Field.PreviousValue),e.Field.Error?a.createElement("td",null,e.Field.Message):a.createElement("td",null,a.createElement("input",{className:e.Field.Changed?"form-control is-invalid":"form-control",onChange:function(a){""!=a.target.value?n.Value=a.target.value:n.Value=null,n.Changed=!0,e.Setter(t)},value:null==n.Value?"":n.Value.toString()})),a.createElement("td",null,e.Field.Error?a.createElement("span",null,a.createElement("i",{className:"fa fa-exclamation-triangle"})):null),a.createElement("td",null,a.createElement("button",{className:"btn btn-sm",onClick:function(n){return t=t.filter((function(t){return!(t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField)})),void e.Setter(t)}},a.createElement("span",null,a.createElement("i",{className:"fa fa-times"})))))}t.a=function(e){var t=l(a.useState([]),2),n=t[0],r=t[1],o=l(a.useState([]),2),c=o[0],u=o[1],d=l(a.useState(!1),2),m=d[0],p=d[1],f=l(a.useState(""),2),h=f[0],y=f[1];function S(){var t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/"+e.Type+"/extDataBases",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){r(e)})),function(){null!=t.abort&&t.abort()}}function b(){u([]),p(!1)}function E(e){e.length<1?b():u(e)}return a.useEffect((function(){return p(!1),u([]),S()}),[e.ID,e.Type,e.Tab]),a.createElement("div",{className:"card",style:{marginBottom:10}},a.createElement("div",{className:"card-header"},a.createElement("h4",null," External Data Base Connections:")),a.createElement("div",{className:"card-body"},a.createElement("div",{style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540,overflowY:"auto"}},m?a.createElement("table",{id:"fields",className:"table"},a.createElement("thead",null,a.createElement("tr",null,-1==e.ID?a.createElement("th",null," ",e.Type," "):null,a.createElement("th",null,"Field"),a.createElement("th",{style:{width:300}},"Previous Value"),a.createElement("th",{style:{width:300}},"Updated Value"),a.createElement("th",{style:{width:30}}),a.createElement("th",{style:{width:30}}))),a.createElement("tbody",null,c.map((function(t,n){return a.createElement(s,{key:n,ParentTableID:e.ID,Field:t,Values:c,Setter:E})})))):a.createElement("table",{id:"overview",className:"table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"External DB"),a.createElement("th",{style:{width:250}},"Last Updated"),a.createElement("th",{style:{width:300}}))),a.createElement("tbody",null,n.map((function(t,n){return a.createElement(i,{key:n,ParentTableID:e.ID,ExternalDB:t.name,updated:t.lastupdate,Update:function(t){var n;n=t,$.ajax({type:"GET",url:homePath+"api/ExternalDB/"+n+"/"+e.Type+"/Update/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){u(e),p(!0),y(n),e.length<1&&b()}))}})})))))),m?a.createElement("div",{className:"card-footer"},a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-primary",onClick:function(){var t=$.ajax({type:"POST",url:homePath+"api/ExternalDB/"+h+"/"+e.Type+"/ConfirmUpdate",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({data:c}),cache:!1,async:!0});return u([]),p(!1),S(),function(){null!=t.abort&&t.abort()}}},"Save Changes")),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-default",onClick:b},"Cancel"))):null)}},53:function(e,t,n){"use strict";var a=n(0),r=n(31),l=n(33),i=n(37),s=n(41),o=n(43),c=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i};t.a=function(e){function t(t){return"ThermalRating"==t?null!=e.Asset.ThermalRating&&l.a.isRealNumber(e.Asset.ThermalRating):"Speed"==t?null!=e.Asset.Speed&&l.a.isRealNumber(e.Asset.Speed):"TripTime"==t?null==e.Asset.TripTime||l.a.isInteger(e.Asset.TripTime):"PickupTime"==t?null==e.Asset.PickupTime||l.a.isInteger(e.Asset.PickupTime):"TripCoilCondition"==t?null==e.Asset.TripCoilCondition||l.a.isRealNumber(e.Asset.TripCoilCondition):"EDNAPoint"==t||("Spare"==t||"SpareBreakerID"==t)}var n=c(a.useState([]),2),u=n[0],d=n[1];return a.useEffect((function(){Object(o.e)(e.Asset).then((function(e){d(e)}))}),[e.Asset]),null==e.Asset?null:a.createElement(a.Fragment,null,a.createElement(i.a,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(i.a,{Record:e.Asset,Field:"Speed",Feedback:"Speed is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(i.a,{Record:e.Asset,Field:"TripTime",Label:"Trip Time Limit",Feedback:"Trip Time is an integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(i.a,{Record:e.Asset,Field:"PickupTime",Label:"Pickup Time Limit",Feedback:"Pickup Time is an integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(i.a,{Record:e.Asset,Field:"TripCoilCondition",Label:"Trip Coil Condition Limit",Feedback:"Trip Coil Condition is an numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(i.a,{Record:e.Asset,Field:"EDNAPoint",Label:"EDNA Point",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement("div",{className:"form-group",hidden:1!=e.ShowSpare},a.createElement("label",null,"Spare Breaker"),a.createElement("select",{className:"form-control",value:null==e.Asset.SpareBreakerID?0:e.Asset.SpareBreakerID,onChange:function(t){var n=r.clone(e.Asset);"0"==t.target.value?n.SpareBreakerID=null:n.SpareBreakerID=parseInt(t.target.value),e.UpdateState(n)},disabled:"New"==e.NewEdit&&0!=e.Asset.ID},a.createElement("option",{value:0,key:0},"None"),u.map((function(e){return a.createElement("option",{value:e.ID,key:e.ID},e.AssetKey)})))),a.createElement(s.a,{Record:e.Asset,Field:"Spare",Label:"Is Spare",Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},54:function(e,t,n){"use strict";var a,r=n(0),l=n(31),i=n(33),s=n(37),o=(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(){return(c=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};t.a=function(e){function t(t){return"NumberOfBanks"==t?null!=e.Asset.NumberOfBanks&&i.a.isInteger(e.Asset.NumberOfBanks):"CapacitancePerBank"==t?null!=e.Asset.CapacitancePerBank&&i.a.isRealNumber(e.Asset.CapacitancePerBank):"MaxKV"==t?null!=e.Asset.MaxKV&&i.a.isRealNumber(e.Asset.MaxKV):"UnitKV"==t?null!=e.Asset.UnitKV&&i.a.isRealNumber(e.Asset.UnitKV):"UnitKVAr"==t?null!=e.Asset.UnitKVAr&&i.a.isRealNumber(e.Asset.UnitKVAr):"PosReactanceTol"==t?null!=e.Asset.PosReactanceTol&&i.a.isRealNumber(e.Asset.PosReactanceTol):"NegReactanceTol"==t?null!=e.Asset.NegReactanceTol&&i.a.isRealNumber(e.Asset.NegReactanceTol):"Nparalell"==t?null!=e.Asset.Nparalell&&i.a.isInteger(e.Asset.Nparalell):"Nseries"==t?null!=e.Asset.Nseries&&i.a.isInteger(e.Asset.Nseries):"NSeriesGroup"==t?null!=e.Asset.NSeriesGroup&&i.a.isInteger(e.Asset.NSeriesGroup):"NParalellGroup"==t?null!=e.Asset.NParalellGroup&&i.a.isInteger(e.Asset.NParalellGroup):"VTratioBus"==t?null!=e.Asset.VTratioBus&&i.a.isRealNumber(e.Asset.VTratioBus):"NumberLVCaps"==t?null!=e.Asset.NumberLVCaps&&i.a.isInteger(e.Asset.NumberLVCaps):"NumberLVUnits"==t?null!=e.Asset.NumberLVUnits&&i.a.isInteger(e.Asset.NumberLVUnits):"LVKVAr"==t?null!=e.Asset.LVKVAr&&i.a.isRealNumber(e.Asset.LVKVAr):"LVKV"==t?null!=e.Asset.LVKV&&i.a.isRealNumber(e.Asset.LVKV):"LVNegReactanceTol"==t?null!=e.Asset.LVNegReactanceTol&&i.a.isRealNumber(e.Asset.LVNegReactanceTol):"LVPosReactanceTol"==t?null!=e.Asset.LVPosReactanceTol&&i.a.isRealNumber(e.Asset.LVPosReactanceTol):"LowerXFRRatio"==t?null!=e.Asset.LowerXFRRatio&&i.a.isRealNumber(e.Asset.LowerXFRRatio):"Nshorted"==t?null!=e.Asset.Nshorted&&i.a.isRealNumber(e.Asset.Nshorted):"BlownFuses"==t?null!=e.Asset.BlownFuses&&i.a.isRealNumber(e.Asset.BlownFuses):"BlownGroups"==t?null!=e.Asset.BlownGroups&&i.a.isRealNumber(e.Asset.BlownGroups):"Rv"==t?null!=e.Asset.Rv&&i.a.isRealNumber(e.Asset.Rv):"Rh"==t?null!=e.Asset.Rh&&i.a.isRealNumber(e.Asset.Rh):"NLowerGroups"==t?null!=e.Asset.NLowerGroups&&i.a.isInteger(e.Asset.NLowerGroups):"ShortedGroups"==t?null!=e.Asset.ShortedGroups&&i.a.isRealNumber(e.Asset.ShortedGroups):"RelayPTRatioPrimary"==t?null!=e.Asset.RelayPTRatioPrimary&&i.a.isRealNumber(e.Asset.RelayPTRatioPrimary):"RelayPTRatioSecondary"==t?null!=e.Asset.RelayPTRatioSecondary&&i.a.isRealNumber(e.Asset.RelayPTRatioSecondary):"Sh"==t&&(null!=e.Asset.Sh&&i.a.isRealNumber(e.Asset.Sh))}return r.useEffect((function(){null!=e.Asset.Fused&&null!=e.Asset.Compensated&&null!=e.Asset.CktSwitcher&&0!=e.Asset.CktSwitcher.length||e.UpdateState(c(c({},e.Asset),{Fused:!0,Compensated:!1,CktSwitcher:"0"}))}),[e.Asset]),null==e.Asset?null:r.createElement(r.Fragment,null,r.createElement(u,{Record:e.Asset,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"NumberOfBanks",Label:"Number Of Banks",Feedback:"Number Of Banks is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(d,{Record:e.Asset,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"CapacitancePerBank",Label:"Capacitor Step Size (kVAR)",Feedback:"Capacitor Step Size is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"MaxKV",Label:"Maximum Operating Voltage (kV)",Feedback:"Maximum Operating Voltage is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"UnitKV",Label:"Rated Voltage of a Unit (kV)",Feedback:"Rated Voltage of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"UnitKVAr",Label:"Rating of a Unit (kVAR)",Feedback:"Rating of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"PosReactanceTol",Label:"pos. Reactance Tolerance of a Unit (%)",Feedback:"pos. Reactance Tolerance of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"NegReactanceTol",Label:"neg. Reactance Tolerance of a Unit (%)",Feedback:"neg. Reactance Tolerance of a Unit (%) is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"Nparalell",Label:e.Asset.Fused?"Num. of Units per group":"Num. of Parallel Strings",Feedback:(e.Asset.Fused?"Num. of Caps. per group":"Num. of Parallel Strings")+" is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"Nseries",Label:e.Asset.Fused?"Num. of Series Groups per Phase":"Num. Units in each String",Feedback:(e.Asset.Fused?"Num. of Series Groups per Phase":"Num. Units in each String")+" is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),e.Asset.Fused?r.createElement(r.Fragment,null,r.createElement(s.a,{Record:e.Asset,Field:"LowerXFRRatio",Label:"Midgroup VT Ratio",Feedback:"Midgroup VT Ratio is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"Nshorted",Label:"Initial guess of shorted elements",Feedback:"Initial guess of shorted elements is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"BlownFuses",Label:"Initial Guess of blown fuses per group",Feedback:"Initial Guess of blown fuses per group is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"BlownGroups",Label:"Initial guess of Groups with blown Fuse",Feedback:"Initial guess of Groups with blown Fuse is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})):r.createElement(r.Fragment,null,e.Asset.Compensated?r.createElement(r.Fragment,null,r.createElement(m,{Record:e.Asset,Field2:"RelayPTRatioSecondary",Field1:"RelayPTRatioPrimary",Label:"Relay PT Ratio (primary - secondary V)",Feedback:"Relay PT ratio  is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"Rh",Label:"Vt Input Resistor (Ohm)",Feedback:"Vt input resistor is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"Sh",Label:"Vt Input Resistor Wattage (W)",Feedback:"Vt input resistor wattage is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})):r.createElement(r.Fragment,null,r.createElement(s.a,{Record:e.Asset,Field:"Rv",Label:"Voltage Divider output R (Ohm)",Feedback:"Voltage Divider output R is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"Rh",Label:"Voltage Divider input R (Ohm)",Feedback:"Voltage Divider input R is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})),r.createElement(s.a,{Record:e.Asset,Field:"NSeriesGroup",Label:"Num. of Series Groups in each Unit",Feedback:"Num. of Series Groups in each Unit is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"NParalellGroup",Label:"Num. of Elements in each Group",Feedback:"Num. of Elements in each Group is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"VTratioBus",Label:"Bus VT Ratio",Feedback:"Bus VT Ratio is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"NumberLVCaps",Label:"Num.of Relay Caps",Feedback:"Num. of Relay Caps is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"NumberLVUnits",Label:"Num. of Elements per Relay Cap",Feedback:"Num. of Elements per Relay Cap is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"LVKVAr",Label:"Low Voltage Cap size (kVAR)",Feedback:"Low Voltage Cap size is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"LVKV",Label:"Low Voltage Cap rating (V)",Feedback:"Low Volatage Cap rating is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"LVNegReactanceTol",Label:"neg. Reactance Tolerance of LV Unit (%)",Feedback:"neg. Reactance Tolerance of LV Unitis a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"LVPosReactanceTol",Label:"pos. Reactance Tolerance of LV Unit (%)",Feedback:"pos. Reactance Tolerance of LV Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(s.a,{Record:e.Asset,Field:"Nshorted",Label:"Initial guess of shorted elements",Feedback:"Initial guess of shorted elements is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})))};var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.computBools=function(e){var t=l.clone(this.props.Record);"0"==e?(t.Compensated=!0,t.Fused=!1):"1"==e?(t.Compensated=!1,t.Fused=!1):"2"==e&&(t.Compensated=!1,t.Fused=!0),this.props.Setter(t)},t.prototype.computeSelection=function(e){return e.Compensated?"0":e.Fused?"2":"1"},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,"Design"),r.createElement("select",{className:"form-control",value:this.computeSelection(this.props.Record),disabled:null!=this.props.Disabled&&this.props.Disabled,onChange:function(t){return e.computBools(t.target.value)}},r.createElement("option",{key:0,value:"0"},"Fuseless Compensated"),r.createElement("option",{key:1,value:"1"},"Fuseless Uncompensated"),r.createElement("option",{key:2,value:"2"},"Fused")))},t}(r.Component),d=function(e){function t(t,n){var a=e.call(this,t,n)||this,r=[];null!=a.props.Record.CktSwitcher&&(r=a.props.Record.CktSwitcher.trim().split(","));var l=1;return null!=a.props.Record.NumberOfBanks&&(l=a.props.Record.NumberOfBanks),r.length!==parseInt(l.toString())&&(r=Array.from(Array(parseInt(l.toString())),(function(e,t){return"0"}))),a.state={preSwitch:r.map((function(e){return"1"==e.trim()}))},a}return o(t,e),t.prototype.updateValues=function(e){var t=[];null!=e&&(t=e.trim().split(","));var n=1;null!=this.props.Record.NumberOfBanks&&(n=this.props.Record.NumberOfBanks),t.length!==parseInt(n.toString())&&(t=Array.from(Array(parseInt(n.toString())),(function(e,t){return"0"}))),this.setState({preSwitch:t.map((function(e){return"1"==e.trim()}))})},t.prototype.componentDidUpdate=function(e,t){if(e.Record.NumberOfBanks===this.props.Record.NumberOfBanks&&e.Record.CktSwitcher===this.props.Record.CktSwitcher||this.updateValues(this.props.Record.CktSwitcher),!l.isEqual(t,this.state)){var n=l.clone(this.props.Record);n.CktSwitcher=this.state.preSwitch.map((function(e){return e?"1":"0"})).join(","),this.props.Setter(n)}},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,"CapBank with Pre-insertion Switcher"),r.createElement("div",null,this.state.preSwitch.map((function(t,n){return r.createElement("div",{className:"from-check form-check-inline",key:n},r.createElement("input",{className:"form-check-input",type:"checkbox",id:"inlineCheckbox-"+n,onChange:function(t){var a=l.clone(e.state.preSwitch);a[n]=!a[n],e.setState({preSwitch:a})},value:t?1:0,checked:t,disabled:null!=e.props.Disabled&&e.props.Disabled}),r.createElement("label",{className:"form-check-label",htmlFor:"inlineCheckbox-"+n},n+1))}))))},t}(r.Component);function m(e){return r.createElement("div",{className:"form-group"},r.createElement("label",null,null==e.Label?e.Field1+" "+e.Field2:e.Label),r.createElement("div",{className:"input-group"},r.createElement("input",{type:void 0===e.Type?"text":e.Type,className:e.Valid(e.Field1)?"form-control":"form-control is-invalid",onChange:function(t){var n;return e.Setter(c(c({},e.Record),((n={})[e.Field1]=""!==t.target.value?t.target.value:null,n)))},value:null==e.Record[e.Field1]?"":e.Record[e.Field1].toString(),disabled:null!=e.Disabled&&e.Disabled}),r.createElement("input",{type:void 0===e.Type?"text":e.Type,className:e.Valid(e.Field2)?"form-control":"form-control is-invalid",onChange:function(t){var n;return e.Setter(c(c({},e.Record),((n={})[e.Field2]=""!==t.target.value?t.target.value:null,n)))},value:null==e.Record[e.Field2]?"":e.Record[e.Field2].toString(),disabled:null!=e.Disabled&&e.Disabled})),r.createElement("div",{className:"invalid-feedback"},null==e.Feedback?e.Field1+" "+e.Field2+" is a required field.":e.Feedback))}},55:function(e,t,n){"use strict";var a=n(0);t.a=function(e){return a.createElement("span",null,"No Additional Attributes")}},56:function(e,t,n){"use strict";var a=n(0),r=n(31),l=n(33),i=n(35);t.a=function(e){function t(t){return"MaxFaultDistance"==t?null==e.Asset.MaxFaultDistance||l.a.isRealNumber(e.Asset.MaxFaultDistance):"MinFaultDistance"==t?null==e.Asset.MinFaultDistance||l.a.isRealNumber(e.Asset.MinFaultDistance):"Length"==t?null==e.Asset.Detail.Length||l.a.isRealNumber(e.Asset.Detail.Length):"R0"==t?null==e.Asset.Detail.R0||l.a.isRealNumber(e.Asset.Detail.R0):"X0"==t?null==e.Asset.Detail.X0||l.a.isRealNumber(e.Asset.Detail.X0):"R1"==t?null==e.Asset.Detail.R1||l.a.isRealNumber(e.Asset.Detail.R1):"X1"==t?null==e.Asset.Detail.X1||l.a.isRealNumber(e.Asset.Detail.X1):"ThermalRating"==t&&(null==e.Asset.Detail.ThermalRating||l.a.isRealNumber(e.Asset.Detail.ThermalRating))}function n(t){var n=r.clone(e.Asset);n.Detail=t,e.UpdateState(n)}return a.useEffect((function(){}),[e.Asset]),null==e.Asset||null==e.Asset.Detail?null:a.createElement(a.Fragment,null,a.createElement(i.Input,{Record:e.Asset,Field:"MaxFaultDistance",Label:"Max Fault Distance",Feedback:"Max Fault Distance is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(i.Input,{Record:e.Asset,Field:"MinFaultDistance",Label:"Min Fault Distance",Feedback:"Min Fault Distance is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement("div",{className:"alert alert-info",role:"alert"},a.createElement("p",null,"Reactance, Length and Thermal rating are based on the LineSegments associated with this Line."),a.createElement("p",null,"To edit these values the properties of the LineSegement need to be changed.")),a.createElement(i.Input,{Record:e.Asset.Detail,Field:"Length",Feedback:"Length is a required numeric field.",Valid:t,Setter:n,Disabled:!0}),a.createElement(i.Input,{Record:e.Asset.Detail,Field:"R0",Valid:t,Setter:n,Disabled:!0}),a.createElement(i.Input,{Record:e.Asset.Detail,Field:"X0",Valid:t,Setter:n,Disabled:!0}),a.createElement(i.Input,{Record:e.Asset.Detail,Field:"R1",Valid:t,Setter:n,Disabled:!0}),a.createElement(i.Input,{Record:e.Asset.Detail,Field:"X1",Valid:t,Setter:n,Disabled:!0}),a.createElement(i.Input,{Record:e.Asset.Detail,Field:"ThermalRating",Label:"Thermal Rating",Valid:t,Setter:n,Disabled:!0}))}},57:function(e,t,n){"use strict";var a=n(0),r=n(33),l=n(37);t.a=function(e){function t(t){return"PrimaryVoltageKV"==t?null==e.Asset.PrimaryVoltageKV||r.a.isRealNumber(e.Asset.PrimaryVoltageKV):"SecondaryVoltageKV"==t?null==e.Asset.SecondaryVoltageKV||r.a.isRealNumber(e.Asset.SecondaryVoltageKV):"Tap"==t?null==e.Asset.Tap||r.a.isRealNumber(e.Asset.Tap):"R0"==t?null!=e.Asset.R0&&r.a.isRealNumber(e.Asset.R0):"X0"==t?null!=e.Asset.X0&&r.a.isRealNumber(e.Asset.X0):"R1"==t?null!=e.Asset.R1&&r.a.isRealNumber(e.Asset.R1):"X1"==t?null!=e.Asset.X1&&r.a.isRealNumber(e.Asset.X1):"ThermalRating"==t&&(null!=e.Asset.ThermalRating&&r.a.isRealNumber(e.Asset.ThermalRating))}return null==e.Asset?null:a.createElement(a.Fragment,null,a.createElement(l.a,{Record:e.Asset,Field:"R0",Feedback:"R0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.a,{Record:e.Asset,Field:"X0",Feedback:"X0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.a,{Record:e.Asset,Field:"R1",Feedback:"R1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.a,{Record:e.Asset,Field:"X1",Feedback:"X1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.a,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal Rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.a,{Record:e.Asset,Field:"PrimaryVoltageKV",Label:"Primary Voltage (kV)",Feedback:"Primary Voltage (kV) is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.a,{Record:e.Asset,Field:"SecondaryVoltageKV",Label:"Secondary Voltage (kV)",Feedback:"Secondary Voltage (kV) is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.a,{Record:e.Asset,Field:"Tap",Feedback:"Tap is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},59:function(e,t,n){"use strict";var a=n(35),r=n(38),l=n(39),i=n.n(l),s=n(31),o=n.n(s),c=n(0),u=function(){return(u=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},d=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i};t.a=function(e){var t=d(c.useState(0),2),n=t[0],l=t[1],s=d(c.useState({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),2),m=s[0],p=s[1],f=d(c.useState(!1),2),h=f[0],y=f[1],S=d(c.useState([]),2),b=S[0],E=S[1],g=d(c.useState("Timestamp"),2),A=g[0],N=g[1],w=d(c.useState(!1),2),D=w[0],v=w[1],T=d(c.useState(!1),2),F=T[0],R=T[1],I=d(c.useState(!1),2),k=I[0],L=I[1];function x(){var t=$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/ForObject/"+e.Type+"/"+e.ID+"/Search",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[],OrderBy:A,Ascending:D}),cache:!1,async:!0});return t.done((function(e){var t=JSON.parse(e);E(t)})),t}function C(e){$.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Note/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),cache:!0,async:!0}).done((function(){return x()}))}function V(t){p({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify({ID:0,NoteTypeID:n,ReferenceTableID:e.ID,Note:t.Note,Timestamp:moment().format("MM/DD/YYYY HH:mm"),UserAccount:""}),dataType:"json",cache:!0,async:!0}).done((function(e){x()}))}return c.useEffect((function(){var t,n=((t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/NoteType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).then((function(t){var n=t.find((function(t){return t.ReferenceTableName==e.Type}));l(n.ID)})),t);return x(),function(){null!=n&&null!=n.abort&&n.abort()}}),[e.Type]),c.useEffect((function(){var e=x();return function(){null!=e&&null!=e.abort&&e.abort()}}),[e.ID,A,D]),c.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},c.createElement("div",{className:"card-header"},c.createElement("div",{className:"row"},c.createElement("div",{className:"col"},c.createElement("h4",null,"Notes:")))),c.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},c.createElement("div",null,c.createElement(i.a,{cols:[{key:"Note",label:"Note",headerStyle:{width:"50%"},rowStyle:{width:"50%"}},{key:"Timestamp",label:"Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return moment.utc(e.Timestamp).format("MM/DD/YYYY HH:mm")}},{key:"UserAccount",label:"User",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return c.createElement(c.Fragment,null,c.createElement("button",{className:"btn btn-sm",onClick:function(t){return p(e),void y(!0)}},c.createElement("span",null,c.createElement("i",{className:"fa fa-pencil"}))),c.createElement("button",{className:"btn btn-sm",onClick:function(t){return C(e)}},c.createElement("span",null,c.createElement("i",{className:"fa fa-times"}))))}}],tableClass:"table table-hover",data:b,sortField:A,ascending:D,onSort:function(e){e.col==A?v(!D):(v(!0),N(e.col))},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-615,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return e.ID==m.ID}})),c.createElement(a.TextArea,{Record:m,Rows:4,Field:"Note",Setter:function(e){return p(e)},Valid:function(){return m.Note.length>0},Label:""}),c.createElement(r.Modal,{Show:h,Title:"Edit Note",ShowCancel:!0,CallBack:function(e){if(0!=m.Note.length||!e){if(y(!1),e){var t=o.a.cloneDeep(m);C(t),V(t)}p({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""})}},DisableConfirm:0==m.Note.length,ShowX:!0,ConfirmShowToolTip:0==m.Note.length,ConfirmToolTipContent:c.createElement("p",null," ",c.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"An empty Note can not be saved. ")},c.createElement(a.TextArea,{Record:m,Rows:4,Field:"Note",Setter:function(e){null==e.Note?p(u(u({},e),{Note:""})):p(e)},Valid:function(){return m.Note.length>0},Label:""}))),c.createElement("div",{className:"card-footer"},c.createElement("div",{className:"btn-group mr-2"},c.createElement("button",{className:"btn btn-primary"+(0==m.Note.length?" disabled":""),onClick:function(){m.Note.length>0&&V(m)},"data-tooltip":"Add",style:{cursor:0==m.Note.length?"not-allowed":"pointer"},onMouseOver:function(){return R(!0)},onMouseOut:function(){return R(!1)}},"Add Note"),c.createElement(r.ToolTip,{Show:F&&0==m.Note.length,Position:"top",Theme:"dark",Target:"Add"},c.createElement("p",null," A note needs to be entered. "))),c.createElement("div",{className:"btn-group mr-2"},c.createElement("button",{className:"btn btn-default"+(0==m.Note.length?" disabled":""),onClick:function(){return p((function(e){return u(u({},e),{Note:""})}))},style:{cursor:0==m.Note.length?"not-allowed":"pointer"},"data-tooltip":"Remove",onMouseOver:function(){return L(!0)},onMouseOut:function(){return L(!1)}},"Clear"),c.createElement(r.ToolTip,{Show:k&&0==m.Note.length,Position:"top",Theme:"dark",Target:"Remove"},c.createElement("p",null," The note field is already empty. ")))))}},60:function(e,t,n){"use strict";var a=n(0),r=n(31),l=n(33),i=n(38),s=n(35),o=n(39),c=n.n(o),u=function(){return(u=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},d=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,l=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(a=l.next()).done;)i.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}return i},m=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e};t.a=function(e){var t=d(a.useState([]),2),n=t[0],r=t[1],o=d(a.useState([]),2),m=o[0],f=o[1],h=d(a.useState([]),2),y=h[0],S=h[1],b=d(a.useState([]),2),E=b[0],g=b[1],A=d(a.useState([]),2),N=A[0],w=A[1],D=d(a.useState([]),2),v=D[0],T=D[1],F=d(a.useState(!1),2),R=F[0],I=F[1],k=d(a.useState("FieldName"),2),L=k[0],x=k[1],C=d(a.useState(!1),2),V=C[0],B=C[1],P=d(a.useState({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),2),O=P[0],j=P[1],U=d(a.useState(!1),2),X=U[0],M=U[1],K=d(a.useState(!1),2),G=K[0],H=K[1],q=d(a.useState(!1),2),_=q[0],J=q[1],W=d(a.useState("None"),2),Y=W[0],z=W[1],Z=d(a.useState(!0),2),Q=Z[0],ee=Z[1],te={ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1};function ne(){var t,n=ae(),a=re(),l=((t=$.ajax({type:"GET",url:homePath+"api/ValueListGroup",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(e){r(e)})),t),i=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ExternalDataBase",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){f(e.map((function(e){return e.ExternalDB})))})),e}(),s=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/ExternalDBTables/TableName/0",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){var t=JSON.parse(e);S(t.map((function(e){return e.TableName})))})),e}();return j({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),function(){null!=n.abort&&n.abort(),null!=a.abort&&a.abort(),null!=l.abort&&l.abort(),null!=i.abort&&i.abort(),null!=s.abort&&s.abort()}}function ae(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/"+e.Type+"/"+L+"/"+(V?"1":"0"),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){g(e)})),t}function re(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalFieldValue/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){w(e)})),t}function le(){return Q&&null!=O.FieldName&&O.FieldName.length>0&&(null==O.ExternalDB||0==O.ExternalDB.length||!(null==O.ExternalDBTable||0==O.ExternalDBTable.length)&&!(null==O.ExternalDBTableKey||0==O.ExternalDBTableKey.length))}function ie(){return v.some((function(e,t){var n=N.findIndex((function(t){return t.AdditionalFieldID==e.AdditionalFieldID}));return(-1!=n||null!=e.Value)&&(-1==n||e.Value!=N[n].Value)}))}function se(e){var t=[];return v.forEach((function(n,r){var l=E.findIndex((function(e){return e.ID==n.AdditionalFieldID})),i=N.findIndex((function(e){return e.AdditionalFieldID==n.AdditionalFieldID}));-1==l||-1==i&&null==n.Value||(-1!=i?n.Value!=N[i].Value&&t.push(e?a.createElement("p",{key:r}," ",a.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",E[l].FieldName,"' will be lost."):a.createElement("p",{key:r}," ",a.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",E[l].FieldName,"' are valid.")):t.push(e?a.createElement("p",{key:r}," ",a.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",E[l].FieldName,"' will be lost."):a.createElement("p",{key:r}," ",a.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",E[l].FieldName,"' are valid.")))})),t}function oe(){return v.some((function(e){var t=E.findIndex((function(t){return t.ID==e.AdditionalFieldID}));return-1!=t&&("integer"==E[t].Type&&!(null==e.Value||l.a.isInteger(e.Value)))}))}return a.useEffect((function(){return ne()}),[e.ID,e.Type,e.Tab]),a.useEffect((function(){T(N)}),[N]),a.useEffect((function(){var e=ae();return function(){null!=e.abort&&e.abort()}}),[L,V]),a.useEffect((function(){var e=function(){if(null==O.FieldName||0==O.FieldName.length)return null;var e=$.ajax({type:"Post",url:homePath+"api/SystemCenter/AdditionalField/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[{FieldName:"FieldName",Operator:"=",SearchText:O.FieldName,Type:"string"}],OrderBy:"FieldName",Ascending:!0}),cache:!1,async:!0});return e.done((function(e){var t=JSON.parse(e);0==t.length?ee(!0):t.length>1?ee(!1):t[0].ID==O.ID?ee(!0):ee(!1)})),e}();return function(){null!=e&&null!=e.abort&&e.abort()}}),[O.ID,O.FieldName]),a.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},a.createElement("div",{className:"card-header"},a.createElement("div",{className:"row"},a.createElement("div",{className:"col"},a.createElement("h4",null,"Additional Fields:")),a.createElement("div",{className:"col"},R?a.createElement("button",{className:"btn btn-default pull-right","data-tooltip":"View",onClick:function(){I(!1),re()},onMouseEnter:function(){return z("View")},onMouseLeave:function(){return z("None")}},"View"):a.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){return I(!0)}},"Edit"),a.createElement(i.ToolTip,{Show:"View"==Y&&ie(),Position:"left",Theme:"dark",Target:"View"},se(!0))))),a.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},a.createElement(c.a,{cols:[{key:"FieldName",label:"Field",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"ExternalDB",label:"Ext DB",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Type",label:"Type",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"IsSecure",label:"Value",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t){var n=N.findIndex((function(e){return e.AdditionalFieldID==t.ID}));return R?a.createElement(p,{Field:t,ParentTableID:e.ID,Values:v,Setter:function(e){return T(e)}}):n>-1&&null!=N[n].Value?N[n].Value.toString():""}},{key:"ID",label:"",headerStyle:{width:40,paddingRight:0,paddingLeft:10},rowStyle:{width:40,paddingRight:0,paddingLeft:10,paddingTop:36},content:function(e){return R?a.createElement("button",{className:"btn btn-sm",onClick:function(){j(e),J(!0)}},a.createElement("span",null,a.createElement("i",{className:"fa fa-pencil"}))):""}},{key:null,label:"",headerStyle:{width:40,paddingLeft:0,paddingRight:10},rowStyle:{width:40,paddingLeft:0,paddingTop:36,paddingRight:10},content:function(e){return R?a.createElement("button",{className:"btn btn-sm",onClick:function(){j(e),M(!0)}},a.createElement("span",null,a.createElement("i",{className:"fa fa-times"}))):""}}],tableClass:"table table-hover",data:E,sortField:L,ascending:V,onSort:function(e){null!=e.col&&"ID"!=e.col&&"IsSecure"!=e.col&&(e.col==L?B(!V):(B(!0),x(e.col)))},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-455},rowStyle:{display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),a.createElement("div",{className:"card-footer"},a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-primary"+(R?"":" disabled"),onMouseEnter:function(){return z("New")},onMouseLeave:function(){return z("None")},onClick:function(){R&&(J(!0),j(te))},"data-tooltip":"New"},"Add Field")),a.createElement(i.ToolTip,{Show:"New"==Y&&!R,Position:"top",Theme:"dark",Target:"New"},R?null:a.createElement("p",null," To add a new Field switch to Edit mode by clicking on the Edit Button on the upper right corner.")),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-primary"+(ie()&&R&&!oe()?"":" disabled"),onClick:function(){ie()&&!oe()&&R&&$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalFieldValue/Array",contentType:"application/json; charset=utf-8",data:JSON.stringify(v),dataType:"json",cache:!0,async:!0}).done((function(e){ne()}))},onMouseEnter:function(){return z("Save")},onMouseLeave:function(){return z("None")},"data-tooltip":"SaveValues"},"Save Changes")),a.createElement(i.ToolTip,{Show:"Save"==Y&&(!R||ie()),Position:"top",Theme:"dark",Target:"SaveValues"},R?null:a.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),ie()&&!oe()?se(!1):null,ie()&&oe()?function(){if(!oe())return[];var e=[];return v.forEach((function(t,n){var r=E.findIndex((function(e){return e.ID==t.AdditionalFieldID}));-1!=r&&("integer"!=E[r].Type||null==t.Value||l.a.isInteger(t.Value)||e.push(a.createElement("p",{key:n}," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Value for '",E[r].FieldName,"' is required to be an integer.")))})),e}():null),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-default"+(ie()&&R?"":" disabled"),onClick:function(){ie()&&R&&re()},onMouseEnter:function(){return z("Clear")},onMouseLeave:function(){return z("None")},"data-tooltip":"Clear"},"Reset")),a.createElement(i.ToolTip,{Show:"Clear"==Y&&(!R||ie()),Position:"top",Theme:"dark",Target:"Clear"},R?null:a.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),ie()?se(!0):null)),a.createElement(i.LoadingScreen,{Show:G}),a.createElement(i.Warning,{Show:X,Title:"Delete "+O.FieldName,Message:"This will delete the field '"+O.FieldName+"' from all "+e.Type+"s and will also delete all information assigned to these fields.",CallBack:function(e){var t;e&&(t=O,H(!0),$.ajax({type:"DELETE",url:homePath+"api/SystemCenter/AdditionalField/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),dataType:"json",cache:!0,async:!0}).done((function(e){ne(),H(!1)}))),M(!1)}}),a.createElement(i.Modal,{Title:"Additional Field",ConfirmText:"Save",CancelText:"Close",ConfirmBtnClass:"btn-primary"+(le()?"":" disabled"),Show:_,Size:"lg",ShowX:!0,CallBack:function(e,t){!le()&&e||(e&&(H(!0),$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalField/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(O),dataType:"json",cache:!0,async:!0}).done((function(e){ne(),H(!1)}))),J(!1))},ConfirmShowToolTip:!le(),ConfirmToolTipContent:a.createElement(a.Fragment,null,null!=O.FieldName&&0!=O.FieldName.length&&Q?null:a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Field Name is required and has to be unique."),null!=O.ExternalDB&&null==O.ExternalDBTable?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table."):null,null!=O.ExternalDB&&null==O.ExternalDBTableKey?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table Key."):null)},a.createElement(s.Input,{Record:O,Field:"FieldName",Valid:function(e){return null!=O.FieldName&&O.FieldName.length>0&&Q},Label:"Field Name",Setter:j,Feedback:"The additional field needs to have a unique Field Name"}),a.createElement(s.Select,{Record:O,Field:"Type",Options:[{Value:"string",Label:"string"},{Value:"integer",Label:"integer"},{Value:"number",Label:"number"}].concat(n.filter((function(e){return e.Enabled})).map((function(e){return{Value:e.Name,Label:e.Name}}))),Label:"Field Type",Setter:j}),a.createElement(s.Select,{Record:O,Field:"ExternalDB",Label:"External Database",Setter:function(e){null!=e.ExternalDB&&""!=e.ExternalDB||(e=u(u({},e),{ExternalDB:null,ExternalDBTable:null,ExternalDBTableKey:null})),j(e)},EmptyOption:!0,Options:m.map((function(e){return{Value:e,Label:e}}))}),a.createElement("div",{"data-tooltip":"ExternalDB",onMouseEnter:function(){return z("ExternalDB")},onMouseLeave:function(){return z("None")}},a.createElement(s.Select,{EmptyOption:!0,Disabled:null==O.ExternalDB||0==O.ExternalDB.length,Record:O,Field:"ExternalDBTable",Options:y.map((function(e){return{Value:e,Label:e}})),Label:"External Database Table",Setter:j})),a.createElement(s.Input,{Disabled:null==O.ExternalDB||0==O.ExternalDB.length,Record:O,Field:"ExternalDBTableKey",Valid:function(e){return!0},Label:"External Database Table Key",Setter:j}),a.createElement(s.CheckBox,{Record:O,Field:"IsSecure",Label:"Secure Data",Setter:j})),a.createElement(i.ToolTip,{Zindex:9999,Show:"ExternalDB"==Y&&(null==O.ExternalDB||0==O.ExternalDB.length),Position:"bottom",Theme:"dark",Target:"ExternalDB"},a.createElement("p",null," No External Database selected.")))};var p=function(e){var t=d(a.useState([]),2),n=t[0],i=t[1],o=d(a.useState(-1),2),c=o[0],u=o[1];function p(t){var n=r.cloneDeep(e.Values);n[c]=t,e.Setter(n)}function f(t){return"integer"==e.Field.Type?null==e.Values[c].Value||l.a.isInteger(e.Values[c].Value):"number"==e.Field.Type?null==e.Values[c].Value||l.a.isRealNumber(e.Values[c].Value):(e.Field.Type,!0)}return a.useEffect((function(){var t=e.Values.findIndex((function(t){return t.AdditionalFieldID==e.Field.ID}));u(t),-1==t&&e.Setter(m(e.Values,[{ID:0,AdditionalFieldID:e.Field.ID,OpenXDAParentTableID:e.ParentTableID,Value:null}]))}),[e.Values,e.Field]),a.useEffect((function(){if(["integer","number","boolean","string"].indexOf(e.Field.Type)<0){var t=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+e.Field.Type,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){i(e)})),function(){null!=t.abort&&t.abort()}}}),[e.Field.Type]),-1==c||null==e.Values[c]?null:"number"==e.Field.Type||"integer"==e.Field.Type?a.createElement(s.Input,{Record:e.Values[c],Field:"Value",Valid:f,Label:"",Type:"number",Setter:p,Feedback:e.Field.FieldName+" is an integer field."}):"string"==e.Field.Type?a.createElement(s.Input,{Record:e.Values[c],Field:"Value",Valid:f,Label:"",Type:"text",Setter:p}):"boolean"==e.Field.Type?a.createElement(s.CheckBox,{Record:e.Values[c],Field:"Value",Label:"",Setter:p}):a.createElement(s.Select,{EmptyOption:!0,Record:e.Values[c],Field:"Value",Label:"",Setter:p,Options:n.map((function(e){return{Value:e.ID.toString(),Label:e.Text}}))})}},65:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RightArrow=t.LeftArrow=t.PlayButton=t.Scroll=t.FourWayArrow=t.House=t.MagnifyingGlass=t.InputNumbers=t.DNA=t.DownArrow=t.UpArrow=t.Flag=t.Wrench=t.Spinner=t.Warning=t.Plus=t.CrossMark=t.TrashCan=t.Pencil=t.HeavyCheckMark=void 0;t.HeavyCheckMark="✔️";t.Pencil="✏️";t.TrashCan="🗑️";t.CrossMark="❌";t.Plus="➕";t.Warning="⚠️";t.Spinner="🔄";t.Wrench="🔧";t.Flag="🚩";t.UpArrow="⬆️";t.LeftArrow="⬅";t.RightArrow="➡";t.DownArrow="⬇️";t.DNA="🧬";t.InputNumbers="🔢";t.FourWayArrow="☩";t.MagnifyingGlass="🔍";t.House="🏠";t.Scroll="📜";t.PlayButton="▶️"},73:function(e,t,n){"use strict";var a=n(0),r=n(37),l=n(33);t.a=function(e){return a.createElement(a.Fragment,null,a.createElement(r.a,{Record:e.Asset,Field:"OnVoltageThreshhold",Label:"Relay On Voltage Threshhold (pu)",Feedback:"Relay On Voltage Threshhold (pu) is a required field.",Valid:function(t){return"OnVoltageThreshhold"!=t||null!=e.Asset.OnVoltageThreshhold&&l.a.isRealNumber(e.Asset.OnVoltageThreshhold)},Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},81:function(e,t,n){"use strict";var a=n(0),r=n(33),l=n(35);t.a=function(e){function t(t){return"Length"==t?null!=e.Asset.Length&&r.a.isRealNumber(e.Asset.Length):"R0"==t?null!=e.Asset.R0&&r.a.isRealNumber(e.Asset.R0):"X0"==t?null!=e.Asset.X0&&r.a.isRealNumber(e.Asset.X0):"R1"==t?null!=e.Asset.R1&&r.a.isRealNumber(e.Asset.R1):"X1"==t?null!=e.Asset.X1&&r.a.isRealNumber(e.Asset.X1):"ThermalRating"==t&&(null!=e.Asset.ThermalRating&&r.a.isRealNumber(e.Asset.ThermalRating))}return a.useEffect((function(){}),[e.Asset]),null==e.Asset?null:a.createElement(a.Fragment,null,a.createElement(l.Input,{Record:e.Asset,Field:"Length",Feedback:"Length is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.Input,{Record:e.Asset,Field:"R0",Feedback:"R0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.Input,{Record:e.Asset,Field:"X0",Feedback:"X0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.Input,{Record:e.Asset,Field:"R1",Feedback:"R1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.Input,{Record:e.Asset,Field:"X1",Feedback:"X1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),a.createElement(l.Input,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal Rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
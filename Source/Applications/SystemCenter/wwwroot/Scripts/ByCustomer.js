(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{317:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n(39),o=n.n(a),l=n(31),i=n(3),s=n(62),c=n(38),u=n(35),d=function(){return(d=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},y=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),l=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)l.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return l};t.default=function(e){var t=Object(i.useHistory)(),n=y(r.useState([]),2),a=n[0],m=n[1],p=y(r.useState("Idle"),2),f=p[0],h=p[1],b=y(r.useState(s.b.Customer),2),g=b[0],S=b[1],C=y(r.useState([]),2),N=C[0],v=C[1],w=y(r.useState("CustomerKey"),2),k=w[0],E=w[1],A=y(r.useState(!0),2),F=A[0],O=A[1],P=y(r.useState({ID:0,CustomerKey:null,Name:null,Phone:null,Description:null}),2),T=P[0],x=P[1];function I(){var e=(h("Loading"),$.ajax({type:"Post",url:homePath+"api/SystemCenter/Customer/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:s.c.Customer(a),OrderBy:k,Ascending:F}),cache:!1,async:!0}));return e.done((function(e){v(JSON.parse(e)),h("Idle")})).fail((function(e){return h("Error")})),function(){null!=e.abort&&e.abort()}}function D(e){return"CustomerKey"==e?null!=T.CustomerKey&&T.CustomerKey.length>0&&T.CustomerKey.length<=25:"Name"==e?null==T.Name||T.Name.length<=100:"Phone"==e?null==T.Phone||T.Phone.length<=20:"Description"==e&&(null==T.Description||T.Description.length<=200)}return r.useEffect((function(){return I()}),[a,F,k]),r.useEffect((function(){var e=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/Customer/FieldName/0",contentType:"application/json; charset=utf-8",cache:!1,async:!0});return e.done((function(e){var t=l.orderBy(s.b.Customer.concat(e.map((function(e){return d({label:"[AF"+(null!=e.ExternalDB?" "+e.ExternalDB:"")+"] "+e.FieldName,key:e.FieldName},"string"==(t=e.Type)||"integer"==t||"number"==t||"datetime"==t||"boolean"==t?{type:t}:{type:"enum",enum:[{Label:t,Value:t}]});var t}))),["label"],["asc"]);S(t)})),e}();return function(){null!=e.abort&&e.abort()}}),[]),r.createElement("div",{style:{width:"100%",height:"100%"}},r.createElement(c.SearchBar,{CollumnList:g,SetFilter:function(e){return m(e)},Direction:"left",defaultCollumn:s.a.Customer,Width:"50%",Label:"Search",ShowLoading:"Loading"==f,ResultNote:"Error"==f?"Could not complete Search":"Found "+N.length+" Customers",GetEnum:function(e,t){var n=null;return"enum"!=t.type||null==t.enum||1!=t.enum.length?function(){}:((n=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+t.enum[0].Value,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return e(t.map((function(e){return{Value:e.Value.toString(),Label:e.Text}})))})),function(){null!=n&&null==n.abort&&n.abort()})}},r.createElement("li",{className:"nav-item",style:{width:"15%",paddingRight:10}},r.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},r.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Actions:"),r.createElement("form",null,r.createElement("button",{className:"btn btn-primary","data-toggle":"modal","data-target":"#customerModal",hidden:e.Roles.indexOf("Administrator")<0&&e.Roles.indexOf("Transmission SME")<0,onClick:function(e){e.preventDefault()}},"Add Customer"))))),r.createElement("div",{style:{width:"100%",height:"calc( 100% - 136px)"}},r.createElement(o.a,{cols:[{key:"CustomerKey",label:"Account Name",headerStyle:{width:"15%"},rowStyle:{width:"15%"}},{key:"Name",label:"Name",headerStyle:{width:"15%"},rowStyle:{width:"15%"}},{key:"Phone",label:"Phone",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Description",label:"Description",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Meters",label:"Assigned Meters",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}],tableClass:"table table-hover",data:N,sortField:k,ascending:F,onSort:function(e){e.col==k?O(!F):(O(!0),E(e.col))},onClick:function(e){t.push({pathname:homePath+"index.cshtml",search:"?name=Customer&CustomerID="+e.row.ID,state:{}})},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),r.createElement("div",{className:"modal",id:"customerModal"},r.createElement("div",{className:"modal-dialog",style:{maxWidth:"100%",width:"75%"}},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("h4",{className:"modal-title"},"Add Customer"),r.createElement("button",{type:"button",className:"close","data-dismiss":"modal"},"Ã—")),r.createElement("div",{className:"modal-body"},r.createElement("div",{className:"row"},r.createElement("div",{className:"col"},r.createElement(u.Input,{Record:T,Field:"CustomerKey",Feedback:"AccountName of less than 25 characters is required.",Valid:D,Setter:x}),r.createElement(u.Input,{Record:T,Field:"Name",Feedback:"Name must be less than 100 characters.",Valid:D,Setter:x}),r.createElement(u.Input,{Record:T,Field:"Phone",Feedback:"Phone must be less than 20 characters.",Valid:D,Setter:x}),r.createElement(u.TextArea,{Rows:3,Record:T,Field:"Description",Feedback:"Description must be less than 200 characters.",Valid:D,Setter:x})))),r.createElement("div",{className:"modal-footer"},r.createElement("button",{type:"button",className:"btn btn-primary","data-dismiss":"modal",onClick:function(){$.ajax({type:"POST",url:homePath+"api/SystemCenter/Customer/Add",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(T),cache:!1,async:!0}).done((function(e){return I()}))}},"Save"),r.createElement("button",{type:"button",className:"btn btn-danger","data-dismiss":"modal"},"Close"))))))}},39:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SelectTable=void 0;var r=n(44),a=n(51);Object.defineProperty(t,"SelectTable",{enumerable:!0,get:function(){return a.SelectTable}}),t.default=r.default},44:function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var l=n(0),i=function(e){return l.createElement("span",{style:{width:10,height:10,margin:3},className:"fa fa-angle-"+(e.ascending?"up":"down")})},s=function(e){function t(t){return e.call(this,t)||this}return a(t,e),t.prototype.render=function(){var e=this.generateRows(),t=this.generateHeaders();return l.createElement("table",{className:void 0!==this.props.tableClass?this.props.tableClass:"",style:this.props.tableStyle},l.createElement("thead",{style:this.props.theadStyle},t),l.createElement("tbody",{style:this.props.tbodyStyle},e))},t.prototype.generateHeaders=function(){var e=this;if(0===this.props.cols.length)return null;var t=this.props.cols.map((function(t,n){var r;return void 0===(r=void 0!==t.headerStyle?t.headerStyle:{}).cursor&&(r.cursor="pointer"),l.createElement("th",{key:n,style:r,onClick:function(n){return e.handleSort({col:t.key,ascending:e.props.ascending},n)}},t.label,e.props.sortField===t.key?l.createElement(i,{ascending:e.props.ascending}):null)}));return l.createElement("tr",null,t)},t.prototype.generateRows=function(){var e=this;return 0===this.props.data.length?null:this.props.data.map((function(t,n){var r,a=e.props.cols.map((function(r){var a;return a=void 0===r.rowStyle?{}:o({},r.rowStyle),l.createElement("td",{key:n.toString()+(null===r.key?"":t[r.key])+r.key,style:a,onClick:e.handleClick.bind(e,{col:r.key,row:t,data:null===r.key?null:t[r.key],index:n})},void 0!==r.content?r.content(t,r.key,a,n):null===r.key?null:t[r.key])}));return void 0===(r=void 0!==e.props.rowStyle?o({},e.props.rowStyle):{}).cursor&&(r.cursor="pointer"),void 0!==e.props.selected&&e.props.selected(t)&&(r.backgroundColor="yellow"),l.createElement("tr",{style:r,key:n.toString()},a)}))},t.prototype.handleClick=function(e,t){this.props.onClick(e,t)},t.prototype.handleSort=function(e,t){this.props.onSort(e)},t}(l.Component);t.default=s},51:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},a=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var o=arguments[t],l=0,i=o.length;l<i;l++,a++)r[a]=o[l];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectTable=void 0;var o=n(0),l=n(31),i=n(44);t.SelectTable=function(e){var t=o.useRef(!1),n=o.useState(e.data),s=n[0],c=n[1],u=o.useState([]),d=u[0],y=u[1],m=o.useState(e.sortField),p=m[0],f=m[1],h=o.useState(e.ascending),b=h[0],g=h[1];o.useEffect((function(){t.current?y((function(t){return t.length===s.length?[]:s.map((function(t){return t[e.KeyField]}))})):t.current=!0}),[e.selectAllCounter]),o.useEffect((function(){e.data.length!==s.length&&c(e.data)}),[e.data]),o.useEffect((function(){y((function(t){return t.filter((function(t){return s.findIndex((function(n){return n[e.KeyField]===t}))>-1}))}))}),[s]),o.useEffect((function(){c((function(e){return l.orderBy(e,[p],[b?"asc":"desc"])}))}),[b,p]),o.useEffect((function(){e.onSelection(s.filter((function(t){return d.findIndex((function(n){return n===t[e.KeyField]}))>-1})))}),[d]);var S={cols:a([{key:e.KeyField,label:"",headerStyle:{width:"4em"},rowStyle:{width:"4em"},content:function(t,n,r){return d.findIndex((function(n){return n===t[e.KeyField]}))>-1?o.createElement("div",{style:{marginTop:"16px",textAlign:"center"}},o.createElement("i",{className:"fa fa-check-square-o fa-3x","aria-hidden":"true"})):null}}],e.cols),data:s,onClick:function(t,n){var r=d.findIndex((function(n){return n===t.row[e.KeyField]}));y(-1===r?function(n){return a(n,[t.row[e.KeyField]])}:function(n){return n.filter((function(n){return n!==t.row[e.KeyField]}))})},sortField:p,ascending:b,onSort:function(e){e.col===p?g(!b):f(e.col)},tableClass:e.tableClass,tableStyle:e.tableStyle,theadStyle:e.theadStyle,theadClass:e.theadClass,tbodyStyle:e.tbodyStyle,tbodyClass:e.tbodyClass,selected:function(e){return!1},rowStyle:e.rowStyle};return o.createElement(i.default,r({},S))}},62:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return a})),n.d(t,"c",(function(){return o}));var r,a,o,l=function(){return(l=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};!function(e){e.Customer=[{label:"Account Name",key:"CustomerKey",type:"string"},{label:"Name",key:"Name",type:"string"},{label:"Phone",key:"Phone",type:"string"},{label:"Description",key:"Description",type:"string"},{label:"PQView Site Name",key:"PQViewSite",type:"string"},{label:"Number of Assigned Meters",key:"Meters",type:"integer"}],e.Company=[{label:"Name",key:"Name",type:"string"},{label:"CompanyID",key:"CompanyID",type:"string"},{label:"Description",key:"Description",type:"string"},{label:"Company Type",key:"CompanyTypeID",type:"enum"}],e.UserAccount=[{label:"First Name",key:"UserAccount.FirstName",type:"string"},{label:"Last Name",key:"UserAccount.LastName",type:"string"},{label:"Phone",key:"UserAccount.Phone",type:"string"},{label:"Mobile Phone",key:"UserAccount.MobilePhone",type:"string"},{label:"Email",key:"UserAccount.Email",type:"string"},{label:"TSC",key:"UserAccount.TSC",type:"string"},{label:"Role",key:"Role.Name",type:"string"},{label:"Security Role",key:"ApplicationRole.Name",type:"string"}],e.Location=[{label:"Name",key:"Name",type:"string"},{label:"Key",key:"LocationKey",type:"string"},{label:"Asset",key:"Asset",type:"string"},{label:"Meter",key:"Meter",type:"string"},{label:"Number of Assets",key:"Assets",type:"integer"},{label:"Number of Meters",key:"Meters",type:"integer"}]}(r||(r={})),function(e){e.Company={label:"Name",key:"Name",type:"string"},e.Customer={label:"Account Name",key:"CustomerKey",type:"string"},e.UserAccount={label:"First Name",key:"UserAccount.FirstName",type:"string"},e.Location={label:"Name",key:"Name",type:"string"}}(a||(a={})),function(e){e.Company=function(e){return e.map((function(e){return-1==r.Company.findIndex((function(t){return t.key==e.FieldName}))?l(l({},e),{isPivotColumn:!0}):e}))},e.Customer=function(e){return e.map((function(e){if("PQViewSite"==e.FieldName){var t=e.SearchText;return 0==t.length&&(t="%"),t.replace("*","%"),t="'"+t+"'",{FieldName:"ID",SearchText:"(SELECT Customer.ID FROM PQViewSite LEFT JOIN [systemCenter.CustomerAccess] ON[systemCenter.CustomerAccess].PQViewSiteID = PQViewSite.ID LEFT JOIN Customer C ON C.ID = [systemCenter.CustomerAccess].CustomerID WHERE  PQViewSite.Name "+e.Operator+t+" )",Operator:"IN",Type:"number",isPivotColumn:!1}}return-1==r.Customer.findIndex((function(t){return t.key==e.FieldName}))?l(l({},e),{isPivotColumn:!0}):e}))},e.Location=function(e){return e.map((function(e){var t;return"Meter"==e.FieldName?(0==(t=e.SearchText).length&&(t="%"),t.replace("*","%"),t=" '"+t+"'",{FieldName:"ID",SearchText:"(SELECT Meter.LocationID FROM Meter WHERE  Meter.AssetKey "+e.Operator+t+" or Meter.Name "+e.Operator+t+" )",Operator:"IN",Type:"number",isPivotColumn:!1}):"Asset"==e.FieldName?(0==(t=e.SearchText).length&&(t="%"),t.replace("*","%"),t=" '"+t+"'",{FieldName:"ID",SearchText:"(SELECT AssetLocation.LocationID FROM Asset LEFT JOIN AssetLocation ON AssetLocation.AssetID = Asset.ID WHERE  Asset.AssetName "+e.Operator+t+" or Asset.AssetKey "+e.Operator+t+" )",Operator:"IN",Type:"number",isPivotColumn:!1}):-1==r.Location.findIndex((function(t){return t.key==e.FieldName}))?l(l({},e),{isPivotColumn:!0}):e}))}}(o||(o={}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{52:function(e,t,n){"use strict";var a=n(35),l=n(38),r=n(36),o=n.n(r),i=n(31),c=n.n(i),u=n(0),d=function(){return(d=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},s=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return o};t.a=function(e){var t=s(u.useState(0),2),n=t[0],r=t[1],i=s(u.useState({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),2),m=i[0],p=i[1],f=s(u.useState(!1),2),h=f[0],y=f[1],b=s(u.useState([]),2),E=b[0],T=b[1],g=s(u.useState("Timestamp"),2),S=g[0],N=g[1],D=s(u.useState(!1),2),x=D[0],w=D[1],v=s(u.useState(!1),2),F=v[0],I=v[1],V=s(u.useState(!1),2),B=V[0],C=V[1];function k(){var t=$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/ForObject/"+e.Type+"/"+e.ID+"/Search",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[],OrderBy:S,Ascending:x}),cache:!1,async:!0});return t.done((function(e){var t=JSON.parse(e);T(t)})),t}function A(e){$.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Note/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),cache:!0,async:!0}).done((function(){return k()}))}function j(t){p({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify({ID:0,NoteTypeID:n,ReferenceTableID:e.ID,Note:t.Note,Timestamp:moment().format("MM/DD/YYYY HH:mm"),UserAccount:""}),dataType:"json",cache:!0,async:!0}).done((function(e){k()}))}return u.useEffect((function(){var t,n=((t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/NoteType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).then((function(t){var n=t.find((function(t){return t.ReferenceTableName==e.Type}));r(n.ID)})),t);return k(),function(){null!=n&&null!=n.abort&&n.abort()}}),[e.Type]),u.useEffect((function(){var e=k();return function(){null!=e&&null!=e.abort&&e.abort()}}),[e.ID,S,x]),u.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},u.createElement("div",{className:"card-header"},u.createElement("div",{className:"row"},u.createElement("div",{className:"col"},u.createElement("h4",null,"Notes:")))),u.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},u.createElement("div",null,u.createElement(o.a,{cols:[{key:"Note",label:"Note",headerStyle:{width:"50%"},rowStyle:{width:"50%"}},{key:"Timestamp",label:"Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return moment.utc(e.Timestamp).format("MM/DD/YYYY HH:mm")}},{key:"UserAccount",label:"User",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return u.createElement(u.Fragment,null,u.createElement("button",{className:"btn btn-sm",onClick:function(t){return p(e),void y(!0)}},u.createElement("span",null,u.createElement("i",{className:"fa fa-pencil"}))),u.createElement("button",{className:"btn btn-sm",onClick:function(t){return A(e)}},u.createElement("span",null,u.createElement("i",{className:"fa fa-times"}))))}}],tableClass:"table table-hover",data:E,sortField:S,ascending:x,onSort:function(e){e.col==S?w(!x):(w(!0),N(e.col))},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-615,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return e.ID==m.ID}})),u.createElement(a.TextArea,{Record:m,Rows:4,Field:"Note",Setter:function(e){return p(e)},Valid:function(){return m.Note.length>0},Label:""}),u.createElement(l.Modal,{Show:h,Title:"Edit Note",ShowCancel:!0,CallBack:function(e){if(0!=m.Note.length||!e){if(y(!1),e){var t=c.a.cloneDeep(m);A(t),j(t)}p({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""})}},DisableConfirm:0==m.Note.length,ShowX:!0,ConfirmShowToolTip:0==m.Note.length,ConfirmToolTipContent:u.createElement("p",null," ",u.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"An empty Note can not be saved. ")},u.createElement(a.TextArea,{Record:m,Rows:4,Field:"Note",Setter:function(e){null==e.Note?p(d(d({},e),{Note:""})):p(e)},Valid:function(){return m.Note.length>0},Label:""}))),u.createElement("div",{className:"card-footer"},u.createElement("div",{className:"btn-group mr-2"},u.createElement("button",{className:"btn btn-primary"+(0==m.Note.length?" disabled":""),onClick:function(){m.Note.length>0&&j(m)},"data-tooltip":"Add",style:{cursor:0==m.Note.length?"not-allowed":"pointer"},onMouseOver:function(){return I(!0)},onMouseOut:function(){return I(!1)}},"Add Note"),u.createElement(l.ToolTip,{Show:F&&0==m.Note.length,Position:"top",Theme:"dark",Target:"Add"},u.createElement("p",null," A note needs to be entered. "))),u.createElement("div",{className:"btn-group mr-2"},u.createElement("button",{className:"btn btn-default"+(0==m.Note.length?" disabled":""),onClick:function(){return p((function(e){return d(d({},e),{Note:""})}))},style:{cursor:0==m.Note.length?"not-allowed":"pointer"},"data-tooltip":"Remove",onMouseOver:function(){return C(!0)},onMouseOut:function(){return C(!1)}},"Clear"),u.createElement(l.ToolTip,{Show:B&&0==m.Note.length,Position:"top",Theme:"dark",Target:"Remove"},u.createElement("p",null," The note field is already empty. ")))))}},53:function(e,t,n){"use strict";var a=n(0),l=n(31),r=n(37),o=n(38),i=n(35),c=n(36),u=n.n(c),d=function(){return(d=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},s=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return o},m=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(s(arguments[t]));return e};t.a=function(e){var t=s(a.useState([]),2),n=t[0],l=t[1],c=s(a.useState([]),2),m=c[0],f=c[1],h=s(a.useState([]),2),y=h[0],b=h[1],E=s(a.useState([]),2),T=E[0],g=E[1],S=s(a.useState([]),2),N=S[0],D=S[1],x=s(a.useState([]),2),w=x[0],v=x[1],F=s(a.useState(!1),2),I=F[0],V=F[1],B=s(a.useState("FieldName"),2),C=B[0],k=B[1],A=s(a.useState(!1),2),j=A[0],O=A[1],L=s(a.useState({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),2),R=L[0],P=L[1],M=s(a.useState(!1),2),H=M[0],J=M[1],Y=s(a.useState(!1),2),K=Y[0],X=Y[1],G=s(a.useState(!1),2),U=G[0],q=G[1],z=s(a.useState("None"),2),W=z[0],Z=z[1],Q=s(a.useState(!0),2),_=Q[0],ee=Q[1],te={ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1};function ne(){var t,n=ae(),a=le(),r=((t=$.ajax({type:"GET",url:homePath+"api/ValueListGroup",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(e){l(e)})),t),o=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ExternalDataBase",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){f(e.map((function(e){return e.ExternalDB})))})),e}(),i=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/ExternalDBTables/TableName/0",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){var t=JSON.parse(e);b(t.map((function(e){return e.TableName})))})),e}();return P({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),function(){null!=n.abort&&n.abort(),null!=a.abort&&a.abort(),null!=r.abort&&r.abort(),null!=o.abort&&o.abort(),null!=i.abort&&i.abort()}}function ae(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/"+e.Type+"/"+C+"/"+(j?"1":"0"),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){g(e)})),t}function le(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalFieldValue/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){D(e)})),t}function re(){return _&&null!=R.FieldName&&R.FieldName.length>0&&(null==R.ExternalDB||0==R.ExternalDB.length||!(null==R.ExternalDBTable||0==R.ExternalDBTable.length)&&!(null==R.ExternalDBTableKey||0==R.ExternalDBTableKey.length))}function oe(){return w.some((function(e,t){var n=N.findIndex((function(t){return t.AdditionalFieldID==e.AdditionalFieldID}));return(-1!=n||null!=e.Value)&&(-1==n||e.Value!=N[n].Value)}))}function ie(e){var t=[];return w.forEach((function(n,l){var r=T.findIndex((function(e){return e.ID==n.AdditionalFieldID})),o=N.findIndex((function(e){return e.AdditionalFieldID==n.AdditionalFieldID}));-1==r||-1==o&&null==n.Value||(-1!=o?n.Value!=N[o].Value&&t.push(e?a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",T[r].FieldName,"' will be lost."):a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",T[r].FieldName,"' are valid.")):t.push(e?a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",T[r].FieldName,"' will be lost."):a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",T[r].FieldName,"' are valid.")))})),t}function ce(){return w.some((function(e){var t=T.findIndex((function(t){return t.ID==e.AdditionalFieldID}));return-1!=t&&("integer"==T[t].Type&&!(null==e.Value||r.a.isInteger(e.Value)))}))}return a.useEffect((function(){return ne()}),[e.ID,e.Type,e.Tab]),a.useEffect((function(){v(N)}),[N]),a.useEffect((function(){var e=ae();return function(){null!=e.abort&&e.abort()}}),[C,j]),a.useEffect((function(){var e=function(){if(null==R.FieldName||0==R.FieldName.length)return null;var e=$.ajax({type:"Post",url:homePath+"api/SystemCenter/AdditionalField/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[{FieldName:"FieldName",Operator:"=",SearchText:R.FieldName,Type:"string"}],OrderBy:"FieldName",Ascending:!0}),cache:!1,async:!0});return e.done((function(e){var t=JSON.parse(e);0==t.length?ee(!0):t.length>1?ee(!1):t[0].ID==R.ID?ee(!0):ee(!1)})),e}();return function(){null!=e&&null!=e.abort&&e.abort()}}),[R.ID,R.FieldName]),a.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},a.createElement("div",{className:"card-header"},a.createElement("div",{className:"row"},a.createElement("div",{className:"col"},a.createElement("h4",null,"Additional Fields:")),a.createElement("div",{className:"col"},I?a.createElement("button",{className:"btn btn-default pull-right","data-tooltip":"View",onClick:function(){V(!1),le()},onMouseEnter:function(){return Z("View")},onMouseLeave:function(){return Z("None")}},"View"):a.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){return V(!0)}},"Edit"),a.createElement(o.ToolTip,{Show:"View"==W&&oe(),Position:"left",Theme:"dark",Target:"View"},ie(!0))))),a.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},a.createElement(u.a,{cols:[{key:"FieldName",label:"Field",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"ExternalDB",label:"Ext DB",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Type",label:"Type",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"IsSecure",label:"Value",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t){var n=N.findIndex((function(e){return e.AdditionalFieldID==t.ID}));return I?a.createElement(p,{Field:t,ParentTableID:e.ID,Values:w,Setter:function(e){return v(e)}}):n>-1&&null!=N[n].Value?N[n].Value.toString():""}},{key:"ID",label:"",headerStyle:{width:40,paddingRight:0,paddingLeft:10},rowStyle:{width:40,paddingRight:0,paddingLeft:10,paddingTop:36},content:function(e){return I?a.createElement("button",{className:"btn btn-sm",onClick:function(){P(e),q(!0)}},a.createElement("span",null,a.createElement("i",{className:"fa fa-pencil"}))):""}},{key:null,label:"",headerStyle:{width:40,paddingLeft:0,paddingRight:10},rowStyle:{width:40,paddingLeft:0,paddingTop:36,paddingRight:10},content:function(e){return I?a.createElement("button",{className:"btn btn-sm",onClick:function(){P(e),J(!0)}},a.createElement("span",null,a.createElement("i",{className:"fa fa-times"}))):""}}],tableClass:"table table-hover",data:T,sortField:C,ascending:j,onSort:function(e){null!=e.col&&"ID"!=e.col&&"IsSecure"!=e.col&&(e.col==C?O(!j):(O(!0),k(e.col)))},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-455},rowStyle:{display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),a.createElement("div",{className:"card-footer"},a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-primary"+(I?"":" disabled"),onMouseEnter:function(){return Z("New")},onMouseLeave:function(){return Z("None")},onClick:function(){I&&(q(!0),P(te))},"data-tooltip":"New"},"Add Field")),a.createElement(o.ToolTip,{Show:"New"==W&&!I,Position:"top",Theme:"dark",Target:"New"},I?null:a.createElement("p",null," To add a new Field switch to Edit mode by clicking on the Edit Button on the upper right corner.")),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-primary"+(oe()&&I&&!ce()?"":" disabled"),onClick:function(){oe()&&!ce()&&I&&$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalFieldValue/Array",contentType:"application/json; charset=utf-8",data:JSON.stringify(w),dataType:"json",cache:!0,async:!0}).done((function(e){ne()}))},onMouseEnter:function(){return Z("Save")},onMouseLeave:function(){return Z("None")},"data-tooltip":"SaveValues"},"Save Changes")),a.createElement(o.ToolTip,{Show:"Save"==W&&(!I||oe()),Position:"top",Theme:"dark",Target:"SaveValues"},I?null:a.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),oe()&&!ce()?ie(!1):null,oe()&&ce()?function(){if(!ce())return[];var e=[];return w.forEach((function(t,n){var l=T.findIndex((function(e){return e.ID==t.AdditionalFieldID}));-1!=l&&("integer"!=T[l].Type||null==t.Value||r.a.isInteger(t.Value)||e.push(a.createElement("p",{key:n}," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Value for '",T[l].FieldName,"' is required to be an integer.")))})),e}():null),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-default"+(oe()&&I?"":" disabled"),onClick:function(){oe()&&I&&le()},onMouseEnter:function(){return Z("Clear")},onMouseLeave:function(){return Z("None")},"data-tooltip":"Clear"},"Reset")),a.createElement(o.ToolTip,{Show:"Clear"==W&&(!I||oe()),Position:"top",Theme:"dark",Target:"Clear"},I?null:a.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),oe()?ie(!0):null)),a.createElement(o.LoadingScreen,{Show:K}),a.createElement(o.Warning,{Show:H,Title:"Delete "+R.FieldName,Message:"This will delete the field '"+R.FieldName+"' from all "+e.Type+"s and will also delete all information assigned to these fields.",CallBack:function(e){var t;e&&(t=R,X(!0),$.ajax({type:"DELETE",url:homePath+"api/SystemCenter/AdditionalField/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),dataType:"json",cache:!0,async:!0}).done((function(e){ne(),X(!1)}))),J(!1)}}),a.createElement(o.Modal,{Title:"Additional Field",ConfirmText:"Save",CancelText:"Close",ConfirmBtnClass:"btn-primary"+(re()?"":" disabled"),Show:U,Size:"lg",ShowX:!0,CallBack:function(e,t){!re()&&e||(e&&(X(!0),$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalField/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(R),dataType:"json",cache:!0,async:!0}).done((function(e){ne(),X(!1)}))),q(!1))},ConfirmShowToolTip:!re(),ConfirmToolTipContent:a.createElement(a.Fragment,null,null!=R.FieldName&&0!=R.FieldName.length&&_?null:a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Field Name is required and has to be unique."),null!=R.ExternalDB&&null==R.ExternalDBTable?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table."):null,null!=R.ExternalDB&&null==R.ExternalDBTableKey?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table Key."):null)},a.createElement(i.Input,{Record:R,Field:"FieldName",Valid:function(e){return null!=R.FieldName&&R.FieldName.length>0&&_},Label:"Field Name",Setter:P,Feedback:"The additional field needs to have a unique Field Name"}),a.createElement(i.Select,{Record:R,Field:"Type",Options:[{Value:"string",Label:"string"},{Value:"integer",Label:"integer"},{Value:"number",Label:"number"}].concat(n.filter((function(e){return e.Enabled})).map((function(e){return{Value:e.Name,Label:e.Name}}))),Label:"Field Type",Setter:P}),a.createElement(i.Select,{Record:R,Field:"ExternalDB",Label:"External Database",Setter:function(e){null!=e.ExternalDB&&""!=e.ExternalDB||(e=d(d({},e),{ExternalDB:null,ExternalDBTable:null,ExternalDBTableKey:null})),P(e)},EmptyOption:!0,Options:m.map((function(e){return{Value:e,Label:e}}))}),a.createElement("div",{"data-tooltip":"ExternalDB",onMouseEnter:function(){return Z("ExternalDB")},onMouseLeave:function(){return Z("None")}},a.createElement(i.Select,{EmptyOption:!0,Disabled:null==R.ExternalDB||0==R.ExternalDB.length,Record:R,Field:"ExternalDBTable",Options:y.map((function(e){return{Value:e,Label:e}})),Label:"External Database Table",Setter:P})),a.createElement(i.Input,{Disabled:null==R.ExternalDB||0==R.ExternalDB.length,Record:R,Field:"ExternalDBTableKey",Valid:function(e){return!0},Label:"External Database Table Key",Setter:P}),a.createElement(i.CheckBox,{Record:R,Field:"IsSecure",Label:"Secure Data",Setter:P})),a.createElement(o.ToolTip,{Zindex:9999,Show:"ExternalDB"==W&&(null==R.ExternalDB||0==R.ExternalDB.length),Position:"bottom",Theme:"dark",Target:"ExternalDB"},a.createElement("p",null," No External Database selected.")))};var p=function(e){var t=s(a.useState([]),2),n=t[0],o=t[1],c=s(a.useState(-1),2),u=c[0],d=c[1];function p(t){var n=l.cloneDeep(e.Values);n[u]=t,e.Setter(n)}function f(t){return"integer"==e.Field.Type?null==e.Values[u].Value||r.a.isInteger(e.Values[u].Value):"number"==e.Field.Type?null==e.Values[u].Value||r.a.isRealNumber(e.Values[u].Value):(e.Field.Type,!0)}return a.useEffect((function(){var t=e.Values.findIndex((function(t){return t.AdditionalFieldID==e.Field.ID}));d(t),-1==t&&e.Setter(m(e.Values,[{ID:0,AdditionalFieldID:e.Field.ID,OpenXDAParentTableID:e.ParentTableID,Value:null}]))}),[e.Values,e.Field]),a.useEffect((function(){if(["integer","number","boolean","string"].indexOf(e.Field.Type)<0){var t=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+e.Field.Type,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){o(e)})),function(){null!=t.abort&&t.abort()}}}),[e.Field.Type]),-1==u||null==e.Values[u]?null:"number"==e.Field.Type||"integer"==e.Field.Type?a.createElement(i.Input,{Record:e.Values[u],Field:"Value",Valid:f,Label:"",Type:"number",Setter:p,Feedback:e.Field.FieldName+" is an integer field."}):"string"==e.Field.Type?a.createElement(i.Input,{Record:e.Values[u],Field:"Value",Valid:f,Label:"",Type:"text",Setter:p}):"boolean"==e.Field.Type?a.createElement(i.CheckBox,{Record:e.Values[u],Field:"Value",Label:"",Setter:p}):a.createElement(i.Select,{EmptyOption:!0,Record:e.Values[u],Field:"Value",Label:"",Setter:p,Options:n.map((function(e){return{Value:e.ID.toString(),Label:e.Text}}))})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
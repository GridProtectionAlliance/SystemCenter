!function(e){function t(t){for(var n,o,a=t[0],i=t[1],u=0,s=[];u<a.length;u++)o=a[u],r[o]&&s.push(r[o][0]),r[o]=0;for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n]);for(c&&c(t);s.length;)s.shift()()}var n={},r={21:0};function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.e=function(e){var t=[],n=r[e];if(0!==n)if(n)t.push(n[2]);else{var a=new Promise((function(t,o){n=r[e]=[t,o]}));t.push(n[2]=a);var i,u=document.createElement("script");u.charset="utf-8",u.timeout=120,o.nc&&u.setAttribute("nonce",o.nc),u.src=function(e){return o.p+""+({0:"vendors~Asset~AssetGroup~ByAsset~ByAssetGroup~ByCompany~ByCustomer~ByLocation~ByMeter~ByUser~Company~159a7171",1:"vendors~Asset~AssetGroup~ByAsset~ByAssetGroup~ByCompany~ByCustomer~ByLocation~ByMeter~ByUser~Company~d01354fb",2:"vendors~Asset~AssetGroup~ByAsset~ByAssetGroup~ByCompany~ByCustomer~ByLocation~ByMeter~ByUser~Company~142e648b",3:"Asset~ByAsset~ByLocation~Company~Customer~Location~Meter~NewMeterWizard",4:"AssetGroup~ByAssetGroup",5:"vendors~ByUser~User",6:"Asset",7:"AssetGroup",8:"ByAsset",9:"ByAssetGroup",10:"ByCompany",11:"ByCustomer",12:"ByLocation",13:"ByMeter",14:"ByUser",15:"Company",16:"ConfigurationHistory",17:"Customer",18:"Location",19:"Meter",20:"NewMeterWizard",22:"User",23:"UserStatistics"}[e]||e)+".js"}(e),i=function(t){u.onerror=u.onload=null,clearTimeout(c);var n=r[e];if(0!==n){if(n){var o=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src,i=new Error("Loading chunk "+e+" failed.\n("+o+": "+a+")");i.type=o,i.request=a,n[1](i)}r[e]=void 0}};var c=setTimeout((function(){i({type:"timeout",target:u})}),12e4);u.onerror=u.onload=i,document.head.appendChild(u)}return Promise.all(t)},o.m=e,o.c=n,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="Scripts/",o.oe=function(e){throw console.error(e),e};var a=window.webpackJsonp=window.webpackJsonp||[],i=a.push.bind(a);a.push=t,a=a.slice();for(var u=0;u<a.length;u++)t(a[u]);var c=i;o(o.s=29)}([function(e,t){e.exports=React},function(e,t,n){"use strict";function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[X]}function a(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[K]||!!e.constructor[K]||p(e)||d(e))}function i(e,t,n){void 0===n&&(n=!1),0===u(e)?(n?Object.keys:H)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function u(e){var t=e[X];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:p(e)?2:d(e)?3:0}function c(e,t){return 2===u(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function s(e,t){return 2===u(e)?e.get(t):e[t]}function l(e,t,n){var r=u(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function f(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function p(e){return G&&e instanceof Map}function d(e){return z&&e instanceof Set}function h(e){return e.o||e.t}function y(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Q(e);delete t[X];for(var n=H(t),r=0;r<n.length;r++){var o=n[r],a=t[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function m(e,t){b(e)||o(e)||!a(e)||(u(e)>1&&(e.set=e.add=e.clear=e.delete=v),Object.freeze(e),t&&i(e,(function(e,t){return m(t,!0)}),!0))}function v(){r(2)}function b(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function g(e){var t=q[e];return t||r(19,e),t}function w(e,t){q[e]=t}function S(){return B}function O(e,t){t&&(g("Patches"),e.u=[],e.s=[],e.v=t)}function E(e){P(e),e.p.forEach(x),e.p=null}function P(e){e===B&&(B=e.l)}function j(e){return B={p:[],l:B,h:e,m:!0,_:0}}function x(e){var t=e[X];0===t.i||1===t.i?t.j():t.g=!0}function A(e,t){t._=t.p.length;var n=t.p[0],o=void 0!==e&&e!==n;return t.h.O||g("ES5").S(t,e,o),o?(n[X].P&&(E(t),r(4)),a(e)&&(e=C(t,e),t.l||T(t,e)),t.u&&g("Patches").M(n[X],e,t.u,t.s)):e=C(t,n,[]),E(t),t.u&&t.v(t.u,t.s),e!==W?e:void 0}function C(e,t,n){if(b(t))return t;var r=t[X];if(!r)return i(t,(function(o,a){return k(e,r,t,o,a,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return T(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=y(r.k):r.o;i(3===r.i?new Set(o):o,(function(t,a){return k(e,r,o,t,a,n)})),T(e,o,!1),n&&e.u&&g("Patches").R(r,n,e.u,e.s)}return r.o}function k(e,t,n,r,i,u){if(o(i)){var s=C(e,i,u&&t&&3!==t.i&&!c(t.D,r)?u.concat(r):void 0);if(l(n,r,s),!o(s))return;e.m=!1}if(a(i)&&!b(i)){if(!e.h.N&&e._<1)return;C(e,i),t&&t.A.l||T(e,i)}}function T(e,t,n){void 0===n&&(n=!1),e.h.N&&e.m&&m(t,n)}function N(e,t){var n=e[X];return(n?h(n):e)[t]}function D(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function R(e){e.P||(e.P=!0,e.l&&R(e.l))}function L(e){e.o||(e.o=y(e.t))}function I(e,t,n){var r=p(t)?g("MapSet").T(t,n):d(t)?g("MapSet").F(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:S(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,a=Y;n&&(o=[r],a=J);var i=Proxy.revocable(o,a),u=i.revoke,c=i.proxy;return r.k=c,r.j=u,c}(t,n):g("ES5").J(t,n);return(n?n.A:S()).p.push(r),r}function M(e){return o(e)||r(22,e),function e(t){if(!a(t))return t;var n,r=t[X],o=u(t);if(r){if(!r.P&&(r.i<4||!g("ES5").K(r)))return r.t;r.I=!0,n=_(t,o),r.I=!1}else n=_(t,o);return i(n,(function(t,o){r&&s(r.t,t)===o||l(n,t,e(o))})),3===o?new Set(n):n}(e)}function _(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return y(e)}function U(){function e(e,t){var n=a[e];return n?n.enumerable=t:a[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[X];return Y.get(t,e)},set:function(t){var n=this[X];Y.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][X];if(!o.P)switch(o.i){case 5:r(o)&&R(o);break;case 4:n(o)&&R(o)}}}function n(e){for(var t=e.t,n=e.k,r=H(n),o=r.length-1;o>=0;o--){var a=r[o];if(a!==X){var i=t[a];if(void 0===i&&!c(t,a))return!0;var u=n[a],s=u&&u[X];if(s?s.t!==i:!f(u,i))return!0}}var l=!!t[X];return r.length!==H(t).length+(l?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var a={};w("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var a=Q(n);delete a[X];for(var i=H(a),u=0;u<i.length;u++){var c=i[u];a[c]=e(c,t||!!a[c].enumerable)}return Object.create(Object.getPrototypeOf(n),a)}(r,t),a={i:r?5:4,A:n?n.A:S(),P:!1,I:!1,D:{},l:n,t:t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,X,{value:a,writable:!0}),o},S:function(e,n,a){a?o(n)&&n[X].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[X];if(n){var o=n.t,a=n.k,u=n.D,s=n.i;if(4===s)i(a,(function(t){t!==X&&(void 0!==o[t]||c(o,t)?u[t]||e(a[t]):(u[t]=!0,R(n)))})),i(o,(function(e){void 0!==a[e]||c(a,e)||(u[e]=!1,R(n))}));else if(5===s){if(r(n)&&(R(n),u.length=!0),a.length<o.length)for(var l=a.length;l<o.length;l++)u[l]=!1;else for(var f=o.length;f<a.length;f++)u[f]=!0;for(var p=Math.min(a.length,o.length),d=0;d<p;d++)void 0===u[d]&&e(a[d])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}var V,B,$="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),G="undefined"!=typeof Map,z="undefined"!=typeof Set,F="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,W=$?Symbol.for("immer-nothing"):((V={})["immer-nothing"]=!0,V),K=$?Symbol.for("immer-draftable"):"__$immer_draftable",X=$?Symbol.for("immer-state"):"__$immer_state",H=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),Q=Object.getOwnPropertyDescriptors||function(e){var t={};return H(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},q={},Y={get:function(e,t){if(t===X)return e;var n=h(e);if(!c(n,t))return function(e,t,n){var r,o=D(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!a(r)?r:r===N(e.t,t)?(L(e),e.o[t]=I(e.A.h,r,e)):r},has:function(e,t){return t in h(e)},ownKeys:function(e){return Reflect.ownKeys(h(e))},set:function(e,t,n){var r=D(h(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=N(h(e),t),a=null==o?void 0:o[X];if(a&&a.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(f(n,o)&&(void 0!==n||c(e.t,t)))return!0;L(e),R(e)}return e.o[t]=n,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==N(e.t,t)||t in e.t?(e.D[t]=!1,L(e),R(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=h(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){r(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){r(12)}},J={};i(Y,(function(e,t){J[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),J.deleteProperty=function(e,t){return Y.deleteProperty.call(this,e[0],t)},J.set=function(e,t,n){return Y.set.call(this,e[0],t,n,e[0])};var Z=new(function(){function e(e){this.O=F,this.N=!1,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var t=e.prototype;return t.produce=function(e,t,n){if("function"==typeof e&&"function"!=typeof t){var o=t;t=e;var i=this;return function(e){var n=this;void 0===e&&(e=o);for(var r=arguments.length,a=Array(r>1?r-1:0),u=1;u<r;u++)a[u-1]=arguments[u];return i.produce(e,(function(e){var r;return(r=t).call.apply(r,[n,e].concat(a))}))}}var u;if("function"!=typeof t&&r(6),void 0!==n&&"function"!=typeof n&&r(7),a(e)){var c=j(this),s=I(this,e,void 0),l=!0;try{u=t(s),l=!1}finally{l?E(c):P(c)}return"undefined"!=typeof Promise&&u instanceof Promise?u.then((function(e){return O(c,n),A(e,c)}),(function(e){throw E(c),e})):(O(c,n),A(u,c))}if(!e||"object"!=typeof e){if((u=t(e))===W)return;return void 0===u&&(u=e),this.N&&m(u,!0),u}r(21,e)},t.produceWithPatches=function(e,t){var n,r,o=this;return"function"==typeof e?function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(r))}))}:[this.produce(e,t,(function(e,t){n=e,r=t})),n,r]},t.createDraft=function(e){a(e)||r(8),o(e)&&(e=M(e));var t=j(this),n=I(this,e,void 0);return n[X].C=!0,P(t),n},t.finishDraft=function(e,t){var n=(e&&e[X]).A;return O(n,t),A(void 0,n)},t.setAutoFreeze=function(e){this.N=e},t.setUseProxies=function(e){e&&!F&&r(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var a=g("Patches").$;return o(e)?a(e,t):this.produce(e,(function(e){return a(e,t.slice(n+1))}))},e}()),ee=Z.produce,te=(Z.produceWithPatches.bind(Z),Z.setAutoFreeze.bind(Z),Z.setUseProxies.bind(Z),Z.applyPatches.bind(Z),Z.createDraft.bind(Z),Z.finishDraft.bind(Z),ee),ne=n(4);function re(e,t){return e===t}function oe(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}function ae(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}!function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r]}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:re,n=null,r=null;return function(){return oe(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}}));function ie(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var ue=ie();ue.withExtraArgument=ie;var ce=ue;function se(){return(se=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function le(e){return(le=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function fe(e,t){return(fe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function pe(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function de(e,t,n){return(de=pe()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&fe(o,n.prototype),o}).apply(null,arguments)}function he(e){var t="function"==typeof Map?new Map:void 0;return(he=function(e){if(null===e||!function(e){return-1!==Function.toString.call(e).indexOf("[native code]")}(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return de(e,arguments,le(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),fe(n,e)})(e)}n.d(t,"a",(function(){return ge})),n.d(t,"b",(function(){return xe})),n.d(t,"c",(function(){return Oe}));var ye="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?ne.d:ne.d.apply(null,arguments)};function me(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var ve=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.concat=function(){for(var t,n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return de(r,(t=e.prototype.concat).call.apply(t,[this].concat(o)))},o.prepend=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?de(r,t[0].concat(this)):de(r,t.concat(this))},r}(he(Array));function be(){return function(e){return function(e){void 0===e&&(e={});var t=e,n=t.thunk,r=void 0===n||n,o=(t.immutableCheck,t.serializableCheck,new ve);r&&(!function(e){return"boolean"==typeof e}(r)?o.push(ce.withExtraArgument(r.extraArgument)):o.push(ce));0;return o}(e)}}function ge(e){var t,n=be(),r=e||{},o=r.reducer,a=void 0===o?void 0:o,i=r.middleware,u=void 0===i?n():i,c=r.devTools,s=void 0===c||c,l=r.preloadedState,f=void 0===l?void 0:l,p=r.enhancers,d=void 0===p?void 0:p;if("function"==typeof a)t=a;else{if(!me(a))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=Object(ne.c)(a)}var h=ne.a.apply(void 0,"function"==typeof u?u(n):u),y=ne.d;s&&(y=ye(se({trace:!1},"object"==typeof s&&s)));var m=[h];Array.isArray(d)?m=[h].concat(d):"function"==typeof d&&(m=d(m));var v=y.apply(void 0,m);return Object(ne.e)(t,f,v)}function we(e,t){function n(){if(t){var n=t.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return se({type:e,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Se(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function Oe(e){var t=e.name,n=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var r=e.reducers||{},i=void 0===e.extraReducers?[]:"function"==typeof e.extraReducers?Se(e.extraReducers):[e.extraReducers],u=i[0],c=void 0===u?{}:u,s=i[1],l=void 0===s?[]:s,f=i[2],p=void 0===f?void 0:f,d=Object.keys(r),h={},y={},m={};d.forEach((function(e){var n,o,a=r[e],i=t+"/"+e;"reducer"in a?(n=a.reducer,o=a.prepare):n=a,h[e]=n,y[i]=n,m[e]=o?we(i,o):we(i)}));var v=function(e,t,n,r){void 0===n&&(n=[]);var i="function"==typeof t?Se(t):[t,n,r],u=i[0],c=i[1],s=i[2];return function(t,n){void 0===t&&(t=e);var r=[u[n.type]].concat(c.filter((function(e){return(0,e.matcher)(n)})).map((function(e){return e.reducer})));return 0===r.filter((function(e){return!!e})).length&&(r=[s]),r.reduce((function(e,t){if(t){if(o(e)){var r=t(e,n);return void 0===r?e:r}if(a(e))return te(e,(function(e){return t(e,n)}));var i=t(e,n);if(void 0===i)throw Error("A case reducer on a non-draftable value must not return undefined");return i}return e}),t)}}(n,se({},c,{},y),l,p);return{name:t,reducer:v,actions:m,caseReducers:h}}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var Ee=["name","message","stack","code"],Pe=function(e){this.value=e},je=function(e){if("object"==typeof e&&null!==e){var t={},n=Ee,r=Array.isArray(n),o=0;for(n=r?n:n[Symbol.iterator]();;){var a;if(r){if(o>=n.length)break;a=n[o++]}else{if((o=n.next()).done)break;a=o.value}var i=a;"string"==typeof e[i]&&(t[i]=e[i])}return t}return{message:String(e)}};function xe(e,t,n){var r=we(e+"/fulfilled",(function(e,t,n){return{payload:e,meta:{arg:n,requestId:t}}})),o=we(e+"/pending",(function(e,t){return{payload:void 0,meta:{arg:t,requestId:e}}})),a=we(e+"/rejected",(function(e,t,n,r){var o=!!e&&"AbortError"===e.name,a=!!e&&"ConditionError"===e.name;return{payload:r,error:je(e||"Rejected"),meta:{arg:n,requestId:t,aborted:o,condition:a}}})),i="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return e.prototype.abort=function(){0},e}();return Object.assign((function(e){return function(u,c,s){var l,f=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t}(),p=new i,d=new Promise((function(e,t){return p.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:l||"Aborted"})}))})),h=!1;var y=function(){try{var i,l=function(e){return y?e:(n&&!n.dispatchConditionRejection&&a.match(i)&&i.meta.condition||u(i),i)},y=!1,m=function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){if(n&&n.condition&&!1===n.condition(e,{getState:c,extra:s}))throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return h=!0,u(o(f,e)),Promise.resolve(Promise.race([d,Promise.resolve(t(e,{dispatch:u,getState:c,extra:s,requestId:f,signal:p.signal,rejectWithValue:function(e){return new Pe(e)}})).then((function(t){return t instanceof Pe?a(null,f,e,t.value):r(t,f,e)}))])).then((function(e){i=e}))}),(function(t){i=a(t,f,e)}));return Promise.resolve(m&&m.then?m.then(l):l(m))}catch(e){return Promise.reject(e)}}();return Object.assign(y,{abort:function(e){h&&(l=e,p.abort())}})}}),{pending:o,rejected:a,fulfilled:r,typePrefix:e})}U()},function(e,t,n){"use strict";e.exports=function(){}},function(e,t){e.exports=ReactRouterDOM},function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return f})),n.d(t,"c",(function(){return s})),n.d(t,"d",(function(){return y})),n.d(t,"e",(function(){return u}));var r=n(10),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},a={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function i(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var c=e,s=t,l=[],f=l,p=!1;function d(){f===l&&(f=l.slice())}function h(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function y(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return d(),f.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,d();var n=f.indexOf(e);f.splice(n,1),l=null}}}function m(e){if(!i(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,s=c(s,e)}finally{p=!1}for(var t=l=f,n=0;n<t.length;n++){(0,t[n])()}return e}function v(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,m({type:a.REPLACE})}function b(){var e,t=y;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return m({type:a.INIT}),(o={dispatch:m,subscribe:y,getState:h,replaceReducer:v})[r.a]=b,o}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,u=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:a.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<u.length;a++){var s=u[a],l=n[s],f=e[s],p=l(f,t);if(void 0===p){var d=c(s,t);throw new Error(d)}o[s]=p,r=r||p!==f}return(r=r||u.length!==Object.keys(e).length)?o:e}}function l(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=l(o,t))}return n}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(n,!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function y(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return h({},n,{dispatch:r=y.apply(void 0,a)(n.dispatch)})}}}},function(e,t,n){"use strict";t.decode=t.parse=n(22),t.encode=t.stringify=n(23)},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,u){if(!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,a,i,u],l=0;(c=new Error(t.replace(/%s/g,(function(){return s[l++]})))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";e.exports=n(27)},function(e,t,n){"use strict";var r=n(8),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function c(e){return r.isMemo(e)?i:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=i;var s=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var i=l(n);f&&(i=i.concat(f(n)));for(var u=c(t),y=c(n),m=0;m<i.length;++m){var v=i[m];if(!(a[v]||r&&r[v]||y&&y[v]||u&&u[v])){var b=p(n,v);try{s(t,v,b)}catch(e){}}}}return t}},function(e,t,n){"use strict";(function(e,r){var o,a=n(20);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(21),n(28)(e))},function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=(n(24),o.a.createContext(null));var i=function(e){e()},u={notify:function(){}};function c(){var e=i,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var s=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=u,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=c())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=u)},e}();var l=function(e){var t=e.store,n=e.context,i=e.children,u=Object(r.useMemo)((function(){var e=new s(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),c=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=u.subscription;return e.trySubscribe(),c!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[u,c]);var l=n||a;return o.a.createElement(l.Provider,{value:u},i)};n(9),n(8);var f="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;n(4);function p(){return Object(r.useContext)(a)}function d(e){void 0===e&&(e=a);var t=e===a?p:function(){return Object(r.useContext)(e)};return function(){return t().store}}var h=d();function y(e){void 0===e&&(e=a);var t=e===a?h:d(e);return function(){return t().dispatch}}var m=y(),v=function(e,t){return e===t};function b(e){void 0===e&&(e=a);var t=e===a?p:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=v);var o=t(),a=function(e,t,n,o){var a,i=Object(r.useReducer)((function(e){return e+1}),0)[1],u=Object(r.useMemo)((function(){return new s(n,o)}),[n,o]),c=Object(r.useRef)(),l=Object(r.useRef)(),p=Object(r.useRef)(),d=Object(r.useRef)(),h=n.getState();try{a=e!==l.current||h!==p.current||c.current?e(h):d.current}catch(e){throw c.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+c.current.stack+"\n\n"),e}return f((function(){l.current=e,p.current=h,d.current=a,c.current=void 0})),f((function(){function e(){try{var e=l.current(n.getState());if(t(e,d.current))return;d.current=e}catch(e){c.current=e}i()}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),a}(e,n,o.store,o.subscription);return Object(r.useDebugValue)(a),a}}var g,w=b(),S=n(6);n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return m})),n.d(t,"c",(function(){return w})),g=S.unstable_batchedUpdates,i=g},function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return l})),n.d(t,"c",(function(){return f}));var r=n(1),o=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},i=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},u=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e},c=Object(r.b)("Companys/FetchCompanyTypes",(function(e,t){t.dispatch;return o(void 0,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,$.ajax({type:"GET",url:homePath+"api/SystemCenter/CompanyType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})];case 1:return[2,e.sent()]}}))}))})),s=Object(r.c)({name:"CompanyType",initialState:{Status:"unintiated",CompanyType:[],Error:null},reducers:{},extraReducers:function(e){e.addCase(c.fulfilled,(function(e,t){var n;e.Status="idle",e.Error=null,(n=e.CompanyType).push.apply(n,u(t.payload)),c()})),e.addCase(c.pending,(function(e,t){e.Status="loading"})),e.addCase(c.rejected,(function(e,t){e.Status="error",e.Error=t.error.message}))}});s.actions;t.d=s.reducer;var l=function(e){return e.CompanyType.CompanyType},f=function(e){return e.CompanyType.Status}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return s}));var r=n(1),o=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},i=Object(r.b)("Meter/FetchMeter",(function(e,t){t.dispatch;return o(void 0,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Meter",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})];case 1:return[2,e.sent()]}}))}))})),u=Object(r.c)({name:"Meter",initialState:{Status:"unintiated",Error:null,Data:[]},reducers:{},extraReducers:function(e){e.addCase(i.fulfilled,(function(e,t){e.Status="idle",e.Error=null,e.Data=t.payload})),e.addCase(i.pending,(function(e,t){e.Status="loading"})),e.addCase(i.rejected,(function(e,t){e.Status="error",e.Error=t.error.message}))}});u.actions;t.d=u.reducer;var c=function(e){return e.Meter.Status},s=function(e){return e.Meter.Data.map((function(e){return e.AssetKey.toLowerCase()}))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"d",(function(){return c})),n.d(t,"c",(function(){return s})),n.d(t,"b",(function(){return l}));var r=n(1),o=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},i=Object(r.b)("Location/FetchLocation",(function(e,t){t.dispatch;return o(void 0,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Location",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})];case 1:return[2,e.sent()]}}))}))})),u=Object(r.c)({name:"Location",initialState:{Status:"unintiated",Error:null,Data:[]},reducers:{},extraReducers:function(e){e.addCase(i.fulfilled,(function(e,t){e.Status="idle",e.Error=null,e.Data=t.payload})),e.addCase(i.pending,(function(e,t){e.Status="loading"})),e.addCase(i.rejected,(function(e,t){e.Status="error",e.Error=t.error.message}))}});u.actions;t.e=u.reducer;var c=function(e){return e.Location.Data},s=function(e){return e.Location.Status},l=function(e){return e.Location.Data.map((function(e){return e.LocationKey.toLowerCase()}))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return s}));var r=n(1),o=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},i=Object(r.b)("Asset/FetchAsset",(function(e,t){t.dispatch;return o(void 0,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})];case 1:return[2,e.sent()]}}))}))})),u=Object(r.c)({name:"Asset",initialState:{Status:"unintiated",Error:null,Data:[]},reducers:{},extraReducers:function(e){e.addCase(i.fulfilled,(function(e,t){e.Status="idle",e.Error=null,e.Data=t.payload})),e.addCase(i.pending,(function(e,t){e.Status="loading"})),e.addCase(i.rejected,(function(e,t){e.Status="error",e.Error=t.error.message}))}});u.actions;t.d=u.reducer;var c=function(e){return e.Asset.Data},s=function(e){return e.Asset.Status}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return s}));var r=n(1),o=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},i=Object(r.b)("MeasurementType/FetchMeasurementType",(function(e,t){t.dispatch;return o(void 0,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,$.ajax({type:"GET",url:homePath+"api/OpenXDA/MeasurementType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})];case 1:return[2,e.sent()]}}))}))})),u=Object(r.c)({name:"MeasurementType",initialState:{Status:"unintiated",Error:null,Data:[]},reducers:{},extraReducers:function(e){e.addCase(i.fulfilled,(function(e,t){e.Status="idle",e.Error=null,e.Data=t.payload})),e.addCase(i.pending,(function(e,t){e.Status="loading"})),e.addCase(i.rejected,(function(e,t){e.Status="error",e.Error=t.error.message}))}});u.actions;t.d=u.reducer;var c=function(e){return e.MeasurementType.Data},s=function(e){return e.MeasurementType.Status}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return s}));var r=n(1),o=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},i=Object(r.b)("Phase/FetchPhase",(function(e,t){t.dispatch;return o(void 0,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Phase",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})];case 1:return[2,e.sent()]}}))}))})),u=Object(r.c)({name:"Phase",initialState:{Status:"unintiated",Error:null,Data:[]},reducers:{},extraReducers:function(e){e.addCase(i.fulfilled,(function(e,t){e.Status="idle",e.Error=null,e.Data=t.payload})),e.addCase(i.pending,(function(e,t){e.Status="loading"})),e.addCase(i.rejected,(function(e,t){e.Status="error",e.Error=t.error.message}))}});u.actions;t.d=u.reducer;var c=function(e){return e.Phase.Data},s=function(e){return e.Phase.Status}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return s}));var r=n(1),o=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},i=Object(r.b)("AssetType/FetchAssetType",(function(e,t){t.dispatch;return o(void 0,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,$.ajax({type:"GET",url:homePath+"api/OpenXDA/AssetType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})];case 1:return[2,e.sent()]}}))}))})),u=Object(r.c)({name:"AssetType",initialState:{Status:"unintiated",Error:null,Data:[]},reducers:{},extraReducers:function(e){e.addCase(i.fulfilled,(function(e,t){e.Status="idle",e.Error=null,e.Data=t.payload})),e.addCase(i.pending,(function(e,t){e.Status="loading"})),e.addCase(i.rejected,(function(e,t){e.Status="error",e.Error=t.error.message}))}});u.actions;t.d=u.reducer;var c=function(e){return e.AssetType.Data},s=function(e){return e.AssetType.Status}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return c})),n.d(t,"b",(function(){return s}));var r=n(1),o=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},a=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},i=Object(r.b)("AssetConnectionType/FetchAssetConnectionType",(function(e,t){t.dispatch;return o(void 0,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,$.ajax({type:"GET",url:homePath+"api/OpenXDA/AssetConnectionType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})];case 1:return[2,e.sent()]}}))}))})),u=Object(r.c)({name:"AssetConnectionType",initialState:{Status:"unintiated",Error:null,Data:[]},reducers:{},extraReducers:function(e){e.addCase(i.fulfilled,(function(e,t){e.Status="idle",e.Error=null,e.Data=t.payload})),e.addCase(i.pending,(function(e,t){e.Status="loading"})),e.addCase(i.rejected,(function(e,t){e.Status="error",e.Error=t.error.message}))}});u.actions;t.d=u.reducer;var c=function(e){return e.AssetConnectionType.Data},s=function(e){return e.AssetConnectionType.Status}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,a){t=t||"&",n=n||"=";var i={};if("string"!=typeof e||0===e.length)return i;var u=/\+/g;e=e.split(t);var c=1e3;a&&"number"==typeof a.maxKeys&&(c=a.maxKeys);var s=e.length;c>0&&s>c&&(s=c);for(var l=0;l<s;++l){var f,p,d,h,y=e[l].replace(u,"%20"),m=y.indexOf(n);m>=0?(f=y.substr(0,m),p=y.substr(m+1)):(f=y,p=""),d=decodeURIComponent(f),h=decodeURIComponent(p),r(i,d)?o(i[d])?i[d].push(h):i[d]=[i[d],h]:i[d]=h}return i};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";var r=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,u){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?a(i(e),(function(i){var u=encodeURIComponent(r(i))+n;return o(e[i])?a(e[i],(function(e){return u+encodeURIComponent(r(e))})).join(t):u+encodeURIComponent(r(e[i]))})).join(t):u?encodeURIComponent(r(u))+n+encodeURIComponent(r(e)):""};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function a(e,t){if(e.map)return e.map(t);for(var n=[],r=0;r<e.length;r++)n.push(t(e[r],r));return n}var i=Object.keys||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.push(n);return t}},function(e,t,n){e.exports=n(25)()},function(e,t,n){"use strict";var r=n(26);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,c=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,y=r?Symbol.for("react.suspense_list"):60120,m=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,g=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,S=r?Symbol.for("react.scope"):60119;function O(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case i:case c:case u:case h:return e;default:switch(e=e&&e.$$typeof){case l:case d:case v:case m:case s:return e;default:return t}}case a:return t}}}function E(e){return O(e)===p}t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=l,t.ContextProvider=s,t.Element=o,t.ForwardRef=d,t.Fragment=i,t.Lazy=v,t.Memo=m,t.Portal=a,t.Profiler=c,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return E(e)||O(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return O(e)===l},t.isContextProvider=function(e){return O(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return O(e)===d},t.isFragment=function(e){return O(e)===i},t.isLazy=function(e){return O(e)===v},t.isMemo=function(e){return O(e)===m},t.isPortal=function(e){return O(e)===a},t.isProfiler=function(e){return O(e)===c},t.isStrictMode=function(e){return O(e)===u},t.isSuspense=function(e){return O(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===p||e===c||e===u||e===h||e===y||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===s||e.$$typeof===l||e.$$typeof===d||e.$$typeof===g||e.$$typeof===w||e.$$typeof===S||e.$$typeof===b)},t.typeOf=O},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n(6),a=n(3),i=n(5),u=n.n(i),c=n(2),s=n.n(c),l=n(7),f=n.n(l);function p(e){return"/"===e.charAt(0)}function d(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&p(e),a=t&&p(t),i=o||a;if(e&&p(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var u=void 0;if(r.length){var c=r[r.length-1];u="."===c||".."===c||""===c}else u=!1;for(var s=0,l=r.length;l>=0;l--){var f=r[l];"."===f?d(r,l):".."===f?(d(r,l),s++):s&&(d(r,l),s--)}if(!i)for(;s--;s)r.unshift("..");!i||""===r[0]||r[0]&&p(r[0])||r.unshift("");var h=r.join("/");return u&&"/"!==h.substr(-1)&&(h+="/"),h};"function"==typeof Symbol&&Symbol.iterator;var y=function(e){return"/"===e.charAt(0)?e:"/"+e},m=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},v=function(e,t){return m(e,t)?e.substr(t.length):e},b=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},g=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},w=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},S=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=w({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=h(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},O=function(){var e=null,t=[];return{setPrompt:function(t){return s()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):(s()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}},E=!("undefined"==typeof window||!window.document||!window.document.createElement),P=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},j=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},x=function(e,t){return t(window.confirm(e))},A=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},C=function(){return-1===window.navigator.userAgent.indexOf("Trident")},k=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")},T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},D=function(){try{return window.history.state||{}}catch(e){return{}}},R=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};f()(E,"Browser history needs a DOM");var t=window.history,n=A(),r=!C(),o=e.forceRefresh,a=void 0!==o&&o,i=e.getUserConfirmation,u=void 0===i?x:i,c=e.keyLength,l=void 0===c?6:c,p=e.basename?b(y(e.basename)):"",d=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return s()(!p||m(a,p),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+p+'".'),p&&(a=v(a,p)),S(a,r,n)},h=function(){return Math.random().toString(36).substr(2,l)},w=O(),R=function(e){N(J,e),J.length=t.length,w.notifyListeners(J.location,J.action)},L=function(e){k(e)||_(d(e.state))},I=function(){_(d(D()))},M=!1,_=function(e){if(M)M=!1,R();else{w.confirmTransitionTo(e,"POP",u,(function(t){t?R({action:"POP",location:e}):U(e)}))}},U=function(e){var t=J.location,n=B.indexOf(t.key);-1===n&&(n=0);var r=B.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(M=!0,F(o))},V=d(D()),B=[V.key],$=function(e){return p+g(e)},G=function(e,r){s()(!("object"===(void 0===e?"undefined":T(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=S(e,r,h(),J.location);w.confirmTransitionTo(o,"PUSH",u,(function(e){if(e){var r=$(o),i=o.key,u=o.state;if(n)if(t.pushState({key:i,state:u},null,r),a)window.location.href=r;else{var c=B.indexOf(J.location.key),l=B.slice(0,-1===c?0:c+1);l.push(o.key),B=l,R({action:"PUSH",location:o})}else s()(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}}))},z=function(e,r){s()(!("object"===(void 0===e?"undefined":T(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=S(e,r,h(),J.location);w.confirmTransitionTo(o,"REPLACE",u,(function(e){if(e){var r=$(o),i=o.key,u=o.state;if(n)if(t.replaceState({key:i,state:u},null,r),a)window.location.replace(r);else{var c=B.indexOf(J.location.key);-1!==c&&(B[c]=o.key),R({action:"REPLACE",location:o})}else s()(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}}))},F=function(e){t.go(e)},W=function(){return F(-1)},K=function(){return F(1)},X=0,H=function(e){1===(X+=e)?(P(window,"popstate",L),r&&P(window,"hashchange",I)):0===X&&(j(window,"popstate",L),r&&j(window,"hashchange",I))},Q=!1,q=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=w.setPrompt(e);return Q||(H(1),Q=!0),function(){return Q&&(Q=!1,H(-1)),t()}},Y=function(e){var t=w.appendListener(e);return H(1),function(){H(-1),t()}},J={length:t.length,action:"POP",location:V,createHref:$,push:G,replace:z,go:F,goBack:W,goForward:K,block:q,listen:Y};return J},L=(Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign,n(11)),I=n(1),M=n(12),_=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((r=r.apply(e,t||[])).next())}))},U=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},V=Object(I.b)("ValueList/FetchValueList",(function(e,t){t.dispatch;return _(void 0,void 0,void 0,(function(){return U(this,(function(t){switch(t.label){case 0:return[4,(n=e.group,$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+n,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}))];case 1:return[2,t.sent()]}var n}))}))})),B=Object(I.c)({name:"ValueList",initialState:{},reducers:{},extraReducers:function(e){e.addCase(V.fulfilled,(function(e,t){void 0===e[t.meta.arg.group]&&(e[t.meta.arg.group]={Status:"unitiated",Data:[],Error:null}),e[t.meta.arg.group].Status="idle",e[t.meta.arg.group].Error=null,e[t.meta.arg.group].Data=t.payload.sort((function(e,t){return e.SortOrder-t.SortOrder}))})),e.addCase(V.pending,(function(e,t){void 0===e[t.meta.arg.group]&&(e[t.meta.arg.group]={Status:"unitiated",Data:[],Error:null}),e[t.meta.arg.group].Status="loading"})),e.addCase(V.rejected,(function(e,t){void 0===e[t.meta.arg.group]&&(e[t.meta.arg.group]={Status:"unitiated",Data:[],Error:null}),e[t.meta.arg.group].Status="error",e[t.meta.arg.group].Error=t.error.message}))}}),G=(B.actions,B.reducer);var z=n(16),F=n(17),W=n(18),K=n(19),X=n(13),H=n(14),Q=n(15),q=Object(I.a)({reducer:{CompanyType:M.d,ValueList:G,MeasurementType:z.d,Phase:F.d,AssetType:W.d,AssetConnectionType:K.d,Meter:X.d,Asset:Q.d,Location:H.e}}),Y=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},J=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i};o.render(r.createElement(L.a,{store:q},r.createElement((function(e){var t=R(),o=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(13)]).then(n.bind(null,314))})),i=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(3),n.e(12)]).then(n.bind(null,315))})),c=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(3),n.e(8)]).then(n.bind(null,316))})),s=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(11)]).then(n.bind(null,317))})),l=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(5),n.e(14)]).then(n.bind(null,318))})),f=r.lazy((function(){return Promise.all([n.e(0),n.e(23)]).then(n.bind(null,319))})),p=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(3),n.e(17)]).then(n.bind(null,329))})),d=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(5),n.e(22)]).then(n.bind(null,330))})),h=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(3),n.e(6)]).then(n.bind(null,324))})),y=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(3),n.e(20)]).then(n.bind(null,325))})),m=r.lazy((function(){return Promise.all([n.e(0),n.e(16)]).then(n.bind(null,320))})),v=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(3),n.e(19)]).then(n.bind(null,326))})),b=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(3),n.e(18)]).then(n.bind(null,328))})),g=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(4),n.e(9)]).then(n.bind(null,321))})),w=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(4),n.e(7)]).then(n.bind(null,327))})),S=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(10)]).then(n.bind(null,322))})),O=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(3),n.e(15)]).then(n.bind(null,331))})),E=r.lazy((function(){return Promise.all([n.e(0),n.e(1),n.e(2),n.e(10)]).then(n.bind(null,323))})),P=J(r.useState([]),2),j=P[0],x=P[1],A=J(r.useReducer((function(e){return e+1}),0),2),C=(A[0],A[1]);return r.useEffect((function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/SecurityRoles",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return e.done((function(e){return x(e)})),window.addEventListener("resize",(function(e){return C(1)})),function(){null!=e.abort&&e.abort(),window.removeEventListener("resize",(function(e){}))}}),[]),0==Object.keys(u.a.parse(t.location.search)).length&&t.push({pathname:homePath+"index.cshtml",search:"name=Meters",state:{}}),r.createElement(a.BrowserRouter,null,r.createElement("nav",{className:"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow",style:{height:75}},r.createElement("a",{className:"col-sm-3 col-md-2 mr-0",style:{textAlign:"center"},href:"https://www.gridprotectionalliance.org"},r.createElement("img",{style:{width:"100%",margin:-5},src:"../Images/SystemCenter-TopLeft.png"})),r.createElement("ul",{className:"navbar-nav px-3"},r.createElement("li",{className:"nav-item text-nowrap"},r.createElement("a",{className:"nav-link",href:"./@GSF/Web/Security/Views/Login.cshtml?logout=yes"},"Sign out")))),r.createElement("div",{className:"container-fluid",style:{top:75,position:"absolute",width:"100%",height:"calc(100% - 75px)",overflow:"hidden"}},r.createElement("div",{className:"row",style:{height:"100%"}},r.createElement("nav",{className:"col bg-light sidebar",style:{maxWidth:250}},r.createElement("div",{className:"sidebar-sticky"},r.createElement("div",{style:{width:"100%",marginTop:5,textAlign:"center"}},r.createElement("h3",null,"System Center")),r.createElement("hr",null),r.createElement("h6",{style:{fontWeight:"bold",marginLeft:10},className:"sidebar-heading"},"Monitors and Assets"),r.createElement("ul",{style:{marginLeft:10},className:"nav flex-column"},r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{activeClassName:"nav-link active",className:"nav-link",isActive:function(e,t){return t.pathname+t.search==controllerViewPath+"?name=Meters"},to:controllerViewPath+"?name=Meters"},"Meters")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{activeClassName:"nav-link active",className:"nav-link",isActive:function(e,t){return t.pathname+t.search==controllerViewPath+"?name=Locations"},to:controllerViewPath+"?name=Locations"},"Substations")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{activeClassName:"nav-link active",className:"nav-link",isActive:function(e,t){return t.pathname+t.search==controllerViewPath+"?name=Assets"},to:controllerViewPath+"?name=Assets"},"Transmission Assets")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{activeClassName:"nav-link active",className:"nav-link",isActive:function(e,t){return t.pathname+t.search==controllerViewPath+"?name=AssetGroups"},to:controllerViewPath+"?name=AssetGroups"},"Asset Groups"))),r.createElement("hr",null),r.createElement("h6",{style:{fontWeight:"bold",marginLeft:10},className:"sidebar-heading"},"External Links"),r.createElement("ul",{style:{marginLeft:10},className:"nav flex-column"},r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{activeClassName:"nav-link active",className:"nav-link",isActive:function(e,t){return t.pathname+t.search==controllerViewPath+"?name=Companies"},to:controllerViewPath+"?name=Companies"},"Companies")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{activeClassName:"nav-link active",className:"nav-link",isActive:function(e,t){return t.pathname+t.search==controllerViewPath+"?name=PQViewCustomers"},to:controllerViewPath+"?name=PQViewCustomers"},"PQView Customer Access")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{activeClassName:"nav-link active",className:"nav-link",isActive:function(e,t){return t.pathname+t.search==controllerViewPath+"?name=PQViewSites"},to:controllerViewPath+"?name=PQViewSites"},"PQView Sites"))),r.createElement("hr",null),r.createElement("h6",{style:{fontWeight:"bold",marginLeft:10},className:"sidebar-heading",hidden:j.indexOf("Administrator")<0},"System Settings"),r.createElement("ul",{style:{marginLeft:10},className:"nav flex-column",hidden:j.indexOf("Administrator")<0},r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{activeClassName:"nav-link active",className:"nav-link",isActive:function(e,t){return t.pathname+t.search==controllerViewPath+"?name=ValueLists"},to:controllerViewPath+"?name=ValueLists"},"Value Lists"))),r.createElement("hr",null),r.createElement("h6",{style:{fontWeight:"bold",marginLeft:10},className:"sidebar-heading",hidden:j.indexOf("Administrator")<0},"User Settings"),r.createElement("ul",{style:{marginLeft:10},className:"nav flex-column",hidden:j.indexOf("Administrator")<0},r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{activeClassName:"nav-link active",className:"nav-link",isActive:function(e,t){return t.pathname+t.search==controllerViewPath+"?name=UserStatistics"},to:controllerViewPath+"?name=UserStatistics"},"User Statistics")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{activeClassName:"nav-link active",className:"nav-link",isActive:function(e,t){return t.pathname+t.search==controllerViewPath+"?name=Users"},to:controllerViewPath+"?name=Users"},"Users")),r.createElement("li",{className:"nav-item"},r.createElement(a.NavLink,{activeClassName:"nav-link active",className:"nav-link",isActive:function(e,t){return t.pathname+t.search==controllerViewPath+"?name=Settings"},to:controllerViewPath+"?name=Settings"},"Settings"))),r.createElement("div",{style:{width:"100%",textAlign:"center",position:"absolute",bottom:50}},r.createElement("span",null,"Version ",version),r.createElement("br",null),r.createElement("span",null)))),r.createElement("div",{className:"col",style:{width:"100%",height:"inherit",padding:"0 0 0 0",overflow:"hidden"}},r.createElement(r.Suspense,{fallback:r.createElement("div",null,"Loading...")},r.createElement(a.Switch,null,r.createElement(a.Route,{children:function(e){e.match;var t=Y(e,["match"]),n=u.a.parse(t.location.search);return null==n["?name"]||"Meters"==n["?name"]?r.createElement(o,{Roles:j}):"Locations"==n["?name"]?r.createElement(i,{Roles:j}):"Assets"==n["?name"]?r.createElement(c,{Roles:j}):"AssetGroups"==n["?name"]?r.createElement(g,{Roles:j}):"Users"==n["?name"]?r.createElement(l,{Roles:j}):"Companies"==n["?name"]?r.createElement(S,{Roles:j}):"User"==n["?name"]?r.createElement(d,{UserID:n.UserAccountID}):"UserStatistics"==n["?name"]?r.createElement(f,{Roles:j}):"Meter"==n["?name"]?r.createElement(v,{MeterID:parseInt(n.MeterID)}):"Location"==n["?name"]?r.createElement(b,{LocationID:parseInt(n.LocationID)}):"Asset"==n["?name"]?r.createElement(h,{AssetID:parseInt(n.AssetID)}):"AssetGroup"==n["?name"]?r.createElement(w,{AssetGroupID:parseInt(n.AssetGroupID)}):"Customer"==n["?name"]?r.createElement(p,{CustomerID:parseInt(n.CustomerID)}):"Company"==n["?name"]?r.createElement(O,{CompanyID:parseInt(n.CompanyID)}):"PQViewSites"==n["?name"]?r.createElement("iframe",{style:{width:"100%",height:"100%"},src:homePath+"PQViewDataLoader.cshtml"}):"PQViewCustomers"==n["?name"]?r.createElement(s,{Roles:j}):"NewMeterWizard"==n["?name"]?r.createElement(y,null):"Settings"==n["?name"]?r.createElement(E,{Roles:j}):null}}),r.createElement(a.Route,{children:function(e){e.match;var t=Y(e,["match"]);return j.indexOf("Administrator")<0?null:"ValueLists"==u.a.parse(t.location.search)["?name"]?r.createElement("iframe",{style:{width:"100%",height:"100%"},src:homePath+"ValueListGroups.cshtml"}):null}}),r.createElement(a.Route,{children:function(e){e.match;var t=Y(e,["match"]);return j.indexOf("Administrator")<0&&j.indexOf("Transmission SME")<0?null:"ConfigurationHistory"==u.a.parse(t.location.search)["?name"]?r.createElement(m,{MeterConfigurationID:parseInt(u.a.parse(t.location.search).MeterConfigurationID),MeterKey:u.a.parse(t.location.search).MeterKey}):null}})))))))}),null)),document.getElementById("window"))},function(e,t){e.exports=d3}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
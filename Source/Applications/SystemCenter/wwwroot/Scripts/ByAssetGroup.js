(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{321:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n(39),s=n.n(r),o=n(31),l=n(3),i=n(88),u=n(38),c=n(35),d=function(){return(d=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},p=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,r,s=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=s.next()).done;)o.push(a.value)}catch(e){r={error:e}}finally{try{a&&!a.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}return o},m=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(p(arguments[t]));return e},h=[{label:"Name",key:"Name",type:"string"},{label:"Number of Meter",key:"Meters",type:"integer"},{label:"Number of Transmission Assets",key:"Assets",type:"integer"},{label:"Number of Users",key:"Users",type:"integer"},{label:"Show in PQ Dashboard",key:"DisplayDashboard",type:"boolean"}],f={ID:-1,Name:"",DisplayDashboard:!0,AssetGroups:0,Meters:0,Assets:0,Users:0,MeterList:[],AssetList:[],UserList:[],AssetGroupList:[]};t.default=function(e){var t=Object(l.useHistory)(),n=p(a.useState([]),2),r=n[0],y=n[1],b=p(a.useState([]),2),S=b[0],A=b[1],w=p(a.useState("Name"),2),N=w[0],g=w[1],E=p(a.useState(!0),2),L=E[0],k=E[1],C=p(a.useState(h),2),D=C[0],v=(C[1],p(a.useState("Idle"),2)),G=v[0],x=v[1],T=p(a.useState(o.cloneDeep(f)),2),M=T[0],O=T[1],j=p(a.useState([]),2),I=j[0],F=j[1],P=p(a.useState(!1),2),R=P[0],U=P[1],V=p(a.useState(!1),2),B=V[0],J=V[1],q=p(a.useState(!1),2),z=q[0],X=q[1],H=p(a.useState(!1),2),Q=H[0],W=H[1];a.useEffect((function(){var e=$.ajax({type:"GET",url:homePath+"api/OpenXDA/AssetGroup",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return e.done((function(e){return F(e)})),function(){null!=e.abort&&e.abort()}}),[]),a.useEffect((function(){var e=function(){x("Loading");var e=r.map((function(e){return-1==h.findIndex((function(t){return t.key==e.FieldName}))?d(d({},e),{isPivotColumn:!0}):e}));return $.ajax({type:"Post",url:homePath+"api/OpenXDA/AssetGroup/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:e,OrderBy:N,Ascending:L}),cache:!1,async:!0})}();return e.done((function(e){x("Idle"),A(JSON.parse(e))})).fail((function(e){return x("Error")})),function(){null!=e.abort&&e.abort()}}),[r,L,N]);return a.createElement(a.Fragment,null,a.createElement("div",{style:{width:"100%",height:"100%"}},a.createElement(u.SearchBar,{CollumnList:D,SetFilter:function(e){return y(e)},Direction:"left",defaultCollumn:{label:"Name",key:"Name",type:"string"},Width:"50%",Label:"Search",ShowLoading:"Loading"==G,ResultNote:"Error"==G?"Could not complete Search":"Found "+S.length+" Locations",GetEnum:function(e,t){var n=null;return"enum"!=t.type||null==t.enum||1!=t.enum.length?function(){}:((n=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+t.enum[0].Value,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return e(t.map((function(e){return{Value:e.Value.toString(),Label:e.Text}})))})),function(){null!=n&&null==n.abort&&n.abort()})}},a.createElement("li",{className:"nav-item",style:{width:"15%",paddingRight:10}},a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Actions:"),a.createElement("form",null,a.createElement("div",{className:"form-group"},a.createElement("button",{className:"btn btn-primary",hidden:e.Roles.indexOf("Administrator")<0&&e.Roles.indexOf("Transmission SME")<0,onClick:function(e){U(!0)}},"Add New AssetGroup")))))),a.createElement("div",{style:{width:"100%",height:"calc( 100% - 180px)"}},a.createElement(s.a,{cols:[{key:"Name",label:"Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Assets",label:"Num. of Assets",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Meters",label:"Num. of Meters",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Users",label:"Num. of Users",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"AssetGroups",label:"Num. of Asset Groups",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}],tableClass:"table table-hover",data:S,sortField:N,ascending:L,onSort:function(e){e.col==N?k(!L):(k(!0),g(e.col))},onClick:function(e){t.push({pathname:homePath+"index.cshtml",search:"?name=AssetGroup&AssetGroupID="+e.row.ID,state:{}})},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}}))),a.createElement(u.Modal,{Size:"xlg",Show:R,Title:"Create a New AssetGroup",ShowX:!0,CancelText:"Close",CancelBtnClass:"btn-danger",ConfirmBtnClass:"btn-success",ConfirmText:"Add",CallBack:function(e){e?$.ajax({type:"POST",url:homePath+"api/OpenXDA/Assetgroup/Add",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(M),cache:!1,async:!0}).done((function(e){sessionStorage.clear(),t.push({pathname:homePath+"index.cshtml",search:"?name=AssetGroup&AssetGroupID="+e.ID,state:{}})})).fail((function(e){500==e.status&&alert(e.responseJSON.ExceptionMessage)})):O(o.cloneDeep(f)),U(!1)}},a.createElement("div",{className:"row"},a.createElement("div",{className:"col"},a.createElement(c.Input,{Record:M,Field:"Name",Label:"Name",Feedback:"A unique name of less than 50 characters is required.",Valid:function(e){return"Name"!=e||null!=M.Name&&0!=M.Name.length&&I.map((function(e){return e.Name.toLowerCase()})).indexOf(M.Name.toLowerCase())<0},Setter:O,Disabled:!1}),a.createElement(c.CheckBox,{Record:M,Field:"DisplayDashboard",Label:"Show Asset Group in Dashboard",Setter:O,Disabled:!1})),a.createElement("div",{className:"col"},a.createElement(c.Input,{Record:M,Field:"Assets",Label:"Num. of Transmission Assets",Valid:function(){return!0},Setter:O,Disabled:!0}),a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){return J(!0)}}," Add Transmission Asset "),a.createElement(c.Input,{Record:M,Field:"Meters",Label:"Num. of Meters",Valid:function(){return!0},Setter:O,Disabled:!0}),a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){return X(!0)}}," Add Meter "),a.createElement(c.Input,{Record:M,Field:"Users",Label:"Num. of Users",Valid:function(){return!0},Setter:O,Disabled:!0}),a.createElement("button",{type:"button",className:"btn btn-primary btn-block",disabled:!0}," Add User Account "),a.createElement(c.Input,{Record:M,Field:"AssetGroups",Label:"Num. of Asset Groups",Valid:function(){return!0},Setter:O,Disabled:!0}),a.createElement("button",{type:"button",className:"btn btn-primary btn-block",onClick:function(){return W(!0)}}," Add Asset Group ")))),a.createElement(i.a,{type:"Asset",onComplete:function(e){return O((function(t){var n,a=o.cloneDeep(t);return(n=a.AssetList).push.apply(n,m(e)),a.AssetList=o.uniq(a.AssetList),a.Assets=a.AssetList.length,a})),null},Show:B,Close:function(){return J(!1)}}),a.createElement(i.a,{type:"Meter",onComplete:function(e){return O((function(t){var n,a=o.cloneDeep(t);return(n=a.MeterList).push.apply(n,m(e)),a.MeterList=o.uniq(a.MeterList),a.Meters=a.MeterList.length,a})),null},Show:z,Close:function(){return X(!1)}}),a.createElement(i.a,{type:"Group",onComplete:function(e){return O((function(t){var n,a=o.cloneDeep(t);return(n=a.AssetGroupList).push.apply(n,m(e)),a.AssetGroupList=o.uniq(a.AssetGroupList),a.AssetGroups=a.AssetGroupList.length,a})),null},Show:Q,Close:function(){return W(!1)}}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
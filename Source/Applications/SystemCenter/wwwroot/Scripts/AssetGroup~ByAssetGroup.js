(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{39:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SelectTable=void 0;var n=a(44),r=a(51);Object.defineProperty(t,"SelectTable",{enumerable:!0,get:function(){return r.SelectTable}}),t.default=n.default},44:function(e,t,a){"use strict";var n,r=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),l=this&&this.__assign||function(){return(l=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=a(0),s=function(e){return o.createElement("span",{style:{width:10,height:10,margin:3},className:"fa fa-angle-"+(e.ascending?"up":"down")})},i=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.render=function(){var e=this.generateRows(),t=this.generateHeaders();return o.createElement("table",{className:void 0!==this.props.tableClass?this.props.tableClass:"",style:this.props.tableStyle},o.createElement("thead",{style:this.props.theadStyle},t),o.createElement("tbody",{style:this.props.tbodyStyle},e))},t.prototype.generateHeaders=function(){var e=this;if(0===this.props.cols.length)return null;var t=this.props.cols.map((function(t,a){var n;return void 0===(n=void 0!==t.headerStyle?t.headerStyle:{}).cursor&&(n.cursor="pointer"),o.createElement("th",{key:a,style:n,onClick:function(a){return e.handleSort({col:t.key,ascending:e.props.ascending},a)}},t.label,e.props.sortField===t.key?o.createElement(s,{ascending:e.props.ascending}):null)}));return o.createElement("tr",null,t)},t.prototype.generateRows=function(){var e=this;return 0===this.props.data.length?null:this.props.data.map((function(t,a){var n,r=e.props.cols.map((function(n){var r;return r=void 0===n.rowStyle?{}:l({},n.rowStyle),o.createElement("td",{key:a.toString()+(null===n.key?"":t[n.key])+n.key,style:r,onClick:e.handleClick.bind(e,{col:n.key,row:t,data:null===n.key?null:t[n.key],index:a})},void 0!==n.content?n.content(t,n.key,r,a):null===n.key?null:t[n.key])}));return void 0===(n=void 0!==e.props.rowStyle?l({},e.props.rowStyle):{}).cursor&&(n.cursor="pointer"),void 0!==e.props.selected&&e.props.selected(t)&&(n.backgroundColor="yellow"),o.createElement("tr",{style:n,key:a.toString()},r)}))},t.prototype.handleClick=function(e,t){this.props.onClick(e,t)},t.prototype.handleSort=function(e,t){this.props.onSort(e)},t}(o.Component);t.default=i},51:function(e,t,a){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},r=this&&this.__spreadArrays||function(){for(var e=0,t=0,a=arguments.length;t<a;t++)e+=arguments[t].length;var n=Array(e),r=0;for(t=0;t<a;t++)for(var l=arguments[t],o=0,s=l.length;o<s;o++,r++)n[r]=l[o];return n};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectTable=void 0;var l=a(0),o=a(31),s=a(44);t.SelectTable=function(e){var t=l.useRef(!1),a=l.useState(e.data),i=a[0],u=a[1],c=l.useState([]),y=c[0],d=c[1],h=l.useState(e.sortField),p=h[0],f=h[1],w=l.useState(e.ascending),S=w[0],b=w[1];l.useEffect((function(){t.current?d((function(t){return t.length===i.length?[]:i.map((function(t){return t[e.KeyField]}))})):t.current=!0}),[e.selectAllCounter]),l.useEffect((function(){e.data.length!==i.length&&u(e.data)}),[e.data]),l.useEffect((function(){d((function(t){return t.filter((function(t){return i.findIndex((function(a){return a[e.KeyField]===t}))>-1}))}))}),[i]),l.useEffect((function(){u((function(e){return o.orderBy(e,[p],[S?"asc":"desc"])}))}),[S,p]),l.useEffect((function(){e.onSelection(i.filter((function(t){return y.findIndex((function(a){return a===t[e.KeyField]}))>-1})))}),[y]);var m={cols:r([{key:e.KeyField,label:"",headerStyle:{width:"4em"},rowStyle:{width:"4em"},content:function(t,a,n){return y.findIndex((function(a){return a===t[e.KeyField]}))>-1?l.createElement("div",{style:{marginTop:"16px",textAlign:"center"}},l.createElement("i",{className:"fa fa-check-square-o fa-3x","aria-hidden":"true"})):null}}],e.cols),data:i,onClick:function(t,a){var n=y.findIndex((function(a){return a===t.row[e.KeyField]}));d(-1===n?function(a){return r(a,[t.row[e.KeyField]])}:function(a){return a.filter((function(a){return a!==t.row[e.KeyField]}))})},sortField:p,ascending:S,onSort:function(e){e.col===p?b(!S):f(e.col)},tableClass:e.tableClass,tableStyle:e.tableStyle,theadStyle:e.theadStyle,theadClass:e.theadClass,tbodyStyle:e.tbodyStyle,tbodyClass:e.tbodyClass,selected:function(e){return!1},rowStyle:e.rowStyle};return l.createElement(s.default,n({},m))}},88:function(e,t,a){"use strict";var n=a(0),r=a(31),l=a(39),o=a.n(l),s=a(38),i=function(){return(i=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},u=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,l=a.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(n=l.next()).done;)o.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=l.return)&&a.call(l)}finally{if(r)throw r.error}}return o};function c(e){var t=u(n.useState([]),2),a=t[0],l=t[1],c=u(n.useState([]),2),y=c[0],d=c[1],h=u(n.useState([]),2),p=h[0],f=h[1],w=u(n.useState("AssetKey"),2),S=w[0],b=w[1],m=u(n.useState(!0),2),g=m[0],k=m[1],v=u(n.useState("AssetKey"),2),A=v[0],N=v[1],E=u(n.useState(!0),2),C=E[0],M=E[1],x=u(n.useState(D()),2),T=x[0],K=x[1],O=u(n.useState("Idle"),2),j=O[0],P=O[1],L=u(n.useState([]),2),F=L[0],_=L[1];function D(){switch(e.type){case"Asset":return[{label:"Name",key:"Name",type:"string"}];case"Meter":return[{label:"AssetKey",key:"AssetKey",type:"string"},{label:"Name",key:"Name",type:"string"},{label:"Location",key:"Location",type:"string"},{label:"Make",key:"Make",type:"string"},{label:"Model",key:"Model",type:"string"},{label:"Number of Assets",key:"MappedAssets",type:"number"}];case"Group":return[{label:"Name",key:"Name",type:"string"},{label:"Number of Meter",key:"Meters",type:"integer"},{label:"Number of Transmission Assets",key:"Assets",type:"integer"},{label:"Number of Users",key:"Users",type:"integer"},{label:"Show in PQ Dashboard",key:"DisplayDashboard",type:"boolean"}]}}function G(e){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/"+e+"/FieldName/0",contentType:"application/json; charset=utf-8",cache:!1,async:!0});return t.done((function(e){K((function(t){return r.orderBy(t.concat(e.map((function(e){return i({label:"[AF"+(null!=e.ExternalDB?" "+e.ExternalDB:"")+"]"+e.FieldName,key:e.FieldName},"string"==(t=e.Type)||"integer"==t||"number"==t||"datetime"==t||"boolean"==t?{type:t}:{type:"enum",enum:[{Label:t,Value:t}]});var t}))),["label"],["asc"])}))})),t}return n.useEffect((function(){if(0==F.length)return function(){};var t=e.onComplete(F);return t.done((function(e){return _([])})),function(){null!=t&&null!=t.abort&&t.abort()}}),[F]),n.useEffect((function(){P("Loading");var t=e.getData(a,g,S);return t.done((function(e){P("Idle"),d(JSON.parse(e))})),t.fail((function(e){return P("Error")})),function(){null!=t&&null!=t.abort&&t.abort()}}),[a,S,g]),n.useEffect((function(){K(D());var t=[];return"Asset"==e.type&&t.push(G("Line")),"Asset"==e.type&&t.push(G("Breaker")),"Asset"==e.type&&t.push(G("CapBank")),"Asset"==e.type&&t.push(G("Transformer")),"Asset"==e.type&&t.push(G("Bus")),"Meter"==e.type&&t.push(G("Meter")),function(){t.forEach((function(e){null!=e.abort&&e.abort()}))}}),[]),n.createElement(n.Fragment,null,n.createElement(s.Modal,{Show:e.Show,Title:function(){switch(e.type){case"Asset":return"Add Transmission Assets";case"Meter":return"Add Meters";case"Group":return"Add Asset Groups"}}(),ShowX:!0,Size:"xlg",CallBack:function(t){e.setShow(!1),f([]),t&&_(p.map((function(t){return t[e.PrimaryKey]})))}},n.createElement("div",{className:"row"},n.createElement("div",{className:"col"},n.createElement(s.SearchBar,{CollumnList:T,SetFilter:function(e){return l(e)},Direction:"left",defaultCollumn:function(){switch(e.type){case"Asset":case"Meter":case"Group":return{label:"Name",key:"Name",type:"string"}}}(),Width:"50%",Label:"Search",ShowLoading:"Loading"==j,ResultNote:"Error"==j?"Could not complete Search":"Found "+y.length+function(){switch(e.type){case"Asset":return"Transmission Assets";case"Meter":return"Meters";case"Group":return"Asset Groups"}}(),GetEnum:function(e,t){var a=null;return"enum"!=t.type||null==t.enum||1!=t.enum.length?function(){}:((a=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+t.enum[0].Value,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return e(t.map((function(e){return{Value:e.Value.toString(),Label:e.Text}})))})),function(){null!=a&&null==a.abort&&a.abort()})}}))),n.createElement("div",{className:"row"},n.createElement("div",{className:"col",style:{width:"60%"}},n.createElement(o.a,{cols:function(){switch(e.type){case"Asset":return[{key:"AssetKey",label:"Key",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"AssetName",label:"Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"AssetType",label:"Asset Type",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"VoltageKV",label:"Voltage (kV)",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Meters",label:"Meters",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Locations",label:"Substations",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}];case"Meter":return[{key:"AssetKey",label:"Key",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Name",label:"Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Location",label:"Substation",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"MappedAssets",label:"Assets",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Make",label:"Make",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Model",label:"Model",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}];case"Group":return[{key:"Name",label:"Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Assets",label:"Assets",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Meters",label:"Meters",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Users",label:"Users",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"AssetGroups",label:"SubGroups",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}]}}(),tableClass:"table table-hover",data:y,sortField:S,ascending:g,onSort:function(e){e.col==S?k(!g):(k(!0),b(e.col))},onClick:function(e){f((function(t){var a=r.cloneDeep(t);return a.push(e.row),a}))},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:"400px",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),n.createElement("div",{className:"col",style:{width:"40%"}},n.createElement("div",{style:{width:"100%"}},n.createElement("h3",null," Selected Assets ")),n.createElement(o.a,{cols:function(){switch(e.type){case"Asset":return[{key:"AssetKey",label:"Key",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"AssetName",label:"Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"AssetType",label:"Asset Type",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}];case"Meter":return[{key:"AssetKey",label:"Key",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Name",label:"Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Location",label:"Substation",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}];case"Group":return[{key:"Name",label:"Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}]}return[]}(),tableClass:"table table-hover",data:p,sortField:A,ascending:C,onSort:function(e){if(e.col==A){var t=r.orderBy(p,[e.col],[C?"desc":"asc"]);M(!C),f(t)}else{t=r.orderBy(p,[e.col],["asc"]);M(!C),f(t),N(e.col)}},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:"400px",width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})))))}t.a=function(e){return"Asset"==e.type?n.createElement(c,{Show:e.Show,setShow:function(){return e.Close()},type:"Asset",PrimaryKey:"ID",getData:function(e,t,a){var n=[{label:"Name",key:"Name",type:"string"}],r=e.map((function(e){return-1==n.findIndex((function(t){return t.key==e.FieldName}))?i(i({},e),{isPivotColumn:!0}):e}));return $.ajax({type:"Post",url:homePath+"api/OpenXDA/Asset/SearchableListIncludingMeter",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:r,OrderBy:a,Ascending:t}),cache:!1,async:!0})},onComplete:e.onComplete}):"Meter"==e.type?n.createElement(c,{Show:e.Show,setShow:function(){return e.Close()},type:"Meter",PrimaryKey:"ID",getData:function(e,t,a){var n=[{label:"AssetKey",key:"AssetKey",type:"string"},{label:"Name",key:"Name",type:"string"},{label:"Location",key:"Location",type:"string"},{label:"Make",key:"Make",type:"string"},{label:"Model",key:"Model",type:"string"},{label:"Number of Assets",key:"MappedAssets",type:"number"}],r=e.map((function(e){return-1==n.findIndex((function(t){return t.key==e.FieldName}))?i(i({},e),{isPivotColumn:!0}):e}));return $.ajax({type:"Post",url:homePath+"api/OpenXDA/MeterList/ExtendedSearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:r,OrderBy:a,Ascending:t}),cache:!1,async:!0})},onComplete:e.onComplete}):"Group"==e.type?n.createElement(c,{Show:e.Show,setShow:function(){return e.Close()},type:"Group",PrimaryKey:"ID",getData:function(e,t,a){var n=e;return $.ajax({type:"Post",url:homePath+"api/OpenXDA/AssetGroup/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:n,OrderBy:a,Ascending:t}),cache:!1,async:!0})},onComplete:e.onComplete}):void 0}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
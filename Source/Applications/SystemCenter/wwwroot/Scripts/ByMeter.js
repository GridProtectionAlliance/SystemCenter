(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{314:function(e,t,n){"use strict";n.r(t);var a=n(0),l=n(39),r=n.n(l),o=n(31),i=n(3),c=n(49),s=n(38),u=function(){return(u=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},d=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return o},m=[{label:"AssetKey",key:"AssetKey",type:"string"},{label:"Name",key:"Name",type:"string"},{label:"Location",key:"Location",type:"string"},{label:"Make",key:"Make",type:"string"},{label:"Model",key:"Model",type:"string"},{label:"Number of Assets",key:"MappedAssets",type:"number"}];t.default=function(e){var t=Object(i.useHistory)(),n=d(a.useState([]),2),l=n[0],y=n[1],p=d(a.useState([]),2),f=p[0],h=p[1],b=d(a.useState("AssetKey"),2),E=b[0],g=b[1],v=d(a.useState(m),2),S=v[0],w=v[1],N=d(a.useState("Idle"),2),k=N[0],x=N[1],D=d(a.useState(!0),2),F=D[0],T=D[1];a.useEffect((function(){var e=function(){x("Loading");var e=l.map((function(e){return-1==m.findIndex((function(t){return t.key==e.FieldName}))?u(u({},e),{isPivotColumn:!0}):e}));return $.ajax({type:"Post",url:homePath+"api/OpenXDA/MeterList/ExtendedSearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:e,OrderBy:E,Ascending:F}),cache:!1,async:!0})}();return e.done((function(e){x("Idle"),h(JSON.parse(e))})).fail((function(e){return x("Error")})),function(){null!=e.abort&&e.abort()}}),[E,F,l]),a.useEffect((function(){var e=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/Meter/FieldName/0",contentType:"application/json; charset=utf-8",cache:!1,async:!0});return e.done((function(e){var t=o.orderBy(m.concat(e.map((function(e){return u({label:"[AF"+(null!=e.ExternalDB?" "+e.ExternalDB:"")+"] "+e.FieldName,key:e.FieldName},"string"==(t=e.Type)||"integer"==t||"number"==t||"datetime"==t||"boolean"==t?{type:t}:{type:"enum",enum:[{Label:t,Value:t}]});var t}))),["label"],["asc"]);w(t)})),e}();return function(){null!=e.abort&&e.abort()}}),[]);return a.createElement("div",{style:{width:"100%",height:"100%"}},a.createElement(s.SearchBar,{CollumnList:S,SetFilter:function(e){return y(e)},Direction:"left",defaultCollumn:{label:"Name",key:"Name",type:"string"},Width:"50%",Label:"Search",ShowLoading:"Loading"==k,ResultNote:"Error"==k?"Could not complete Search":"Found "+f.length+" Meters",GetEnum:function(e,t){var n=null;return"enum"!=t.type||null==t.enum||1!=t.enum.length?function(){}:((n=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+t.enum[0].Value,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return e(t.map((function(e){return{Value:e.Value.toString(),Label:e.Text}})))})),function(){null!=n&&null==n.abort&&n.abort()})}},a.createElement("li",{className:"nav-item",style:{width:"15%",paddingRight:10}},a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Wizards:"),a.createElement("form",null,a.createElement("button",{className:"btn btn-primary","data-tooltip":!0,onClick:function(){t.push({pathname:homePath+"index.cshtml",search:"?name=NewMeterWizard",state:{}})},hidden:e.Roles.indexOf("Administrator")<0&&e.Roles.indexOf("Transmission SME")<0},"New Meter")))),a.createElement("li",{className:"nav-item",style:{width:"20%",paddingRight:10}},a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Actions:"),a.createElement("form",null,a.createElement("div",{className:"form-group"},a.createElement("button",{className:"btn btn-primary","data-toggle":"modal","data-target":"#extDBModal",hidden:e.Roles.indexOf("Administrator")<0&&e.Roles.indexOf("Transmission SME")<0,onClick:function(e){e.preventDefault()}},"Update Ext DB ")))))),a.createElement("div",{style:{width:"100%",height:"calc( 100% - 136px)"}},a.createElement(r.a,{cols:[{key:"Name",label:"Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"AssetKey",label:"Key",headerStyle:{width:"15%"},rowStyle:{width:"15%"}},{key:"Location",label:"Substation",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"MappedAssets",label:"Assets",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Make",label:"Make",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Model",label:"Model",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}],tableClass:"table table-hover",data:f,sortField:E,ascending:F,onSort:function(e){e.col==E?T(!F):(T(!0),g(e.col))},onClick:function(e){t.push({pathname:homePath+"index.cshtml",search:"?name=Meter&MeterID="+e.row.ID,state:{}})},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),a.createElement("div",{className:"modal",id:"extDBModal"},a.createElement("div",{className:"modal-dialog",style:{maxWidth:"100%",width:"75%"}},a.createElement("div",{className:"modal-content"},a.createElement("div",{className:"modal-header"},a.createElement("h4",{className:"modal-title"},"Meter External Database Fields"),a.createElement("button",{type:"button",className:"close","data-dismiss":"modal"},"Ã—")),a.createElement("div",{className:"modal-body"},a.createElement(c.a,{ID:-1,Type:"Meter",Tab:""})),a.createElement("div",{className:"modal-footer"},a.createElement("button",{type:"button",className:"btn btn-danger","data-dismiss":"modal"},"Close"))))))}},39:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SelectTable=void 0;var a=n(44),l=n(51);Object.defineProperty(t,"SelectTable",{enumerable:!0,get:function(){return l.SelectTable}}),t.default=a.default},44:function(e,t,n){"use strict";var a,l=this&&this.__extends||(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=function(e){return o.createElement("span",{style:{width:10,height:10,margin:3},className:"fa fa-angle-"+(e.ascending?"up":"down")})},c=function(e){function t(t){return e.call(this,t)||this}return l(t,e),t.prototype.render=function(){var e=this.generateRows(),t=this.generateHeaders();return o.createElement("table",{className:void 0!==this.props.tableClass?this.props.tableClass:"",style:this.props.tableStyle},o.createElement("thead",{style:this.props.theadStyle},t),o.createElement("tbody",{style:this.props.tbodyStyle},e))},t.prototype.generateHeaders=function(){var e=this;if(0===this.props.cols.length)return null;var t=this.props.cols.map((function(t,n){var a;return void 0===(a=void 0!==t.headerStyle?t.headerStyle:{}).cursor&&(a.cursor="pointer"),o.createElement("th",{key:n,style:a,onClick:function(n){return e.handleSort({col:t.key,ascending:e.props.ascending},n)}},t.label,e.props.sortField===t.key?o.createElement(i,{ascending:e.props.ascending}):null)}));return o.createElement("tr",null,t)},t.prototype.generateRows=function(){var e=this;return 0===this.props.data.length?null:this.props.data.map((function(t,n){var a,l=e.props.cols.map((function(a){var l;return l=void 0===a.rowStyle?{}:r({},a.rowStyle),o.createElement("td",{key:n.toString()+(null===a.key?"":t[a.key])+a.key,style:l,onClick:e.handleClick.bind(e,{col:a.key,row:t,data:null===a.key?null:t[a.key],index:n})},void 0!==a.content?a.content(t,a.key,l,n):null===a.key?null:t[a.key])}));return void 0===(a=void 0!==e.props.rowStyle?r({},e.props.rowStyle):{}).cursor&&(a.cursor="pointer"),void 0!==e.props.selected&&e.props.selected(t)&&(a.backgroundColor="yellow"),o.createElement("tr",{style:a,key:n.toString()},l)}))},t.prototype.handleClick=function(e,t){this.props.onClick(e,t)},t.prototype.handleSort=function(e,t){this.props.onSort(e)},t}(o.Component);t.default=c},49:function(e,t,n){"use strict";var a=n(0),l=n(31),r=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return o};function o(e){return a.createElement("tr",null,a.createElement("td",null,e.ExternalDB),a.createElement("td",null,null==e.updated?"N/A":moment(e.updated).format("MM/DD/YYYY")),a.createElement("td",null,a.createElement("button",{className:"btn btn-primary",onClick:function(t){return e.Update(e.ExternalDB)}},"Update ",e.ExternalDB)))}function i(e){var t=l.clone(e.Values),n=t.find((function(t){return t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField}));return a.createElement("tr",null,-1==e.ParentTableID?a.createElement("td",null,e.Field.DisplayName):null,a.createElement("td",null,e.Field.FieldName),a.createElement("td",null,null==e.Field.PreviousValue?"":e.Field.PreviousValue),e.Field.Error?a.createElement("td",null,e.Field.Message):a.createElement("td",null,a.createElement("input",{className:e.Field.Changed?"form-control is-invalid":"form-control",onChange:function(a){""!=a.target.value?n.Value=a.target.value:n.Value=null,n.Changed=!0,e.Setter(t)},value:null==n.Value?"":n.Value.toString()})),a.createElement("td",null,e.Field.Error?a.createElement("span",null,a.createElement("i",{className:"fa fa-exclamation-triangle"})):null),a.createElement("td",null,a.createElement("button",{className:"btn btn-sm",onClick:function(n){return t=t.filter((function(t){return!(t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField)})),void e.Setter(t)}},a.createElement("span",null,a.createElement("i",{className:"fa fa-times"})))))}t.a=function(e){var t=r(a.useState([]),2),n=t[0],l=t[1],c=r(a.useState([]),2),s=c[0],u=c[1],d=r(a.useState(!1),2),m=d[0],y=d[1],p=r(a.useState(""),2),f=p[0],h=p[1];function b(){var t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/"+e.Type+"/extDataBases",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){l(e)})),function(){null!=t.abort&&t.abort()}}function E(){u([]),y(!1)}function g(e){e.length<1?E():u(e)}return a.useEffect((function(){return y(!1),u([]),b()}),[e.ID,e.Type,e.Tab]),a.createElement("div",{className:"card",style:{marginBottom:10}},a.createElement("div",{className:"card-header"},a.createElement("h4",null," External Data Base Connections:")),a.createElement("div",{className:"card-body"},a.createElement("div",{style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540,overflowY:"auto"}},m?a.createElement("table",{id:"fields",className:"table"},a.createElement("thead",null,a.createElement("tr",null,-1==e.ID?a.createElement("th",null," ",e.Type," "):null,a.createElement("th",null,"Field"),a.createElement("th",{style:{width:300}},"Previous Value"),a.createElement("th",{style:{width:300}},"Updated Value"),a.createElement("th",{style:{width:30}}),a.createElement("th",{style:{width:30}}))),a.createElement("tbody",null,s.map((function(t,n){return a.createElement(i,{key:n,ParentTableID:e.ID,Field:t,Values:s,Setter:g})})))):a.createElement("table",{id:"overview",className:"table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"External DB"),a.createElement("th",{style:{width:250}},"Last Updated"),a.createElement("th",{style:{width:300}}))),a.createElement("tbody",null,n.map((function(t,n){return a.createElement(o,{key:n,ParentTableID:e.ID,ExternalDB:t.name,updated:t.lastupdate,Update:function(t){var n;n=t,$.ajax({type:"GET",url:homePath+"api/ExternalDB/"+n+"/"+e.Type+"/Update/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){u(e),y(!0),h(n),e.length<1&&E()}))}})})))))),m?a.createElement("div",{className:"card-footer"},a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-primary",onClick:function(){var t=$.ajax({type:"POST",url:homePath+"api/ExternalDB/"+f+"/"+e.Type+"/ConfirmUpdate",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({data:s}),cache:!1,async:!0});return u([]),y(!1),b(),function(){null!=t.abort&&t.abort()}}},"Save Changes")),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-default",onClick:E},"Cancel"))):null)}},51:function(e,t,n){"use strict";var a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},l=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var a=Array(e),l=0;for(t=0;t<n;t++)for(var r=arguments[t],o=0,i=r.length;o<i;o++,l++)a[l]=r[o];return a};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectTable=void 0;var r=n(0),o=n(31),i=n(44);t.SelectTable=function(e){var t=r.useRef(!1),n=r.useState(e.data),c=n[0],s=n[1],u=r.useState([]),d=u[0],m=u[1],y=r.useState(e.sortField),p=y[0],f=y[1],h=r.useState(e.ascending),b=h[0],E=h[1];r.useEffect((function(){t.current?m((function(t){return t.length===c.length?[]:c.map((function(t){return t[e.KeyField]}))})):t.current=!0}),[e.selectAllCounter]),r.useEffect((function(){e.data.length!==c.length&&s(e.data)}),[e.data]),r.useEffect((function(){m((function(t){return t.filter((function(t){return c.findIndex((function(n){return n[e.KeyField]===t}))>-1}))}))}),[c]),r.useEffect((function(){s((function(e){return o.orderBy(e,[p],[b?"asc":"desc"])}))}),[b,p]),r.useEffect((function(){e.onSelection(c.filter((function(t){return d.findIndex((function(n){return n===t[e.KeyField]}))>-1})))}),[d]);var g={cols:l([{key:e.KeyField,label:"",headerStyle:{width:"4em"},rowStyle:{width:"4em"},content:function(t,n,a){return d.findIndex((function(n){return n===t[e.KeyField]}))>-1?r.createElement("div",{style:{marginTop:"16px",textAlign:"center"}},r.createElement("i",{className:"fa fa-check-square-o fa-3x","aria-hidden":"true"})):null}}],e.cols),data:c,onClick:function(t,n){var a=d.findIndex((function(n){return n===t.row[e.KeyField]}));m(-1===a?function(n){return l(n,[t.row[e.KeyField]])}:function(n){return n.filter((function(n){return n!==t.row[e.KeyField]}))})},sortField:p,ascending:b,onSort:function(e){e.col===p?E(!b):f(e.col)},tableClass:e.tableClass,tableStyle:e.tableStyle,theadStyle:e.theadStyle,theadClass:e.theadClass,tbodyStyle:e.tbodyStyle,tbodyClass:e.tbodyClass,selected:function(e){return!1},rowStyle:e.rowStyle};return r.createElement(i.default,a({},g))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
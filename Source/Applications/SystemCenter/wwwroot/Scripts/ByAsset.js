(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{316:function(e,t,a){"use strict";a.r(t);var n=a(0),r=a(31),l=a(3),s=a(33),i=a(43),o=a(53),c=a(54),d=a(55),u=a(56),p=a(57),m=a(81),f=a(49),b=a(73),h=a(38),A=a(39),N=a.n(A),E=a(11),y=a(15),S=function(){return(S=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},R=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,l=a.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=l.next()).done;)s.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=l.return)&&a.call(l)}finally{if(r)throw r.error}}return s},D=[{label:"Name",key:"Name",type:"string"}];t.default=function(e){var t=Object(l.useHistory)(),a=R(n.useState([]),2),A=a[0],g=a[1],w=R(n.useState([]),2),F=w[0],T=w[1],v=R(n.useState("AssetKey"),2),k=v[0],V=v[1],I=R(n.useState(!0),2),L=I[0],B=I[1],U=R(n.useState(s.a.getNewAsset("Line")),2),C=U[0],P=U[1],x=R(n.useState([]),2),O=x[0],j=x[1],X=R(n.useState(sessionStorage.hasOwnProperty("AssetTab.AssetTab")?JSON.parse(sessionStorage.getItem("Asset.AssetTab")):"Bus"),2),q=X[0],G=X[1],K=R(n.useState(D),2),M=K[0],_=K[1],H=R(n.useState("Idle"),2),J=H[0],z=H[1],Y=Object(E.c)(y.c),W=Object(E.c)(y.b),Q=Object(E.b)();function Z(e){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/"+e+"/FieldName/0",contentType:"application/json; charset=utf-8",cache:!1,async:!0});return t.done((function(e){_((function(t){return r.orderBy(t.concat(e.map((function(e){return S({label:"[AF"+(null!=e.ExternalDB?" "+e.ExternalDB:"")+"] "+e.FieldName,key:e.FieldName},"string"==(t=e.Type)||"integer"==t||"number"==t||"datetime"==t||"boolean"==t?{type:t}:{type:"enum",enum:[{Label:t,Value:t}]});var t}))),["label"],["asc"])}))})),t}n.useEffect((function(){var e=function(){z("Loading");var e=A.map((function(e){return-1==D.findIndex((function(t){return t.key==e.FieldName}))?S(S({},e),{isPivotColumn:!0}):e}));return $.ajax({type:"Post",url:homePath+"api/OpenXDA/Asset/SearchableListIncludingMeter",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:e,OrderBy:k,Ascending:L}),cache:!1,async:!0})}();return e.done((function(e){z("Idle"),T(JSON.parse(e))})).fail((function(e){return z("Error")})),function(){null!=e.abort&&e.abort()}}),[k,L,A]),n.useEffect((function(){var e=Object(i.c)();return e.done((function(e){j(e);var t=s.a.getNewAsset("Line");t.AssetTypeID=e.find((function(e){return"Line"==e.Name})).ID,P(t)})),function(){null!=e.abort&&e.abort()}}),[]),n.useEffect((function(){_(D);var e=Z("Line"),t=Z("Breaker"),a=Z("CapBank"),n=Z("Transformer"),r=Z("Bus");return function(){null!=e.abort&&e.abort(),null!=t.abort&&t.abort(),null!=a.abort&&a.abort(),null!=n.abort&&n.abort(),null!=r.abort&&r.abort()}}),[]),n.useEffect((function(){if("unintiated"===W||"changed"===W)return Q(Object(y.a)()),function(){}}),[Q,W]);return n.createElement("div",{style:{width:"100%",height:"100%"}},n.createElement(h.SearchBar,{CollumnList:M,SetFilter:function(e){return g(e)},Direction:"left",defaultCollumn:{label:"Name",key:"Name",type:"string"},Width:"50%",Label:"Search",ShowLoading:"Loading"==J,ResultNote:"Error"==J?"Could not complete Search":"Found "+F.length+" Transmission Assets",GetEnum:function(e,t){var a=null;return"enum"!=t.type||null==t.enum||1!=t.enum.length?function(){}:((a=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+t.enum[0].Value,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return e(t.map((function(e){return{Value:e.Value.toString(),Label:e.Text}})))})),function(){null!=a&&null==a.abort&&a.abort()})}},n.createElement("li",{className:"nav-item",style:{width:"15%",paddingRight:10}},n.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},n.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Actions:"),n.createElement("form",null,n.createElement("div",{className:"form-group"},n.createElement("button",{className:"btn btn-primary","data-toggle":"modal","data-target":"#assetModal",hidden:e.Roles.indexOf("Administrator")<0&&e.Roles.indexOf("Transmission SME")<0,onClick:function(e){e.preventDefault()}},"Add Asset")),n.createElement("div",{className:"form-group"},n.createElement("button",{className:"btn btn-primary","data-toggle":"modal","data-target":"#extDBModal",hidden:e.Roles.indexOf("Administrator")<0&&e.Roles.indexOf("Transmission SME")<0,onClick:function(e){e.preventDefault()}},"Update Ext DB ")))))),n.createElement("div",{style:{width:"100%",height:"calc( 100% - 180px)"}},n.createElement(N.a,{cols:[{key:"AssetKey",label:"Key",headerStyle:{width:"15%"},rowStyle:{width:"15%"}},{key:"AssetName",label:"Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"AssetType",label:"Asset Type",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"VoltageKV",label:"Voltage (kV)",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Meters",label:"Meters",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Locations",label:"Substations",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}],tableClass:"table table-hover",data:F,sortField:k,ascending:L,onSort:function(e){e.col==k?B(!L):(B(!0),V(e.col))},onClick:function(e){t.push({pathname:homePath+"index.cshtml",search:"?name=Asset&AssetID="+e.row.ID,state:{}})},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),n.createElement("div",{className:"modal",id:"assetModal"},n.createElement("div",{className:"modal-dialog",style:{maxWidth:"100%",width:"75%"}},n.createElement("div",{className:"modal-content"},n.createElement("div",{className:"modal-header"},n.createElement("h4",{className:"modal-title"},"Add a New Asset"),n.createElement("button",{type:"button",className:"close","data-dismiss":"modal",onClick:function(e){var t=s.a.getNewAsset("Line");t.AssetTypeID=O.find((function(e){return"Line"==e.Name})).ID,P(t)}},"×")),n.createElement("div",{className:"modal-body"},n.createElement("div",{className:"row"},n.createElement("div",{className:"col"},n.createElement(s.a.AssetAttributeFields,{Asset:C,NewEdit:"New",AssetTypes:O,AllAssets:Y,UpdateState:P,GetDifferentAsset:function(e){},HideSelectAsset:!0,HideAssetType:!1})),n.createElement("div",{className:"col"},"Breaker"==C.AssetType?n.createElement(o.a,{NewEdit:"New",Asset:C,UpdateState:P,ShowSpare:!0}):"Bus"==C.AssetType?n.createElement(d.a,{NewEdit:"New",Asset:C,UpdateState:P}):"CapacitorBank"==C.AssetType?n.createElement(c.a,{NewEdit:"New",Asset:C,UpdateState:P}):"CapacitorBankRelay"==C.AssetType?n.createElement(b.a,{NewEdit:"New",Asset:C,UpdateState:P}):"Line"==C.AssetType?n.createElement(u.a,{NewEdit:"New",Asset:C,UpdateState:P}):"LineSegment"==C.AssetType?n.createElement(m.a,{NewEdit:"New",Asset:C,UpdateState:P}):"Transformer"==C.AssetType?n.createElement(p.a,{NewEdit:"New",Asset:C,UpdateState:P}):void 0))),n.createElement("div",{className:"modal-footer"},n.createElement("button",{type:"button",className:"btn btn-primary","data-dismiss":"modal",onClick:function(){$.ajax({type:"POST",url:homePath+"api/OpenXDA/"+C.AssetType+"/Add",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(C),cache:!1,async:!0}).done((function(e){sessionStorage.clear(),t.push({pathname:homePath+"index.cshtml",search:"?name=Asset&AssetID="+e.ID,state:{}})})).fail((function(e){500==e.status&&alert(e.responseJSON.ExceptionMessage)}))}},"Save"),n.createElement("button",{type:"button",className:"btn btn-danger","data-dismiss":"modal",onClick:function(e){var t=s.a.getNewAsset("Line");t.AssetTypeID=O.find((function(e){return"Line"==e.Name})).ID,P(t)}},"Close"))))),n.createElement("div",{className:"modal",id:"extDBModal"},n.createElement("div",{className:"modal-dialog",style:{maxWidth:"100%",width:"75%"}},n.createElement("div",{className:"modal-content"},n.createElement("div",{className:"modal-header"},n.createElement("h4",{className:"modal-title"},"Assets External Database Fields"),n.createElement("button",{type:"button",className:"close","data-dismiss":"modal"},"×")),n.createElement("div",{className:"modal-body"},n.createElement("ul",{className:"nav nav-tabs"},n.createElement("li",{className:"nav-item"},n.createElement("a",{className:"nav-link"+("Bus"==q?" active":""),onClick:function(){return G("Bus")},"data-toggle":"tab",href:"#extDBBus"},"Buses")),n.createElement("li",{className:"nav-item"},n.createElement("a",{className:"nav-link"+("Line"==q?" active":""),onClick:function(){return G("Line")},"data-toggle":"tab",href:"#extDBLine"},"Lines")),n.createElement("li",{className:"nav-item"},n.createElement("a",{className:"nav-link"+("Breaker"==q?" active":""),onClick:function(){return G("Breaker")},"data-toggle":"tab",href:"#extDBBreaker"},"Breakers")),n.createElement("li",{className:"nav-item"},n.createElement("a",{className:"nav-link"+("Transformer"==q?" active":""),onClick:function(){return G("Transformer")},"data-toggle":"tab",href:"#extDBXFR"},"Transformers")),n.createElement("li",{className:"nav-item"},n.createElement("a",{className:"nav-link"+("CapacitorBank"==q?" active":""),onClick:function(){return G("CapacitorBank")},"data-toggle":"tab",href:"#extDBCapacitorBank"},"CapBanks"))),n.createElement("div",{className:"tab-content",style:{maxHeight:window.innerHeight-235,overflow:"hidden"}},n.createElement("div",{className:"tab-pane "+("Bus"==q?" active":"fade"),id:"extDBBus"},n.createElement(f.a,{ID:-1,Type:"Bus",Tab:q})),n.createElement("div",{className:"tab-pane "+("Line"==q?" active":"fade"),id:"extDBLine"},n.createElement(f.a,{ID:-1,Type:"Line",Tab:q})),n.createElement("div",{className:"tab-pane "+("Breaker"==q?" active":"fade"),id:"extDBBreaker"},n.createElement(f.a,{ID:-1,Type:"Breaker",Tab:q})),n.createElement("div",{className:"tab-pane "+("Transformer"==q?" active":"fade"),id:"extDBXFR"},n.createElement(f.a,{ID:-1,Type:"Transformer",Tab:q})),n.createElement("div",{className:"tab-pane "+("CapacitorBank"==q?" active":"fade"),id:"extDBCapacitorBank"},n.createElement(f.a,{ID:-1,Type:"CapacitorBank",Tab:q})))),n.createElement("div",{className:"modal-footer"},n.createElement("button",{type:"button",className:"btn btn-danger","data-dismiss":"modal"},"Close"))))))}},37:function(e,t,a){"use strict";var n,r=a(0),l=a(31),s=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,null==this.props.Label?this.props.Field:this.props.Label),r.createElement("input",{className:this.props.Valid(this.props.Field)?"form-control":"form-control is-invalid",onChange:function(t){var a=l.clone(e.props.Record);""!=t.target.value?a[e.props.Field]=t.target.value:a[e.props.Field]=null,e.props.Setter(a)},value:null==this.props.Record[this.props.Field]?"":this.props.Record[this.props.Field].toString(),disabled:null!=this.props.Disabled&&this.props.Disabled}),r.createElement("div",{className:"invalid-feedback"},null==this.props.Feedback?this.props.Field+" is a required field.":this.props.Feedback))},t}(r.Component);t.a=i},41:function(e,t,a){"use strict";var n,r=a(0),l=a(31),s=a.n(l),i=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-check"},r.createElement("input",{type:"checkbox",className:"form-check-input",style:{zIndex:1},onChange:function(t){var a=s.a.clone(e.props.Record);a[e.props.Field]=t.target.checked,e.props.Setter(a)},value:this.props.Record[this.props.Field]?"on":"off",checked:!!this.props.Record[this.props.Field],disabled:null!=this.props.Disabled&&this.props.Disabled}),r.createElement("label",{className:"form-check-label"},null==this.props.Label?this.props.Field:this.props.Label))},t}(r.Component);t.a=o},43:function(e,t,a){"use strict";a.d(t,"e",(function(){return o})),a.d(t,"c",(function(){return c})),a.d(t,"b",(function(){return d})),a.d(t,"d",(function(){return p})),a.d(t,"a",(function(){return m}));var n=function(e,t,a,n){return new(a||(a=Promise))((function(r,l){function s(e){try{o(n.next(e))}catch(e){l(e)}}function i(e){try{o(n.throw(e))}catch(e){l(e)}}function o(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(s,i)}o((n=n.apply(e,t||[])).next())}))},r=function(e,t){var a,n,r,l,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function i(l){return function(i){return function(l){if(a)throw new TypeError("Generator is already executing.");for(;s;)try{if(a=1,n&&(r=2&l[0]?n.return:l[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,l[1])).done)return r;switch(n=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return s.label++,{value:l[1],done:!1};case 5:s.label++,n=l[1],l=[0];continue;case 7:l=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==l[0]&&2!==l[0])){s=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){s.label=l[1];break}if(6===l[0]&&s.label<r[1]){s.label=r[1],r=l;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(l);break}r[2]&&s.ops.pop(),s.trys.pop();continue}l=t.call(e,s)}catch(e){l=[6,e],n=0}finally{a=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,i])}}};function l(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+e.ID+"/SpareBreaker",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function s(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+e.ID+"/Location",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function i(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/SpareBreakers/Substation/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function o(e){return n(this,void 0,void 0,(function(){var t;return r(this,(function(a){switch(a.label){case 0:return[4,s(e)];case 1:return null==(t=a.sent())?[2,[]]:[4,i(t)];case 2:return[2,a.sent()]}}))}))}function c(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/AssetType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})}function d(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0})}function u(e,t){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/"+t+"/One/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})}function p(e,t){return n(this,void 0,void 0,(function(){var a,n,s,i,o;return r(this,(function(r){switch(r.label){case 0:return[4,u(e,t)];case 1:return(a=r.sent()).AssetType=t,a.Channels=[],"Breaker"!=t?[3,5]:[4,(d=a,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+d.ID+"/EDNAPoint",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise())];case 2:return n=r.sent(),a.EDNAPoint=null!=n?n.Point:null,[4,l(a)];case 3:return[4,r.sent()];case 4:return s=r.sent(),a.SpareBreakerID=null!=s?s.ID:null,[3,7];case 5:return"Line"!=t?[3,7]:(i=a,o="Detail",[4,(c=a,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Line/"+c.ID+"/LineSegment",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise())]);case 6:i[o]=r.sent(),r.label=7;case 7:return[2,a]}var c,d}))}))}function m(e){return $.ajax({type:"POST",url:homePath+"api/OpenXDA/Asset/Edit",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Asset:e}),cache:!1,async:!0}).promise()}},49:function(e,t,a){"use strict";var n=a(0),r=a(31),l=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,l=a.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=l.next()).done;)s.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=l.return)&&a.call(l)}finally{if(r)throw r.error}}return s};function s(e){return n.createElement("tr",null,n.createElement("td",null,e.ExternalDB),n.createElement("td",null,null==e.updated?"N/A":moment(e.updated).format("MM/DD/YYYY")),n.createElement("td",null,n.createElement("button",{className:"btn btn-primary",onClick:function(t){return e.Update(e.ExternalDB)}},"Update ",e.ExternalDB)))}function i(e){var t=r.clone(e.Values),a=t.find((function(t){return t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField}));return n.createElement("tr",null,-1==e.ParentTableID?n.createElement("td",null,e.Field.DisplayName):null,n.createElement("td",null,e.Field.FieldName),n.createElement("td",null,null==e.Field.PreviousValue?"":e.Field.PreviousValue),e.Field.Error?n.createElement("td",null,e.Field.Message):n.createElement("td",null,n.createElement("input",{className:e.Field.Changed?"form-control is-invalid":"form-control",onChange:function(n){""!=n.target.value?a.Value=n.target.value:a.Value=null,a.Changed=!0,e.Setter(t)},value:null==a.Value?"":a.Value.toString()})),n.createElement("td",null,e.Field.Error?n.createElement("span",null,n.createElement("i",{className:"fa fa-exclamation-triangle"})):null),n.createElement("td",null,n.createElement("button",{className:"btn btn-sm",onClick:function(a){return t=t.filter((function(t){return!(t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField)})),void e.Setter(t)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-times"})))))}t.a=function(e){var t=l(n.useState([]),2),a=t[0],r=t[1],o=l(n.useState([]),2),c=o[0],d=o[1],u=l(n.useState(!1),2),p=u[0],m=u[1],f=l(n.useState(""),2),b=f[0],h=f[1];function A(){var t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/"+e.Type+"/extDataBases",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){r(e)})),function(){null!=t.abort&&t.abort()}}function N(){d([]),m(!1)}function E(e){e.length<1?N():d(e)}return n.useEffect((function(){return m(!1),d([]),A()}),[e.ID,e.Type,e.Tab]),n.createElement("div",{className:"card",style:{marginBottom:10}},n.createElement("div",{className:"card-header"},n.createElement("h4",null," External Data Base Connections:")),n.createElement("div",{className:"card-body"},n.createElement("div",{style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540,overflowY:"auto"}},p?n.createElement("table",{id:"fields",className:"table"},n.createElement("thead",null,n.createElement("tr",null,-1==e.ID?n.createElement("th",null," ",e.Type," "):null,n.createElement("th",null,"Field"),n.createElement("th",{style:{width:300}},"Previous Value"),n.createElement("th",{style:{width:300}},"Updated Value"),n.createElement("th",{style:{width:30}}),n.createElement("th",{style:{width:30}}))),n.createElement("tbody",null,c.map((function(t,a){return n.createElement(i,{key:a,ParentTableID:e.ID,Field:t,Values:c,Setter:E})})))):n.createElement("table",{id:"overview",className:"table"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null,"External DB"),n.createElement("th",{style:{width:250}},"Last Updated"),n.createElement("th",{style:{width:300}}))),n.createElement("tbody",null,a.map((function(t,a){return n.createElement(s,{key:a,ParentTableID:e.ID,ExternalDB:t.name,updated:t.lastupdate,Update:function(t){var a;a=t,$.ajax({type:"GET",url:homePath+"api/ExternalDB/"+a+"/"+e.Type+"/Update/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){d(e),m(!0),h(a),e.length<1&&N()}))}})})))))),p?n.createElement("div",{className:"card-footer"},n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-primary",onClick:function(){var t=$.ajax({type:"POST",url:homePath+"api/ExternalDB/"+b+"/"+e.Type+"/ConfirmUpdate",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({data:c}),cache:!1,async:!0});return d([]),m(!1),A(),function(){null!=t.abort&&t.abort()}}},"Save Changes")),n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-default",onClick:N},"Cancel"))):null)}},53:function(e,t,a){"use strict";var n=a(0),r=a(31),l=a(33),s=a(37),i=a(41),o=a(43),c=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,l=a.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=l.next()).done;)s.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=l.return)&&a.call(l)}finally{if(r)throw r.error}}return s};t.a=function(e){function t(t){return"ThermalRating"==t?null!=e.Asset.ThermalRating&&l.a.isRealNumber(e.Asset.ThermalRating):"Speed"==t?null!=e.Asset.Speed&&l.a.isRealNumber(e.Asset.Speed):"TripTime"==t?null==e.Asset.TripTime||l.a.isInteger(e.Asset.TripTime):"PickupTime"==t?null==e.Asset.PickupTime||l.a.isInteger(e.Asset.PickupTime):"TripCoilCondition"==t?null==e.Asset.TripCoilCondition||l.a.isRealNumber(e.Asset.TripCoilCondition):"EDNAPoint"==t||("Spare"==t||"SpareBreakerID"==t)}var a=c(n.useState([]),2),d=a[0],u=a[1];return n.useEffect((function(){Object(o.e)(e.Asset).then((function(e){u(e)}))}),[e.Asset]),null==e.Asset?null:n.createElement(n.Fragment,null,n.createElement(s.a,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"Speed",Feedback:"Speed is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"TripTime",Label:"Trip Time Limit",Feedback:"Trip Time is an integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"PickupTime",Label:"Pickup Time Limit",Feedback:"Pickup Time is an integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"TripCoilCondition",Label:"Trip Coil Condition Limit",Feedback:"Trip Coil Condition is an numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"EDNAPoint",Label:"EDNA Point",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement("div",{className:"form-group",hidden:1!=e.ShowSpare},n.createElement("label",null,"Spare Breaker"),n.createElement("select",{className:"form-control",value:null==e.Asset.SpareBreakerID?0:e.Asset.SpareBreakerID,onChange:function(t){var a=r.clone(e.Asset);"0"==t.target.value?a.SpareBreakerID=null:a.SpareBreakerID=parseInt(t.target.value),e.UpdateState(a)},disabled:"New"==e.NewEdit&&0!=e.Asset.ID},n.createElement("option",{value:0,key:0},"None"),d.map((function(e){return n.createElement("option",{value:e.ID,key:e.ID},e.AssetKey)})))),n.createElement(i.a,{Record:e.Asset,Field:"Spare",Label:"Is Spare",Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},54:function(e,t,a){"use strict";var n,r=a(0),l=a(31),s=a(33),i=a(37),o=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),c=function(){return(c=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};t.a=function(e){function t(t){return"NumberOfBanks"==t?null!=e.Asset.NumberOfBanks&&s.a.isInteger(e.Asset.NumberOfBanks):"CapacitancePerBank"==t?null!=e.Asset.CapacitancePerBank&&s.a.isRealNumber(e.Asset.CapacitancePerBank):"MaxKV"==t?null!=e.Asset.MaxKV&&s.a.isRealNumber(e.Asset.MaxKV):"UnitKV"==t?null!=e.Asset.UnitKV&&s.a.isRealNumber(e.Asset.UnitKV):"UnitKVAr"==t?null!=e.Asset.UnitKVAr&&s.a.isRealNumber(e.Asset.UnitKVAr):"PosReactanceTol"==t?null!=e.Asset.PosReactanceTol&&s.a.isRealNumber(e.Asset.PosReactanceTol):"NegReactanceTol"==t?null!=e.Asset.NegReactanceTol&&s.a.isRealNumber(e.Asset.NegReactanceTol):"Nparalell"==t?null!=e.Asset.Nparalell&&s.a.isInteger(e.Asset.Nparalell):"Nseries"==t?null!=e.Asset.Nseries&&s.a.isInteger(e.Asset.Nseries):"NSeriesGroup"==t?null!=e.Asset.NSeriesGroup&&s.a.isInteger(e.Asset.NSeriesGroup):"NParalellGroup"==t?null!=e.Asset.NParalellGroup&&s.a.isInteger(e.Asset.NParalellGroup):"VTratioBus"==t?null!=e.Asset.VTratioBus&&s.a.isRealNumber(e.Asset.VTratioBus):"NumberLVCaps"==t?null!=e.Asset.NumberLVCaps&&s.a.isInteger(e.Asset.NumberLVCaps):"NumberLVUnits"==t?null!=e.Asset.NumberLVUnits&&s.a.isInteger(e.Asset.NumberLVUnits):"LVKVAr"==t?null!=e.Asset.LVKVAr&&s.a.isRealNumber(e.Asset.LVKVAr):"LVKV"==t?null!=e.Asset.LVKV&&s.a.isRealNumber(e.Asset.LVKV):"LVNegReactanceTol"==t?null!=e.Asset.LVNegReactanceTol&&s.a.isRealNumber(e.Asset.LVNegReactanceTol):"LVPosReactanceTol"==t?null!=e.Asset.LVPosReactanceTol&&s.a.isRealNumber(e.Asset.LVPosReactanceTol):"LowerXFRRatio"==t?null!=e.Asset.LowerXFRRatio&&s.a.isRealNumber(e.Asset.LowerXFRRatio):"Nshorted"==t?null!=e.Asset.Nshorted&&s.a.isRealNumber(e.Asset.Nshorted):"BlownFuses"==t?null!=e.Asset.BlownFuses&&s.a.isRealNumber(e.Asset.BlownFuses):"BlownGroups"==t?null!=e.Asset.BlownGroups&&s.a.isRealNumber(e.Asset.BlownGroups):"Rv"==t?null!=e.Asset.Rv&&s.a.isRealNumber(e.Asset.Rv):"Rh"==t?null!=e.Asset.Rh&&s.a.isRealNumber(e.Asset.Rh):"NLowerGroups"==t?null!=e.Asset.NLowerGroups&&s.a.isInteger(e.Asset.NLowerGroups):"ShortedGroups"==t?null!=e.Asset.ShortedGroups&&s.a.isRealNumber(e.Asset.ShortedGroups):"RelayPTRatioPrimary"==t?null!=e.Asset.RelayPTRatioPrimary&&s.a.isRealNumber(e.Asset.RelayPTRatioPrimary):"RelayPTRatioSecondary"==t?null!=e.Asset.RelayPTRatioSecondary&&s.a.isRealNumber(e.Asset.RelayPTRatioSecondary):"Sh"==t&&(null!=e.Asset.Sh&&s.a.isRealNumber(e.Asset.Sh))}return r.useEffect((function(){null!=e.Asset.Fused&&null!=e.Asset.Compensated&&null!=e.Asset.CktSwitcher&&0!=e.Asset.CktSwitcher.length||e.UpdateState(c(c({},e.Asset),{Fused:!0,Compensated:!1,CktSwitcher:"0"}))}),[e.Asset]),null==e.Asset?null:r.createElement(r.Fragment,null,r.createElement(d,{Record:e.Asset,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"NumberOfBanks",Label:"Number Of Banks",Feedback:"Number Of Banks is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(u,{Record:e.Asset,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"CapacitancePerBank",Label:"Capacitor Step Size (kVAR)",Feedback:"Capacitor Step Size is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"MaxKV",Label:"Maximum Operating Voltage (kV)",Feedback:"Maximum Operating Voltage is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"UnitKV",Label:"Rated Voltage of a Unit (kV)",Feedback:"Rated Voltage of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"UnitKVAr",Label:"Rating of a Unit (kVAR)",Feedback:"Rating of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"PosReactanceTol",Label:"pos. Reactance Tolerance of a Unit (%)",Feedback:"pos. Reactance Tolerance of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"NegReactanceTol",Label:"neg. Reactance Tolerance of a Unit (%)",Feedback:"neg. Reactance Tolerance of a Unit (%) is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Nparalell",Label:e.Asset.Fused?"Num. of Units per group":"Num. of Parallel Strings",Feedback:(e.Asset.Fused?"Num. of Caps. per group":"Num. of Parallel Strings")+" is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Nseries",Label:e.Asset.Fused?"Num. of Series Groups per Phase":"Num. Units in each String",Feedback:(e.Asset.Fused?"Num. of Series Groups per Phase":"Num. Units in each String")+" is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),e.Asset.Fused?r.createElement(r.Fragment,null,r.createElement(i.a,{Record:e.Asset,Field:"LowerXFRRatio",Label:"Midgroup VT Ratio",Feedback:"Midgroup VT Ratio is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Nshorted",Label:"Initial guess of shorted elements",Feedback:"Initial guess of shorted elements is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"BlownFuses",Label:"Initial Guess of blown fuses per group",Feedback:"Initial Guess of blown fuses per group is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"BlownGroups",Label:"Initial guess of Groups with blown Fuse",Feedback:"Initial guess of Groups with blown Fuse is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})):r.createElement(r.Fragment,null,e.Asset.Compensated?r.createElement(r.Fragment,null,r.createElement(p,{Record:e.Asset,Field2:"RelayPTRatioSecondary",Field1:"RelayPTRatioPrimary",Label:"Relay PT Ratio (primary - secondary V)",Feedback:"Relay PT ratio  is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Rh",Label:"Vt Input Resistor (Ohm)",Feedback:"Vt input resistor is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Sh",Label:"Vt Input Resistor Wattage (W)",Feedback:"Vt input resistor wattage is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})):r.createElement(r.Fragment,null,r.createElement(i.a,{Record:e.Asset,Field:"Rv",Label:"Voltage Divider output R (Ohm)",Feedback:"Voltage Divider output R is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Rh",Label:"Voltage Divider input R (Ohm)",Feedback:"Voltage Divider input R is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})),r.createElement(i.a,{Record:e.Asset,Field:"NSeriesGroup",Label:"Num. of Series Groups in each Unit",Feedback:"Num. of Series Groups in each Unit is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"NParalellGroup",Label:"Num. of Elements in each Group",Feedback:"Num. of Elements in each Group is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"VTratioBus",Label:"Bus VT Ratio",Feedback:"Bus VT Ratio is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"NumberLVCaps",Label:"Num.of Relay Caps",Feedback:"Num. of Relay Caps is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"NumberLVUnits",Label:"Num. of Elements per Relay Cap",Feedback:"Num. of Elements per Relay Cap is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"LVKVAr",Label:"Low Voltage Cap size (kVAR)",Feedback:"Low Voltage Cap size is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"LVKV",Label:"Low Voltage Cap rating (V)",Feedback:"Low Volatage Cap rating is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"LVNegReactanceTol",Label:"neg. Reactance Tolerance of LV Unit (%)",Feedback:"neg. Reactance Tolerance of LV Unitis a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"LVPosReactanceTol",Label:"pos. Reactance Tolerance of LV Unit (%)",Feedback:"pos. Reactance Tolerance of LV Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Nshorted",Label:"Initial guess of shorted elements",Feedback:"Initial guess of shorted elements is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})))};var d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.computBools=function(e){var t=l.clone(this.props.Record);"0"==e?(t.Compensated=!0,t.Fused=!1):"1"==e?(t.Compensated=!1,t.Fused=!1):"2"==e&&(t.Compensated=!1,t.Fused=!0),this.props.Setter(t)},t.prototype.computeSelection=function(e){return e.Compensated?"0":e.Fused?"2":"1"},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,"Design"),r.createElement("select",{className:"form-control",value:this.computeSelection(this.props.Record),disabled:null!=this.props.Disabled&&this.props.Disabled,onChange:function(t){return e.computBools(t.target.value)}},r.createElement("option",{key:0,value:"0"},"Fuseless Compensated"),r.createElement("option",{key:1,value:"1"},"Fuseless Uncompensated"),r.createElement("option",{key:2,value:"2"},"Fused")))},t}(r.Component),u=function(e){function t(t,a){var n=e.call(this,t,a)||this,r=[];null!=n.props.Record.CktSwitcher&&(r=n.props.Record.CktSwitcher.trim().split(","));var l=1;return null!=n.props.Record.NumberOfBanks&&(l=n.props.Record.NumberOfBanks),r.length!==parseInt(l.toString())&&(r=Array.from(Array(parseInt(l.toString())),(function(e,t){return"0"}))),n.state={preSwitch:r.map((function(e){return"1"==e.trim()}))},n}return o(t,e),t.prototype.updateValues=function(e){var t=[];null!=e&&(t=e.trim().split(","));var a=1;null!=this.props.Record.NumberOfBanks&&(a=this.props.Record.NumberOfBanks),t.length!==parseInt(a.toString())&&(t=Array.from(Array(parseInt(a.toString())),(function(e,t){return"0"}))),this.setState({preSwitch:t.map((function(e){return"1"==e.trim()}))})},t.prototype.componentDidUpdate=function(e,t){if(e.Record.NumberOfBanks===this.props.Record.NumberOfBanks&&e.Record.CktSwitcher===this.props.Record.CktSwitcher||this.updateValues(this.props.Record.CktSwitcher),!l.isEqual(t,this.state)){var a=l.clone(this.props.Record);a.CktSwitcher=this.state.preSwitch.map((function(e){return e?"1":"0"})).join(","),this.props.Setter(a)}},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,"CapBank with Pre-insertion Switcher"),r.createElement("div",null,this.state.preSwitch.map((function(t,a){return r.createElement("div",{className:"from-check form-check-inline",key:a},r.createElement("input",{className:"form-check-input",type:"checkbox",id:"inlineCheckbox-"+a,onChange:function(t){var n=l.clone(e.state.preSwitch);n[a]=!n[a],e.setState({preSwitch:n})},value:t?1:0,checked:t,disabled:null!=e.props.Disabled&&e.props.Disabled}),r.createElement("label",{className:"form-check-label",htmlFor:"inlineCheckbox-"+a},a+1))}))))},t}(r.Component);function p(e){return r.createElement("div",{className:"form-group"},r.createElement("label",null,null==e.Label?e.Field1+" "+e.Field2:e.Label),r.createElement("div",{className:"input-group"},r.createElement("input",{type:void 0===e.Type?"text":e.Type,className:e.Valid(e.Field1)?"form-control":"form-control is-invalid",onChange:function(t){var a;return e.Setter(c(c({},e.Record),((a={})[e.Field1]=""!==t.target.value?t.target.value:null,a)))},value:null==e.Record[e.Field1]?"":e.Record[e.Field1].toString(),disabled:null!=e.Disabled&&e.Disabled}),r.createElement("input",{type:void 0===e.Type?"text":e.Type,className:e.Valid(e.Field2)?"form-control":"form-control is-invalid",onChange:function(t){var a;return e.Setter(c(c({},e.Record),((a={})[e.Field2]=""!==t.target.value?t.target.value:null,a)))},value:null==e.Record[e.Field2]?"":e.Record[e.Field2].toString(),disabled:null!=e.Disabled&&e.Disabled})),r.createElement("div",{className:"invalid-feedback"},null==e.Feedback?e.Field1+" "+e.Field2+" is a required field.":e.Feedback))}},55:function(e,t,a){"use strict";var n=a(0);t.a=function(e){return n.createElement("span",null,"No Additional Attributes")}},56:function(e,t,a){"use strict";var n=a(0),r=a(31),l=a(33),s=a(35);t.a=function(e){function t(t){return"MaxFaultDistance"==t?null==e.Asset.MaxFaultDistance||l.a.isRealNumber(e.Asset.MaxFaultDistance):"MinFaultDistance"==t?null==e.Asset.MinFaultDistance||l.a.isRealNumber(e.Asset.MinFaultDistance):"Length"==t?null==e.Asset.Detail.Length||l.a.isRealNumber(e.Asset.Detail.Length):"R0"==t?null==e.Asset.Detail.R0||l.a.isRealNumber(e.Asset.Detail.R0):"X0"==t?null==e.Asset.Detail.X0||l.a.isRealNumber(e.Asset.Detail.X0):"R1"==t?null==e.Asset.Detail.R1||l.a.isRealNumber(e.Asset.Detail.R1):"X1"==t?null==e.Asset.Detail.X1||l.a.isRealNumber(e.Asset.Detail.X1):"ThermalRating"==t&&(null==e.Asset.Detail.ThermalRating||l.a.isRealNumber(e.Asset.Detail.ThermalRating))}function a(t){var a=r.clone(e.Asset);a.Detail=t,e.UpdateState(a)}return n.useEffect((function(){}),[e.Asset]),null==e.Asset||null==e.Asset.Detail?null:n.createElement(n.Fragment,null,n.createElement(s.Input,{Record:e.Asset,Field:"MaxFaultDistance",Label:"Max Fault Distance",Feedback:"Max Fault Distance is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.Input,{Record:e.Asset,Field:"MinFaultDistance",Label:"Min Fault Distance",Feedback:"Min Fault Distance is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement("div",{className:"alert alert-info",role:"alert"},n.createElement("p",null,"Reactance, Length and Thermal rating are based on the LineSegments associated with this Line."),n.createElement("p",null,"To edit these values the properties of the LineSegement need to be changed.")),n.createElement(s.Input,{Record:e.Asset.Detail,Field:"Length",Feedback:"Length is a required numeric field.",Valid:t,Setter:a,Disabled:!0}),n.createElement(s.Input,{Record:e.Asset.Detail,Field:"R0",Valid:t,Setter:a,Disabled:!0}),n.createElement(s.Input,{Record:e.Asset.Detail,Field:"X0",Valid:t,Setter:a,Disabled:!0}),n.createElement(s.Input,{Record:e.Asset.Detail,Field:"R1",Valid:t,Setter:a,Disabled:!0}),n.createElement(s.Input,{Record:e.Asset.Detail,Field:"X1",Valid:t,Setter:a,Disabled:!0}),n.createElement(s.Input,{Record:e.Asset.Detail,Field:"ThermalRating",Label:"Thermal Rating",Valid:t,Setter:a,Disabled:!0}))}},57:function(e,t,a){"use strict";var n=a(0),r=a(33),l=a(37);t.a=function(e){function t(t){return"PrimaryVoltageKV"==t?null==e.Asset.PrimaryVoltageKV||r.a.isRealNumber(e.Asset.PrimaryVoltageKV):"SecondaryVoltageKV"==t?null==e.Asset.SecondaryVoltageKV||r.a.isRealNumber(e.Asset.SecondaryVoltageKV):"Tap"==t?null==e.Asset.Tap||r.a.isRealNumber(e.Asset.Tap):"R0"==t?null!=e.Asset.R0&&r.a.isRealNumber(e.Asset.R0):"X0"==t?null!=e.Asset.X0&&r.a.isRealNumber(e.Asset.X0):"R1"==t?null!=e.Asset.R1&&r.a.isRealNumber(e.Asset.R1):"X1"==t?null!=e.Asset.X1&&r.a.isRealNumber(e.Asset.X1):"ThermalRating"==t&&(null!=e.Asset.ThermalRating&&r.a.isRealNumber(e.Asset.ThermalRating))}return null==e.Asset?null:n.createElement(n.Fragment,null,n.createElement(l.a,{Record:e.Asset,Field:"R0",Feedback:"R0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"X0",Feedback:"X0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"R1",Feedback:"R1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"X1",Feedback:"X1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal Rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"PrimaryVoltageKV",Label:"Primary Voltage (kV)",Feedback:"Primary Voltage (kV) is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"SecondaryVoltageKV",Label:"Secondary Voltage (kV)",Feedback:"Secondary Voltage (kV) is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"Tap",Feedback:"Tap is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},73:function(e,t,a){"use strict";var n=a(0),r=a(37),l=a(33);t.a=function(e){return n.createElement(n.Fragment,null,n.createElement(r.a,{Record:e.Asset,Field:"OnVoltageThreshhold",Label:"Relay On Voltage Threshhold (pu)",Feedback:"Relay On Voltage Threshhold (pu) is a required field.",Valid:function(t){return"OnVoltageThreshhold"!=t||null!=e.Asset.OnVoltageThreshhold&&l.a.isRealNumber(e.Asset.OnVoltageThreshhold)},Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},81:function(e,t,a){"use strict";var n=a(0),r=a(33),l=a(35);t.a=function(e){function t(t){return"Length"==t?null!=e.Asset.Length&&r.a.isRealNumber(e.Asset.Length):"R0"==t?null!=e.Asset.R0&&r.a.isRealNumber(e.Asset.R0):"X0"==t?null!=e.Asset.X0&&r.a.isRealNumber(e.Asset.X0):"R1"==t?null!=e.Asset.R1&&r.a.isRealNumber(e.Asset.R1):"X1"==t?null!=e.Asset.X1&&r.a.isRealNumber(e.Asset.X1):"ThermalRating"==t&&(null!=e.Asset.ThermalRating&&r.a.isRealNumber(e.Asset.ThermalRating))}return n.useEffect((function(){}),[e.Asset]),null==e.Asset?null:n.createElement(n.Fragment,null,n.createElement(l.Input,{Record:e.Asset,Field:"Length",Feedback:"Length is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.Input,{Record:e.Asset,Field:"R0",Feedback:"R0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.Input,{Record:e.Asset,Field:"X0",Feedback:"X0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.Input,{Record:e.Asset,Field:"R1",Feedback:"R1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.Input,{Record:e.Asset,Field:"X1",Feedback:"X1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.Input,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal Rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{329:function(e,t,n){"use strict";n.r(t);var a,l=n(0),r=n(59),o=n(60),i=n(31),s=n(35),c=(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.state={Customer:a.props.Customer},a.valid=a.valid.bind(a),a}return c(t,e),t.prototype.componentDidMount=function(){},t.prototype.componentWillReceiveProps=function(e){this.setState({Customer:e.Customer})},t.prototype.updateCustomer=function(){var e=this,t=i.clone(this.state.Customer);return $.ajax({type:"PATCH",url:homePath+"api/SystemCenter/Customer/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(this.state.Customer),dataType:"json",cache:!0,async:!0}).done((function(n){e.props.stateSetter(t)}))},t.prototype.valid=function(e){return"CustomerKey"==e?null!=this.state.Customer.CustomerKey&&this.state.Customer.CustomerKey.length>0&&this.state.Customer.CustomerKey.length<=25:"Name"==e?null==this.state.Customer.Name||this.state.Customer.Name.length<=100:"Phone"==e?null==this.state.Customer.Phone||this.state.Customer.Phone.length<=20:"Description"==e&&(null==this.state.Customer.Description||this.state.Customer.Description.length<=200)},t.prototype.render=function(){var e=this;return l.createElement("div",{className:"card",style:{marginBottom:10}},l.createElement("div",{className:"card-header"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h4",null,"Customer Information:")))),l.createElement("div",{className:"card-body"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement(s.Input,{Record:this.state.Customer,Field:"CustomerKey",Feedback:"AccountName of less than 25 characters is required.",Valid:this.valid,Setter:function(t){return e.setState({Customer:t})}}),l.createElement(s.Input,{Record:this.state.Customer,Field:"Name",Feedback:"Name must be less than 100 characters.",Valid:this.valid,Setter:function(t){return e.setState({Customer:t})}}),l.createElement(s.Input,{Record:this.state.Customer,Field:"Phone",Feedback:"Phone must be less than 20 characters.",Valid:this.valid,Setter:function(t){return e.setState({Customer:t})}}),l.createElement(s.TextArea,{Rows:3,Record:this.state.Customer,Field:"Description",Feedback:"Description must be less than 200 characters.",Valid:this.valid,Setter:function(t){return e.setState({Customer:t})}})))),l.createElement("div",{className:"card-footer"},l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary",onClick:function(){return e.updateCustomer()},hidden:0==this.state.Customer.ID,disabled:this.state.Customer==this.props.Customer},"Update")),l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-default",onClick:function(){return e.setState({Customer:e.props.Customer})},disabled:this.state.Customer==this.props.Customer},"Reset"))))},t}(l.Component),d=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function a(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(a.prototype=n.prototype,new a)}}(),m=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.state={Sites:[],AllSites:[],SelectedSites:[],SearchText:""},a.getSites=a.getSites.bind(a),a.addSites=a.addSites.bind(a),a}return d(t,e),t.prototype.componentDidMount=function(){this.getSites(),this.getAllSites()},t.prototype.getSites=function(){var e=this;$.ajax({type:"GET",url:homePath+"api/SystemCenter/CustomerAccess/"+this.props.Customer.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){return e.setState({Sites:t})}))},t.prototype.addSites=function(){var e=this;$.ajax({type:"POST",url:homePath+"api/SystemCenter/CustomerAccess/AddMultiple",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(this.state.SelectedSites.map((function(t){return{ID:0,CustomerID:e.props.Customer.ID,PQViewSiteID:parseInt(t.toString())}}))),cache:!1,async:!0}).done((function(){e.getSites()})).fail((function(t){500==t.status?alert(t.responseJSON.ExceptionMessage):e.getSites()}))},t.prototype.getAllSites=function(){var e=this;$.ajax({type:"GET",url:homePath+"api/PQView/Site/",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){e.setState({AllSites:i.orderBy(t,["name"],["asc"])})}))},t.prototype.deleteCustommerAccess=function(e){var t=this;$.ajax({type:"DELETE",url:homePath+"api/SystemCenter/CustomerAccess/Delete",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(e),cache:!1,async:!0}).done((function(){t.getSites()})).fail((function(e){500==e.status?alert(e.responseJSON.ExceptionMessage):t.getSites()}))},t.prototype.render=function(){var e=this;return l.createElement("div",{className:"card",style:{marginBottom:10}},l.createElement("div",{className:"card-header"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h4",null,"Sites:")))),l.createElement("div",{className:"card-body"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("div",{style:{width:"100%",height:window.innerHeight-421,maxHeight:window.innerHeight-421,padding:0,overflowY:"auto"}},l.createElement("table",{className:"table"},l.createElement("thead",null,l.createElement("tr",null,l.createElement("th",null,"Assigned Sites:"),l.createElement("th",null))),l.createElement("tbody",null,this.state.AllSites.length>0?this.state.Sites.map((function(t,n){return l.createElement("tr",{key:n},l.createElement("td",null,e.state.AllSites.find((function(e){return e.id==t.PQViewSiteID})).name),l.createElement("td",null,l.createElement("button",{className:"btn btn-sm",onClick:function(n){n.preventDefault(),e.deleteCustommerAccess(t)}},l.createElement("span",null,l.createElement("i",{className:"fa fa-times"})))))})):null)))),l.createElement("div",{className:"col"},l.createElement("input",{className:"form-control",placeholder:"Search filter for select box ...",value:this.state.SearchText,onChange:function(t){return e.setState({SearchText:t.target.value})}}),l.createElement("select",{className:"form-control",style:{paddingTop:5,height:"calc(100% - 35px)"},multiple:!0,onChange:function(t){return e.setState({SelectedSites:$(t.target).val()})}},this.state.AllSites.filter((function(t){return t.name.toLowerCase().indexOf(e.state.SearchText.toLowerCase())>=0})).map((function(t){return l.createElement("option",{key:t.id,value:t.id,hidden:null!=e.state.Sites.find((function(e){return e.PQViewSiteID==t.id})),disabled:null!=e.state.Sites.find((function(e){return e.PQViewSiteID==t.id}))},t.name)})))))),l.createElement("div",{className:"card-footer"},l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary pull-right",onClick:this.addSites},"Add Sites"))))},t}(l.Component),p=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function a(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(a.prototype=n.prototype,new a)}}(),f=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.state={Customer:null,Tab:a.getTab()},a}return p(t,e),t.prototype.getTab=function(){return sessionStorage.hasOwnProperty("Customer.Tab")?JSON.parse(sessionStorage.getItem("Customer.Tab")):"customerInfo"},t.prototype.getCustomer=function(){var e=this;null!=this.props.CustomerID&&$.ajax({type:"GET",url:homePath+"api/SystemCenter/Customer/One/"+this.props.CustomerID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(t){return e.setState({Customer:t})}))},t.prototype.deleteMeter=function(){if(confirm("This will delete the Customer Permanently"))return $.ajax({type:"DELETE",url:homePath+"api/SystemCenter/Customer/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(this.state.Customer),dataType:"json",cache:!0,async:!0})},t.prototype.setTab=function(e){sessionStorage.setItem("Customer.Tab",JSON.stringify(e)),this.setState({Tab:e})},t.prototype.componentDidMount=function(){this.getCustomer()},t.prototype.componentWillUnmount=function(){},t.prototype.render=function(){var e=this;return null==this.state.Customer?null:l.createElement("div",{style:{width:"100%",height:window.innerHeight-63,maxHeight:window.innerHeight-63,overflow:"hidden",padding:15}},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h2",null,null!=this.state.Customer?this.state.Customer.Name:"")),l.createElement("div",{className:"col"},l.createElement("button",{className:"btn btn-danger pull-right",hidden:null==this.state.Customer,onClick:function(){return e.deleteMeter().done((function(){return window.location.href=homePath+"index.cshtml?name=PQViewCustomers"}))}},"Delete Customer (Permanent)"))),l.createElement("hr",null),l.createElement("ul",{className:"nav nav-tabs"},l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("customerInfo"==this.state.Tab?" active":""),onClick:function(){return e.setTab("customerInfo")},"data-toggle":"tab",href:"#customerInfo"},"Customer Info")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("additionalFields"==this.state.Tab?" active":""),onClick:function(){return e.setTab("additionalFields")},"data-toggle":"tab"},"Additional Fields")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("meters"==this.state.Tab?" active":""),onClick:function(){return e.setTab("meters")},"data-toggle":"tab",href:"#meters"},"Assigned Meters")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("notes"==this.state.Tab?" active":""),onClick:function(){return e.setTab("notes")},"data-toggle":"tab",href:"#notes"},"Notes"))),l.createElement("div",{className:"tab-content",style:{maxHeight:window.innerHeight-235,overflow:"hidden"}},l.createElement("div",{className:"tab-pane "+("customerInfo"==this.state.Tab?" active":"fade"),id:"customerInfo"},l.createElement(u,{Customer:this.state.Customer,stateSetter:function(t){return e.setState({Customer:t})}})),l.createElement("div",{className:"tab-pane "+("additionalFields"==this.state.Tab?" active":"fade"),id:"additionalFields"},l.createElement(o.a,{ID:this.state.Customer.ID,Type:"Customer",Tab:this.state.Tab})),l.createElement("div",{className:"tab-pane "+("meters"==this.state.Tab?" active":"fade"),id:"meters"},l.createElement(m,{Customer:this.state.Customer})),l.createElement("div",{className:"tab-pane "+("notes"==this.state.Tab?" active":"fade"),id:"notes"},l.createElement(r.a,{ID:this.props.CustomerID,Type:"Customer"}))))},t}(l.Component);t.default=f},59:function(e,t,n){"use strict";var a=n(35),l=n(38),r=n(39),o=n.n(r),i=n(31),s=n.n(i),c=n(0),u=function(){return(u=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},d=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return o};t.a=function(e){var t=d(c.useState(0),2),n=t[0],r=t[1],i=d(c.useState({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),2),m=i[0],p=i[1],f=d(c.useState(!1),2),h=f[0],y=f[1],b=d(c.useState([]),2),E=b[0],T=b[1],S=d(c.useState("Timestamp"),2),g=S[0],N=S[1],v=d(c.useState(!1),2),C=v[0],D=v[1],w=d(c.useState(!1),2),x=w[0],F=w[1],I=d(c.useState(!1),2),j=I[0],A=I[1];function V(){var t=$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/ForObject/"+e.Type+"/"+e.ID+"/Search",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[],OrderBy:g,Ascending:C}),cache:!1,async:!0});return t.done((function(e){var t=JSON.parse(e);T(t)})),t}function k(e){$.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Note/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),cache:!0,async:!0}).done((function(){return V()}))}function O(t){p({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify({ID:0,NoteTypeID:n,ReferenceTableID:e.ID,Note:t.Note,Timestamp:moment().format("MM/DD/YYYY HH:mm"),UserAccount:""}),dataType:"json",cache:!0,async:!0}).done((function(e){V()}))}return c.useEffect((function(){var t,n=((t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/NoteType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).then((function(t){var n=t.find((function(t){return t.ReferenceTableName==e.Type}));r(n.ID)})),t);return V(),function(){null!=n&&null!=n.abort&&n.abort()}}),[e.Type]),c.useEffect((function(){var e=V();return function(){null!=e&&null!=e.abort&&e.abort()}}),[e.ID,g,C]),c.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},c.createElement("div",{className:"card-header"},c.createElement("div",{className:"row"},c.createElement("div",{className:"col"},c.createElement("h4",null,"Notes:")))),c.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},c.createElement("div",null,c.createElement(o.a,{cols:[{key:"Note",label:"Note",headerStyle:{width:"50%"},rowStyle:{width:"50%"}},{key:"Timestamp",label:"Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return moment.utc(e.Timestamp).format("MM/DD/YYYY HH:mm")}},{key:"UserAccount",label:"User",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return c.createElement(c.Fragment,null,c.createElement("button",{className:"btn btn-sm",onClick:function(t){return p(e),void y(!0)}},c.createElement("span",null,c.createElement("i",{className:"fa fa-pencil"}))),c.createElement("button",{className:"btn btn-sm",onClick:function(t){return k(e)}},c.createElement("span",null,c.createElement("i",{className:"fa fa-times"}))))}}],tableClass:"table table-hover",data:E,sortField:g,ascending:C,onSort:function(e){e.col==g?D(!C):(D(!0),N(e.col))},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-615,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return e.ID==m.ID}})),c.createElement(a.TextArea,{Record:m,Rows:4,Field:"Note",Setter:function(e){return p(e)},Valid:function(){return m.Note.length>0},Label:""}),c.createElement(l.Modal,{Show:h,Title:"Edit Note",ShowCancel:!0,CallBack:function(e){if(0!=m.Note.length||!e){if(y(!1),e){var t=s.a.cloneDeep(m);k(t),O(t)}p({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""})}},DisableConfirm:0==m.Note.length,ShowX:!0,ConfirmShowToolTip:0==m.Note.length,ConfirmToolTipContent:c.createElement("p",null," ",c.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"An empty Note can not be saved. ")},c.createElement(a.TextArea,{Record:m,Rows:4,Field:"Note",Setter:function(e){null==e.Note?p(u(u({},e),{Note:""})):p(e)},Valid:function(){return m.Note.length>0},Label:""}))),c.createElement("div",{className:"card-footer"},c.createElement("div",{className:"btn-group mr-2"},c.createElement("button",{className:"btn btn-primary"+(0==m.Note.length?" disabled":""),onClick:function(){m.Note.length>0&&O(m)},"data-tooltip":"Add",style:{cursor:0==m.Note.length?"not-allowed":"pointer"},onMouseOver:function(){return F(!0)},onMouseOut:function(){return F(!1)}},"Add Note"),c.createElement(l.ToolTip,{Show:x&&0==m.Note.length,Position:"top",Theme:"dark",Target:"Add"},c.createElement("p",null," A note needs to be entered. "))),c.createElement("div",{className:"btn-group mr-2"},c.createElement("button",{className:"btn btn-default"+(0==m.Note.length?" disabled":""),onClick:function(){return p((function(e){return u(u({},e),{Note:""})}))},style:{cursor:0==m.Note.length?"not-allowed":"pointer"},"data-tooltip":"Remove",onMouseOver:function(){return A(!0)},onMouseOut:function(){return A(!1)}},"Clear"),c.createElement(l.ToolTip,{Show:j&&0==m.Note.length,Position:"top",Theme:"dark",Target:"Remove"},c.createElement("p",null," The note field is already empty. ")))))}},60:function(e,t,n){"use strict";var a=n(0),l=n(31),r=n(33),o=n(38),i=n(35),s=n(39),c=n.n(s),u=function(){return(u=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},d=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return o},m=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e};t.a=function(e){var t=d(a.useState([]),2),n=t[0],l=t[1],s=d(a.useState([]),2),m=s[0],f=s[1],h=d(a.useState([]),2),y=h[0],b=h[1],E=d(a.useState([]),2),T=E[0],S=E[1],g=d(a.useState([]),2),N=g[0],v=g[1],C=d(a.useState([]),2),D=C[0],w=C[1],x=d(a.useState(!1),2),F=x[0],I=x[1],j=d(a.useState("FieldName"),2),A=j[0],V=j[1],k=d(a.useState(!1),2),O=k[0],P=k[1],B=d(a.useState({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),2),R=B[0],L=B[1],M=d(a.useState(!1),2),H=M[0],_=M[1],J=d(a.useState(!1),2),K=J[0],Y=J[1],G=d(a.useState(!1),2),U=G[0],X=G[1],q=d(a.useState("None"),2),Q=q[0],z=q[1],W=d(a.useState(!0),2),Z=W[0],ee=W[1],te={ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1};function ne(){var t,n=ae(),a=le(),r=((t=$.ajax({type:"GET",url:homePath+"api/ValueListGroup",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(e){l(e)})),t),o=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ExternalDataBase",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){f(e.map((function(e){return e.ExternalDB})))})),e}(),i=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/ExternalDBTables/TableName/0",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){var t=JSON.parse(e);b(t.map((function(e){return e.TableName})))})),e}();return L({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),function(){null!=n.abort&&n.abort(),null!=a.abort&&a.abort(),null!=r.abort&&r.abort(),null!=o.abort&&o.abort(),null!=i.abort&&i.abort()}}function ae(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/"+e.Type+"/"+A+"/"+(O?"1":"0"),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){S(e)})),t}function le(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalFieldValue/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){v(e)})),t}function re(){return Z&&null!=R.FieldName&&R.FieldName.length>0&&(null==R.ExternalDB||0==R.ExternalDB.length||!(null==R.ExternalDBTable||0==R.ExternalDBTable.length)&&!(null==R.ExternalDBTableKey||0==R.ExternalDBTableKey.length))}function oe(){return D.some((function(e,t){var n=N.findIndex((function(t){return t.AdditionalFieldID==e.AdditionalFieldID}));return(-1!=n||null!=e.Value)&&(-1==n||e.Value!=N[n].Value)}))}function ie(e){var t=[];return D.forEach((function(n,l){var r=T.findIndex((function(e){return e.ID==n.AdditionalFieldID})),o=N.findIndex((function(e){return e.AdditionalFieldID==n.AdditionalFieldID}));-1==r||-1==o&&null==n.Value||(-1!=o?n.Value!=N[o].Value&&t.push(e?a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",T[r].FieldName,"' will be lost."):a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",T[r].FieldName,"' are valid.")):t.push(e?a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",T[r].FieldName,"' will be lost."):a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",T[r].FieldName,"' are valid.")))})),t}function se(){return D.some((function(e){var t=T.findIndex((function(t){return t.ID==e.AdditionalFieldID}));return-1!=t&&("integer"==T[t].Type&&!(null==e.Value||r.a.isInteger(e.Value)))}))}return a.useEffect((function(){return ne()}),[e.ID,e.Type,e.Tab]),a.useEffect((function(){w(N)}),[N]),a.useEffect((function(){var e=ae();return function(){null!=e.abort&&e.abort()}}),[A,O]),a.useEffect((function(){var e=function(){if(null==R.FieldName||0==R.FieldName.length)return null;var e=$.ajax({type:"Post",url:homePath+"api/SystemCenter/AdditionalField/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[{FieldName:"FieldName",Operator:"=",SearchText:R.FieldName,Type:"string"}],OrderBy:"FieldName",Ascending:!0}),cache:!1,async:!0});return e.done((function(e){var t=JSON.parse(e);0==t.length?ee(!0):t.length>1?ee(!1):t[0].ID==R.ID?ee(!0):ee(!1)})),e}();return function(){null!=e&&null!=e.abort&&e.abort()}}),[R.ID,R.FieldName]),a.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},a.createElement("div",{className:"card-header"},a.createElement("div",{className:"row"},a.createElement("div",{className:"col"},a.createElement("h4",null,"Additional Fields:")),a.createElement("div",{className:"col"},F?a.createElement("button",{className:"btn btn-default pull-right","data-tooltip":"View",onClick:function(){I(!1),le()},onMouseEnter:function(){return z("View")},onMouseLeave:function(){return z("None")}},"View"):a.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){return I(!0)}},"Edit"),a.createElement(o.ToolTip,{Show:"View"==Q&&oe(),Position:"left",Theme:"dark",Target:"View"},ie(!0))))),a.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},a.createElement(c.a,{cols:[{key:"FieldName",label:"Field",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"ExternalDB",label:"Ext DB",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Type",label:"Type",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"IsSecure",label:"Value",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t){var n=N.findIndex((function(e){return e.AdditionalFieldID==t.ID}));return F?a.createElement(p,{Field:t,ParentTableID:e.ID,Values:D,Setter:function(e){return w(e)}}):n>-1&&null!=N[n].Value?N[n].Value.toString():""}},{key:"ID",label:"",headerStyle:{width:40,paddingRight:0,paddingLeft:10},rowStyle:{width:40,paddingRight:0,paddingLeft:10,paddingTop:36},content:function(e){return F?a.createElement("button",{className:"btn btn-sm",onClick:function(){L(e),X(!0)}},a.createElement("span",null,a.createElement("i",{className:"fa fa-pencil"}))):""}},{key:null,label:"",headerStyle:{width:40,paddingLeft:0,paddingRight:10},rowStyle:{width:40,paddingLeft:0,paddingTop:36,paddingRight:10},content:function(e){return F?a.createElement("button",{className:"btn btn-sm",onClick:function(){L(e),_(!0)}},a.createElement("span",null,a.createElement("i",{className:"fa fa-times"}))):""}}],tableClass:"table table-hover",data:T,sortField:A,ascending:O,onSort:function(e){null!=e.col&&"ID"!=e.col&&"IsSecure"!=e.col&&(e.col==A?P(!O):(P(!0),V(e.col)))},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-455},rowStyle:{display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),a.createElement("div",{className:"card-footer"},a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-primary"+(F?"":" disabled"),onMouseEnter:function(){return z("New")},onMouseLeave:function(){return z("None")},onClick:function(){F&&(X(!0),L(te))},"data-tooltip":"New"},"Add Field")),a.createElement(o.ToolTip,{Show:"New"==Q&&!F,Position:"top",Theme:"dark",Target:"New"},F?null:a.createElement("p",null," To add a new Field switch to Edit mode by clicking on the Edit Button on the upper right corner.")),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-primary"+(oe()&&F&&!se()?"":" disabled"),onClick:function(){oe()&&!se()&&F&&$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalFieldValue/Array",contentType:"application/json; charset=utf-8",data:JSON.stringify(D),dataType:"json",cache:!0,async:!0}).done((function(e){ne()}))},onMouseEnter:function(){return z("Save")},onMouseLeave:function(){return z("None")},"data-tooltip":"SaveValues"},"Save Changes")),a.createElement(o.ToolTip,{Show:"Save"==Q&&(!F||oe()),Position:"top",Theme:"dark",Target:"SaveValues"},F?null:a.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),oe()&&!se()?ie(!1):null,oe()&&se()?function(){if(!se())return[];var e=[];return D.forEach((function(t,n){var l=T.findIndex((function(e){return e.ID==t.AdditionalFieldID}));-1!=l&&("integer"!=T[l].Type||null==t.Value||r.a.isInteger(t.Value)||e.push(a.createElement("p",{key:n}," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Value for '",T[l].FieldName,"' is required to be an integer.")))})),e}():null),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-default"+(oe()&&F?"":" disabled"),onClick:function(){oe()&&F&&le()},onMouseEnter:function(){return z("Clear")},onMouseLeave:function(){return z("None")},"data-tooltip":"Clear"},"Reset")),a.createElement(o.ToolTip,{Show:"Clear"==Q&&(!F||oe()),Position:"top",Theme:"dark",Target:"Clear"},F?null:a.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),oe()?ie(!0):null)),a.createElement(o.LoadingScreen,{Show:K}),a.createElement(o.Warning,{Show:H,Title:"Delete "+R.FieldName,Message:"This will delete the field '"+R.FieldName+"' from all "+e.Type+"s and will also delete all information assigned to these fields.",CallBack:function(e){var t;e&&(t=R,Y(!0),$.ajax({type:"DELETE",url:homePath+"api/SystemCenter/AdditionalField/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),dataType:"json",cache:!0,async:!0}).done((function(e){ne(),Y(!1)}))),_(!1)}}),a.createElement(o.Modal,{Title:"Additional Field",ConfirmText:"Save",CancelText:"Close",ConfirmBtnClass:"btn-primary"+(re()?"":" disabled"),Show:U,Size:"lg",ShowX:!0,CallBack:function(e,t){!re()&&e||(e&&(Y(!0),$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalField/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(R),dataType:"json",cache:!0,async:!0}).done((function(e){ne(),Y(!1)}))),X(!1))},ConfirmShowToolTip:!re(),ConfirmToolTipContent:a.createElement(a.Fragment,null,null!=R.FieldName&&0!=R.FieldName.length&&Z?null:a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Field Name is required and has to be unique."),null!=R.ExternalDB&&null==R.ExternalDBTable?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table."):null,null!=R.ExternalDB&&null==R.ExternalDBTableKey?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table Key."):null)},a.createElement(i.Input,{Record:R,Field:"FieldName",Valid:function(e){return null!=R.FieldName&&R.FieldName.length>0&&Z},Label:"Field Name",Setter:L,Feedback:"The additional field needs to have a unique Field Name"}),a.createElement(i.Select,{Record:R,Field:"Type",Options:[{Value:"string",Label:"string"},{Value:"integer",Label:"integer"},{Value:"number",Label:"number"}].concat(n.filter((function(e){return e.Enabled})).map((function(e){return{Value:e.Name,Label:e.Name}}))),Label:"Field Type",Setter:L}),a.createElement(i.Select,{Record:R,Field:"ExternalDB",Label:"External Database",Setter:function(e){null!=e.ExternalDB&&""!=e.ExternalDB||(e=u(u({},e),{ExternalDB:null,ExternalDBTable:null,ExternalDBTableKey:null})),L(e)},EmptyOption:!0,Options:m.map((function(e){return{Value:e,Label:e}}))}),a.createElement("div",{"data-tooltip":"ExternalDB",onMouseEnter:function(){return z("ExternalDB")},onMouseLeave:function(){return z("None")}},a.createElement(i.Select,{EmptyOption:!0,Disabled:null==R.ExternalDB||0==R.ExternalDB.length,Record:R,Field:"ExternalDBTable",Options:y.map((function(e){return{Value:e,Label:e}})),Label:"External Database Table",Setter:L})),a.createElement(i.Input,{Disabled:null==R.ExternalDB||0==R.ExternalDB.length,Record:R,Field:"ExternalDBTableKey",Valid:function(e){return!0},Label:"External Database Table Key",Setter:L}),a.createElement(i.CheckBox,{Record:R,Field:"IsSecure",Label:"Secure Data",Setter:L})),a.createElement(o.ToolTip,{Zindex:9999,Show:"ExternalDB"==Q&&(null==R.ExternalDB||0==R.ExternalDB.length),Position:"bottom",Theme:"dark",Target:"ExternalDB"},a.createElement("p",null," No External Database selected.")))};var p=function(e){var t=d(a.useState([]),2),n=t[0],o=t[1],s=d(a.useState(-1),2),c=s[0],u=s[1];function p(t){var n=l.cloneDeep(e.Values);n[c]=t,e.Setter(n)}function f(t){return"integer"==e.Field.Type?null==e.Values[c].Value||r.a.isInteger(e.Values[c].Value):"number"==e.Field.Type?null==e.Values[c].Value||r.a.isRealNumber(e.Values[c].Value):(e.Field.Type,!0)}return a.useEffect((function(){var t=e.Values.findIndex((function(t){return t.AdditionalFieldID==e.Field.ID}));u(t),-1==t&&e.Setter(m(e.Values,[{ID:0,AdditionalFieldID:e.Field.ID,OpenXDAParentTableID:e.ParentTableID,Value:null}]))}),[e.Values,e.Field]),a.useEffect((function(){if(["integer","number","boolean","string"].indexOf(e.Field.Type)<0){var t=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+e.Field.Type,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){o(e)})),function(){null!=t.abort&&t.abort()}}}),[e.Field.Type]),-1==c||null==e.Values[c]?null:"number"==e.Field.Type||"integer"==e.Field.Type?a.createElement(i.Input,{Record:e.Values[c],Field:"Value",Valid:f,Label:"",Type:"number",Setter:p,Feedback:e.Field.FieldName+" is an integer field."}):"string"==e.Field.Type?a.createElement(i.Input,{Record:e.Values[c],Field:"Value",Valid:f,Label:"",Type:"text",Setter:p}):"boolean"==e.Field.Type?a.createElement(i.CheckBox,{Record:e.Values[c],Field:"Value",Label:"",Setter:p}):a.createElement(i.Select,{EmptyOption:!0,Record:e.Values[c],Field:"Value",Label:"",Setter:p,Options:n.map((function(e){return{Value:e.ID.toString(),Label:e.Text}}))})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window.webpackJsonp=window.webpackJsonp||[]).push([[5],Array(32).concat([function(t,e){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}}},,function(t,e,i){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var r=i(46),n=r.Buffer;function o(t,e){for(var i in t)e[i]=t[i]}function h(t,e,i){return n(t,e,i)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=h),h.prototype=Object.create(n.prototype),o(n,h),h.from=function(t,e,i){if("number"==typeof t)throw new TypeError("Argument must not be a number");return n(t,e,i)},h.alloc=function(t,e,i){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=n(t);return void 0!==e?"string"==typeof i?r.fill(e,i):r.fill(e):r.fill(0),r},h.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n(t)},h.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},,function(t,e,i){(function(e){var r;t.exports=(r=r||function(t,r){var n;if("undefined"!=typeof window&&window.crypto&&(n=window.crypto),!n&&"undefined"!=typeof window&&window.msCrypto&&(n=window.msCrypto),!n&&void 0!==e&&e.crypto&&(n=e.crypto),!n)try{n=i(208)}catch(t){}var o=function(){if(n){if("function"==typeof n.getRandomValues)try{return n.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof n.randomBytes)try{return n.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")},h=Object.create||function(){function t(){}return function(e){var i;return t.prototype=e,i=new t,t.prototype=null,i}}(),s={},a=s.lib={},u=a.Base={extend:function(t){var e=h(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},f=a.WordArray=u.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||d).stringify(this)},concat:function(t){var e=this.words,i=t.words,r=this.sigBytes,n=t.sigBytes;if(this.clamp(),r%4)for(var o=0;o<n;o++){var h=i[o>>>2]>>>24-o%4*8&255;e[r+o>>>2]|=h<<24-(r+o)%4*8}else for(o=0;o<n;o+=4)e[r+o>>>2]=i[o>>>2];return this.sigBytes+=n,this},clamp:function(){var e=this.words,i=this.sigBytes;e[i>>>2]&=4294967295<<32-i%4*8,e.length=t.ceil(i/4)},clone:function(){var t=u.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],i=0;i<t;i+=4)e.push(o());return new f.init(e,t)}}),l=s.enc={},d=l.Hex={stringify:function(t){for(var e=t.words,i=t.sigBytes,r=[],n=0;n<i;n++){var o=e[n>>>2]>>>24-n%4*8&255;r.push((o>>>4).toString(16)),r.push((15&o).toString(16))}return r.join("")},parse:function(t){for(var e=t.length,i=[],r=0;r<e;r+=2)i[r>>>3]|=parseInt(t.substr(r,2),16)<<24-r%8*4;return new f.init(i,e/2)}},c=l.Latin1={stringify:function(t){for(var e=t.words,i=t.sigBytes,r=[],n=0;n<i;n++){var o=e[n>>>2]>>>24-n%4*8&255;r.push(String.fromCharCode(o))}return r.join("")},parse:function(t){for(var e=t.length,i=[],r=0;r<e;r++)i[r>>>2]|=(255&t.charCodeAt(r))<<24-r%4*8;return new f.init(i,e)}},p=l.Utf8={stringify:function(t){try{return decodeURIComponent(escape(c.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return c.parse(unescape(encodeURIComponent(t)))}},m=a.BufferedBlockAlgorithm=u.extend({reset:function(){this._data=new f.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=p.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var i,r=this._data,n=r.words,o=r.sigBytes,h=this.blockSize,s=o/(4*h),a=(s=e?t.ceil(s):t.max((0|s)-this._minBufferSize,0))*h,u=t.min(4*a,o);if(a){for(var l=0;l<a;l+=h)this._doProcessBlock(n,l);i=n.splice(0,a),r.sigBytes-=u}return new f.init(i,u)},clone:function(){var t=u.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),v=(a.Hasher=m.extend({cfg:u.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){m.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,i){return new t.init(i).finalize(e)}},_createHmacHelper:function(t){return function(e,i){return new v.HMAC.init(t,i).finalize(e)}}}),s.algo={});return s}(Math),r)}).call(this,i(21))},,,,function(t,e,i){var r,n,o,h,s,a,u,f,l,d,c,p,m,v,g,b,y,w,M;t.exports=(r=i(36),i(64),void(r.lib.Cipher||(n=r,o=n.lib,h=o.Base,s=o.WordArray,a=o.BufferedBlockAlgorithm,u=n.enc,u.Utf8,f=u.Base64,l=n.algo.EvpKDF,d=o.Cipher=a.extend({cfg:h.extend(),createEncryptor:function(t,e){return this.create(this._ENC_XFORM_MODE,t,e)},createDecryptor:function(t,e){return this.create(this._DEC_XFORM_MODE,t,e)},init:function(t,e,i){this.cfg=this.cfg.extend(i),this._xformMode=t,this._key=e,this.reset()},reset:function(){a.reset.call(this),this._doReset()},process:function(t){return this._append(t),this._process()},finalize:function(t){return t&&this._append(t),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function t(t){return"string"==typeof t?M:y}return function(e){return{encrypt:function(i,r,n){return t(r).encrypt(e,i,r,n)},decrypt:function(i,r,n){return t(r).decrypt(e,i,r,n)}}}}()}),o.StreamCipher=d.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),c=n.mode={},p=o.BlockCipherMode=h.extend({createEncryptor:function(t,e){return this.Encryptor.create(t,e)},createDecryptor:function(t,e){return this.Decryptor.create(t,e)},init:function(t,e){this._cipher=t,this._iv=e}}),m=c.CBC=function(){var t=p.extend();function e(t,e,i){var r,n=this._iv;n?(r=n,this._iv=void 0):r=this._prevBlock;for(var o=0;o<i;o++)t[e+o]^=r[o]}return t.Encryptor=t.extend({processBlock:function(t,i){var r=this._cipher,n=r.blockSize;e.call(this,t,i,n),r.encryptBlock(t,i),this._prevBlock=t.slice(i,i+n)}}),t.Decryptor=t.extend({processBlock:function(t,i){var r=this._cipher,n=r.blockSize,o=t.slice(i,i+n);r.decryptBlock(t,i),e.call(this,t,i,n),this._prevBlock=o}}),t}(),v=(n.pad={}).Pkcs7={pad:function(t,e){for(var i=4*e,r=i-t.sigBytes%i,n=r<<24|r<<16|r<<8|r,o=[],h=0;h<r;h+=4)o.push(n);var a=s.create(o,r);t.concat(a)},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},o.BlockCipher=d.extend({cfg:d.cfg.extend({mode:m,padding:v}),reset:function(){var t;d.reset.call(this);var e=this.cfg,i=e.iv,r=e.mode;this._xformMode==this._ENC_XFORM_MODE?t=r.createEncryptor:(t=r.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==t?this._mode.init(this,i&&i.words):(this._mode=t.call(r,this,i&&i.words),this._mode.__creator=t)},_doProcessBlock:function(t,e){this._mode.processBlock(t,e)},_doFinalize:function(){var t,e=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(e.pad(this._data,this.blockSize),t=this._process(!0)):(t=this._process(!0),e.unpad(t)),t},blockSize:4}),g=o.CipherParams=h.extend({init:function(t){this.mixIn(t)},toString:function(t){return(t||this.formatter).stringify(this)}}),b=(n.format={}).OpenSSL={stringify:function(t){var e=t.ciphertext,i=t.salt;return(i?s.create([1398893684,1701076831]).concat(i).concat(e):e).toString(f)},parse:function(t){var e,i=f.parse(t),r=i.words;return 1398893684==r[0]&&1701076831==r[1]&&(e=s.create(r.slice(2,4)),r.splice(0,4),i.sigBytes-=16),g.create({ciphertext:i,salt:e})}},y=o.SerializableCipher=h.extend({cfg:h.extend({format:b}),encrypt:function(t,e,i,r){r=this.cfg.extend(r);var n=t.createEncryptor(i,r),o=n.finalize(e),h=n.cfg;return g.create({ciphertext:o,key:i,iv:h.iv,algorithm:t,mode:h.mode,padding:h.padding,blockSize:t.blockSize,formatter:r.format})},decrypt:function(t,e,i,r){return r=this.cfg.extend(r),e=this._parse(e,r.format),t.createDecryptor(i,r).finalize(e.ciphertext)},_parse:function(t,e){return"string"==typeof t?e.parse(t,this):t}}),w=(n.kdf={}).OpenSSL={execute:function(t,e,i,r){r||(r=s.random(8));var n=l.create({keySize:e+i}).compute(t,r),o=s.create(n.words.slice(e),4*i);return n.sigBytes=4*e,g.create({key:n,iv:o,salt:r})}},M=o.PasswordBasedCipher=y.extend({cfg:y.cfg.extend({kdf:w}),encrypt:function(t,e,i,r){var n=(r=this.cfg.extend(r)).kdf.execute(i,t.keySize,t.ivSize);r.iv=n.iv;var o=y.encrypt.call(this,t,e,n.key,r);return o.mixIn(n),o},decrypt:function(t,e,i,r){r=this.cfg.extend(r),e=this._parse(e,r.format);var n=r.kdf.execute(i,t.keySize,t.ivSize,e.salt);return r.iv=n.iv,y.decrypt.call(this,t,e,n.key,r)}}))))},,,,,,function(t,e,i){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=i(209),n=i(210),o=i(123);function h(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(h()<e)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=a.prototype:(null===t&&(t=new a(e)),t.length=e),t}function a(t,e,i){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(t,e,i);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return u(this,t,e,i)}function u(t,e,i,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,i,r){if(e.byteLength,i<0||e.byteLength<i)throw new RangeError("'offset' is out of bounds");if(e.byteLength<i+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===i&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,i):new Uint8Array(e,i,r);a.TYPED_ARRAY_SUPPORT?(t=e).__proto__=a.prototype:t=d(t,e);return t}(t,e,i,r):"string"==typeof e?function(t,e,i){"string"==typeof i&&""!==i||(i="utf8");if(!a.isEncoding(i))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,i),n=(t=s(t,r)).write(e,i);n!==r&&(t=t.slice(0,n));return t}(t,e,i):function(t,e){if(a.isBuffer(e)){var i=0|c(e.length);return 0===(t=s(t,i)).length||e.copy(t,0,0,i),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?s(t,0):d(t,e);if("Buffer"===e.type&&o(e.data))return d(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(f(e),t=s(t,e<0?0:0|c(e)),!a.TYPED_ARRAY_SUPPORT)for(var i=0;i<e;++i)t[i]=0;return t}function d(t,e){var i=e.length<0?0:0|c(e.length);t=s(t,i);for(var r=0;r<i;r+=1)t[r]=255&e[r];return t}function c(t){if(t>=h())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+h().toString(16)+" bytes");return 0|t}function p(t,e){if(a.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var i=t.length;if(0===i)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return i;case"utf8":case"utf-8":case void 0:return z(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return U(t).length;default:if(r)return z(t).length;e=(""+e).toLowerCase(),r=!0}}function m(t,e,i){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===i||i>this.length)&&(i=this.length),i<=0)return"";if((i>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return R(this,e,i);case"utf8":case"utf-8":return E(this,e,i);case"ascii":return x(this,e,i);case"latin1":case"binary":return B(this,e,i);case"base64":return A(this,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,i);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function v(t,e,i){var r=t[e];t[e]=t[i],t[i]=r}function g(t,e,i,r,n){if(0===t.length)return-1;if("string"==typeof i?(r=i,i=0):i>2147483647?i=2147483647:i<-2147483648&&(i=-2147483648),i=+i,isNaN(i)&&(i=n?0:t.length-1),i<0&&(i=t.length+i),i>=t.length){if(n)return-1;i=t.length-1}else if(i<0){if(!n)return-1;i=0}if("string"==typeof e&&(e=a.from(e,r)),a.isBuffer(e))return 0===e.length?-1:b(t,e,i,r,n);if("number"==typeof e)return e&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(t,e,i):Uint8Array.prototype.lastIndexOf.call(t,e,i):b(t,[e],i,r,n);throw new TypeError("val must be string, number or Buffer")}function b(t,e,i,r,n){var o,h=1,s=t.length,a=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;h=2,s/=2,a/=2,i/=2}function u(t,e){return 1===h?t[e]:t.readUInt16BE(e*h)}if(n){var f=-1;for(o=i;o<s;o++)if(u(t,o)===u(e,-1===f?0:o-f)){if(-1===f&&(f=o),o-f+1===a)return f*h}else-1!==f&&(o-=o-f),f=-1}else for(i+a>s&&(i=s-a),o=i;o>=0;o--){for(var l=!0,d=0;d<a;d++)if(u(t,o+d)!==u(e,d)){l=!1;break}if(l)return o}return-1}function y(t,e,i,r){i=Number(i)||0;var n=t.length-i;r?(r=Number(r))>n&&(r=n):r=n;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var h=0;h<r;++h){var s=parseInt(e.substr(2*h,2),16);if(isNaN(s))return h;t[i+h]=s}return h}function w(t,e,i,r){return H(z(e,t.length-i),t,i,r)}function M(t,e,i,r){return H(function(t){for(var e=[],i=0;i<t.length;++i)e.push(255&t.charCodeAt(i));return e}(e),t,i,r)}function _(t,e,i,r){return M(t,e,i,r)}function S(t,e,i,r){return H(U(e),t,i,r)}function k(t,e,i,r){return H(function(t,e){for(var i,r,n,o=[],h=0;h<t.length&&!((e-=2)<0);++h)i=t.charCodeAt(h),r=i>>8,n=i%256,o.push(n),o.push(r);return o}(e,t.length-i),t,i,r)}function A(t,e,i){return 0===e&&i===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,i))}function E(t,e,i){i=Math.min(t.length,i);for(var r=[],n=e;n<i;){var o,h,s,a,u=t[n],f=null,l=u>239?4:u>223?3:u>191?2:1;if(n+l<=i)switch(l){case 1:u<128&&(f=u);break;case 2:128==(192&(o=t[n+1]))&&(a=(31&u)<<6|63&o)>127&&(f=a);break;case 3:o=t[n+1],h=t[n+2],128==(192&o)&&128==(192&h)&&(a=(15&u)<<12|(63&o)<<6|63&h)>2047&&(a<55296||a>57343)&&(f=a);break;case 4:o=t[n+1],h=t[n+2],s=t[n+3],128==(192&o)&&128==(192&h)&&128==(192&s)&&(a=(15&u)<<18|(63&o)<<12|(63&h)<<6|63&s)>65535&&a<1114112&&(f=a)}null===f?(f=65533,l=1):f>65535&&(f-=65536,r.push(f>>>10&1023|55296),f=56320|1023&f),r.push(f),n+=l}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var i="",r=0;for(;r<e;)i+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return i}(r)}e.Buffer=a,e.SlowBuffer=function(t){+t!=t&&(t=0);return a.alloc(+t)},e.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=h(),a.poolSize=8192,a._augment=function(t){return t.__proto__=a.prototype,t},a.from=function(t,e,i){return u(null,t,e,i)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(t,e,i){return function(t,e,i,r){return f(e),e<=0?s(t,e):void 0!==i?"string"==typeof r?s(t,e).fill(i,r):s(t,e).fill(i):s(t,e)}(null,t,e,i)},a.allocUnsafe=function(t){return l(null,t)},a.allocUnsafeSlow=function(t){return l(null,t)},a.isBuffer=function(t){return!(null==t||!t._isBuffer)},a.compare=function(t,e){if(!a.isBuffer(t)||!a.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var i=t.length,r=e.length,n=0,o=Math.min(i,r);n<o;++n)if(t[n]!==e[n]){i=t[n],r=e[n];break}return i<r?-1:r<i?1:0},a.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);var i;if(void 0===e)for(e=0,i=0;i<t.length;++i)e+=t[i].length;var r=a.allocUnsafe(e),n=0;for(i=0;i<t.length;++i){var h=t[i];if(!a.isBuffer(h))throw new TypeError('"list" argument must be an Array of Buffers');h.copy(r,n),n+=h.length}return r},a.byteLength=p,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)v(this,e,e+1);return this},a.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)v(this,e,e+3),v(this,e+1,e+2);return this},a.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)v(this,e,e+7),v(this,e+1,e+6),v(this,e+2,e+5),v(this,e+3,e+4);return this},a.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?E(this,0,t):m.apply(this,arguments)},a.prototype.equals=function(t){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){var t="",i=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,i).match(/.{2}/g).join(" "),this.length>i&&(t+=" ... ")),"<Buffer "+t+">"},a.prototype.compare=function(t,e,i,r,n){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===i&&(i=t?t.length:0),void 0===r&&(r=0),void 0===n&&(n=this.length),e<0||i>t.length||r<0||n>this.length)throw new RangeError("out of range index");if(r>=n&&e>=i)return 0;if(r>=n)return-1;if(e>=i)return 1;if(this===t)return 0;for(var o=(n>>>=0)-(r>>>=0),h=(i>>>=0)-(e>>>=0),s=Math.min(o,h),u=this.slice(r,n),f=t.slice(e,i),l=0;l<s;++l)if(u[l]!==f[l]){o=u[l],h=f[l];break}return o<h?-1:h<o?1:0},a.prototype.includes=function(t,e,i){return-1!==this.indexOf(t,e,i)},a.prototype.indexOf=function(t,e,i){return g(this,t,e,i,!0)},a.prototype.lastIndexOf=function(t,e,i){return g(this,t,e,i,!1)},a.prototype.write=function(t,e,i,r){if(void 0===e)r="utf8",i=this.length,e=0;else if(void 0===i&&"string"==typeof e)r=e,i=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(i)?(i|=0,void 0===r&&(r="utf8")):(r=i,i=void 0)}var n=this.length-e;if((void 0===i||i>n)&&(i=n),t.length>0&&(i<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return y(this,t,e,i);case"utf8":case"utf-8":return w(this,t,e,i);case"ascii":return M(this,t,e,i);case"latin1":case"binary":return _(this,t,e,i);case"base64":return S(this,t,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,e,i);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function x(t,e,i){var r="";i=Math.min(t.length,i);for(var n=e;n<i;++n)r+=String.fromCharCode(127&t[n]);return r}function B(t,e,i){var r="";i=Math.min(t.length,i);for(var n=e;n<i;++n)r+=String.fromCharCode(t[n]);return r}function R(t,e,i){var r=t.length;(!e||e<0)&&(e=0),(!i||i<0||i>r)&&(i=r);for(var n="",o=e;o<i;++o)n+=D(t[o]);return n}function I(t,e,i){for(var r=t.slice(e,i),n="",o=0;o<r.length;o+=2)n+=String.fromCharCode(r[o]+256*r[o+1]);return n}function T(t,e,i){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>i)throw new RangeError("Trying to access beyond buffer length")}function P(t,e,i,r,n,o){if(!a.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>n||e<o)throw new RangeError('"value" argument is out of bounds');if(i+r>t.length)throw new RangeError("Index out of range")}function C(t,e,i,r){e<0&&(e=65535+e+1);for(var n=0,o=Math.min(t.length-i,2);n<o;++n)t[i+n]=(e&255<<8*(r?n:1-n))>>>8*(r?n:1-n)}function L(t,e,i,r){e<0&&(e=4294967295+e+1);for(var n=0,o=Math.min(t.length-i,4);n<o;++n)t[i+n]=e>>>8*(r?n:3-n)&255}function q(t,e,i,r,n,o){if(i+r>t.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("Index out of range")}function j(t,e,i,r,o){return o||q(t,0,i,4),n.write(t,e,i,r,23,4),i+4}function O(t,e,i,r,o){return o||q(t,0,i,8),n.write(t,e,i,r,52,8),i+8}a.prototype.slice=function(t,e){var i,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),a.TYPED_ARRAY_SUPPORT)(i=this.subarray(t,e)).__proto__=a.prototype;else{var n=e-t;i=new a(n,void 0);for(var o=0;o<n;++o)i[o]=this[o+t]}return i},a.prototype.readUIntLE=function(t,e,i){t|=0,e|=0,i||T(t,e,this.length);for(var r=this[t],n=1,o=0;++o<e&&(n*=256);)r+=this[t+o]*n;return r},a.prototype.readUIntBE=function(t,e,i){t|=0,e|=0,i||T(t,e,this.length);for(var r=this[t+--e],n=1;e>0&&(n*=256);)r+=this[t+--e]*n;return r},a.prototype.readUInt8=function(t,e){return e||T(t,1,this.length),this[t]},a.prototype.readUInt16LE=function(t,e){return e||T(t,2,this.length),this[t]|this[t+1]<<8},a.prototype.readUInt16BE=function(t,e){return e||T(t,2,this.length),this[t]<<8|this[t+1]},a.prototype.readUInt32LE=function(t,e){return e||T(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},a.prototype.readUInt32BE=function(t,e){return e||T(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},a.prototype.readIntLE=function(t,e,i){t|=0,e|=0,i||T(t,e,this.length);for(var r=this[t],n=1,o=0;++o<e&&(n*=256);)r+=this[t+o]*n;return r>=(n*=128)&&(r-=Math.pow(2,8*e)),r},a.prototype.readIntBE=function(t,e,i){t|=0,e|=0,i||T(t,e,this.length);for(var r=e,n=1,o=this[t+--r];r>0&&(n*=256);)o+=this[t+--r]*n;return o>=(n*=128)&&(o-=Math.pow(2,8*e)),o},a.prototype.readInt8=function(t,e){return e||T(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},a.prototype.readInt16LE=function(t,e){e||T(t,2,this.length);var i=this[t]|this[t+1]<<8;return 32768&i?4294901760|i:i},a.prototype.readInt16BE=function(t,e){e||T(t,2,this.length);var i=this[t+1]|this[t]<<8;return 32768&i?4294901760|i:i},a.prototype.readInt32LE=function(t,e){return e||T(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},a.prototype.readInt32BE=function(t,e){return e||T(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},a.prototype.readFloatLE=function(t,e){return e||T(t,4,this.length),n.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return e||T(t,4,this.length),n.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return e||T(t,8,this.length),n.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return e||T(t,8,this.length),n.read(this,t,!1,52,8)},a.prototype.writeUIntLE=function(t,e,i,r){(t=+t,e|=0,i|=0,r)||P(this,t,e,i,Math.pow(2,8*i)-1,0);var n=1,o=0;for(this[e]=255&t;++o<i&&(n*=256);)this[e+o]=t/n&255;return e+i},a.prototype.writeUIntBE=function(t,e,i,r){(t=+t,e|=0,i|=0,r)||P(this,t,e,i,Math.pow(2,8*i)-1,0);var n=i-1,o=1;for(this[e+n]=255&t;--n>=0&&(o*=256);)this[e+n]=t/o&255;return e+i},a.prototype.writeUInt8=function(t,e,i){return t=+t,e|=0,i||P(this,t,e,1,255,0),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},a.prototype.writeUInt16LE=function(t,e,i){return t=+t,e|=0,i||P(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):C(this,t,e,!0),e+2},a.prototype.writeUInt16BE=function(t,e,i){return t=+t,e|=0,i||P(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):C(this,t,e,!1),e+2},a.prototype.writeUInt32LE=function(t,e,i){return t=+t,e|=0,i||P(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):L(this,t,e,!0),e+4},a.prototype.writeUInt32BE=function(t,e,i){return t=+t,e|=0,i||P(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},a.prototype.writeIntLE=function(t,e,i,r){if(t=+t,e|=0,!r){var n=Math.pow(2,8*i-1);P(this,t,e,i,n-1,-n)}var o=0,h=1,s=0;for(this[e]=255&t;++o<i&&(h*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/h>>0)-s&255;return e+i},a.prototype.writeIntBE=function(t,e,i,r){if(t=+t,e|=0,!r){var n=Math.pow(2,8*i-1);P(this,t,e,i,n-1,-n)}var o=i-1,h=1,s=0;for(this[e+o]=255&t;--o>=0&&(h*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/h>>0)-s&255;return e+i},a.prototype.writeInt8=function(t,e,i){return t=+t,e|=0,i||P(this,t,e,1,127,-128),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},a.prototype.writeInt16LE=function(t,e,i){return t=+t,e|=0,i||P(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):C(this,t,e,!0),e+2},a.prototype.writeInt16BE=function(t,e,i){return t=+t,e|=0,i||P(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):C(this,t,e,!1),e+2},a.prototype.writeInt32LE=function(t,e,i){return t=+t,e|=0,i||P(this,t,e,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):L(this,t,e,!0),e+4},a.prototype.writeInt32BE=function(t,e,i){return t=+t,e|=0,i||P(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},a.prototype.writeFloatLE=function(t,e,i){return j(this,t,e,!0,i)},a.prototype.writeFloatBE=function(t,e,i){return j(this,t,e,!1,i)},a.prototype.writeDoubleLE=function(t,e,i){return O(this,t,e,!0,i)},a.prototype.writeDoubleBE=function(t,e,i){return O(this,t,e,!1,i)},a.prototype.copy=function(t,e,i,r){if(i||(i=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<i&&(r=i),r===i)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-i&&(r=t.length-e+i);var n,o=r-i;if(this===t&&i<e&&e<r)for(n=o-1;n>=0;--n)t[n+e]=this[n+i];else if(o<1e3||!a.TYPED_ARRAY_SUPPORT)for(n=0;n<o;++n)t[n+e]=this[n+i];else Uint8Array.prototype.set.call(t,this.subarray(i,i+o),e);return o},a.prototype.fill=function(t,e,i,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,i=this.length):"string"==typeof i&&(r=i,i=this.length),1===t.length){var n=t.charCodeAt(0);n<256&&(t=n)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!a.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<i)throw new RangeError("Out of range index");if(i<=e)return this;var o;if(e>>>=0,i=void 0===i?this.length:i>>>0,t||(t=0),"number"==typeof t)for(o=e;o<i;++o)this[o]=t;else{var h=a.isBuffer(t)?t:z(new a(t,r).toString()),s=h.length;for(o=0;o<i-e;++o)this[o+e]=h[o%s]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function D(t){return t<16?"0"+t.toString(16):t.toString(16)}function z(t,e){var i;e=e||1/0;for(var r=t.length,n=null,o=[],h=0;h<r;++h){if((i=t.charCodeAt(h))>55295&&i<57344){if(!n){if(i>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(h+1===r){(e-=3)>-1&&o.push(239,191,189);continue}n=i;continue}if(i<56320){(e-=3)>-1&&o.push(239,191,189),n=i;continue}i=65536+(n-55296<<10|i-56320)}else n&&(e-=3)>-1&&o.push(239,191,189);if(n=null,i<128){if((e-=1)<0)break;o.push(i)}else if(i<2048){if((e-=2)<0)break;o.push(i>>6|192,63&i|128)}else if(i<65536){if((e-=3)<0)break;o.push(i>>12|224,i>>6&63|128,63&i|128)}else{if(!(i<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}}return o}function U(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function H(t,e,i,r){for(var n=0;n<r&&!(n+i>=e.length||n>=t.length);++n)e[n+i]=t[n];return n}}).call(this,i(21))},function(t,e){function i(t,e){if(!t)throw new Error(e||"Assertion failed")}t.exports=i,i.equal=function(t,e,i){if(t!=e)throw new Error(i||"Assertion failed: "+t+" != "+e)}},function(t,e,i){"use strict";var r=e,n=i(58),o=i(47),h=i(166);r.assert=o,r.toArray=h.toArray,r.zero2=h.zero2,r.toHex=h.toHex,r.encode=h.encode,r.getNAF=function(t,e,i){var r=new Array(Math.max(t.bitLength(),i)+1);r.fill(0);for(var n=1<<e+1,o=t.clone(),h=0;h<r.length;h++){var s,a=o.andln(n-1);o.isOdd()?(s=a>(n>>1)-1?(n>>1)-a:a,o.isubn(s)):s=0,r[h]=s,o.iushrn(1)}return r},r.getJSF=function(t,e){var i=[[],[]];t=t.clone(),e=e.clone();for(var r=0,n=0;t.cmpn(-r)>0||e.cmpn(-n)>0;){var o,h,s,a=t.andln(3)+r&3,u=e.andln(3)+n&3;if(3===a&&(a=-1),3===u&&(u=-1),0==(1&a))o=0;else o=3!==(s=t.andln(7)+r&7)&&5!==s||2!==u?a:-a;if(i[0].push(o),0==(1&u))h=0;else h=3!==(s=e.andln(7)+n&7)&&5!==s||2!==a?u:-u;i[1].push(h),2*r===o+1&&(r=1-r),2*n===h+1&&(n=1-n),t.iushrn(1),e.iushrn(1)}return i},r.cachedProperty=function(t,e,i){var r="_"+e;t.prototype[e]=function(){return void 0!==this[r]?this[r]:this[r]=i.call(this)}},r.parseBytes=function(t){return"string"==typeof t?r.toArray(t,"hex"):t},r.intFromLE=function(t){return new n(t,"hex","le")}},,function(t,e,i){"use strict";var r=i(47),n=i(32);function o(t,e){return 55296==(64512&t.charCodeAt(e))&&(!(e<0||e+1>=t.length)&&56320==(64512&t.charCodeAt(e+1)))}function h(t){return(t>>>24|t>>>8&65280|t<<8&16711680|(255&t)<<24)>>>0}function s(t){return 1===t.length?"0"+t:t}function a(t){return 7===t.length?"0"+t:6===t.length?"00"+t:5===t.length?"000"+t:4===t.length?"0000"+t:3===t.length?"00000"+t:2===t.length?"000000"+t:1===t.length?"0000000"+t:t}e.inherits=n,e.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var i=[];if("string"==typeof t)if(e){if("hex"===e)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),n=0;n<t.length;n+=2)i.push(parseInt(t[n]+t[n+1],16))}else for(var r=0,n=0;n<t.length;n++){var h=t.charCodeAt(n);h<128?i[r++]=h:h<2048?(i[r++]=h>>6|192,i[r++]=63&h|128):o(t,n)?(h=65536+((1023&h)<<10)+(1023&t.charCodeAt(++n)),i[r++]=h>>18|240,i[r++]=h>>12&63|128,i[r++]=h>>6&63|128,i[r++]=63&h|128):(i[r++]=h>>12|224,i[r++]=h>>6&63|128,i[r++]=63&h|128)}else for(n=0;n<t.length;n++)i[n]=0|t[n];return i},e.toHex=function(t){for(var e="",i=0;i<t.length;i++)e+=s(t[i].toString(16));return e},e.htonl=h,e.toHex32=function(t,e){for(var i="",r=0;r<t.length;r++){var n=t[r];"little"===e&&(n=h(n)),i+=a(n.toString(16))}return i},e.zero2=s,e.zero8=a,e.join32=function(t,e,i,n){var o=i-e;r(o%4==0);for(var h=new Array(o/4),s=0,a=e;s<h.length;s++,a+=4){var u;u="big"===n?t[a]<<24|t[a+1]<<16|t[a+2]<<8|t[a+3]:t[a+3]<<24|t[a+2]<<16|t[a+1]<<8|t[a],h[s]=u>>>0}return h},e.split32=function(t,e){for(var i=new Array(4*t.length),r=0,n=0;r<t.length;r++,n+=4){var o=t[r];"big"===e?(i[n]=o>>>24,i[n+1]=o>>>16&255,i[n+2]=o>>>8&255,i[n+3]=255&o):(i[n+3]=o>>>24,i[n+2]=o>>>16&255,i[n+1]=o>>>8&255,i[n]=255&o)}return i},e.rotr32=function(t,e){return t>>>e|t<<32-e},e.rotl32=function(t,e){return t<<e|t>>>32-e},e.sum32=function(t,e){return t+e>>>0},e.sum32_3=function(t,e,i){return t+e+i>>>0},e.sum32_4=function(t,e,i,r){return t+e+i+r>>>0},e.sum32_5=function(t,e,i,r,n){return t+e+i+r+n>>>0},e.sum64=function(t,e,i,r){var n=t[e],o=r+t[e+1]>>>0,h=(o<r?1:0)+i+n;t[e]=h>>>0,t[e+1]=o},e.sum64_hi=function(t,e,i,r){return(e+r>>>0<e?1:0)+t+i>>>0},e.sum64_lo=function(t,e,i,r){return e+r>>>0},e.sum64_4_hi=function(t,e,i,r,n,o,h,s){var a=0,u=e;return a+=(u=u+r>>>0)<e?1:0,a+=(u=u+o>>>0)<o?1:0,t+i+n+h+(a+=(u=u+s>>>0)<s?1:0)>>>0},e.sum64_4_lo=function(t,e,i,r,n,o,h,s){return e+r+o+s>>>0},e.sum64_5_hi=function(t,e,i,r,n,o,h,s,a,u){var f=0,l=e;return f+=(l=l+r>>>0)<e?1:0,f+=(l=l+o>>>0)<o?1:0,f+=(l=l+s>>>0)<s?1:0,t+i+n+h+a+(f+=(l=l+u>>>0)<u?1:0)>>>0},e.sum64_5_lo=function(t,e,i,r,n,o,h,s,a,u){return e+r+o+s+u>>>0},e.rotr64_hi=function(t,e,i){return(e<<32-i|t>>>i)>>>0},e.rotr64_lo=function(t,e,i){return(t<<32-i|e>>>i)>>>0},e.shr64_hi=function(t,e,i){return t>>>i},e.shr64_lo=function(t,e,i){return(t<<32-i|e>>>i)>>>0}},,,,,,,,function(t,e,i){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function n(t,e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}function o(t,e,i){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(i=e,e=10),this._init(t||0,e||10,i||"be"))}var h;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{h=i(165).Buffer}catch(t){}function s(t,e,i){for(var r=0,n=Math.min(t.length,i),o=e;o<n;o++){var h=t.charCodeAt(o)-48;r<<=4,r|=h>=49&&h<=54?h-49+10:h>=17&&h<=22?h-17+10:15&h}return r}function a(t,e,i,r){for(var n=0,o=Math.min(t.length,i),h=e;h<o;h++){var s=t.charCodeAt(h)-48;n*=r,n+=s>=49?s-49+10:s>=17?s-17+10:s}return n}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"==typeof t)return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&n++,16===e?this._parseHex(t,n):this._parseBase(t,e,n),"-"===t[0]&&(this.negative=1),this.strip(),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,h,s=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)h=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)h=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var r,n,o=0;for(i=t.length-6,r=0;i>=e;i-=6)n=s(t,i,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);i+6!==e&&(n=s(t,e,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,i){this.words=[0],this.length=1;for(var r=0,n=1;n<=67108863;n*=e)r++;r--,n=n/e|0;for(var o=t.length-i,h=o%r,s=Math.min(o,o-h)+i,u=0,f=i;f<s;f+=r)u=a(t,f,f+r,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==h){var l=1;for(u=a(t,f,t.length,e),f=0;f<h;f++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,i){i.negative=e.negative^t.negative;var r=t.length+e.length|0;i.length=r,r=r-1|0;var n=0|t.words[0],o=0|e.words[0],h=n*o,s=67108863&h,a=h/67108864|0;i.words[0]=s;for(var u=1;u<r;u++){for(var f=a>>>26,l=67108863&a,d=Math.min(u,e.length-1),c=Math.max(0,u-t.length+1);c<=d;c++){var p=u-c|0;f+=(h=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&h}i.words[u]=0|l,a=0|f}return 0!==a?i.words[u]=0|a:i.length--,i.strip()}o.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,h=0;h<this.length;h++){var s=this.words[h],a=(16777215&(s<<n|o)).toString(16);i=0!==(o=s>>>24-n&16777215)||h!==this.length-1?u[6-a.length]+a+i:a+i,(n+=2)>=26&&(n-=26,h--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var d=f[t],c=l[t];i="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(c).toString(t);i=(p=p.idivn(c)).isZero()?m+i:u[d-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return r(void 0!==h),this.toArrayLike(h,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,i){var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var h,s,a="le"===e,u=new t(o),f=this.clone();if(a){for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[s]=h;for(;s<o;s++)u[s]=0}else{for(s=0;s<o-n;s++)u[s]=0;for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[o-s-1]=h}return u},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,i=0;return e>=4096&&(i+=13,e>>>=13),e>=64&&(i+=7,e>>>=7),e>=8&&(i+=4,e>>>=4),e>=2&&(i+=2,e>>>=2),i+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,i=0;return 0==(8191&e)&&(i+=13,e>>>=13),0==(127&e)&&(i+=7,e>>>=7),0==(15&e)&&(i+=4,e>>>=4),0==(3&e)&&(i+=2,e>>>=2),0==(1&e)&&i++,i},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var i=this._zeroBits(this.words[e]);if(t+=i,26!==i)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var i=0;i<e.length;i++)this.words[i]=this.words[i]&t.words[i];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,i;this.length>t.length?(e=this,i=t):(e=t,i=this);for(var r=0;r<i.length;r++)this.words[r]=e.words[r]^i.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},o.prototype.iadd=function(t){var e,i,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(i=this,r=t):(i=t,r=this);for(var n=0,o=0;o<r.length;o++)e=(0|i.words[o])+(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<i.length;o++)e=(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=i.length,0!==n)this.words[this.length]=n,this.length++;else if(i!==this)for(;o<i.length;o++)this.words[o]=i.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var i,r,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(i=this,r=t):(i=t,r=this);for(var o=0,h=0;h<r.length;h++)o=(e=(0|i.words[h])-(0|r.words[h])+o)>>26,this.words[h]=67108863&e;for(;0!==o&&h<i.length;h++)o=(e=(0|i.words[h])+o)>>26,this.words[h]=67108863&e;if(0===o&&h<i.length&&i!==this)for(;h<i.length;h++)this.words[h]=i.words[h];return this.length=Math.max(this.length,h),i!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var c=function(t,e,i){var r,n,o,h=t.words,s=e.words,a=i.words,u=0,f=0|h[0],l=8191&f,d=f>>>13,c=0|h[1],p=8191&c,m=c>>>13,v=0|h[2],g=8191&v,b=v>>>13,y=0|h[3],w=8191&y,M=y>>>13,_=0|h[4],S=8191&_,k=_>>>13,A=0|h[5],E=8191&A,x=A>>>13,B=0|h[6],R=8191&B,I=B>>>13,T=0|h[7],P=8191&T,C=T>>>13,L=0|h[8],q=8191&L,j=L>>>13,O=0|h[9],N=8191&O,D=O>>>13,z=0|s[0],U=8191&z,H=z>>>13,Z=0|s[1],F=8191&Z,K=Z>>>13,W=0|s[2],Y=8191&W,V=W>>>13,X=0|s[3],G=8191&X,J=X>>>13,$=0|s[4],Q=8191&$,tt=$>>>13,et=0|s[5],it=8191&et,rt=et>>>13,nt=0|s[6],ot=8191&nt,ht=nt>>>13,st=0|s[7],at=8191&st,ut=st>>>13,ft=0|s[8],lt=8191&ft,dt=ft>>>13,ct=0|s[9],pt=8191&ct,mt=ct>>>13;i.negative=t.negative^e.negative,i.length=19;var vt=(u+(r=Math.imul(l,U))|0)+((8191&(n=(n=Math.imul(l,H))+Math.imul(d,U)|0))<<13)|0;u=((o=Math.imul(d,H))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(p,U),n=(n=Math.imul(p,H))+Math.imul(m,U)|0,o=Math.imul(m,H);var gt=(u+(r=r+Math.imul(l,F)|0)|0)+((8191&(n=(n=n+Math.imul(l,K)|0)+Math.imul(d,F)|0))<<13)|0;u=((o=o+Math.imul(d,K)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(g,U),n=(n=Math.imul(g,H))+Math.imul(b,U)|0,o=Math.imul(b,H),r=r+Math.imul(p,F)|0,n=(n=n+Math.imul(p,K)|0)+Math.imul(m,F)|0,o=o+Math.imul(m,K)|0;var bt=(u+(r=r+Math.imul(l,Y)|0)|0)+((8191&(n=(n=n+Math.imul(l,V)|0)+Math.imul(d,Y)|0))<<13)|0;u=((o=o+Math.imul(d,V)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(w,U),n=(n=Math.imul(w,H))+Math.imul(M,U)|0,o=Math.imul(M,H),r=r+Math.imul(g,F)|0,n=(n=n+Math.imul(g,K)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,K)|0,r=r+Math.imul(p,Y)|0,n=(n=n+Math.imul(p,V)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,V)|0;var yt=(u+(r=r+Math.imul(l,G)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,G)|0))<<13)|0;u=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(S,U),n=(n=Math.imul(S,H))+Math.imul(k,U)|0,o=Math.imul(k,H),r=r+Math.imul(w,F)|0,n=(n=n+Math.imul(w,K)|0)+Math.imul(M,F)|0,o=o+Math.imul(M,K)|0,r=r+Math.imul(g,Y)|0,n=(n=n+Math.imul(g,V)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,V)|0,r=r+Math.imul(p,G)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,J)|0;var wt=(u+(r=r+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;u=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(E,U),n=(n=Math.imul(E,H))+Math.imul(x,U)|0,o=Math.imul(x,H),r=r+Math.imul(S,F)|0,n=(n=n+Math.imul(S,K)|0)+Math.imul(k,F)|0,o=o+Math.imul(k,K)|0,r=r+Math.imul(w,Y)|0,n=(n=n+Math.imul(w,V)|0)+Math.imul(M,Y)|0,o=o+Math.imul(M,V)|0,r=r+Math.imul(g,G)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,J)|0,r=r+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Mt=(u+(r=r+Math.imul(l,it)|0)|0)+((8191&(n=(n=n+Math.imul(l,rt)|0)+Math.imul(d,it)|0))<<13)|0;u=((o=o+Math.imul(d,rt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(R,U),n=(n=Math.imul(R,H))+Math.imul(I,U)|0,o=Math.imul(I,H),r=r+Math.imul(E,F)|0,n=(n=n+Math.imul(E,K)|0)+Math.imul(x,F)|0,o=o+Math.imul(x,K)|0,r=r+Math.imul(S,Y)|0,n=(n=n+Math.imul(S,V)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,V)|0,r=r+Math.imul(w,G)|0,n=(n=n+Math.imul(w,J)|0)+Math.imul(M,G)|0,o=o+Math.imul(M,J)|0,r=r+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,r=r+Math.imul(p,it)|0,n=(n=n+Math.imul(p,rt)|0)+Math.imul(m,it)|0,o=o+Math.imul(m,rt)|0;var _t=(u+(r=r+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,ht)|0)+Math.imul(d,ot)|0))<<13)|0;u=((o=o+Math.imul(d,ht)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(P,U),n=(n=Math.imul(P,H))+Math.imul(C,U)|0,o=Math.imul(C,H),r=r+Math.imul(R,F)|0,n=(n=n+Math.imul(R,K)|0)+Math.imul(I,F)|0,o=o+Math.imul(I,K)|0,r=r+Math.imul(E,Y)|0,n=(n=n+Math.imul(E,V)|0)+Math.imul(x,Y)|0,o=o+Math.imul(x,V)|0,r=r+Math.imul(S,G)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,J)|0,r=r+Math.imul(w,Q)|0,n=(n=n+Math.imul(w,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,r=r+Math.imul(g,it)|0,n=(n=n+Math.imul(g,rt)|0)+Math.imul(b,it)|0,o=o+Math.imul(b,rt)|0,r=r+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,ht)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,ht)|0;var St=(u+(r=r+Math.imul(l,at)|0)|0)+((8191&(n=(n=n+Math.imul(l,ut)|0)+Math.imul(d,at)|0))<<13)|0;u=((o=o+Math.imul(d,ut)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(q,U),n=(n=Math.imul(q,H))+Math.imul(j,U)|0,o=Math.imul(j,H),r=r+Math.imul(P,F)|0,n=(n=n+Math.imul(P,K)|0)+Math.imul(C,F)|0,o=o+Math.imul(C,K)|0,r=r+Math.imul(R,Y)|0,n=(n=n+Math.imul(R,V)|0)+Math.imul(I,Y)|0,o=o+Math.imul(I,V)|0,r=r+Math.imul(E,G)|0,n=(n=n+Math.imul(E,J)|0)+Math.imul(x,G)|0,o=o+Math.imul(x,J)|0,r=r+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,r=r+Math.imul(w,it)|0,n=(n=n+Math.imul(w,rt)|0)+Math.imul(M,it)|0,o=o+Math.imul(M,rt)|0,r=r+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,ht)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,ht)|0,r=r+Math.imul(p,at)|0,n=(n=n+Math.imul(p,ut)|0)+Math.imul(m,at)|0,o=o+Math.imul(m,ut)|0;var kt=(u+(r=r+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;u=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(N,U),n=(n=Math.imul(N,H))+Math.imul(D,U)|0,o=Math.imul(D,H),r=r+Math.imul(q,F)|0,n=(n=n+Math.imul(q,K)|0)+Math.imul(j,F)|0,o=o+Math.imul(j,K)|0,r=r+Math.imul(P,Y)|0,n=(n=n+Math.imul(P,V)|0)+Math.imul(C,Y)|0,o=o+Math.imul(C,V)|0,r=r+Math.imul(R,G)|0,n=(n=n+Math.imul(R,J)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,J)|0,r=r+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,r=r+Math.imul(S,it)|0,n=(n=n+Math.imul(S,rt)|0)+Math.imul(k,it)|0,o=o+Math.imul(k,rt)|0,r=r+Math.imul(w,ot)|0,n=(n=n+Math.imul(w,ht)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ht)|0,r=r+Math.imul(g,at)|0,n=(n=n+Math.imul(g,ut)|0)+Math.imul(b,at)|0,o=o+Math.imul(b,ut)|0,r=r+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(u+(r=r+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;u=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(N,F),n=(n=Math.imul(N,K))+Math.imul(D,F)|0,o=Math.imul(D,K),r=r+Math.imul(q,Y)|0,n=(n=n+Math.imul(q,V)|0)+Math.imul(j,Y)|0,o=o+Math.imul(j,V)|0,r=r+Math.imul(P,G)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(C,G)|0,o=o+Math.imul(C,J)|0,r=r+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,r=r+Math.imul(E,it)|0,n=(n=n+Math.imul(E,rt)|0)+Math.imul(x,it)|0,o=o+Math.imul(x,rt)|0,r=r+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,ht)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ht)|0,r=r+Math.imul(w,at)|0,n=(n=n+Math.imul(w,ut)|0)+Math.imul(M,at)|0,o=o+Math.imul(M,ut)|0,r=r+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(u+(r=r+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;u=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(N,Y),n=(n=Math.imul(N,V))+Math.imul(D,Y)|0,o=Math.imul(D,V),r=r+Math.imul(q,G)|0,n=(n=n+Math.imul(q,J)|0)+Math.imul(j,G)|0,o=o+Math.imul(j,J)|0,r=r+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(C,Q)|0,o=o+Math.imul(C,tt)|0,r=r+Math.imul(R,it)|0,n=(n=n+Math.imul(R,rt)|0)+Math.imul(I,it)|0,o=o+Math.imul(I,rt)|0,r=r+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,ht)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,ht)|0,r=r+Math.imul(S,at)|0,n=(n=n+Math.imul(S,ut)|0)+Math.imul(k,at)|0,o=o+Math.imul(k,ut)|0,r=r+Math.imul(w,lt)|0,n=(n=n+Math.imul(w,dt)|0)+Math.imul(M,lt)|0,o=o+Math.imul(M,dt)|0;var xt=(u+(r=r+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(b,pt)|0))<<13)|0;u=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(N,G),n=(n=Math.imul(N,J))+Math.imul(D,G)|0,o=Math.imul(D,J),r=r+Math.imul(q,Q)|0,n=(n=n+Math.imul(q,tt)|0)+Math.imul(j,Q)|0,o=o+Math.imul(j,tt)|0,r=r+Math.imul(P,it)|0,n=(n=n+Math.imul(P,rt)|0)+Math.imul(C,it)|0,o=o+Math.imul(C,rt)|0,r=r+Math.imul(R,ot)|0,n=(n=n+Math.imul(R,ht)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,ht)|0,r=r+Math.imul(E,at)|0,n=(n=n+Math.imul(E,ut)|0)+Math.imul(x,at)|0,o=o+Math.imul(x,ut)|0,r=r+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,dt)|0;var Bt=(u+(r=r+Math.imul(w,pt)|0)|0)+((8191&(n=(n=n+Math.imul(w,mt)|0)+Math.imul(M,pt)|0))<<13)|0;u=((o=o+Math.imul(M,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(N,Q),n=(n=Math.imul(N,tt))+Math.imul(D,Q)|0,o=Math.imul(D,tt),r=r+Math.imul(q,it)|0,n=(n=n+Math.imul(q,rt)|0)+Math.imul(j,it)|0,o=o+Math.imul(j,rt)|0,r=r+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,ht)|0)+Math.imul(C,ot)|0,o=o+Math.imul(C,ht)|0,r=r+Math.imul(R,at)|0,n=(n=n+Math.imul(R,ut)|0)+Math.imul(I,at)|0,o=o+Math.imul(I,ut)|0,r=r+Math.imul(E,lt)|0,n=(n=n+Math.imul(E,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(u+(r=r+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(k,pt)|0))<<13)|0;u=((o=o+Math.imul(k,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,r=Math.imul(N,it),n=(n=Math.imul(N,rt))+Math.imul(D,it)|0,o=Math.imul(D,rt),r=r+Math.imul(q,ot)|0,n=(n=n+Math.imul(q,ht)|0)+Math.imul(j,ot)|0,o=o+Math.imul(j,ht)|0,r=r+Math.imul(P,at)|0,n=(n=n+Math.imul(P,ut)|0)+Math.imul(C,at)|0,o=o+Math.imul(C,ut)|0,r=r+Math.imul(R,lt)|0,n=(n=n+Math.imul(R,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(u+(r=r+Math.imul(E,pt)|0)|0)+((8191&(n=(n=n+Math.imul(E,mt)|0)+Math.imul(x,pt)|0))<<13)|0;u=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(N,ot),n=(n=Math.imul(N,ht))+Math.imul(D,ot)|0,o=Math.imul(D,ht),r=r+Math.imul(q,at)|0,n=(n=n+Math.imul(q,ut)|0)+Math.imul(j,at)|0,o=o+Math.imul(j,ut)|0,r=r+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(C,lt)|0,o=o+Math.imul(C,dt)|0;var Tt=(u+(r=r+Math.imul(R,pt)|0)|0)+((8191&(n=(n=n+Math.imul(R,mt)|0)+Math.imul(I,pt)|0))<<13)|0;u=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(N,at),n=(n=Math.imul(N,ut))+Math.imul(D,at)|0,o=Math.imul(D,ut),r=r+Math.imul(q,lt)|0,n=(n=n+Math.imul(q,dt)|0)+Math.imul(j,lt)|0,o=o+Math.imul(j,dt)|0;var Pt=(u+(r=r+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(C,pt)|0))<<13)|0;u=((o=o+Math.imul(C,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,r=Math.imul(N,lt),n=(n=Math.imul(N,dt))+Math.imul(D,lt)|0,o=Math.imul(D,dt);var Ct=(u+(r=r+Math.imul(q,pt)|0)|0)+((8191&(n=(n=n+Math.imul(q,mt)|0)+Math.imul(j,pt)|0))<<13)|0;u=((o=o+Math.imul(j,mt)|0)+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863;var Lt=(u+(r=Math.imul(N,pt))|0)+((8191&(n=(n=Math.imul(N,mt))+Math.imul(D,pt)|0))<<13)|0;return u=((o=Math.imul(D,mt))+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,a[0]=vt,a[1]=gt,a[2]=bt,a[3]=yt,a[4]=wt,a[5]=Mt,a[6]=_t,a[7]=St,a[8]=kt,a[9]=At,a[10]=Et,a[11]=xt,a[12]=Bt,a[13]=Rt,a[14]=It,a[15]=Tt,a[16]=Pt,a[17]=Ct,a[18]=Lt,0!==u&&(a[19]=u,i.length++),i};function p(t,e,i){return(new m).mulp(t,e,i)}function m(t,e){this.x=t,this.y=e}Math.imul||(c=d),o.prototype.mulTo=function(t,e){var i=this.length+t.length;return 10===this.length&&10===t.length?c(this,t,e):i<63?d(this,t,e):i<1024?function(t,e,i){i.negative=e.negative^t.negative,i.length=t.length+e.length;for(var r=0,n=0,o=0;o<i.length-1;o++){var h=n;n=0;for(var s=67108863&r,a=Math.min(o,e.length-1),u=Math.max(0,o-t.length+1);u<=a;u++){var f=o-u,l=(0|t.words[f])*(0|e.words[u]),d=67108863&l;s=67108863&(d=d+s|0),n+=(h=(h=h+(l/67108864|0)|0)+(d>>>26)|0)>>>26,h&=67108863}i.words[o]=s,r=h,h=n}return 0!==r?i.words[o]=r:i.length--,i.strip()}(this,t,e):p(this,t,e)},m.prototype.makeRBT=function(t){for(var e=new Array(t),i=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,i,t);return e},m.prototype.revBin=function(t,e,i){if(0===t||t===i-1)return t;for(var r=0,n=0;n<e;n++)r|=(1&t)<<e-n-1,t>>=1;return r},m.prototype.permute=function(t,e,i,r,n,o){for(var h=0;h<o;h++)r[h]=e[t[h]],n[h]=i[t[h]]},m.prototype.transform=function(t,e,i,r,n,o){this.permute(o,t,e,i,r,n);for(var h=1;h<n;h<<=1)for(var s=h<<1,a=Math.cos(2*Math.PI/s),u=Math.sin(2*Math.PI/s),f=0;f<n;f+=s)for(var l=a,d=u,c=0;c<h;c++){var p=i[f+c],m=r[f+c],v=i[f+c+h],g=r[f+c+h],b=l*v-d*g;g=l*g+d*v,v=b,i[f+c]=p+v,r[f+c]=m+g,i[f+c+h]=p-v,r[f+c+h]=m-g,c!==s&&(b=a*l-u*d,d=a*d+u*l,l=b)}},m.prototype.guessLen13b=function(t,e){var i=1|Math.max(e,t),r=1&i,n=0;for(i=i/2|0;i;i>>>=1)n++;return 1<<n+1+r},m.prototype.conjugate=function(t,e,i){if(!(i<=1))for(var r=0;r<i/2;r++){var n=t[r];t[r]=t[i-r-1],t[i-r-1]=n,n=e[r],e[r]=-e[i-r-1],e[i-r-1]=-n}},m.prototype.normalize13b=function(t,e){for(var i=0,r=0;r<e/2;r++){var n=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+i;t[r]=67108863&n,i=n<67108864?0:n/67108864|0}return t},m.prototype.convert13b=function(t,e,i,n){for(var o=0,h=0;h<e;h++)o+=0|t[h],i[2*h]=8191&o,o>>>=13,i[2*h+1]=8191&o,o>>>=13;for(h=2*e;h<n;++h)i[h]=0;r(0===o),r(0==(-8192&o))},m.prototype.stub=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=0;return e},m.prototype.mulp=function(t,e,i){var r=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(r),o=this.stub(r),h=new Array(r),s=new Array(r),a=new Array(r),u=new Array(r),f=new Array(r),l=new Array(r),d=i.words;d.length=r,this.convert13b(t.words,t.length,h,r),this.convert13b(e.words,e.length,u,r),this.transform(h,o,s,a,r,n),this.transform(u,o,f,l,r,n);for(var c=0;c<r;c++){var p=s[c]*f[c]-a[c]*l[c];a[c]=s[c]*l[c]+a[c]*f[c],s[c]=p}return this.conjugate(s,a,r),this.transform(s,a,d,o,r,n),this.conjugate(d,o,r),this.normalize13b(d,r),i.negative=t.negative^e.negative,i.length=t.length+e.length,i.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),p(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,o=(67108863&n)+(67108863&e);e>>=26,e+=n/67108864|0,e+=o>>>26,this.words[i]=67108863&o}return 0!==e&&(this.words[i]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),i=0;i<e.length;i++){var r=i/26|0,n=i%26;e[i]=(t.words[r]&1<<n)>>>n}return e}(t);if(0===e.length)return new o(1);for(var i=this,r=0;r<e.length&&0===e[r];r++,i=i.sqr());if(++r<e.length)for(var n=i.sqr();r<e.length;r++,n=n.sqr())0!==e[r]&&(i=i.mul(n));return i},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var h=0;for(e=0;e<this.length;e++){var s=this.words[e]&o,a=(0|this.words[e])-s<<i;this.words[e]=a|h,h=s>>>26-i}h&&(this.words[e]=h,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this.strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,h=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,a=i;if(n-=h,n=Math.max(0,n),a){for(var u=0;u<h;u++)a.words[u]=this.words[u];a.length=h}if(0===h);else if(this.length>h)for(this.length-=h,u=0;u<this.length;u++)this.words[u]=this.words[u+h];else this.words[0]=0,this.length=1;var f=0;for(u=this.length-1;u>=0&&(0!==f||u>=n);u--){var l=0|this.words[u];this.words[u]=f<<26-o|l>>>o,f=l&s}return a&&0!==f&&(a.words[a.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i)&&!!(this.words[i]&n)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,i){var n,o,h=t.length+i;this._expand(h);var s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+s;var a=(0|t.words[n])*e;s=((o-=67108863&a)>>26)-(a/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)s=(o=(0|this.words[n+i])+s)>>26,this.words[n+i]=67108863&o;if(0===s)return this.strip();for(r(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var i=(this.length,t.length),r=this.clone(),n=t,h=0|n.words[n.length-1];0!==(i=26-this._countBits(h))&&(n=n.ushln(i),r.iushln(i),h=0|n.words[n.length-1]);var s,a=r.length-n.length;if("mod"!==e){(s=new o(null)).length=a+1,s.words=new Array(s.length);for(var u=0;u<s.length;u++)s.words[u]=0}var f=r.clone()._ishlnsubmul(n,1,a);0===f.negative&&(r=f,s&&(s.words[a]=1));for(var l=a-1;l>=0;l--){var d=67108864*(0|r.words[n.length+l])+(0|r.words[n.length+l-1]);for(d=Math.min(d/h|0,67108863),r._ishlnsubmul(n,d,l);0!==r.negative;)d--,r.negative=0,r._ishlnsubmul(n,1,l),r.isZero()||(r.negative^=1);s&&(s.words[l]=d)}return s&&s.strip(),r.strip(),"div"!==e&&0!==i&&r.iushrn(i),{div:s||null,mod:r}},o.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(n=s.div.neg()),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.iadd(t)),{div:n,mod:h}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.isub(t)),{div:s.div,mod:h}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var n,h,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var i=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),n=t.andln(1),o=i.cmp(r);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(e*i+(0|this.words[n]))%t;return i},o.prototype.idivn=function(t){r(t<=67108863);for(var e=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*e;this.words[i]=n/t|0,e=n%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n=new o(1),h=new o(0),s=new o(0),a=new o(1),u=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++u;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(n.isOdd()||h.isOdd())&&(n.iadd(f),h.isub(l)),n.iushrn(1),h.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(f),a.isub(l)),s.iushrn(1),a.iushrn(1);e.cmp(i)>=0?(e.isub(i),n.isub(s),h.isub(a)):(i.isub(e),s.isub(n),a.isub(h))}return{a:s,b:a,gcd:i.iushln(u)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n,h=new o(1),s=new o(0),a=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var u=0,f=1;0==(e.words[0]&f)&&u<26;++u,f<<=1);if(u>0)for(e.iushrn(u);u-- >0;)h.isOdd()&&h.iadd(a),h.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(i)>=0?(e.isub(i),h.isub(s)):(i.isub(e),s.isub(h))}return(n=0===e.cmpn(1)?h:s).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),i=t.clone();e.negative=0,i.negative=0;for(var r=0;e.isEven()&&i.isEven();r++)e.iushrn(1),i.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;i.isEven();)i.iushrn(1);var n=e.cmp(i);if(n<0){var o=e;e=i,i=o}else if(0===n||0===i.cmpn(1))break;e.isub(i)}return i.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,h=i;0!==o&&h<this.length;h++){var s=0|this.words[h];o=(s+=o)>>>26,s&=67108863,this.words[h]=s}return 0!==o&&(this.words[h]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,i=this.length-1;i>=0;i--){var r=0|this.words[i],n=0|t.words[i];if(r!==n){r<n?e=-1:r>n&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new _(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function g(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){g.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function y(){g.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){g.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){g.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function S(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},g.prototype.ireduce=function(t){var e,i=t;do{this.split(i,this.tmp),e=(i=(i=this.imulK(i)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:i.ucmp(this.p);return 0===r?(i.words[0]=0,i.length=1):r>0?i.isub(this.p):void 0!==i.strip?i.strip():i._strip(),i},g.prototype.split=function(t,e){t.iushrn(this.n,0,e)},g.prototype.imulK=function(t){return t.imul(this.k)},n(b,g),b.prototype.split=function(t,e){for(var i=Math.min(t.length,9),r=0;r<i;r++)e.words[r]=t.words[r];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var n=t.words[9];for(e.words[e.length++]=4194303&n,r=10;r<t.length;r++){var o=0|t.words[r];t.words[r-10]=(4194303&o)<<4|n>>>22,n=o}n>>>=22,t.words[r-10]=n,0===n&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,i=0;i<t.length;i++){var r=0|t.words[i];e+=977*r,t.words[i]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(y,g),n(w,g),n(M,g),M.prototype.imulK=function(t){for(var e=0,i=0;i<t.length;i++){var r=19*(0|t.words[i])+e,n=67108863&r;r>>>=26,t.words[i]=n,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new b;else if("p224"===t)e=new y;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new M}return v[t]=e,e},_.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,e){this._verify2(t,e);var i=t.add(e);return i.cmp(this.m)>=0&&i.isub(this.m),i._forceRed(this)},_.prototype.iadd=function(t,e){this._verify2(t,e);var i=t.iadd(e);return i.cmp(this.m)>=0&&i.isub(this.m),i},_.prototype.sub=function(t,e){this._verify2(t,e);var i=t.sub(e);return i.cmpn(0)<0&&i.iadd(this.m),i._forceRed(this)},_.prototype.isub=function(t,e){this._verify2(t,e);var i=t.isub(e);return i.cmpn(0)<0&&i.iadd(this.m),i},_.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},_.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},_.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new o(1)).iushrn(2);return this.pow(t,i)}for(var n=this.m.subn(1),h=0;!n.isZero()&&0===n.andln(1);)h++,n.iushrn(1);r(!n.isZero());var s=new o(1).toRed(this),a=s.redNeg(),u=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,u).cmp(a);)f.redIAdd(a);for(var l=this.pow(f,n),d=this.pow(t,n.addn(1).iushrn(1)),c=this.pow(t,n),p=h;0!==c.cmp(s);){for(var m=c,v=0;0!==m.cmp(s);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new o(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},_.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},_.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var i=new Array(16);i[0]=new o(1).toRed(this),i[1]=t;for(var r=2;r<i.length;r++)i[r]=this.mul(i[r-1],t);var n=i[0],h=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var u=e.words[r],f=a-1;f>=0;f--){var l=u>>f&1;n!==i[0]&&(n=this.sqr(n)),0!==l||0!==h?(h<<=1,h|=l,(4===++s||0===r&&0===f)&&(n=this.mul(n,i[h]),s=0,h=0)):s=0}a=26}return n},_.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},_.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new S(t)},n(S,_),S.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},S.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},S.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var i=t.imul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},S.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var i=t.mul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),h=n;return n.cmp(this.m)>=0?h=n.isub(this.m):n.cmpn(0)<0&&(h=n.iadd(this.m)),h._forceRed(this)},S.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,i(52)(t))},,,function(t,e,i){var r=i(34).Buffer,n=i(220).Transform,o=i(76).StringDecoder;function h(t){n.call(this),this.hashMode="string"==typeof t,this.hashMode?this[t]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}i(32)(h,n),h.prototype.update=function(t,e,i){"string"==typeof t&&(t=r.from(t,e));var n=this._update(t);return this.hashMode?this:(i&&(n=this._toString(n,i)),n)},h.prototype.setAutoPadding=function(){},h.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},h.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},h.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},h.prototype._transform=function(t,e,i){var r;try{this.hashMode?this._update(t):this.push(this._update(t))}catch(t){r=t}finally{i(r)}},h.prototype._flush=function(t){var e;try{this.push(this.__final())}catch(t){e=t}t(e)},h.prototype._finalOrDigest=function(t){var e=this.__final()||r.alloc(0);return t&&(e=this._toString(e,t,!0)),e},h.prototype._toString=function(t,e,i){if(this._decoder||(this._decoder=new o(e),this._encoding=e),this._encoding!==e)throw new Error("can't switch encodings");var r=this._decoder.write(t);return i&&(r+=this._decoder.end()),r},t.exports=h},,function(t,e,i){"use strict";var r=i(82),n=Object.keys||function(t){var e=[];for(var i in t)e.push(i);return e};t.exports=l;var o=Object.create(i(77));o.inherits=i(32);var h=i(137),s=i(100);o.inherits(l,h);for(var a=n(s.prototype),u=0;u<a.length;u++){var f=a[u];l.prototype[f]||(l.prototype[f]=s.prototype[f])}function l(t){if(!(this instanceof l))return new l(t);h.call(this,t),s.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||r.nextTick(c,this)}function c(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),l.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e,i){var r,n,o,h,s,a,u,f;t.exports=(f=i(36),i(114),i(115),n=(r=f).lib,o=n.Base,h=n.WordArray,s=r.algo,a=s.MD5,u=s.EvpKDF=o.extend({cfg:o.extend({keySize:4,hasher:a,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var i,r=this.cfg,n=r.hasher.create(),o=h.create(),s=o.words,a=r.keySize,u=r.iterations;s.length<a;){i&&n.update(i),i=n.update(t).finalize(e),n.reset();for(var f=1;f<u;f++)i=n.finalize(i),n.reset();o.concat(i)}return o.sigBytes=4*a,o}}),r.EvpKDF=function(t,e,i){return u.create(i).compute(t,e)},f.EvpKDF)},,,function(t,e,i){"use strict";(function(e,r){var n=i(34).Buffer,o=e.crypto||e.msCrypto;o&&o.getRandomValues?t.exports=function(t,e){if(t>4294967295)throw new RangeError("requested too many random bytes");var i=n.allocUnsafe(t);if(t>0)if(t>65536)for(var h=0;h<t;h+=65536)o.getRandomValues(i.slice(h,h+65536));else o.getRandomValues(i);if("function"==typeof e)return r.nextTick((function(){e(null,i)}));return i}:t.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,i(21),i(42))},function(t,e,i){"use strict";var r={};function n(t,e,i){i||(i=Error);var n=function(t){var i,r;function n(i,r,n){return t.call(this,function(t,i,r){return"string"==typeof e?e:e(t,i,r)}(i,r,n))||this}return r=t,(i=n).prototype=Object.create(r.prototype),i.prototype.constructor=i,i.__proto__=r,n}(i);n.prototype.name=i.name,n.prototype.code=t,r[t]=n}function o(t,e){if(Array.isArray(t)){var i=t.length;return t=t.map((function(t){return String(t)})),i>2?"one of ".concat(e," ").concat(t.slice(0,i-1).join(", "),", or ")+t[i-1]:2===i?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}n("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),n("ERR_INVALID_ARG_TYPE",(function(t,e,i){var r,n,h,s;if("string"==typeof e&&(n="not ",e.substr(!h||h<0?0:+h,n.length)===n)?(r="must not be",e=e.replace(/^not /,"")):r="must be",function(t,e,i){return(void 0===i||i>t.length)&&(i=t.length),t.substring(i-e.length,i)===e}(t," argument"))s="The ".concat(t," ").concat(r," ").concat(o(e,"type"));else{var a=function(t,e,i){return"number"!=typeof i&&(i=0),!(i+e.length>t.length)&&-1!==t.indexOf(e,i)}(t,".")?"property":"argument";s='The "'.concat(t,'" ').concat(a," ").concat(r," ").concat(o(e,"type"))}return s+=". Received type ".concat(typeof i)}),TypeError),n("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),n("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),n("ERR_STREAM_PREMATURE_CLOSE","Premature close"),n("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),n("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),n("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),n("ERR_STREAM_WRITE_AFTER_END","write after end"),n("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),n("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),n("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),t.exports.codes=r},function(t,e,i){"use strict";(function(e){var r=Object.keys||function(t){var e=[];for(var i in t)e.push(i);return e};t.exports=u;var n=i(126),o=i(132);i(32)(u,n);for(var h=r(o.prototype),s=0;s<h.length;s++){var a=h[s];u.prototype[a]||(u.prototype[a]=o.prototype[a])}function u(t){if(!(this instanceof u))return new u(t);n.call(this,t),o.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",f)))}function f(){this._writableState.ended||e.nextTick(l,this)}function l(t){t.end()}Object.defineProperty(u.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(u.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(u.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(u.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}})}).call(this,i(42))},function(t,e,i){var r=i(34).Buffer;function n(t,e){this._block=r.alloc(t),this._finalSize=e,this._blockSize=t,this._len=0}n.prototype.update=function(t,e){"string"==typeof t&&(e=e||"utf8",t=r.from(t,e));for(var i=this._block,n=this._blockSize,o=t.length,h=this._len,s=0;s<o;){for(var a=h%n,u=Math.min(o-s,n-a),f=0;f<u;f++)i[a+f]=t[s+f];s+=u,(h+=u)%n==0&&this._update(i)}return this._len+=o,this},n.prototype.digest=function(t){var e=this._len%this._blockSize;this._block[e]=128,this._block.fill(0,e+1),e>=this._finalSize&&(this._update(this._block),this._block.fill(0));var i=8*this._len;if(i<=4294967295)this._block.writeUInt32BE(i,this._blockSize-4);else{var r=(4294967295&i)>>>0,n=(i-r)/4294967296;this._block.writeUInt32BE(n,this._blockSize-8),this._block.writeUInt32BE(r,this._blockSize-4)}this._update(this._block);var o=this._hash();return t?o.toString(t):o},n.prototype._update=function(){throw new Error("_update must be implemented by subclass")},t.exports=n},function(t,e,i){var r,n,o;t.exports=(o=i(36),n=(r=o).lib.WordArray,r.enc.Base64={stringify:function(t){var e=t.words,i=t.sigBytes,r=this._map;t.clamp();for(var n=[],o=0;o<i;o+=3)for(var h=(e[o>>>2]>>>24-o%4*8&255)<<16|(e[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|e[o+2>>>2]>>>24-(o+2)%4*8&255,s=0;s<4&&o+.75*s<i;s++)n.push(r.charAt(h>>>6*(3-s)&63));var a=r.charAt(64);if(a)for(;n.length%4;)n.push(a);return n.join("")},parse:function(t){var e=t.length,i=this._map,r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var o=0;o<i.length;o++)r[i.charCodeAt(o)]=o}var h=i.charAt(64);if(h){var s=t.indexOf(h);-1!==s&&(e=s)}return function(t,e,i){for(var r=[],o=0,h=0;h<e;h++)if(h%4){var s=i[t.charCodeAt(h-1)]<<h%4*2,a=i[t.charCodeAt(h)]>>>6-h%4*2,u=s|a;r[o>>>2]|=u<<24-o%4*8,o++}return n.create(r,o)}(t,e,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},o.enc.Base64)},function(t,e,i){var r;t.exports=(r=i(36),function(t){var e=r,i=e.lib,n=i.WordArray,o=i.Hasher,h=e.algo,s=[];!function(){for(var e=0;e<64;e++)s[e]=4294967296*t.abs(t.sin(e+1))|0}();var a=h.MD5=o.extend({_doReset:function(){this._hash=new n.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(t,e){for(var i=0;i<16;i++){var r=e+i,n=t[r];t[r]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}var o=this._hash.words,h=t[e+0],a=t[e+1],c=t[e+2],p=t[e+3],m=t[e+4],v=t[e+5],g=t[e+6],b=t[e+7],y=t[e+8],w=t[e+9],M=t[e+10],_=t[e+11],S=t[e+12],k=t[e+13],A=t[e+14],E=t[e+15],x=o[0],B=o[1],R=o[2],I=o[3];x=u(x,B,R,I,h,7,s[0]),I=u(I,x,B,R,a,12,s[1]),R=u(R,I,x,B,c,17,s[2]),B=u(B,R,I,x,p,22,s[3]),x=u(x,B,R,I,m,7,s[4]),I=u(I,x,B,R,v,12,s[5]),R=u(R,I,x,B,g,17,s[6]),B=u(B,R,I,x,b,22,s[7]),x=u(x,B,R,I,y,7,s[8]),I=u(I,x,B,R,w,12,s[9]),R=u(R,I,x,B,M,17,s[10]),B=u(B,R,I,x,_,22,s[11]),x=u(x,B,R,I,S,7,s[12]),I=u(I,x,B,R,k,12,s[13]),R=u(R,I,x,B,A,17,s[14]),x=f(x,B=u(B,R,I,x,E,22,s[15]),R,I,a,5,s[16]),I=f(I,x,B,R,g,9,s[17]),R=f(R,I,x,B,_,14,s[18]),B=f(B,R,I,x,h,20,s[19]),x=f(x,B,R,I,v,5,s[20]),I=f(I,x,B,R,M,9,s[21]),R=f(R,I,x,B,E,14,s[22]),B=f(B,R,I,x,m,20,s[23]),x=f(x,B,R,I,w,5,s[24]),I=f(I,x,B,R,A,9,s[25]),R=f(R,I,x,B,p,14,s[26]),B=f(B,R,I,x,y,20,s[27]),x=f(x,B,R,I,k,5,s[28]),I=f(I,x,B,R,c,9,s[29]),R=f(R,I,x,B,b,14,s[30]),x=l(x,B=f(B,R,I,x,S,20,s[31]),R,I,v,4,s[32]),I=l(I,x,B,R,y,11,s[33]),R=l(R,I,x,B,_,16,s[34]),B=l(B,R,I,x,A,23,s[35]),x=l(x,B,R,I,a,4,s[36]),I=l(I,x,B,R,m,11,s[37]),R=l(R,I,x,B,b,16,s[38]),B=l(B,R,I,x,M,23,s[39]),x=l(x,B,R,I,k,4,s[40]),I=l(I,x,B,R,h,11,s[41]),R=l(R,I,x,B,p,16,s[42]),B=l(B,R,I,x,g,23,s[43]),x=l(x,B,R,I,w,4,s[44]),I=l(I,x,B,R,S,11,s[45]),R=l(R,I,x,B,E,16,s[46]),x=d(x,B=l(B,R,I,x,c,23,s[47]),R,I,h,6,s[48]),I=d(I,x,B,R,b,10,s[49]),R=d(R,I,x,B,A,15,s[50]),B=d(B,R,I,x,v,21,s[51]),x=d(x,B,R,I,S,6,s[52]),I=d(I,x,B,R,p,10,s[53]),R=d(R,I,x,B,M,15,s[54]),B=d(B,R,I,x,a,21,s[55]),x=d(x,B,R,I,y,6,s[56]),I=d(I,x,B,R,E,10,s[57]),R=d(R,I,x,B,g,15,s[58]),B=d(B,R,I,x,k,21,s[59]),x=d(x,B,R,I,m,6,s[60]),I=d(I,x,B,R,_,10,s[61]),R=d(R,I,x,B,c,15,s[62]),B=d(B,R,I,x,w,21,s[63]),o[0]=o[0]+x|0,o[1]=o[1]+B|0,o[2]=o[2]+R|0,o[3]=o[3]+I|0},_doFinalize:function(){var e=this._data,i=e.words,r=8*this._nDataBytes,n=8*e.sigBytes;i[n>>>5]|=128<<24-n%32;var o=t.floor(r/4294967296),h=r;i[15+(n+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),i[14+(n+64>>>9<<4)]=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8),e.sigBytes=4*(i.length+1),this._process();for(var s=this._hash,a=s.words,u=0;u<4;u++){var f=a[u];a[u]=16711935&(f<<8|f>>>24)|4278255360&(f<<24|f>>>8)}return s},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});function u(t,e,i,r,n,o,h){var s=t+(e&i|~e&r)+n+h;return(s<<o|s>>>32-o)+e}function f(t,e,i,r,n,o,h){var s=t+(e&r|i&~r)+n+h;return(s<<o|s>>>32-o)+e}function l(t,e,i,r,n,o,h){var s=t+(e^i^r)+n+h;return(s<<o|s>>>32-o)+e}function d(t,e,i,r,n,o,h){var s=t+(i^(e|~r))+n+h;return(s<<o|s>>>32-o)+e}e.MD5=o._createHelper(a),e.HmacMD5=o._createHmacHelper(a)}(Math),r.MD5)},,function(t,e,i){"use strict";var r=i(32),n=i(94),o=i(96),h=i(97),s=i(61);function a(t){s.call(this,"digest"),this._hash=t}r(a,s),a.prototype._update=function(t){this._hash.update(t)},a.prototype._final=function(){return this._hash.digest()},t.exports=function(t){return"md5"===(t=t.toLowerCase())?new n:"rmd160"===t||"ripemd160"===t?new o:new a(h(t))}},function(t,e,i){"use strict";var r,n="object"==typeof Reflect?Reflect:null,o=n&&"function"==typeof n.apply?n.apply:function(t,e,i){return Function.prototype.apply.call(t,e,i)};r=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var h=Number.isNaN||function(t){return t!=t};function s(){s.init.call(this)}t.exports=s,t.exports.once=function(t,e){return new Promise((function(i,r){function n(){void 0!==o&&t.removeListener("error",o),i([].slice.call(arguments))}var o;"error"!==e&&(o=function(i){t.removeListener(e,n),r(i)},t.once("error",o)),t.once(e,n)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var a=10;function u(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function f(t){return void 0===t._maxListeners?s.defaultMaxListeners:t._maxListeners}function l(t,e,i,r){var n,o,h,s;if(u(i),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,i.listener?i.listener:i),o=t._events),h=o[e]),void 0===h)h=o[e]=i,++t._eventsCount;else if("function"==typeof h?h=o[e]=r?[i,h]:[h,i]:r?h.unshift(i):h.push(i),(n=f(t))>0&&h.length>n&&!h.warned){h.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+h.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");a.name="MaxListenersExceededWarning",a.emitter=t,a.type=e,a.count=h.length,s=a,console&&console.warn&&console.warn(s)}return t}function d(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function c(t,e,i){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:i},n=d.bind(r);return n.listener=i,r.wrapFn=n,n}function p(t,e,i){var r=t._events;if(void 0===r)return[];var n=r[e];return void 0===n?[]:"function"==typeof n?i?[n.listener||n]:[n]:i?function(t){for(var e=new Array(t.length),i=0;i<e.length;++i)e[i]=t[i].listener||t[i];return e}(n):v(n,n.length)}function m(t){var e=this._events;if(void 0!==e){var i=e[t];if("function"==typeof i)return 1;if(void 0!==i)return i.length}return 0}function v(t,e){for(var i=new Array(e),r=0;r<e;++r)i[r]=t[r];return i}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(t){if("number"!=typeof t||t<0||h(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");a=t}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||h(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},s.prototype.getMaxListeners=function(){return f(this)},s.prototype.emit=function(t){for(var e=[],i=1;i<arguments.length;i++)e.push(arguments[i]);var r="error"===t,n=this._events;if(void 0!==n)r=r&&void 0===n.error;else if(!r)return!1;if(r){var h;if(e.length>0&&(h=e[0]),h instanceof Error)throw h;var s=new Error("Unhandled error."+(h?" ("+h.message+")":""));throw s.context=h,s}var a=n[t];if(void 0===a)return!1;if("function"==typeof a)o(a,this,e);else{var u=a.length,f=v(a,u);for(i=0;i<u;++i)o(f[i],this,e)}return!0},s.prototype.addListener=function(t,e){return l(this,t,e,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(t,e){return l(this,t,e,!0)},s.prototype.once=function(t,e){return u(e),this.on(t,c(this,t,e)),this},s.prototype.prependOnceListener=function(t,e){return u(e),this.prependListener(t,c(this,t,e)),this},s.prototype.removeListener=function(t,e){var i,r,n,o,h;if(u(e),void 0===(r=this._events))return this;if(void 0===(i=r[t]))return this;if(i===e||i.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,i.listener||e));else if("function"!=typeof i){for(n=-1,o=i.length-1;o>=0;o--)if(i[o]===e||i[o].listener===e){h=i[o].listener,n=o;break}if(n<0)return this;0===n?i.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(i,n),1===i.length&&(r[t]=i[0]),void 0!==r.removeListener&&this.emit("removeListener",t,h||e)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(t){var e,i,r;if(void 0===(i=this._events))return this;if(void 0===i.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==i[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete i[t]),this;if(0===arguments.length){var n,o=Object.keys(i);for(r=0;r<o.length;++r)"removeListener"!==(n=o[r])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=i[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},s.prototype.listeners=function(t){return p(this,t,!0)},s.prototype.rawListeners=function(t){return p(this,t,!1)},s.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):m.call(t,e)},s.prototype.listenerCount=m,s.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(t,e,i){"use strict";var r=i(34).Buffer,n=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===n||!n(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=a,this.end=u,e=4;break;case"utf8":this.fillLast=s,e=4;break;case"base64":this.text=f,this.end=l,e=3;break;default:return this.write=d,void(this.end=c)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function h(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function s(t){var e=this.lastTotal-this.lastNeed,i=function(t,e,i){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==i?i:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function a(t,e){if((t.length-e)%2==0){var i=t.toString("utf16le",e);if(i){var r=i.charCodeAt(i.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],i.slice(0,-1)}return i}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function u(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var i=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,i)}return e}function f(t,e){var i=(t.length-e)%3;return 0===i?t.toString("base64",e):(this.lastNeed=3-i,this.lastTotal=3,1===i?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-i))}function l(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function d(t){return t.toString(this.encoding)}function c(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,i;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";i=this.lastNeed,this.lastNeed=0}else i=0;return i<t.length?e?e+this.text(t,i):this.text(t,i):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var i=function(t,e,i){var r=e.length-1;if(r<i)return 0;var n=h(e[r]);if(n>=0)return n>0&&(t.lastNeed=n-1),n;if(--r<i||-2===n)return 0;if((n=h(e[r]))>=0)return n>0&&(t.lastNeed=n-2),n;if(--r<i||-2===n)return 0;if((n=h(e[r]))>=0)return n>0&&(2===n?n=0:t.lastNeed=n-3),n;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=i;var r=t.length-(i-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,i){(function(t){function i(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===i(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===i(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===i(t)},e.isError=function(t){return"[object Error]"===i(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,i(46).Buffer)},function(t,e,i){(function(e){t.exports=function(t,i){for(var r=Math.min(t.length,i.length),n=new e(r),o=0;o<r;++o)n[o]=t[o]^i[o];return n}}).call(this,i(46).Buffer)},function(t,e,i){"use strict";var r=i(50),n=i(47);function o(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}e.BlockHash=o,o.prototype.update=function(t,e){if(t=r.toArray(t,e),this.pending?this.pending=this.pending.concat(t):this.pending=t,this.pendingTotal+=t.length,this.pending.length>=this._delta8){var i=(t=this.pending).length%this._delta8;this.pending=t.slice(t.length-i,t.length),0===this.pending.length&&(this.pending=null),t=r.join32(t,0,t.length-i,this.endian);for(var n=0;n<t.length;n+=this._delta32)this._update(t,n,n+this._delta32)}return this},o.prototype.digest=function(t){return this.update(this._pad()),n(null===this.pending),this._digest(t)},o.prototype._pad=function(){var t=this.pendingTotal,e=this._delta8,i=e-(t+this.padLength)%e,r=new Array(i+this.padLength);r[0]=128;for(var n=1;n<i;n++)r[n]=0;if(t<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)r[n++]=0;r[n++]=0,r[n++]=0,r[n++]=0,r[n++]=0,r[n++]=t>>>24&255,r[n++]=t>>>16&255,r[n++]=t>>>8&255,r[n++]=255&t}else for(r[n++]=255&t,r[n++]=t>>>8&255,r[n++]=t>>>16&255,r[n++]=t>>>24&255,r[n++]=0,r[n++]=0,r[n++]=0,r[n++]=0,o=8;o<this.padLength;o++)r[n++]=0;return r}},function(t,e,i){"use strict";const r=i(32),n=i(111).Reporter,o=i(109).Buffer;function h(t,e){n.call(this,e),o.isBuffer(t)?(this.base=t,this.offset=0,this.length=t.length):this.error("Input not Buffer")}function s(t,e){if(Array.isArray(t))this.length=0,this.value=t.map((function(t){return s.isEncoderBuffer(t)||(t=new s(t,e)),this.length+=t.length,t}),this);else if("number"==typeof t){if(!(0<=t&&t<=255))return e.error("non-byte EncoderBuffer value");this.value=t,this.length=1}else if("string"==typeof t)this.value=t,this.length=o.byteLength(t);else{if(!o.isBuffer(t))return e.error("Unsupported type: "+typeof t);this.value=t,this.length=t.length}}r(h,n),e.DecoderBuffer=h,h.isDecoderBuffer=function(t){if(t instanceof h)return!0;return"object"==typeof t&&o.isBuffer(t.base)&&"DecoderBuffer"===t.constructor.name&&"number"==typeof t.offset&&"number"==typeof t.length&&"function"==typeof t.save&&"function"==typeof t.restore&&"function"==typeof t.isEmpty&&"function"==typeof t.readUInt8&&"function"==typeof t.skip&&"function"==typeof t.raw},h.prototype.save=function(){return{offset:this.offset,reporter:n.prototype.save.call(this)}},h.prototype.restore=function(t){const e=new h(this.base);return e.offset=t.offset,e.length=this.offset,this.offset=t.offset,n.prototype.restore.call(this,t.reporter),e},h.prototype.isEmpty=function(){return this.offset===this.length},h.prototype.readUInt8=function(t){return this.offset+1<=this.length?this.base.readUInt8(this.offset++,!0):this.error(t||"DecoderBuffer overrun")},h.prototype.skip=function(t,e){if(!(this.offset+t<=this.length))return this.error(e||"DecoderBuffer overrun");const i=new h(this.base);return i._reporterState=this._reporterState,i.offset=this.offset,i.length=this.offset+t,this.offset+=t,i},h.prototype.raw=function(t){return this.base.slice(t?t.offset:this.offset,this.length)},e.EncoderBuffer=s,s.isEncoderBuffer=function(t){if(t instanceof s)return!0;return"object"==typeof t&&"EncoderBuffer"===t.constructor.name&&"number"==typeof t.length&&"function"==typeof t.join},s.prototype.join=function(t,e){return t||(t=o.alloc(this.length)),e||(e=0),0===this.length||(Array.isArray(this.value)?this.value.forEach((function(i){i.join(t,e),e+=i.length})):("number"==typeof this.value?t[e]=this.value:"string"==typeof this.value?t.write(this.value,e):o.isBuffer(this.value)&&this.value.copy(t,e),e+=this.length)),t}},,function(t,e,i){"use strict";(function(e){void 0===e||!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,i,r,n){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,h,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick((function(){t.call(null,i)}));case 3:return e.nextTick((function(){t.call(null,i,r)}));case 4:return e.nextTick((function(){t.call(null,i,r,n)}));default:for(o=new Array(s-1),h=0;h<o.length;)o[h++]=arguments[h];return e.nextTick((function(){t.apply(null,o)}))}}}:t.exports=e}).call(this,i(42))},function(t,e,i){var r=i(34).Buffer;function n(t){r.isBuffer(t)||(t=r.from(t));for(var e=t.length/4|0,i=new Array(e),n=0;n<e;n++)i[n]=t.readUInt32BE(4*n);return i}function o(t){for(;0<t.length;t++)t[0]=0}function h(t,e,i,r,n){for(var o,h,s,a,u=i[0],f=i[1],l=i[2],d=i[3],c=t[0]^e[0],p=t[1]^e[1],m=t[2]^e[2],v=t[3]^e[3],g=4,b=1;b<n;b++)o=u[c>>>24]^f[p>>>16&255]^l[m>>>8&255]^d[255&v]^e[g++],h=u[p>>>24]^f[m>>>16&255]^l[v>>>8&255]^d[255&c]^e[g++],s=u[m>>>24]^f[v>>>16&255]^l[c>>>8&255]^d[255&p]^e[g++],a=u[v>>>24]^f[c>>>16&255]^l[p>>>8&255]^d[255&m]^e[g++],c=o,p=h,m=s,v=a;return o=(r[c>>>24]<<24|r[p>>>16&255]<<16|r[m>>>8&255]<<8|r[255&v])^e[g++],h=(r[p>>>24]<<24|r[m>>>16&255]<<16|r[v>>>8&255]<<8|r[255&c])^e[g++],s=(r[m>>>24]<<24|r[v>>>16&255]<<16|r[c>>>8&255]<<8|r[255&p])^e[g++],a=(r[v>>>24]<<24|r[c>>>16&255]<<16|r[p>>>8&255]<<8|r[255&m])^e[g++],[o>>>=0,h>>>=0,s>>>=0,a>>>=0]}var s=[0,1,2,4,8,16,32,64,128,27,54],a=function(){for(var t=new Array(256),e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;for(var i=[],r=[],n=[[],[],[],[]],o=[[],[],[],[]],h=0,s=0,a=0;a<256;++a){var u=s^s<<1^s<<2^s<<3^s<<4;u=u>>>8^255&u^99,i[h]=u,r[u]=h;var f=t[h],l=t[f],d=t[l],c=257*t[u]^16843008*u;n[0][h]=c<<24|c>>>8,n[1][h]=c<<16|c>>>16,n[2][h]=c<<8|c>>>24,n[3][h]=c,c=16843009*d^65537*l^257*f^16843008*h,o[0][u]=c<<24|c>>>8,o[1][u]=c<<16|c>>>16,o[2][u]=c<<8|c>>>24,o[3][u]=c,0===h?h=s=1:(h=f^t[t[t[d^f]]],s^=t[t[s]])}return{SBOX:i,INV_SBOX:r,SUB_MIX:n,INV_SUB_MIX:o}}();function u(t){this._key=n(t),this._reset()}u.blockSize=16,u.keySize=32,u.prototype.blockSize=u.blockSize,u.prototype.keySize=u.keySize,u.prototype._reset=function(){for(var t=this._key,e=t.length,i=e+6,r=4*(i+1),n=[],o=0;o<e;o++)n[o]=t[o];for(o=e;o<r;o++){var h=n[o-1];o%e==0?(h=h<<8|h>>>24,h=a.SBOX[h>>>24]<<24|a.SBOX[h>>>16&255]<<16|a.SBOX[h>>>8&255]<<8|a.SBOX[255&h],h^=s[o/e|0]<<24):e>6&&o%e==4&&(h=a.SBOX[h>>>24]<<24|a.SBOX[h>>>16&255]<<16|a.SBOX[h>>>8&255]<<8|a.SBOX[255&h]),n[o]=n[o-e]^h}for(var u=[],f=0;f<r;f++){var l=r-f,d=n[l-(f%4?0:4)];u[f]=f<4||l<=4?d:a.INV_SUB_MIX[0][a.SBOX[d>>>24]]^a.INV_SUB_MIX[1][a.SBOX[d>>>16&255]]^a.INV_SUB_MIX[2][a.SBOX[d>>>8&255]]^a.INV_SUB_MIX[3][a.SBOX[255&d]]}this._nRounds=i,this._keySchedule=n,this._invKeySchedule=u},u.prototype.encryptBlockRaw=function(t){return h(t=n(t),this._keySchedule,a.SUB_MIX,a.SBOX,this._nRounds)},u.prototype.encryptBlock=function(t){var e=this.encryptBlockRaw(t),i=r.allocUnsafe(16);return i.writeUInt32BE(e[0],0),i.writeUInt32BE(e[1],4),i.writeUInt32BE(e[2],8),i.writeUInt32BE(e[3],12),i},u.prototype.decryptBlock=function(t){var e=(t=n(t))[1];t[1]=t[3],t[3]=e;var i=h(t,this._invKeySchedule,a.INV_SUB_MIX,a.INV_SBOX,this._nRounds),o=r.allocUnsafe(16);return o.writeUInt32BE(i[0],0),o.writeUInt32BE(i[3],4),o.writeUInt32BE(i[2],8),o.writeUInt32BE(i[1],12),o},u.prototype.scrub=function(){o(this._keySchedule),o(this._invKeySchedule),o(this._key)},t.exports.AES=u},function(t,e,i){var r=i(34).Buffer,n=i(94);t.exports=function(t,e,i,o){if(r.isBuffer(t)||(t=r.from(t,"binary")),e&&(r.isBuffer(e)||(e=r.from(e,"binary")),8!==e.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var h=i/8,s=r.alloc(h),a=r.alloc(o||0),u=r.alloc(0);h>0||o>0;){var f=new n;f.update(u),f.update(t),e&&f.update(e),u=f.digest();var l=0;if(h>0){var d=s.length-h;l=Math.min(h,u.length),u.copy(s,d,0,l),h-=l}if(l<u.length&&o>0){var c=a.length-o,p=Math.min(o,u.length-l);u.copy(a,c,l,l+p),o-=p}}return u.fill(0),{key:s,iv:a}}},function(t,e,i){"use strict";var r=i(58),n=i(48),o=n.getNAF,h=n.getJSF,s=n.assert;function a(t,e){this.type=t,this.p=new r(e.p,16),this.red=e.prime?r.red(e.prime):r.mont(this.p),this.zero=new r(0).toRed(this.red),this.one=new r(1).toRed(this.red),this.two=new r(2).toRed(this.red),this.n=e.n&&new r(e.n,16),this.g=e.g&&this.pointFromJSON(e.g,e.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var i=this.n&&this.p.div(this.n);!i||i.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function u(t,e){this.curve=t,this.type=e,this.precomputed=null}t.exports=a,a.prototype.point=function(){throw new Error("Not implemented")},a.prototype.validate=function(){throw new Error("Not implemented")},a.prototype._fixedNafMul=function(t,e){s(t.precomputed);var i=t._getDoubles(),r=o(e,1,this._bitLength),n=(1<<i.step+1)-(i.step%2==0?2:1);n/=3;for(var h=[],a=0;a<r.length;a+=i.step){var u=0;for(e=a+i.step-1;e>=a;e--)u=(u<<1)+r[e];h.push(u)}for(var f=this.jpoint(null,null,null),l=this.jpoint(null,null,null),d=n;d>0;d--){for(a=0;a<h.length;a++){(u=h[a])===d?l=l.mixedAdd(i.points[a]):u===-d&&(l=l.mixedAdd(i.points[a].neg()))}f=f.add(l)}return f.toP()},a.prototype._wnafMul=function(t,e){var i=4,r=t._getNAFPoints(i);i=r.wnd;for(var n=r.points,h=o(e,i,this._bitLength),a=this.jpoint(null,null,null),u=h.length-1;u>=0;u--){for(e=0;u>=0&&0===h[u];u--)e++;if(u>=0&&e++,a=a.dblp(e),u<0)break;var f=h[u];s(0!==f),a="affine"===t.type?f>0?a.mixedAdd(n[f-1>>1]):a.mixedAdd(n[-f-1>>1].neg()):f>0?a.add(n[f-1>>1]):a.add(n[-f-1>>1].neg())}return"affine"===t.type?a.toP():a},a.prototype._wnafMulAdd=function(t,e,i,r,n){for(var s=this._wnafT1,a=this._wnafT2,u=this._wnafT3,f=0,l=0;l<r;l++){var d=(A=e[l])._getNAFPoints(t);s[l]=d.wnd,a[l]=d.points}for(l=r-1;l>=1;l-=2){var c=l-1,p=l;if(1===s[c]&&1===s[p]){var m=[e[c],null,null,e[p]];0===e[c].y.cmp(e[p].y)?(m[1]=e[c].add(e[p]),m[2]=e[c].toJ().mixedAdd(e[p].neg())):0===e[c].y.cmp(e[p].y.redNeg())?(m[1]=e[c].toJ().mixedAdd(e[p]),m[2]=e[c].add(e[p].neg())):(m[1]=e[c].toJ().mixedAdd(e[p]),m[2]=e[c].toJ().mixedAdd(e[p].neg()));var v=[-3,-1,-5,-7,0,7,5,1,3],g=h(i[c],i[p]);f=Math.max(g[0].length,f),u[c]=new Array(f),u[p]=new Array(f);for(var b=0;b<f;b++){var y=0|g[0][b],w=0|g[1][b];u[c][b]=v[3*(y+1)+(w+1)],u[p][b]=0,a[c]=m}}else u[c]=o(i[c],s[c],this._bitLength),u[p]=o(i[p],s[p],this._bitLength),f=Math.max(u[c].length,f),f=Math.max(u[p].length,f)}var M=this.jpoint(null,null,null),_=this._wnafT4;for(l=f;l>=0;l--){for(var S=0;l>=0;){var k=!0;for(b=0;b<r;b++)_[b]=0|u[b][l],0!==_[b]&&(k=!1);if(!k)break;S++,l--}if(l>=0&&S++,M=M.dblp(S),l<0)break;for(b=0;b<r;b++){var A,E=_[b];0!==E&&(E>0?A=a[b][E-1>>1]:E<0&&(A=a[b][-E-1>>1].neg()),M="affine"===A.type?M.mixedAdd(A):M.add(A))}}for(l=0;l<r;l++)a[l]=null;return n?M:M.toP()},a.BasePoint=u,u.prototype.eq=function(){throw new Error("Not implemented")},u.prototype.validate=function(){return this.curve.validate(this)},a.prototype.decodePoint=function(t,e){t=n.toArray(t,e);var i=this.p.byteLength();if((4===t[0]||6===t[0]||7===t[0])&&t.length-1==2*i)return 6===t[0]?s(t[t.length-1]%2==0):7===t[0]&&s(t[t.length-1]%2==1),this.point(t.slice(1,1+i),t.slice(1+i,1+2*i));if((2===t[0]||3===t[0])&&t.length-1===i)return this.pointFromX(t.slice(1,1+i),3===t[0]);throw new Error("Unknown point format")},u.prototype.encodeCompressed=function(t){return this.encode(t,!0)},u.prototype._encode=function(t){var e=this.curve.p.byteLength(),i=this.getX().toArray("be",e);return t?[this.getY().isEven()?2:3].concat(i):[4].concat(i,this.getY().toArray("be",e))},u.prototype.encode=function(t,e){return n.encode(this._encode(e),t)},u.prototype.precompute=function(t){if(this.precomputed)return this;var e={doubles:null,naf:null,beta:null};return e.naf=this._getNAFPoints(8),e.doubles=this._getDoubles(4,t),e.beta=this._getBeta(),this.precomputed=e,this},u.prototype._hasDoubles=function(t){if(!this.precomputed)return!1;var e=this.precomputed.doubles;return!!e&&e.points.length>=Math.ceil((t.bitLength()+1)/e.step)},u.prototype._getDoubles=function(t,e){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var i=[this],r=this,n=0;n<e;n+=t){for(var o=0;o<t;o++)r=r.dbl();i.push(r)}return{step:t,points:i}},u.prototype._getNAFPoints=function(t){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var e=[this],i=(1<<t)-1,r=1===i?null:this.dbl(),n=1;n<i;n++)e[n]=e[n-1].add(r);return{wnd:t,points:e}},u.prototype._getBeta=function(){return null},u.prototype.dblp=function(t){for(var e=this,i=0;i<t;i++)e=e.dbl();return e}},function(t,e,i){var r=i(272),n=i(279),o=i(280),h=i(102),s=i(146),a=i(34).Buffer;function u(t){var e;"object"!=typeof t||a.isBuffer(t)||(e=t.passphrase,t=t.key),"string"==typeof t&&(t=a.from(t));var i,u,f=o(t,e),l=f.tag,d=f.data;switch(l){case"CERTIFICATE":u=r.certificate.decode(d,"der").tbsCertificate.subjectPublicKeyInfo;case"PUBLIC KEY":switch(u||(u=r.PublicKey.decode(d,"der")),i=u.algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return r.RSAPublicKey.decode(u.subjectPublicKey.data,"der");case"1.2.840.10045.2.1":return u.subjectPrivateKey=u.subjectPublicKey,{type:"ec",data:u};case"1.2.840.10040.4.1":return u.algorithm.params.pub_key=r.DSAparam.decode(u.subjectPublicKey.data,"der"),{type:"dsa",data:u.algorithm.params};default:throw new Error("unknown key id "+i)}case"ENCRYPTED PRIVATE KEY":d=function(t,e){var i=t.algorithm.decrypt.kde.kdeparams.salt,r=parseInt(t.algorithm.decrypt.kde.kdeparams.iters.toString(),10),o=n[t.algorithm.decrypt.cipher.algo.join(".")],u=t.algorithm.decrypt.cipher.iv,f=t.subjectPrivateKey,l=parseInt(o.split("-")[1],10)/8,d=s.pbkdf2Sync(e,i,r,l,"sha1"),c=h.createDecipheriv(o,d,u),p=[];return p.push(c.update(f)),p.push(c.final()),a.concat(p)}(d=r.EncryptedPrivateKey.decode(d,"der"),e);case"PRIVATE KEY":switch(i=(u=r.PrivateKey.decode(d,"der")).algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return r.RSAPrivateKey.decode(u.subjectPrivateKey,"der");case"1.2.840.10045.2.1":return{curve:u.algorithm.curve,privateKey:r.ECPrivateKey.decode(u.subjectPrivateKey,"der").privateKey};case"1.2.840.10040.4.1":return u.algorithm.params.priv_key=r.DSAparam.decode(u.subjectPrivateKey,"der"),{type:"dsa",params:u.algorithm.params};default:throw new Error("unknown key id "+i)}case"RSA PUBLIC KEY":return r.RSAPublicKey.decode(d,"der");case"RSA PRIVATE KEY":return r.RSAPrivateKey.decode(d,"der");case"DSA PRIVATE KEY":return{type:"dsa",params:r.DSAPrivateKey.decode(d,"der")};case"EC PRIVATE KEY":return{curve:(d=r.ECPrivateKey.decode(d,"der")).parameters.value,privateKey:d.privateKey};default:throw new Error("unknown key type "+l)}}t.exports=u,u.signature=r.signature},function(t,e,i){var r,n,o,h,s,a;t.exports=(a=i(36),n=(r=a).lib,o=n.Base,h=n.WordArray,(s=r.x64={}).Word=o.extend({init:function(t,e){this.high=t,this.low=e}}),s.WordArray=o.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:8*t.length},toX32:function(){for(var t=this.words,e=t.length,i=[],r=0;r<e;r++){var n=t[r];i.push(n.high),i.push(n.low)}return h.create(i,this.sigBytes)},clone:function(){for(var t=o.clone.call(this),e=t.words=this.words.slice(0),i=e.length,r=0;r<i;r++)e[r]=e[r].clone();return t}}),a)},,,,,,,function(t,e,i){"use strict";var r=i(32),n=i(124),o=i(34).Buffer,h=new Array(16);function s(){n.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function a(t,e){return t<<e|t>>>32-e}function u(t,e,i,r,n,o,h){return a(t+(e&i|~e&r)+n+o|0,h)+e|0}function f(t,e,i,r,n,o,h){return a(t+(e&r|i&~r)+n+o|0,h)+e|0}function l(t,e,i,r,n,o,h){return a(t+(e^i^r)+n+o|0,h)+e|0}function d(t,e,i,r,n,o,h){return a(t+(i^(e|~r))+n+o|0,h)+e|0}r(s,n),s.prototype._update=function(){for(var t=h,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);var i=this._a,r=this._b,n=this._c,o=this._d;i=u(i,r,n,o,t[0],3614090360,7),o=u(o,i,r,n,t[1],3905402710,12),n=u(n,o,i,r,t[2],606105819,17),r=u(r,n,o,i,t[3],3250441966,22),i=u(i,r,n,o,t[4],4118548399,7),o=u(o,i,r,n,t[5],1200080426,12),n=u(n,o,i,r,t[6],2821735955,17),r=u(r,n,o,i,t[7],4249261313,22),i=u(i,r,n,o,t[8],1770035416,7),o=u(o,i,r,n,t[9],2336552879,12),n=u(n,o,i,r,t[10],4294925233,17),r=u(r,n,o,i,t[11],2304563134,22),i=u(i,r,n,o,t[12],1804603682,7),o=u(o,i,r,n,t[13],4254626195,12),n=u(n,o,i,r,t[14],2792965006,17),i=f(i,r=u(r,n,o,i,t[15],1236535329,22),n,o,t[1],4129170786,5),o=f(o,i,r,n,t[6],3225465664,9),n=f(n,o,i,r,t[11],643717713,14),r=f(r,n,o,i,t[0],3921069994,20),i=f(i,r,n,o,t[5],3593408605,5),o=f(o,i,r,n,t[10],38016083,9),n=f(n,o,i,r,t[15],3634488961,14),r=f(r,n,o,i,t[4],3889429448,20),i=f(i,r,n,o,t[9],568446438,5),o=f(o,i,r,n,t[14],3275163606,9),n=f(n,o,i,r,t[3],4107603335,14),r=f(r,n,o,i,t[8],1163531501,20),i=f(i,r,n,o,t[13],2850285829,5),o=f(o,i,r,n,t[2],4243563512,9),n=f(n,o,i,r,t[7],1735328473,14),i=l(i,r=f(r,n,o,i,t[12],2368359562,20),n,o,t[5],4294588738,4),o=l(o,i,r,n,t[8],2272392833,11),n=l(n,o,i,r,t[11],1839030562,16),r=l(r,n,o,i,t[14],4259657740,23),i=l(i,r,n,o,t[1],2763975236,4),o=l(o,i,r,n,t[4],1272893353,11),n=l(n,o,i,r,t[7],4139469664,16),r=l(r,n,o,i,t[10],3200236656,23),i=l(i,r,n,o,t[13],681279174,4),o=l(o,i,r,n,t[0],3936430074,11),n=l(n,o,i,r,t[3],3572445317,16),r=l(r,n,o,i,t[6],76029189,23),i=l(i,r,n,o,t[9],3654602809,4),o=l(o,i,r,n,t[12],3873151461,11),n=l(n,o,i,r,t[15],530742520,16),i=d(i,r=l(r,n,o,i,t[2],3299628645,23),n,o,t[0],4096336452,6),o=d(o,i,r,n,t[7],1126891415,10),n=d(n,o,i,r,t[14],2878612391,15),r=d(r,n,o,i,t[5],4237533241,21),i=d(i,r,n,o,t[12],1700485571,6),o=d(o,i,r,n,t[3],2399980690,10),n=d(n,o,i,r,t[10],4293915773,15),r=d(r,n,o,i,t[1],2240044497,21),i=d(i,r,n,o,t[8],1873313359,6),o=d(o,i,r,n,t[15],4264355552,10),n=d(n,o,i,r,t[6],2734768916,15),r=d(r,n,o,i,t[13],1309151649,21),i=d(i,r,n,o,t[4],4149444226,6),o=d(o,i,r,n,t[11],3174756917,10),n=d(n,o,i,r,t[2],718787259,15),r=d(r,n,o,i,t[9],3951481745,21),this._a=this._a+i|0,this._b=this._b+r|0,this._c=this._c+n|0,this._d=this._d+o|0},s.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=o.allocUnsafe(16);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t},t.exports=s},function(t,e,i){"use strict";var r=i(68).codes.ERR_STREAM_PREMATURE_CLOSE;function n(){}t.exports=function t(e,i,o){if("function"==typeof i)return t(e,null,i);i||(i={}),o=function(t){var e=!1;return function(){if(!e){e=!0;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++)r[n]=arguments[n];t.apply(this,r)}}}(o||n);var h=i.readable||!1!==i.readable&&e.readable,s=i.writable||!1!==i.writable&&e.writable,a=function(){e.writable||f()},u=e._writableState&&e._writableState.finished,f=function(){s=!1,u=!0,h||o.call(e)},l=e._readableState&&e._readableState.endEmitted,d=function(){h=!1,l=!0,s||o.call(e)},c=function(t){o.call(e,t)},p=function(){var t;return h&&!l?(e._readableState&&e._readableState.ended||(t=new r),o.call(e,t)):s&&!u?(e._writableState&&e._writableState.ended||(t=new r),o.call(e,t)):void 0},m=function(){e.req.on("finish",f)};return!function(t){return t.setHeader&&"function"==typeof t.abort}(e)?s&&!e._writableState&&(e.on("end",a),e.on("close",a)):(e.on("complete",f),e.on("abort",p),e.req?m():e.on("request",m)),e.on("end",d),e.on("finish",f),!1!==i.error&&e.on("error",c),e.on("close",p),function(){e.removeListener("complete",f),e.removeListener("abort",p),e.removeListener("request",m),e.req&&e.req.removeListener("finish",f),e.removeListener("end",a),e.removeListener("close",a),e.removeListener("finish",f),e.removeListener("end",d),e.removeListener("error",c),e.removeListener("close",p)}}},function(t,e,i){"use strict";var r=i(46).Buffer,n=i(32),o=i(124),h=new Array(16),s=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],a=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],u=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],f=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],l=[0,1518500249,1859775393,2400959708,2840853838],d=[1352829926,1548603684,1836072691,2053994217,0];function c(){o.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function p(t,e){return t<<e|t>>>32-e}function m(t,e,i,r,n,o,h,s){return p(t+(e^i^r)+o+h|0,s)+n|0}function v(t,e,i,r,n,o,h,s){return p(t+(e&i|~e&r)+o+h|0,s)+n|0}function g(t,e,i,r,n,o,h,s){return p(t+((e|~i)^r)+o+h|0,s)+n|0}function b(t,e,i,r,n,o,h,s){return p(t+(e&r|i&~r)+o+h|0,s)+n|0}function y(t,e,i,r,n,o,h,s){return p(t+(e^(i|~r))+o+h|0,s)+n|0}n(c,o),c.prototype._update=function(){for(var t=h,e=0;e<16;++e)t[e]=this._block.readInt32LE(4*e);for(var i=0|this._a,r=0|this._b,n=0|this._c,o=0|this._d,c=0|this._e,w=0|this._a,M=0|this._b,_=0|this._c,S=0|this._d,k=0|this._e,A=0;A<80;A+=1){var E,x;A<16?(E=m(i,r,n,o,c,t[s[A]],l[0],u[A]),x=y(w,M,_,S,k,t[a[A]],d[0],f[A])):A<32?(E=v(i,r,n,o,c,t[s[A]],l[1],u[A]),x=b(w,M,_,S,k,t[a[A]],d[1],f[A])):A<48?(E=g(i,r,n,o,c,t[s[A]],l[2],u[A]),x=g(w,M,_,S,k,t[a[A]],d[2],f[A])):A<64?(E=b(i,r,n,o,c,t[s[A]],l[3],u[A]),x=v(w,M,_,S,k,t[a[A]],d[3],f[A])):(E=y(i,r,n,o,c,t[s[A]],l[4],u[A]),x=m(w,M,_,S,k,t[a[A]],d[4],f[A])),i=c,c=o,o=p(n,10),n=r,r=E,w=k,k=S,S=p(_,10),_=M,M=x}var B=this._b+n+S|0;this._b=this._c+o+k|0,this._c=this._d+c+w|0,this._d=this._e+i+M|0,this._e=this._a+r+_|0,this._a=B},c.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var t=r.alloc?r.alloc(20):new r(20);return t.writeInt32LE(this._a,0),t.writeInt32LE(this._b,4),t.writeInt32LE(this._c,8),t.writeInt32LE(this._d,12),t.writeInt32LE(this._e,16),t},t.exports=c},function(t,e,i){(e=t.exports=function(t){t=t.toLowerCase();var i=e[t];if(!i)throw new Error(t+" is not supported (we accept pull requests)");return new i}).sha=i(216),e.sha1=i(217),e.sha224=i(218),e.sha256=i(135),e.sha384=i(219),e.sha512=i(136)},function(t,e,i){(e=t.exports=i(137)).Stream=e,e.Readable=e,e.Writable=i(100),e.Duplex=i(63),e.Transform=i(142),e.PassThrough=i(224)},function(t,e,i){var r=i(46),n=r.Buffer;function o(t,e){for(var i in t)e[i]=t[i]}function h(t,e,i){return n(t,e,i)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=h),o(n,h),h.from=function(t,e,i){if("number"==typeof t)throw new TypeError("Argument must not be a number");return n(t,e,i)},h.alloc=function(t,e,i){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=n(t);return void 0!==e?"string"==typeof i?r.fill(e,i):r.fill(e):r.fill(0),r},h.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n(t)},h.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e,i){"use strict";(function(e,r,n){var o=i(82);function h(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,i){var r=t.entry;t.entry=null;for(;r;){var n=r.callback;e.pendingcb--,n(i),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=b;var s,a=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:o.nextTick;b.WritableState=g;var u=Object.create(i(77));u.inherits=i(32);var f={deprecate:i(133)},l=i(138),d=i(99).Buffer,c=n.Uint8Array||function(){};var p,m=i(141);function v(){}function g(t,e){s=s||i(63),t=t||{};var r=e instanceof s;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var n=t.highWaterMark,u=t.writableHighWaterMark,f=this.objectMode?16:16384;this.highWaterMark=n||0===n?n:r&&(u||0===u)?u:f,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var l=!1===t.decodeStrings;this.decodeStrings=!l,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var i=t._writableState,r=i.sync,n=i.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(i),e)!function(t,e,i,r,n){--e.pendingcb,i?(o.nextTick(n,r),o.nextTick(k,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(n(r),t._writableState.errorEmitted=!0,t.emit("error",r),k(t,e))}(t,i,r,e,n);else{var h=_(i);h||i.corked||i.bufferProcessing||!i.bufferedRequest||M(t,i),r?a(w,t,i,h,n):w(t,i,h,n)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new h(this)}function b(t){if(s=s||i(63),!(p.call(b,this)||this instanceof s))return new b(t);this._writableState=new g(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),l.call(this)}function y(t,e,i,r,n,o,h){e.writelen=r,e.writecb=h,e.writing=!0,e.sync=!0,i?t._writev(n,e.onwrite):t._write(n,o,e.onwrite),e.sync=!1}function w(t,e,i,r){i||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),k(t,e)}function M(t,e){e.bufferProcessing=!0;var i=e.bufferedRequest;if(t._writev&&i&&i.next){var r=e.bufferedRequestCount,n=new Array(r),o=e.corkedRequestsFree;o.entry=i;for(var s=0,a=!0;i;)n[s]=i,i.isBuf||(a=!1),i=i.next,s+=1;n.allBuffers=a,y(t,e,!0,e.length,n,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new h(e),e.bufferedRequestCount=0}else{for(;i;){var u=i.chunk,f=i.encoding,l=i.callback;if(y(t,e,!1,e.objectMode?1:u.length,u,f,l),i=i.next,e.bufferedRequestCount--,e.writing)break}null===i&&(e.lastBufferedRequest=null)}e.bufferedRequest=i,e.bufferProcessing=!1}function _(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function S(t,e){t._final((function(i){e.pendingcb--,i&&t.emit("error",i),e.prefinished=!0,t.emit("prefinish"),k(t,e)}))}function k(t,e){var i=_(e);return i&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(S,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),i}u.inherits(b,l),g.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(g.prototype,"buffer",{get:f.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(b,Symbol.hasInstance,{value:function(t){return!!p.call(this,t)||this===b&&(t&&t._writableState instanceof g)}})):p=function(t){return t instanceof this},b.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},b.prototype.write=function(t,e,i){var r,n=this._writableState,h=!1,s=!n.objectMode&&(r=t,d.isBuffer(r)||r instanceof c);return s&&!d.isBuffer(t)&&(t=function(t){return d.from(t)}(t)),"function"==typeof e&&(i=e,e=null),s?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof i&&(i=v),n.ended?function(t,e){var i=new Error("write after end");t.emit("error",i),o.nextTick(e,i)}(this,i):(s||function(t,e,i,r){var n=!0,h=!1;return null===i?h=new TypeError("May not write null values to stream"):"string"==typeof i||void 0===i||e.objectMode||(h=new TypeError("Invalid non-string/buffer chunk")),h&&(t.emit("error",h),o.nextTick(r,h),n=!1),n}(this,n,t,i))&&(n.pendingcb++,h=function(t,e,i,r,n,o){if(!i){var h=function(t,e,i){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=d.from(e,i));return e}(e,r,n);r!==h&&(i=!0,n="buffer",r=h)}var s=e.objectMode?1:r.length;e.length+=s;var a=e.length<e.highWaterMark;a||(e.needDrain=!0);if(e.writing||e.corked){var u=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:n,isBuf:i,callback:o,next:null},u?u.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else y(t,e,!1,s,r,n,o);return a}(this,n,s,t,e,i)),h},b.prototype.cork=function(){this._writableState.corked++},b.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||M(this,t))},b.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(b.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),b.prototype._write=function(t,e,i){i(new Error("_write() is not implemented"))},b.prototype._writev=null,b.prototype.end=function(t,e,i){var r=this._writableState;"function"==typeof t?(i=t,t=null,e=null):"function"==typeof e&&(i=e,e=null),null!=t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,i){e.ending=!0,k(t,e),i&&(e.finished?o.nextTick(i):t.once("finish",i));e.ended=!0,t.writable=!1}(this,r,i)},Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),b.prototype.destroy=m.destroy,b.prototype._undestroy=m.undestroy,b.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,i(42),i(222).setImmediate,i(21))},function(t,e,i){"use strict";var r=i(47);function n(t){this.options=t,this.type=this.options.type,this.blockSize=8,this._init(),this.buffer=new Array(this.blockSize),this.bufferOff=0}t.exports=n,n.prototype._init=function(){},n.prototype.update=function(t){return 0===t.length?[]:"decrypt"===this.type?this._updateDecrypt(t):this._updateEncrypt(t)},n.prototype._buffer=function(t,e){for(var i=Math.min(this.buffer.length-this.bufferOff,t.length-e),r=0;r<i;r++)this.buffer[this.bufferOff+r]=t[e+r];return this.bufferOff+=i,i},n.prototype._flushBuffer=function(t,e){return this._update(this.buffer,0,t,e),this.bufferOff=0,this.blockSize},n.prototype._updateEncrypt=function(t){var e=0,i=0,r=(this.bufferOff+t.length)/this.blockSize|0,n=new Array(r*this.blockSize);0!==this.bufferOff&&(e+=this._buffer(t,e),this.bufferOff===this.buffer.length&&(i+=this._flushBuffer(n,i)));for(var o=t.length-(t.length-e)%this.blockSize;e<o;e+=this.blockSize)this._update(t,e,n,i),i+=this.blockSize;for(;e<t.length;e++,this.bufferOff++)this.buffer[this.bufferOff]=t[e];return n},n.prototype._updateDecrypt=function(t){for(var e=0,i=0,r=Math.ceil((this.bufferOff+t.length)/this.blockSize)-1,n=new Array(r*this.blockSize);r>0;r--)e+=this._buffer(t,e),i+=this._flushBuffer(n,i);return e+=this._buffer(t,e),n},n.prototype.final=function(t){var e,i;return t&&(e=this.update(t)),i="encrypt"===this.type?this._finalEncrypt():this._finalDecrypt(),e?e.concat(i):i},n.prototype._pad=function(t,e){if(0===e)return!1;for(;e<t.length;)t[e++]=0;return!0},n.prototype._finalEncrypt=function(){if(!this._pad(this.buffer,this.bufferOff))return[];var t=new Array(this.blockSize);return this._update(this.buffer,0,t,0),t},n.prototype._unpad=function(t){return t},n.prototype._finalDecrypt=function(){r.equal(this.bufferOff,this.blockSize,"Not enough data to decrypt");var t=new Array(this.blockSize);return this._flushBuffer(t,0),this._unpad(t)}},function(t,e,i){var r=i(237),n=i(245),o=i(155);e.createCipher=e.Cipher=r.createCipher,e.createCipheriv=e.Cipheriv=r.createCipheriv,e.createDecipher=e.Decipher=n.createDecipher,e.createDecipheriv=e.Decipheriv=n.createDecipheriv,e.listCiphers=e.getCiphers=function(){return Object.keys(o)}},function(t,e,i){var r={ECB:i(238),CBC:i(239),CFB:i(240),CFB8:i(241),CFB1:i(242),OFB:i(243),CTR:i(153),GCM:i(153)},n=i(155);for(var o in n)n[o].module=r[n[o].mode];t.exports=n},function(t,e,i){var r;function n(t){this.rand=t}if(t.exports=function(t){return r||(r=new n(null)),r.generate(t)},t.exports.Rand=n,n.prototype.generate=function(t){return this._rand(t)},n.prototype._rand=function(t){if(this.rand.getBytes)return this.rand.getBytes(t);for(var e=new Uint8Array(t),i=0;i<e.length;i++)e[i]=this.rand.getByte();return e},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?n.prototype._rand=function(t){var e=new Uint8Array(t);return self.crypto.getRandomValues(e),e}:self.msCrypto&&self.msCrypto.getRandomValues?n.prototype._rand=function(t){var e=new Uint8Array(t);return self.msCrypto.getRandomValues(e),e}:"object"==typeof window&&(n.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var o=i(163);if("function"!=typeof o.randomBytes)throw new Error("Not supported");n.prototype._rand=function(t){return o.randomBytes(t)}}catch(t){}},function(t,e,i){(function(e){var r=i(253),n=i(67);function o(t,i){var n=function(t){var e=h(t);return{blinder:e.toRed(r.mont(t.modulus)).redPow(new r(t.publicExponent)).fromRed(),unblinder:e.invm(t.modulus)}}(i),o=i.modulus.byteLength(),s=(r.mont(i.modulus),new r(t).mul(n.blinder).umod(i.modulus)),a=s.toRed(r.mont(i.prime1)),u=s.toRed(r.mont(i.prime2)),f=i.coefficient,l=i.prime1,d=i.prime2,c=a.redPow(i.exponent1),p=u.redPow(i.exponent2);c=c.fromRed(),p=p.fromRed();var m=c.isub(p).imul(f).umod(l);return m.imul(d),p.iadd(m),new e(p.imul(n.unblinder).umod(i.modulus).toArray(!1,o))}function h(t){for(var e=t.modulus.byteLength(),i=new r(n(e));i.cmp(t.modulus)>=0||!i.umod(t.prime1)||!i.umod(t.prime2);)i=new r(n(e));return i}t.exports=o,o.getr=h}).call(this,i(46).Buffer)},function(t,e,i){"use strict";var r=e;r.version=i(254).version,r.utils=i(48),r.rand=i(104),r.curve=i(167),r.curves=i(107),r.ec=i(265),r.eddsa=i(269)},function(t,e,i){"use strict";var r,n=e,o=i(108),h=i(167),s=i(48).assert;function a(t){"short"===t.type?this.curve=new h.short(t):"edwards"===t.type?this.curve=new h.edwards(t):this.curve=new h.mont(t),this.g=this.curve.g,this.n=this.curve.n,this.hash=t.hash,s(this.g.validate(),"Invalid curve"),s(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function u(t,e){Object.defineProperty(n,t,{configurable:!0,enumerable:!0,get:function(){var i=new a(e);return Object.defineProperty(n,t,{configurable:!0,enumerable:!0,value:i}),i}})}n.PresetCurve=a,u("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:o.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),u("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:o.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),u("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:o.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),u("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:o.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),u("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:o.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),u("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["9"]}),u("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{r=i(264)}catch(t){r=void 0}u("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:o.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",r]})},function(t,e,i){var r=e;r.utils=i(50),r.common=i(79),r.sha=i(258),r.ripemd=i(262),r.hmac=i(263),r.sha1=r.sha.sha1,r.sha256=r.sha.sha256,r.sha224=r.sha.sha224,r.sha384=r.sha.sha384,r.sha512=r.sha.sha512,r.ripemd160=r.ripemd.ripemd160},function(t,e,i){"use strict";(function(e){var r,n=i(46),o=n.Buffer,h={};for(r in n)n.hasOwnProperty(r)&&"SlowBuffer"!==r&&"Buffer"!==r&&(h[r]=n[r]);var s=h.Buffer={};for(r in o)o.hasOwnProperty(r)&&"allocUnsafe"!==r&&"allocUnsafeSlow"!==r&&(s[r]=o[r]);if(h.Buffer.prototype=o.prototype,s.from&&s.from!==Uint8Array.from||(s.from=function(t,e,i){if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof t);if(t&&void 0===t.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);return o(t,e,i)}),s.alloc||(s.alloc=function(t,e,i){if("number"!=typeof t)throw new TypeError('The "size" argument must be of type number. Received type '+typeof t);if(t<0||t>=2*(1<<30))throw new RangeError('The value "'+t+'" is invalid for option "size"');var r=o(t);return e&&0!==e.length?"string"==typeof i?r.fill(e,i):r.fill(e):r.fill(0),r}),!h.kStringMaxLength)try{h.kStringMaxLength=e.binding("buffer").kStringMaxLength}catch(t){}h.constants||(h.constants={MAX_LENGTH:h.kMaxLength},h.kStringMaxLength&&(h.constants.MAX_STRING_LENGTH=h.kStringMaxLength)),t.exports=h}).call(this,i(42))},function(t,e,i){"use strict";const r=i(111).Reporter,n=i(80).EncoderBuffer,o=i(80).DecoderBuffer,h=i(47),s=["seq","seqof","set","setof","objid","bool","gentime","utctime","null_","enum","int","objDesc","bitstr","bmpstr","charstr","genstr","graphstr","ia5str","iso646str","numstr","octstr","printstr","t61str","unistr","utf8str","videostr"],a=["key","obj","use","optional","explicit","implicit","def","choice","any","contains"].concat(s);function u(t,e,i){const r={};this._baseState=r,r.name=i,r.enc=t,r.parent=e||null,r.children=null,r.tag=null,r.args=null,r.reverseArgs=null,r.choice=null,r.optional=!1,r.any=!1,r.obj=!1,r.use=null,r.useDecoder=null,r.key=null,r.default=null,r.explicit=null,r.implicit=null,r.contains=null,r.parent||(r.children=[],this._wrap())}t.exports=u;const f=["enc","parent","children","tag","args","reverseArgs","choice","optional","any","obj","use","alteredUse","key","default","explicit","implicit","contains"];u.prototype.clone=function(){const t=this._baseState,e={};f.forEach((function(i){e[i]=t[i]}));const i=new this.constructor(e.parent);return i._baseState=e,i},u.prototype._wrap=function(){const t=this._baseState;a.forEach((function(e){this[e]=function(){const i=new this.constructor(this);return t.children.push(i),i[e].apply(i,arguments)}}),this)},u.prototype._init=function(t){const e=this._baseState;h(null===e.parent),t.call(this),e.children=e.children.filter((function(t){return t._baseState.parent===this}),this),h.equal(e.children.length,1,"Root node can have only one child")},u.prototype._useArgs=function(t){const e=this._baseState,i=t.filter((function(t){return t instanceof this.constructor}),this);t=t.filter((function(t){return!(t instanceof this.constructor)}),this),0!==i.length&&(h(null===e.children),e.children=i,i.forEach((function(t){t._baseState.parent=this}),this)),0!==t.length&&(h(null===e.args),e.args=t,e.reverseArgs=t.map((function(t){if("object"!=typeof t||t.constructor!==Object)return t;const e={};return Object.keys(t).forEach((function(i){i==(0|i)&&(i|=0);const r=t[i];e[r]=i})),e})))},["_peekTag","_decodeTag","_use","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeInt","_decodeBool","_decodeList","_encodeComposite","_encodeStr","_encodeObjid","_encodeTime","_encodeNull","_encodeInt","_encodeBool"].forEach((function(t){u.prototype[t]=function(){const e=this._baseState;throw new Error(t+" not implemented for encoding: "+e.enc)}})),s.forEach((function(t){u.prototype[t]=function(){const e=this._baseState,i=Array.prototype.slice.call(arguments);return h(null===e.tag),e.tag=t,this._useArgs(i),this}})),u.prototype.use=function(t){h(t);const e=this._baseState;return h(null===e.use),e.use=t,this},u.prototype.optional=function(){return this._baseState.optional=!0,this},u.prototype.def=function(t){const e=this._baseState;return h(null===e.default),e.default=t,e.optional=!0,this},u.prototype.explicit=function(t){const e=this._baseState;return h(null===e.explicit&&null===e.implicit),e.explicit=t,this},u.prototype.implicit=function(t){const e=this._baseState;return h(null===e.explicit&&null===e.implicit),e.implicit=t,this},u.prototype.obj=function(){const t=this._baseState,e=Array.prototype.slice.call(arguments);return t.obj=!0,0!==e.length&&this._useArgs(e),this},u.prototype.key=function(t){const e=this._baseState;return h(null===e.key),e.key=t,this},u.prototype.any=function(){return this._baseState.any=!0,this},u.prototype.choice=function(t){const e=this._baseState;return h(null===e.choice),e.choice=t,this._useArgs(Object.keys(t).map((function(e){return t[e]}))),this},u.prototype.contains=function(t){const e=this._baseState;return h(null===e.use),e.contains=t,this},u.prototype._decode=function(t,e){const i=this._baseState;if(null===i.parent)return t.wrapResult(i.children[0]._decode(t,e));let r,n=i.default,h=!0,s=null;if(null!==i.key&&(s=t.enterKey(i.key)),i.optional){let r=null;if(null!==i.explicit?r=i.explicit:null!==i.implicit?r=i.implicit:null!==i.tag&&(r=i.tag),null!==r||i.any){if(h=this._peekTag(t,r,i.any),t.isError(h))return h}else{const r=t.save();try{null===i.choice?this._decodeGeneric(i.tag,t,e):this._decodeChoice(t,e),h=!0}catch(t){h=!1}t.restore(r)}}if(i.obj&&h&&(r=t.enterObject()),h){if(null!==i.explicit){const e=this._decodeTag(t,i.explicit);if(t.isError(e))return e;t=e}const r=t.offset;if(null===i.use&&null===i.choice){let e;i.any&&(e=t.save());const r=this._decodeTag(t,null!==i.implicit?i.implicit:i.tag,i.any);if(t.isError(r))return r;i.any?n=t.raw(e):t=r}if(e&&e.track&&null!==i.tag&&e.track(t.path(),r,t.length,"tagged"),e&&e.track&&null!==i.tag&&e.track(t.path(),t.offset,t.length,"content"),i.any||(n=null===i.choice?this._decodeGeneric(i.tag,t,e):this._decodeChoice(t,e)),t.isError(n))return n;if(i.any||null!==i.choice||null===i.children||i.children.forEach((function(i){i._decode(t,e)})),i.contains&&("octstr"===i.tag||"bitstr"===i.tag)){const r=new o(n);n=this._getUse(i.contains,t._reporterState.obj)._decode(r,e)}}return i.obj&&h&&(n=t.leaveObject(r)),null===i.key||null===n&&!0!==h?null!==s&&t.exitKey(s):t.leaveKey(s,i.key,n),n},u.prototype._decodeGeneric=function(t,e,i){const r=this._baseState;return"seq"===t||"set"===t?null:"seqof"===t||"setof"===t?this._decodeList(e,t,r.args[0],i):/str$/.test(t)?this._decodeStr(e,t,i):"objid"===t&&r.args?this._decodeObjid(e,r.args[0],r.args[1],i):"objid"===t?this._decodeObjid(e,null,null,i):"gentime"===t||"utctime"===t?this._decodeTime(e,t,i):"null_"===t?this._decodeNull(e,i):"bool"===t?this._decodeBool(e,i):"objDesc"===t?this._decodeStr(e,t,i):"int"===t||"enum"===t?this._decodeInt(e,r.args&&r.args[0],i):null!==r.use?this._getUse(r.use,e._reporterState.obj)._decode(e,i):e.error("unknown tag: "+t)},u.prototype._getUse=function(t,e){const i=this._baseState;return i.useDecoder=this._use(t,e),h(null===i.useDecoder._baseState.parent),i.useDecoder=i.useDecoder._baseState.children[0],i.implicit!==i.useDecoder._baseState.implicit&&(i.useDecoder=i.useDecoder.clone(),i.useDecoder._baseState.implicit=i.implicit),i.useDecoder},u.prototype._decodeChoice=function(t,e){const i=this._baseState;let r=null,n=!1;return Object.keys(i.choice).some((function(o){const h=t.save(),s=i.choice[o];try{const i=s._decode(t,e);if(t.isError(i))return!1;r={type:o,value:i},n=!0}catch(e){return t.restore(h),!1}return!0}),this),n?r:t.error("Choice not matched")},u.prototype._createEncoderBuffer=function(t){return new n(t,this.reporter)},u.prototype._encode=function(t,e,i){const r=this._baseState;if(null!==r.default&&r.default===t)return;const n=this._encodeValue(t,e,i);return void 0===n||this._skipDefault(n,e,i)?void 0:n},u.prototype._encodeValue=function(t,e,i){const n=this._baseState;if(null===n.parent)return n.children[0]._encode(t,e||new r);let o=null;if(this.reporter=e,n.optional&&void 0===t){if(null===n.default)return;t=n.default}let h=null,s=!1;if(n.any)o=this._createEncoderBuffer(t);else if(n.choice)o=this._encodeChoice(t,e);else if(n.contains)h=this._getUse(n.contains,i)._encode(t,e),s=!0;else if(n.children)h=n.children.map((function(i){if("null_"===i._baseState.tag)return i._encode(null,e,t);if(null===i._baseState.key)return e.error("Child should have a key");const r=e.enterKey(i._baseState.key);if("object"!=typeof t)return e.error("Child expected, but input is not object");const n=i._encode(t[i._baseState.key],e,t);return e.leaveKey(r),n}),this).filter((function(t){return t})),h=this._createEncoderBuffer(h);else if("seqof"===n.tag||"setof"===n.tag){if(!n.args||1!==n.args.length)return e.error("Too many args for : "+n.tag);if(!Array.isArray(t))return e.error("seqof/setof, but data is not Array");const i=this.clone();i._baseState.implicit=null,h=this._createEncoderBuffer(t.map((function(i){const r=this._baseState;return this._getUse(r.args[0],t)._encode(i,e)}),i))}else null!==n.use?o=this._getUse(n.use,i)._encode(t,e):(h=this._encodePrimitive(n.tag,t),s=!0);if(!n.any&&null===n.choice){const t=null!==n.implicit?n.implicit:n.tag,i=null===n.implicit?"universal":"context";null===t?null===n.use&&e.error("Tag could be omitted only for .use()"):null===n.use&&(o=this._encodeComposite(t,s,i,h))}return null!==n.explicit&&(o=this._encodeComposite(n.explicit,!1,"context",o)),o},u.prototype._encodeChoice=function(t,e){const i=this._baseState,r=i.choice[t.type];return r||h(!1,t.type+" not found in "+JSON.stringify(Object.keys(i.choice))),r._encode(t.value,e)},u.prototype._encodePrimitive=function(t,e){const i=this._baseState;if(/str$/.test(t))return this._encodeStr(e,t);if("objid"===t&&i.args)return this._encodeObjid(e,i.reverseArgs[0],i.args[1]);if("objid"===t)return this._encodeObjid(e,null,null);if("gentime"===t||"utctime"===t)return this._encodeTime(e,t);if("null_"===t)return this._encodeNull();if("int"===t||"enum"===t)return this._encodeInt(e,i.args&&i.reverseArgs[0]);if("bool"===t)return this._encodeBool(e);if("objDesc"===t)return this._encodeStr(e,t);throw new Error("Unsupported tag: "+t)},u.prototype._isNumstr=function(t){return/^[0-9 ]*$/.test(t)},u.prototype._isPrintstr=function(t){return/^[A-Za-z0-9 '()+,-./:=?]*$/.test(t)}},function(t,e,i){"use strict";const r=i(32);function n(t){this._reporterState={obj:null,path:[],options:t||{},errors:[]}}function o(t,e){this.path=t,this.rethrow(e)}e.Reporter=n,n.prototype.isError=function(t){return t instanceof o},n.prototype.save=function(){const t=this._reporterState;return{obj:t.obj,pathLen:t.path.length}},n.prototype.restore=function(t){const e=this._reporterState;e.obj=t.obj,e.path=e.path.slice(0,t.pathLen)},n.prototype.enterKey=function(t){return this._reporterState.path.push(t)},n.prototype.exitKey=function(t){const e=this._reporterState;e.path=e.path.slice(0,t-1)},n.prototype.leaveKey=function(t,e,i){const r=this._reporterState;this.exitKey(t),null!==r.obj&&(r.obj[e]=i)},n.prototype.path=function(){return this._reporterState.path.join("/")},n.prototype.enterObject=function(){const t=this._reporterState,e=t.obj;return t.obj={},e},n.prototype.leaveObject=function(t){const e=this._reporterState,i=e.obj;return e.obj=t,i},n.prototype.error=function(t){let e;const i=this._reporterState,r=t instanceof o;if(e=r?t:new o(i.path.map((function(t){return"["+JSON.stringify(t)+"]"})).join(""),t.message||t,t.stack),!i.options.partial)throw e;return r||i.errors.push(e),e},n.prototype.wrapResult=function(t){const e=this._reporterState;return e.options.partial?{result:this.isError(t)?null:t,errors:e.errors}:t},r(o,Error),o.prototype.rethrow=function(t){if(this.message=t+" at: "+(this.path||"(shallow)"),Error.captureStackTrace&&Error.captureStackTrace(this,o),!this.stack)try{throw new Error(this.message)}catch(t){this.stack=t.stack}return this}},function(t,e,i){"use strict";function r(t){const e={};return Object.keys(t).forEach((function(i){(0|i)==i&&(i|=0);const r=t[i];e[r]=i})),e}e.tagClass={0:"universal",1:"application",2:"context",3:"private"},e.tagClassByName=r(e.tagClass),e.tag={0:"end",1:"bool",2:"int",3:"bitstr",4:"octstr",5:"null_",6:"objid",7:"objDesc",8:"external",9:"real",10:"enum",11:"embed",12:"utf8str",13:"relativeOid",16:"seq",17:"set",18:"numstr",19:"printstr",20:"t61str",21:"videostr",22:"ia5str",23:"utctime",24:"gentime",25:"graphstr",26:"iso646str",27:"genstr",28:"unistr",29:"charstr",30:"bmpstr"},e.tagByName=r(e.tag)},function(t,e,i){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function n(t,e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}function o(t,e,i){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(i=e,e=10),this._init(t||0,e||10,i||"be"))}var h;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{h=i(184).Buffer}catch(t){}function s(t,e,i){for(var r=0,n=Math.min(t.length,i),o=e;o<n;o++){var h=t.charCodeAt(o)-48;r<<=4,r|=h>=49&&h<=54?h-49+10:h>=17&&h<=22?h-17+10:15&h}return r}function a(t,e,i,r){for(var n=0,o=Math.min(t.length,i),h=e;h<o;h++){var s=t.charCodeAt(h)-48;n*=r,n+=s>=49?s-49+10:s>=17?s-17+10:s}return n}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"==typeof t)return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&n++,16===e?this._parseHex(t,n):this._parseBase(t,e,n),"-"===t[0]&&(this.negative=1),this.strip(),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,h,s=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)h=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)h=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var r,n,o=0;for(i=t.length-6,r=0;i>=e;i-=6)n=s(t,i,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);i+6!==e&&(n=s(t,e,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,i){this.words=[0],this.length=1;for(var r=0,n=1;n<=67108863;n*=e)r++;r--,n=n/e|0;for(var o=t.length-i,h=o%r,s=Math.min(o,o-h)+i,u=0,f=i;f<s;f+=r)u=a(t,f,f+r,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==h){var l=1;for(u=a(t,f,t.length,e),f=0;f<h;f++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,i){i.negative=e.negative^t.negative;var r=t.length+e.length|0;i.length=r,r=r-1|0;var n=0|t.words[0],o=0|e.words[0],h=n*o,s=67108863&h,a=h/67108864|0;i.words[0]=s;for(var u=1;u<r;u++){for(var f=a>>>26,l=67108863&a,d=Math.min(u,e.length-1),c=Math.max(0,u-t.length+1);c<=d;c++){var p=u-c|0;f+=(h=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&h}i.words[u]=0|l,a=0|f}return 0!==a?i.words[u]=0|a:i.length--,i.strip()}o.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,h=0;h<this.length;h++){var s=this.words[h],a=(16777215&(s<<n|o)).toString(16);i=0!==(o=s>>>24-n&16777215)||h!==this.length-1?u[6-a.length]+a+i:a+i,(n+=2)>=26&&(n-=26,h--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var d=f[t],c=l[t];i="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(c).toString(t);i=(p=p.idivn(c)).isZero()?m+i:u[d-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return r(void 0!==h),this.toArrayLike(h,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,i){var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var h,s,a="le"===e,u=new t(o),f=this.clone();if(a){for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[s]=h;for(;s<o;s++)u[s]=0}else{for(s=0;s<o-n;s++)u[s]=0;for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[o-s-1]=h}return u},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,i=0;return e>=4096&&(i+=13,e>>>=13),e>=64&&(i+=7,e>>>=7),e>=8&&(i+=4,e>>>=4),e>=2&&(i+=2,e>>>=2),i+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,i=0;return 0==(8191&e)&&(i+=13,e>>>=13),0==(127&e)&&(i+=7,e>>>=7),0==(15&e)&&(i+=4,e>>>=4),0==(3&e)&&(i+=2,e>>>=2),0==(1&e)&&i++,i},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var i=this._zeroBits(this.words[e]);if(t+=i,26!==i)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var i=0;i<e.length;i++)this.words[i]=this.words[i]&t.words[i];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,i;this.length>t.length?(e=this,i=t):(e=t,i=this);for(var r=0;r<i.length;r++)this.words[r]=e.words[r]^i.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},o.prototype.iadd=function(t){var e,i,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(i=this,r=t):(i=t,r=this);for(var n=0,o=0;o<r.length;o++)e=(0|i.words[o])+(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<i.length;o++)e=(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=i.length,0!==n)this.words[this.length]=n,this.length++;else if(i!==this)for(;o<i.length;o++)this.words[o]=i.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var i,r,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(i=this,r=t):(i=t,r=this);for(var o=0,h=0;h<r.length;h++)o=(e=(0|i.words[h])-(0|r.words[h])+o)>>26,this.words[h]=67108863&e;for(;0!==o&&h<i.length;h++)o=(e=(0|i.words[h])+o)>>26,this.words[h]=67108863&e;if(0===o&&h<i.length&&i!==this)for(;h<i.length;h++)this.words[h]=i.words[h];return this.length=Math.max(this.length,h),i!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var c=function(t,e,i){var r,n,o,h=t.words,s=e.words,a=i.words,u=0,f=0|h[0],l=8191&f,d=f>>>13,c=0|h[1],p=8191&c,m=c>>>13,v=0|h[2],g=8191&v,b=v>>>13,y=0|h[3],w=8191&y,M=y>>>13,_=0|h[4],S=8191&_,k=_>>>13,A=0|h[5],E=8191&A,x=A>>>13,B=0|h[6],R=8191&B,I=B>>>13,T=0|h[7],P=8191&T,C=T>>>13,L=0|h[8],q=8191&L,j=L>>>13,O=0|h[9],N=8191&O,D=O>>>13,z=0|s[0],U=8191&z,H=z>>>13,Z=0|s[1],F=8191&Z,K=Z>>>13,W=0|s[2],Y=8191&W,V=W>>>13,X=0|s[3],G=8191&X,J=X>>>13,$=0|s[4],Q=8191&$,tt=$>>>13,et=0|s[5],it=8191&et,rt=et>>>13,nt=0|s[6],ot=8191&nt,ht=nt>>>13,st=0|s[7],at=8191&st,ut=st>>>13,ft=0|s[8],lt=8191&ft,dt=ft>>>13,ct=0|s[9],pt=8191&ct,mt=ct>>>13;i.negative=t.negative^e.negative,i.length=19;var vt=(u+(r=Math.imul(l,U))|0)+((8191&(n=(n=Math.imul(l,H))+Math.imul(d,U)|0))<<13)|0;u=((o=Math.imul(d,H))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(p,U),n=(n=Math.imul(p,H))+Math.imul(m,U)|0,o=Math.imul(m,H);var gt=(u+(r=r+Math.imul(l,F)|0)|0)+((8191&(n=(n=n+Math.imul(l,K)|0)+Math.imul(d,F)|0))<<13)|0;u=((o=o+Math.imul(d,K)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(g,U),n=(n=Math.imul(g,H))+Math.imul(b,U)|0,o=Math.imul(b,H),r=r+Math.imul(p,F)|0,n=(n=n+Math.imul(p,K)|0)+Math.imul(m,F)|0,o=o+Math.imul(m,K)|0;var bt=(u+(r=r+Math.imul(l,Y)|0)|0)+((8191&(n=(n=n+Math.imul(l,V)|0)+Math.imul(d,Y)|0))<<13)|0;u=((o=o+Math.imul(d,V)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(w,U),n=(n=Math.imul(w,H))+Math.imul(M,U)|0,o=Math.imul(M,H),r=r+Math.imul(g,F)|0,n=(n=n+Math.imul(g,K)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,K)|0,r=r+Math.imul(p,Y)|0,n=(n=n+Math.imul(p,V)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,V)|0;var yt=(u+(r=r+Math.imul(l,G)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,G)|0))<<13)|0;u=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(S,U),n=(n=Math.imul(S,H))+Math.imul(k,U)|0,o=Math.imul(k,H),r=r+Math.imul(w,F)|0,n=(n=n+Math.imul(w,K)|0)+Math.imul(M,F)|0,o=o+Math.imul(M,K)|0,r=r+Math.imul(g,Y)|0,n=(n=n+Math.imul(g,V)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,V)|0,r=r+Math.imul(p,G)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,J)|0;var wt=(u+(r=r+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;u=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(E,U),n=(n=Math.imul(E,H))+Math.imul(x,U)|0,o=Math.imul(x,H),r=r+Math.imul(S,F)|0,n=(n=n+Math.imul(S,K)|0)+Math.imul(k,F)|0,o=o+Math.imul(k,K)|0,r=r+Math.imul(w,Y)|0,n=(n=n+Math.imul(w,V)|0)+Math.imul(M,Y)|0,o=o+Math.imul(M,V)|0,r=r+Math.imul(g,G)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,J)|0,r=r+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Mt=(u+(r=r+Math.imul(l,it)|0)|0)+((8191&(n=(n=n+Math.imul(l,rt)|0)+Math.imul(d,it)|0))<<13)|0;u=((o=o+Math.imul(d,rt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(R,U),n=(n=Math.imul(R,H))+Math.imul(I,U)|0,o=Math.imul(I,H),r=r+Math.imul(E,F)|0,n=(n=n+Math.imul(E,K)|0)+Math.imul(x,F)|0,o=o+Math.imul(x,K)|0,r=r+Math.imul(S,Y)|0,n=(n=n+Math.imul(S,V)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,V)|0,r=r+Math.imul(w,G)|0,n=(n=n+Math.imul(w,J)|0)+Math.imul(M,G)|0,o=o+Math.imul(M,J)|0,r=r+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,r=r+Math.imul(p,it)|0,n=(n=n+Math.imul(p,rt)|0)+Math.imul(m,it)|0,o=o+Math.imul(m,rt)|0;var _t=(u+(r=r+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,ht)|0)+Math.imul(d,ot)|0))<<13)|0;u=((o=o+Math.imul(d,ht)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(P,U),n=(n=Math.imul(P,H))+Math.imul(C,U)|0,o=Math.imul(C,H),r=r+Math.imul(R,F)|0,n=(n=n+Math.imul(R,K)|0)+Math.imul(I,F)|0,o=o+Math.imul(I,K)|0,r=r+Math.imul(E,Y)|0,n=(n=n+Math.imul(E,V)|0)+Math.imul(x,Y)|0,o=o+Math.imul(x,V)|0,r=r+Math.imul(S,G)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,J)|0,r=r+Math.imul(w,Q)|0,n=(n=n+Math.imul(w,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,r=r+Math.imul(g,it)|0,n=(n=n+Math.imul(g,rt)|0)+Math.imul(b,it)|0,o=o+Math.imul(b,rt)|0,r=r+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,ht)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,ht)|0;var St=(u+(r=r+Math.imul(l,at)|0)|0)+((8191&(n=(n=n+Math.imul(l,ut)|0)+Math.imul(d,at)|0))<<13)|0;u=((o=o+Math.imul(d,ut)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(q,U),n=(n=Math.imul(q,H))+Math.imul(j,U)|0,o=Math.imul(j,H),r=r+Math.imul(P,F)|0,n=(n=n+Math.imul(P,K)|0)+Math.imul(C,F)|0,o=o+Math.imul(C,K)|0,r=r+Math.imul(R,Y)|0,n=(n=n+Math.imul(R,V)|0)+Math.imul(I,Y)|0,o=o+Math.imul(I,V)|0,r=r+Math.imul(E,G)|0,n=(n=n+Math.imul(E,J)|0)+Math.imul(x,G)|0,o=o+Math.imul(x,J)|0,r=r+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,r=r+Math.imul(w,it)|0,n=(n=n+Math.imul(w,rt)|0)+Math.imul(M,it)|0,o=o+Math.imul(M,rt)|0,r=r+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,ht)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,ht)|0,r=r+Math.imul(p,at)|0,n=(n=n+Math.imul(p,ut)|0)+Math.imul(m,at)|0,o=o+Math.imul(m,ut)|0;var kt=(u+(r=r+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;u=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(N,U),n=(n=Math.imul(N,H))+Math.imul(D,U)|0,o=Math.imul(D,H),r=r+Math.imul(q,F)|0,n=(n=n+Math.imul(q,K)|0)+Math.imul(j,F)|0,o=o+Math.imul(j,K)|0,r=r+Math.imul(P,Y)|0,n=(n=n+Math.imul(P,V)|0)+Math.imul(C,Y)|0,o=o+Math.imul(C,V)|0,r=r+Math.imul(R,G)|0,n=(n=n+Math.imul(R,J)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,J)|0,r=r+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,r=r+Math.imul(S,it)|0,n=(n=n+Math.imul(S,rt)|0)+Math.imul(k,it)|0,o=o+Math.imul(k,rt)|0,r=r+Math.imul(w,ot)|0,n=(n=n+Math.imul(w,ht)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ht)|0,r=r+Math.imul(g,at)|0,n=(n=n+Math.imul(g,ut)|0)+Math.imul(b,at)|0,o=o+Math.imul(b,ut)|0,r=r+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(u+(r=r+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;u=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(N,F),n=(n=Math.imul(N,K))+Math.imul(D,F)|0,o=Math.imul(D,K),r=r+Math.imul(q,Y)|0,n=(n=n+Math.imul(q,V)|0)+Math.imul(j,Y)|0,o=o+Math.imul(j,V)|0,r=r+Math.imul(P,G)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(C,G)|0,o=o+Math.imul(C,J)|0,r=r+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,r=r+Math.imul(E,it)|0,n=(n=n+Math.imul(E,rt)|0)+Math.imul(x,it)|0,o=o+Math.imul(x,rt)|0,r=r+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,ht)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ht)|0,r=r+Math.imul(w,at)|0,n=(n=n+Math.imul(w,ut)|0)+Math.imul(M,at)|0,o=o+Math.imul(M,ut)|0,r=r+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(u+(r=r+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;u=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(N,Y),n=(n=Math.imul(N,V))+Math.imul(D,Y)|0,o=Math.imul(D,V),r=r+Math.imul(q,G)|0,n=(n=n+Math.imul(q,J)|0)+Math.imul(j,G)|0,o=o+Math.imul(j,J)|0,r=r+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(C,Q)|0,o=o+Math.imul(C,tt)|0,r=r+Math.imul(R,it)|0,n=(n=n+Math.imul(R,rt)|0)+Math.imul(I,it)|0,o=o+Math.imul(I,rt)|0,r=r+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,ht)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,ht)|0,r=r+Math.imul(S,at)|0,n=(n=n+Math.imul(S,ut)|0)+Math.imul(k,at)|0,o=o+Math.imul(k,ut)|0,r=r+Math.imul(w,lt)|0,n=(n=n+Math.imul(w,dt)|0)+Math.imul(M,lt)|0,o=o+Math.imul(M,dt)|0;var xt=(u+(r=r+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(b,pt)|0))<<13)|0;u=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(N,G),n=(n=Math.imul(N,J))+Math.imul(D,G)|0,o=Math.imul(D,J),r=r+Math.imul(q,Q)|0,n=(n=n+Math.imul(q,tt)|0)+Math.imul(j,Q)|0,o=o+Math.imul(j,tt)|0,r=r+Math.imul(P,it)|0,n=(n=n+Math.imul(P,rt)|0)+Math.imul(C,it)|0,o=o+Math.imul(C,rt)|0,r=r+Math.imul(R,ot)|0,n=(n=n+Math.imul(R,ht)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,ht)|0,r=r+Math.imul(E,at)|0,n=(n=n+Math.imul(E,ut)|0)+Math.imul(x,at)|0,o=o+Math.imul(x,ut)|0,r=r+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,dt)|0;var Bt=(u+(r=r+Math.imul(w,pt)|0)|0)+((8191&(n=(n=n+Math.imul(w,mt)|0)+Math.imul(M,pt)|0))<<13)|0;u=((o=o+Math.imul(M,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(N,Q),n=(n=Math.imul(N,tt))+Math.imul(D,Q)|0,o=Math.imul(D,tt),r=r+Math.imul(q,it)|0,n=(n=n+Math.imul(q,rt)|0)+Math.imul(j,it)|0,o=o+Math.imul(j,rt)|0,r=r+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,ht)|0)+Math.imul(C,ot)|0,o=o+Math.imul(C,ht)|0,r=r+Math.imul(R,at)|0,n=(n=n+Math.imul(R,ut)|0)+Math.imul(I,at)|0,o=o+Math.imul(I,ut)|0,r=r+Math.imul(E,lt)|0,n=(n=n+Math.imul(E,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(u+(r=r+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(k,pt)|0))<<13)|0;u=((o=o+Math.imul(k,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,r=Math.imul(N,it),n=(n=Math.imul(N,rt))+Math.imul(D,it)|0,o=Math.imul(D,rt),r=r+Math.imul(q,ot)|0,n=(n=n+Math.imul(q,ht)|0)+Math.imul(j,ot)|0,o=o+Math.imul(j,ht)|0,r=r+Math.imul(P,at)|0,n=(n=n+Math.imul(P,ut)|0)+Math.imul(C,at)|0,o=o+Math.imul(C,ut)|0,r=r+Math.imul(R,lt)|0,n=(n=n+Math.imul(R,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(u+(r=r+Math.imul(E,pt)|0)|0)+((8191&(n=(n=n+Math.imul(E,mt)|0)+Math.imul(x,pt)|0))<<13)|0;u=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(N,ot),n=(n=Math.imul(N,ht))+Math.imul(D,ot)|0,o=Math.imul(D,ht),r=r+Math.imul(q,at)|0,n=(n=n+Math.imul(q,ut)|0)+Math.imul(j,at)|0,o=o+Math.imul(j,ut)|0,r=r+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(C,lt)|0,o=o+Math.imul(C,dt)|0;var Tt=(u+(r=r+Math.imul(R,pt)|0)|0)+((8191&(n=(n=n+Math.imul(R,mt)|0)+Math.imul(I,pt)|0))<<13)|0;u=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(N,at),n=(n=Math.imul(N,ut))+Math.imul(D,at)|0,o=Math.imul(D,ut),r=r+Math.imul(q,lt)|0,n=(n=n+Math.imul(q,dt)|0)+Math.imul(j,lt)|0,o=o+Math.imul(j,dt)|0;var Pt=(u+(r=r+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(C,pt)|0))<<13)|0;u=((o=o+Math.imul(C,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,r=Math.imul(N,lt),n=(n=Math.imul(N,dt))+Math.imul(D,lt)|0,o=Math.imul(D,dt);var Ct=(u+(r=r+Math.imul(q,pt)|0)|0)+((8191&(n=(n=n+Math.imul(q,mt)|0)+Math.imul(j,pt)|0))<<13)|0;u=((o=o+Math.imul(j,mt)|0)+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863;var Lt=(u+(r=Math.imul(N,pt))|0)+((8191&(n=(n=Math.imul(N,mt))+Math.imul(D,pt)|0))<<13)|0;return u=((o=Math.imul(D,mt))+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,a[0]=vt,a[1]=gt,a[2]=bt,a[3]=yt,a[4]=wt,a[5]=Mt,a[6]=_t,a[7]=St,a[8]=kt,a[9]=At,a[10]=Et,a[11]=xt,a[12]=Bt,a[13]=Rt,a[14]=It,a[15]=Tt,a[16]=Pt,a[17]=Ct,a[18]=Lt,0!==u&&(a[19]=u,i.length++),i};function p(t,e,i){return(new m).mulp(t,e,i)}function m(t,e){this.x=t,this.y=e}Math.imul||(c=d),o.prototype.mulTo=function(t,e){var i=this.length+t.length;return 10===this.length&&10===t.length?c(this,t,e):i<63?d(this,t,e):i<1024?function(t,e,i){i.negative=e.negative^t.negative,i.length=t.length+e.length;for(var r=0,n=0,o=0;o<i.length-1;o++){var h=n;n=0;for(var s=67108863&r,a=Math.min(o,e.length-1),u=Math.max(0,o-t.length+1);u<=a;u++){var f=o-u,l=(0|t.words[f])*(0|e.words[u]),d=67108863&l;s=67108863&(d=d+s|0),n+=(h=(h=h+(l/67108864|0)|0)+(d>>>26)|0)>>>26,h&=67108863}i.words[o]=s,r=h,h=n}return 0!==r?i.words[o]=r:i.length--,i.strip()}(this,t,e):p(this,t,e)},m.prototype.makeRBT=function(t){for(var e=new Array(t),i=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,i,t);return e},m.prototype.revBin=function(t,e,i){if(0===t||t===i-1)return t;for(var r=0,n=0;n<e;n++)r|=(1&t)<<e-n-1,t>>=1;return r},m.prototype.permute=function(t,e,i,r,n,o){for(var h=0;h<o;h++)r[h]=e[t[h]],n[h]=i[t[h]]},m.prototype.transform=function(t,e,i,r,n,o){this.permute(o,t,e,i,r,n);for(var h=1;h<n;h<<=1)for(var s=h<<1,a=Math.cos(2*Math.PI/s),u=Math.sin(2*Math.PI/s),f=0;f<n;f+=s)for(var l=a,d=u,c=0;c<h;c++){var p=i[f+c],m=r[f+c],v=i[f+c+h],g=r[f+c+h],b=l*v-d*g;g=l*g+d*v,v=b,i[f+c]=p+v,r[f+c]=m+g,i[f+c+h]=p-v,r[f+c+h]=m-g,c!==s&&(b=a*l-u*d,d=a*d+u*l,l=b)}},m.prototype.guessLen13b=function(t,e){var i=1|Math.max(e,t),r=1&i,n=0;for(i=i/2|0;i;i>>>=1)n++;return 1<<n+1+r},m.prototype.conjugate=function(t,e,i){if(!(i<=1))for(var r=0;r<i/2;r++){var n=t[r];t[r]=t[i-r-1],t[i-r-1]=n,n=e[r],e[r]=-e[i-r-1],e[i-r-1]=-n}},m.prototype.normalize13b=function(t,e){for(var i=0,r=0;r<e/2;r++){var n=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+i;t[r]=67108863&n,i=n<67108864?0:n/67108864|0}return t},m.prototype.convert13b=function(t,e,i,n){for(var o=0,h=0;h<e;h++)o+=0|t[h],i[2*h]=8191&o,o>>>=13,i[2*h+1]=8191&o,o>>>=13;for(h=2*e;h<n;++h)i[h]=0;r(0===o),r(0==(-8192&o))},m.prototype.stub=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=0;return e},m.prototype.mulp=function(t,e,i){var r=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(r),o=this.stub(r),h=new Array(r),s=new Array(r),a=new Array(r),u=new Array(r),f=new Array(r),l=new Array(r),d=i.words;d.length=r,this.convert13b(t.words,t.length,h,r),this.convert13b(e.words,e.length,u,r),this.transform(h,o,s,a,r,n),this.transform(u,o,f,l,r,n);for(var c=0;c<r;c++){var p=s[c]*f[c]-a[c]*l[c];a[c]=s[c]*l[c]+a[c]*f[c],s[c]=p}return this.conjugate(s,a,r),this.transform(s,a,d,o,r,n),this.conjugate(d,o,r),this.normalize13b(d,r),i.negative=t.negative^e.negative,i.length=t.length+e.length,i.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),p(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,o=(67108863&n)+(67108863&e);e>>=26,e+=n/67108864|0,e+=o>>>26,this.words[i]=67108863&o}return 0!==e&&(this.words[i]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),i=0;i<e.length;i++){var r=i/26|0,n=i%26;e[i]=(t.words[r]&1<<n)>>>n}return e}(t);if(0===e.length)return new o(1);for(var i=this,r=0;r<e.length&&0===e[r];r++,i=i.sqr());if(++r<e.length)for(var n=i.sqr();r<e.length;r++,n=n.sqr())0!==e[r]&&(i=i.mul(n));return i},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var h=0;for(e=0;e<this.length;e++){var s=this.words[e]&o,a=(0|this.words[e])-s<<i;this.words[e]=a|h,h=s>>>26-i}h&&(this.words[e]=h,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this.strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,h=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,a=i;if(n-=h,n=Math.max(0,n),a){for(var u=0;u<h;u++)a.words[u]=this.words[u];a.length=h}if(0===h);else if(this.length>h)for(this.length-=h,u=0;u<this.length;u++)this.words[u]=this.words[u+h];else this.words[0]=0,this.length=1;var f=0;for(u=this.length-1;u>=0&&(0!==f||u>=n);u--){var l=0|this.words[u];this.words[u]=f<<26-o|l>>>o,f=l&s}return a&&0!==f&&(a.words[a.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i)&&!!(this.words[i]&n)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,i){var n,o,h=t.length+i;this._expand(h);var s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+s;var a=(0|t.words[n])*e;s=((o-=67108863&a)>>26)-(a/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)s=(o=(0|this.words[n+i])+s)>>26,this.words[n+i]=67108863&o;if(0===s)return this.strip();for(r(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var i=(this.length,t.length),r=this.clone(),n=t,h=0|n.words[n.length-1];0!==(i=26-this._countBits(h))&&(n=n.ushln(i),r.iushln(i),h=0|n.words[n.length-1]);var s,a=r.length-n.length;if("mod"!==e){(s=new o(null)).length=a+1,s.words=new Array(s.length);for(var u=0;u<s.length;u++)s.words[u]=0}var f=r.clone()._ishlnsubmul(n,1,a);0===f.negative&&(r=f,s&&(s.words[a]=1));for(var l=a-1;l>=0;l--){var d=67108864*(0|r.words[n.length+l])+(0|r.words[n.length+l-1]);for(d=Math.min(d/h|0,67108863),r._ishlnsubmul(n,d,l);0!==r.negative;)d--,r.negative=0,r._ishlnsubmul(n,1,l),r.isZero()||(r.negative^=1);s&&(s.words[l]=d)}return s&&s.strip(),r.strip(),"div"!==e&&0!==i&&r.iushrn(i),{div:s||null,mod:r}},o.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(n=s.div.neg()),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.iadd(t)),{div:n,mod:h}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.isub(t)),{div:s.div,mod:h}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var n,h,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var i=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),n=t.andln(1),o=i.cmp(r);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(e*i+(0|this.words[n]))%t;return i},o.prototype.idivn=function(t){r(t<=67108863);for(var e=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*e;this.words[i]=n/t|0,e=n%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n=new o(1),h=new o(0),s=new o(0),a=new o(1),u=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++u;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(n.isOdd()||h.isOdd())&&(n.iadd(f),h.isub(l)),n.iushrn(1),h.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(f),a.isub(l)),s.iushrn(1),a.iushrn(1);e.cmp(i)>=0?(e.isub(i),n.isub(s),h.isub(a)):(i.isub(e),s.isub(n),a.isub(h))}return{a:s,b:a,gcd:i.iushln(u)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n,h=new o(1),s=new o(0),a=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var u=0,f=1;0==(e.words[0]&f)&&u<26;++u,f<<=1);if(u>0)for(e.iushrn(u);u-- >0;)h.isOdd()&&h.iadd(a),h.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(i)>=0?(e.isub(i),h.isub(s)):(i.isub(e),s.isub(h))}return(n=0===e.cmpn(1)?h:s).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),i=t.clone();e.negative=0,i.negative=0;for(var r=0;e.isEven()&&i.isEven();r++)e.iushrn(1),i.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;i.isEven();)i.iushrn(1);var n=e.cmp(i);if(n<0){var o=e;e=i,i=o}else if(0===n||0===i.cmpn(1))break;e.isub(i)}return i.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,h=i;0!==o&&h<this.length;h++){var s=0|this.words[h];o=(s+=o)>>>26,s&=67108863,this.words[h]=s}return 0!==o&&(this.words[h]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,i=this.length-1;i>=0;i--){var r=0|this.words[i],n=0|t.words[i];if(r!==n){r<n?e=-1:r>n&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new _(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function g(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){g.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function y(){g.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){g.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){g.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function S(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},g.prototype.ireduce=function(t){var e,i=t;do{this.split(i,this.tmp),e=(i=(i=this.imulK(i)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:i.ucmp(this.p);return 0===r?(i.words[0]=0,i.length=1):r>0?i.isub(this.p):void 0!==i.strip?i.strip():i._strip(),i},g.prototype.split=function(t,e){t.iushrn(this.n,0,e)},g.prototype.imulK=function(t){return t.imul(this.k)},n(b,g),b.prototype.split=function(t,e){for(var i=Math.min(t.length,9),r=0;r<i;r++)e.words[r]=t.words[r];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var n=t.words[9];for(e.words[e.length++]=4194303&n,r=10;r<t.length;r++){var o=0|t.words[r];t.words[r-10]=(4194303&o)<<4|n>>>22,n=o}n>>>=22,t.words[r-10]=n,0===n&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,i=0;i<t.length;i++){var r=0|t.words[i];e+=977*r,t.words[i]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(y,g),n(w,g),n(M,g),M.prototype.imulK=function(t){for(var e=0,i=0;i<t.length;i++){var r=19*(0|t.words[i])+e,n=67108863&r;r>>>=26,t.words[i]=n,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new b;else if("p224"===t)e=new y;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new M}return v[t]=e,e},_.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,e){this._verify2(t,e);var i=t.add(e);return i.cmp(this.m)>=0&&i.isub(this.m),i._forceRed(this)},_.prototype.iadd=function(t,e){this._verify2(t,e);var i=t.iadd(e);return i.cmp(this.m)>=0&&i.isub(this.m),i},_.prototype.sub=function(t,e){this._verify2(t,e);var i=t.sub(e);return i.cmpn(0)<0&&i.iadd(this.m),i._forceRed(this)},_.prototype.isub=function(t,e){this._verify2(t,e);var i=t.isub(e);return i.cmpn(0)<0&&i.iadd(this.m),i},_.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},_.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},_.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new o(1)).iushrn(2);return this.pow(t,i)}for(var n=this.m.subn(1),h=0;!n.isZero()&&0===n.andln(1);)h++,n.iushrn(1);r(!n.isZero());var s=new o(1).toRed(this),a=s.redNeg(),u=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,u).cmp(a);)f.redIAdd(a);for(var l=this.pow(f,n),d=this.pow(t,n.addn(1).iushrn(1)),c=this.pow(t,n),p=h;0!==c.cmp(s);){for(var m=c,v=0;0!==m.cmp(s);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new o(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},_.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},_.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var i=new Array(16);i[0]=new o(1).toRed(this),i[1]=t;for(var r=2;r<i.length;r++)i[r]=this.mul(i[r-1],t);var n=i[0],h=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var u=e.words[r],f=a-1;f>=0;f--){var l=u>>f&1;n!==i[0]&&(n=this.sqr(n)),0!==l||0!==h?(h<<=1,h|=l,(4===++s||0===r&&0===f)&&(n=this.mul(n,i[h]),s=0,h=0)):s=0}a=26}return n},_.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},_.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new S(t)},n(S,_),S.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},S.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},S.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var i=t.imul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},S.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var i=t.mul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),h=n;return n.cmp(this.m)>=0?h=n.isub(this.m):n.cmpn(0)<0&&(h=n.iadd(this.m)),h._forceRed(this)},S.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,i(52)(t))},function(t,e,i){var r,n,o,h,s,a,u,f;t.exports=(f=i(36),n=(r=f).lib,o=n.WordArray,h=n.Hasher,s=r.algo,a=[],u=s.SHA1=h.extend({_doReset:function(){this._hash=new o.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var i=this._hash.words,r=i[0],n=i[1],o=i[2],h=i[3],s=i[4],u=0;u<80;u++){if(u<16)a[u]=0|t[e+u];else{var f=a[u-3]^a[u-8]^a[u-14]^a[u-16];a[u]=f<<1|f>>>31}var l=(r<<5|r>>>27)+s+a[u];l+=u<20?1518500249+(n&o|~n&h):u<40?1859775393+(n^o^h):u<60?(n&o|n&h|o&h)-1894007588:(n^o^h)-899497514,s=h,h=o,o=n<<30|n>>>2,n=r,r=l}i[0]=i[0]+r|0,i[1]=i[1]+n|0,i[2]=i[2]+o|0,i[3]=i[3]+h|0,i[4]=i[4]+s|0},_doFinalize:function(){var t=this._data,e=t.words,i=8*this._nDataBytes,r=8*t.sigBytes;return e[r>>>5]|=128<<24-r%32,e[14+(r+64>>>9<<4)]=Math.floor(i/4294967296),e[15+(r+64>>>9<<4)]=i,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=h.clone.call(this);return t._hash=this._hash.clone(),t}}),r.SHA1=h._createHelper(u),r.HmacSHA1=h._createHmacHelper(u),f.SHA1)},function(t,e,i){var r,n,o,h;t.exports=(r=i(36),o=(n=r).lib.Base,h=n.enc.Utf8,void(n.algo.HMAC=o.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=h.parse(e));var i=t.blockSize,r=4*i;e.sigBytes>r&&(e=t.finalize(e)),e.clamp();for(var n=this._oKey=e.clone(),o=this._iKey=e.clone(),s=n.words,a=o.words,u=0;u<i;u++)s[u]^=1549556828,a[u]^=909522486;n.sigBytes=o.sigBytes=r,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher,i=e.finalize(t);return e.reset(),e.finalize(this._oKey.clone().concat(i))}})))},,,,,,,function(t,e,i){var r;t.exports=(r=i(36),i(87),i(288),i(289),i(71),i(72),i(114),i(186),i(290),i(187),i(291),i(292),i(293),i(115),i(294),i(64),i(40),i(295),i(296),i(297),i(298),i(299),i(300),i(301),i(302),i(303),i(304),i(305),i(306),i(307),i(308),i(309),i(310),r)},function(t,e){var i={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==i.call(t)}},function(t,e,i){"use strict";var r=i(34).Buffer,n=i(125).Transform;function o(t){n.call(this),this._block=r.allocUnsafe(t),this._blockSize=t,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}i(32)(o,n),o.prototype._transform=function(t,e,i){var r=null;try{this.update(t,e)}catch(t){r=t}i(r)},o.prototype._flush=function(t){var e=null;try{this.push(this.digest())}catch(t){e=t}t(e)},o.prototype.update=function(t,e){if(function(t,e){if(!r.isBuffer(t)&&"string"!=typeof t)throw new TypeError(e+" must be a string or a buffer")}(t,"Data"),this._finalized)throw new Error("Digest already called");r.isBuffer(t)||(t=r.from(t,e));for(var i=this._block,n=0;this._blockOffset+t.length-n>=this._blockSize;){for(var o=this._blockOffset;o<this._blockSize;)i[o++]=t[n++];this._update(),this._blockOffset=0}for(;n<t.length;)i[this._blockOffset++]=t[n++];for(var h=0,s=8*t.length;s>0;++h)this._length[h]+=s,(s=this._length[h]/4294967296|0)>0&&(this._length[h]-=4294967296*s);return this},o.prototype._update=function(){throw new Error("_update is not implemented")},o.prototype.digest=function(t){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var e=this._digest();void 0!==t&&(e=e.toString(t)),this._block.fill(0),this._blockOffset=0;for(var i=0;i<4;++i)this._length[i]=0;return e},o.prototype._digest=function(){throw new Error("_digest is not implemented")},t.exports=o},function(t,e,i){(e=t.exports=i(126)).Stream=e,e.Readable=e,e.Writable=i(132),e.Duplex=i(69),e.Transform=i(134),e.PassThrough=i(214),e.finished=i(95),e.pipeline=i(215)},function(t,e,i){"use strict";(function(e,r){var n;t.exports=A,A.ReadableState=k;i(75).EventEmitter;var o=function(t,e){return t.listeners(e).length},h=i(127),s=i(46).Buffer,a=e.Uint8Array||function(){};var u,f=i(128);u=f&&f.debuglog?f.debuglog("stream"):function(){};var l,d,c,p=i(211),m=i(130),v=i(131).getHighWaterMark,g=i(68).codes,b=g.ERR_INVALID_ARG_TYPE,y=g.ERR_STREAM_PUSH_AFTER_EOF,w=g.ERR_METHOD_NOT_IMPLEMENTED,M=g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;i(32)(A,h);var _=m.errorOrDestroy,S=["error","close","destroy","pause","resume"];function k(t,e,r){n=n||i(69),t=t||{},"boolean"!=typeof r&&(r=e instanceof n),this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=v(this,t,"readableHighWaterMark",r),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(l||(l=i(76).StringDecoder),this.decoder=new l(t.encoding),this.encoding=t.encoding)}function A(t){if(n=n||i(69),!(this instanceof A))return new A(t);var e=this instanceof n;this._readableState=new k(t,this,e),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),h.call(this)}function E(t,e,i,r,n){u("readableAddChunk",e);var o,h=t._readableState;if(null===e)h.reading=!1,function(t,e){if(u("onEofChunk"),e.ended)return;if(e.decoder){var i=e.decoder.end();i&&i.length&&(e.buffer.push(i),e.length+=e.objectMode?1:i.length)}e.ended=!0,e.sync?R(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,I(t)))}(t,h);else if(n||(o=function(t,e){var i;r=e,s.isBuffer(r)||r instanceof a||"string"==typeof e||void 0===e||t.objectMode||(i=new b("chunk",["string","Buffer","Uint8Array"],e));var r;return i}(h,e)),o)_(t,o);else if(h.objectMode||e&&e.length>0)if("string"==typeof e||h.objectMode||Object.getPrototypeOf(e)===s.prototype||(e=function(t){return s.from(t)}(e)),r)h.endEmitted?_(t,new M):x(t,h,e,!0);else if(h.ended)_(t,new y);else{if(h.destroyed)return!1;h.reading=!1,h.decoder&&!i?(e=h.decoder.write(e),h.objectMode||0!==e.length?x(t,h,e,!1):T(t,h)):x(t,h,e,!1)}else r||(h.reading=!1,T(t,h));return!h.ended&&(h.length<h.highWaterMark||0===h.length)}function x(t,e,i,r){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",i)):(e.length+=e.objectMode?1:i.length,r?e.buffer.unshift(i):e.buffer.push(i),e.needReadable&&R(t)),T(t,e)}Object.defineProperty(A.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),A.prototype.destroy=m.destroy,A.prototype._undestroy=m.undestroy,A.prototype._destroy=function(t,e){e(t)},A.prototype.push=function(t,e){var i,r=this._readableState;return r.objectMode?i=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=s.from(t,e),e=""),i=!0),E(this,t,e,!1,i)},A.prototype.unshift=function(t){return E(this,t,null,!0,!1)},A.prototype.isPaused=function(){return!1===this._readableState.flowing},A.prototype.setEncoding=function(t){l||(l=i(76).StringDecoder);var e=new l(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;for(var r=this._readableState.buffer.head,n="";null!==r;)n+=e.write(r.data),r=r.next;return this._readableState.buffer.clear(),""!==n&&this._readableState.buffer.push(n),this._readableState.length=n.length,this};function B(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=1073741824?t=1073741824:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function R(t){var e=t._readableState;u("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(u("emitReadable",e.flowing),e.emittedReadable=!0,r.nextTick(I,t))}function I(t){var e=t._readableState;u("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,j(t)}function T(t,e){e.readingMore||(e.readingMore=!0,r.nextTick(P,t,e))}function P(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var i=e.length;if(u("maybeReadMore read 0"),t.read(0),i===e.length)break}e.readingMore=!1}function C(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function L(t){u("readable nexttick read 0"),t.read(0)}function q(t,e){u("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),j(t),e.flowing&&!e.reading&&t.read(0)}function j(t){var e=t._readableState;for(u("flow",e.flowing);e.flowing&&null!==t.read(););}function O(t,e){return 0===e.length?null:(e.objectMode?i=e.buffer.shift():!t||t>=e.length?(i=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):i=e.buffer.consume(t,e.decoder),i);var i}function N(t){var e=t._readableState;u("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,r.nextTick(D,e,t))}function D(t,e){if(u("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var i=e._writableState;(!i||i.autoDestroy&&i.finished)&&e.destroy()}}function z(t,e){for(var i=0,r=t.length;i<r;i++)if(t[i]===e)return i;return-1}A.prototype.read=function(t){u("read",t),t=parseInt(t,10);var e=this._readableState,i=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return u("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?N(this):R(this),null;if(0===(t=B(t,e))&&e.ended)return 0===e.length&&N(this),null;var r,n=e.needReadable;return u("need readable",n),(0===e.length||e.length-t<e.highWaterMark)&&u("length less than watermark",n=!0),e.ended||e.reading?u("reading or ended",n=!1):n&&(u("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=B(i,e))),null===(r=t>0?O(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),i!==t&&e.ended&&N(this)),null!==r&&this.emit("data",r),r},A.prototype._read=function(t){_(this,new w("_read()"))},A.prototype.pipe=function(t,e){var i=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=t;break;case 1:n.pipes=[n.pipes,t];break;default:n.pipes.push(t)}n.pipesCount+=1,u("pipe count=%d opts=%j",n.pipesCount,e);var h=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?a:v;function s(e,r){u("onunpipe"),e===i&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,u("cleanup"),t.removeListener("close",p),t.removeListener("finish",m),t.removeListener("drain",f),t.removeListener("error",c),t.removeListener("unpipe",s),i.removeListener("end",a),i.removeListener("end",v),i.removeListener("data",d),l=!0,!n.awaitDrain||t._writableState&&!t._writableState.needDrain||f())}function a(){u("onend"),t.end()}n.endEmitted?r.nextTick(h):i.once("end",h),t.on("unpipe",s);var f=function(t){return function(){var e=t._readableState;u("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&o(t,"data")&&(e.flowing=!0,j(t))}}(i);t.on("drain",f);var l=!1;function d(e){u("ondata");var r=t.write(e);u("dest.write",r),!1===r&&((1===n.pipesCount&&n.pipes===t||n.pipesCount>1&&-1!==z(n.pipes,t))&&!l&&(u("false write response, pause",n.awaitDrain),n.awaitDrain++),i.pause())}function c(e){u("onerror",e),v(),t.removeListener("error",c),0===o(t,"error")&&_(t,e)}function p(){t.removeListener("finish",m),v()}function m(){u("onfinish"),t.removeListener("close",p),v()}function v(){u("unpipe"),i.unpipe(t)}return i.on("data",d),function(t,e,i){if("function"==typeof t.prependListener)return t.prependListener(e,i);t._events&&t._events[e]?Array.isArray(t._events[e])?t._events[e].unshift(i):t._events[e]=[i,t._events[e]]:t.on(e,i)}(t,"error",c),t.once("close",p),t.once("finish",m),t.emit("pipe",i),n.flowing||(u("pipe resume"),i.resume()),t},A.prototype.unpipe=function(t){var e=this._readableState,i={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,i)),this;if(!t){var r=e.pipes,n=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<n;o++)r[o].emit("unpipe",this,{hasUnpiped:!1});return this}var h=z(e.pipes,t);return-1===h||(e.pipes.splice(h,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,i)),this},A.prototype.on=function(t,e){var i=h.prototype.on.call(this,t,e),n=this._readableState;return"data"===t?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===t&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,u("on readable",n.length,n.reading),n.length?R(this):n.reading||r.nextTick(L,this))),i},A.prototype.addListener=A.prototype.on,A.prototype.removeListener=function(t,e){var i=h.prototype.removeListener.call(this,t,e);return"readable"===t&&r.nextTick(C,this),i},A.prototype.removeAllListeners=function(t){var e=h.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||r.nextTick(C,this),e},A.prototype.resume=function(){var t=this._readableState;return t.flowing||(u("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,r.nextTick(q,t,e))}(this,t)),t.paused=!1,this},A.prototype.pause=function(){return u("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(u("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},A.prototype.wrap=function(t){var e=this,i=this._readableState,r=!1;for(var n in t.on("end",(function(){if(u("wrapped end"),i.decoder&&!i.ended){var t=i.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(n){(u("wrapped data"),i.decoder&&(n=i.decoder.write(n)),i.objectMode&&null==n)||(i.objectMode||n&&n.length)&&(e.push(n)||(r=!0,t.pause()))})),t)void 0===this[n]&&"function"==typeof t[n]&&(this[n]=function(e){return function(){return t[e].apply(t,arguments)}}(n));for(var o=0;o<S.length;o++)t.on(S[o],this.emit.bind(this,S[o]));return this._read=function(e){u("wrapped _read",e),r&&(r=!1,t.resume())},this},"function"==typeof Symbol&&(A.prototype[Symbol.asyncIterator]=function(){return void 0===d&&(d=i(212)),d(this)}),Object.defineProperty(A.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(A.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(A.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),A._fromList=O,Object.defineProperty(A.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(A.from=function(t,e){return void 0===c&&(c=i(213)),c(A,t,e)})}).call(this,i(21),i(42))},function(t,e,i){t.exports=i(75).EventEmitter},,,function(t,e,i){"use strict";(function(e){function i(t,e){n(t,e),r(t)}function r(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function n(t,e){t.emit("error",e)}t.exports={destroy:function(t,o){var h=this,s=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return s||a?(o?o(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,e.nextTick(n,this,t)):e.nextTick(n,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!o&&t?h._writableState?h._writableState.errorEmitted?e.nextTick(r,h):(h._writableState.errorEmitted=!0,e.nextTick(i,h,t)):e.nextTick(i,h,t):o?(e.nextTick(r,h),o(t)):e.nextTick(r,h)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var i=t._readableState,r=t._writableState;i&&i.autoDestroy||r&&r.autoDestroy?t.destroy(e):t.emit("error",e)}}}).call(this,i(42))},function(t,e,i){"use strict";var r=i(68).codes.ERR_INVALID_OPT_VALUE;t.exports={getHighWaterMark:function(t,e,i,n){var o=function(t,e,i){return null!=t.highWaterMark?t.highWaterMark:e?t[i]:null}(e,n,i);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new r(n?i:"highWaterMark",o);return Math.floor(o)}return t.objectMode?16:16384}}},function(t,e,i){"use strict";(function(e,r){function n(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,i){var r=t.entry;t.entry=null;for(;r;){var n=r.callback;e.pendingcb--,n(i),r=r.next}e.corkedRequestsFree.next=t}(e,t)}}var o;t.exports=A,A.WritableState=k;var h={deprecate:i(133)},s=i(127),a=i(46).Buffer,u=e.Uint8Array||function(){};var f,l=i(130),d=i(131).getHighWaterMark,c=i(68).codes,p=c.ERR_INVALID_ARG_TYPE,m=c.ERR_METHOD_NOT_IMPLEMENTED,v=c.ERR_MULTIPLE_CALLBACK,g=c.ERR_STREAM_CANNOT_PIPE,b=c.ERR_STREAM_DESTROYED,y=c.ERR_STREAM_NULL_VALUES,w=c.ERR_STREAM_WRITE_AFTER_END,M=c.ERR_UNKNOWN_ENCODING,_=l.errorOrDestroy;function S(){}function k(t,e,h){o=o||i(69),t=t||{},"boolean"!=typeof h&&(h=e instanceof o),this.objectMode=!!t.objectMode,h&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=d(this,t,"writableHighWaterMark",h),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var s=!1===t.decodeStrings;this.decodeStrings=!s,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var i=t._writableState,n=i.sync,o=i.writecb;if("function"!=typeof o)throw new v;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(i),e)!function(t,e,i,n,o){--e.pendingcb,i?(r.nextTick(o,n),r.nextTick(T,t,e),t._writableState.errorEmitted=!0,_(t,n)):(o(n),t._writableState.errorEmitted=!0,_(t,n),T(t,e))}(t,i,n,e,o);else{var h=R(i)||t.destroyed;h||i.corked||i.bufferProcessing||!i.bufferedRequest||B(t,i),n?r.nextTick(x,t,i,h,o):x(t,i,h,o)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new n(this)}function A(t){var e=this instanceof(o=o||i(69));if(!e&&!f.call(A,this))return new A(t);this._writableState=new k(t,this,e),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),s.call(this)}function E(t,e,i,r,n,o,h){e.writelen=r,e.writecb=h,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new b("write")):i?t._writev(n,e.onwrite):t._write(n,o,e.onwrite),e.sync=!1}function x(t,e,i,r){i||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),T(t,e)}function B(t,e){e.bufferProcessing=!0;var i=e.bufferedRequest;if(t._writev&&i&&i.next){var r=e.bufferedRequestCount,o=new Array(r),h=e.corkedRequestsFree;h.entry=i;for(var s=0,a=!0;i;)o[s]=i,i.isBuf||(a=!1),i=i.next,s+=1;o.allBuffers=a,E(t,e,!0,e.length,o,"",h.finish),e.pendingcb++,e.lastBufferedRequest=null,h.next?(e.corkedRequestsFree=h.next,h.next=null):e.corkedRequestsFree=new n(e),e.bufferedRequestCount=0}else{for(;i;){var u=i.chunk,f=i.encoding,l=i.callback;if(E(t,e,!1,e.objectMode?1:u.length,u,f,l),i=i.next,e.bufferedRequestCount--,e.writing)break}null===i&&(e.lastBufferedRequest=null)}e.bufferedRequest=i,e.bufferProcessing=!1}function R(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function I(t,e){t._final((function(i){e.pendingcb--,i&&_(t,i),e.prefinished=!0,t.emit("prefinish"),T(t,e)}))}function T(t,e){var i=R(e);if(i&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,r.nextTick(I,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var n=t._readableState;(!n||n.autoDestroy&&n.endEmitted)&&t.destroy()}return i}i(32)(A,s),k.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(k.prototype,"buffer",{get:h.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(f=Function.prototype[Symbol.hasInstance],Object.defineProperty(A,Symbol.hasInstance,{value:function(t){return!!f.call(this,t)||this===A&&(t&&t._writableState instanceof k)}})):f=function(t){return t instanceof this},A.prototype.pipe=function(){_(this,new g)},A.prototype.write=function(t,e,i){var n,o=this._writableState,h=!1,s=!o.objectMode&&(n=t,a.isBuffer(n)||n instanceof u);return s&&!a.isBuffer(t)&&(t=function(t){return a.from(t)}(t)),"function"==typeof e&&(i=e,e=null),s?e="buffer":e||(e=o.defaultEncoding),"function"!=typeof i&&(i=S),o.ending?function(t,e){var i=new w;_(t,i),r.nextTick(e,i)}(this,i):(s||function(t,e,i,n){var o;return null===i?o=new y:"string"==typeof i||e.objectMode||(o=new p("chunk",["string","Buffer"],i)),!o||(_(t,o),r.nextTick(n,o),!1)}(this,o,t,i))&&(o.pendingcb++,h=function(t,e,i,r,n,o){if(!i){var h=function(t,e,i){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=a.from(e,i));return e}(e,r,n);r!==h&&(i=!0,n="buffer",r=h)}var s=e.objectMode?1:r.length;e.length+=s;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var f=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:n,isBuf:i,callback:o,next:null},f?f.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else E(t,e,!1,s,r,n,o);return u}(this,o,s,t,e,i)),h},A.prototype.cork=function(){this._writableState.corked++},A.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||B(this,t))},A.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new M(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(A.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(A.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),A.prototype._write=function(t,e,i){i(new m("_write()"))},A.prototype._writev=null,A.prototype.end=function(t,e,i){var n=this._writableState;return"function"==typeof t?(i=t,t=null,e=null):"function"==typeof e&&(i=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||function(t,e,i){e.ending=!0,T(t,e),i&&(e.finished?r.nextTick(i):t.once("finish",i));e.ended=!0,t.writable=!1}(this,n,i),this},Object.defineProperty(A.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(A.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),A.prototype.destroy=l.destroy,A.prototype._undestroy=l.undestroy,A.prototype._destroy=function(t,e){e(t)}}).call(this,i(21),i(42))},function(t,e,i){(function(e){function i(t){try{if(!e.localStorage)return!1}catch(t){return!1}var i=e.localStorage[t];return null!=i&&"true"===String(i).toLowerCase()}t.exports=function(t,e){if(i("noDeprecation"))return t;var r=!1;return function(){if(!r){if(i("throwDeprecation"))throw new Error(e);i("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,i(21))},function(t,e,i){"use strict";t.exports=f;var r=i(68).codes,n=r.ERR_METHOD_NOT_IMPLEMENTED,o=r.ERR_MULTIPLE_CALLBACK,h=r.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=r.ERR_TRANSFORM_WITH_LENGTH_0,a=i(69);function u(t,e){var i=this._transformState;i.transforming=!1;var r=i.writecb;if(null===r)return this.emit("error",new o);i.writechunk=null,i.writecb=null,null!=e&&this.push(e),r(t);var n=this._readableState;n.reading=!1,(n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}function f(t){if(!(this instanceof f))return new f(t);a.call(this,t),this._transformState={afterTransform:u.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",l)}function l(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?d(this,null,null):this._flush((function(e,i){d(t,e,i)}))}function d(t,e,i){if(e)return t.emit("error",e);if(null!=i&&t.push(i),t._writableState.length)throw new s;if(t._transformState.transforming)throw new h;return t.push(null)}i(32)(f,a),f.prototype.push=function(t,e){return this._transformState.needTransform=!1,a.prototype.push.call(this,t,e)},f.prototype._transform=function(t,e,i){i(new n("_transform()"))},f.prototype._write=function(t,e,i){var r=this._transformState;if(r.writecb=i,r.writechunk=t,r.writeencoding=e,!r.transforming){var n=this._readableState;(r.needTransform||n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}},f.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},f.prototype._destroy=function(t,e){a.prototype._destroy.call(this,t,(function(t){e(t)}))}},function(t,e,i){var r=i(32),n=i(70),o=i(34).Buffer,h=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=new Array(64);function a(){this.init(),this._w=s,n.call(this,64,56)}function u(t,e,i){return i^t&(e^i)}function f(t,e,i){return t&e|i&(t|e)}function l(t){return(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10)}function d(t){return(t>>>6|t<<26)^(t>>>11|t<<21)^(t>>>25|t<<7)}function c(t){return(t>>>7|t<<25)^(t>>>18|t<<14)^t>>>3}r(a,n),a.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},a.prototype._update=function(t){for(var e,i=this._w,r=0|this._a,n=0|this._b,o=0|this._c,s=0|this._d,a=0|this._e,p=0|this._f,m=0|this._g,v=0|this._h,g=0;g<16;++g)i[g]=t.readInt32BE(4*g);for(;g<64;++g)i[g]=0|(((e=i[g-2])>>>17|e<<15)^(e>>>19|e<<13)^e>>>10)+i[g-7]+c(i[g-15])+i[g-16];for(var b=0;b<64;++b){var y=v+d(a)+u(a,p,m)+h[b]+i[b]|0,w=l(r)+f(r,n,o)|0;v=m,m=p,p=a,a=s+y|0,s=o,o=n,n=r,r=y+w|0}this._a=r+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=a+this._e|0,this._f=p+this._f|0,this._g=m+this._g|0,this._h=v+this._h|0},a.prototype._hash=function(){var t=o.allocUnsafe(32);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t.writeInt32BE(this._h,28),t},t.exports=a},function(t,e,i){var r=i(32),n=i(70),o=i(34).Buffer,h=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],s=new Array(160);function a(){this.init(),this._w=s,n.call(this,128,112)}function u(t,e,i){return i^t&(e^i)}function f(t,e,i){return t&e|i&(t|e)}function l(t,e){return(t>>>28|e<<4)^(e>>>2|t<<30)^(e>>>7|t<<25)}function d(t,e){return(t>>>14|e<<18)^(t>>>18|e<<14)^(e>>>9|t<<23)}function c(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^t>>>7}function p(t,e){return(t>>>1|e<<31)^(t>>>8|e<<24)^(t>>>7|e<<25)}function m(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^t>>>6}function v(t,e){return(t>>>19|e<<13)^(e>>>29|t<<3)^(t>>>6|e<<26)}function g(t,e){return t>>>0<e>>>0?1:0}r(a,n),a.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},a.prototype._update=function(t){for(var e=this._w,i=0|this._ah,r=0|this._bh,n=0|this._ch,o=0|this._dh,s=0|this._eh,a=0|this._fh,b=0|this._gh,y=0|this._hh,w=0|this._al,M=0|this._bl,_=0|this._cl,S=0|this._dl,k=0|this._el,A=0|this._fl,E=0|this._gl,x=0|this._hl,B=0;B<32;B+=2)e[B]=t.readInt32BE(4*B),e[B+1]=t.readInt32BE(4*B+4);for(;B<160;B+=2){var R=e[B-30],I=e[B-30+1],T=c(R,I),P=p(I,R),C=m(R=e[B-4],I=e[B-4+1]),L=v(I,R),q=e[B-14],j=e[B-14+1],O=e[B-32],N=e[B-32+1],D=P+j|0,z=T+q+g(D,P)|0;z=(z=z+C+g(D=D+L|0,L)|0)+O+g(D=D+N|0,N)|0,e[B]=z,e[B+1]=D}for(var U=0;U<160;U+=2){z=e[U],D=e[U+1];var H=f(i,r,n),Z=f(w,M,_),F=l(i,w),K=l(w,i),W=d(s,k),Y=d(k,s),V=h[U],X=h[U+1],G=u(s,a,b),J=u(k,A,E),$=x+Y|0,Q=y+W+g($,x)|0;Q=(Q=(Q=Q+G+g($=$+J|0,J)|0)+V+g($=$+X|0,X)|0)+z+g($=$+D|0,D)|0;var tt=K+Z|0,et=F+H+g(tt,K)|0;y=b,x=E,b=a,E=A,a=s,A=k,s=o+Q+g(k=S+$|0,S)|0,o=n,S=_,n=r,_=M,r=i,M=w,i=Q+et+g(w=$+tt|0,$)|0}this._al=this._al+w|0,this._bl=this._bl+M|0,this._cl=this._cl+_|0,this._dl=this._dl+S|0,this._el=this._el+k|0,this._fl=this._fl+A|0,this._gl=this._gl+E|0,this._hl=this._hl+x|0,this._ah=this._ah+i+g(this._al,w)|0,this._bh=this._bh+r+g(this._bl,M)|0,this._ch=this._ch+n+g(this._cl,_)|0,this._dh=this._dh+o+g(this._dl,S)|0,this._eh=this._eh+s+g(this._el,k)|0,this._fh=this._fh+a+g(this._fl,A)|0,this._gh=this._gh+b+g(this._gl,E)|0,this._hh=this._hh+y+g(this._hl,x)|0},a.prototype._hash=function(){var t=o.allocUnsafe(64);function e(e,i,r){t.writeInt32BE(e,r),t.writeInt32BE(i,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),e(this._gh,this._gl,48),e(this._hh,this._hl,56),t},t.exports=a},function(t,e,i){"use strict";(function(e,r){var n=i(82);t.exports=y;var o,h=i(123);y.ReadableState=b;i(75).EventEmitter;var s=function(t,e){return t.listeners(e).length},a=i(138),u=i(99).Buffer,f=e.Uint8Array||function(){};var l=Object.create(i(77));l.inherits=i(32);var d=i(139),c=void 0;c=d&&d.debuglog?d.debuglog("stream"):function(){};var p,m=i(221),v=i(141);l.inherits(y,a);var g=["error","close","destroy","pause","resume"];function b(t,e){t=t||{};var r=e instanceof(o=o||i(63));this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var n=t.highWaterMark,h=t.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=n||0===n?n:r&&(h||0===h)?h:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new m,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(p||(p=i(76).StringDecoder),this.decoder=new p(t.encoding),this.encoding=t.encoding)}function y(t){if(o=o||i(63),!(this instanceof y))return new y(t);this._readableState=new b(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),a.call(this)}function w(t,e,i,r,n){var o,h=t._readableState;null===e?(h.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var i=e.decoder.end();i&&i.length&&(e.buffer.push(i),e.length+=e.objectMode?1:i.length)}e.ended=!0,S(t)}(t,h)):(n||(o=function(t,e){var i;r=e,u.isBuffer(r)||r instanceof f||"string"==typeof e||void 0===e||t.objectMode||(i=new TypeError("Invalid non-string/buffer chunk"));var r;return i}(h,e)),o?t.emit("error",o):h.objectMode||e&&e.length>0?("string"==typeof e||h.objectMode||Object.getPrototypeOf(e)===u.prototype||(e=function(t){return u.from(t)}(e)),r?h.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):M(t,h,e,!0):h.ended?t.emit("error",new Error("stream.push() after EOF")):(h.reading=!1,h.decoder&&!i?(e=h.decoder.write(e),h.objectMode||0!==e.length?M(t,h,e,!1):A(t,h)):M(t,h,e,!1))):r||(h.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(h)}function M(t,e,i,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",i),t.read(0)):(e.length+=e.objectMode?1:i.length,r?e.buffer.unshift(i):e.buffer.push(i),e.needReadable&&S(t)),A(t,e)}Object.defineProperty(y.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),y.prototype.destroy=v.destroy,y.prototype._undestroy=v.undestroy,y.prototype._destroy=function(t,e){this.push(null),e(t)},y.prototype.push=function(t,e){var i,r=this._readableState;return r.objectMode?i=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=u.from(t,e),e=""),i=!0),w(this,t,e,!1,i)},y.prototype.unshift=function(t){return w(this,t,null,!0,!1)},y.prototype.isPaused=function(){return!1===this._readableState.flowing},y.prototype.setEncoding=function(t){return p||(p=i(76).StringDecoder),this._readableState.decoder=new p(t),this._readableState.encoding=t,this};function _(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=8388608?t=8388608:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function S(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(c("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?n.nextTick(k,t):k(t))}function k(t){c("emit readable"),t.emit("readable"),R(t)}function A(t,e){e.readingMore||(e.readingMore=!0,n.nextTick(E,t,e))}function E(t,e){for(var i=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(c("maybeReadMore read 0"),t.read(0),i!==e.length);)i=e.length;e.readingMore=!1}function x(t){c("readable nexttick read 0"),t.read(0)}function B(t,e){e.reading||(c("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),R(t),e.flowing&&!e.reading&&t.read(0)}function R(t){var e=t._readableState;for(c("flow",e.flowing);e.flowing&&null!==t.read(););}function I(t,e){return 0===e.length?null:(e.objectMode?i=e.buffer.shift():!t||t>=e.length?(i=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):i=function(t,e,i){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():i?function(t,e){var i=e.head,r=1,n=i.data;t-=n.length;for(;i=i.next;){var o=i.data,h=t>o.length?o.length:t;if(h===o.length?n+=o:n+=o.slice(0,t),0===(t-=h)){h===o.length?(++r,i.next?e.head=i.next:e.head=e.tail=null):(e.head=i,i.data=o.slice(h));break}++r}return e.length-=r,n}(t,e):function(t,e){var i=u.allocUnsafe(t),r=e.head,n=1;r.data.copy(i),t-=r.data.length;for(;r=r.next;){var o=r.data,h=t>o.length?o.length:t;if(o.copy(i,i.length-t,0,h),0===(t-=h)){h===o.length?(++n,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(h));break}++n}return e.length-=n,i}(t,e);return r}(t,e.buffer,e.decoder),i);var i}function T(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,n.nextTick(P,e,t))}function P(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function C(t,e){for(var i=0,r=t.length;i<r;i++)if(t[i]===e)return i;return-1}y.prototype.read=function(t){c("read",t),t=parseInt(t,10);var e=this._readableState,i=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return c("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?T(this):S(this),null;if(0===(t=_(t,e))&&e.ended)return 0===e.length&&T(this),null;var r,n=e.needReadable;return c("need readable",n),(0===e.length||e.length-t<e.highWaterMark)&&c("length less than watermark",n=!0),e.ended||e.reading?c("reading or ended",n=!1):n&&(c("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=_(i,e))),null===(r=t>0?I(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),i!==t&&e.ended&&T(this)),null!==r&&this.emit("data",r),r},y.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},y.prototype.pipe=function(t,e){var i=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,c("pipe count=%d opts=%j",o.pipesCount,e);var a=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?f:y;function u(e,r){c("onunpipe"),e===i&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,c("cleanup"),t.removeListener("close",g),t.removeListener("finish",b),t.removeListener("drain",l),t.removeListener("error",v),t.removeListener("unpipe",u),i.removeListener("end",f),i.removeListener("end",y),i.removeListener("data",m),d=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||l())}function f(){c("onend"),t.end()}o.endEmitted?n.nextTick(a):i.once("end",a),t.on("unpipe",u);var l=function(t){return function(){var e=t._readableState;c("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,R(t))}}(i);t.on("drain",l);var d=!1;var p=!1;function m(e){c("ondata"),p=!1,!1!==t.write(e)||p||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==C(o.pipes,t))&&!d&&(c("false write response, pause",i._readableState.awaitDrain),i._readableState.awaitDrain++,p=!0),i.pause())}function v(e){c("onerror",e),y(),t.removeListener("error",v),0===s(t,"error")&&t.emit("error",e)}function g(){t.removeListener("finish",b),y()}function b(){c("onfinish"),t.removeListener("close",g),y()}function y(){c("unpipe"),i.unpipe(t)}return i.on("data",m),function(t,e,i){if("function"==typeof t.prependListener)return t.prependListener(e,i);t._events&&t._events[e]?h(t._events[e])?t._events[e].unshift(i):t._events[e]=[i,t._events[e]]:t.on(e,i)}(t,"error",v),t.once("close",g),t.once("finish",b),t.emit("pipe",i),o.flowing||(c("pipe resume"),i.resume()),t},y.prototype.unpipe=function(t){var e=this._readableState,i={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,i)),this;if(!t){var r=e.pipes,n=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<n;o++)r[o].emit("unpipe",this,i);return this}var h=C(e.pipes,t);return-1===h||(e.pipes.splice(h,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,i)),this},y.prototype.on=function(t,e){var i=a.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&S(this):n.nextTick(x,this))}return i},y.prototype.addListener=y.prototype.on,y.prototype.resume=function(){var t=this._readableState;return t.flowing||(c("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,n.nextTick(B,t,e))}(this,t)),this},y.prototype.pause=function(){return c("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(c("pause"),this._readableState.flowing=!1,this.emit("pause")),this},y.prototype.wrap=function(t){var e=this,i=this._readableState,r=!1;for(var n in t.on("end",(function(){if(c("wrapped end"),i.decoder&&!i.ended){var t=i.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(n){(c("wrapped data"),i.decoder&&(n=i.decoder.write(n)),i.objectMode&&null==n)||(i.objectMode||n&&n.length)&&(e.push(n)||(r=!0,t.pause()))})),t)void 0===this[n]&&"function"==typeof t[n]&&(this[n]=function(e){return function(){return t[e].apply(t,arguments)}}(n));for(var o=0;o<g.length;o++)t.on(g[o],this.emit.bind(this,g[o]));return this._read=function(e){c("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(y.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),y._fromList=I}).call(this,i(21),i(42))},function(t,e,i){t.exports=i(75).EventEmitter},,,function(t,e,i){"use strict";var r=i(82);function n(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var i=this,o=this._readableState&&this._readableState.destroyed,h=this._writableState&&this._writableState.destroyed;return o||h?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(n,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?(r.nextTick(n,i,t),i._writableState&&(i._writableState.errorEmitted=!0)):e&&e(t)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,i){"use strict";t.exports=h;var r=i(63),n=Object.create(i(77));function o(t,e){var i=this._transformState;i.transforming=!1;var r=i.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));i.writechunk=null,i.writecb=null,null!=e&&this.push(e),r(t);var n=this._readableState;n.reading=!1,(n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}function h(t){if(!(this instanceof h))return new h(t);r.call(this,t),this._transformState={afterTransform:o.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",s)}function s(){var t=this;"function"==typeof this._flush?this._flush((function(e,i){a(t,e,i)})):a(this,null,null)}function a(t,e,i){if(e)return t.emit("error",e);if(null!=i&&t.push(i),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}n.inherits=i(32),n.inherits(h,r),h.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},h.prototype._transform=function(t,e,i){throw new Error("_transform() is not implemented")},h.prototype._write=function(t,e,i){var r=this._transformState;if(r.writecb=i,r.writechunk=t,r.writeencoding=e,!r.transforming){var n=this._readableState;(r.needTransform||n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}},h.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},h.prototype._destroy=function(t,e){var i=this;r.prototype._destroy.call(this,t,(function(t){e(t),i.emit("close")}))}},function(t,e,i){"use strict";var r=i(32),n=i(229),o=i(61),h=i(34).Buffer,s=i(144),a=i(96),u=i(97),f=h.alloc(128);function l(t,e){o.call(this,"digest"),"string"==typeof e&&(e=h.from(e));var i="sha512"===t||"sha384"===t?128:64;(this._alg=t,this._key=e,e.length>i)?e=("rmd160"===t?new a:u(t)).update(e).digest():e.length<i&&(e=h.concat([e,f],i));for(var r=this._ipad=h.allocUnsafe(i),n=this._opad=h.allocUnsafe(i),s=0;s<i;s++)r[s]=54^e[s],n[s]=92^e[s];this._hash="rmd160"===t?new a:u(t),this._hash.update(r)}r(l,o),l.prototype._update=function(t){this._hash.update(t)},l.prototype._final=function(){var t=this._hash.digest();return("rmd160"===this._alg?new a:u(this._alg)).update(this._opad).update(t).digest()},t.exports=function(t,e){return"rmd160"===(t=t.toLowerCase())||"ripemd160"===t?new l("rmd160",e):"md5"===t?new n(s,e):new l(t,e)}},function(t,e,i){var r=i(94);t.exports=function(t){return(new r).update(t).digest()}},function(t){t.exports={sha224WithRSAEncryption:{sign:"rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},"RSA-SHA224":{sign:"ecdsa/rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},sha256WithRSAEncryption:{sign:"rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},"RSA-SHA256":{sign:"ecdsa/rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},sha384WithRSAEncryption:{sign:"rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},"RSA-SHA384":{sign:"ecdsa/rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},sha512WithRSAEncryption:{sign:"rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA512":{sign:"ecdsa/rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA1":{sign:"rsa",hash:"sha1",id:"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{sign:"ecdsa",hash:"sha1",id:""},sha256:{sign:"ecdsa",hash:"sha256",id:""},sha224:{sign:"ecdsa",hash:"sha224",id:""},sha384:{sign:"ecdsa",hash:"sha384",id:""},sha512:{sign:"ecdsa",hash:"sha512",id:""},"DSA-SHA":{sign:"dsa",hash:"sha1",id:""},"DSA-SHA1":{sign:"dsa",hash:"sha1",id:""},DSA:{sign:"dsa",hash:"sha1",id:""},"DSA-WITH-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-WITH-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-WITH-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-WITH-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-RIPEMD160":{sign:"dsa",hash:"rmd160",id:""},ripemd160WithRSA:{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},"RSA-RIPEMD160":{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},md5WithRSAEncryption:{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"},"RSA-MD5":{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"}}},function(t,e,i){e.pbkdf2=i(231),e.pbkdf2Sync=i(149)},function(t,e){var i=Math.pow(2,30)-1;t.exports=function(t,e){if("number"!=typeof t)throw new TypeError("Iterations not a number");if(t<0)throw new TypeError("Bad iterations");if("number"!=typeof e)throw new TypeError("Key length not a number");if(e<0||e>i||e!=e)throw new TypeError("Bad key length")}},function(t,e,i){(function(e){var i;if(e.browser)i="utf-8";else if(e.version){i=parseInt(e.version.split(".")[0].slice(1),10)>=6?"utf-8":"binary"}else i="utf-8";t.exports=i}).call(this,i(42))},function(t,e,i){var r=i(144),n=i(96),o=i(97),h=i(34).Buffer,s=i(147),a=i(148),u=i(150),f=h.alloc(128),l={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,rmd160:20,ripemd160:20};function d(t,e,i){var s=function(t){function e(e){return o(t).update(e).digest()}return"rmd160"===t||"ripemd160"===t?function(t){return(new n).update(t).digest()}:"md5"===t?r:e}(t),a="sha512"===t||"sha384"===t?128:64;e.length>a?e=s(e):e.length<a&&(e=h.concat([e,f],a));for(var u=h.allocUnsafe(a+l[t]),d=h.allocUnsafe(a+l[t]),c=0;c<a;c++)u[c]=54^e[c],d[c]=92^e[c];var p=h.allocUnsafe(a+i+4);u.copy(p,0,0,a),this.ipad1=p,this.ipad2=u,this.opad=d,this.alg=t,this.blocksize=a,this.hash=s,this.size=l[t]}d.prototype.run=function(t,e){return t.copy(e,this.blocksize),this.hash(e).copy(this.opad,this.blocksize),this.hash(this.opad)},t.exports=function(t,e,i,r,n){s(i,r);var o=new d(n=n||"sha1",t=u(t,a,"Password"),(e=u(e,a,"Salt")).length),f=h.allocUnsafe(r),c=h.allocUnsafe(e.length+4);e.copy(c,0,0,e.length);for(var p=0,m=l[n],v=Math.ceil(r/m),g=1;g<=v;g++){c.writeUInt32BE(g,e.length);for(var b=o.run(c,o.ipad1),y=b,w=1;w<i;w++){y=o.run(y,o.ipad2);for(var M=0;M<m;M++)b[M]^=y[M]}b.copy(f,p),p+=m}return f}},function(t,e,i){var r=i(34).Buffer;t.exports=function(t,e,i){if(r.isBuffer(t))return t;if("string"==typeof t)return r.from(t,e);if(ArrayBuffer.isView(t))return r.from(t.buffer);throw new TypeError(i+" must be a string, a Buffer, a typed array or a DataView")}},function(t,e,i){"use strict";e.readUInt32BE=function(t,e){return(t[0+e]<<24|t[1+e]<<16|t[2+e]<<8|t[3+e])>>>0},e.writeUInt32BE=function(t,e,i){t[0+i]=e>>>24,t[1+i]=e>>>16&255,t[2+i]=e>>>8&255,t[3+i]=255&e},e.ip=function(t,e,i,r){for(var n=0,o=0,h=6;h>=0;h-=2){for(var s=0;s<=24;s+=8)n<<=1,n|=e>>>s+h&1;for(s=0;s<=24;s+=8)n<<=1,n|=t>>>s+h&1}for(h=6;h>=0;h-=2){for(s=1;s<=25;s+=8)o<<=1,o|=e>>>s+h&1;for(s=1;s<=25;s+=8)o<<=1,o|=t>>>s+h&1}i[r+0]=n>>>0,i[r+1]=o>>>0},e.rip=function(t,e,i,r){for(var n=0,o=0,h=0;h<4;h++)for(var s=24;s>=0;s-=8)n<<=1,n|=e>>>s+h&1,n<<=1,n|=t>>>s+h&1;for(h=4;h<8;h++)for(s=24;s>=0;s-=8)o<<=1,o|=e>>>s+h&1,o<<=1,o|=t>>>s+h&1;i[r+0]=n>>>0,i[r+1]=o>>>0},e.pc1=function(t,e,i,r){for(var n=0,o=0,h=7;h>=5;h--){for(var s=0;s<=24;s+=8)n<<=1,n|=e>>s+h&1;for(s=0;s<=24;s+=8)n<<=1,n|=t>>s+h&1}for(s=0;s<=24;s+=8)n<<=1,n|=e>>s+h&1;for(h=1;h<=3;h++){for(s=0;s<=24;s+=8)o<<=1,o|=e>>s+h&1;for(s=0;s<=24;s+=8)o<<=1,o|=t>>s+h&1}for(s=0;s<=24;s+=8)o<<=1,o|=t>>s+h&1;i[r+0]=n>>>0,i[r+1]=o>>>0},e.r28shl=function(t,e){return t<<e&268435455|t>>>28-e};var r=[14,11,17,4,27,23,25,0,13,22,7,18,5,9,16,24,2,20,12,21,1,8,15,26,15,4,25,19,9,1,26,16,5,11,23,8,12,7,17,0,22,3,10,14,6,20,27,24];e.pc2=function(t,e,i,n){for(var o=0,h=0,s=r.length>>>1,a=0;a<s;a++)o<<=1,o|=t>>>r[a]&1;for(a=s;a<r.length;a++)h<<=1,h|=e>>>r[a]&1;i[n+0]=o>>>0,i[n+1]=h>>>0},e.expand=function(t,e,i){var r=0,n=0;r=(1&t)<<5|t>>>27;for(var o=23;o>=15;o-=4)r<<=6,r|=t>>>o&63;for(o=11;o>=3;o-=4)n|=t>>>o&63,n<<=6;n|=(31&t)<<1|t>>>31,e[i+0]=r>>>0,e[i+1]=n>>>0};var n=[14,0,4,15,13,7,1,4,2,14,15,2,11,13,8,1,3,10,10,6,6,12,12,11,5,9,9,5,0,3,7,8,4,15,1,12,14,8,8,2,13,4,6,9,2,1,11,7,15,5,12,11,9,3,7,14,3,10,10,0,5,6,0,13,15,3,1,13,8,4,14,7,6,15,11,2,3,8,4,14,9,12,7,0,2,1,13,10,12,6,0,9,5,11,10,5,0,13,14,8,7,10,11,1,10,3,4,15,13,4,1,2,5,11,8,6,12,7,6,12,9,0,3,5,2,14,15,9,10,13,0,7,9,0,14,9,6,3,3,4,15,6,5,10,1,2,13,8,12,5,7,14,11,12,4,11,2,15,8,1,13,1,6,10,4,13,9,0,8,6,15,9,3,8,0,7,11,4,1,15,2,14,12,3,5,11,10,5,14,2,7,12,7,13,13,8,14,11,3,5,0,6,6,15,9,0,10,3,1,4,2,7,8,2,5,12,11,1,12,10,4,14,15,9,10,3,6,15,9,0,0,6,12,10,11,1,7,13,13,8,15,9,1,4,3,5,14,11,5,12,2,7,8,2,4,14,2,14,12,11,4,2,1,12,7,4,10,7,11,13,6,1,8,5,5,0,3,15,15,10,13,3,0,9,14,8,9,6,4,11,2,8,1,12,11,7,10,1,13,14,7,2,8,13,15,6,9,15,12,0,5,9,6,10,3,4,0,5,14,3,12,10,1,15,10,4,15,2,9,7,2,12,6,9,8,5,0,6,13,1,3,13,4,14,14,0,7,11,5,3,11,8,9,4,14,3,15,2,5,12,2,9,8,5,12,15,3,10,7,11,0,14,4,1,10,7,1,6,13,0,11,8,6,13,4,13,11,0,2,11,14,7,15,4,0,9,8,1,13,10,3,14,12,3,9,5,7,12,5,2,10,15,6,8,1,6,1,6,4,11,11,13,13,8,12,1,3,4,7,10,14,7,10,9,15,5,6,0,8,15,0,14,5,2,9,3,2,12,13,1,2,15,8,13,4,8,6,10,15,3,11,7,1,4,10,12,9,5,3,6,14,11,5,0,0,14,12,9,7,2,7,2,11,1,4,14,1,7,9,4,12,10,14,8,2,13,0,15,6,12,10,9,13,0,15,3,3,5,5,6,8,11];e.substitute=function(t,e){for(var i=0,r=0;r<4;r++){i<<=4,i|=n[64*r+(t>>>18-6*r&63)]}for(r=0;r<4;r++){i<<=4,i|=n[256+64*r+(e>>>18-6*r&63)]}return i>>>0};var o=[16,25,12,11,3,20,4,15,31,17,9,6,27,14,1,22,30,24,8,18,0,5,29,23,13,19,2,26,10,21,28,7];e.permute=function(t){for(var e=0,i=0;i<o.length;i++)e<<=1,e|=t>>>o[i]&1;return e>>>0},e.padSplit=function(t,e,i){for(var r=t.toString(2);r.length<e;)r="0"+r;for(var n=[],o=0;o<e;o+=i)n.push(r.slice(o,o+i));return n.join(" ")}},function(t,e,i){"use strict";var r=i(47),n=i(32),o=i(151),h=i(101);function s(){this.tmp=new Array(2),this.keys=null}function a(t){h.call(this,t);var e=new s;this._desState=e,this.deriveKeys(e,t.key)}n(a,h),t.exports=a,a.create=function(t){return new a(t)};var u=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];a.prototype.deriveKeys=function(t,e){t.keys=new Array(32),r.equal(e.length,this.blockSize,"Invalid key length");var i=o.readUInt32BE(e,0),n=o.readUInt32BE(e,4);o.pc1(i,n,t.tmp,0),i=t.tmp[0],n=t.tmp[1];for(var h=0;h<t.keys.length;h+=2){var s=u[h>>>1];i=o.r28shl(i,s),n=o.r28shl(n,s),o.pc2(i,n,t.keys,h)}},a.prototype._update=function(t,e,i,r){var n=this._desState,h=o.readUInt32BE(t,e),s=o.readUInt32BE(t,e+4);o.ip(h,s,n.tmp,0),h=n.tmp[0],s=n.tmp[1],"encrypt"===this.type?this._encrypt(n,h,s,n.tmp,0):this._decrypt(n,h,s,n.tmp,0),h=n.tmp[0],s=n.tmp[1],o.writeUInt32BE(i,h,r),o.writeUInt32BE(i,s,r+4)},a.prototype._pad=function(t,e){for(var i=t.length-e,r=e;r<t.length;r++)t[r]=i;return!0},a.prototype._unpad=function(t){for(var e=t[t.length-1],i=t.length-e;i<t.length;i++)r.equal(t[i],e);return t.slice(0,t.length-e)},a.prototype._encrypt=function(t,e,i,r,n){for(var h=e,s=i,a=0;a<t.keys.length;a+=2){var u=t.keys[a],f=t.keys[a+1];o.expand(s,t.tmp,0),u^=t.tmp[0],f^=t.tmp[1];var l=o.substitute(u,f),d=s;s=(h^o.permute(l))>>>0,h=d}o.rip(s,h,r,n)},a.prototype._decrypt=function(t,e,i,r,n){for(var h=i,s=e,a=t.keys.length-2;a>=0;a-=2){var u=t.keys[a],f=t.keys[a+1];o.expand(h,t.tmp,0),u^=t.tmp[0],f^=t.tmp[1];var l=o.substitute(u,f),d=h;h=(s^o.permute(l))>>>0,s=d}o.rip(h,s,r,n)}},function(t,e,i){var r=i(78),n=i(34).Buffer,o=i(154);function h(t){var e=t._cipher.encryptBlockRaw(t._prev);return o(t._prev),e}e.encrypt=function(t,e){var i=Math.ceil(e.length/16),o=t._cache.length;t._cache=n.concat([t._cache,n.allocUnsafe(16*i)]);for(var s=0;s<i;s++){var a=h(t),u=o+16*s;t._cache.writeUInt32BE(a[0],u+0),t._cache.writeUInt32BE(a[1],u+4),t._cache.writeUInt32BE(a[2],u+8),t._cache.writeUInt32BE(a[3],u+12)}var f=t._cache.slice(0,e.length);return t._cache=t._cache.slice(e.length),r(e,f)}},function(t,e){t.exports=function(t){for(var e,i=t.length;i--;){if(255!==(e=t.readUInt8(i))){e++,t.writeUInt8(e,i);break}t.writeUInt8(0,i)}}},function(t){t.exports={"aes-128-ecb":{cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},"aes-192-ecb":{cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},"aes-256-ecb":{cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},"aes-128-cbc":{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},"aes-192-cbc":{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},"aes-256-cbc":{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},aes128:{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},aes192:{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},aes256:{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},"aes-128-cfb":{cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},"aes-192-cfb":{cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},"aes-256-cfb":{cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},"aes-128-cfb8":{cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},"aes-192-cfb8":{cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},"aes-256-cfb8":{cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},"aes-128-cfb1":{cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},"aes-192-cfb1":{cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},"aes-256-cfb1":{cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},"aes-128-ofb":{cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},"aes-192-ofb":{cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},"aes-256-ofb":{cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},"aes-128-ctr":{cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},"aes-192-ctr":{cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},"aes-256-ctr":{cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},"aes-128-gcm":{cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},"aes-192-gcm":{cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},"aes-256-gcm":{cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"}}},function(t,e,i){var r=i(83),n=i(34).Buffer,o=i(61),h=i(32),s=i(244),a=i(78),u=i(154);function f(t,e,i,h){o.call(this);var a=n.alloc(4,0);this._cipher=new r.AES(e);var f=this._cipher.encryptBlock(a);this._ghash=new s(f),i=function(t,e,i){if(12===e.length)return t._finID=n.concat([e,n.from([0,0,0,1])]),n.concat([e,n.from([0,0,0,2])]);var r=new s(i),o=e.length,h=o%16;r.update(e),h&&(h=16-h,r.update(n.alloc(h,0))),r.update(n.alloc(8,0));var a=8*o,f=n.alloc(8);f.writeUIntBE(a,0,8),r.update(f),t._finID=r.state;var l=n.from(t._finID);return u(l),l}(this,i,f),this._prev=n.from(i),this._cache=n.allocUnsafe(0),this._secCache=n.allocUnsafe(0),this._decrypt=h,this._alen=0,this._len=0,this._mode=t,this._authTag=null,this._called=!1}h(f,o),f.prototype._update=function(t){if(!this._called&&this._alen){var e=16-this._alen%16;e<16&&(e=n.alloc(e,0),this._ghash.update(e))}this._called=!0;var i=this._mode.encrypt(this,t);return this._decrypt?this._ghash.update(t):this._ghash.update(i),this._len+=t.length,i},f.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var t=a(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(t,e){var i=0;t.length!==e.length&&i++;for(var r=Math.min(t.length,e.length),n=0;n<r;++n)i+=t[n]^e[n];return i}(t,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=t,this._cipher.scrub()},f.prototype.getAuthTag=function(){if(this._decrypt||!n.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},f.prototype.setAuthTag=function(t){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=t},f.prototype.setAAD=function(t){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(t),this._alen+=t.length},t.exports=f},function(t,e,i){var r=i(83),n=i(34).Buffer,o=i(61);function h(t,e,i,h){o.call(this),this._cipher=new r.AES(e),this._prev=n.from(i),this._cache=n.allocUnsafe(0),this._secCache=n.allocUnsafe(0),this._decrypt=h,this._mode=t}i(32)(h,o),h.prototype._update=function(t){return this._mode.encrypt(this,t,this._decrypt)},h.prototype._final=function(){this._cipher.scrub()},t.exports=h},function(t,e,i){var r=i(67);t.exports=b,b.simpleSieve=v,b.fermatTest=g;var n=i(159),o=new n(24),h=new(i(161)),s=new n(1),a=new n(2),u=new n(5),f=(new n(16),new n(8),new n(10)),l=new n(3),d=(new n(7),new n(11)),c=new n(4),p=(new n(12),null);function m(){if(null!==p)return p;var t=[];t[0]=2;for(var e=1,i=3;i<1048576;i+=2){for(var r=Math.ceil(Math.sqrt(i)),n=0;n<e&&t[n]<=r&&i%t[n]!=0;n++);e!==n&&t[n]<=r||(t[e++]=i)}return p=t,t}function v(t){for(var e=m(),i=0;i<e.length;i++)if(0===t.modn(e[i]))return 0===t.cmpn(e[i]);return!0}function g(t){var e=n.mont(t);return 0===a.toRed(e).redPow(t.subn(1)).fromRed().cmpn(1)}function b(t,e){if(t<16)return new n(2===e||5===e?[140,123]:[140,39]);var i,p;for(e=new n(e);;){for(i=new n(r(Math.ceil(t/8)));i.bitLength()>t;)i.ishrn(1);if(i.isEven()&&i.iadd(s),i.testn(1)||i.iadd(a),e.cmp(a)){if(!e.cmp(u))for(;i.mod(f).cmp(l);)i.iadd(c)}else for(;i.mod(o).cmp(d);)i.iadd(c);if(v(p=i.shrn(1))&&v(i)&&g(p)&&g(i)&&h.test(p)&&h.test(i))return i}}},function(t,e,i){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function n(t,e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}function o(t,e,i){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(i=e,e=10),this._init(t||0,e||10,i||"be"))}var h;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{h=i(160).Buffer}catch(t){}function s(t,e,i){for(var r=0,n=Math.min(t.length,i),o=e;o<n;o++){var h=t.charCodeAt(o)-48;r<<=4,r|=h>=49&&h<=54?h-49+10:h>=17&&h<=22?h-17+10:15&h}return r}function a(t,e,i,r){for(var n=0,o=Math.min(t.length,i),h=e;h<o;h++){var s=t.charCodeAt(h)-48;n*=r,n+=s>=49?s-49+10:s>=17?s-17+10:s}return n}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"==typeof t)return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&n++,16===e?this._parseHex(t,n):this._parseBase(t,e,n),"-"===t[0]&&(this.negative=1),this.strip(),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,h,s=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)h=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)h=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var r,n,o=0;for(i=t.length-6,r=0;i>=e;i-=6)n=s(t,i,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);i+6!==e&&(n=s(t,e,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,i){this.words=[0],this.length=1;for(var r=0,n=1;n<=67108863;n*=e)r++;r--,n=n/e|0;for(var o=t.length-i,h=o%r,s=Math.min(o,o-h)+i,u=0,f=i;f<s;f+=r)u=a(t,f,f+r,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==h){var l=1;for(u=a(t,f,t.length,e),f=0;f<h;f++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,i){i.negative=e.negative^t.negative;var r=t.length+e.length|0;i.length=r,r=r-1|0;var n=0|t.words[0],o=0|e.words[0],h=n*o,s=67108863&h,a=h/67108864|0;i.words[0]=s;for(var u=1;u<r;u++){for(var f=a>>>26,l=67108863&a,d=Math.min(u,e.length-1),c=Math.max(0,u-t.length+1);c<=d;c++){var p=u-c|0;f+=(h=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&h}i.words[u]=0|l,a=0|f}return 0!==a?i.words[u]=0|a:i.length--,i.strip()}o.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,h=0;h<this.length;h++){var s=this.words[h],a=(16777215&(s<<n|o)).toString(16);i=0!==(o=s>>>24-n&16777215)||h!==this.length-1?u[6-a.length]+a+i:a+i,(n+=2)>=26&&(n-=26,h--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var d=f[t],c=l[t];i="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(c).toString(t);i=(p=p.idivn(c)).isZero()?m+i:u[d-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return r(void 0!==h),this.toArrayLike(h,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,i){var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var h,s,a="le"===e,u=new t(o),f=this.clone();if(a){for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[s]=h;for(;s<o;s++)u[s]=0}else{for(s=0;s<o-n;s++)u[s]=0;for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[o-s-1]=h}return u},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,i=0;return e>=4096&&(i+=13,e>>>=13),e>=64&&(i+=7,e>>>=7),e>=8&&(i+=4,e>>>=4),e>=2&&(i+=2,e>>>=2),i+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,i=0;return 0==(8191&e)&&(i+=13,e>>>=13),0==(127&e)&&(i+=7,e>>>=7),0==(15&e)&&(i+=4,e>>>=4),0==(3&e)&&(i+=2,e>>>=2),0==(1&e)&&i++,i},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var i=this._zeroBits(this.words[e]);if(t+=i,26!==i)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var i=0;i<e.length;i++)this.words[i]=this.words[i]&t.words[i];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,i;this.length>t.length?(e=this,i=t):(e=t,i=this);for(var r=0;r<i.length;r++)this.words[r]=e.words[r]^i.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},o.prototype.iadd=function(t){var e,i,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(i=this,r=t):(i=t,r=this);for(var n=0,o=0;o<r.length;o++)e=(0|i.words[o])+(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<i.length;o++)e=(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=i.length,0!==n)this.words[this.length]=n,this.length++;else if(i!==this)for(;o<i.length;o++)this.words[o]=i.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var i,r,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(i=this,r=t):(i=t,r=this);for(var o=0,h=0;h<r.length;h++)o=(e=(0|i.words[h])-(0|r.words[h])+o)>>26,this.words[h]=67108863&e;for(;0!==o&&h<i.length;h++)o=(e=(0|i.words[h])+o)>>26,this.words[h]=67108863&e;if(0===o&&h<i.length&&i!==this)for(;h<i.length;h++)this.words[h]=i.words[h];return this.length=Math.max(this.length,h),i!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var c=function(t,e,i){var r,n,o,h=t.words,s=e.words,a=i.words,u=0,f=0|h[0],l=8191&f,d=f>>>13,c=0|h[1],p=8191&c,m=c>>>13,v=0|h[2],g=8191&v,b=v>>>13,y=0|h[3],w=8191&y,M=y>>>13,_=0|h[4],S=8191&_,k=_>>>13,A=0|h[5],E=8191&A,x=A>>>13,B=0|h[6],R=8191&B,I=B>>>13,T=0|h[7],P=8191&T,C=T>>>13,L=0|h[8],q=8191&L,j=L>>>13,O=0|h[9],N=8191&O,D=O>>>13,z=0|s[0],U=8191&z,H=z>>>13,Z=0|s[1],F=8191&Z,K=Z>>>13,W=0|s[2],Y=8191&W,V=W>>>13,X=0|s[3],G=8191&X,J=X>>>13,$=0|s[4],Q=8191&$,tt=$>>>13,et=0|s[5],it=8191&et,rt=et>>>13,nt=0|s[6],ot=8191&nt,ht=nt>>>13,st=0|s[7],at=8191&st,ut=st>>>13,ft=0|s[8],lt=8191&ft,dt=ft>>>13,ct=0|s[9],pt=8191&ct,mt=ct>>>13;i.negative=t.negative^e.negative,i.length=19;var vt=(u+(r=Math.imul(l,U))|0)+((8191&(n=(n=Math.imul(l,H))+Math.imul(d,U)|0))<<13)|0;u=((o=Math.imul(d,H))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(p,U),n=(n=Math.imul(p,H))+Math.imul(m,U)|0,o=Math.imul(m,H);var gt=(u+(r=r+Math.imul(l,F)|0)|0)+((8191&(n=(n=n+Math.imul(l,K)|0)+Math.imul(d,F)|0))<<13)|0;u=((o=o+Math.imul(d,K)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(g,U),n=(n=Math.imul(g,H))+Math.imul(b,U)|0,o=Math.imul(b,H),r=r+Math.imul(p,F)|0,n=(n=n+Math.imul(p,K)|0)+Math.imul(m,F)|0,o=o+Math.imul(m,K)|0;var bt=(u+(r=r+Math.imul(l,Y)|0)|0)+((8191&(n=(n=n+Math.imul(l,V)|0)+Math.imul(d,Y)|0))<<13)|0;u=((o=o+Math.imul(d,V)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(w,U),n=(n=Math.imul(w,H))+Math.imul(M,U)|0,o=Math.imul(M,H),r=r+Math.imul(g,F)|0,n=(n=n+Math.imul(g,K)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,K)|0,r=r+Math.imul(p,Y)|0,n=(n=n+Math.imul(p,V)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,V)|0;var yt=(u+(r=r+Math.imul(l,G)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,G)|0))<<13)|0;u=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(S,U),n=(n=Math.imul(S,H))+Math.imul(k,U)|0,o=Math.imul(k,H),r=r+Math.imul(w,F)|0,n=(n=n+Math.imul(w,K)|0)+Math.imul(M,F)|0,o=o+Math.imul(M,K)|0,r=r+Math.imul(g,Y)|0,n=(n=n+Math.imul(g,V)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,V)|0,r=r+Math.imul(p,G)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,J)|0;var wt=(u+(r=r+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;u=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(E,U),n=(n=Math.imul(E,H))+Math.imul(x,U)|0,o=Math.imul(x,H),r=r+Math.imul(S,F)|0,n=(n=n+Math.imul(S,K)|0)+Math.imul(k,F)|0,o=o+Math.imul(k,K)|0,r=r+Math.imul(w,Y)|0,n=(n=n+Math.imul(w,V)|0)+Math.imul(M,Y)|0,o=o+Math.imul(M,V)|0,r=r+Math.imul(g,G)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,J)|0,r=r+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Mt=(u+(r=r+Math.imul(l,it)|0)|0)+((8191&(n=(n=n+Math.imul(l,rt)|0)+Math.imul(d,it)|0))<<13)|0;u=((o=o+Math.imul(d,rt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(R,U),n=(n=Math.imul(R,H))+Math.imul(I,U)|0,o=Math.imul(I,H),r=r+Math.imul(E,F)|0,n=(n=n+Math.imul(E,K)|0)+Math.imul(x,F)|0,o=o+Math.imul(x,K)|0,r=r+Math.imul(S,Y)|0,n=(n=n+Math.imul(S,V)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,V)|0,r=r+Math.imul(w,G)|0,n=(n=n+Math.imul(w,J)|0)+Math.imul(M,G)|0,o=o+Math.imul(M,J)|0,r=r+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,r=r+Math.imul(p,it)|0,n=(n=n+Math.imul(p,rt)|0)+Math.imul(m,it)|0,o=o+Math.imul(m,rt)|0;var _t=(u+(r=r+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,ht)|0)+Math.imul(d,ot)|0))<<13)|0;u=((o=o+Math.imul(d,ht)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(P,U),n=(n=Math.imul(P,H))+Math.imul(C,U)|0,o=Math.imul(C,H),r=r+Math.imul(R,F)|0,n=(n=n+Math.imul(R,K)|0)+Math.imul(I,F)|0,o=o+Math.imul(I,K)|0,r=r+Math.imul(E,Y)|0,n=(n=n+Math.imul(E,V)|0)+Math.imul(x,Y)|0,o=o+Math.imul(x,V)|0,r=r+Math.imul(S,G)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,J)|0,r=r+Math.imul(w,Q)|0,n=(n=n+Math.imul(w,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,r=r+Math.imul(g,it)|0,n=(n=n+Math.imul(g,rt)|0)+Math.imul(b,it)|0,o=o+Math.imul(b,rt)|0,r=r+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,ht)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,ht)|0;var St=(u+(r=r+Math.imul(l,at)|0)|0)+((8191&(n=(n=n+Math.imul(l,ut)|0)+Math.imul(d,at)|0))<<13)|0;u=((o=o+Math.imul(d,ut)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(q,U),n=(n=Math.imul(q,H))+Math.imul(j,U)|0,o=Math.imul(j,H),r=r+Math.imul(P,F)|0,n=(n=n+Math.imul(P,K)|0)+Math.imul(C,F)|0,o=o+Math.imul(C,K)|0,r=r+Math.imul(R,Y)|0,n=(n=n+Math.imul(R,V)|0)+Math.imul(I,Y)|0,o=o+Math.imul(I,V)|0,r=r+Math.imul(E,G)|0,n=(n=n+Math.imul(E,J)|0)+Math.imul(x,G)|0,o=o+Math.imul(x,J)|0,r=r+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,r=r+Math.imul(w,it)|0,n=(n=n+Math.imul(w,rt)|0)+Math.imul(M,it)|0,o=o+Math.imul(M,rt)|0,r=r+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,ht)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,ht)|0,r=r+Math.imul(p,at)|0,n=(n=n+Math.imul(p,ut)|0)+Math.imul(m,at)|0,o=o+Math.imul(m,ut)|0;var kt=(u+(r=r+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;u=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(N,U),n=(n=Math.imul(N,H))+Math.imul(D,U)|0,o=Math.imul(D,H),r=r+Math.imul(q,F)|0,n=(n=n+Math.imul(q,K)|0)+Math.imul(j,F)|0,o=o+Math.imul(j,K)|0,r=r+Math.imul(P,Y)|0,n=(n=n+Math.imul(P,V)|0)+Math.imul(C,Y)|0,o=o+Math.imul(C,V)|0,r=r+Math.imul(R,G)|0,n=(n=n+Math.imul(R,J)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,J)|0,r=r+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,r=r+Math.imul(S,it)|0,n=(n=n+Math.imul(S,rt)|0)+Math.imul(k,it)|0,o=o+Math.imul(k,rt)|0,r=r+Math.imul(w,ot)|0,n=(n=n+Math.imul(w,ht)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ht)|0,r=r+Math.imul(g,at)|0,n=(n=n+Math.imul(g,ut)|0)+Math.imul(b,at)|0,o=o+Math.imul(b,ut)|0,r=r+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(u+(r=r+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;u=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(N,F),n=(n=Math.imul(N,K))+Math.imul(D,F)|0,o=Math.imul(D,K),r=r+Math.imul(q,Y)|0,n=(n=n+Math.imul(q,V)|0)+Math.imul(j,Y)|0,o=o+Math.imul(j,V)|0,r=r+Math.imul(P,G)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(C,G)|0,o=o+Math.imul(C,J)|0,r=r+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,r=r+Math.imul(E,it)|0,n=(n=n+Math.imul(E,rt)|0)+Math.imul(x,it)|0,o=o+Math.imul(x,rt)|0,r=r+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,ht)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ht)|0,r=r+Math.imul(w,at)|0,n=(n=n+Math.imul(w,ut)|0)+Math.imul(M,at)|0,o=o+Math.imul(M,ut)|0,r=r+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(u+(r=r+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;u=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(N,Y),n=(n=Math.imul(N,V))+Math.imul(D,Y)|0,o=Math.imul(D,V),r=r+Math.imul(q,G)|0,n=(n=n+Math.imul(q,J)|0)+Math.imul(j,G)|0,o=o+Math.imul(j,J)|0,r=r+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(C,Q)|0,o=o+Math.imul(C,tt)|0,r=r+Math.imul(R,it)|0,n=(n=n+Math.imul(R,rt)|0)+Math.imul(I,it)|0,o=o+Math.imul(I,rt)|0,r=r+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,ht)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,ht)|0,r=r+Math.imul(S,at)|0,n=(n=n+Math.imul(S,ut)|0)+Math.imul(k,at)|0,o=o+Math.imul(k,ut)|0,r=r+Math.imul(w,lt)|0,n=(n=n+Math.imul(w,dt)|0)+Math.imul(M,lt)|0,o=o+Math.imul(M,dt)|0;var xt=(u+(r=r+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(b,pt)|0))<<13)|0;u=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(N,G),n=(n=Math.imul(N,J))+Math.imul(D,G)|0,o=Math.imul(D,J),r=r+Math.imul(q,Q)|0,n=(n=n+Math.imul(q,tt)|0)+Math.imul(j,Q)|0,o=o+Math.imul(j,tt)|0,r=r+Math.imul(P,it)|0,n=(n=n+Math.imul(P,rt)|0)+Math.imul(C,it)|0,o=o+Math.imul(C,rt)|0,r=r+Math.imul(R,ot)|0,n=(n=n+Math.imul(R,ht)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,ht)|0,r=r+Math.imul(E,at)|0,n=(n=n+Math.imul(E,ut)|0)+Math.imul(x,at)|0,o=o+Math.imul(x,ut)|0,r=r+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,dt)|0;var Bt=(u+(r=r+Math.imul(w,pt)|0)|0)+((8191&(n=(n=n+Math.imul(w,mt)|0)+Math.imul(M,pt)|0))<<13)|0;u=((o=o+Math.imul(M,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(N,Q),n=(n=Math.imul(N,tt))+Math.imul(D,Q)|0,o=Math.imul(D,tt),r=r+Math.imul(q,it)|0,n=(n=n+Math.imul(q,rt)|0)+Math.imul(j,it)|0,o=o+Math.imul(j,rt)|0,r=r+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,ht)|0)+Math.imul(C,ot)|0,o=o+Math.imul(C,ht)|0,r=r+Math.imul(R,at)|0,n=(n=n+Math.imul(R,ut)|0)+Math.imul(I,at)|0,o=o+Math.imul(I,ut)|0,r=r+Math.imul(E,lt)|0,n=(n=n+Math.imul(E,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(u+(r=r+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(k,pt)|0))<<13)|0;u=((o=o+Math.imul(k,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,r=Math.imul(N,it),n=(n=Math.imul(N,rt))+Math.imul(D,it)|0,o=Math.imul(D,rt),r=r+Math.imul(q,ot)|0,n=(n=n+Math.imul(q,ht)|0)+Math.imul(j,ot)|0,o=o+Math.imul(j,ht)|0,r=r+Math.imul(P,at)|0,n=(n=n+Math.imul(P,ut)|0)+Math.imul(C,at)|0,o=o+Math.imul(C,ut)|0,r=r+Math.imul(R,lt)|0,n=(n=n+Math.imul(R,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(u+(r=r+Math.imul(E,pt)|0)|0)+((8191&(n=(n=n+Math.imul(E,mt)|0)+Math.imul(x,pt)|0))<<13)|0;u=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(N,ot),n=(n=Math.imul(N,ht))+Math.imul(D,ot)|0,o=Math.imul(D,ht),r=r+Math.imul(q,at)|0,n=(n=n+Math.imul(q,ut)|0)+Math.imul(j,at)|0,o=o+Math.imul(j,ut)|0,r=r+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(C,lt)|0,o=o+Math.imul(C,dt)|0;var Tt=(u+(r=r+Math.imul(R,pt)|0)|0)+((8191&(n=(n=n+Math.imul(R,mt)|0)+Math.imul(I,pt)|0))<<13)|0;u=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(N,at),n=(n=Math.imul(N,ut))+Math.imul(D,at)|0,o=Math.imul(D,ut),r=r+Math.imul(q,lt)|0,n=(n=n+Math.imul(q,dt)|0)+Math.imul(j,lt)|0,o=o+Math.imul(j,dt)|0;var Pt=(u+(r=r+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(C,pt)|0))<<13)|0;u=((o=o+Math.imul(C,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,r=Math.imul(N,lt),n=(n=Math.imul(N,dt))+Math.imul(D,lt)|0,o=Math.imul(D,dt);var Ct=(u+(r=r+Math.imul(q,pt)|0)|0)+((8191&(n=(n=n+Math.imul(q,mt)|0)+Math.imul(j,pt)|0))<<13)|0;u=((o=o+Math.imul(j,mt)|0)+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863;var Lt=(u+(r=Math.imul(N,pt))|0)+((8191&(n=(n=Math.imul(N,mt))+Math.imul(D,pt)|0))<<13)|0;return u=((o=Math.imul(D,mt))+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,a[0]=vt,a[1]=gt,a[2]=bt,a[3]=yt,a[4]=wt,a[5]=Mt,a[6]=_t,a[7]=St,a[8]=kt,a[9]=At,a[10]=Et,a[11]=xt,a[12]=Bt,a[13]=Rt,a[14]=It,a[15]=Tt,a[16]=Pt,a[17]=Ct,a[18]=Lt,0!==u&&(a[19]=u,i.length++),i};function p(t,e,i){return(new m).mulp(t,e,i)}function m(t,e){this.x=t,this.y=e}Math.imul||(c=d),o.prototype.mulTo=function(t,e){var i=this.length+t.length;return 10===this.length&&10===t.length?c(this,t,e):i<63?d(this,t,e):i<1024?function(t,e,i){i.negative=e.negative^t.negative,i.length=t.length+e.length;for(var r=0,n=0,o=0;o<i.length-1;o++){var h=n;n=0;for(var s=67108863&r,a=Math.min(o,e.length-1),u=Math.max(0,o-t.length+1);u<=a;u++){var f=o-u,l=(0|t.words[f])*(0|e.words[u]),d=67108863&l;s=67108863&(d=d+s|0),n+=(h=(h=h+(l/67108864|0)|0)+(d>>>26)|0)>>>26,h&=67108863}i.words[o]=s,r=h,h=n}return 0!==r?i.words[o]=r:i.length--,i.strip()}(this,t,e):p(this,t,e)},m.prototype.makeRBT=function(t){for(var e=new Array(t),i=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,i,t);return e},m.prototype.revBin=function(t,e,i){if(0===t||t===i-1)return t;for(var r=0,n=0;n<e;n++)r|=(1&t)<<e-n-1,t>>=1;return r},m.prototype.permute=function(t,e,i,r,n,o){for(var h=0;h<o;h++)r[h]=e[t[h]],n[h]=i[t[h]]},m.prototype.transform=function(t,e,i,r,n,o){this.permute(o,t,e,i,r,n);for(var h=1;h<n;h<<=1)for(var s=h<<1,a=Math.cos(2*Math.PI/s),u=Math.sin(2*Math.PI/s),f=0;f<n;f+=s)for(var l=a,d=u,c=0;c<h;c++){var p=i[f+c],m=r[f+c],v=i[f+c+h],g=r[f+c+h],b=l*v-d*g;g=l*g+d*v,v=b,i[f+c]=p+v,r[f+c]=m+g,i[f+c+h]=p-v,r[f+c+h]=m-g,c!==s&&(b=a*l-u*d,d=a*d+u*l,l=b)}},m.prototype.guessLen13b=function(t,e){var i=1|Math.max(e,t),r=1&i,n=0;for(i=i/2|0;i;i>>>=1)n++;return 1<<n+1+r},m.prototype.conjugate=function(t,e,i){if(!(i<=1))for(var r=0;r<i/2;r++){var n=t[r];t[r]=t[i-r-1],t[i-r-1]=n,n=e[r],e[r]=-e[i-r-1],e[i-r-1]=-n}},m.prototype.normalize13b=function(t,e){for(var i=0,r=0;r<e/2;r++){var n=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+i;t[r]=67108863&n,i=n<67108864?0:n/67108864|0}return t},m.prototype.convert13b=function(t,e,i,n){for(var o=0,h=0;h<e;h++)o+=0|t[h],i[2*h]=8191&o,o>>>=13,i[2*h+1]=8191&o,o>>>=13;for(h=2*e;h<n;++h)i[h]=0;r(0===o),r(0==(-8192&o))},m.prototype.stub=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=0;return e},m.prototype.mulp=function(t,e,i){var r=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(r),o=this.stub(r),h=new Array(r),s=new Array(r),a=new Array(r),u=new Array(r),f=new Array(r),l=new Array(r),d=i.words;d.length=r,this.convert13b(t.words,t.length,h,r),this.convert13b(e.words,e.length,u,r),this.transform(h,o,s,a,r,n),this.transform(u,o,f,l,r,n);for(var c=0;c<r;c++){var p=s[c]*f[c]-a[c]*l[c];a[c]=s[c]*l[c]+a[c]*f[c],s[c]=p}return this.conjugate(s,a,r),this.transform(s,a,d,o,r,n),this.conjugate(d,o,r),this.normalize13b(d,r),i.negative=t.negative^e.negative,i.length=t.length+e.length,i.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),p(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,o=(67108863&n)+(67108863&e);e>>=26,e+=n/67108864|0,e+=o>>>26,this.words[i]=67108863&o}return 0!==e&&(this.words[i]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),i=0;i<e.length;i++){var r=i/26|0,n=i%26;e[i]=(t.words[r]&1<<n)>>>n}return e}(t);if(0===e.length)return new o(1);for(var i=this,r=0;r<e.length&&0===e[r];r++,i=i.sqr());if(++r<e.length)for(var n=i.sqr();r<e.length;r++,n=n.sqr())0!==e[r]&&(i=i.mul(n));return i},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var h=0;for(e=0;e<this.length;e++){var s=this.words[e]&o,a=(0|this.words[e])-s<<i;this.words[e]=a|h,h=s>>>26-i}h&&(this.words[e]=h,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this.strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,h=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,a=i;if(n-=h,n=Math.max(0,n),a){for(var u=0;u<h;u++)a.words[u]=this.words[u];a.length=h}if(0===h);else if(this.length>h)for(this.length-=h,u=0;u<this.length;u++)this.words[u]=this.words[u+h];else this.words[0]=0,this.length=1;var f=0;for(u=this.length-1;u>=0&&(0!==f||u>=n);u--){var l=0|this.words[u];this.words[u]=f<<26-o|l>>>o,f=l&s}return a&&0!==f&&(a.words[a.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i)&&!!(this.words[i]&n)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,i){var n,o,h=t.length+i;this._expand(h);var s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+s;var a=(0|t.words[n])*e;s=((o-=67108863&a)>>26)-(a/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)s=(o=(0|this.words[n+i])+s)>>26,this.words[n+i]=67108863&o;if(0===s)return this.strip();for(r(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var i=(this.length,t.length),r=this.clone(),n=t,h=0|n.words[n.length-1];0!==(i=26-this._countBits(h))&&(n=n.ushln(i),r.iushln(i),h=0|n.words[n.length-1]);var s,a=r.length-n.length;if("mod"!==e){(s=new o(null)).length=a+1,s.words=new Array(s.length);for(var u=0;u<s.length;u++)s.words[u]=0}var f=r.clone()._ishlnsubmul(n,1,a);0===f.negative&&(r=f,s&&(s.words[a]=1));for(var l=a-1;l>=0;l--){var d=67108864*(0|r.words[n.length+l])+(0|r.words[n.length+l-1]);for(d=Math.min(d/h|0,67108863),r._ishlnsubmul(n,d,l);0!==r.negative;)d--,r.negative=0,r._ishlnsubmul(n,1,l),r.isZero()||(r.negative^=1);s&&(s.words[l]=d)}return s&&s.strip(),r.strip(),"div"!==e&&0!==i&&r.iushrn(i),{div:s||null,mod:r}},o.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(n=s.div.neg()),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.iadd(t)),{div:n,mod:h}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.isub(t)),{div:s.div,mod:h}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var n,h,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var i=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),n=t.andln(1),o=i.cmp(r);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(e*i+(0|this.words[n]))%t;return i},o.prototype.idivn=function(t){r(t<=67108863);for(var e=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*e;this.words[i]=n/t|0,e=n%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n=new o(1),h=new o(0),s=new o(0),a=new o(1),u=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++u;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(n.isOdd()||h.isOdd())&&(n.iadd(f),h.isub(l)),n.iushrn(1),h.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(f),a.isub(l)),s.iushrn(1),a.iushrn(1);e.cmp(i)>=0?(e.isub(i),n.isub(s),h.isub(a)):(i.isub(e),s.isub(n),a.isub(h))}return{a:s,b:a,gcd:i.iushln(u)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n,h=new o(1),s=new o(0),a=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var u=0,f=1;0==(e.words[0]&f)&&u<26;++u,f<<=1);if(u>0)for(e.iushrn(u);u-- >0;)h.isOdd()&&h.iadd(a),h.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(i)>=0?(e.isub(i),h.isub(s)):(i.isub(e),s.isub(h))}return(n=0===e.cmpn(1)?h:s).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),i=t.clone();e.negative=0,i.negative=0;for(var r=0;e.isEven()&&i.isEven();r++)e.iushrn(1),i.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;i.isEven();)i.iushrn(1);var n=e.cmp(i);if(n<0){var o=e;e=i,i=o}else if(0===n||0===i.cmpn(1))break;e.isub(i)}return i.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,h=i;0!==o&&h<this.length;h++){var s=0|this.words[h];o=(s+=o)>>>26,s&=67108863,this.words[h]=s}return 0!==o&&(this.words[h]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,i=this.length-1;i>=0;i--){var r=0|this.words[i],n=0|t.words[i];if(r!==n){r<n?e=-1:r>n&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new _(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function g(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){g.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function y(){g.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){g.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){g.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function S(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},g.prototype.ireduce=function(t){var e,i=t;do{this.split(i,this.tmp),e=(i=(i=this.imulK(i)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:i.ucmp(this.p);return 0===r?(i.words[0]=0,i.length=1):r>0?i.isub(this.p):void 0!==i.strip?i.strip():i._strip(),i},g.prototype.split=function(t,e){t.iushrn(this.n,0,e)},g.prototype.imulK=function(t){return t.imul(this.k)},n(b,g),b.prototype.split=function(t,e){for(var i=Math.min(t.length,9),r=0;r<i;r++)e.words[r]=t.words[r];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var n=t.words[9];for(e.words[e.length++]=4194303&n,r=10;r<t.length;r++){var o=0|t.words[r];t.words[r-10]=(4194303&o)<<4|n>>>22,n=o}n>>>=22,t.words[r-10]=n,0===n&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,i=0;i<t.length;i++){var r=0|t.words[i];e+=977*r,t.words[i]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(y,g),n(w,g),n(M,g),M.prototype.imulK=function(t){for(var e=0,i=0;i<t.length;i++){var r=19*(0|t.words[i])+e,n=67108863&r;r>>>=26,t.words[i]=n,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new b;else if("p224"===t)e=new y;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new M}return v[t]=e,e},_.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,e){this._verify2(t,e);var i=t.add(e);return i.cmp(this.m)>=0&&i.isub(this.m),i._forceRed(this)},_.prototype.iadd=function(t,e){this._verify2(t,e);var i=t.iadd(e);return i.cmp(this.m)>=0&&i.isub(this.m),i},_.prototype.sub=function(t,e){this._verify2(t,e);var i=t.sub(e);return i.cmpn(0)<0&&i.iadd(this.m),i._forceRed(this)},_.prototype.isub=function(t,e){this._verify2(t,e);var i=t.isub(e);return i.cmpn(0)<0&&i.iadd(this.m),i},_.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},_.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},_.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new o(1)).iushrn(2);return this.pow(t,i)}for(var n=this.m.subn(1),h=0;!n.isZero()&&0===n.andln(1);)h++,n.iushrn(1);r(!n.isZero());var s=new o(1).toRed(this),a=s.redNeg(),u=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,u).cmp(a);)f.redIAdd(a);for(var l=this.pow(f,n),d=this.pow(t,n.addn(1).iushrn(1)),c=this.pow(t,n),p=h;0!==c.cmp(s);){for(var m=c,v=0;0!==m.cmp(s);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new o(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},_.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},_.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var i=new Array(16);i[0]=new o(1).toRed(this),i[1]=t;for(var r=2;r<i.length;r++)i[r]=this.mul(i[r-1],t);var n=i[0],h=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var u=e.words[r],f=a-1;f>=0;f--){var l=u>>f&1;n!==i[0]&&(n=this.sqr(n)),0!==l||0!==h?(h<<=1,h|=l,(4===++s||0===r&&0===f)&&(n=this.mul(n,i[h]),s=0,h=0)):s=0}a=26}return n},_.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},_.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new S(t)},n(S,_),S.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},S.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},S.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var i=t.imul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},S.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var i=t.mul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),h=n;return n.cmp(this.m)>=0?h=n.isub(this.m):n.cmpn(0)<0&&(h=n.iadd(this.m)),h._forceRed(this)},S.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,i(52)(t))},,function(t,e,i){var r=i(248),n=i(104);function o(t){this.rand=t||new n.Rand}t.exports=o,o.create=function(t){return new o(t)},o.prototype._randbelow=function(t){var e=t.bitLength(),i=Math.ceil(e/8);do{var n=new r(this.rand.generate(i))}while(n.cmp(t)>=0);return n},o.prototype._randrange=function(t,e){var i=e.sub(t);return t.add(this._randbelow(i))},o.prototype.test=function(t,e,i){var n=t.bitLength(),o=r.mont(t),h=new r(1).toRed(o);e||(e=Math.max(1,n/48|0));for(var s=t.subn(1),a=0;!s.testn(a);a++);for(var u=t.shrn(a),f=s.toRed(o);e>0;e--){var l=this._randrange(new r(2),s);i&&i(l);var d=l.toRed(o).redPow(u);if(0!==d.cmp(h)&&0!==d.cmp(f)){for(var c=1;c<a;c++){if(0===(d=d.redSqr()).cmp(h))return!1;if(0===d.cmp(f))break}if(c===a)return!1}}return!0},o.prototype.getDivisor=function(t,e){var i=t.bitLength(),n=r.mont(t),o=new r(1).toRed(n);e||(e=Math.max(1,i/48|0));for(var h=t.subn(1),s=0;!h.testn(s);s++);for(var a=t.shrn(s),u=h.toRed(n);e>0;e--){var f=this._randrange(new r(2),h),l=t.gcd(f);if(0!==l.cmpn(1))return l;var d=f.toRed(n).redPow(a);if(0!==d.cmp(o)&&0!==d.cmp(u)){for(var c=1;c<s;c++){if(0===(d=d.redSqr()).cmp(o))return d.fromRed().subn(1).gcd(t);if(0===d.cmp(u))break}if(c===s)return(d=d.redSqr()).fromRed().subn(1).gcd(t)}}return!1}},,,,,function(t,e,i){"use strict";var r=e;function n(t){return 1===t.length?"0"+t:t}function o(t){for(var e="",i=0;i<t.length;i++)e+=n(t[i].toString(16));return e}r.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var i=[];if("string"!=typeof t){for(var r=0;r<t.length;r++)i[r]=0|t[r];return i}if("hex"===e){(t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t);for(r=0;r<t.length;r+=2)i.push(parseInt(t[r]+t[r+1],16))}else for(r=0;r<t.length;r++){var n=t.charCodeAt(r),o=n>>8,h=255&n;o?i.push(o,h):i.push(h)}return i},r.zero2=n,r.toHex=o,r.encode=function(t,e){return"hex"===e?o(t):t}},function(t,e,i){"use strict";var r=e;r.base=i(85),r.short=i(255),r.mont=i(256),r.edwards=i(257)},function(t,e,i){"use strict";var r=i(50).rotr32;function n(t,e,i){return t&e^~t&i}function o(t,e,i){return t&e^t&i^e&i}function h(t,e,i){return t^e^i}e.ft_1=function(t,e,i,r){return 0===t?n(e,i,r):1===t||3===t?h(e,i,r):2===t?o(e,i,r):void 0},e.ch32=n,e.maj32=o,e.p32=h,e.s0_256=function(t){return r(t,2)^r(t,13)^r(t,22)},e.s1_256=function(t){return r(t,6)^r(t,11)^r(t,25)},e.g0_256=function(t){return r(t,7)^r(t,18)^t>>>3},e.g1_256=function(t){return r(t,17)^r(t,19)^t>>>10}},function(t,e,i){"use strict";var r=i(50),n=i(79),o=i(168),h=i(47),s=r.sum32,a=r.sum32_4,u=r.sum32_5,f=o.ch32,l=o.maj32,d=o.s0_256,c=o.s1_256,p=o.g0_256,m=o.g1_256,v=n.BlockHash,g=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function b(){if(!(this instanceof b))return new b;v.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=g,this.W=new Array(64)}r.inherits(b,v),t.exports=b,b.blockSize=512,b.outSize=256,b.hmacStrength=192,b.padLength=64,b.prototype._update=function(t,e){for(var i=this.W,r=0;r<16;r++)i[r]=t[e+r];for(;r<i.length;r++)i[r]=a(m(i[r-2]),i[r-7],p(i[r-15]),i[r-16]);var n=this.h[0],o=this.h[1],v=this.h[2],g=this.h[3],b=this.h[4],y=this.h[5],w=this.h[6],M=this.h[7];for(h(this.k.length===i.length),r=0;r<i.length;r++){var _=u(M,c(b),f(b,y,w),this.k[r],i[r]),S=s(d(n),l(n,o,v));M=w,w=y,y=b,b=s(g,_),g=v,v=o,o=n,n=s(_,S)}this.h[0]=s(this.h[0],n),this.h[1]=s(this.h[1],o),this.h[2]=s(this.h[2],v),this.h[3]=s(this.h[3],g),this.h[4]=s(this.h[4],b),this.h[5]=s(this.h[5],y),this.h[6]=s(this.h[6],w),this.h[7]=s(this.h[7],M)},b.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},function(t,e,i){"use strict";var r=i(50),n=i(79),o=i(47),h=r.rotr64_hi,s=r.rotr64_lo,a=r.shr64_hi,u=r.shr64_lo,f=r.sum64,l=r.sum64_hi,d=r.sum64_lo,c=r.sum64_4_hi,p=r.sum64_4_lo,m=r.sum64_5_hi,v=r.sum64_5_lo,g=n.BlockHash,b=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function y(){if(!(this instanceof y))return new y;g.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=b,this.W=new Array(160)}function w(t,e,i,r,n){var o=t&i^~t&n;return o<0&&(o+=4294967296),o}function M(t,e,i,r,n,o){var h=e&r^~e&o;return h<0&&(h+=4294967296),h}function _(t,e,i,r,n){var o=t&i^t&n^i&n;return o<0&&(o+=4294967296),o}function S(t,e,i,r,n,o){var h=e&r^e&o^r&o;return h<0&&(h+=4294967296),h}function k(t,e){var i=h(t,e,28)^h(e,t,2)^h(e,t,7);return i<0&&(i+=4294967296),i}function A(t,e){var i=s(t,e,28)^s(e,t,2)^s(e,t,7);return i<0&&(i+=4294967296),i}function E(t,e){var i=h(t,e,14)^h(t,e,18)^h(e,t,9);return i<0&&(i+=4294967296),i}function x(t,e){var i=s(t,e,14)^s(t,e,18)^s(e,t,9);return i<0&&(i+=4294967296),i}function B(t,e){var i=h(t,e,1)^h(t,e,8)^a(t,e,7);return i<0&&(i+=4294967296),i}function R(t,e){var i=s(t,e,1)^s(t,e,8)^u(t,e,7);return i<0&&(i+=4294967296),i}function I(t,e){var i=h(t,e,19)^h(e,t,29)^a(t,e,6);return i<0&&(i+=4294967296),i}function T(t,e){var i=s(t,e,19)^s(e,t,29)^u(t,e,6);return i<0&&(i+=4294967296),i}r.inherits(y,g),t.exports=y,y.blockSize=1024,y.outSize=512,y.hmacStrength=192,y.padLength=128,y.prototype._prepareBlock=function(t,e){for(var i=this.W,r=0;r<32;r++)i[r]=t[e+r];for(;r<i.length;r+=2){var n=I(i[r-4],i[r-3]),o=T(i[r-4],i[r-3]),h=i[r-14],s=i[r-13],a=B(i[r-30],i[r-29]),u=R(i[r-30],i[r-29]),f=i[r-32],l=i[r-31];i[r]=c(n,o,h,s,a,u,f,l),i[r+1]=p(n,o,h,s,a,u,f,l)}},y.prototype._update=function(t,e){this._prepareBlock(t,e);var i=this.W,r=this.h[0],n=this.h[1],h=this.h[2],s=this.h[3],a=this.h[4],u=this.h[5],c=this.h[6],p=this.h[7],g=this.h[8],b=this.h[9],y=this.h[10],B=this.h[11],R=this.h[12],I=this.h[13],T=this.h[14],P=this.h[15];o(this.k.length===i.length);for(var C=0;C<i.length;C+=2){var L=T,q=P,j=E(g,b),O=x(g,b),N=w(g,b,y,B,R),D=M(g,b,y,B,R,I),z=this.k[C],U=this.k[C+1],H=i[C],Z=i[C+1],F=m(L,q,j,O,N,D,z,U,H,Z),K=v(L,q,j,O,N,D,z,U,H,Z);L=k(r,n),q=A(r,n),j=_(r,n,h,s,a),O=S(r,n,h,s,a,u);var W=l(L,q,j,O),Y=d(L,q,j,O);T=R,P=I,R=y,I=B,y=g,B=b,g=l(c,p,F,K),b=d(p,p,F,K),c=a,p=u,a=h,u=s,h=r,s=n,r=l(F,K,W,Y),n=d(F,K,W,Y)}f(this.h,0,r,n),f(this.h,2,h,s),f(this.h,4,a,u),f(this.h,6,c,p),f(this.h,8,g,b),f(this.h,10,y,B),f(this.h,12,R,I),f(this.h,14,T,P)},y.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},function(t,e,i){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function n(t,e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}function o(t,e,i){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(i=e,e=10),this._init(t||0,e||10,i||"be"))}var h;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{h=i(172).Buffer}catch(t){}function s(t,e,i){for(var n=0,o=Math.min(t.length,i),h=0,s=e;s<o;s++){var a,u=t.charCodeAt(s)-48;n<<=4,n|=a=u>=49&&u<=54?u-49+10:u>=17&&u<=22?u-17+10:u,h|=a}return r(!(240&h),"Invalid character in "+t),n}function a(t,e,i,n){for(var o=0,h=0,s=Math.min(t.length,i),a=e;a<s;a++){var u=t.charCodeAt(a)-48;o*=n,h=u>=49?u-49+10:u>=17?u-17+10:u,r(u>=0&&h<n,"Invalid character"),o+=h}return o}function u(t,e){t.words=e.words,t.length=e.length,t.negative=e.negative,t.red=e.red}function f(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"==typeof t)return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&n++,16===e?this._parseHex(t,n):this._parseBase(t,e,n),"-"===t[0]&&(this.negative=1),this._strip(),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,h,s=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)h=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)h=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this._strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var r,n,o=0;for(i=t.length-6,r=0;i>=e;i-=6)n=s(t,i,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);i+6!==e&&(n=s(t,e,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303),this._strip()},o.prototype._parseBase=function(t,e,i){this.words=[0],this.length=1;for(var r=0,n=1;n<=67108863;n*=e)r++;r--,n=n/e|0;for(var o=t.length-i,h=o%r,s=Math.min(o,o-h)+i,u=0,f=i;f<s;f+=r)u=a(t,f,f+r,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==h){var l=1;for(u=a(t,f,t.length,e),f=0;f<h;f++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype._move=function(t){u(t,this)},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for?o.prototype[Symbol.for("nodejs.util.inspect.custom")]=f:o.prototype.inspect=f;var l=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],d=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],c=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];o.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,h=0;h<this.length;h++){var s=this.words[h],a=(16777215&(s<<n|o)).toString(16);i=0!==(o=s>>>24-n&16777215)||h!==this.length-1?l[6-a.length]+a+i:a+i,(n+=2)>=26&&(n-=26,h--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var u=d[t],f=c[t];i="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modrn(f).toString(t);i=(p=p.idivn(f)).isZero()?m+i:l[u-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16,2)},h&&(o.prototype.toBuffer=function(t,e){return this.toArrayLike(h,t,e)}),o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)};function p(t,e,i){i.negative=e.negative^t.negative;var r=t.length+e.length|0;i.length=r,r=r-1|0;var n=0|t.words[0],o=0|e.words[0],h=n*o,s=67108863&h,a=h/67108864|0;i.words[0]=s;for(var u=1;u<r;u++){for(var f=a>>>26,l=67108863&a,d=Math.min(u,e.length-1),c=Math.max(0,u-t.length+1);c<=d;c++){var p=u-c|0;f+=(h=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&h}i.words[u]=0|l,a=0|f}return 0!==a?i.words[u]=0|a:i.length--,i._strip()}o.prototype.toArrayLike=function(t,e,i){this._strip();var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0");var h=function(t,e){return t.allocUnsafe?t.allocUnsafe(e):new t(e)}(t,o);return this["_toArrayLike"+("le"===e?"LE":"BE")](h,n),h},o.prototype._toArrayLikeLE=function(t,e){for(var i=0,r=0,n=0,o=0;n<this.length;n++){var h=this.words[n]<<o|r;t[i++]=255&h,i<t.length&&(t[i++]=h>>8&255),i<t.length&&(t[i++]=h>>16&255),6===o?(i<t.length&&(t[i++]=h>>24&255),r=0,o=0):(r=h>>>24,o+=2)}if(i<t.length)for(t[i++]=r;i<t.length;)t[i++]=0},o.prototype._toArrayLikeBE=function(t,e){for(var i=t.length-1,r=0,n=0,o=0;n<this.length;n++){var h=this.words[n]<<o|r;t[i--]=255&h,i>=0&&(t[i--]=h>>8&255),i>=0&&(t[i--]=h>>16&255),6===o?(i>=0&&(t[i--]=h>>24&255),r=0,o=0):(r=h>>>24,o+=2)}if(i>=0)for(t[i--]=r;i>=0;)t[i--]=0},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,i=0;return e>=4096&&(i+=13,e>>>=13),e>=64&&(i+=7,e>>>=7),e>=8&&(i+=4,e>>>=4),e>=2&&(i+=2,e>>>=2),i+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,i=0;return 0==(8191&e)&&(i+=13,e>>>=13),0==(127&e)&&(i+=7,e>>>=7),0==(15&e)&&(i+=4,e>>>=4),0==(3&e)&&(i+=2,e>>>=2),0==(1&e)&&i++,i},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var i=this._zeroBits(this.words[e]);if(t+=i,26!==i)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this._strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var i=0;i<e.length;i++)this.words[i]=this.words[i]&t.words[i];return this.length=e.length,this._strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,i;this.length>t.length?(e=this,i=t):(e=t,i=this);for(var r=0;r<i.length;r++)this.words[r]=e.words[r]^i.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this._strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this._strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this._strip()},o.prototype.iadd=function(t){var e,i,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(i=this,r=t):(i=t,r=this);for(var n=0,o=0;o<r.length;o++)e=(0|i.words[o])+(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<i.length;o++)e=(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=i.length,0!==n)this.words[this.length]=n,this.length++;else if(i!==this)for(;o<i.length;o++)this.words[o]=i.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var i,r,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(i=this,r=t):(i=t,r=this);for(var o=0,h=0;h<r.length;h++)o=(e=(0|i.words[h])-(0|r.words[h])+o)>>26,this.words[h]=67108863&e;for(;0!==o&&h<i.length;h++)o=(e=(0|i.words[h])+o)>>26,this.words[h]=67108863&e;if(0===o&&h<i.length&&i!==this)for(;h<i.length;h++)this.words[h]=i.words[h];return this.length=Math.max(this.length,h),i!==this&&(this.negative=1),this._strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var m=function(t,e,i){var r,n,o,h=t.words,s=e.words,a=i.words,u=0,f=0|h[0],l=8191&f,d=f>>>13,c=0|h[1],p=8191&c,m=c>>>13,v=0|h[2],g=8191&v,b=v>>>13,y=0|h[3],w=8191&y,M=y>>>13,_=0|h[4],S=8191&_,k=_>>>13,A=0|h[5],E=8191&A,x=A>>>13,B=0|h[6],R=8191&B,I=B>>>13,T=0|h[7],P=8191&T,C=T>>>13,L=0|h[8],q=8191&L,j=L>>>13,O=0|h[9],N=8191&O,D=O>>>13,z=0|s[0],U=8191&z,H=z>>>13,Z=0|s[1],F=8191&Z,K=Z>>>13,W=0|s[2],Y=8191&W,V=W>>>13,X=0|s[3],G=8191&X,J=X>>>13,$=0|s[4],Q=8191&$,tt=$>>>13,et=0|s[5],it=8191&et,rt=et>>>13,nt=0|s[6],ot=8191&nt,ht=nt>>>13,st=0|s[7],at=8191&st,ut=st>>>13,ft=0|s[8],lt=8191&ft,dt=ft>>>13,ct=0|s[9],pt=8191&ct,mt=ct>>>13;i.negative=t.negative^e.negative,i.length=19;var vt=(u+(r=Math.imul(l,U))|0)+((8191&(n=(n=Math.imul(l,H))+Math.imul(d,U)|0))<<13)|0;u=((o=Math.imul(d,H))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(p,U),n=(n=Math.imul(p,H))+Math.imul(m,U)|0,o=Math.imul(m,H);var gt=(u+(r=r+Math.imul(l,F)|0)|0)+((8191&(n=(n=n+Math.imul(l,K)|0)+Math.imul(d,F)|0))<<13)|0;u=((o=o+Math.imul(d,K)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(g,U),n=(n=Math.imul(g,H))+Math.imul(b,U)|0,o=Math.imul(b,H),r=r+Math.imul(p,F)|0,n=(n=n+Math.imul(p,K)|0)+Math.imul(m,F)|0,o=o+Math.imul(m,K)|0;var bt=(u+(r=r+Math.imul(l,Y)|0)|0)+((8191&(n=(n=n+Math.imul(l,V)|0)+Math.imul(d,Y)|0))<<13)|0;u=((o=o+Math.imul(d,V)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(w,U),n=(n=Math.imul(w,H))+Math.imul(M,U)|0,o=Math.imul(M,H),r=r+Math.imul(g,F)|0,n=(n=n+Math.imul(g,K)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,K)|0,r=r+Math.imul(p,Y)|0,n=(n=n+Math.imul(p,V)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,V)|0;var yt=(u+(r=r+Math.imul(l,G)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,G)|0))<<13)|0;u=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(S,U),n=(n=Math.imul(S,H))+Math.imul(k,U)|0,o=Math.imul(k,H),r=r+Math.imul(w,F)|0,n=(n=n+Math.imul(w,K)|0)+Math.imul(M,F)|0,o=o+Math.imul(M,K)|0,r=r+Math.imul(g,Y)|0,n=(n=n+Math.imul(g,V)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,V)|0,r=r+Math.imul(p,G)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,J)|0;var wt=(u+(r=r+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;u=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(E,U),n=(n=Math.imul(E,H))+Math.imul(x,U)|0,o=Math.imul(x,H),r=r+Math.imul(S,F)|0,n=(n=n+Math.imul(S,K)|0)+Math.imul(k,F)|0,o=o+Math.imul(k,K)|0,r=r+Math.imul(w,Y)|0,n=(n=n+Math.imul(w,V)|0)+Math.imul(M,Y)|0,o=o+Math.imul(M,V)|0,r=r+Math.imul(g,G)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,J)|0,r=r+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Mt=(u+(r=r+Math.imul(l,it)|0)|0)+((8191&(n=(n=n+Math.imul(l,rt)|0)+Math.imul(d,it)|0))<<13)|0;u=((o=o+Math.imul(d,rt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(R,U),n=(n=Math.imul(R,H))+Math.imul(I,U)|0,o=Math.imul(I,H),r=r+Math.imul(E,F)|0,n=(n=n+Math.imul(E,K)|0)+Math.imul(x,F)|0,o=o+Math.imul(x,K)|0,r=r+Math.imul(S,Y)|0,n=(n=n+Math.imul(S,V)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,V)|0,r=r+Math.imul(w,G)|0,n=(n=n+Math.imul(w,J)|0)+Math.imul(M,G)|0,o=o+Math.imul(M,J)|0,r=r+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,r=r+Math.imul(p,it)|0,n=(n=n+Math.imul(p,rt)|0)+Math.imul(m,it)|0,o=o+Math.imul(m,rt)|0;var _t=(u+(r=r+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,ht)|0)+Math.imul(d,ot)|0))<<13)|0;u=((o=o+Math.imul(d,ht)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(P,U),n=(n=Math.imul(P,H))+Math.imul(C,U)|0,o=Math.imul(C,H),r=r+Math.imul(R,F)|0,n=(n=n+Math.imul(R,K)|0)+Math.imul(I,F)|0,o=o+Math.imul(I,K)|0,r=r+Math.imul(E,Y)|0,n=(n=n+Math.imul(E,V)|0)+Math.imul(x,Y)|0,o=o+Math.imul(x,V)|0,r=r+Math.imul(S,G)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,J)|0,r=r+Math.imul(w,Q)|0,n=(n=n+Math.imul(w,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,r=r+Math.imul(g,it)|0,n=(n=n+Math.imul(g,rt)|0)+Math.imul(b,it)|0,o=o+Math.imul(b,rt)|0,r=r+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,ht)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,ht)|0;var St=(u+(r=r+Math.imul(l,at)|0)|0)+((8191&(n=(n=n+Math.imul(l,ut)|0)+Math.imul(d,at)|0))<<13)|0;u=((o=o+Math.imul(d,ut)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(q,U),n=(n=Math.imul(q,H))+Math.imul(j,U)|0,o=Math.imul(j,H),r=r+Math.imul(P,F)|0,n=(n=n+Math.imul(P,K)|0)+Math.imul(C,F)|0,o=o+Math.imul(C,K)|0,r=r+Math.imul(R,Y)|0,n=(n=n+Math.imul(R,V)|0)+Math.imul(I,Y)|0,o=o+Math.imul(I,V)|0,r=r+Math.imul(E,G)|0,n=(n=n+Math.imul(E,J)|0)+Math.imul(x,G)|0,o=o+Math.imul(x,J)|0,r=r+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,r=r+Math.imul(w,it)|0,n=(n=n+Math.imul(w,rt)|0)+Math.imul(M,it)|0,o=o+Math.imul(M,rt)|0,r=r+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,ht)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,ht)|0,r=r+Math.imul(p,at)|0,n=(n=n+Math.imul(p,ut)|0)+Math.imul(m,at)|0,o=o+Math.imul(m,ut)|0;var kt=(u+(r=r+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;u=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(N,U),n=(n=Math.imul(N,H))+Math.imul(D,U)|0,o=Math.imul(D,H),r=r+Math.imul(q,F)|0,n=(n=n+Math.imul(q,K)|0)+Math.imul(j,F)|0,o=o+Math.imul(j,K)|0,r=r+Math.imul(P,Y)|0,n=(n=n+Math.imul(P,V)|0)+Math.imul(C,Y)|0,o=o+Math.imul(C,V)|0,r=r+Math.imul(R,G)|0,n=(n=n+Math.imul(R,J)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,J)|0,r=r+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,r=r+Math.imul(S,it)|0,n=(n=n+Math.imul(S,rt)|0)+Math.imul(k,it)|0,o=o+Math.imul(k,rt)|0,r=r+Math.imul(w,ot)|0,n=(n=n+Math.imul(w,ht)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ht)|0,r=r+Math.imul(g,at)|0,n=(n=n+Math.imul(g,ut)|0)+Math.imul(b,at)|0,o=o+Math.imul(b,ut)|0,r=r+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(u+(r=r+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;u=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(N,F),n=(n=Math.imul(N,K))+Math.imul(D,F)|0,o=Math.imul(D,K),r=r+Math.imul(q,Y)|0,n=(n=n+Math.imul(q,V)|0)+Math.imul(j,Y)|0,o=o+Math.imul(j,V)|0,r=r+Math.imul(P,G)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(C,G)|0,o=o+Math.imul(C,J)|0,r=r+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,r=r+Math.imul(E,it)|0,n=(n=n+Math.imul(E,rt)|0)+Math.imul(x,it)|0,o=o+Math.imul(x,rt)|0,r=r+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,ht)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ht)|0,r=r+Math.imul(w,at)|0,n=(n=n+Math.imul(w,ut)|0)+Math.imul(M,at)|0,o=o+Math.imul(M,ut)|0,r=r+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(u+(r=r+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;u=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(N,Y),n=(n=Math.imul(N,V))+Math.imul(D,Y)|0,o=Math.imul(D,V),r=r+Math.imul(q,G)|0,n=(n=n+Math.imul(q,J)|0)+Math.imul(j,G)|0,o=o+Math.imul(j,J)|0,r=r+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(C,Q)|0,o=o+Math.imul(C,tt)|0,r=r+Math.imul(R,it)|0,n=(n=n+Math.imul(R,rt)|0)+Math.imul(I,it)|0,o=o+Math.imul(I,rt)|0,r=r+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,ht)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,ht)|0,r=r+Math.imul(S,at)|0,n=(n=n+Math.imul(S,ut)|0)+Math.imul(k,at)|0,o=o+Math.imul(k,ut)|0,r=r+Math.imul(w,lt)|0,n=(n=n+Math.imul(w,dt)|0)+Math.imul(M,lt)|0,o=o+Math.imul(M,dt)|0;var xt=(u+(r=r+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(b,pt)|0))<<13)|0;u=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(N,G),n=(n=Math.imul(N,J))+Math.imul(D,G)|0,o=Math.imul(D,J),r=r+Math.imul(q,Q)|0,n=(n=n+Math.imul(q,tt)|0)+Math.imul(j,Q)|0,o=o+Math.imul(j,tt)|0,r=r+Math.imul(P,it)|0,n=(n=n+Math.imul(P,rt)|0)+Math.imul(C,it)|0,o=o+Math.imul(C,rt)|0,r=r+Math.imul(R,ot)|0,n=(n=n+Math.imul(R,ht)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,ht)|0,r=r+Math.imul(E,at)|0,n=(n=n+Math.imul(E,ut)|0)+Math.imul(x,at)|0,o=o+Math.imul(x,ut)|0,r=r+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,dt)|0;var Bt=(u+(r=r+Math.imul(w,pt)|0)|0)+((8191&(n=(n=n+Math.imul(w,mt)|0)+Math.imul(M,pt)|0))<<13)|0;u=((o=o+Math.imul(M,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(N,Q),n=(n=Math.imul(N,tt))+Math.imul(D,Q)|0,o=Math.imul(D,tt),r=r+Math.imul(q,it)|0,n=(n=n+Math.imul(q,rt)|0)+Math.imul(j,it)|0,o=o+Math.imul(j,rt)|0,r=r+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,ht)|0)+Math.imul(C,ot)|0,o=o+Math.imul(C,ht)|0,r=r+Math.imul(R,at)|0,n=(n=n+Math.imul(R,ut)|0)+Math.imul(I,at)|0,o=o+Math.imul(I,ut)|0,r=r+Math.imul(E,lt)|0,n=(n=n+Math.imul(E,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(u+(r=r+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(k,pt)|0))<<13)|0;u=((o=o+Math.imul(k,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,r=Math.imul(N,it),n=(n=Math.imul(N,rt))+Math.imul(D,it)|0,o=Math.imul(D,rt),r=r+Math.imul(q,ot)|0,n=(n=n+Math.imul(q,ht)|0)+Math.imul(j,ot)|0,o=o+Math.imul(j,ht)|0,r=r+Math.imul(P,at)|0,n=(n=n+Math.imul(P,ut)|0)+Math.imul(C,at)|0,o=o+Math.imul(C,ut)|0,r=r+Math.imul(R,lt)|0,n=(n=n+Math.imul(R,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(u+(r=r+Math.imul(E,pt)|0)|0)+((8191&(n=(n=n+Math.imul(E,mt)|0)+Math.imul(x,pt)|0))<<13)|0;u=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(N,ot),n=(n=Math.imul(N,ht))+Math.imul(D,ot)|0,o=Math.imul(D,ht),r=r+Math.imul(q,at)|0,n=(n=n+Math.imul(q,ut)|0)+Math.imul(j,at)|0,o=o+Math.imul(j,ut)|0,r=r+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(C,lt)|0,o=o+Math.imul(C,dt)|0;var Tt=(u+(r=r+Math.imul(R,pt)|0)|0)+((8191&(n=(n=n+Math.imul(R,mt)|0)+Math.imul(I,pt)|0))<<13)|0;u=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(N,at),n=(n=Math.imul(N,ut))+Math.imul(D,at)|0,o=Math.imul(D,ut),r=r+Math.imul(q,lt)|0,n=(n=n+Math.imul(q,dt)|0)+Math.imul(j,lt)|0,o=o+Math.imul(j,dt)|0;var Pt=(u+(r=r+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(C,pt)|0))<<13)|0;u=((o=o+Math.imul(C,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,r=Math.imul(N,lt),n=(n=Math.imul(N,dt))+Math.imul(D,lt)|0,o=Math.imul(D,dt);var Ct=(u+(r=r+Math.imul(q,pt)|0)|0)+((8191&(n=(n=n+Math.imul(q,mt)|0)+Math.imul(j,pt)|0))<<13)|0;u=((o=o+Math.imul(j,mt)|0)+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863;var Lt=(u+(r=Math.imul(N,pt))|0)+((8191&(n=(n=Math.imul(N,mt))+Math.imul(D,pt)|0))<<13)|0;return u=((o=Math.imul(D,mt))+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,a[0]=vt,a[1]=gt,a[2]=bt,a[3]=yt,a[4]=wt,a[5]=Mt,a[6]=_t,a[7]=St,a[8]=kt,a[9]=At,a[10]=Et,a[11]=xt,a[12]=Bt,a[13]=Rt,a[14]=It,a[15]=Tt,a[16]=Pt,a[17]=Ct,a[18]=Lt,0!==u&&(a[19]=u,i.length++),i};function v(t,e,i){i.negative=e.negative^t.negative,i.length=t.length+e.length;for(var r=0,n=0,o=0;o<i.length-1;o++){var h=n;n=0;for(var s=67108863&r,a=Math.min(o,e.length-1),u=Math.max(0,o-t.length+1);u<=a;u++){var f=o-u,l=(0|t.words[f])*(0|e.words[u]),d=67108863&l;s=67108863&(d=d+s|0),n+=(h=(h=h+(l/67108864|0)|0)+(d>>>26)|0)>>>26,h&=67108863}i.words[o]=s,r=h,h=n}return 0!==r?i.words[o]=r:i.length--,i._strip()}function g(t,e,i){return v(t,e,i)}function b(t,e){this.x=t,this.y=e}Math.imul||(m=p),o.prototype.mulTo=function(t,e){var i=this.length+t.length;return 10===this.length&&10===t.length?m(this,t,e):i<63?p(this,t,e):i<1024?v(this,t,e):g(this,t,e)},b.prototype.makeRBT=function(t){for(var e=new Array(t),i=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,i,t);return e},b.prototype.revBin=function(t,e,i){if(0===t||t===i-1)return t;for(var r=0,n=0;n<e;n++)r|=(1&t)<<e-n-1,t>>=1;return r},b.prototype.permute=function(t,e,i,r,n,o){for(var h=0;h<o;h++)r[h]=e[t[h]],n[h]=i[t[h]]},b.prototype.transform=function(t,e,i,r,n,o){this.permute(o,t,e,i,r,n);for(var h=1;h<n;h<<=1)for(var s=h<<1,a=Math.cos(2*Math.PI/s),u=Math.sin(2*Math.PI/s),f=0;f<n;f+=s)for(var l=a,d=u,c=0;c<h;c++){var p=i[f+c],m=r[f+c],v=i[f+c+h],g=r[f+c+h],b=l*v-d*g;g=l*g+d*v,v=b,i[f+c]=p+v,r[f+c]=m+g,i[f+c+h]=p-v,r[f+c+h]=m-g,c!==s&&(b=a*l-u*d,d=a*d+u*l,l=b)}},b.prototype.guessLen13b=function(t,e){var i=1|Math.max(e,t),r=1&i,n=0;for(i=i/2|0;i;i>>>=1)n++;return 1<<n+1+r},b.prototype.conjugate=function(t,e,i){if(!(i<=1))for(var r=0;r<i/2;r++){var n=t[r];t[r]=t[i-r-1],t[i-r-1]=n,n=e[r],e[r]=-e[i-r-1],e[i-r-1]=-n}},b.prototype.normalize13b=function(t,e){for(var i=0,r=0;r<e/2;r++){var n=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+i;t[r]=67108863&n,i=n<67108864?0:n/67108864|0}return t},b.prototype.convert13b=function(t,e,i,n){for(var o=0,h=0;h<e;h++)o+=0|t[h],i[2*h]=8191&o,o>>>=13,i[2*h+1]=8191&o,o>>>=13;for(h=2*e;h<n;++h)i[h]=0;r(0===o),r(0==(-8192&o))},b.prototype.stub=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=0;return e},b.prototype.mulp=function(t,e,i){var r=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(r),o=this.stub(r),h=new Array(r),s=new Array(r),a=new Array(r),u=new Array(r),f=new Array(r),l=new Array(r),d=i.words;d.length=r,this.convert13b(t.words,t.length,h,r),this.convert13b(e.words,e.length,u,r),this.transform(h,o,s,a,r,n),this.transform(u,o,f,l,r,n);for(var c=0;c<r;c++){var p=s[c]*f[c]-a[c]*l[c];a[c]=s[c]*l[c]+a[c]*f[c],s[c]=p}return this.conjugate(s,a,r),this.transform(s,a,d,o,r,n),this.conjugate(d,o,r),this.normalize13b(d,r),i.negative=t.negative^e.negative,i.length=t.length+e.length,i._strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),g(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){var e=t<0;e&&(t=-t),r("number"==typeof t),r(t<67108864);for(var i=0,n=0;n<this.length;n++){var o=(0|this.words[n])*t,h=(67108863&o)+(67108863&i);i>>=26,i+=o/67108864|0,i+=h>>>26,this.words[n]=67108863&h}return 0!==i&&(this.words[n]=i,this.length++),e?this.ineg():this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),i=0;i<e.length;i++){var r=i/26|0,n=i%26;e[i]=t.words[r]>>>n&1}return e}(t);if(0===e.length)return new o(1);for(var i=this,r=0;r<e.length&&0===e[r];r++,i=i.sqr());if(++r<e.length)for(var n=i.sqr();r<e.length;r++,n=n.sqr())0!==e[r]&&(i=i.mul(n));return i},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var h=0;for(e=0;e<this.length;e++){var s=this.words[e]&o,a=(0|this.words[e])-s<<i;this.words[e]=a|h,h=s>>>26-i}h&&(this.words[e]=h,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this._strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,h=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,a=i;if(n-=h,n=Math.max(0,n),a){for(var u=0;u<h;u++)a.words[u]=this.words[u];a.length=h}if(0===h);else if(this.length>h)for(this.length-=h,u=0;u<this.length;u++)this.words[u]=this.words[u+h];else this.words[0]=0,this.length=1;var f=0;for(u=this.length-1;u>=0&&(0!==f||u>=n);u--){var l=0|this.words[u];this.words[u]=f<<26-o|l>>>o,f=l&s}return a&&0!==f&&(a.words[a.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},o.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i)&&!!(this.words[i]&n)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this._strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this._strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,i){var n,o,h=t.length+i;this._expand(h);var s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+s;var a=(0|t.words[n])*e;s=((o-=67108863&a)>>26)-(a/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)s=(o=(0|this.words[n+i])+s)>>26,this.words[n+i]=67108863&o;if(0===s)return this._strip();for(r(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this._strip()},o.prototype._wordDiv=function(t,e){var i=(this.length,t.length),r=this.clone(),n=t,h=0|n.words[n.length-1];0!==(i=26-this._countBits(h))&&(n=n.ushln(i),r.iushln(i),h=0|n.words[n.length-1]);var s,a=r.length-n.length;if("mod"!==e){(s=new o(null)).length=a+1,s.words=new Array(s.length);for(var u=0;u<s.length;u++)s.words[u]=0}var f=r.clone()._ishlnsubmul(n,1,a);0===f.negative&&(r=f,s&&(s.words[a]=1));for(var l=a-1;l>=0;l--){var d=67108864*(0|r.words[n.length+l])+(0|r.words[n.length+l-1]);for(d=Math.min(d/h|0,67108863),r._ishlnsubmul(n,d,l);0!==r.negative;)d--,r.negative=0,r._ishlnsubmul(n,1,l),r.isZero()||(r.negative^=1);s&&(s.words[l]=d)}return s&&s._strip(),r._strip(),"div"!==e&&0!==i&&r.iushrn(i),{div:s||null,mod:r}},o.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(n=s.div.neg()),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.iadd(t)),{div:n,mod:h}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.isub(t)),{div:s.div,mod:h}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modrn(t.words[0]))}:this._wordDiv(t,e);var n,h,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var i=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),n=t.andln(1),o=i.cmp(r);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modrn=function(t){var e=t<0;e&&(t=-t),r(t<=67108863);for(var i=(1<<26)%t,n=0,o=this.length-1;o>=0;o--)n=(i*n+(0|this.words[o]))%t;return e?-n:n},o.prototype.modn=function(t){return this.modrn(t)},o.prototype.idivn=function(t){var e=t<0;e&&(t=-t),r(t<=67108863);for(var i=0,n=this.length-1;n>=0;n--){var o=(0|this.words[n])+67108864*i;this.words[n]=o/t|0,i=o%t}return this._strip(),e?this.ineg():this},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n=new o(1),h=new o(0),s=new o(0),a=new o(1),u=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++u;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(n.isOdd()||h.isOdd())&&(n.iadd(f),h.isub(l)),n.iushrn(1),h.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(f),a.isub(l)),s.iushrn(1),a.iushrn(1);e.cmp(i)>=0?(e.isub(i),n.isub(s),h.isub(a)):(i.isub(e),s.isub(n),a.isub(h))}return{a:s,b:a,gcd:i.iushln(u)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n,h=new o(1),s=new o(0),a=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var u=0,f=1;0==(e.words[0]&f)&&u<26;++u,f<<=1);if(u>0)for(e.iushrn(u);u-- >0;)h.isOdd()&&h.iadd(a),h.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(i)>=0?(e.isub(i),h.isub(s)):(i.isub(e),s.isub(h))}return(n=0===e.cmpn(1)?h:s).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),i=t.clone();e.negative=0,i.negative=0;for(var r=0;e.isEven()&&i.isEven();r++)e.iushrn(1),i.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;i.isEven();)i.iushrn(1);var n=e.cmp(i);if(n<0){var o=e;e=i,i=o}else if(0===n||0===i.cmpn(1))break;e.isub(i)}return i.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,h=i;0!==o&&h<this.length;h++){var s=0|this.words[h];o=(s+=o)>>>26,s&=67108863,this.words[h]=s}return 0!==o&&(this.words[h]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this._strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,i=this.length-1;i>=0;i--){var r=0|this.words[i],n=0|t.words[i];if(r!==n){r<n?e=-1:r>n&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new A(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var y={k256:null,p224:null,p192:null,p25519:null};function w(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function M(){w.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function _(){w.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function S(){w.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function k(){w.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function A(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function E(t){A.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}w.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},w.prototype.ireduce=function(t){var e,i=t;do{this.split(i,this.tmp),e=(i=(i=this.imulK(i)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:i.ucmp(this.p);return 0===r?(i.words[0]=0,i.length=1):r>0?i.isub(this.p):void 0!==i.strip?i.strip():i._strip(),i},w.prototype.split=function(t,e){t.iushrn(this.n,0,e)},w.prototype.imulK=function(t){return t.imul(this.k)},n(M,w),M.prototype.split=function(t,e){for(var i=Math.min(t.length,9),r=0;r<i;r++)e.words[r]=t.words[r];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var n=t.words[9];for(e.words[e.length++]=4194303&n,r=10;r<t.length;r++){var o=0|t.words[r];t.words[r-10]=(4194303&o)<<4|n>>>22,n=o}n>>>=22,t.words[r-10]=n,0===n&&t.length>10?t.length-=10:t.length-=9},M.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,i=0;i<t.length;i++){var r=0|t.words[i];e+=977*r,t.words[i]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(_,w),n(S,w),n(k,w),k.prototype.imulK=function(t){for(var e=0,i=0;i<t.length;i++){var r=19*(0|t.words[i])+e,n=67108863&r;r>>>=26,t.words[i]=n,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(y[t])return y[t];var e;if("k256"===t)e=new M;else if("p224"===t)e=new _;else if("p192"===t)e=new S;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new k}return y[t]=e,e},A.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},A.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},A.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(u(t,t.umod(this.m)._forceRed(this)),t)},A.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},A.prototype.add=function(t,e){this._verify2(t,e);var i=t.add(e);return i.cmp(this.m)>=0&&i.isub(this.m),i._forceRed(this)},A.prototype.iadd=function(t,e){this._verify2(t,e);var i=t.iadd(e);return i.cmp(this.m)>=0&&i.isub(this.m),i},A.prototype.sub=function(t,e){this._verify2(t,e);var i=t.sub(e);return i.cmpn(0)<0&&i.iadd(this.m),i._forceRed(this)},A.prototype.isub=function(t,e){this._verify2(t,e);var i=t.isub(e);return i.cmpn(0)<0&&i.iadd(this.m),i},A.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},A.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},A.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},A.prototype.isqr=function(t){return this.imul(t,t.clone())},A.prototype.sqr=function(t){return this.mul(t,t)},A.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new o(1)).iushrn(2);return this.pow(t,i)}for(var n=this.m.subn(1),h=0;!n.isZero()&&0===n.andln(1);)h++,n.iushrn(1);r(!n.isZero());var s=new o(1).toRed(this),a=s.redNeg(),u=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,u).cmp(a);)f.redIAdd(a);for(var l=this.pow(f,n),d=this.pow(t,n.addn(1).iushrn(1)),c=this.pow(t,n),p=h;0!==c.cmp(s);){for(var m=c,v=0;0!==m.cmp(s);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new o(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},A.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},A.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var i=new Array(16);i[0]=new o(1).toRed(this),i[1]=t;for(var r=2;r<i.length;r++)i[r]=this.mul(i[r-1],t);var n=i[0],h=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var u=e.words[r],f=a-1;f>=0;f--){var l=u>>f&1;n!==i[0]&&(n=this.sqr(n)),0!==l||0!==h?(h<<=1,h|=l,(4===++s||0===r&&0===f)&&(n=this.mul(n,i[h]),s=0,h=0)):s=0}a=26}return n},A.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},A.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new E(t)},n(E,A),E.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},E.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},E.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var i=t.imul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},E.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var i=t.mul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),h=n;return n.cmp(this.m)>=0?h=n.isub(this.m):n.cmpn(0)<0&&(h=n.iadd(this.m)),h._forceRed(this)},E.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,i(52)(t))},,function(t,e,i){"use strict";const r=e;r.bignum=i(174),r.define=i(273).define,r.base=i(276),r.constants=i(277),r.decoders=i(178),r.encoders=i(176)},function(t,e,i){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function n(t,e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}function o(t,e,i){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(i=e,e=10),this._init(t||0,e||10,i||"be"))}var h;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{h=i(175).Buffer}catch(t){}function s(t,e,i){for(var r=0,n=Math.min(t.length,i),o=e;o<n;o++){var h=t.charCodeAt(o)-48;r<<=4,r|=h>=49&&h<=54?h-49+10:h>=17&&h<=22?h-17+10:15&h}return r}function a(t,e,i,r){for(var n=0,o=Math.min(t.length,i),h=e;h<o;h++){var s=t.charCodeAt(h)-48;n*=r,n+=s>=49?s-49+10:s>=17?s-17+10:s}return n}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"==typeof t)return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&n++,16===e?this._parseHex(t,n):this._parseBase(t,e,n),"-"===t[0]&&(this.negative=1),this.strip(),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,h,s=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)h=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)h=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var r,n,o=0;for(i=t.length-6,r=0;i>=e;i-=6)n=s(t,i,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);i+6!==e&&(n=s(t,e,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,i){this.words=[0],this.length=1;for(var r=0,n=1;n<=67108863;n*=e)r++;r--,n=n/e|0;for(var o=t.length-i,h=o%r,s=Math.min(o,o-h)+i,u=0,f=i;f<s;f+=r)u=a(t,f,f+r,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==h){var l=1;for(u=a(t,f,t.length,e),f=0;f<h;f++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,i){i.negative=e.negative^t.negative;var r=t.length+e.length|0;i.length=r,r=r-1|0;var n=0|t.words[0],o=0|e.words[0],h=n*o,s=67108863&h,a=h/67108864|0;i.words[0]=s;for(var u=1;u<r;u++){for(var f=a>>>26,l=67108863&a,d=Math.min(u,e.length-1),c=Math.max(0,u-t.length+1);c<=d;c++){var p=u-c|0;f+=(h=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&h}i.words[u]=0|l,a=0|f}return 0!==a?i.words[u]=0|a:i.length--,i.strip()}o.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,h=0;h<this.length;h++){var s=this.words[h],a=(16777215&(s<<n|o)).toString(16);i=0!==(o=s>>>24-n&16777215)||h!==this.length-1?u[6-a.length]+a+i:a+i,(n+=2)>=26&&(n-=26,h--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var d=f[t],c=l[t];i="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(c).toString(t);i=(p=p.idivn(c)).isZero()?m+i:u[d-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return r(void 0!==h),this.toArrayLike(h,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,i){var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var h,s,a="le"===e,u=new t(o),f=this.clone();if(a){for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[s]=h;for(;s<o;s++)u[s]=0}else{for(s=0;s<o-n;s++)u[s]=0;for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[o-s-1]=h}return u},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,i=0;return e>=4096&&(i+=13,e>>>=13),e>=64&&(i+=7,e>>>=7),e>=8&&(i+=4,e>>>=4),e>=2&&(i+=2,e>>>=2),i+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,i=0;return 0==(8191&e)&&(i+=13,e>>>=13),0==(127&e)&&(i+=7,e>>>=7),0==(15&e)&&(i+=4,e>>>=4),0==(3&e)&&(i+=2,e>>>=2),0==(1&e)&&i++,i},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var i=this._zeroBits(this.words[e]);if(t+=i,26!==i)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var i=0;i<e.length;i++)this.words[i]=this.words[i]&t.words[i];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,i;this.length>t.length?(e=this,i=t):(e=t,i=this);for(var r=0;r<i.length;r++)this.words[r]=e.words[r]^i.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},o.prototype.iadd=function(t){var e,i,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(i=this,r=t):(i=t,r=this);for(var n=0,o=0;o<r.length;o++)e=(0|i.words[o])+(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<i.length;o++)e=(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=i.length,0!==n)this.words[this.length]=n,this.length++;else if(i!==this)for(;o<i.length;o++)this.words[o]=i.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var i,r,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(i=this,r=t):(i=t,r=this);for(var o=0,h=0;h<r.length;h++)o=(e=(0|i.words[h])-(0|r.words[h])+o)>>26,this.words[h]=67108863&e;for(;0!==o&&h<i.length;h++)o=(e=(0|i.words[h])+o)>>26,this.words[h]=67108863&e;if(0===o&&h<i.length&&i!==this)for(;h<i.length;h++)this.words[h]=i.words[h];return this.length=Math.max(this.length,h),i!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var c=function(t,e,i){var r,n,o,h=t.words,s=e.words,a=i.words,u=0,f=0|h[0],l=8191&f,d=f>>>13,c=0|h[1],p=8191&c,m=c>>>13,v=0|h[2],g=8191&v,b=v>>>13,y=0|h[3],w=8191&y,M=y>>>13,_=0|h[4],S=8191&_,k=_>>>13,A=0|h[5],E=8191&A,x=A>>>13,B=0|h[6],R=8191&B,I=B>>>13,T=0|h[7],P=8191&T,C=T>>>13,L=0|h[8],q=8191&L,j=L>>>13,O=0|h[9],N=8191&O,D=O>>>13,z=0|s[0],U=8191&z,H=z>>>13,Z=0|s[1],F=8191&Z,K=Z>>>13,W=0|s[2],Y=8191&W,V=W>>>13,X=0|s[3],G=8191&X,J=X>>>13,$=0|s[4],Q=8191&$,tt=$>>>13,et=0|s[5],it=8191&et,rt=et>>>13,nt=0|s[6],ot=8191&nt,ht=nt>>>13,st=0|s[7],at=8191&st,ut=st>>>13,ft=0|s[8],lt=8191&ft,dt=ft>>>13,ct=0|s[9],pt=8191&ct,mt=ct>>>13;i.negative=t.negative^e.negative,i.length=19;var vt=(u+(r=Math.imul(l,U))|0)+((8191&(n=(n=Math.imul(l,H))+Math.imul(d,U)|0))<<13)|0;u=((o=Math.imul(d,H))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(p,U),n=(n=Math.imul(p,H))+Math.imul(m,U)|0,o=Math.imul(m,H);var gt=(u+(r=r+Math.imul(l,F)|0)|0)+((8191&(n=(n=n+Math.imul(l,K)|0)+Math.imul(d,F)|0))<<13)|0;u=((o=o+Math.imul(d,K)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(g,U),n=(n=Math.imul(g,H))+Math.imul(b,U)|0,o=Math.imul(b,H),r=r+Math.imul(p,F)|0,n=(n=n+Math.imul(p,K)|0)+Math.imul(m,F)|0,o=o+Math.imul(m,K)|0;var bt=(u+(r=r+Math.imul(l,Y)|0)|0)+((8191&(n=(n=n+Math.imul(l,V)|0)+Math.imul(d,Y)|0))<<13)|0;u=((o=o+Math.imul(d,V)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(w,U),n=(n=Math.imul(w,H))+Math.imul(M,U)|0,o=Math.imul(M,H),r=r+Math.imul(g,F)|0,n=(n=n+Math.imul(g,K)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,K)|0,r=r+Math.imul(p,Y)|0,n=(n=n+Math.imul(p,V)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,V)|0;var yt=(u+(r=r+Math.imul(l,G)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,G)|0))<<13)|0;u=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(S,U),n=(n=Math.imul(S,H))+Math.imul(k,U)|0,o=Math.imul(k,H),r=r+Math.imul(w,F)|0,n=(n=n+Math.imul(w,K)|0)+Math.imul(M,F)|0,o=o+Math.imul(M,K)|0,r=r+Math.imul(g,Y)|0,n=(n=n+Math.imul(g,V)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,V)|0,r=r+Math.imul(p,G)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,J)|0;var wt=(u+(r=r+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;u=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(E,U),n=(n=Math.imul(E,H))+Math.imul(x,U)|0,o=Math.imul(x,H),r=r+Math.imul(S,F)|0,n=(n=n+Math.imul(S,K)|0)+Math.imul(k,F)|0,o=o+Math.imul(k,K)|0,r=r+Math.imul(w,Y)|0,n=(n=n+Math.imul(w,V)|0)+Math.imul(M,Y)|0,o=o+Math.imul(M,V)|0,r=r+Math.imul(g,G)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,J)|0,r=r+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Mt=(u+(r=r+Math.imul(l,it)|0)|0)+((8191&(n=(n=n+Math.imul(l,rt)|0)+Math.imul(d,it)|0))<<13)|0;u=((o=o+Math.imul(d,rt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(R,U),n=(n=Math.imul(R,H))+Math.imul(I,U)|0,o=Math.imul(I,H),r=r+Math.imul(E,F)|0,n=(n=n+Math.imul(E,K)|0)+Math.imul(x,F)|0,o=o+Math.imul(x,K)|0,r=r+Math.imul(S,Y)|0,n=(n=n+Math.imul(S,V)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,V)|0,r=r+Math.imul(w,G)|0,n=(n=n+Math.imul(w,J)|0)+Math.imul(M,G)|0,o=o+Math.imul(M,J)|0,r=r+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,r=r+Math.imul(p,it)|0,n=(n=n+Math.imul(p,rt)|0)+Math.imul(m,it)|0,o=o+Math.imul(m,rt)|0;var _t=(u+(r=r+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,ht)|0)+Math.imul(d,ot)|0))<<13)|0;u=((o=o+Math.imul(d,ht)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(P,U),n=(n=Math.imul(P,H))+Math.imul(C,U)|0,o=Math.imul(C,H),r=r+Math.imul(R,F)|0,n=(n=n+Math.imul(R,K)|0)+Math.imul(I,F)|0,o=o+Math.imul(I,K)|0,r=r+Math.imul(E,Y)|0,n=(n=n+Math.imul(E,V)|0)+Math.imul(x,Y)|0,o=o+Math.imul(x,V)|0,r=r+Math.imul(S,G)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,J)|0,r=r+Math.imul(w,Q)|0,n=(n=n+Math.imul(w,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,r=r+Math.imul(g,it)|0,n=(n=n+Math.imul(g,rt)|0)+Math.imul(b,it)|0,o=o+Math.imul(b,rt)|0,r=r+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,ht)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,ht)|0;var St=(u+(r=r+Math.imul(l,at)|0)|0)+((8191&(n=(n=n+Math.imul(l,ut)|0)+Math.imul(d,at)|0))<<13)|0;u=((o=o+Math.imul(d,ut)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(q,U),n=(n=Math.imul(q,H))+Math.imul(j,U)|0,o=Math.imul(j,H),r=r+Math.imul(P,F)|0,n=(n=n+Math.imul(P,K)|0)+Math.imul(C,F)|0,o=o+Math.imul(C,K)|0,r=r+Math.imul(R,Y)|0,n=(n=n+Math.imul(R,V)|0)+Math.imul(I,Y)|0,o=o+Math.imul(I,V)|0,r=r+Math.imul(E,G)|0,n=(n=n+Math.imul(E,J)|0)+Math.imul(x,G)|0,o=o+Math.imul(x,J)|0,r=r+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,r=r+Math.imul(w,it)|0,n=(n=n+Math.imul(w,rt)|0)+Math.imul(M,it)|0,o=o+Math.imul(M,rt)|0,r=r+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,ht)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,ht)|0,r=r+Math.imul(p,at)|0,n=(n=n+Math.imul(p,ut)|0)+Math.imul(m,at)|0,o=o+Math.imul(m,ut)|0;var kt=(u+(r=r+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;u=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(N,U),n=(n=Math.imul(N,H))+Math.imul(D,U)|0,o=Math.imul(D,H),r=r+Math.imul(q,F)|0,n=(n=n+Math.imul(q,K)|0)+Math.imul(j,F)|0,o=o+Math.imul(j,K)|0,r=r+Math.imul(P,Y)|0,n=(n=n+Math.imul(P,V)|0)+Math.imul(C,Y)|0,o=o+Math.imul(C,V)|0,r=r+Math.imul(R,G)|0,n=(n=n+Math.imul(R,J)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,J)|0,r=r+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,r=r+Math.imul(S,it)|0,n=(n=n+Math.imul(S,rt)|0)+Math.imul(k,it)|0,o=o+Math.imul(k,rt)|0,r=r+Math.imul(w,ot)|0,n=(n=n+Math.imul(w,ht)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ht)|0,r=r+Math.imul(g,at)|0,n=(n=n+Math.imul(g,ut)|0)+Math.imul(b,at)|0,o=o+Math.imul(b,ut)|0,r=r+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(u+(r=r+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;u=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(N,F),n=(n=Math.imul(N,K))+Math.imul(D,F)|0,o=Math.imul(D,K),r=r+Math.imul(q,Y)|0,n=(n=n+Math.imul(q,V)|0)+Math.imul(j,Y)|0,o=o+Math.imul(j,V)|0,r=r+Math.imul(P,G)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(C,G)|0,o=o+Math.imul(C,J)|0,r=r+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,r=r+Math.imul(E,it)|0,n=(n=n+Math.imul(E,rt)|0)+Math.imul(x,it)|0,o=o+Math.imul(x,rt)|0,r=r+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,ht)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ht)|0,r=r+Math.imul(w,at)|0,n=(n=n+Math.imul(w,ut)|0)+Math.imul(M,at)|0,o=o+Math.imul(M,ut)|0,r=r+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(u+(r=r+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;u=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(N,Y),n=(n=Math.imul(N,V))+Math.imul(D,Y)|0,o=Math.imul(D,V),r=r+Math.imul(q,G)|0,n=(n=n+Math.imul(q,J)|0)+Math.imul(j,G)|0,o=o+Math.imul(j,J)|0,r=r+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(C,Q)|0,o=o+Math.imul(C,tt)|0,r=r+Math.imul(R,it)|0,n=(n=n+Math.imul(R,rt)|0)+Math.imul(I,it)|0,o=o+Math.imul(I,rt)|0,r=r+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,ht)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,ht)|0,r=r+Math.imul(S,at)|0,n=(n=n+Math.imul(S,ut)|0)+Math.imul(k,at)|0,o=o+Math.imul(k,ut)|0,r=r+Math.imul(w,lt)|0,n=(n=n+Math.imul(w,dt)|0)+Math.imul(M,lt)|0,o=o+Math.imul(M,dt)|0;var xt=(u+(r=r+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(b,pt)|0))<<13)|0;u=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(N,G),n=(n=Math.imul(N,J))+Math.imul(D,G)|0,o=Math.imul(D,J),r=r+Math.imul(q,Q)|0,n=(n=n+Math.imul(q,tt)|0)+Math.imul(j,Q)|0,o=o+Math.imul(j,tt)|0,r=r+Math.imul(P,it)|0,n=(n=n+Math.imul(P,rt)|0)+Math.imul(C,it)|0,o=o+Math.imul(C,rt)|0,r=r+Math.imul(R,ot)|0,n=(n=n+Math.imul(R,ht)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,ht)|0,r=r+Math.imul(E,at)|0,n=(n=n+Math.imul(E,ut)|0)+Math.imul(x,at)|0,o=o+Math.imul(x,ut)|0,r=r+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,dt)|0;var Bt=(u+(r=r+Math.imul(w,pt)|0)|0)+((8191&(n=(n=n+Math.imul(w,mt)|0)+Math.imul(M,pt)|0))<<13)|0;u=((o=o+Math.imul(M,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(N,Q),n=(n=Math.imul(N,tt))+Math.imul(D,Q)|0,o=Math.imul(D,tt),r=r+Math.imul(q,it)|0,n=(n=n+Math.imul(q,rt)|0)+Math.imul(j,it)|0,o=o+Math.imul(j,rt)|0,r=r+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,ht)|0)+Math.imul(C,ot)|0,o=o+Math.imul(C,ht)|0,r=r+Math.imul(R,at)|0,n=(n=n+Math.imul(R,ut)|0)+Math.imul(I,at)|0,o=o+Math.imul(I,ut)|0,r=r+Math.imul(E,lt)|0,n=(n=n+Math.imul(E,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(u+(r=r+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(k,pt)|0))<<13)|0;u=((o=o+Math.imul(k,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,r=Math.imul(N,it),n=(n=Math.imul(N,rt))+Math.imul(D,it)|0,o=Math.imul(D,rt),r=r+Math.imul(q,ot)|0,n=(n=n+Math.imul(q,ht)|0)+Math.imul(j,ot)|0,o=o+Math.imul(j,ht)|0,r=r+Math.imul(P,at)|0,n=(n=n+Math.imul(P,ut)|0)+Math.imul(C,at)|0,o=o+Math.imul(C,ut)|0,r=r+Math.imul(R,lt)|0,n=(n=n+Math.imul(R,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(u+(r=r+Math.imul(E,pt)|0)|0)+((8191&(n=(n=n+Math.imul(E,mt)|0)+Math.imul(x,pt)|0))<<13)|0;u=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(N,ot),n=(n=Math.imul(N,ht))+Math.imul(D,ot)|0,o=Math.imul(D,ht),r=r+Math.imul(q,at)|0,n=(n=n+Math.imul(q,ut)|0)+Math.imul(j,at)|0,o=o+Math.imul(j,ut)|0,r=r+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(C,lt)|0,o=o+Math.imul(C,dt)|0;var Tt=(u+(r=r+Math.imul(R,pt)|0)|0)+((8191&(n=(n=n+Math.imul(R,mt)|0)+Math.imul(I,pt)|0))<<13)|0;u=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(N,at),n=(n=Math.imul(N,ut))+Math.imul(D,at)|0,o=Math.imul(D,ut),r=r+Math.imul(q,lt)|0,n=(n=n+Math.imul(q,dt)|0)+Math.imul(j,lt)|0,o=o+Math.imul(j,dt)|0;var Pt=(u+(r=r+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(C,pt)|0))<<13)|0;u=((o=o+Math.imul(C,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,r=Math.imul(N,lt),n=(n=Math.imul(N,dt))+Math.imul(D,lt)|0,o=Math.imul(D,dt);var Ct=(u+(r=r+Math.imul(q,pt)|0)|0)+((8191&(n=(n=n+Math.imul(q,mt)|0)+Math.imul(j,pt)|0))<<13)|0;u=((o=o+Math.imul(j,mt)|0)+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863;var Lt=(u+(r=Math.imul(N,pt))|0)+((8191&(n=(n=Math.imul(N,mt))+Math.imul(D,pt)|0))<<13)|0;return u=((o=Math.imul(D,mt))+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,a[0]=vt,a[1]=gt,a[2]=bt,a[3]=yt,a[4]=wt,a[5]=Mt,a[6]=_t,a[7]=St,a[8]=kt,a[9]=At,a[10]=Et,a[11]=xt,a[12]=Bt,a[13]=Rt,a[14]=It,a[15]=Tt,a[16]=Pt,a[17]=Ct,a[18]=Lt,0!==u&&(a[19]=u,i.length++),i};function p(t,e,i){return(new m).mulp(t,e,i)}function m(t,e){this.x=t,this.y=e}Math.imul||(c=d),o.prototype.mulTo=function(t,e){var i=this.length+t.length;return 10===this.length&&10===t.length?c(this,t,e):i<63?d(this,t,e):i<1024?function(t,e,i){i.negative=e.negative^t.negative,i.length=t.length+e.length;for(var r=0,n=0,o=0;o<i.length-1;o++){var h=n;n=0;for(var s=67108863&r,a=Math.min(o,e.length-1),u=Math.max(0,o-t.length+1);u<=a;u++){var f=o-u,l=(0|t.words[f])*(0|e.words[u]),d=67108863&l;s=67108863&(d=d+s|0),n+=(h=(h=h+(l/67108864|0)|0)+(d>>>26)|0)>>>26,h&=67108863}i.words[o]=s,r=h,h=n}return 0!==r?i.words[o]=r:i.length--,i.strip()}(this,t,e):p(this,t,e)},m.prototype.makeRBT=function(t){for(var e=new Array(t),i=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,i,t);return e},m.prototype.revBin=function(t,e,i){if(0===t||t===i-1)return t;for(var r=0,n=0;n<e;n++)r|=(1&t)<<e-n-1,t>>=1;return r},m.prototype.permute=function(t,e,i,r,n,o){for(var h=0;h<o;h++)r[h]=e[t[h]],n[h]=i[t[h]]},m.prototype.transform=function(t,e,i,r,n,o){this.permute(o,t,e,i,r,n);for(var h=1;h<n;h<<=1)for(var s=h<<1,a=Math.cos(2*Math.PI/s),u=Math.sin(2*Math.PI/s),f=0;f<n;f+=s)for(var l=a,d=u,c=0;c<h;c++){var p=i[f+c],m=r[f+c],v=i[f+c+h],g=r[f+c+h],b=l*v-d*g;g=l*g+d*v,v=b,i[f+c]=p+v,r[f+c]=m+g,i[f+c+h]=p-v,r[f+c+h]=m-g,c!==s&&(b=a*l-u*d,d=a*d+u*l,l=b)}},m.prototype.guessLen13b=function(t,e){var i=1|Math.max(e,t),r=1&i,n=0;for(i=i/2|0;i;i>>>=1)n++;return 1<<n+1+r},m.prototype.conjugate=function(t,e,i){if(!(i<=1))for(var r=0;r<i/2;r++){var n=t[r];t[r]=t[i-r-1],t[i-r-1]=n,n=e[r],e[r]=-e[i-r-1],e[i-r-1]=-n}},m.prototype.normalize13b=function(t,e){for(var i=0,r=0;r<e/2;r++){var n=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+i;t[r]=67108863&n,i=n<67108864?0:n/67108864|0}return t},m.prototype.convert13b=function(t,e,i,n){for(var o=0,h=0;h<e;h++)o+=0|t[h],i[2*h]=8191&o,o>>>=13,i[2*h+1]=8191&o,o>>>=13;for(h=2*e;h<n;++h)i[h]=0;r(0===o),r(0==(-8192&o))},m.prototype.stub=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=0;return e},m.prototype.mulp=function(t,e,i){var r=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(r),o=this.stub(r),h=new Array(r),s=new Array(r),a=new Array(r),u=new Array(r),f=new Array(r),l=new Array(r),d=i.words;d.length=r,this.convert13b(t.words,t.length,h,r),this.convert13b(e.words,e.length,u,r),this.transform(h,o,s,a,r,n),this.transform(u,o,f,l,r,n);for(var c=0;c<r;c++){var p=s[c]*f[c]-a[c]*l[c];a[c]=s[c]*l[c]+a[c]*f[c],s[c]=p}return this.conjugate(s,a,r),this.transform(s,a,d,o,r,n),this.conjugate(d,o,r),this.normalize13b(d,r),i.negative=t.negative^e.negative,i.length=t.length+e.length,i.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),p(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,o=(67108863&n)+(67108863&e);e>>=26,e+=n/67108864|0,e+=o>>>26,this.words[i]=67108863&o}return 0!==e&&(this.words[i]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),i=0;i<e.length;i++){var r=i/26|0,n=i%26;e[i]=(t.words[r]&1<<n)>>>n}return e}(t);if(0===e.length)return new o(1);for(var i=this,r=0;r<e.length&&0===e[r];r++,i=i.sqr());if(++r<e.length)for(var n=i.sqr();r<e.length;r++,n=n.sqr())0!==e[r]&&(i=i.mul(n));return i},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var h=0;for(e=0;e<this.length;e++){var s=this.words[e]&o,a=(0|this.words[e])-s<<i;this.words[e]=a|h,h=s>>>26-i}h&&(this.words[e]=h,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this.strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,h=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,a=i;if(n-=h,n=Math.max(0,n),a){for(var u=0;u<h;u++)a.words[u]=this.words[u];a.length=h}if(0===h);else if(this.length>h)for(this.length-=h,u=0;u<this.length;u++)this.words[u]=this.words[u+h];else this.words[0]=0,this.length=1;var f=0;for(u=this.length-1;u>=0&&(0!==f||u>=n);u--){var l=0|this.words[u];this.words[u]=f<<26-o|l>>>o,f=l&s}return a&&0!==f&&(a.words[a.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i)&&!!(this.words[i]&n)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,i){var n,o,h=t.length+i;this._expand(h);var s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+s;var a=(0|t.words[n])*e;s=((o-=67108863&a)>>26)-(a/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)s=(o=(0|this.words[n+i])+s)>>26,this.words[n+i]=67108863&o;if(0===s)return this.strip();for(r(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var i=(this.length,t.length),r=this.clone(),n=t,h=0|n.words[n.length-1];0!==(i=26-this._countBits(h))&&(n=n.ushln(i),r.iushln(i),h=0|n.words[n.length-1]);var s,a=r.length-n.length;if("mod"!==e){(s=new o(null)).length=a+1,s.words=new Array(s.length);for(var u=0;u<s.length;u++)s.words[u]=0}var f=r.clone()._ishlnsubmul(n,1,a);0===f.negative&&(r=f,s&&(s.words[a]=1));for(var l=a-1;l>=0;l--){var d=67108864*(0|r.words[n.length+l])+(0|r.words[n.length+l-1]);for(d=Math.min(d/h|0,67108863),r._ishlnsubmul(n,d,l);0!==r.negative;)d--,r.negative=0,r._ishlnsubmul(n,1,l),r.isZero()||(r.negative^=1);s&&(s.words[l]=d)}return s&&s.strip(),r.strip(),"div"!==e&&0!==i&&r.iushrn(i),{div:s||null,mod:r}},o.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(n=s.div.neg()),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.iadd(t)),{div:n,mod:h}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.isub(t)),{div:s.div,mod:h}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var n,h,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var i=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),n=t.andln(1),o=i.cmp(r);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(e*i+(0|this.words[n]))%t;return i},o.prototype.idivn=function(t){r(t<=67108863);for(var e=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*e;this.words[i]=n/t|0,e=n%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n=new o(1),h=new o(0),s=new o(0),a=new o(1),u=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++u;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(n.isOdd()||h.isOdd())&&(n.iadd(f),h.isub(l)),n.iushrn(1),h.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(f),a.isub(l)),s.iushrn(1),a.iushrn(1);e.cmp(i)>=0?(e.isub(i),n.isub(s),h.isub(a)):(i.isub(e),s.isub(n),a.isub(h))}return{a:s,b:a,gcd:i.iushln(u)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n,h=new o(1),s=new o(0),a=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var u=0,f=1;0==(e.words[0]&f)&&u<26;++u,f<<=1);if(u>0)for(e.iushrn(u);u-- >0;)h.isOdd()&&h.iadd(a),h.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(i)>=0?(e.isub(i),h.isub(s)):(i.isub(e),s.isub(h))}return(n=0===e.cmpn(1)?h:s).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),i=t.clone();e.negative=0,i.negative=0;for(var r=0;e.isEven()&&i.isEven();r++)e.iushrn(1),i.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;i.isEven();)i.iushrn(1);var n=e.cmp(i);if(n<0){var o=e;e=i,i=o}else if(0===n||0===i.cmpn(1))break;e.isub(i)}return i.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,h=i;0!==o&&h<this.length;h++){var s=0|this.words[h];o=(s+=o)>>>26,s&=67108863,this.words[h]=s}return 0!==o&&(this.words[h]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,i=this.length-1;i>=0;i--){var r=0|this.words[i],n=0|t.words[i];if(r!==n){r<n?e=-1:r>n&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new _(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function g(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){g.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function y(){g.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){g.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){g.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function S(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},g.prototype.ireduce=function(t){var e,i=t;do{this.split(i,this.tmp),e=(i=(i=this.imulK(i)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:i.ucmp(this.p);return 0===r?(i.words[0]=0,i.length=1):r>0?i.isub(this.p):void 0!==i.strip?i.strip():i._strip(),i},g.prototype.split=function(t,e){t.iushrn(this.n,0,e)},g.prototype.imulK=function(t){return t.imul(this.k)},n(b,g),b.prototype.split=function(t,e){for(var i=Math.min(t.length,9),r=0;r<i;r++)e.words[r]=t.words[r];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var n=t.words[9];for(e.words[e.length++]=4194303&n,r=10;r<t.length;r++){var o=0|t.words[r];t.words[r-10]=(4194303&o)<<4|n>>>22,n=o}n>>>=22,t.words[r-10]=n,0===n&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,i=0;i<t.length;i++){var r=0|t.words[i];e+=977*r,t.words[i]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(y,g),n(w,g),n(M,g),M.prototype.imulK=function(t){for(var e=0,i=0;i<t.length;i++){var r=19*(0|t.words[i])+e,n=67108863&r;r>>>=26,t.words[i]=n,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new b;else if("p224"===t)e=new y;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new M}return v[t]=e,e},_.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,e){this._verify2(t,e);var i=t.add(e);return i.cmp(this.m)>=0&&i.isub(this.m),i._forceRed(this)},_.prototype.iadd=function(t,e){this._verify2(t,e);var i=t.iadd(e);return i.cmp(this.m)>=0&&i.isub(this.m),i},_.prototype.sub=function(t,e){this._verify2(t,e);var i=t.sub(e);return i.cmpn(0)<0&&i.iadd(this.m),i._forceRed(this)},_.prototype.isub=function(t,e){this._verify2(t,e);var i=t.isub(e);return i.cmpn(0)<0&&i.iadd(this.m),i},_.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},_.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},_.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new o(1)).iushrn(2);return this.pow(t,i)}for(var n=this.m.subn(1),h=0;!n.isZero()&&0===n.andln(1);)h++,n.iushrn(1);r(!n.isZero());var s=new o(1).toRed(this),a=s.redNeg(),u=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,u).cmp(a);)f.redIAdd(a);for(var l=this.pow(f,n),d=this.pow(t,n.addn(1).iushrn(1)),c=this.pow(t,n),p=h;0!==c.cmp(s);){for(var m=c,v=0;0!==m.cmp(s);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new o(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},_.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},_.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var i=new Array(16);i[0]=new o(1).toRed(this),i[1]=t;for(var r=2;r<i.length;r++)i[r]=this.mul(i[r-1],t);var n=i[0],h=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var u=e.words[r],f=a-1;f>=0;f--){var l=u>>f&1;n!==i[0]&&(n=this.sqr(n)),0!==l||0!==h?(h<<=1,h|=l,(4===++s||0===r&&0===f)&&(n=this.mul(n,i[h]),s=0,h=0)):s=0}a=26}return n},_.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},_.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new S(t)},n(S,_),S.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},S.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},S.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var i=t.imul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},S.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var i=t.mul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),h=n;return n.cmp(this.m)>=0?h=n.isub(this.m):n.cmpn(0)<0&&(h=n.iadd(this.m)),h._forceRed(this)},S.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,i(52)(t))},,function(t,e,i){"use strict";const r=e;r.der=i(177),r.pem=i(274)},function(t,e,i){"use strict";const r=i(32),n=i(109).Buffer,o=i(110),h=i(112);function s(t){this.enc="der",this.name=t.name,this.entity=t,this.tree=new a,this.tree._init(t.body)}function a(t){o.call(this,"der",t)}function u(t){return t<10?"0"+t:t}t.exports=s,s.prototype.encode=function(t,e){return this.tree._encode(t,e).join()},r(a,o),a.prototype._encodeComposite=function(t,e,i,r){const o=function(t,e,i,r){let n;"seqof"===t?t="seq":"setof"===t&&(t="set");if(h.tagByName.hasOwnProperty(t))n=h.tagByName[t];else{if("number"!=typeof t||(0|t)!==t)return r.error("Unknown tag: "+t);n=t}if(n>=31)return r.error("Multi-octet tag encoding unsupported");e||(n|=32);return n|=h.tagClassByName[i||"universal"]<<6,n}(t,e,i,this.reporter);if(r.length<128){const t=n.alloc(2);return t[0]=o,t[1]=r.length,this._createEncoderBuffer([t,r])}let s=1;for(let t=r.length;t>=256;t>>=8)s++;const a=n.alloc(2+s);a[0]=o,a[1]=128|s;for(let t=1+s,e=r.length;e>0;t--,e>>=8)a[t]=255&e;return this._createEncoderBuffer([a,r])},a.prototype._encodeStr=function(t,e){if("bitstr"===e)return this._createEncoderBuffer([0|t.unused,t.data]);if("bmpstr"===e){const e=n.alloc(2*t.length);for(let i=0;i<t.length;i++)e.writeUInt16BE(t.charCodeAt(i),2*i);return this._createEncoderBuffer(e)}return"numstr"===e?this._isNumstr(t)?this._createEncoderBuffer(t):this.reporter.error("Encoding of string type: numstr supports only digits and space"):"printstr"===e?this._isPrintstr(t)?this._createEncoderBuffer(t):this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark"):/str$/.test(e)||"objDesc"===e?this._createEncoderBuffer(t):this.reporter.error("Encoding of string type: "+e+" unsupported")},a.prototype._encodeObjid=function(t,e,i){if("string"==typeof t){if(!e)return this.reporter.error("string objid given, but no values map found");if(!e.hasOwnProperty(t))return this.reporter.error("objid not found in values map");t=e[t].split(/[\s.]+/g);for(let e=0;e<t.length;e++)t[e]|=0}else if(Array.isArray(t)){t=t.slice();for(let e=0;e<t.length;e++)t[e]|=0}if(!Array.isArray(t))return this.reporter.error("objid() should be either array or string, got: "+JSON.stringify(t));if(!i){if(t[1]>=40)return this.reporter.error("Second objid identifier OOB");t.splice(0,2,40*t[0]+t[1])}let r=0;for(let e=0;e<t.length;e++){let i=t[e];for(r++;i>=128;i>>=7)r++}const o=n.alloc(r);let h=o.length-1;for(let e=t.length-1;e>=0;e--){let i=t[e];for(o[h--]=127&i;(i>>=7)>0;)o[h--]=128|127&i}return this._createEncoderBuffer(o)},a.prototype._encodeTime=function(t,e){let i;const r=new Date(t);return"gentime"===e?i=[u(r.getUTCFullYear()),u(r.getUTCMonth()+1),u(r.getUTCDate()),u(r.getUTCHours()),u(r.getUTCMinutes()),u(r.getUTCSeconds()),"Z"].join(""):"utctime"===e?i=[u(r.getUTCFullYear()%100),u(r.getUTCMonth()+1),u(r.getUTCDate()),u(r.getUTCHours()),u(r.getUTCMinutes()),u(r.getUTCSeconds()),"Z"].join(""):this.reporter.error("Encoding "+e+" time is not supported yet"),this._encodeStr(i,"octstr")},a.prototype._encodeNull=function(){return this._createEncoderBuffer("")},a.prototype._encodeInt=function(t,e){if("string"==typeof t){if(!e)return this.reporter.error("String int or enum given, but no values map");if(!e.hasOwnProperty(t))return this.reporter.error("Values map doesn't contain: "+JSON.stringify(t));t=e[t]}if("number"!=typeof t&&!n.isBuffer(t)){const e=t.toArray();!t.sign&&128&e[0]&&e.unshift(0),t=n.from(e)}if(n.isBuffer(t)){let e=t.length;0===t.length&&e++;const i=n.alloc(e);return t.copy(i),0===t.length&&(i[0]=0),this._createEncoderBuffer(i)}if(t<128)return this._createEncoderBuffer(t);if(t<256)return this._createEncoderBuffer([0,t]);let i=1;for(let e=t;e>=256;e>>=8)i++;const r=new Array(i);for(let e=r.length-1;e>=0;e--)r[e]=255&t,t>>=8;return 128&r[0]&&r.unshift(0),this._createEncoderBuffer(n.from(r))},a.prototype._encodeBool=function(t){return this._createEncoderBuffer(t?255:0)},a.prototype._use=function(t,e){return"function"==typeof t&&(t=t(e)),t._getEncoder("der").tree},a.prototype._skipDefault=function(t,e,i){const r=this._baseState;let n;if(null===r.default)return!1;const o=t.join();if(void 0===r.defaultBuffer&&(r.defaultBuffer=this._encodeValue(r.default,e,i).join()),o.length!==r.defaultBuffer.length)return!1;for(n=0;n<o.length;n++)if(o[n]!==r.defaultBuffer[n])return!1;return!0}},function(t,e,i){"use strict";const r=e;r.der=i(179),r.pem=i(275)},function(t,e,i){"use strict";const r=i(32),n=i(174),o=i(80).DecoderBuffer,h=i(110),s=i(112);function a(t){this.enc="der",this.name=t.name,this.entity=t,this.tree=new u,this.tree._init(t.body)}function u(t){h.call(this,"der",t)}function f(t,e){let i=t.readUInt8(e);if(t.isError(i))return i;const r=s.tagClass[i>>6],n=0==(32&i);if(31==(31&i)){let r=i;for(i=0;128==(128&r);){if(r=t.readUInt8(e),t.isError(r))return r;i<<=7,i|=127&r}}else i&=31;return{cls:r,primitive:n,tag:i,tagStr:s.tag[i]}}function l(t,e,i){let r=t.readUInt8(i);if(t.isError(r))return r;if(!e&&128===r)return null;if(0==(128&r))return r;const n=127&r;if(n>4)return t.error("length octect is too long");r=0;for(let e=0;e<n;e++){r<<=8;const e=t.readUInt8(i);if(t.isError(e))return e;r|=e}return r}t.exports=a,a.prototype.decode=function(t,e){return o.isDecoderBuffer(t)||(t=new o(t,e)),this.tree._decode(t,e)},r(u,h),u.prototype._peekTag=function(t,e,i){if(t.isEmpty())return!1;const r=t.save(),n=f(t,'Failed to peek tag: "'+e+'"');return t.isError(n)?n:(t.restore(r),n.tag===e||n.tagStr===e||n.tagStr+"of"===e||i)},u.prototype._decodeTag=function(t,e,i){const r=f(t,'Failed to decode tag of "'+e+'"');if(t.isError(r))return r;let n=l(t,r.primitive,'Failed to get length of "'+e+'"');if(t.isError(n))return n;if(!i&&r.tag!==e&&r.tagStr!==e&&r.tagStr+"of"!==e)return t.error('Failed to match tag: "'+e+'"');if(r.primitive||null!==n)return t.skip(n,'Failed to match body of: "'+e+'"');const o=t.save(),h=this._skipUntilEnd(t,'Failed to skip indefinite length body: "'+this.tag+'"');return t.isError(h)?h:(n=t.offset-o.offset,t.restore(o),t.skip(n,'Failed to match body of: "'+e+'"'))},u.prototype._skipUntilEnd=function(t,e){for(;;){const i=f(t,e);if(t.isError(i))return i;const r=l(t,i.primitive,e);if(t.isError(r))return r;let n;if(n=i.primitive||null!==r?t.skip(r):this._skipUntilEnd(t,e),t.isError(n))return n;if("end"===i.tagStr)break}},u.prototype._decodeList=function(t,e,i,r){const n=[];for(;!t.isEmpty();){const e=this._peekTag(t,"end");if(t.isError(e))return e;const o=i.decode(t,"der",r);if(t.isError(o)&&e)break;n.push(o)}return n},u.prototype._decodeStr=function(t,e){if("bitstr"===e){const e=t.readUInt8();return t.isError(e)?e:{unused:e,data:t.raw()}}if("bmpstr"===e){const e=t.raw();if(e.length%2==1)return t.error("Decoding of string type: bmpstr length mismatch");let i="";for(let t=0;t<e.length/2;t++)i+=String.fromCharCode(e.readUInt16BE(2*t));return i}if("numstr"===e){const e=t.raw().toString("ascii");return this._isNumstr(e)?e:t.error("Decoding of string type: numstr unsupported characters")}if("octstr"===e)return t.raw();if("objDesc"===e)return t.raw();if("printstr"===e){const e=t.raw().toString("ascii");return this._isPrintstr(e)?e:t.error("Decoding of string type: printstr unsupported characters")}return/str$/.test(e)?t.raw().toString():t.error("Decoding of string type: "+e+" unsupported")},u.prototype._decodeObjid=function(t,e,i){let r;const n=[];let o=0,h=0;for(;!t.isEmpty();)h=t.readUInt8(),o<<=7,o|=127&h,0==(128&h)&&(n.push(o),o=0);128&h&&n.push(o);const s=n[0]/40|0,a=n[0]%40;if(r=i?n:[s,a].concat(n.slice(1)),e){let t=e[r.join(" ")];void 0===t&&(t=e[r.join(".")]),void 0!==t&&(r=t)}return r},u.prototype._decodeTime=function(t,e){const i=t.raw().toString();let r,n,o,h,s,a;if("gentime"===e)r=0|i.slice(0,4),n=0|i.slice(4,6),o=0|i.slice(6,8),h=0|i.slice(8,10),s=0|i.slice(10,12),a=0|i.slice(12,14);else{if("utctime"!==e)return t.error("Decoding "+e+" time is not supported yet");r=0|i.slice(0,2),n=0|i.slice(2,4),o=0|i.slice(4,6),h=0|i.slice(6,8),s=0|i.slice(8,10),a=0|i.slice(10,12),r=r<70?2e3+r:1900+r}return Date.UTC(r,n-1,o,h,s,a,0)},u.prototype._decodeNull=function(){return null},u.prototype._decodeBool=function(t){const e=t.readUInt8();return t.isError(e)?e:0!==e},u.prototype._decodeInt=function(t,e){const i=t.raw();let r=new n(i);return e&&(r=e[r.toString(10)]||r),r},u.prototype._use=function(t,e){return"function"==typeof t&&(t=t(e)),t._getDecoder("der").tree}},function(t){t.exports={"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}},,function(t,e,i){var r=i(74),n=i(34).Buffer;function o(t){var e=n.allocUnsafe(4);return e.writeUInt32BE(t,0),e}t.exports=function(t,e){for(var i,h=n.alloc(0),s=0;h.length<e;)i=o(s++),h=n.concat([h,r("sha1").update(t).update(i).digest()]);return h.slice(0,e)}},function(t,e){t.exports=function(t,e){for(var i=t.length,r=-1;++r<i;)t[r]^=e[r];return t}},,function(t,e,i){var r=i(113),n=i(34).Buffer;t.exports=function(t,e){return n.from(t.toRed(r.mont(e.modulus)).redPow(new r(e.publicExponent)).fromRed().toArray())}},function(t,e,i){var r;t.exports=(r=i(36),function(t){var e=r,i=e.lib,n=i.WordArray,o=i.Hasher,h=e.algo,s=[],a=[];!function(){function e(e){for(var i=t.sqrt(e),r=2;r<=i;r++)if(!(e%r))return!1;return!0}function i(t){return 4294967296*(t-(0|t))|0}for(var r=2,n=0;n<64;)e(r)&&(n<8&&(s[n]=i(t.pow(r,.5))),a[n]=i(t.pow(r,1/3)),n++),r++}();var u=[],f=h.SHA256=o.extend({_doReset:function(){this._hash=new n.init(s.slice(0))},_doProcessBlock:function(t,e){for(var i=this._hash.words,r=i[0],n=i[1],o=i[2],h=i[3],s=i[4],f=i[5],l=i[6],d=i[7],c=0;c<64;c++){if(c<16)u[c]=0|t[e+c];else{var p=u[c-15],m=(p<<25|p>>>7)^(p<<14|p>>>18)^p>>>3,v=u[c-2],g=(v<<15|v>>>17)^(v<<13|v>>>19)^v>>>10;u[c]=m+u[c-7]+g+u[c-16]}var b=r&n^r&o^n&o,y=(r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22),w=d+((s<<26|s>>>6)^(s<<21|s>>>11)^(s<<7|s>>>25))+(s&f^~s&l)+a[c]+u[c];d=l,l=f,f=s,s=h+w|0,h=o,o=n,n=r,r=w+(y+b)|0}i[0]=i[0]+r|0,i[1]=i[1]+n|0,i[2]=i[2]+o|0,i[3]=i[3]+h|0,i[4]=i[4]+s|0,i[5]=i[5]+f|0,i[6]=i[6]+l|0,i[7]=i[7]+d|0},_doFinalize:function(){var e=this._data,i=e.words,r=8*this._nDataBytes,n=8*e.sigBytes;return i[n>>>5]|=128<<24-n%32,i[14+(n+64>>>9<<4)]=t.floor(r/4294967296),i[15+(n+64>>>9<<4)]=r,e.sigBytes=4*i.length,this._process(),this._hash},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=o._createHelper(f),e.HmacSHA256=o._createHmacHelper(f)}(Math),r.SHA256)},function(t,e,i){var r;t.exports=(r=i(36),i(87),function(){var t=r,e=t.lib.Hasher,i=t.x64,n=i.Word,o=i.WordArray,h=t.algo;function s(){return n.create.apply(n,arguments)}var a=[s(1116352408,3609767458),s(1899447441,602891725),s(3049323471,3964484399),s(3921009573,2173295548),s(961987163,4081628472),s(1508970993,3053834265),s(2453635748,2937671579),s(2870763221,3664609560),s(3624381080,2734883394),s(310598401,1164996542),s(607225278,1323610764),s(1426881987,3590304994),s(1925078388,4068182383),s(2162078206,991336113),s(2614888103,633803317),s(3248222580,3479774868),s(3835390401,2666613458),s(4022224774,944711139),s(264347078,2341262773),s(604807628,2007800933),s(770255983,1495990901),s(1249150122,1856431235),s(1555081692,3175218132),s(1996064986,2198950837),s(2554220882,3999719339),s(2821834349,766784016),s(2952996808,2566594879),s(3210313671,3203337956),s(3336571891,1034457026),s(3584528711,2466948901),s(113926993,3758326383),s(338241895,168717936),s(666307205,1188179964),s(773529912,1546045734),s(1294757372,1522805485),s(1396182291,2643833823),s(1695183700,2343527390),s(1986661051,1014477480),s(2177026350,1206759142),s(2456956037,344077627),s(2730485921,1290863460),s(2820302411,3158454273),s(3259730800,3505952657),s(3345764771,106217008),s(3516065817,3606008344),s(3600352804,1432725776),s(4094571909,1467031594),s(275423344,851169720),s(430227734,3100823752),s(506948616,1363258195),s(659060556,3750685593),s(883997877,3785050280),s(958139571,3318307427),s(1322822218,3812723403),s(1537002063,2003034995),s(1747873779,3602036899),s(1955562222,1575990012),s(2024104815,1125592928),s(2227730452,2716904306),s(2361852424,442776044),s(2428436474,593698344),s(2756734187,3733110249),s(3204031479,2999351573),s(3329325298,3815920427),s(3391569614,3928383900),s(3515267271,566280711),s(3940187606,3454069534),s(4118630271,4000239992),s(116418474,1914138554),s(174292421,2731055270),s(289380356,3203993006),s(460393269,320620315),s(685471733,587496836),s(852142971,1086792851),s(1017036298,365543100),s(1126000580,2618297676),s(1288033470,3409855158),s(1501505948,4234509866),s(1607167915,987167468),s(1816402316,1246189591)],u=[];!function(){for(var t=0;t<80;t++)u[t]=s()}();var f=h.SHA512=e.extend({_doReset:function(){this._hash=new o.init([new n.init(1779033703,4089235720),new n.init(3144134277,2227873595),new n.init(1013904242,4271175723),new n.init(2773480762,1595750129),new n.init(1359893119,2917565137),new n.init(2600822924,725511199),new n.init(528734635,4215389547),new n.init(1541459225,327033209)])},_doProcessBlock:function(t,e){for(var i=this._hash.words,r=i[0],n=i[1],o=i[2],h=i[3],s=i[4],f=i[5],l=i[6],d=i[7],c=r.high,p=r.low,m=n.high,v=n.low,g=o.high,b=o.low,y=h.high,w=h.low,M=s.high,_=s.low,S=f.high,k=f.low,A=l.high,E=l.low,x=d.high,B=d.low,R=c,I=p,T=m,P=v,C=g,L=b,q=y,j=w,O=M,N=_,D=S,z=k,U=A,H=E,Z=x,F=B,K=0;K<80;K++){var W,Y,V=u[K];if(K<16)Y=V.high=0|t[e+2*K],W=V.low=0|t[e+2*K+1];else{var X=u[K-15],G=X.high,J=X.low,$=(G>>>1|J<<31)^(G>>>8|J<<24)^G>>>7,Q=(J>>>1|G<<31)^(J>>>8|G<<24)^(J>>>7|G<<25),tt=u[K-2],et=tt.high,it=tt.low,rt=(et>>>19|it<<13)^(et<<3|it>>>29)^et>>>6,nt=(it>>>19|et<<13)^(it<<3|et>>>29)^(it>>>6|et<<26),ot=u[K-7],ht=ot.high,st=ot.low,at=u[K-16],ut=at.high,ft=at.low;Y=(Y=(Y=$+ht+((W=Q+st)>>>0<Q>>>0?1:0))+rt+((W+=nt)>>>0<nt>>>0?1:0))+ut+((W+=ft)>>>0<ft>>>0?1:0),V.high=Y,V.low=W}var lt,dt=O&D^~O&U,ct=N&z^~N&H,pt=R&T^R&C^T&C,mt=I&P^I&L^P&L,vt=(R>>>28|I<<4)^(R<<30|I>>>2)^(R<<25|I>>>7),gt=(I>>>28|R<<4)^(I<<30|R>>>2)^(I<<25|R>>>7),bt=(O>>>14|N<<18)^(O>>>18|N<<14)^(O<<23|N>>>9),yt=(N>>>14|O<<18)^(N>>>18|O<<14)^(N<<23|O>>>9),wt=a[K],Mt=wt.high,_t=wt.low,St=Z+bt+((lt=F+yt)>>>0<F>>>0?1:0),kt=gt+mt;Z=U,F=H,U=D,H=z,D=O,z=N,O=q+(St=(St=(St=St+dt+((lt+=ct)>>>0<ct>>>0?1:0))+Mt+((lt+=_t)>>>0<_t>>>0?1:0))+Y+((lt+=W)>>>0<W>>>0?1:0))+((N=j+lt|0)>>>0<j>>>0?1:0)|0,q=C,j=L,C=T,L=P,T=R,P=I,R=St+(vt+pt+(kt>>>0<gt>>>0?1:0))+((I=lt+kt|0)>>>0<lt>>>0?1:0)|0}p=r.low=p+I,r.high=c+R+(p>>>0<I>>>0?1:0),v=n.low=v+P,n.high=m+T+(v>>>0<P>>>0?1:0),b=o.low=b+L,o.high=g+C+(b>>>0<L>>>0?1:0),w=h.low=w+j,h.high=y+q+(w>>>0<j>>>0?1:0),_=s.low=_+N,s.high=M+O+(_>>>0<N>>>0?1:0),k=f.low=k+z,f.high=S+D+(k>>>0<z>>>0?1:0),E=l.low=E+H,l.high=A+U+(E>>>0<H>>>0?1:0),B=d.low=B+F,d.high=x+Z+(B>>>0<F>>>0?1:0)},_doFinalize:function(){var t=this._data,e=t.words,i=8*this._nDataBytes,r=8*t.sigBytes;return e[r>>>5]|=128<<24-r%32,e[30+(r+128>>>10<<5)]=Math.floor(i/4294967296),e[31+(r+128>>>10<<5)]=i,t.sigBytes=4*e.length,this._process(),this._hash.toX32()},clone:function(){var t=e.clone.call(this);return t._hash=this._hash.clone(),t},blockSize:32});t.SHA512=e._createHelper(f),t.HmacSHA512=e._createHmacHelper(f)}(),r.SHA512)},,,,,,,,,,,,,,,,,,,,,function(t,e,i){"use strict";e.randomBytes=e.rng=e.pseudoRandomBytes=e.prng=i(67),e.createHash=e.Hash=i(74),e.createHmac=e.Hmac=i(143);var r=i(230),n=Object.keys(r),o=["sha1","sha224","sha256","sha384","sha512","md5","rmd160"].concat(n);e.getHashes=function(){return o};var h=i(146);e.pbkdf2=h.pbkdf2,e.pbkdf2Sync=h.pbkdf2Sync;var s=i(232);e.Cipher=s.Cipher,e.createCipher=s.createCipher,e.Cipheriv=s.Cipheriv,e.createCipheriv=s.createCipheriv,e.Decipher=s.Decipher,e.createDecipher=s.createDecipher,e.Decipheriv=s.Decipheriv,e.createDecipheriv=s.createDecipheriv,e.getCiphers=s.getCiphers,e.listCiphers=s.listCiphers;var a=i(247);e.DiffieHellmanGroup=a.DiffieHellmanGroup,e.createDiffieHellmanGroup=a.createDiffieHellmanGroup,e.getDiffieHellman=a.getDiffieHellman,e.createDiffieHellman=a.createDiffieHellman,e.DiffieHellman=a.DiffieHellman;var u=i(251);e.createSign=u.createSign,e.Sign=u.Sign,e.createVerify=u.createVerify,e.Verify=u.Verify,e.createECDH=i(282);var f=i(284);e.publicEncrypt=f.publicEncrypt,e.privateEncrypt=f.privateEncrypt,e.publicDecrypt=f.publicDecrypt,e.privateDecrypt=f.privateDecrypt;var l=i(287);e.randomFill=l.randomFill,e.randomFillSync=l.randomFillSync,e.createCredentials=function(){throw new Error(["sorry, createCredentials is not implemented yet","we accept pull requests","https://github.com/crypto-browserify/crypto-browserify"].join("\n"))},e.constants={DH_CHECK_P_NOT_SAFE_PRIME:2,DH_CHECK_P_NOT_PRIME:1,DH_UNABLE_TO_CHECK_GENERATOR:4,DH_NOT_SUITABLE_GENERATOR:8,NPN_ENABLED:1,ALPN_ENABLED:1,RSA_PKCS1_PADDING:1,RSA_SSLV23_PADDING:2,RSA_NO_PADDING:3,RSA_PKCS1_OAEP_PADDING:4,RSA_X931_PADDING:5,RSA_PKCS1_PSS_PADDING:6,POINT_CONVERSION_COMPRESSED:2,POINT_CONVERSION_UNCOMPRESSED:4,POINT_CONVERSION_HYBRID:6}},function(t,e,i){"use strict";e.byteLength=function(t){var e=u(t),i=e[0],r=e[1];return 3*(i+r)/4-r},e.toByteArray=function(t){var e,i,r=u(t),h=r[0],s=r[1],a=new o(function(t,e,i){return 3*(e+i)/4-i}(0,h,s)),f=0,l=s>0?h-4:h;for(i=0;i<l;i+=4)e=n[t.charCodeAt(i)]<<18|n[t.charCodeAt(i+1)]<<12|n[t.charCodeAt(i+2)]<<6|n[t.charCodeAt(i+3)],a[f++]=e>>16&255,a[f++]=e>>8&255,a[f++]=255&e;2===s&&(e=n[t.charCodeAt(i)]<<2|n[t.charCodeAt(i+1)]>>4,a[f++]=255&e);1===s&&(e=n[t.charCodeAt(i)]<<10|n[t.charCodeAt(i+1)]<<4|n[t.charCodeAt(i+2)]>>2,a[f++]=e>>8&255,a[f++]=255&e);return a},e.fromByteArray=function(t){for(var e,i=t.length,n=i%3,o=[],h=0,s=i-n;h<s;h+=16383)o.push(f(t,h,h+16383>s?s:h+16383));1===n?(e=t[i-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===n&&(e=(t[i-2]<<8)+t[i-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],n=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=h.length;s<a;++s)r[s]=h[s],n[h.charCodeAt(s)]=s;function u(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var i=t.indexOf("=");return-1===i&&(i=e),[i,i===e?0:4-i%4]}function f(t,e,i){for(var n,o,h=[],s=e;s<i;s+=3)n=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),h.push(r[(o=n)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return h.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,i,r,n){var o,h,s=8*n-r-1,a=(1<<s)-1,u=a>>1,f=-7,l=i?n-1:0,d=i?-1:1,c=t[e+l];for(l+=d,o=c&(1<<-f)-1,c>>=-f,f+=s;f>0;o=256*o+t[e+l],l+=d,f-=8);for(h=o&(1<<-f)-1,o>>=-f,f+=r;f>0;h=256*h+t[e+l],l+=d,f-=8);if(0===o)o=1-u;else{if(o===a)return h?NaN:1/0*(c?-1:1);h+=Math.pow(2,r),o-=u}return(c?-1:1)*h*Math.pow(2,o-r)},e.write=function(t,e,i,r,n,o){var h,s,a,u=8*o-n-1,f=(1<<u)-1,l=f>>1,d=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,c=r?0:o-1,p=r?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,h=f):(h=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-h))<1&&(h--,a*=2),(e+=h+l>=1?d/a:d*Math.pow(2,1-l))*a>=2&&(h++,a/=2),h+l>=f?(s=0,h=f):h+l>=1?(s=(e*a-1)*Math.pow(2,n),h+=l):(s=e*Math.pow(2,l-1)*Math.pow(2,n),h=0));n>=8;t[i+c]=255&s,c+=p,s/=256,n-=8);for(h=h<<n|s,u+=n;u>0;t[i+c]=255&h,c+=p,h/=256,u-=8);t[i+c-p]|=128*m}},function(t,e,i){"use strict";function r(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,r)}return i}function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function o(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var h=i(46).Buffer,s=i(129).inspect,a=s&&s.custom||"inspect";t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,i,u;return e=t,(i=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,i=""+e.data;e=e.next;)i+=t+e.data;return i}},{key:"concat",value:function(t){if(0===this.length)return h.alloc(0);for(var e,i,r,n=h.allocUnsafe(t>>>0),o=this.head,s=0;o;)e=o.data,i=n,r=s,h.prototype.copy.call(e,i,r),s+=o.data.length,o=o.next;return n}},{key:"consume",value:function(t,e){var i;return t<this.head.data.length?(i=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):i=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),i}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,i=1,r=e.data;for(t-=r.length;e=e.next;){var n=e.data,o=t>n.length?n.length:t;if(o===n.length?r+=n:r+=n.slice(0,t),0==(t-=o)){o===n.length?(++i,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=n.slice(o));break}++i}return this.length-=i,r}},{key:"_getBuffer",value:function(t){var e=h.allocUnsafe(t),i=this.head,r=1;for(i.data.copy(e),t-=i.data.length;i=i.next;){var n=i.data,o=t>n.length?n.length:t;if(n.copy(e,e.length-t,0,o),0==(t-=o)){o===n.length?(++r,i.next?this.head=i.next:this.head=this.tail=null):(this.head=i,i.data=n.slice(o));break}++r}return this.length-=r,e}},{key:a,value:function(t,e){return s(this,function(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?r(Object(i),!0).forEach((function(e){n(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}({},e,{depth:0,customInspect:!1}))}}])&&o(e.prototype,i),u&&o(e,u),t}()},function(t,e,i){"use strict";(function(e){var r;function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}var o=i(95),h=Symbol("lastResolve"),s=Symbol("lastReject"),a=Symbol("error"),u=Symbol("ended"),f=Symbol("lastPromise"),l=Symbol("handlePromise"),d=Symbol("stream");function c(t,e){return{value:t,done:e}}function p(t){var e=t[h];if(null!==e){var i=t[d].read();null!==i&&(t[f]=null,t[h]=null,t[s]=null,e(c(i,!1)))}}function m(t){e.nextTick(p,t)}var v=Object.getPrototypeOf((function(){})),g=Object.setPrototypeOf((n(r={get stream(){return this[d]},next:function(){var t=this,i=this[a];if(null!==i)return Promise.reject(i);if(this[u])return Promise.resolve(c(void 0,!0));if(this[d].destroyed)return new Promise((function(i,r){e.nextTick((function(){t[a]?r(t[a]):i(c(void 0,!0))}))}));var r,n=this[f];if(n)r=new Promise(function(t,e){return function(i,r){t.then((function(){e[u]?i(c(void 0,!0)):e[l](i,r)}),r)}}(n,this));else{var o=this[d].read();if(null!==o)return Promise.resolve(c(o,!1));r=new Promise(this[l])}return this[f]=r,r}},Symbol.asyncIterator,(function(){return this})),n(r,"return",(function(){var t=this;return new Promise((function(e,i){t[d].destroy(null,(function(t){t?i(t):e(c(void 0,!0))}))}))})),r),v);t.exports=function(t){var e,i=Object.create(g,(n(e={},d,{value:t,writable:!0}),n(e,h,{value:null,writable:!0}),n(e,s,{value:null,writable:!0}),n(e,a,{value:null,writable:!0}),n(e,u,{value:t._readableState.endEmitted,writable:!0}),n(e,l,{value:function(t,e){var r=i[d].read();r?(i[f]=null,i[h]=null,i[s]=null,t(c(r,!1))):(i[h]=t,i[s]=e)},writable:!0}),e));return i[f]=null,o(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=i[s];return null!==e&&(i[f]=null,i[h]=null,i[s]=null,e(t)),void(i[a]=t)}var r=i[h];null!==r&&(i[f]=null,i[h]=null,i[s]=null,r(c(void 0,!0))),i[u]=!0})),t.on("readable",m.bind(null,i)),i}}).call(this,i(42))},function(t,e){t.exports=function(){throw new Error("Readable.from is not available in the browser")}},function(t,e,i){"use strict";t.exports=n;var r=i(134);function n(t){if(!(this instanceof n))return new n(t);r.call(this,t)}i(32)(n,r),n.prototype._transform=function(t,e,i){i(null,t)}},function(t,e,i){"use strict";var r;var n=i(68).codes,o=n.ERR_MISSING_ARGS,h=n.ERR_STREAM_DESTROYED;function s(t){if(t)throw t}function a(t,e,n,o){o=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(o);var s=!1;t.on("close",(function(){s=!0})),void 0===r&&(r=i(95)),r(t,{readable:e,writable:n},(function(t){if(t)return o(t);s=!0,o()}));var a=!1;return function(e){if(!s&&!a)return a=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void o(e||new h("pipe"))}}function u(t){t()}function f(t,e){return t.pipe(e)}function l(t){return t.length?"function"!=typeof t[t.length-1]?s:t.pop():s}t.exports=function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var r,n=l(e);if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new o("streams");var h=e.map((function(t,i){var o=i<e.length-1;return a(t,o,i>0,(function(t){r||(r=t),t&&h.forEach(u),o||(h.forEach(u),n(r))}))}));return e.reduce(f)}},function(t,e,i){var r=i(32),n=i(70),o=i(34).Buffer,h=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function a(){this.init(),this._w=s,n.call(this,64,56)}function u(t){return t<<30|t>>>2}function f(t,e,i,r){return 0===t?e&i|~e&r:2===t?e&i|e&r|i&r:e^i^r}r(a,n),a.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},a.prototype._update=function(t){for(var e,i=this._w,r=0|this._a,n=0|this._b,o=0|this._c,s=0|this._d,a=0|this._e,l=0;l<16;++l)i[l]=t.readInt32BE(4*l);for(;l<80;++l)i[l]=i[l-3]^i[l-8]^i[l-14]^i[l-16];for(var d=0;d<80;++d){var c=~~(d/20),p=0|((e=r)<<5|e>>>27)+f(c,n,o,s)+a+i[d]+h[c];a=s,s=o,o=u(n),n=r,r=p}this._a=r+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=a+this._e|0},a.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=a},function(t,e,i){var r=i(32),n=i(70),o=i(34).Buffer,h=[1518500249,1859775393,-1894007588,-899497514],s=new Array(80);function a(){this.init(),this._w=s,n.call(this,64,56)}function u(t){return t<<5|t>>>27}function f(t){return t<<30|t>>>2}function l(t,e,i,r){return 0===t?e&i|~e&r:2===t?e&i|e&r|i&r:e^i^r}r(a,n),a.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},a.prototype._update=function(t){for(var e,i=this._w,r=0|this._a,n=0|this._b,o=0|this._c,s=0|this._d,a=0|this._e,d=0;d<16;++d)i[d]=t.readInt32BE(4*d);for(;d<80;++d)i[d]=(e=i[d-3]^i[d-8]^i[d-14]^i[d-16])<<1|e>>>31;for(var c=0;c<80;++c){var p=~~(c/20),m=u(r)+l(p,n,o,s)+a+i[c]+h[p]|0;a=s,s=o,o=f(n),n=r,r=m}this._a=r+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=s+this._d|0,this._e=a+this._e|0},a.prototype._hash=function(){var t=o.allocUnsafe(20);return t.writeInt32BE(0|this._a,0),t.writeInt32BE(0|this._b,4),t.writeInt32BE(0|this._c,8),t.writeInt32BE(0|this._d,12),t.writeInt32BE(0|this._e,16),t},t.exports=a},function(t,e,i){var r=i(32),n=i(135),o=i(70),h=i(34).Buffer,s=new Array(64);function a(){this.init(),this._w=s,o.call(this,64,56)}r(a,n),a.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},a.prototype._hash=function(){var t=h.allocUnsafe(28);return t.writeInt32BE(this._a,0),t.writeInt32BE(this._b,4),t.writeInt32BE(this._c,8),t.writeInt32BE(this._d,12),t.writeInt32BE(this._e,16),t.writeInt32BE(this._f,20),t.writeInt32BE(this._g,24),t},t.exports=a},function(t,e,i){var r=i(32),n=i(136),o=i(70),h=i(34).Buffer,s=new Array(160);function a(){this.init(),this._w=s,o.call(this,128,112)}r(a,n),a.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},a.prototype._hash=function(){var t=h.allocUnsafe(48);function e(e,i,r){t.writeInt32BE(e,r),t.writeInt32BE(i,r+4)}return e(this._ah,this._al,0),e(this._bh,this._bl,8),e(this._ch,this._cl,16),e(this._dh,this._dl,24),e(this._eh,this._el,32),e(this._fh,this._fl,40),t},t.exports=a},function(t,e,i){t.exports=n;var r=i(75).EventEmitter;function n(){r.call(this)}i(32)(n,r),n.Readable=i(98),n.Writable=i(225),n.Duplex=i(226),n.Transform=i(227),n.PassThrough=i(228),n.Stream=n,n.prototype.pipe=function(t,e){var i=this;function n(e){t.writable&&!1===t.write(e)&&i.pause&&i.pause()}function o(){i.readable&&i.resume&&i.resume()}i.on("data",n),t.on("drain",o),t._isStdio||e&&!1===e.end||(i.on("end",s),i.on("close",a));var h=!1;function s(){h||(h=!0,t.end())}function a(){h||(h=!0,"function"==typeof t.destroy&&t.destroy())}function u(t){if(f(),0===r.listenerCount(this,"error"))throw t}function f(){i.removeListener("data",n),t.removeListener("drain",o),i.removeListener("end",s),i.removeListener("close",a),i.removeListener("error",u),t.removeListener("error",u),i.removeListener("end",f),i.removeListener("close",f),t.removeListener("close",f)}return i.on("error",u),t.on("error",u),i.on("end",f),i.on("close",f),t.on("close",f),t.emit("pipe",i),t}},function(t,e,i){"use strict";var r=i(99).Buffer,n=i(140);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,i=""+e.data;e=e.next;)i+=t+e.data;return i},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e,i,n,o=r.allocUnsafe(t>>>0),h=this.head,s=0;h;)e=h.data,i=o,n=s,e.copy(i,n),s+=h.data.length,h=h.next;return o},t}(),n&&n.inspect&&n.inspect.custom&&(t.exports.prototype[n.inspect.custom]=function(){var t=n.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e,i){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,n=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(n.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(n.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},i(223),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,i(21))},function(t,e,i){(function(t,e){!function(t,i){"use strict";if(!t.setImmediate){var r,n,o,h,s,a=1,u={},f=!1,l=t.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(t);d=d&&d.setTimeout?d:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,i=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=i,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){o.port2.postMessage(t)}):l&&"onreadystatechange"in l.createElement("script")?(n=l.documentElement,r=function(t){var e=l.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,n.removeChild(e),e=null},n.appendChild(e)}):r=function(t){setTimeout(p,0,t)}:(h="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(h)&&p(+e.data.slice(h.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(h+e,"*")}),d.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),i=0;i<e.length;i++)e[i]=arguments[i+1];var n={callback:t,args:e};return u[a]=n,r(a),a++},d.clearImmediate=c}function c(t){delete u[t]}function p(t){if(f)setTimeout(p,0,t);else{var e=u[t];if(e){f=!0;try{!function(t){var e=t.callback,i=t.args;switch(i.length){case 0:e();break;case 1:e(i[0]);break;case 2:e(i[0],i[1]);break;case 3:e(i[0],i[1],i[2]);break;default:e.apply(void 0,i)}}(e)}finally{c(t),f=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,i(21),i(42))},function(t,e,i){"use strict";t.exports=o;var r=i(142),n=Object.create(i(77));function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}n.inherits=i(32),n.inherits(o,r),o.prototype._transform=function(t,e,i){i(null,t)}},function(t,e,i){t.exports=i(100)},function(t,e,i){t.exports=i(63)},function(t,e,i){t.exports=i(98).Transform},function(t,e,i){t.exports=i(98).PassThrough},function(t,e,i){"use strict";var r=i(32),n=i(34).Buffer,o=i(61),h=n.alloc(128);function s(t,e){o.call(this,"digest"),"string"==typeof e&&(e=n.from(e)),this._alg=t,this._key=e,e.length>64?e=t(e):e.length<64&&(e=n.concat([e,h],64));for(var i=this._ipad=n.allocUnsafe(64),r=this._opad=n.allocUnsafe(64),s=0;s<64;s++)i[s]=54^e[s],r[s]=92^e[s];this._hash=[i]}r(s,o),s.prototype._update=function(t){this._hash.push(t)},s.prototype._final=function(){var t=this._alg(n.concat(this._hash));return this._alg(n.concat([this._opad,t]))},t.exports=s},function(t,e,i){t.exports=i(145)},function(t,e,i){(function(e,r){var n,o=i(34).Buffer,h=i(147),s=i(148),a=i(149),u=i(150),f=e.crypto&&e.crypto.subtle,l={sha:"SHA-1","sha-1":"SHA-1",sha1:"SHA-1",sha256:"SHA-256","sha-256":"SHA-256",sha384:"SHA-384","sha-384":"SHA-384","sha-512":"SHA-512",sha512:"SHA-512"},d=[];function c(t,e,i,r,n){return f.importKey("raw",t,{name:"PBKDF2"},!1,["deriveBits"]).then((function(t){return f.deriveBits({name:"PBKDF2",salt:e,iterations:i,hash:{name:n}},t,r<<3)})).then((function(t){return o.from(t)}))}t.exports=function(t,i,p,m,v,g){"function"==typeof v&&(g=v,v=void 0);var b=l[(v=v||"sha1").toLowerCase()];if(!b||"function"!=typeof e.Promise)return r.nextTick((function(){var e;try{e=a(t,i,p,m,v)}catch(t){return g(t)}g(null,e)}));if(h(p,m),t=u(t,s,"Password"),i=u(i,s,"Salt"),"function"!=typeof g)throw new Error("No callback provided to pbkdf2");!function(t,e){t.then((function(t){r.nextTick((function(){e(null,t)}))}),(function(t){r.nextTick((function(){e(t)}))}))}(function(t){if(e.process&&!e.process.browser)return Promise.resolve(!1);if(!f||!f.importKey||!f.deriveBits)return Promise.resolve(!1);if(void 0!==d[t])return d[t];var i=c(n=n||o.alloc(8),n,10,128,t).then((function(){return!0})).catch((function(){return!1}));return d[t]=i,i}(b).then((function(e){return e?c(t,i,p,m,b):a(t,i,p,m,v)})),g)}}).call(this,i(21),i(42))},function(t,e,i){var r=i(233),n=i(102),o=i(103),h=i(246),s=i(84);function a(t,e,i){if(t=t.toLowerCase(),o[t])return n.createCipheriv(t,e,i);if(h[t])return new r({key:e,iv:i,mode:t});throw new TypeError("invalid suite type")}function u(t,e,i){if(t=t.toLowerCase(),o[t])return n.createDecipheriv(t,e,i);if(h[t])return new r({key:e,iv:i,mode:t,decrypt:!0});throw new TypeError("invalid suite type")}e.createCipher=e.Cipher=function(t,e){var i,r;if(t=t.toLowerCase(),o[t])i=o[t].key,r=o[t].iv;else{if(!h[t])throw new TypeError("invalid suite type");i=8*h[t].key,r=h[t].iv}var n=s(e,!1,i,r);return a(t,n.key,n.iv)},e.createCipheriv=e.Cipheriv=a,e.createDecipher=e.Decipher=function(t,e){var i,r;if(t=t.toLowerCase(),o[t])i=o[t].key,r=o[t].iv;else{if(!h[t])throw new TypeError("invalid suite type");i=8*h[t].key,r=h[t].iv}var n=s(e,!1,i,r);return u(t,n.key,n.iv)},e.createDecipheriv=e.Decipheriv=u,e.listCiphers=e.getCiphers=function(){return Object.keys(h).concat(n.getCiphers())}},function(t,e,i){var r=i(61),n=i(234),o=i(32),h=i(34).Buffer,s={"des-ede3-cbc":n.CBC.instantiate(n.EDE),"des-ede3":n.EDE,"des-ede-cbc":n.CBC.instantiate(n.EDE),"des-ede":n.EDE,"des-cbc":n.CBC.instantiate(n.DES),"des-ecb":n.DES};function a(t){r.call(this);var e,i=t.mode.toLowerCase(),n=s[i];e=t.decrypt?"decrypt":"encrypt";var o=t.key;h.isBuffer(o)||(o=h.from(o)),"des-ede"!==i&&"des-ede-cbc"!==i||(o=h.concat([o,o.slice(0,8)]));var a=t.iv;h.isBuffer(a)||(a=h.from(a)),this._des=n.create({key:o,iv:a,type:e})}s.des=s["des-cbc"],s.des3=s["des-ede3-cbc"],t.exports=a,o(a,r),a.prototype._update=function(t){return h.from(this._des.update(t))},a.prototype._final=function(){return h.from(this._des.final())}},function(t,e,i){"use strict";e.utils=i(151),e.Cipher=i(101),e.DES=i(152),e.CBC=i(235),e.EDE=i(236)},function(t,e,i){"use strict";var r=i(47),n=i(32),o={};function h(t){r.equal(t.length,8,"Invalid IV length"),this.iv=new Array(8);for(var e=0;e<this.iv.length;e++)this.iv[e]=t[e]}e.instantiate=function(t){function e(e){t.call(this,e),this._cbcInit()}n(e,t);for(var i=Object.keys(o),r=0;r<i.length;r++){var h=i[r];e.prototype[h]=o[h]}return e.create=function(t){return new e(t)},e},o._cbcInit=function(){var t=new h(this.options.iv);this._cbcState=t},o._update=function(t,e,i,r){var n=this._cbcState,o=this.constructor.super_.prototype,h=n.iv;if("encrypt"===this.type){for(var s=0;s<this.blockSize;s++)h[s]^=t[e+s];o._update.call(this,h,0,i,r);for(s=0;s<this.blockSize;s++)h[s]=i[r+s]}else{o._update.call(this,t,e,i,r);for(s=0;s<this.blockSize;s++)i[r+s]^=h[s];for(s=0;s<this.blockSize;s++)h[s]=t[e+s]}}},function(t,e,i){"use strict";var r=i(47),n=i(32),o=i(101),h=i(152);function s(t,e){r.equal(e.length,24,"Invalid key length");var i=e.slice(0,8),n=e.slice(8,16),o=e.slice(16,24);this.ciphers="encrypt"===t?[h.create({type:"encrypt",key:i}),h.create({type:"decrypt",key:n}),h.create({type:"encrypt",key:o})]:[h.create({type:"decrypt",key:o}),h.create({type:"encrypt",key:n}),h.create({type:"decrypt",key:i})]}function a(t){o.call(this,t);var e=new s(this.type,this.options.key);this._edeState=e}n(a,o),t.exports=a,a.create=function(t){return new a(t)},a.prototype._update=function(t,e,i,r){var n=this._edeState;n.ciphers[0]._update(t,e,i,r),n.ciphers[1]._update(i,r,i,r),n.ciphers[2]._update(i,r,i,r)},a.prototype._pad=h.prototype._pad,a.prototype._unpad=h.prototype._unpad},function(t,e,i){var r=i(103),n=i(156),o=i(34).Buffer,h=i(157),s=i(61),a=i(83),u=i(84);function f(t,e,i){s.call(this),this._cache=new d,this._cipher=new a.AES(e),this._prev=o.from(i),this._mode=t,this._autopadding=!0}i(32)(f,s),f.prototype._update=function(t){var e,i;this._cache.add(t);for(var r=[];e=this._cache.get();)i=this._mode.encrypt(this,e),r.push(i);return o.concat(r)};var l=o.alloc(16,16);function d(){this.cache=o.allocUnsafe(0)}function c(t,e,i){var s=r[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof e&&(e=o.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);if("string"==typeof i&&(i=o.from(i)),"GCM"!==s.mode&&i.length!==s.iv)throw new TypeError("invalid iv length "+i.length);return"stream"===s.type?new h(s.module,e,i):"auth"===s.type?new n(s.module,e,i):new f(s.module,e,i)}f.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return t=this._mode.encrypt(this,t),this._cipher.scrub(),t;if(!t.equals(l))throw this._cipher.scrub(),new Error("data not multiple of block length")},f.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},d.prototype.add=function(t){this.cache=o.concat([this.cache,t])},d.prototype.get=function(){if(this.cache.length>15){var t=this.cache.slice(0,16);return this.cache=this.cache.slice(16),t}return null},d.prototype.flush=function(){for(var t=16-this.cache.length,e=o.allocUnsafe(t),i=-1;++i<t;)e.writeUInt8(t,i);return o.concat([this.cache,e])},e.createCipheriv=c,e.createCipher=function(t,e){var i=r[t.toLowerCase()];if(!i)throw new TypeError("invalid suite type");var n=u(e,!1,i.key,i.iv);return c(t,n.key,n.iv)}},function(t,e){e.encrypt=function(t,e){return t._cipher.encryptBlock(e)},e.decrypt=function(t,e){return t._cipher.decryptBlock(e)}},function(t,e,i){var r=i(78);e.encrypt=function(t,e){var i=r(e,t._prev);return t._prev=t._cipher.encryptBlock(i),t._prev},e.decrypt=function(t,e){var i=t._prev;t._prev=e;var n=t._cipher.decryptBlock(e);return r(n,i)}},function(t,e,i){var r=i(34).Buffer,n=i(78);function o(t,e,i){var o=e.length,h=n(e,t._cache);return t._cache=t._cache.slice(o),t._prev=r.concat([t._prev,i?e:h]),h}e.encrypt=function(t,e,i){for(var n,h=r.allocUnsafe(0);e.length;){if(0===t._cache.length&&(t._cache=t._cipher.encryptBlock(t._prev),t._prev=r.allocUnsafe(0)),!(t._cache.length<=e.length)){h=r.concat([h,o(t,e,i)]);break}n=t._cache.length,h=r.concat([h,o(t,e.slice(0,n),i)]),e=e.slice(n)}return h}},function(t,e,i){var r=i(34).Buffer;function n(t,e,i){var n=t._cipher.encryptBlock(t._prev)[0]^e;return t._prev=r.concat([t._prev.slice(1),r.from([i?e:n])]),n}e.encrypt=function(t,e,i){for(var o=e.length,h=r.allocUnsafe(o),s=-1;++s<o;)h[s]=n(t,e[s],i);return h}},function(t,e,i){var r=i(34).Buffer;function n(t,e,i){for(var r,n,h=-1,s=0;++h<8;)r=e&1<<7-h?128:0,s+=(128&(n=t._cipher.encryptBlock(t._prev)[0]^r))>>h%8,t._prev=o(t._prev,i?r:n);return s}function o(t,e){var i=t.length,n=-1,o=r.allocUnsafe(t.length);for(t=r.concat([t,r.from([e])]);++n<i;)o[n]=t[n]<<1|t[n+1]>>7;return o}e.encrypt=function(t,e,i){for(var o=e.length,h=r.allocUnsafe(o),s=-1;++s<o;)h[s]=n(t,e[s],i);return h}},function(t,e,i){(function(t){var r=i(78);function n(t){return t._prev=t._cipher.encryptBlock(t._prev),t._prev}e.encrypt=function(e,i){for(;e._cache.length<i.length;)e._cache=t.concat([e._cache,n(e)]);var o=e._cache.slice(0,i.length);return e._cache=e._cache.slice(i.length),r(i,o)}}).call(this,i(46).Buffer)},function(t,e,i){var r=i(34).Buffer,n=r.alloc(16,0);function o(t){var e=r.allocUnsafe(16);return e.writeUInt32BE(t[0]>>>0,0),e.writeUInt32BE(t[1]>>>0,4),e.writeUInt32BE(t[2]>>>0,8),e.writeUInt32BE(t[3]>>>0,12),e}function h(t){this.h=t,this.state=r.alloc(16,0),this.cache=r.allocUnsafe(0)}h.prototype.ghash=function(t){for(var e=-1;++e<t.length;)this.state[e]^=t[e];this._multiply()},h.prototype._multiply=function(){for(var t,e,i,r=[(t=this.h).readUInt32BE(0),t.readUInt32BE(4),t.readUInt32BE(8),t.readUInt32BE(12)],n=[0,0,0,0],h=-1;++h<128;){for(0!=(this.state[~~(h/8)]&1<<7-h%8)&&(n[0]^=r[0],n[1]^=r[1],n[2]^=r[2],n[3]^=r[3]),i=0!=(1&r[3]),e=3;e>0;e--)r[e]=r[e]>>>1|(1&r[e-1])<<31;r[0]=r[0]>>>1,i&&(r[0]=r[0]^225<<24)}this.state=o(n)},h.prototype.update=function(t){var e;for(this.cache=r.concat([this.cache,t]);this.cache.length>=16;)e=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(e)},h.prototype.final=function(t,e){return this.cache.length&&this.ghash(r.concat([this.cache,n],16)),this.ghash(o([0,t,0,e])),this.state},t.exports=h},function(t,e,i){var r=i(156),n=i(34).Buffer,o=i(103),h=i(157),s=i(61),a=i(83),u=i(84);function f(t,e,i){s.call(this),this._cache=new l,this._last=void 0,this._cipher=new a.AES(e),this._prev=n.from(i),this._mode=t,this._autopadding=!0}function l(){this.cache=n.allocUnsafe(0)}function d(t,e,i){var s=o[t.toLowerCase()];if(!s)throw new TypeError("invalid suite type");if("string"==typeof i&&(i=n.from(i)),"GCM"!==s.mode&&i.length!==s.iv)throw new TypeError("invalid iv length "+i.length);if("string"==typeof e&&(e=n.from(e)),e.length!==s.key/8)throw new TypeError("invalid key length "+e.length);return"stream"===s.type?new h(s.module,e,i,!0):"auth"===s.type?new r(s.module,e,i,!0):new f(s.module,e,i)}i(32)(f,s),f.prototype._update=function(t){var e,i;this._cache.add(t);for(var r=[];e=this._cache.get(this._autopadding);)i=this._mode.decrypt(this,e),r.push(i);return n.concat(r)},f.prototype._final=function(){var t=this._cache.flush();if(this._autopadding)return function(t){var e=t[15];if(e<1||e>16)throw new Error("unable to decrypt data");var i=-1;for(;++i<e;)if(t[i+(16-e)]!==e)throw new Error("unable to decrypt data");if(16===e)return;return t.slice(0,16-e)}(this._mode.decrypt(this,t));if(t)throw new Error("data not multiple of block length")},f.prototype.setAutoPadding=function(t){return this._autopadding=!!t,this},l.prototype.add=function(t){this.cache=n.concat([this.cache,t])},l.prototype.get=function(t){var e;if(t){if(this.cache.length>16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e}else if(this.cache.length>=16)return e=this.cache.slice(0,16),this.cache=this.cache.slice(16),e;return null},l.prototype.flush=function(){if(this.cache.length)return this.cache},e.createDecipher=function(t,e){var i=o[t.toLowerCase()];if(!i)throw new TypeError("invalid suite type");var r=u(e,!1,i.key,i.iv);return d(t,r.key,r.iv)},e.createDecipheriv=d},function(t,e){e["des-ecb"]={key:8,iv:0},e["des-cbc"]=e.des={key:8,iv:8},e["des-ede3-cbc"]=e.des3={key:24,iv:8},e["des-ede3"]={key:24,iv:0},e["des-ede-cbc"]={key:16,iv:8},e["des-ede"]={key:16,iv:0}},function(t,e,i){(function(t){var r=i(158),n=i(249),o=i(250);var h={binary:!0,hex:!0,base64:!0};e.DiffieHellmanGroup=e.createDiffieHellmanGroup=e.getDiffieHellman=function(e){var i=new t(n[e].prime,"hex"),r=new t(n[e].gen,"hex");return new o(i,r)},e.createDiffieHellman=e.DiffieHellman=function e(i,n,s,a){return t.isBuffer(n)||void 0===h[n]?e(i,"binary",n,s):(n=n||"binary",a=a||"binary",s=s||new t([2]),t.isBuffer(s)||(s=new t(s,a)),"number"==typeof i?new o(r(i,s),s,!0):(t.isBuffer(i)||(i=new t(i,n)),new o(i,s,!0)))}}).call(this,i(46).Buffer)},function(t,e,i){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function n(t,e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}function o(t,e,i){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(i=e,e=10),this._init(t||0,e||10,i||"be"))}var h;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{h=i(162).Buffer}catch(t){}function s(t,e,i){for(var r=0,n=Math.min(t.length,i),o=e;o<n;o++){var h=t.charCodeAt(o)-48;r<<=4,r|=h>=49&&h<=54?h-49+10:h>=17&&h<=22?h-17+10:15&h}return r}function a(t,e,i,r){for(var n=0,o=Math.min(t.length,i),h=e;h<o;h++){var s=t.charCodeAt(h)-48;n*=r,n+=s>=49?s-49+10:s>=17?s-17+10:s}return n}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"==typeof t)return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&n++,16===e?this._parseHex(t,n):this._parseBase(t,e,n),"-"===t[0]&&(this.negative=1),this.strip(),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,h,s=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)h=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)h=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var r,n,o=0;for(i=t.length-6,r=0;i>=e;i-=6)n=s(t,i,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);i+6!==e&&(n=s(t,e,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,i){this.words=[0],this.length=1;for(var r=0,n=1;n<=67108863;n*=e)r++;r--,n=n/e|0;for(var o=t.length-i,h=o%r,s=Math.min(o,o-h)+i,u=0,f=i;f<s;f+=r)u=a(t,f,f+r,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==h){var l=1;for(u=a(t,f,t.length,e),f=0;f<h;f++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,i){i.negative=e.negative^t.negative;var r=t.length+e.length|0;i.length=r,r=r-1|0;var n=0|t.words[0],o=0|e.words[0],h=n*o,s=67108863&h,a=h/67108864|0;i.words[0]=s;for(var u=1;u<r;u++){for(var f=a>>>26,l=67108863&a,d=Math.min(u,e.length-1),c=Math.max(0,u-t.length+1);c<=d;c++){var p=u-c|0;f+=(h=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&h}i.words[u]=0|l,a=0|f}return 0!==a?i.words[u]=0|a:i.length--,i.strip()}o.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,h=0;h<this.length;h++){var s=this.words[h],a=(16777215&(s<<n|o)).toString(16);i=0!==(o=s>>>24-n&16777215)||h!==this.length-1?u[6-a.length]+a+i:a+i,(n+=2)>=26&&(n-=26,h--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var d=f[t],c=l[t];i="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(c).toString(t);i=(p=p.idivn(c)).isZero()?m+i:u[d-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return r(void 0!==h),this.toArrayLike(h,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,i){var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var h,s,a="le"===e,u=new t(o),f=this.clone();if(a){for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[s]=h;for(;s<o;s++)u[s]=0}else{for(s=0;s<o-n;s++)u[s]=0;for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[o-s-1]=h}return u},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,i=0;return e>=4096&&(i+=13,e>>>=13),e>=64&&(i+=7,e>>>=7),e>=8&&(i+=4,e>>>=4),e>=2&&(i+=2,e>>>=2),i+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,i=0;return 0==(8191&e)&&(i+=13,e>>>=13),0==(127&e)&&(i+=7,e>>>=7),0==(15&e)&&(i+=4,e>>>=4),0==(3&e)&&(i+=2,e>>>=2),0==(1&e)&&i++,i},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var i=this._zeroBits(this.words[e]);if(t+=i,26!==i)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var i=0;i<e.length;i++)this.words[i]=this.words[i]&t.words[i];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,i;this.length>t.length?(e=this,i=t):(e=t,i=this);for(var r=0;r<i.length;r++)this.words[r]=e.words[r]^i.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},o.prototype.iadd=function(t){var e,i,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(i=this,r=t):(i=t,r=this);for(var n=0,o=0;o<r.length;o++)e=(0|i.words[o])+(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<i.length;o++)e=(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=i.length,0!==n)this.words[this.length]=n,this.length++;else if(i!==this)for(;o<i.length;o++)this.words[o]=i.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var i,r,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(i=this,r=t):(i=t,r=this);for(var o=0,h=0;h<r.length;h++)o=(e=(0|i.words[h])-(0|r.words[h])+o)>>26,this.words[h]=67108863&e;for(;0!==o&&h<i.length;h++)o=(e=(0|i.words[h])+o)>>26,this.words[h]=67108863&e;if(0===o&&h<i.length&&i!==this)for(;h<i.length;h++)this.words[h]=i.words[h];return this.length=Math.max(this.length,h),i!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var c=function(t,e,i){var r,n,o,h=t.words,s=e.words,a=i.words,u=0,f=0|h[0],l=8191&f,d=f>>>13,c=0|h[1],p=8191&c,m=c>>>13,v=0|h[2],g=8191&v,b=v>>>13,y=0|h[3],w=8191&y,M=y>>>13,_=0|h[4],S=8191&_,k=_>>>13,A=0|h[5],E=8191&A,x=A>>>13,B=0|h[6],R=8191&B,I=B>>>13,T=0|h[7],P=8191&T,C=T>>>13,L=0|h[8],q=8191&L,j=L>>>13,O=0|h[9],N=8191&O,D=O>>>13,z=0|s[0],U=8191&z,H=z>>>13,Z=0|s[1],F=8191&Z,K=Z>>>13,W=0|s[2],Y=8191&W,V=W>>>13,X=0|s[3],G=8191&X,J=X>>>13,$=0|s[4],Q=8191&$,tt=$>>>13,et=0|s[5],it=8191&et,rt=et>>>13,nt=0|s[6],ot=8191&nt,ht=nt>>>13,st=0|s[7],at=8191&st,ut=st>>>13,ft=0|s[8],lt=8191&ft,dt=ft>>>13,ct=0|s[9],pt=8191&ct,mt=ct>>>13;i.negative=t.negative^e.negative,i.length=19;var vt=(u+(r=Math.imul(l,U))|0)+((8191&(n=(n=Math.imul(l,H))+Math.imul(d,U)|0))<<13)|0;u=((o=Math.imul(d,H))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(p,U),n=(n=Math.imul(p,H))+Math.imul(m,U)|0,o=Math.imul(m,H);var gt=(u+(r=r+Math.imul(l,F)|0)|0)+((8191&(n=(n=n+Math.imul(l,K)|0)+Math.imul(d,F)|0))<<13)|0;u=((o=o+Math.imul(d,K)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(g,U),n=(n=Math.imul(g,H))+Math.imul(b,U)|0,o=Math.imul(b,H),r=r+Math.imul(p,F)|0,n=(n=n+Math.imul(p,K)|0)+Math.imul(m,F)|0,o=o+Math.imul(m,K)|0;var bt=(u+(r=r+Math.imul(l,Y)|0)|0)+((8191&(n=(n=n+Math.imul(l,V)|0)+Math.imul(d,Y)|0))<<13)|0;u=((o=o+Math.imul(d,V)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(w,U),n=(n=Math.imul(w,H))+Math.imul(M,U)|0,o=Math.imul(M,H),r=r+Math.imul(g,F)|0,n=(n=n+Math.imul(g,K)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,K)|0,r=r+Math.imul(p,Y)|0,n=(n=n+Math.imul(p,V)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,V)|0;var yt=(u+(r=r+Math.imul(l,G)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,G)|0))<<13)|0;u=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(S,U),n=(n=Math.imul(S,H))+Math.imul(k,U)|0,o=Math.imul(k,H),r=r+Math.imul(w,F)|0,n=(n=n+Math.imul(w,K)|0)+Math.imul(M,F)|0,o=o+Math.imul(M,K)|0,r=r+Math.imul(g,Y)|0,n=(n=n+Math.imul(g,V)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,V)|0,r=r+Math.imul(p,G)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,J)|0;var wt=(u+(r=r+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;u=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(E,U),n=(n=Math.imul(E,H))+Math.imul(x,U)|0,o=Math.imul(x,H),r=r+Math.imul(S,F)|0,n=(n=n+Math.imul(S,K)|0)+Math.imul(k,F)|0,o=o+Math.imul(k,K)|0,r=r+Math.imul(w,Y)|0,n=(n=n+Math.imul(w,V)|0)+Math.imul(M,Y)|0,o=o+Math.imul(M,V)|0,r=r+Math.imul(g,G)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,J)|0,r=r+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Mt=(u+(r=r+Math.imul(l,it)|0)|0)+((8191&(n=(n=n+Math.imul(l,rt)|0)+Math.imul(d,it)|0))<<13)|0;u=((o=o+Math.imul(d,rt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(R,U),n=(n=Math.imul(R,H))+Math.imul(I,U)|0,o=Math.imul(I,H),r=r+Math.imul(E,F)|0,n=(n=n+Math.imul(E,K)|0)+Math.imul(x,F)|0,o=o+Math.imul(x,K)|0,r=r+Math.imul(S,Y)|0,n=(n=n+Math.imul(S,V)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,V)|0,r=r+Math.imul(w,G)|0,n=(n=n+Math.imul(w,J)|0)+Math.imul(M,G)|0,o=o+Math.imul(M,J)|0,r=r+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,r=r+Math.imul(p,it)|0,n=(n=n+Math.imul(p,rt)|0)+Math.imul(m,it)|0,o=o+Math.imul(m,rt)|0;var _t=(u+(r=r+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,ht)|0)+Math.imul(d,ot)|0))<<13)|0;u=((o=o+Math.imul(d,ht)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(P,U),n=(n=Math.imul(P,H))+Math.imul(C,U)|0,o=Math.imul(C,H),r=r+Math.imul(R,F)|0,n=(n=n+Math.imul(R,K)|0)+Math.imul(I,F)|0,o=o+Math.imul(I,K)|0,r=r+Math.imul(E,Y)|0,n=(n=n+Math.imul(E,V)|0)+Math.imul(x,Y)|0,o=o+Math.imul(x,V)|0,r=r+Math.imul(S,G)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,J)|0,r=r+Math.imul(w,Q)|0,n=(n=n+Math.imul(w,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,r=r+Math.imul(g,it)|0,n=(n=n+Math.imul(g,rt)|0)+Math.imul(b,it)|0,o=o+Math.imul(b,rt)|0,r=r+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,ht)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,ht)|0;var St=(u+(r=r+Math.imul(l,at)|0)|0)+((8191&(n=(n=n+Math.imul(l,ut)|0)+Math.imul(d,at)|0))<<13)|0;u=((o=o+Math.imul(d,ut)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(q,U),n=(n=Math.imul(q,H))+Math.imul(j,U)|0,o=Math.imul(j,H),r=r+Math.imul(P,F)|0,n=(n=n+Math.imul(P,K)|0)+Math.imul(C,F)|0,o=o+Math.imul(C,K)|0,r=r+Math.imul(R,Y)|0,n=(n=n+Math.imul(R,V)|0)+Math.imul(I,Y)|0,o=o+Math.imul(I,V)|0,r=r+Math.imul(E,G)|0,n=(n=n+Math.imul(E,J)|0)+Math.imul(x,G)|0,o=o+Math.imul(x,J)|0,r=r+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,r=r+Math.imul(w,it)|0,n=(n=n+Math.imul(w,rt)|0)+Math.imul(M,it)|0,o=o+Math.imul(M,rt)|0,r=r+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,ht)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,ht)|0,r=r+Math.imul(p,at)|0,n=(n=n+Math.imul(p,ut)|0)+Math.imul(m,at)|0,o=o+Math.imul(m,ut)|0;var kt=(u+(r=r+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;u=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(N,U),n=(n=Math.imul(N,H))+Math.imul(D,U)|0,o=Math.imul(D,H),r=r+Math.imul(q,F)|0,n=(n=n+Math.imul(q,K)|0)+Math.imul(j,F)|0,o=o+Math.imul(j,K)|0,r=r+Math.imul(P,Y)|0,n=(n=n+Math.imul(P,V)|0)+Math.imul(C,Y)|0,o=o+Math.imul(C,V)|0,r=r+Math.imul(R,G)|0,n=(n=n+Math.imul(R,J)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,J)|0,r=r+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,r=r+Math.imul(S,it)|0,n=(n=n+Math.imul(S,rt)|0)+Math.imul(k,it)|0,o=o+Math.imul(k,rt)|0,r=r+Math.imul(w,ot)|0,n=(n=n+Math.imul(w,ht)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ht)|0,r=r+Math.imul(g,at)|0,n=(n=n+Math.imul(g,ut)|0)+Math.imul(b,at)|0,o=o+Math.imul(b,ut)|0,r=r+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(u+(r=r+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;u=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(N,F),n=(n=Math.imul(N,K))+Math.imul(D,F)|0,o=Math.imul(D,K),r=r+Math.imul(q,Y)|0,n=(n=n+Math.imul(q,V)|0)+Math.imul(j,Y)|0,o=o+Math.imul(j,V)|0,r=r+Math.imul(P,G)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(C,G)|0,o=o+Math.imul(C,J)|0,r=r+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,r=r+Math.imul(E,it)|0,n=(n=n+Math.imul(E,rt)|0)+Math.imul(x,it)|0,o=o+Math.imul(x,rt)|0,r=r+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,ht)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ht)|0,r=r+Math.imul(w,at)|0,n=(n=n+Math.imul(w,ut)|0)+Math.imul(M,at)|0,o=o+Math.imul(M,ut)|0,r=r+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(u+(r=r+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;u=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(N,Y),n=(n=Math.imul(N,V))+Math.imul(D,Y)|0,o=Math.imul(D,V),r=r+Math.imul(q,G)|0,n=(n=n+Math.imul(q,J)|0)+Math.imul(j,G)|0,o=o+Math.imul(j,J)|0,r=r+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(C,Q)|0,o=o+Math.imul(C,tt)|0,r=r+Math.imul(R,it)|0,n=(n=n+Math.imul(R,rt)|0)+Math.imul(I,it)|0,o=o+Math.imul(I,rt)|0,r=r+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,ht)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,ht)|0,r=r+Math.imul(S,at)|0,n=(n=n+Math.imul(S,ut)|0)+Math.imul(k,at)|0,o=o+Math.imul(k,ut)|0,r=r+Math.imul(w,lt)|0,n=(n=n+Math.imul(w,dt)|0)+Math.imul(M,lt)|0,o=o+Math.imul(M,dt)|0;var xt=(u+(r=r+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(b,pt)|0))<<13)|0;u=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(N,G),n=(n=Math.imul(N,J))+Math.imul(D,G)|0,o=Math.imul(D,J),r=r+Math.imul(q,Q)|0,n=(n=n+Math.imul(q,tt)|0)+Math.imul(j,Q)|0,o=o+Math.imul(j,tt)|0,r=r+Math.imul(P,it)|0,n=(n=n+Math.imul(P,rt)|0)+Math.imul(C,it)|0,o=o+Math.imul(C,rt)|0,r=r+Math.imul(R,ot)|0,n=(n=n+Math.imul(R,ht)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,ht)|0,r=r+Math.imul(E,at)|0,n=(n=n+Math.imul(E,ut)|0)+Math.imul(x,at)|0,o=o+Math.imul(x,ut)|0,r=r+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,dt)|0;var Bt=(u+(r=r+Math.imul(w,pt)|0)|0)+((8191&(n=(n=n+Math.imul(w,mt)|0)+Math.imul(M,pt)|0))<<13)|0;u=((o=o+Math.imul(M,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(N,Q),n=(n=Math.imul(N,tt))+Math.imul(D,Q)|0,o=Math.imul(D,tt),r=r+Math.imul(q,it)|0,n=(n=n+Math.imul(q,rt)|0)+Math.imul(j,it)|0,o=o+Math.imul(j,rt)|0,r=r+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,ht)|0)+Math.imul(C,ot)|0,o=o+Math.imul(C,ht)|0,r=r+Math.imul(R,at)|0,n=(n=n+Math.imul(R,ut)|0)+Math.imul(I,at)|0,o=o+Math.imul(I,ut)|0,r=r+Math.imul(E,lt)|0,n=(n=n+Math.imul(E,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(u+(r=r+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(k,pt)|0))<<13)|0;u=((o=o+Math.imul(k,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,r=Math.imul(N,it),n=(n=Math.imul(N,rt))+Math.imul(D,it)|0,o=Math.imul(D,rt),r=r+Math.imul(q,ot)|0,n=(n=n+Math.imul(q,ht)|0)+Math.imul(j,ot)|0,o=o+Math.imul(j,ht)|0,r=r+Math.imul(P,at)|0,n=(n=n+Math.imul(P,ut)|0)+Math.imul(C,at)|0,o=o+Math.imul(C,ut)|0,r=r+Math.imul(R,lt)|0,n=(n=n+Math.imul(R,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(u+(r=r+Math.imul(E,pt)|0)|0)+((8191&(n=(n=n+Math.imul(E,mt)|0)+Math.imul(x,pt)|0))<<13)|0;u=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(N,ot),n=(n=Math.imul(N,ht))+Math.imul(D,ot)|0,o=Math.imul(D,ht),r=r+Math.imul(q,at)|0,n=(n=n+Math.imul(q,ut)|0)+Math.imul(j,at)|0,o=o+Math.imul(j,ut)|0,r=r+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(C,lt)|0,o=o+Math.imul(C,dt)|0;var Tt=(u+(r=r+Math.imul(R,pt)|0)|0)+((8191&(n=(n=n+Math.imul(R,mt)|0)+Math.imul(I,pt)|0))<<13)|0;u=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(N,at),n=(n=Math.imul(N,ut))+Math.imul(D,at)|0,o=Math.imul(D,ut),r=r+Math.imul(q,lt)|0,n=(n=n+Math.imul(q,dt)|0)+Math.imul(j,lt)|0,o=o+Math.imul(j,dt)|0;var Pt=(u+(r=r+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(C,pt)|0))<<13)|0;u=((o=o+Math.imul(C,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,r=Math.imul(N,lt),n=(n=Math.imul(N,dt))+Math.imul(D,lt)|0,o=Math.imul(D,dt);var Ct=(u+(r=r+Math.imul(q,pt)|0)|0)+((8191&(n=(n=n+Math.imul(q,mt)|0)+Math.imul(j,pt)|0))<<13)|0;u=((o=o+Math.imul(j,mt)|0)+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863;var Lt=(u+(r=Math.imul(N,pt))|0)+((8191&(n=(n=Math.imul(N,mt))+Math.imul(D,pt)|0))<<13)|0;return u=((o=Math.imul(D,mt))+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,a[0]=vt,a[1]=gt,a[2]=bt,a[3]=yt,a[4]=wt,a[5]=Mt,a[6]=_t,a[7]=St,a[8]=kt,a[9]=At,a[10]=Et,a[11]=xt,a[12]=Bt,a[13]=Rt,a[14]=It,a[15]=Tt,a[16]=Pt,a[17]=Ct,a[18]=Lt,0!==u&&(a[19]=u,i.length++),i};function p(t,e,i){return(new m).mulp(t,e,i)}function m(t,e){this.x=t,this.y=e}Math.imul||(c=d),o.prototype.mulTo=function(t,e){var i=this.length+t.length;return 10===this.length&&10===t.length?c(this,t,e):i<63?d(this,t,e):i<1024?function(t,e,i){i.negative=e.negative^t.negative,i.length=t.length+e.length;for(var r=0,n=0,o=0;o<i.length-1;o++){var h=n;n=0;for(var s=67108863&r,a=Math.min(o,e.length-1),u=Math.max(0,o-t.length+1);u<=a;u++){var f=o-u,l=(0|t.words[f])*(0|e.words[u]),d=67108863&l;s=67108863&(d=d+s|0),n+=(h=(h=h+(l/67108864|0)|0)+(d>>>26)|0)>>>26,h&=67108863}i.words[o]=s,r=h,h=n}return 0!==r?i.words[o]=r:i.length--,i.strip()}(this,t,e):p(this,t,e)},m.prototype.makeRBT=function(t){for(var e=new Array(t),i=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,i,t);return e},m.prototype.revBin=function(t,e,i){if(0===t||t===i-1)return t;for(var r=0,n=0;n<e;n++)r|=(1&t)<<e-n-1,t>>=1;return r},m.prototype.permute=function(t,e,i,r,n,o){for(var h=0;h<o;h++)r[h]=e[t[h]],n[h]=i[t[h]]},m.prototype.transform=function(t,e,i,r,n,o){this.permute(o,t,e,i,r,n);for(var h=1;h<n;h<<=1)for(var s=h<<1,a=Math.cos(2*Math.PI/s),u=Math.sin(2*Math.PI/s),f=0;f<n;f+=s)for(var l=a,d=u,c=0;c<h;c++){var p=i[f+c],m=r[f+c],v=i[f+c+h],g=r[f+c+h],b=l*v-d*g;g=l*g+d*v,v=b,i[f+c]=p+v,r[f+c]=m+g,i[f+c+h]=p-v,r[f+c+h]=m-g,c!==s&&(b=a*l-u*d,d=a*d+u*l,l=b)}},m.prototype.guessLen13b=function(t,e){var i=1|Math.max(e,t),r=1&i,n=0;for(i=i/2|0;i;i>>>=1)n++;return 1<<n+1+r},m.prototype.conjugate=function(t,e,i){if(!(i<=1))for(var r=0;r<i/2;r++){var n=t[r];t[r]=t[i-r-1],t[i-r-1]=n,n=e[r],e[r]=-e[i-r-1],e[i-r-1]=-n}},m.prototype.normalize13b=function(t,e){for(var i=0,r=0;r<e/2;r++){var n=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+i;t[r]=67108863&n,i=n<67108864?0:n/67108864|0}return t},m.prototype.convert13b=function(t,e,i,n){for(var o=0,h=0;h<e;h++)o+=0|t[h],i[2*h]=8191&o,o>>>=13,i[2*h+1]=8191&o,o>>>=13;for(h=2*e;h<n;++h)i[h]=0;r(0===o),r(0==(-8192&o))},m.prototype.stub=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=0;return e},m.prototype.mulp=function(t,e,i){var r=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(r),o=this.stub(r),h=new Array(r),s=new Array(r),a=new Array(r),u=new Array(r),f=new Array(r),l=new Array(r),d=i.words;d.length=r,this.convert13b(t.words,t.length,h,r),this.convert13b(e.words,e.length,u,r),this.transform(h,o,s,a,r,n),this.transform(u,o,f,l,r,n);for(var c=0;c<r;c++){var p=s[c]*f[c]-a[c]*l[c];a[c]=s[c]*l[c]+a[c]*f[c],s[c]=p}return this.conjugate(s,a,r),this.transform(s,a,d,o,r,n),this.conjugate(d,o,r),this.normalize13b(d,r),i.negative=t.negative^e.negative,i.length=t.length+e.length,i.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),p(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,o=(67108863&n)+(67108863&e);e>>=26,e+=n/67108864|0,e+=o>>>26,this.words[i]=67108863&o}return 0!==e&&(this.words[i]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),i=0;i<e.length;i++){var r=i/26|0,n=i%26;e[i]=(t.words[r]&1<<n)>>>n}return e}(t);if(0===e.length)return new o(1);for(var i=this,r=0;r<e.length&&0===e[r];r++,i=i.sqr());if(++r<e.length)for(var n=i.sqr();r<e.length;r++,n=n.sqr())0!==e[r]&&(i=i.mul(n));return i},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var h=0;for(e=0;e<this.length;e++){var s=this.words[e]&o,a=(0|this.words[e])-s<<i;this.words[e]=a|h,h=s>>>26-i}h&&(this.words[e]=h,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this.strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,h=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,a=i;if(n-=h,n=Math.max(0,n),a){for(var u=0;u<h;u++)a.words[u]=this.words[u];a.length=h}if(0===h);else if(this.length>h)for(this.length-=h,u=0;u<this.length;u++)this.words[u]=this.words[u+h];else this.words[0]=0,this.length=1;var f=0;for(u=this.length-1;u>=0&&(0!==f||u>=n);u--){var l=0|this.words[u];this.words[u]=f<<26-o|l>>>o,f=l&s}return a&&0!==f&&(a.words[a.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i)&&!!(this.words[i]&n)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,i){var n,o,h=t.length+i;this._expand(h);var s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+s;var a=(0|t.words[n])*e;s=((o-=67108863&a)>>26)-(a/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)s=(o=(0|this.words[n+i])+s)>>26,this.words[n+i]=67108863&o;if(0===s)return this.strip();for(r(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var i=(this.length,t.length),r=this.clone(),n=t,h=0|n.words[n.length-1];0!==(i=26-this._countBits(h))&&(n=n.ushln(i),r.iushln(i),h=0|n.words[n.length-1]);var s,a=r.length-n.length;if("mod"!==e){(s=new o(null)).length=a+1,s.words=new Array(s.length);for(var u=0;u<s.length;u++)s.words[u]=0}var f=r.clone()._ishlnsubmul(n,1,a);0===f.negative&&(r=f,s&&(s.words[a]=1));for(var l=a-1;l>=0;l--){var d=67108864*(0|r.words[n.length+l])+(0|r.words[n.length+l-1]);for(d=Math.min(d/h|0,67108863),r._ishlnsubmul(n,d,l);0!==r.negative;)d--,r.negative=0,r._ishlnsubmul(n,1,l),r.isZero()||(r.negative^=1);s&&(s.words[l]=d)}return s&&s.strip(),r.strip(),"div"!==e&&0!==i&&r.iushrn(i),{div:s||null,mod:r}},o.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(n=s.div.neg()),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.iadd(t)),{div:n,mod:h}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.isub(t)),{div:s.div,mod:h}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var n,h,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var i=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),n=t.andln(1),o=i.cmp(r);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(e*i+(0|this.words[n]))%t;return i},o.prototype.idivn=function(t){r(t<=67108863);for(var e=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*e;this.words[i]=n/t|0,e=n%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n=new o(1),h=new o(0),s=new o(0),a=new o(1),u=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++u;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(n.isOdd()||h.isOdd())&&(n.iadd(f),h.isub(l)),n.iushrn(1),h.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(f),a.isub(l)),s.iushrn(1),a.iushrn(1);e.cmp(i)>=0?(e.isub(i),n.isub(s),h.isub(a)):(i.isub(e),s.isub(n),a.isub(h))}return{a:s,b:a,gcd:i.iushln(u)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n,h=new o(1),s=new o(0),a=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var u=0,f=1;0==(e.words[0]&f)&&u<26;++u,f<<=1);if(u>0)for(e.iushrn(u);u-- >0;)h.isOdd()&&h.iadd(a),h.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(i)>=0?(e.isub(i),h.isub(s)):(i.isub(e),s.isub(h))}return(n=0===e.cmpn(1)?h:s).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),i=t.clone();e.negative=0,i.negative=0;for(var r=0;e.isEven()&&i.isEven();r++)e.iushrn(1),i.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;i.isEven();)i.iushrn(1);var n=e.cmp(i);if(n<0){var o=e;e=i,i=o}else if(0===n||0===i.cmpn(1))break;e.isub(i)}return i.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,h=i;0!==o&&h<this.length;h++){var s=0|this.words[h];o=(s+=o)>>>26,s&=67108863,this.words[h]=s}return 0!==o&&(this.words[h]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,i=this.length-1;i>=0;i--){var r=0|this.words[i],n=0|t.words[i];if(r!==n){r<n?e=-1:r>n&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new _(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function g(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){g.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function y(){g.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){g.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){g.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function S(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},g.prototype.ireduce=function(t){var e,i=t;do{this.split(i,this.tmp),e=(i=(i=this.imulK(i)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:i.ucmp(this.p);return 0===r?(i.words[0]=0,i.length=1):r>0?i.isub(this.p):void 0!==i.strip?i.strip():i._strip(),i},g.prototype.split=function(t,e){t.iushrn(this.n,0,e)},g.prototype.imulK=function(t){return t.imul(this.k)},n(b,g),b.prototype.split=function(t,e){for(var i=Math.min(t.length,9),r=0;r<i;r++)e.words[r]=t.words[r];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var n=t.words[9];for(e.words[e.length++]=4194303&n,r=10;r<t.length;r++){var o=0|t.words[r];t.words[r-10]=(4194303&o)<<4|n>>>22,n=o}n>>>=22,t.words[r-10]=n,0===n&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,i=0;i<t.length;i++){var r=0|t.words[i];e+=977*r,t.words[i]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(y,g),n(w,g),n(M,g),M.prototype.imulK=function(t){for(var e=0,i=0;i<t.length;i++){var r=19*(0|t.words[i])+e,n=67108863&r;r>>>=26,t.words[i]=n,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new b;else if("p224"===t)e=new y;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new M}return v[t]=e,e},_.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,e){this._verify2(t,e);var i=t.add(e);return i.cmp(this.m)>=0&&i.isub(this.m),i._forceRed(this)},_.prototype.iadd=function(t,e){this._verify2(t,e);var i=t.iadd(e);return i.cmp(this.m)>=0&&i.isub(this.m),i},_.prototype.sub=function(t,e){this._verify2(t,e);var i=t.sub(e);return i.cmpn(0)<0&&i.iadd(this.m),i._forceRed(this)},_.prototype.isub=function(t,e){this._verify2(t,e);var i=t.isub(e);return i.cmpn(0)<0&&i.iadd(this.m),i},_.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},_.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},_.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new o(1)).iushrn(2);return this.pow(t,i)}for(var n=this.m.subn(1),h=0;!n.isZero()&&0===n.andln(1);)h++,n.iushrn(1);r(!n.isZero());var s=new o(1).toRed(this),a=s.redNeg(),u=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,u).cmp(a);)f.redIAdd(a);for(var l=this.pow(f,n),d=this.pow(t,n.addn(1).iushrn(1)),c=this.pow(t,n),p=h;0!==c.cmp(s);){for(var m=c,v=0;0!==m.cmp(s);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new o(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},_.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},_.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var i=new Array(16);i[0]=new o(1).toRed(this),i[1]=t;for(var r=2;r<i.length;r++)i[r]=this.mul(i[r-1],t);var n=i[0],h=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var u=e.words[r],f=a-1;f>=0;f--){var l=u>>f&1;n!==i[0]&&(n=this.sqr(n)),0!==l||0!==h?(h<<=1,h|=l,(4===++s||0===r&&0===f)&&(n=this.mul(n,i[h]),s=0,h=0)):s=0}a=26}return n},_.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},_.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new S(t)},n(S,_),S.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},S.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},S.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var i=t.imul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},S.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var i=t.mul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),h=n;return n.cmp(this.m)>=0?h=n.isub(this.m):n.cmpn(0)<0&&(h=n.iadd(this.m)),h._forceRed(this)},S.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,i(52)(t))},function(t){t.exports={modp1:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},modp2:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},modp5:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},modp14:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},modp15:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},modp16:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},modp17:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},modp18:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}},function(t,e,i){(function(e){var r=i(159),n=new(i(161)),o=new r(24),h=new r(11),s=new r(10),a=new r(3),u=new r(7),f=i(158),l=i(67);function d(t,i){return i=i||"utf8",e.isBuffer(t)||(t=new e(t,i)),this._pub=new r(t),this}function c(t,i){return i=i||"utf8",e.isBuffer(t)||(t=new e(t,i)),this._priv=new r(t),this}t.exports=m;var p={};function m(t,e,i){this.setGenerator(e),this.__prime=new r(t),this._prime=r.mont(this.__prime),this._primeLen=t.length,this._pub=void 0,this._priv=void 0,this._primeCode=void 0,i?(this.setPublicKey=d,this.setPrivateKey=c):this._primeCode=8}function v(t,i){var r=new e(t.toArray());return i?r.toString(i):r}Object.defineProperty(m.prototype,"verifyError",{enumerable:!0,get:function(){return"number"!=typeof this._primeCode&&(this._primeCode=function(t,e){var i=e.toString("hex"),r=[i,t.toString(16)].join("_");if(r in p)return p[r];var l,d=0;if(t.isEven()||!f.simpleSieve||!f.fermatTest(t)||!n.test(t))return d+=1,d+="02"===i||"05"===i?8:4,p[r]=d,d;switch(n.test(t.shrn(1))||(d+=2),i){case"02":t.mod(o).cmp(h)&&(d+=8);break;case"05":(l=t.mod(s)).cmp(a)&&l.cmp(u)&&(d+=8);break;default:d+=4}return p[r]=d,d}(this.__prime,this.__gen)),this._primeCode}}),m.prototype.generateKeys=function(){return this._priv||(this._priv=new r(l(this._primeLen))),this._pub=this._gen.toRed(this._prime).redPow(this._priv).fromRed(),this.getPublicKey()},m.prototype.computeSecret=function(t){var i=(t=(t=new r(t)).toRed(this._prime)).redPow(this._priv).fromRed(),n=new e(i.toArray()),o=this.getPrime();if(n.length<o.length){var h=new e(o.length-n.length);h.fill(0),n=e.concat([h,n])}return n},m.prototype.getPublicKey=function(t){return v(this._pub,t)},m.prototype.getPrivateKey=function(t){return v(this._priv,t)},m.prototype.getPrime=function(t){return v(this.__prime,t)},m.prototype.getGenerator=function(t){return v(this._gen,t)},m.prototype.setGenerator=function(t,i){return i=i||"utf8",e.isBuffer(t)||(t=new e(t,i)),this.__gen=t,this._gen=new r(t),this}}).call(this,i(46).Buffer)},function(t,e,i){var r=i(34).Buffer,n=i(74),o=i(125),h=i(32),s=i(252),a=i(281),u=i(145);function f(t){o.Writable.call(this);var e=u[t];if(!e)throw new Error("Unknown message digest");this._hashType=e.hash,this._hash=n(e.hash),this._tag=e.id,this._signType=e.sign}function l(t){o.Writable.call(this);var e=u[t];if(!e)throw new Error("Unknown message digest");this._hash=n(e.hash),this._tag=e.id,this._signType=e.sign}function d(t){return new f(t)}function c(t){return new l(t)}Object.keys(u).forEach((function(t){u[t].id=r.from(u[t].id,"hex"),u[t.toLowerCase()]=u[t]})),h(f,o.Writable),f.prototype._write=function(t,e,i){this._hash.update(t),i()},f.prototype.update=function(t,e){return"string"==typeof t&&(t=r.from(t,e)),this._hash.update(t),this},f.prototype.sign=function(t,e){this.end();var i=this._hash.digest(),r=s(i,t,this._hashType,this._signType,this._tag);return e?r.toString(e):r},h(l,o.Writable),l.prototype._write=function(t,e,i){this._hash.update(t),i()},l.prototype.update=function(t,e){return"string"==typeof t&&(t=r.from(t,e)),this._hash.update(t),this},l.prototype.verify=function(t,e,i){"string"==typeof e&&(e=r.from(e,i)),this.end();var n=this._hash.digest();return a(e,n,t,this._signType,this._tag)},t.exports={Sign:d,Verify:c,createSign:d,createVerify:c}},function(t,e,i){var r=i(34).Buffer,n=i(143),o=i(105),h=i(106).ec,s=i(171),a=i(86),u=i(180);function f(t,e,i,o){if((t=r.from(t.toArray())).length<e.byteLength()){var h=r.alloc(e.byteLength()-t.length);t=r.concat([h,t])}var s=i.length,a=function(t,e){t=(t=l(t,e)).mod(e);var i=r.from(t.toArray());if(i.length<e.byteLength()){var n=r.alloc(e.byteLength()-i.length);i=r.concat([n,i])}return i}(i,e),u=r.alloc(s);u.fill(1);var f=r.alloc(s);return f=n(o,f).update(u).update(r.from([0])).update(t).update(a).digest(),u=n(o,f).update(u).digest(),{k:f=n(o,f).update(u).update(r.from([1])).update(t).update(a).digest(),v:u=n(o,f).update(u).digest()}}function l(t,e){var i=new s(t),r=(t.length<<3)-e.bitLength();return r>0&&i.ishrn(r),i}function d(t,e,i){var o,h;do{for(o=r.alloc(0);8*o.length<t.bitLength();)e.v=n(i,e.k).update(e.v).digest(),o=r.concat([o,e.v]);h=l(o,t),e.k=n(i,e.k).update(e.v).update(r.from([0])).digest(),e.v=n(i,e.k).update(e.v).digest()}while(-1!==h.cmp(t));return h}function c(t,e,i,r){return t.toRed(s.mont(i)).redPow(e).fromRed().mod(r)}t.exports=function(t,e,i,n,p){var m=a(e);if(m.curve){if("ecdsa"!==n&&"ecdsa/rsa"!==n)throw new Error("wrong private key type");return function(t,e){var i=u[e.curve.join(".")];if(!i)throw new Error("unknown curve "+e.curve.join("."));var n=new h(i).keyFromPrivate(e.privateKey).sign(t);return r.from(n.toDER())}(t,m)}if("dsa"===m.type){if("dsa"!==n)throw new Error("wrong private key type");return function(t,e,i){var n,o=e.params.priv_key,h=e.params.p,a=e.params.q,u=e.params.g,p=new s(0),m=l(t,a).mod(a),v=!1,g=f(o,a,t,i);for(;!1===v;)n=d(a,g,i),p=c(u,n,h,a),0===(v=n.invm(a).imul(m.add(o.mul(p))).mod(a)).cmpn(0)&&(v=!1,p=new s(0));return function(t,e){t=t.toArray(),e=e.toArray(),128&t[0]&&(t=[0].concat(t));128&e[0]&&(e=[0].concat(e));var i=[48,t.length+e.length+4,2,t.length];return i=i.concat(t,[2,e.length],e),r.from(i)}(p,v)}(t,m,i)}if("rsa"!==n&&"ecdsa/rsa"!==n)throw new Error("wrong private key type");t=r.concat([p,t]);for(var v=m.modulus.byteLength(),g=[0,1];t.length+g.length+1<v;)g.push(255);g.push(0);for(var b=-1;++b<t.length;)g.push(t[b]);return o(g,m)},t.exports.getKey=f,t.exports.makeKey=d},function(t,e,i){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function n(t,e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}function o(t,e,i){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(i=e,e=10),this._init(t||0,e||10,i||"be"))}var h;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{h=i(164).Buffer}catch(t){}function s(t,e,i){for(var r=0,n=Math.min(t.length,i),o=e;o<n;o++){var h=t.charCodeAt(o)-48;r<<=4,r|=h>=49&&h<=54?h-49+10:h>=17&&h<=22?h-17+10:15&h}return r}function a(t,e,i,r){for(var n=0,o=Math.min(t.length,i),h=e;h<o;h++){var s=t.charCodeAt(h)-48;n*=r,n+=s>=49?s-49+10:s>=17?s-17+10:s}return n}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"==typeof t)return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&n++,16===e?this._parseHex(t,n):this._parseBase(t,e,n),"-"===t[0]&&(this.negative=1),this.strip(),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,h,s=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)h=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)h=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var r,n,o=0;for(i=t.length-6,r=0;i>=e;i-=6)n=s(t,i,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);i+6!==e&&(n=s(t,e,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,i){this.words=[0],this.length=1;for(var r=0,n=1;n<=67108863;n*=e)r++;r--,n=n/e|0;for(var o=t.length-i,h=o%r,s=Math.min(o,o-h)+i,u=0,f=i;f<s;f+=r)u=a(t,f,f+r,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==h){var l=1;for(u=a(t,f,t.length,e),f=0;f<h;f++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,i){i.negative=e.negative^t.negative;var r=t.length+e.length|0;i.length=r,r=r-1|0;var n=0|t.words[0],o=0|e.words[0],h=n*o,s=67108863&h,a=h/67108864|0;i.words[0]=s;for(var u=1;u<r;u++){for(var f=a>>>26,l=67108863&a,d=Math.min(u,e.length-1),c=Math.max(0,u-t.length+1);c<=d;c++){var p=u-c|0;f+=(h=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&h}i.words[u]=0|l,a=0|f}return 0!==a?i.words[u]=0|a:i.length--,i.strip()}o.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,h=0;h<this.length;h++){var s=this.words[h],a=(16777215&(s<<n|o)).toString(16);i=0!==(o=s>>>24-n&16777215)||h!==this.length-1?u[6-a.length]+a+i:a+i,(n+=2)>=26&&(n-=26,h--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var d=f[t],c=l[t];i="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(c).toString(t);i=(p=p.idivn(c)).isZero()?m+i:u[d-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return r(void 0!==h),this.toArrayLike(h,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,i){var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var h,s,a="le"===e,u=new t(o),f=this.clone();if(a){for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[s]=h;for(;s<o;s++)u[s]=0}else{for(s=0;s<o-n;s++)u[s]=0;for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[o-s-1]=h}return u},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,i=0;return e>=4096&&(i+=13,e>>>=13),e>=64&&(i+=7,e>>>=7),e>=8&&(i+=4,e>>>=4),e>=2&&(i+=2,e>>>=2),i+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,i=0;return 0==(8191&e)&&(i+=13,e>>>=13),0==(127&e)&&(i+=7,e>>>=7),0==(15&e)&&(i+=4,e>>>=4),0==(3&e)&&(i+=2,e>>>=2),0==(1&e)&&i++,i},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var i=this._zeroBits(this.words[e]);if(t+=i,26!==i)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var i=0;i<e.length;i++)this.words[i]=this.words[i]&t.words[i];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,i;this.length>t.length?(e=this,i=t):(e=t,i=this);for(var r=0;r<i.length;r++)this.words[r]=e.words[r]^i.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},o.prototype.iadd=function(t){var e,i,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(i=this,r=t):(i=t,r=this);for(var n=0,o=0;o<r.length;o++)e=(0|i.words[o])+(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<i.length;o++)e=(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=i.length,0!==n)this.words[this.length]=n,this.length++;else if(i!==this)for(;o<i.length;o++)this.words[o]=i.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var i,r,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(i=this,r=t):(i=t,r=this);for(var o=0,h=0;h<r.length;h++)o=(e=(0|i.words[h])-(0|r.words[h])+o)>>26,this.words[h]=67108863&e;for(;0!==o&&h<i.length;h++)o=(e=(0|i.words[h])+o)>>26,this.words[h]=67108863&e;if(0===o&&h<i.length&&i!==this)for(;h<i.length;h++)this.words[h]=i.words[h];return this.length=Math.max(this.length,h),i!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var c=function(t,e,i){var r,n,o,h=t.words,s=e.words,a=i.words,u=0,f=0|h[0],l=8191&f,d=f>>>13,c=0|h[1],p=8191&c,m=c>>>13,v=0|h[2],g=8191&v,b=v>>>13,y=0|h[3],w=8191&y,M=y>>>13,_=0|h[4],S=8191&_,k=_>>>13,A=0|h[5],E=8191&A,x=A>>>13,B=0|h[6],R=8191&B,I=B>>>13,T=0|h[7],P=8191&T,C=T>>>13,L=0|h[8],q=8191&L,j=L>>>13,O=0|h[9],N=8191&O,D=O>>>13,z=0|s[0],U=8191&z,H=z>>>13,Z=0|s[1],F=8191&Z,K=Z>>>13,W=0|s[2],Y=8191&W,V=W>>>13,X=0|s[3],G=8191&X,J=X>>>13,$=0|s[4],Q=8191&$,tt=$>>>13,et=0|s[5],it=8191&et,rt=et>>>13,nt=0|s[6],ot=8191&nt,ht=nt>>>13,st=0|s[7],at=8191&st,ut=st>>>13,ft=0|s[8],lt=8191&ft,dt=ft>>>13,ct=0|s[9],pt=8191&ct,mt=ct>>>13;i.negative=t.negative^e.negative,i.length=19;var vt=(u+(r=Math.imul(l,U))|0)+((8191&(n=(n=Math.imul(l,H))+Math.imul(d,U)|0))<<13)|0;u=((o=Math.imul(d,H))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(p,U),n=(n=Math.imul(p,H))+Math.imul(m,U)|0,o=Math.imul(m,H);var gt=(u+(r=r+Math.imul(l,F)|0)|0)+((8191&(n=(n=n+Math.imul(l,K)|0)+Math.imul(d,F)|0))<<13)|0;u=((o=o+Math.imul(d,K)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(g,U),n=(n=Math.imul(g,H))+Math.imul(b,U)|0,o=Math.imul(b,H),r=r+Math.imul(p,F)|0,n=(n=n+Math.imul(p,K)|0)+Math.imul(m,F)|0,o=o+Math.imul(m,K)|0;var bt=(u+(r=r+Math.imul(l,Y)|0)|0)+((8191&(n=(n=n+Math.imul(l,V)|0)+Math.imul(d,Y)|0))<<13)|0;u=((o=o+Math.imul(d,V)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(w,U),n=(n=Math.imul(w,H))+Math.imul(M,U)|0,o=Math.imul(M,H),r=r+Math.imul(g,F)|0,n=(n=n+Math.imul(g,K)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,K)|0,r=r+Math.imul(p,Y)|0,n=(n=n+Math.imul(p,V)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,V)|0;var yt=(u+(r=r+Math.imul(l,G)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,G)|0))<<13)|0;u=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(S,U),n=(n=Math.imul(S,H))+Math.imul(k,U)|0,o=Math.imul(k,H),r=r+Math.imul(w,F)|0,n=(n=n+Math.imul(w,K)|0)+Math.imul(M,F)|0,o=o+Math.imul(M,K)|0,r=r+Math.imul(g,Y)|0,n=(n=n+Math.imul(g,V)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,V)|0,r=r+Math.imul(p,G)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,J)|0;var wt=(u+(r=r+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;u=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(E,U),n=(n=Math.imul(E,H))+Math.imul(x,U)|0,o=Math.imul(x,H),r=r+Math.imul(S,F)|0,n=(n=n+Math.imul(S,K)|0)+Math.imul(k,F)|0,o=o+Math.imul(k,K)|0,r=r+Math.imul(w,Y)|0,n=(n=n+Math.imul(w,V)|0)+Math.imul(M,Y)|0,o=o+Math.imul(M,V)|0,r=r+Math.imul(g,G)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,J)|0,r=r+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Mt=(u+(r=r+Math.imul(l,it)|0)|0)+((8191&(n=(n=n+Math.imul(l,rt)|0)+Math.imul(d,it)|0))<<13)|0;u=((o=o+Math.imul(d,rt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(R,U),n=(n=Math.imul(R,H))+Math.imul(I,U)|0,o=Math.imul(I,H),r=r+Math.imul(E,F)|0,n=(n=n+Math.imul(E,K)|0)+Math.imul(x,F)|0,o=o+Math.imul(x,K)|0,r=r+Math.imul(S,Y)|0,n=(n=n+Math.imul(S,V)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,V)|0,r=r+Math.imul(w,G)|0,n=(n=n+Math.imul(w,J)|0)+Math.imul(M,G)|0,o=o+Math.imul(M,J)|0,r=r+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,r=r+Math.imul(p,it)|0,n=(n=n+Math.imul(p,rt)|0)+Math.imul(m,it)|0,o=o+Math.imul(m,rt)|0;var _t=(u+(r=r+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,ht)|0)+Math.imul(d,ot)|0))<<13)|0;u=((o=o+Math.imul(d,ht)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(P,U),n=(n=Math.imul(P,H))+Math.imul(C,U)|0,o=Math.imul(C,H),r=r+Math.imul(R,F)|0,n=(n=n+Math.imul(R,K)|0)+Math.imul(I,F)|0,o=o+Math.imul(I,K)|0,r=r+Math.imul(E,Y)|0,n=(n=n+Math.imul(E,V)|0)+Math.imul(x,Y)|0,o=o+Math.imul(x,V)|0,r=r+Math.imul(S,G)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,J)|0,r=r+Math.imul(w,Q)|0,n=(n=n+Math.imul(w,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,r=r+Math.imul(g,it)|0,n=(n=n+Math.imul(g,rt)|0)+Math.imul(b,it)|0,o=o+Math.imul(b,rt)|0,r=r+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,ht)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,ht)|0;var St=(u+(r=r+Math.imul(l,at)|0)|0)+((8191&(n=(n=n+Math.imul(l,ut)|0)+Math.imul(d,at)|0))<<13)|0;u=((o=o+Math.imul(d,ut)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(q,U),n=(n=Math.imul(q,H))+Math.imul(j,U)|0,o=Math.imul(j,H),r=r+Math.imul(P,F)|0,n=(n=n+Math.imul(P,K)|0)+Math.imul(C,F)|0,o=o+Math.imul(C,K)|0,r=r+Math.imul(R,Y)|0,n=(n=n+Math.imul(R,V)|0)+Math.imul(I,Y)|0,o=o+Math.imul(I,V)|0,r=r+Math.imul(E,G)|0,n=(n=n+Math.imul(E,J)|0)+Math.imul(x,G)|0,o=o+Math.imul(x,J)|0,r=r+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,r=r+Math.imul(w,it)|0,n=(n=n+Math.imul(w,rt)|0)+Math.imul(M,it)|0,o=o+Math.imul(M,rt)|0,r=r+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,ht)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,ht)|0,r=r+Math.imul(p,at)|0,n=(n=n+Math.imul(p,ut)|0)+Math.imul(m,at)|0,o=o+Math.imul(m,ut)|0;var kt=(u+(r=r+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;u=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(N,U),n=(n=Math.imul(N,H))+Math.imul(D,U)|0,o=Math.imul(D,H),r=r+Math.imul(q,F)|0,n=(n=n+Math.imul(q,K)|0)+Math.imul(j,F)|0,o=o+Math.imul(j,K)|0,r=r+Math.imul(P,Y)|0,n=(n=n+Math.imul(P,V)|0)+Math.imul(C,Y)|0,o=o+Math.imul(C,V)|0,r=r+Math.imul(R,G)|0,n=(n=n+Math.imul(R,J)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,J)|0,r=r+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,r=r+Math.imul(S,it)|0,n=(n=n+Math.imul(S,rt)|0)+Math.imul(k,it)|0,o=o+Math.imul(k,rt)|0,r=r+Math.imul(w,ot)|0,n=(n=n+Math.imul(w,ht)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ht)|0,r=r+Math.imul(g,at)|0,n=(n=n+Math.imul(g,ut)|0)+Math.imul(b,at)|0,o=o+Math.imul(b,ut)|0,r=r+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(u+(r=r+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;u=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(N,F),n=(n=Math.imul(N,K))+Math.imul(D,F)|0,o=Math.imul(D,K),r=r+Math.imul(q,Y)|0,n=(n=n+Math.imul(q,V)|0)+Math.imul(j,Y)|0,o=o+Math.imul(j,V)|0,r=r+Math.imul(P,G)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(C,G)|0,o=o+Math.imul(C,J)|0,r=r+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,r=r+Math.imul(E,it)|0,n=(n=n+Math.imul(E,rt)|0)+Math.imul(x,it)|0,o=o+Math.imul(x,rt)|0,r=r+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,ht)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ht)|0,r=r+Math.imul(w,at)|0,n=(n=n+Math.imul(w,ut)|0)+Math.imul(M,at)|0,o=o+Math.imul(M,ut)|0,r=r+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(u+(r=r+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;u=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(N,Y),n=(n=Math.imul(N,V))+Math.imul(D,Y)|0,o=Math.imul(D,V),r=r+Math.imul(q,G)|0,n=(n=n+Math.imul(q,J)|0)+Math.imul(j,G)|0,o=o+Math.imul(j,J)|0,r=r+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(C,Q)|0,o=o+Math.imul(C,tt)|0,r=r+Math.imul(R,it)|0,n=(n=n+Math.imul(R,rt)|0)+Math.imul(I,it)|0,o=o+Math.imul(I,rt)|0,r=r+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,ht)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,ht)|0,r=r+Math.imul(S,at)|0,n=(n=n+Math.imul(S,ut)|0)+Math.imul(k,at)|0,o=o+Math.imul(k,ut)|0,r=r+Math.imul(w,lt)|0,n=(n=n+Math.imul(w,dt)|0)+Math.imul(M,lt)|0,o=o+Math.imul(M,dt)|0;var xt=(u+(r=r+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(b,pt)|0))<<13)|0;u=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(N,G),n=(n=Math.imul(N,J))+Math.imul(D,G)|0,o=Math.imul(D,J),r=r+Math.imul(q,Q)|0,n=(n=n+Math.imul(q,tt)|0)+Math.imul(j,Q)|0,o=o+Math.imul(j,tt)|0,r=r+Math.imul(P,it)|0,n=(n=n+Math.imul(P,rt)|0)+Math.imul(C,it)|0,o=o+Math.imul(C,rt)|0,r=r+Math.imul(R,ot)|0,n=(n=n+Math.imul(R,ht)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,ht)|0,r=r+Math.imul(E,at)|0,n=(n=n+Math.imul(E,ut)|0)+Math.imul(x,at)|0,o=o+Math.imul(x,ut)|0,r=r+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,dt)|0;var Bt=(u+(r=r+Math.imul(w,pt)|0)|0)+((8191&(n=(n=n+Math.imul(w,mt)|0)+Math.imul(M,pt)|0))<<13)|0;u=((o=o+Math.imul(M,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(N,Q),n=(n=Math.imul(N,tt))+Math.imul(D,Q)|0,o=Math.imul(D,tt),r=r+Math.imul(q,it)|0,n=(n=n+Math.imul(q,rt)|0)+Math.imul(j,it)|0,o=o+Math.imul(j,rt)|0,r=r+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,ht)|0)+Math.imul(C,ot)|0,o=o+Math.imul(C,ht)|0,r=r+Math.imul(R,at)|0,n=(n=n+Math.imul(R,ut)|0)+Math.imul(I,at)|0,o=o+Math.imul(I,ut)|0,r=r+Math.imul(E,lt)|0,n=(n=n+Math.imul(E,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(u+(r=r+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(k,pt)|0))<<13)|0;u=((o=o+Math.imul(k,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,r=Math.imul(N,it),n=(n=Math.imul(N,rt))+Math.imul(D,it)|0,o=Math.imul(D,rt),r=r+Math.imul(q,ot)|0,n=(n=n+Math.imul(q,ht)|0)+Math.imul(j,ot)|0,o=o+Math.imul(j,ht)|0,r=r+Math.imul(P,at)|0,n=(n=n+Math.imul(P,ut)|0)+Math.imul(C,at)|0,o=o+Math.imul(C,ut)|0,r=r+Math.imul(R,lt)|0,n=(n=n+Math.imul(R,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(u+(r=r+Math.imul(E,pt)|0)|0)+((8191&(n=(n=n+Math.imul(E,mt)|0)+Math.imul(x,pt)|0))<<13)|0;u=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(N,ot),n=(n=Math.imul(N,ht))+Math.imul(D,ot)|0,o=Math.imul(D,ht),r=r+Math.imul(q,at)|0,n=(n=n+Math.imul(q,ut)|0)+Math.imul(j,at)|0,o=o+Math.imul(j,ut)|0,r=r+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(C,lt)|0,o=o+Math.imul(C,dt)|0;var Tt=(u+(r=r+Math.imul(R,pt)|0)|0)+((8191&(n=(n=n+Math.imul(R,mt)|0)+Math.imul(I,pt)|0))<<13)|0;u=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(N,at),n=(n=Math.imul(N,ut))+Math.imul(D,at)|0,o=Math.imul(D,ut),r=r+Math.imul(q,lt)|0,n=(n=n+Math.imul(q,dt)|0)+Math.imul(j,lt)|0,o=o+Math.imul(j,dt)|0;var Pt=(u+(r=r+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(C,pt)|0))<<13)|0;u=((o=o+Math.imul(C,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,r=Math.imul(N,lt),n=(n=Math.imul(N,dt))+Math.imul(D,lt)|0,o=Math.imul(D,dt);var Ct=(u+(r=r+Math.imul(q,pt)|0)|0)+((8191&(n=(n=n+Math.imul(q,mt)|0)+Math.imul(j,pt)|0))<<13)|0;u=((o=o+Math.imul(j,mt)|0)+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863;var Lt=(u+(r=Math.imul(N,pt))|0)+((8191&(n=(n=Math.imul(N,mt))+Math.imul(D,pt)|0))<<13)|0;return u=((o=Math.imul(D,mt))+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,a[0]=vt,a[1]=gt,a[2]=bt,a[3]=yt,a[4]=wt,a[5]=Mt,a[6]=_t,a[7]=St,a[8]=kt,a[9]=At,a[10]=Et,a[11]=xt,a[12]=Bt,a[13]=Rt,a[14]=It,a[15]=Tt,a[16]=Pt,a[17]=Ct,a[18]=Lt,0!==u&&(a[19]=u,i.length++),i};function p(t,e,i){return(new m).mulp(t,e,i)}function m(t,e){this.x=t,this.y=e}Math.imul||(c=d),o.prototype.mulTo=function(t,e){var i=this.length+t.length;return 10===this.length&&10===t.length?c(this,t,e):i<63?d(this,t,e):i<1024?function(t,e,i){i.negative=e.negative^t.negative,i.length=t.length+e.length;for(var r=0,n=0,o=0;o<i.length-1;o++){var h=n;n=0;for(var s=67108863&r,a=Math.min(o,e.length-1),u=Math.max(0,o-t.length+1);u<=a;u++){var f=o-u,l=(0|t.words[f])*(0|e.words[u]),d=67108863&l;s=67108863&(d=d+s|0),n+=(h=(h=h+(l/67108864|0)|0)+(d>>>26)|0)>>>26,h&=67108863}i.words[o]=s,r=h,h=n}return 0!==r?i.words[o]=r:i.length--,i.strip()}(this,t,e):p(this,t,e)},m.prototype.makeRBT=function(t){for(var e=new Array(t),i=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,i,t);return e},m.prototype.revBin=function(t,e,i){if(0===t||t===i-1)return t;for(var r=0,n=0;n<e;n++)r|=(1&t)<<e-n-1,t>>=1;return r},m.prototype.permute=function(t,e,i,r,n,o){for(var h=0;h<o;h++)r[h]=e[t[h]],n[h]=i[t[h]]},m.prototype.transform=function(t,e,i,r,n,o){this.permute(o,t,e,i,r,n);for(var h=1;h<n;h<<=1)for(var s=h<<1,a=Math.cos(2*Math.PI/s),u=Math.sin(2*Math.PI/s),f=0;f<n;f+=s)for(var l=a,d=u,c=0;c<h;c++){var p=i[f+c],m=r[f+c],v=i[f+c+h],g=r[f+c+h],b=l*v-d*g;g=l*g+d*v,v=b,i[f+c]=p+v,r[f+c]=m+g,i[f+c+h]=p-v,r[f+c+h]=m-g,c!==s&&(b=a*l-u*d,d=a*d+u*l,l=b)}},m.prototype.guessLen13b=function(t,e){var i=1|Math.max(e,t),r=1&i,n=0;for(i=i/2|0;i;i>>>=1)n++;return 1<<n+1+r},m.prototype.conjugate=function(t,e,i){if(!(i<=1))for(var r=0;r<i/2;r++){var n=t[r];t[r]=t[i-r-1],t[i-r-1]=n,n=e[r],e[r]=-e[i-r-1],e[i-r-1]=-n}},m.prototype.normalize13b=function(t,e){for(var i=0,r=0;r<e/2;r++){var n=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+i;t[r]=67108863&n,i=n<67108864?0:n/67108864|0}return t},m.prototype.convert13b=function(t,e,i,n){for(var o=0,h=0;h<e;h++)o+=0|t[h],i[2*h]=8191&o,o>>>=13,i[2*h+1]=8191&o,o>>>=13;for(h=2*e;h<n;++h)i[h]=0;r(0===o),r(0==(-8192&o))},m.prototype.stub=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=0;return e},m.prototype.mulp=function(t,e,i){var r=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(r),o=this.stub(r),h=new Array(r),s=new Array(r),a=new Array(r),u=new Array(r),f=new Array(r),l=new Array(r),d=i.words;d.length=r,this.convert13b(t.words,t.length,h,r),this.convert13b(e.words,e.length,u,r),this.transform(h,o,s,a,r,n),this.transform(u,o,f,l,r,n);for(var c=0;c<r;c++){var p=s[c]*f[c]-a[c]*l[c];a[c]=s[c]*l[c]+a[c]*f[c],s[c]=p}return this.conjugate(s,a,r),this.transform(s,a,d,o,r,n),this.conjugate(d,o,r),this.normalize13b(d,r),i.negative=t.negative^e.negative,i.length=t.length+e.length,i.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),p(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,o=(67108863&n)+(67108863&e);e>>=26,e+=n/67108864|0,e+=o>>>26,this.words[i]=67108863&o}return 0!==e&&(this.words[i]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),i=0;i<e.length;i++){var r=i/26|0,n=i%26;e[i]=(t.words[r]&1<<n)>>>n}return e}(t);if(0===e.length)return new o(1);for(var i=this,r=0;r<e.length&&0===e[r];r++,i=i.sqr());if(++r<e.length)for(var n=i.sqr();r<e.length;r++,n=n.sqr())0!==e[r]&&(i=i.mul(n));return i},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var h=0;for(e=0;e<this.length;e++){var s=this.words[e]&o,a=(0|this.words[e])-s<<i;this.words[e]=a|h,h=s>>>26-i}h&&(this.words[e]=h,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this.strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,h=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,a=i;if(n-=h,n=Math.max(0,n),a){for(var u=0;u<h;u++)a.words[u]=this.words[u];a.length=h}if(0===h);else if(this.length>h)for(this.length-=h,u=0;u<this.length;u++)this.words[u]=this.words[u+h];else this.words[0]=0,this.length=1;var f=0;for(u=this.length-1;u>=0&&(0!==f||u>=n);u--){var l=0|this.words[u];this.words[u]=f<<26-o|l>>>o,f=l&s}return a&&0!==f&&(a.words[a.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i)&&!!(this.words[i]&n)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,i){var n,o,h=t.length+i;this._expand(h);var s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+s;var a=(0|t.words[n])*e;s=((o-=67108863&a)>>26)-(a/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)s=(o=(0|this.words[n+i])+s)>>26,this.words[n+i]=67108863&o;if(0===s)return this.strip();for(r(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var i=(this.length,t.length),r=this.clone(),n=t,h=0|n.words[n.length-1];0!==(i=26-this._countBits(h))&&(n=n.ushln(i),r.iushln(i),h=0|n.words[n.length-1]);var s,a=r.length-n.length;if("mod"!==e){(s=new o(null)).length=a+1,s.words=new Array(s.length);for(var u=0;u<s.length;u++)s.words[u]=0}var f=r.clone()._ishlnsubmul(n,1,a);0===f.negative&&(r=f,s&&(s.words[a]=1));for(var l=a-1;l>=0;l--){var d=67108864*(0|r.words[n.length+l])+(0|r.words[n.length+l-1]);for(d=Math.min(d/h|0,67108863),r._ishlnsubmul(n,d,l);0!==r.negative;)d--,r.negative=0,r._ishlnsubmul(n,1,l),r.isZero()||(r.negative^=1);s&&(s.words[l]=d)}return s&&s.strip(),r.strip(),"div"!==e&&0!==i&&r.iushrn(i),{div:s||null,mod:r}},o.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(n=s.div.neg()),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.iadd(t)),{div:n,mod:h}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.isub(t)),{div:s.div,mod:h}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var n,h,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var i=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),n=t.andln(1),o=i.cmp(r);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(e*i+(0|this.words[n]))%t;return i},o.prototype.idivn=function(t){r(t<=67108863);for(var e=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*e;this.words[i]=n/t|0,e=n%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n=new o(1),h=new o(0),s=new o(0),a=new o(1),u=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++u;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(n.isOdd()||h.isOdd())&&(n.iadd(f),h.isub(l)),n.iushrn(1),h.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(f),a.isub(l)),s.iushrn(1),a.iushrn(1);e.cmp(i)>=0?(e.isub(i),n.isub(s),h.isub(a)):(i.isub(e),s.isub(n),a.isub(h))}return{a:s,b:a,gcd:i.iushln(u)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n,h=new o(1),s=new o(0),a=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var u=0,f=1;0==(e.words[0]&f)&&u<26;++u,f<<=1);if(u>0)for(e.iushrn(u);u-- >0;)h.isOdd()&&h.iadd(a),h.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(i)>=0?(e.isub(i),h.isub(s)):(i.isub(e),s.isub(h))}return(n=0===e.cmpn(1)?h:s).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),i=t.clone();e.negative=0,i.negative=0;for(var r=0;e.isEven()&&i.isEven();r++)e.iushrn(1),i.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;i.isEven();)i.iushrn(1);var n=e.cmp(i);if(n<0){var o=e;e=i,i=o}else if(0===n||0===i.cmpn(1))break;e.isub(i)}return i.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,h=i;0!==o&&h<this.length;h++){var s=0|this.words[h];o=(s+=o)>>>26,s&=67108863,this.words[h]=s}return 0!==o&&(this.words[h]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,i=this.length-1;i>=0;i--){var r=0|this.words[i],n=0|t.words[i];if(r!==n){r<n?e=-1:r>n&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new _(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function g(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){g.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function y(){g.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){g.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){g.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function S(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},g.prototype.ireduce=function(t){var e,i=t;do{this.split(i,this.tmp),e=(i=(i=this.imulK(i)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:i.ucmp(this.p);return 0===r?(i.words[0]=0,i.length=1):r>0?i.isub(this.p):void 0!==i.strip?i.strip():i._strip(),i},g.prototype.split=function(t,e){t.iushrn(this.n,0,e)},g.prototype.imulK=function(t){return t.imul(this.k)},n(b,g),b.prototype.split=function(t,e){for(var i=Math.min(t.length,9),r=0;r<i;r++)e.words[r]=t.words[r];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var n=t.words[9];for(e.words[e.length++]=4194303&n,r=10;r<t.length;r++){var o=0|t.words[r];t.words[r-10]=(4194303&o)<<4|n>>>22,n=o}n>>>=22,t.words[r-10]=n,0===n&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,i=0;i<t.length;i++){var r=0|t.words[i];e+=977*r,t.words[i]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(y,g),n(w,g),n(M,g),M.prototype.imulK=function(t){for(var e=0,i=0;i<t.length;i++){var r=19*(0|t.words[i])+e,n=67108863&r;r>>>=26,t.words[i]=n,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new b;else if("p224"===t)e=new y;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new M}return v[t]=e,e},_.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,e){this._verify2(t,e);var i=t.add(e);return i.cmp(this.m)>=0&&i.isub(this.m),i._forceRed(this)},_.prototype.iadd=function(t,e){this._verify2(t,e);var i=t.iadd(e);return i.cmp(this.m)>=0&&i.isub(this.m),i},_.prototype.sub=function(t,e){this._verify2(t,e);var i=t.sub(e);return i.cmpn(0)<0&&i.iadd(this.m),i._forceRed(this)},_.prototype.isub=function(t,e){this._verify2(t,e);var i=t.isub(e);return i.cmpn(0)<0&&i.iadd(this.m),i},_.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},_.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},_.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new o(1)).iushrn(2);return this.pow(t,i)}for(var n=this.m.subn(1),h=0;!n.isZero()&&0===n.andln(1);)h++,n.iushrn(1);r(!n.isZero());var s=new o(1).toRed(this),a=s.redNeg(),u=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,u).cmp(a);)f.redIAdd(a);for(var l=this.pow(f,n),d=this.pow(t,n.addn(1).iushrn(1)),c=this.pow(t,n),p=h;0!==c.cmp(s);){for(var m=c,v=0;0!==m.cmp(s);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new o(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},_.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},_.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var i=new Array(16);i[0]=new o(1).toRed(this),i[1]=t;for(var r=2;r<i.length;r++)i[r]=this.mul(i[r-1],t);var n=i[0],h=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var u=e.words[r],f=a-1;f>=0;f--){var l=u>>f&1;n!==i[0]&&(n=this.sqr(n)),0!==l||0!==h?(h<<=1,h|=l,(4===++s||0===r&&0===f)&&(n=this.mul(n,i[h]),s=0,h=0)):s=0}a=26}return n},_.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},_.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new S(t)},n(S,_),S.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},S.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},S.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var i=t.imul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},S.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var i=t.mul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),h=n;return n.cmp(this.m)>=0?h=n.isub(this.m):n.cmpn(0)<0&&(h=n.iadd(this.m)),h._forceRed(this)},S.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,i(52)(t))},function(t){t.exports={_args:[["elliptic@6.5.3","D:\\Projects\\SystemCenter\\Source\\Applications\\SystemCenter"]],_development:!0,_from:"elliptic@6.5.3",_id:"elliptic@6.5.3",_inBundle:!1,_integrity:"sha512-IMqzv5wNQf+E6aHeIqATs0tOLeOTwj1QKbRcS3jBbYkl5oLAserA8yJTT7/VyHUYG91PRmPyeQDObKLPpeS4dw==",_location:"/elliptic",_phantomChildren:{},_requested:{type:"version",registry:!0,raw:"elliptic@6.5.3",name:"elliptic",escapedName:"elliptic",rawSpec:"6.5.3",saveSpec:null,fetchSpec:"6.5.3"},_requiredBy:["/browserify-sign","/create-ecdh"],_resolved:"https://registry.npmjs.org/elliptic/-/elliptic-6.5.3.tgz",_spec:"6.5.3",_where:"D:\\Projects\\SystemCenter\\Source\\Applications\\SystemCenter",author:{name:"Fedor Indutny",email:"fedor@indutny.com"},bugs:{url:"https://github.com/indutny/elliptic/issues"},dependencies:{"bn.js":"^4.4.0",brorand:"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0",inherits:"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"},description:"EC cryptography",devDependencies:{brfs:"^1.4.3",coveralls:"^3.0.8",grunt:"^1.0.4","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^9.0.1",istanbul:"^0.4.2",jscs:"^3.0.7",jshint:"^2.10.3",mocha:"^6.2.2"},files:["lib"],homepage:"https://github.com/indutny/elliptic",keywords:["EC","Elliptic","curve","Cryptography"],license:"MIT",main:"lib/elliptic.js",name:"elliptic",repository:{type:"git",url:"git+ssh://git@github.com/indutny/elliptic.git"},scripts:{jscs:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",jshint:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",lint:"npm run jscs && npm run jshint",test:"npm run lint && npm run unit",unit:"istanbul test _mocha --reporter=spec test/index.js",version:"grunt dist && git add dist/"},version:"6.5.3"}},function(t,e,i){"use strict";var r=i(48),n=i(58),o=i(32),h=i(85),s=r.assert;function a(t){h.call(this,"short",t),this.a=new n(t.a,16).toRed(this.red),this.b=new n(t.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(t),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function u(t,e,i,r){h.BasePoint.call(this,t,"affine"),null===e&&null===i?(this.x=null,this.y=null,this.inf=!0):(this.x=new n(e,16),this.y=new n(i,16),r&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function f(t,e,i,r){h.BasePoint.call(this,t,"jacobian"),null===e&&null===i&&null===r?(this.x=this.curve.one,this.y=this.curve.one,this.z=new n(0)):(this.x=new n(e,16),this.y=new n(i,16),this.z=new n(r,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}o(a,h),t.exports=a,a.prototype._getEndomorphism=function(t){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var e,i;if(t.beta)e=new n(t.beta,16).toRed(this.red);else{var r=this._getEndoRoots(this.p);e=(e=r[0].cmp(r[1])<0?r[0]:r[1]).toRed(this.red)}if(t.lambda)i=new n(t.lambda,16);else{var o=this._getEndoRoots(this.n);0===this.g.mul(o[0]).x.cmp(this.g.x.redMul(e))?i=o[0]:(i=o[1],s(0===this.g.mul(i).x.cmp(this.g.x.redMul(e))))}return{beta:e,lambda:i,basis:t.basis?t.basis.map((function(t){return{a:new n(t.a,16),b:new n(t.b,16)}})):this._getEndoBasis(i)}}},a.prototype._getEndoRoots=function(t){var e=t===this.p?this.red:n.mont(t),i=new n(2).toRed(e).redInvm(),r=i.redNeg(),o=new n(3).toRed(e).redNeg().redSqrt().redMul(i);return[r.redAdd(o).fromRed(),r.redSub(o).fromRed()]},a.prototype._getEndoBasis=function(t){for(var e,i,r,o,h,s,a,u,f,l=this.n.ushrn(Math.floor(this.n.bitLength()/2)),d=t,c=this.n.clone(),p=new n(1),m=new n(0),v=new n(0),g=new n(1),b=0;0!==d.cmpn(0);){var y=c.div(d);u=c.sub(y.mul(d)),f=v.sub(y.mul(p));var w=g.sub(y.mul(m));if(!r&&u.cmp(l)<0)e=a.neg(),i=p,r=u.neg(),o=f;else if(r&&2==++b)break;a=u,c=d,d=u,v=p,p=f,g=m,m=w}h=u.neg(),s=f;var M=r.sqr().add(o.sqr());return h.sqr().add(s.sqr()).cmp(M)>=0&&(h=e,s=i),r.negative&&(r=r.neg(),o=o.neg()),h.negative&&(h=h.neg(),s=s.neg()),[{a:r,b:o},{a:h,b:s}]},a.prototype._endoSplit=function(t){var e=this.endo.basis,i=e[0],r=e[1],n=r.b.mul(t).divRound(this.n),o=i.b.neg().mul(t).divRound(this.n),h=n.mul(i.a),s=o.mul(r.a),a=n.mul(i.b),u=o.mul(r.b);return{k1:t.sub(h).sub(s),k2:a.add(u).neg()}},a.prototype.pointFromX=function(t,e){(t=new n(t,16)).red||(t=t.toRed(this.red));var i=t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b),r=i.redSqrt();if(0!==r.redSqr().redSub(i).cmp(this.zero))throw new Error("invalid point");var o=r.fromRed().isOdd();return(e&&!o||!e&&o)&&(r=r.redNeg()),this.point(t,r)},a.prototype.validate=function(t){if(t.inf)return!0;var e=t.x,i=t.y,r=this.a.redMul(e),n=e.redSqr().redMul(e).redIAdd(r).redIAdd(this.b);return 0===i.redSqr().redISub(n).cmpn(0)},a.prototype._endoWnafMulAdd=function(t,e,i){for(var r=this._endoWnafT1,n=this._endoWnafT2,o=0;o<t.length;o++){var h=this._endoSplit(e[o]),s=t[o],a=s._getBeta();h.k1.negative&&(h.k1.ineg(),s=s.neg(!0)),h.k2.negative&&(h.k2.ineg(),a=a.neg(!0)),r[2*o]=s,r[2*o+1]=a,n[2*o]=h.k1,n[2*o+1]=h.k2}for(var u=this._wnafMulAdd(1,r,n,2*o,i),f=0;f<2*o;f++)r[f]=null,n[f]=null;return u},o(u,h.BasePoint),a.prototype.point=function(t,e,i){return new u(this,t,e,i)},a.prototype.pointFromJSON=function(t,e){return u.fromJSON(this,t,e)},u.prototype._getBeta=function(){if(this.curve.endo){var t=this.precomputed;if(t&&t.beta)return t.beta;var e=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(t){var i=this.curve,r=function(t){return i.point(t.x.redMul(i.endo.beta),t.y)};t.beta=e,e.precomputed={beta:null,naf:t.naf&&{wnd:t.naf.wnd,points:t.naf.points.map(r)},doubles:t.doubles&&{step:t.doubles.step,points:t.doubles.points.map(r)}}}return e}},u.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},u.fromJSON=function(t,e,i){"string"==typeof e&&(e=JSON.parse(e));var r=t.point(e[0],e[1],i);if(!e[2])return r;function n(e){return t.point(e[0],e[1],i)}var o=e[2];return r.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[r].concat(o.doubles.points.map(n))},naf:o.naf&&{wnd:o.naf.wnd,points:[r].concat(o.naf.points.map(n))}},r},u.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},u.prototype.isInfinity=function(){return this.inf},u.prototype.add=function(t){if(this.inf)return t;if(t.inf)return this;if(this.eq(t))return this.dbl();if(this.neg().eq(t))return this.curve.point(null,null);if(0===this.x.cmp(t.x))return this.curve.point(null,null);var e=this.y.redSub(t.y);0!==e.cmpn(0)&&(e=e.redMul(this.x.redSub(t.x).redInvm()));var i=e.redSqr().redISub(this.x).redISub(t.x),r=e.redMul(this.x.redSub(i)).redISub(this.y);return this.curve.point(i,r)},u.prototype.dbl=function(){if(this.inf)return this;var t=this.y.redAdd(this.y);if(0===t.cmpn(0))return this.curve.point(null,null);var e=this.curve.a,i=this.x.redSqr(),r=t.redInvm(),n=i.redAdd(i).redIAdd(i).redIAdd(e).redMul(r),o=n.redSqr().redISub(this.x.redAdd(this.x)),h=n.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,h)},u.prototype.getX=function(){return this.x.fromRed()},u.prototype.getY=function(){return this.y.fromRed()},u.prototype.mul=function(t){return t=new n(t,16),this.isInfinity()?this:this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve.endo?this.curve._endoWnafMulAdd([this],[t]):this.curve._wnafMul(this,t)},u.prototype.mulAdd=function(t,e,i){var r=[this,e],n=[t,i];return this.curve.endo?this.curve._endoWnafMulAdd(r,n):this.curve._wnafMulAdd(1,r,n,2)},u.prototype.jmulAdd=function(t,e,i){var r=[this,e],n=[t,i];return this.curve.endo?this.curve._endoWnafMulAdd(r,n,!0):this.curve._wnafMulAdd(1,r,n,2,!0)},u.prototype.eq=function(t){return this===t||this.inf===t.inf&&(this.inf||0===this.x.cmp(t.x)&&0===this.y.cmp(t.y))},u.prototype.neg=function(t){if(this.inf)return this;var e=this.curve.point(this.x,this.y.redNeg());if(t&&this.precomputed){var i=this.precomputed,r=function(t){return t.neg()};e.precomputed={naf:i.naf&&{wnd:i.naf.wnd,points:i.naf.points.map(r)},doubles:i.doubles&&{step:i.doubles.step,points:i.doubles.points.map(r)}}}return e},u.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},o(f,h.BasePoint),a.prototype.jpoint=function(t,e,i){return new f(this,t,e,i)},f.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var t=this.z.redInvm(),e=t.redSqr(),i=this.x.redMul(e),r=this.y.redMul(e).redMul(t);return this.curve.point(i,r)},f.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},f.prototype.add=function(t){if(this.isInfinity())return t;if(t.isInfinity())return this;var e=t.z.redSqr(),i=this.z.redSqr(),r=this.x.redMul(e),n=t.x.redMul(i),o=this.y.redMul(e.redMul(t.z)),h=t.y.redMul(i.redMul(this.z)),s=r.redSub(n),a=o.redSub(h);if(0===s.cmpn(0))return 0!==a.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=s.redSqr(),f=u.redMul(s),l=r.redMul(u),d=a.redSqr().redIAdd(f).redISub(l).redISub(l),c=a.redMul(l.redISub(d)).redISub(o.redMul(f)),p=this.z.redMul(t.z).redMul(s);return this.curve.jpoint(d,c,p)},f.prototype.mixedAdd=function(t){if(this.isInfinity())return t.toJ();if(t.isInfinity())return this;var e=this.z.redSqr(),i=this.x,r=t.x.redMul(e),n=this.y,o=t.y.redMul(e).redMul(this.z),h=i.redSub(r),s=n.redSub(o);if(0===h.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var a=h.redSqr(),u=a.redMul(h),f=i.redMul(a),l=s.redSqr().redIAdd(u).redISub(f).redISub(f),d=s.redMul(f.redISub(l)).redISub(n.redMul(u)),c=this.z.redMul(h);return this.curve.jpoint(l,d,c)},f.prototype.dblp=function(t){if(0===t)return this;if(this.isInfinity())return this;if(!t)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var e=this,i=0;i<t;i++)e=e.dbl();return e}var r=this.curve.a,n=this.curve.tinv,o=this.x,h=this.y,s=this.z,a=s.redSqr().redSqr(),u=h.redAdd(h);for(i=0;i<t;i++){var f=o.redSqr(),l=u.redSqr(),d=l.redSqr(),c=f.redAdd(f).redIAdd(f).redIAdd(r.redMul(a)),p=o.redMul(l),m=c.redSqr().redISub(p.redAdd(p)),v=p.redISub(m),g=c.redMul(v);g=g.redIAdd(g).redISub(d);var b=u.redMul(s);i+1<t&&(a=a.redMul(d)),o=m,s=b,u=g}return this.curve.jpoint(o,u.redMul(n),s)},f.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},f.prototype._zeroDbl=function(){var t,e,i;if(this.zOne){var r=this.x.redSqr(),n=this.y.redSqr(),o=n.redSqr(),h=this.x.redAdd(n).redSqr().redISub(r).redISub(o);h=h.redIAdd(h);var s=r.redAdd(r).redIAdd(r),a=s.redSqr().redISub(h).redISub(h),u=o.redIAdd(o);u=(u=u.redIAdd(u)).redIAdd(u),t=a,e=s.redMul(h.redISub(a)).redISub(u),i=this.y.redAdd(this.y)}else{var f=this.x.redSqr(),l=this.y.redSqr(),d=l.redSqr(),c=this.x.redAdd(l).redSqr().redISub(f).redISub(d);c=c.redIAdd(c);var p=f.redAdd(f).redIAdd(f),m=p.redSqr(),v=d.redIAdd(d);v=(v=v.redIAdd(v)).redIAdd(v),t=m.redISub(c).redISub(c),e=p.redMul(c.redISub(t)).redISub(v),i=(i=this.y.redMul(this.z)).redIAdd(i)}return this.curve.jpoint(t,e,i)},f.prototype._threeDbl=function(){var t,e,i;if(this.zOne){var r=this.x.redSqr(),n=this.y.redSqr(),o=n.redSqr(),h=this.x.redAdd(n).redSqr().redISub(r).redISub(o);h=h.redIAdd(h);var s=r.redAdd(r).redIAdd(r).redIAdd(this.curve.a),a=s.redSqr().redISub(h).redISub(h);t=a;var u=o.redIAdd(o);u=(u=u.redIAdd(u)).redIAdd(u),e=s.redMul(h.redISub(a)).redISub(u),i=this.y.redAdd(this.y)}else{var f=this.z.redSqr(),l=this.y.redSqr(),d=this.x.redMul(l),c=this.x.redSub(f).redMul(this.x.redAdd(f));c=c.redAdd(c).redIAdd(c);var p=d.redIAdd(d),m=(p=p.redIAdd(p)).redAdd(p);t=c.redSqr().redISub(m),i=this.y.redAdd(this.z).redSqr().redISub(l).redISub(f);var v=l.redSqr();v=(v=(v=v.redIAdd(v)).redIAdd(v)).redIAdd(v),e=c.redMul(p.redISub(t)).redISub(v)}return this.curve.jpoint(t,e,i)},f.prototype._dbl=function(){var t=this.curve.a,e=this.x,i=this.y,r=this.z,n=r.redSqr().redSqr(),o=e.redSqr(),h=i.redSqr(),s=o.redAdd(o).redIAdd(o).redIAdd(t.redMul(n)),a=e.redAdd(e),u=(a=a.redIAdd(a)).redMul(h),f=s.redSqr().redISub(u.redAdd(u)),l=u.redISub(f),d=h.redSqr();d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var c=s.redMul(l).redISub(d),p=i.redAdd(i).redMul(r);return this.curve.jpoint(f,c,p)},f.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var t=this.x.redSqr(),e=this.y.redSqr(),i=this.z.redSqr(),r=e.redSqr(),n=t.redAdd(t).redIAdd(t),o=n.redSqr(),h=this.x.redAdd(e).redSqr().redISub(t).redISub(r),s=(h=(h=(h=h.redIAdd(h)).redAdd(h).redIAdd(h)).redISub(o)).redSqr(),a=r.redIAdd(r);a=(a=(a=a.redIAdd(a)).redIAdd(a)).redIAdd(a);var u=n.redIAdd(h).redSqr().redISub(o).redISub(s).redISub(a),f=e.redMul(u);f=(f=f.redIAdd(f)).redIAdd(f);var l=this.x.redMul(s).redISub(f);l=(l=l.redIAdd(l)).redIAdd(l);var d=this.y.redMul(u.redMul(a.redISub(u)).redISub(h.redMul(s)));d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var c=this.z.redAdd(h).redSqr().redISub(i).redISub(s);return this.curve.jpoint(l,d,c)},f.prototype.mul=function(t,e){return t=new n(t,e),this.curve._wnafMul(this,t)},f.prototype.eq=function(t){if("affine"===t.type)return this.eq(t.toJ());if(this===t)return!0;var e=this.z.redSqr(),i=t.z.redSqr();if(0!==this.x.redMul(i).redISub(t.x.redMul(e)).cmpn(0))return!1;var r=e.redMul(this.z),n=i.redMul(t.z);return 0===this.y.redMul(n).redISub(t.y.redMul(r)).cmpn(0)},f.prototype.eqXToP=function(t){var e=this.z.redSqr(),i=t.toRed(this.curve.red).redMul(e);if(0===this.x.cmp(i))return!0;for(var r=t.clone(),n=this.curve.redN.redMul(e);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(i.redIAdd(n),0===this.x.cmp(i))return!0}},f.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},f.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},function(t,e,i){"use strict";var r=i(58),n=i(32),o=i(85),h=i(48);function s(t){o.call(this,"mont",t),this.a=new r(t.a,16).toRed(this.red),this.b=new r(t.b,16).toRed(this.red),this.i4=new r(4).toRed(this.red).redInvm(),this.two=new r(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function a(t,e,i){o.BasePoint.call(this,t,"projective"),null===e&&null===i?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new r(e,16),this.z=new r(i,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}n(s,o),t.exports=s,s.prototype.validate=function(t){var e=t.normalize().x,i=e.redSqr(),r=i.redMul(e).redAdd(i.redMul(this.a)).redAdd(e);return 0===r.redSqrt().redSqr().cmp(r)},n(a,o.BasePoint),s.prototype.decodePoint=function(t,e){return this.point(h.toArray(t,e),1)},s.prototype.point=function(t,e){return new a(this,t,e)},s.prototype.pointFromJSON=function(t){return a.fromJSON(this,t)},a.prototype.precompute=function(){},a.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},a.fromJSON=function(t,e){return new a(t,e[0],e[1]||t.one)},a.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},a.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},a.prototype.dbl=function(){var t=this.x.redAdd(this.z).redSqr(),e=this.x.redSub(this.z).redSqr(),i=t.redSub(e),r=t.redMul(e),n=i.redMul(e.redAdd(this.curve.a24.redMul(i)));return this.curve.point(r,n)},a.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},a.prototype.diffAdd=function(t,e){var i=this.x.redAdd(this.z),r=this.x.redSub(this.z),n=t.x.redAdd(t.z),o=t.x.redSub(t.z).redMul(i),h=n.redMul(r),s=e.z.redMul(o.redAdd(h).redSqr()),a=e.x.redMul(o.redISub(h).redSqr());return this.curve.point(s,a)},a.prototype.mul=function(t){for(var e=t.clone(),i=this,r=this.curve.point(null,null),n=[];0!==e.cmpn(0);e.iushrn(1))n.push(e.andln(1));for(var o=n.length-1;o>=0;o--)0===n[o]?(i=i.diffAdd(r,this),r=r.dbl()):(r=i.diffAdd(r,this),i=i.dbl());return r},a.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},a.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},a.prototype.eq=function(t){return 0===this.getX().cmp(t.getX())},a.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},a.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},function(t,e,i){"use strict";var r=i(48),n=i(58),o=i(32),h=i(85),s=r.assert;function a(t){this.twisted=1!=(0|t.a),this.mOneA=this.twisted&&-1==(0|t.a),this.extended=this.mOneA,h.call(this,"edwards",t),this.a=new n(t.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new n(t.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new n(t.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),s(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|t.c)}function u(t,e,i,r,o){h.BasePoint.call(this,t,"projective"),null===e&&null===i&&null===r?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new n(e,16),this.y=new n(i,16),this.z=r?new n(r,16):this.curve.one,this.t=o&&new n(o,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}o(a,h),t.exports=a,a.prototype._mulA=function(t){return this.mOneA?t.redNeg():this.a.redMul(t)},a.prototype._mulC=function(t){return this.oneC?t:this.c.redMul(t)},a.prototype.jpoint=function(t,e,i,r){return this.point(t,e,i,r)},a.prototype.pointFromX=function(t,e){(t=new n(t,16)).red||(t=t.toRed(this.red));var i=t.redSqr(),r=this.c2.redSub(this.a.redMul(i)),o=this.one.redSub(this.c2.redMul(this.d).redMul(i)),h=r.redMul(o.redInvm()),s=h.redSqrt();if(0!==s.redSqr().redSub(h).cmp(this.zero))throw new Error("invalid point");var a=s.fromRed().isOdd();return(e&&!a||!e&&a)&&(s=s.redNeg()),this.point(t,s)},a.prototype.pointFromY=function(t,e){(t=new n(t,16)).red||(t=t.toRed(this.red));var i=t.redSqr(),r=i.redSub(this.c2),o=i.redMul(this.d).redMul(this.c2).redSub(this.a),h=r.redMul(o.redInvm());if(0===h.cmp(this.zero)){if(e)throw new Error("invalid point");return this.point(this.zero,t)}var s=h.redSqrt();if(0!==s.redSqr().redSub(h).cmp(this.zero))throw new Error("invalid point");return s.fromRed().isOdd()!==e&&(s=s.redNeg()),this.point(s,t)},a.prototype.validate=function(t){if(t.isInfinity())return!0;t.normalize();var e=t.x.redSqr(),i=t.y.redSqr(),r=e.redMul(this.a).redAdd(i),n=this.c2.redMul(this.one.redAdd(this.d.redMul(e).redMul(i)));return 0===r.cmp(n)},o(u,h.BasePoint),a.prototype.pointFromJSON=function(t){return u.fromJSON(this,t)},a.prototype.point=function(t,e,i,r){return new u(this,t,e,i,r)},u.fromJSON=function(t,e){return new u(t,e[0],e[1],e[2])},u.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},u.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))},u.prototype._extDbl=function(){var t=this.x.redSqr(),e=this.y.redSqr(),i=this.z.redSqr();i=i.redIAdd(i);var r=this.curve._mulA(t),n=this.x.redAdd(this.y).redSqr().redISub(t).redISub(e),o=r.redAdd(e),h=o.redSub(i),s=r.redSub(e),a=n.redMul(h),u=o.redMul(s),f=n.redMul(s),l=h.redMul(o);return this.curve.point(a,u,l,f)},u.prototype._projDbl=function(){var t,e,i,r=this.x.redAdd(this.y).redSqr(),n=this.x.redSqr(),o=this.y.redSqr();if(this.curve.twisted){var h=(u=this.curve._mulA(n)).redAdd(o);if(this.zOne)t=r.redSub(n).redSub(o).redMul(h.redSub(this.curve.two)),e=h.redMul(u.redSub(o)),i=h.redSqr().redSub(h).redSub(h);else{var s=this.z.redSqr(),a=h.redSub(s).redISub(s);t=r.redSub(n).redISub(o).redMul(a),e=h.redMul(u.redSub(o)),i=h.redMul(a)}}else{var u=n.redAdd(o);s=this.curve._mulC(this.z).redSqr(),a=u.redSub(s).redSub(s);t=this.curve._mulC(r.redISub(u)).redMul(a),e=this.curve._mulC(u).redMul(n.redISub(o)),i=u.redMul(a)}return this.curve.point(t,e,i)},u.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},u.prototype._extAdd=function(t){var e=this.y.redSub(this.x).redMul(t.y.redSub(t.x)),i=this.y.redAdd(this.x).redMul(t.y.redAdd(t.x)),r=this.t.redMul(this.curve.dd).redMul(t.t),n=this.z.redMul(t.z.redAdd(t.z)),o=i.redSub(e),h=n.redSub(r),s=n.redAdd(r),a=i.redAdd(e),u=o.redMul(h),f=s.redMul(a),l=o.redMul(a),d=h.redMul(s);return this.curve.point(u,f,d,l)},u.prototype._projAdd=function(t){var e,i,r=this.z.redMul(t.z),n=r.redSqr(),o=this.x.redMul(t.x),h=this.y.redMul(t.y),s=this.curve.d.redMul(o).redMul(h),a=n.redSub(s),u=n.redAdd(s),f=this.x.redAdd(this.y).redMul(t.x.redAdd(t.y)).redISub(o).redISub(h),l=r.redMul(a).redMul(f);return this.curve.twisted?(e=r.redMul(u).redMul(h.redSub(this.curve._mulA(o))),i=a.redMul(u)):(e=r.redMul(u).redMul(h.redSub(o)),i=this.curve._mulC(a).redMul(u)),this.curve.point(l,e,i)},u.prototype.add=function(t){return this.isInfinity()?t:t.isInfinity()?this:this.curve.extended?this._extAdd(t):this._projAdd(t)},u.prototype.mul=function(t){return this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve._wnafMul(this,t)},u.prototype.mulAdd=function(t,e,i){return this.curve._wnafMulAdd(1,[this,e],[t,i],2,!1)},u.prototype.jmulAdd=function(t,e,i){return this.curve._wnafMulAdd(1,[this,e],[t,i],2,!0)},u.prototype.normalize=function(){if(this.zOne)return this;var t=this.z.redInvm();return this.x=this.x.redMul(t),this.y=this.y.redMul(t),this.t&&(this.t=this.t.redMul(t)),this.z=this.curve.one,this.zOne=!0,this},u.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},u.prototype.getX=function(){return this.normalize(),this.x.fromRed()},u.prototype.getY=function(){return this.normalize(),this.y.fromRed()},u.prototype.eq=function(t){return this===t||0===this.getX().cmp(t.getX())&&0===this.getY().cmp(t.getY())},u.prototype.eqXToP=function(t){var e=t.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(e))return!0;for(var i=t.clone(),r=this.curve.redN.redMul(this.z);;){if(i.iadd(this.curve.n),i.cmp(this.curve.p)>=0)return!1;if(e.redIAdd(r),0===this.x.cmp(e))return!0}},u.prototype.toP=u.prototype.normalize,u.prototype.mixedAdd=u.prototype.add},function(t,e,i){"use strict";e.sha1=i(259),e.sha224=i(260),e.sha256=i(169),e.sha384=i(261),e.sha512=i(170)},function(t,e,i){"use strict";var r=i(50),n=i(79),o=i(168),h=r.rotl32,s=r.sum32,a=r.sum32_5,u=o.ft_1,f=n.BlockHash,l=[1518500249,1859775393,2400959708,3395469782];function d(){if(!(this instanceof d))return new d;f.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}r.inherits(d,f),t.exports=d,d.blockSize=512,d.outSize=160,d.hmacStrength=80,d.padLength=64,d.prototype._update=function(t,e){for(var i=this.W,r=0;r<16;r++)i[r]=t[e+r];for(;r<i.length;r++)i[r]=h(i[r-3]^i[r-8]^i[r-14]^i[r-16],1);var n=this.h[0],o=this.h[1],f=this.h[2],d=this.h[3],c=this.h[4];for(r=0;r<i.length;r++){var p=~~(r/20),m=a(h(n,5),u(p,o,f,d),c,i[r],l[p]);c=d,d=f,f=h(o,30),o=n,n=m}this.h[0]=s(this.h[0],n),this.h[1]=s(this.h[1],o),this.h[2]=s(this.h[2],f),this.h[3]=s(this.h[3],d),this.h[4]=s(this.h[4],c)},d.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},function(t,e,i){"use strict";var r=i(50),n=i(169);function o(){if(!(this instanceof o))return new o;n.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}r.inherits(o,n),t.exports=o,o.blockSize=512,o.outSize=224,o.hmacStrength=192,o.padLength=64,o.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h.slice(0,7),"big"):r.split32(this.h.slice(0,7),"big")}},function(t,e,i){"use strict";var r=i(50),n=i(170);function o(){if(!(this instanceof o))return new o;n.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}r.inherits(o,n),t.exports=o,o.blockSize=1024,o.outSize=384,o.hmacStrength=192,o.padLength=128,o.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h.slice(0,12),"big"):r.split32(this.h.slice(0,12),"big")}},function(t,e,i){"use strict";var r=i(50),n=i(79),o=r.rotl32,h=r.sum32,s=r.sum32_3,a=r.sum32_4,u=n.BlockHash;function f(){if(!(this instanceof f))return new f;u.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function l(t,e,i,r){return t<=15?e^i^r:t<=31?e&i|~e&r:t<=47?(e|~i)^r:t<=63?e&r|i&~r:e^(i|~r)}function d(t){return t<=15?0:t<=31?1518500249:t<=47?1859775393:t<=63?2400959708:2840853838}function c(t){return t<=15?1352829926:t<=31?1548603684:t<=47?1836072691:t<=63?2053994217:0}r.inherits(f,u),e.ripemd160=f,f.blockSize=512,f.outSize=160,f.hmacStrength=192,f.padLength=64,f.prototype._update=function(t,e){for(var i=this.h[0],r=this.h[1],n=this.h[2],u=this.h[3],f=this.h[4],b=i,y=r,w=n,M=u,_=f,S=0;S<80;S++){var k=h(o(a(i,l(S,r,n,u),t[p[S]+e],d(S)),v[S]),f);i=f,f=u,u=o(n,10),n=r,r=k,k=h(o(a(b,l(79-S,y,w,M),t[m[S]+e],c(S)),g[S]),_),b=_,_=M,M=o(w,10),w=y,y=k}k=s(this.h[1],n,M),this.h[1]=s(this.h[2],u,_),this.h[2]=s(this.h[3],f,b),this.h[3]=s(this.h[4],i,y),this.h[4]=s(this.h[0],r,w),this.h[0]=k},f.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"little"):r.split32(this.h,"little")};var p=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],m=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],v=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],g=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},function(t,e,i){"use strict";var r=i(50),n=i(47);function o(t,e,i){if(!(this instanceof o))return new o(t,e,i);this.Hash=t,this.blockSize=t.blockSize/8,this.outSize=t.outSize/8,this.inner=null,this.outer=null,this._init(r.toArray(e,i))}t.exports=o,o.prototype._init=function(t){t.length>this.blockSize&&(t=(new this.Hash).update(t).digest()),n(t.length<=this.blockSize);for(var e=t.length;e<this.blockSize;e++)t.push(0);for(e=0;e<t.length;e++)t[e]^=54;for(this.inner=(new this.Hash).update(t),e=0;e<t.length;e++)t[e]^=106;this.outer=(new this.Hash).update(t)},o.prototype.update=function(t,e){return this.inner.update(t,e),this},o.prototype.digest=function(t){return this.outer.update(this.inner.digest()),this.outer.digest(t)}},function(t,e){t.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}},function(t,e,i){"use strict";var r=i(58),n=i(266),o=i(48),h=i(107),s=i(104),a=o.assert,u=i(267),f=i(268);function l(t){if(!(this instanceof l))return new l(t);"string"==typeof t&&(a(h.hasOwnProperty(t),"Unknown curve "+t),t=h[t]),t instanceof h.PresetCurve&&(t={curve:t}),this.curve=t.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=t.curve.g,this.g.precompute(t.curve.n.bitLength()+1),this.hash=t.hash||t.curve.hash}t.exports=l,l.prototype.keyPair=function(t){return new u(this,t)},l.prototype.keyFromPrivate=function(t,e){return u.fromPrivate(this,t,e)},l.prototype.keyFromPublic=function(t,e){return u.fromPublic(this,t,e)},l.prototype.genKeyPair=function(t){t||(t={});for(var e=new n({hash:this.hash,pers:t.pers,persEnc:t.persEnc||"utf8",entropy:t.entropy||s(this.hash.hmacStrength),entropyEnc:t.entropy&&t.entropyEnc||"utf8",nonce:this.n.toArray()}),i=this.n.byteLength(),o=this.n.sub(new r(2));;){var h=new r(e.generate(i));if(!(h.cmp(o)>0))return h.iaddn(1),this.keyFromPrivate(h)}},l.prototype._truncateToN=function(t,e){var i=8*t.byteLength()-this.n.bitLength();return i>0&&(t=t.ushrn(i)),!e&&t.cmp(this.n)>=0?t.sub(this.n):t},l.prototype.sign=function(t,e,i,o){"object"==typeof i&&(o=i,i=null),o||(o={}),e=this.keyFromPrivate(e,i),t=this._truncateToN(new r(t,16));for(var h=this.n.byteLength(),s=e.getPrivate().toArray("be",h),a=t.toArray("be",h),u=new n({hash:this.hash,entropy:s,nonce:a,pers:o.pers,persEnc:o.persEnc||"utf8"}),l=this.n.sub(new r(1)),d=0;;d++){var c=o.k?o.k(d):new r(u.generate(this.n.byteLength()));if(!((c=this._truncateToN(c,!0)).cmpn(1)<=0||c.cmp(l)>=0)){var p=this.g.mul(c);if(!p.isInfinity()){var m=p.getX(),v=m.umod(this.n);if(0!==v.cmpn(0)){var g=c.invm(this.n).mul(v.mul(e.getPrivate()).iadd(t));if(0!==(g=g.umod(this.n)).cmpn(0)){var b=(p.getY().isOdd()?1:0)|(0!==m.cmp(v)?2:0);return o.canonical&&g.cmp(this.nh)>0&&(g=this.n.sub(g),b^=1),new f({r:v,s:g,recoveryParam:b})}}}}}},l.prototype.verify=function(t,e,i,n){t=this._truncateToN(new r(t,16)),i=this.keyFromPublic(i,n);var o=(e=new f(e,"hex")).r,h=e.s;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;if(h.cmpn(1)<0||h.cmp(this.n)>=0)return!1;var s,a=h.invm(this.n),u=a.mul(t).umod(this.n),l=a.mul(o).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(u,i.getPublic(),l)).isInfinity()&&s.eqXToP(o):!(s=this.g.mulAdd(u,i.getPublic(),l)).isInfinity()&&0===s.getX().umod(this.n).cmp(o)},l.prototype.recoverPubKey=function(t,e,i,n){a((3&i)===i,"The recovery param is more than two bits"),e=new f(e,n);var o=this.n,h=new r(t),s=e.r,u=e.s,l=1&i,d=i>>1;if(s.cmp(this.curve.p.umod(this.curve.n))>=0&&d)throw new Error("Unable to find sencond key candinate");s=d?this.curve.pointFromX(s.add(this.curve.n),l):this.curve.pointFromX(s,l);var c=e.r.invm(o),p=o.sub(h).mul(c).umod(o),m=u.mul(c).umod(o);return this.g.mulAdd(p,s,m)},l.prototype.getKeyRecoveryParam=function(t,e,i,r){if(null!==(e=new f(e,r)).recoveryParam)return e.recoveryParam;for(var n=0;n<4;n++){var o;try{o=this.recoverPubKey(t,e,n)}catch(t){continue}if(o.eq(i))return n}throw new Error("Unable to find valid recovery factor")}},function(t,e,i){"use strict";var r=i(108),n=i(166),o=i(47);function h(t){if(!(this instanceof h))return new h(t);this.hash=t.hash,this.predResist=!!t.predResist,this.outLen=this.hash.outSize,this.minEntropy=t.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var e=n.toArray(t.entropy,t.entropyEnc||"hex"),i=n.toArray(t.nonce,t.nonceEnc||"hex"),r=n.toArray(t.pers,t.persEnc||"hex");o(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(e,i,r)}t.exports=h,h.prototype._init=function(t,e,i){var r=t.concat(e).concat(i);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var n=0;n<this.V.length;n++)this.K[n]=0,this.V[n]=1;this._update(r),this._reseed=1,this.reseedInterval=281474976710656},h.prototype._hmac=function(){return new r.hmac(this.hash,this.K)},h.prototype._update=function(t){var e=this._hmac().update(this.V).update([0]);t&&(e=e.update(t)),this.K=e.digest(),this.V=this._hmac().update(this.V).digest(),t&&(this.K=this._hmac().update(this.V).update([1]).update(t).digest(),this.V=this._hmac().update(this.V).digest())},h.prototype.reseed=function(t,e,i,r){"string"!=typeof e&&(r=i,i=e,e=null),t=n.toArray(t,e),i=n.toArray(i,r),o(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(t.concat(i||[])),this._reseed=1},h.prototype.generate=function(t,e,i,r){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof e&&(r=i,i=e,e=null),i&&(i=n.toArray(i,r||"hex"),this._update(i));for(var o=[];o.length<t;)this.V=this._hmac().update(this.V).digest(),o=o.concat(this.V);var h=o.slice(0,t);return this._update(i),this._reseed++,n.encode(h,e)}},function(t,e,i){"use strict";var r=i(58),n=i(48).assert;function o(t,e){this.ec=t,this.priv=null,this.pub=null,e.priv&&this._importPrivate(e.priv,e.privEnc),e.pub&&this._importPublic(e.pub,e.pubEnc)}t.exports=o,o.fromPublic=function(t,e,i){return e instanceof o?e:new o(t,{pub:e,pubEnc:i})},o.fromPrivate=function(t,e,i){return e instanceof o?e:new o(t,{priv:e,privEnc:i})},o.prototype.validate=function(){var t=this.getPublic();return t.isInfinity()?{result:!1,reason:"Invalid public key"}:t.validate()?t.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},o.prototype.getPublic=function(t,e){return"string"==typeof t&&(e=t,t=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),e?this.pub.encode(e,t):this.pub},o.prototype.getPrivate=function(t){return"hex"===t?this.priv.toString(16,2):this.priv},o.prototype._importPrivate=function(t,e){this.priv=new r(t,e||16),this.priv=this.priv.umod(this.ec.curve.n)},o.prototype._importPublic=function(t,e){if(t.x||t.y)return"mont"===this.ec.curve.type?n(t.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||n(t.x&&t.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(t.x,t.y));this.pub=this.ec.curve.decodePoint(t,e)},o.prototype.derive=function(t){return t.mul(this.priv).getX()},o.prototype.sign=function(t,e,i){return this.ec.sign(t,this,e,i)},o.prototype.verify=function(t,e){return this.ec.verify(t,e,this)},o.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}},function(t,e,i){"use strict";var r=i(58),n=i(48),o=n.assert;function h(t,e){if(t instanceof h)return t;this._importDER(t,e)||(o(t.r&&t.s,"Signature without r or s"),this.r=new r(t.r,16),this.s=new r(t.s,16),void 0===t.recoveryParam?this.recoveryParam=null:this.recoveryParam=t.recoveryParam)}function s(){this.place=0}function a(t,e){var i=t[e.place++];if(!(128&i))return i;var r=15&i;if(0===r||r>4)return!1;for(var n=0,o=0,h=e.place;o<r;o++,h++)n<<=8,n|=t[h],n>>>=0;return!(n<=127)&&(e.place=h,n)}function u(t){for(var e=0,i=t.length-1;!t[e]&&!(128&t[e+1])&&e<i;)e++;return 0===e?t:t.slice(e)}function f(t,e){if(e<128)t.push(e);else{var i=1+(Math.log(e)/Math.LN2>>>3);for(t.push(128|i);--i;)t.push(e>>>(i<<3)&255);t.push(e)}}t.exports=h,h.prototype._importDER=function(t,e){t=n.toArray(t,e);var i=new s;if(48!==t[i.place++])return!1;var o=a(t,i);if(!1===o)return!1;if(o+i.place!==t.length)return!1;if(2!==t[i.place++])return!1;var h=a(t,i);if(!1===h)return!1;var u=t.slice(i.place,h+i.place);if(i.place+=h,2!==t[i.place++])return!1;var f=a(t,i);if(!1===f)return!1;if(t.length!==f+i.place)return!1;var l=t.slice(i.place,f+i.place);if(0===u[0]){if(!(128&u[1]))return!1;u=u.slice(1)}if(0===l[0]){if(!(128&l[1]))return!1;l=l.slice(1)}return this.r=new r(u),this.s=new r(l),this.recoveryParam=null,!0},h.prototype.toDER=function(t){var e=this.r.toArray(),i=this.s.toArray();for(128&e[0]&&(e=[0].concat(e)),128&i[0]&&(i=[0].concat(i)),e=u(e),i=u(i);!(i[0]||128&i[1]);)i=i.slice(1);var r=[2];f(r,e.length),(r=r.concat(e)).push(2),f(r,i.length);var o=r.concat(i),h=[48];return f(h,o.length),h=h.concat(o),n.encode(h,t)}},function(t,e,i){"use strict";var r=i(108),n=i(107),o=i(48),h=o.assert,s=o.parseBytes,a=i(270),u=i(271);function f(t){if(h("ed25519"===t,"only tested with ed25519 so far"),!(this instanceof f))return new f(t);t=n[t].curve;this.curve=t,this.g=t.g,this.g.precompute(t.n.bitLength()+1),this.pointClass=t.point().constructor,this.encodingLength=Math.ceil(t.n.bitLength()/8),this.hash=r.sha512}t.exports=f,f.prototype.sign=function(t,e){t=s(t);var i=this.keyFromSecret(e),r=this.hashInt(i.messagePrefix(),t),n=this.g.mul(r),o=this.encodePoint(n),h=this.hashInt(o,i.pubBytes(),t).mul(i.priv()),a=r.add(h).umod(this.curve.n);return this.makeSignature({R:n,S:a,Rencoded:o})},f.prototype.verify=function(t,e,i){t=s(t),e=this.makeSignature(e);var r=this.keyFromPublic(i),n=this.hashInt(e.Rencoded(),r.pubBytes(),t),o=this.g.mul(e.S());return e.R().add(r.pub().mul(n)).eq(o)},f.prototype.hashInt=function(){for(var t=this.hash(),e=0;e<arguments.length;e++)t.update(arguments[e]);return o.intFromLE(t.digest()).umod(this.curve.n)},f.prototype.keyFromPublic=function(t){return a.fromPublic(this,t)},f.prototype.keyFromSecret=function(t){return a.fromSecret(this,t)},f.prototype.makeSignature=function(t){return t instanceof u?t:new u(this,t)},f.prototype.encodePoint=function(t){var e=t.getY().toArray("le",this.encodingLength);return e[this.encodingLength-1]|=t.getX().isOdd()?128:0,e},f.prototype.decodePoint=function(t){var e=(t=o.parseBytes(t)).length-1,i=t.slice(0,e).concat(-129&t[e]),r=0!=(128&t[e]),n=o.intFromLE(i);return this.curve.pointFromY(n,r)},f.prototype.encodeInt=function(t){return t.toArray("le",this.encodingLength)},f.prototype.decodeInt=function(t){return o.intFromLE(t)},f.prototype.isPoint=function(t){return t instanceof this.pointClass}},function(t,e,i){"use strict";var r=i(48),n=r.assert,o=r.parseBytes,h=r.cachedProperty;function s(t,e){this.eddsa=t,this._secret=o(e.secret),t.isPoint(e.pub)?this._pub=e.pub:this._pubBytes=o(e.pub)}s.fromPublic=function(t,e){return e instanceof s?e:new s(t,{pub:e})},s.fromSecret=function(t,e){return e instanceof s?e:new s(t,{secret:e})},s.prototype.secret=function(){return this._secret},h(s,"pubBytes",(function(){return this.eddsa.encodePoint(this.pub())})),h(s,"pub",(function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())})),h(s,"privBytes",(function(){var t=this.eddsa,e=this.hash(),i=t.encodingLength-1,r=e.slice(0,t.encodingLength);return r[0]&=248,r[i]&=127,r[i]|=64,r})),h(s,"priv",(function(){return this.eddsa.decodeInt(this.privBytes())})),h(s,"hash",(function(){return this.eddsa.hash().update(this.secret()).digest()})),h(s,"messagePrefix",(function(){return this.hash().slice(this.eddsa.encodingLength)})),s.prototype.sign=function(t){return n(this._secret,"KeyPair can only verify"),this.eddsa.sign(t,this)},s.prototype.verify=function(t,e){return this.eddsa.verify(t,e,this)},s.prototype.getSecret=function(t){return n(this._secret,"KeyPair is public only"),r.encode(this.secret(),t)},s.prototype.getPublic=function(t){return r.encode(this.pubBytes(),t)},t.exports=s},function(t,e,i){"use strict";var r=i(58),n=i(48),o=n.assert,h=n.cachedProperty,s=n.parseBytes;function a(t,e){this.eddsa=t,"object"!=typeof e&&(e=s(e)),Array.isArray(e)&&(e={R:e.slice(0,t.encodingLength),S:e.slice(t.encodingLength)}),o(e.R&&e.S,"Signature without R or S"),t.isPoint(e.R)&&(this._R=e.R),e.S instanceof r&&(this._S=e.S),this._Rencoded=Array.isArray(e.R)?e.R:e.Rencoded,this._Sencoded=Array.isArray(e.S)?e.S:e.Sencoded}h(a,"S",(function(){return this.eddsa.decodeInt(this.Sencoded())})),h(a,"R",(function(){return this.eddsa.decodePoint(this.Rencoded())})),h(a,"Rencoded",(function(){return this.eddsa.encodePoint(this.R())})),h(a,"Sencoded",(function(){return this.eddsa.encodeInt(this.S())})),a.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},a.prototype.toHex=function(){return n.encode(this.toBytes(),"hex").toUpperCase()},t.exports=a},function(t,e,i){"use strict";var r=i(173);e.certificate=i(278);var n=r.define("RSAPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("modulus").int(),this.key("publicExponent").int(),this.key("privateExponent").int(),this.key("prime1").int(),this.key("prime2").int(),this.key("exponent1").int(),this.key("exponent2").int(),this.key("coefficient").int())}));e.RSAPrivateKey=n;var o=r.define("RSAPublicKey",(function(){this.seq().obj(this.key("modulus").int(),this.key("publicExponent").int())}));e.RSAPublicKey=o;var h=r.define("SubjectPublicKeyInfo",(function(){this.seq().obj(this.key("algorithm").use(s),this.key("subjectPublicKey").bitstr())}));e.PublicKey=h;var s=r.define("AlgorithmIdentifier",(function(){this.seq().obj(this.key("algorithm").objid(),this.key("none").null_().optional(),this.key("curve").objid().optional(),this.key("params").seq().obj(this.key("p").int(),this.key("q").int(),this.key("g").int()).optional())})),a=r.define("PrivateKeyInfo",(function(){this.seq().obj(this.key("version").int(),this.key("algorithm").use(s),this.key("subjectPrivateKey").octstr())}));e.PrivateKey=a;var u=r.define("EncryptedPrivateKeyInfo",(function(){this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(),this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(),this.key("kdeparams").seq().obj(this.key("salt").octstr(),this.key("iters").int())),this.key("cipher").seq().obj(this.key("algo").objid(),this.key("iv").octstr()))),this.key("subjectPrivateKey").octstr())}));e.EncryptedPrivateKey=u;var f=r.define("DSAPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("p").int(),this.key("q").int(),this.key("g").int(),this.key("pub_key").int(),this.key("priv_key").int())}));e.DSAPrivateKey=f,e.DSAparam=r.define("DSAparam",(function(){this.int()}));var l=r.define("ECPrivateKey",(function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").optional().explicit(0).use(d),this.key("publicKey").optional().explicit(1).bitstr())}));e.ECPrivateKey=l;var d=r.define("ECParameters",(function(){this.choice({namedCurve:this.objid()})}));e.signature=r.define("signature",(function(){this.seq().obj(this.key("r").int(),this.key("s").int())}))},function(t,e,i){"use strict";const r=i(176),n=i(178),o=i(32);function h(t,e){this.name=t,this.body=e,this.decoders={},this.encoders={}}e.define=function(t,e){return new h(t,e)},h.prototype._createNamed=function(t){const e=this.name;function i(t){this._initNamed(t,e)}return o(i,t),i.prototype._initNamed=function(e,i){t.call(this,e,i)},new i(this)},h.prototype._getDecoder=function(t){return t=t||"der",this.decoders.hasOwnProperty(t)||(this.decoders[t]=this._createNamed(n[t])),this.decoders[t]},h.prototype.decode=function(t,e,i){return this._getDecoder(e).decode(t,i)},h.prototype._getEncoder=function(t){return t=t||"der",this.encoders.hasOwnProperty(t)||(this.encoders[t]=this._createNamed(r[t])),this.encoders[t]},h.prototype.encode=function(t,e,i){return this._getEncoder(e).encode(t,i)}},function(t,e,i){"use strict";const r=i(32),n=i(177);function o(t){n.call(this,t),this.enc="pem"}r(o,n),t.exports=o,o.prototype.encode=function(t,e){const i=n.prototype.encode.call(this,t).toString("base64"),r=["-----BEGIN "+e.label+"-----"];for(let t=0;t<i.length;t+=64)r.push(i.slice(t,t+64));return r.push("-----END "+e.label+"-----"),r.join("\n")}},function(t,e,i){"use strict";const r=i(32),n=i(109).Buffer,o=i(179);function h(t){o.call(this,t),this.enc="pem"}r(h,o),t.exports=h,h.prototype.decode=function(t,e){const i=t.toString().split(/[\r\n]+/g),r=e.label.toUpperCase(),h=/^-----(BEGIN|END) ([^-]+)-----$/;let s=-1,a=-1;for(let t=0;t<i.length;t++){const e=i[t].match(h);if(null!==e&&e[2]===r){if(-1!==s){if("END"!==e[1])break;a=t;break}if("BEGIN"!==e[1])break;s=t}}if(-1===s||-1===a)throw new Error("PEM section not found for: "+r);const u=i.slice(s+1,a).join("");u.replace(/[^a-z0-9+/=]+/gi,"");const f=n.from(u,"base64");return o.prototype.decode.call(this,f,e)}},function(t,e,i){"use strict";const r=e;r.Reporter=i(111).Reporter,r.DecoderBuffer=i(80).DecoderBuffer,r.EncoderBuffer=i(80).EncoderBuffer,r.Node=i(110)},function(t,e,i){"use strict";const r=e;r._reverse=function(t){const e={};return Object.keys(t).forEach((function(i){(0|i)==i&&(i|=0);const r=t[i];e[r]=i})),e},r.der=i(112)},function(t,e,i){"use strict";var r=i(173),n=r.define("Time",(function(){this.choice({utcTime:this.utctime(),generalTime:this.gentime()})})),o=r.define("AttributeTypeValue",(function(){this.seq().obj(this.key("type").objid(),this.key("value").any())})),h=r.define("AlgorithmIdentifier",(function(){this.seq().obj(this.key("algorithm").objid(),this.key("parameters").optional(),this.key("curve").objid().optional())})),s=r.define("SubjectPublicKeyInfo",(function(){this.seq().obj(this.key("algorithm").use(h),this.key("subjectPublicKey").bitstr())})),a=r.define("RelativeDistinguishedName",(function(){this.setof(o)})),u=r.define("RDNSequence",(function(){this.seqof(a)})),f=r.define("Name",(function(){this.choice({rdnSequence:this.use(u)})})),l=r.define("Validity",(function(){this.seq().obj(this.key("notBefore").use(n),this.key("notAfter").use(n))})),d=r.define("Extension",(function(){this.seq().obj(this.key("extnID").objid(),this.key("critical").bool().def(!1),this.key("extnValue").octstr())})),c=r.define("TBSCertificate",(function(){this.seq().obj(this.key("version").explicit(0).int().optional(),this.key("serialNumber").int(),this.key("signature").use(h),this.key("issuer").use(f),this.key("validity").use(l),this.key("subject").use(f),this.key("subjectPublicKeyInfo").use(s),this.key("issuerUniqueID").implicit(1).bitstr().optional(),this.key("subjectUniqueID").implicit(2).bitstr().optional(),this.key("extensions").explicit(3).seqof(d).optional())})),p=r.define("X509Certificate",(function(){this.seq().obj(this.key("tbsCertificate").use(c),this.key("signatureAlgorithm").use(h),this.key("signatureValue").bitstr())}));t.exports=p},function(t){t.exports={"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}},function(t,e,i){var r=/Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m,n=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m,o=/^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m,h=i(84),s=i(102),a=i(34).Buffer;t.exports=function(t,e){var i,u=t.toString(),f=u.match(r);if(f){var l="aes"+f[1],d=a.from(f[2],"hex"),c=a.from(f[3].replace(/[\r\n]/g,""),"base64"),p=h(e,d.slice(0,8),parseInt(f[1],10)).key,m=[],v=s.createDecipheriv(l,p,d);m.push(v.update(c)),m.push(v.final()),i=a.concat(m)}else{var g=u.match(o);i=a.from(g[2].replace(/[\r\n]/g,""),"base64")}return{tag:u.match(n)[1],data:i}}},function(t,e,i){var r=i(34).Buffer,n=i(171),o=i(106).ec,h=i(86),s=i(180);function a(t,e){if(t.cmpn(0)<=0)throw new Error("invalid sig");if(t.cmp(e)>=e)throw new Error("invalid sig")}t.exports=function(t,e,i,u,f){var l=h(i);if("ec"===l.type){if("ecdsa"!==u&&"ecdsa/rsa"!==u)throw new Error("wrong public key type");return function(t,e,i){var r=s[i.data.algorithm.curve.join(".")];if(!r)throw new Error("unknown curve "+i.data.algorithm.curve.join("."));var n=new o(r),h=i.data.subjectPrivateKey.data;return n.verify(e,t,h)}(t,e,l)}if("dsa"===l.type){if("dsa"!==u)throw new Error("wrong public key type");return function(t,e,i){var r=i.data.p,o=i.data.q,s=i.data.g,u=i.data.pub_key,f=h.signature.decode(t,"der"),l=f.s,d=f.r;a(l,o),a(d,o);var c=n.mont(r),p=l.invm(o);return 0===s.toRed(c).redPow(new n(e).mul(p).mod(o)).fromRed().mul(u.toRed(c).redPow(d.mul(p).mod(o)).fromRed()).mod(r).mod(o).cmp(d)}(t,e,l)}if("rsa"!==u&&"ecdsa/rsa"!==u)throw new Error("wrong public key type");e=r.concat([f,e]);for(var d=l.modulus.byteLength(),c=[1],p=0;e.length+c.length+2<d;)c.push(255),p++;c.push(0);for(var m=-1;++m<e.length;)c.push(e[m]);c=r.from(c);var v=n.mont(l.modulus);t=(t=new n(t).toRed(v)).redPow(new n(l.publicExponent)),t=r.from(t.fromRed().toArray());var g=p<8?1:0;for(d=Math.min(t.length,c.length),t.length!==c.length&&(g=1),m=-1;++m<d;)g|=t[m]^c[m];return 0===g}},function(t,e,i){(function(e){var r=i(106),n=i(283);t.exports=function(t){return new h(t)};var o={secp256k1:{name:"secp256k1",byteLength:32},secp224r1:{name:"p224",byteLength:28},prime256v1:{name:"p256",byteLength:32},prime192v1:{name:"p192",byteLength:24},ed25519:{name:"ed25519",byteLength:32},secp384r1:{name:"p384",byteLength:48},secp521r1:{name:"p521",byteLength:66}};function h(t){this.curveType=o[t],this.curveType||(this.curveType={name:t}),this.curve=new r.ec(this.curveType.name),this.keys=void 0}function s(t,i,r){Array.isArray(t)||(t=t.toArray());var n=new e(t);if(r&&n.length<r){var o=new e(r-n.length);o.fill(0),n=e.concat([o,n])}return i?n.toString(i):n}o.p224=o.secp224r1,o.p256=o.secp256r1=o.prime256v1,o.p192=o.secp192r1=o.prime192v1,o.p384=o.secp384r1,o.p521=o.secp521r1,h.prototype.generateKeys=function(t,e){return this.keys=this.curve.genKeyPair(),this.getPublicKey(t,e)},h.prototype.computeSecret=function(t,i,r){return i=i||"utf8",e.isBuffer(t)||(t=new e(t,i)),s(this.curve.keyFromPublic(t).getPublic().mul(this.keys.getPrivate()).getX(),r,this.curveType.byteLength)},h.prototype.getPublicKey=function(t,e){var i=this.keys.getPublic("compressed"===e,!0);return"hybrid"===e&&(i[i.length-1]%2?i[0]=7:i[0]=6),s(i,t)},h.prototype.getPrivateKey=function(t){return s(this.keys.getPrivate(),t)},h.prototype.setPublicKey=function(t,i){return i=i||"utf8",e.isBuffer(t)||(t=new e(t,i)),this.keys._importPublic(t),this},h.prototype.setPrivateKey=function(t,i){i=i||"utf8",e.isBuffer(t)||(t=new e(t,i));var r=new n(t);return r=r.toString(16),this.keys=this.curve.genKeyPair(),this.keys._importPrivate(r),this}}).call(this,i(46).Buffer)},function(t,e,i){(function(t){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function n(t,e){t.super_=e;var i=function(){};i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t}function o(t,e,i){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(i=e,e=10),this._init(t||0,e||10,i||"be"))}var h;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{h=i(181).Buffer}catch(t){}function s(t,e,i){for(var r=0,n=Math.min(t.length,i),o=e;o<n;o++){var h=t.charCodeAt(o)-48;r<<=4,r|=h>=49&&h<=54?h-49+10:h>=17&&h<=22?h-17+10:15&h}return r}function a(t,e,i,r){for(var n=0,o=Math.min(t.length,i),h=e;h<o;h++){var s=t.charCodeAt(h)-48;n*=r,n+=s>=49?s-49+10:s>=17?s-17+10:s}return n}o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"==typeof t)return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&n++,16===e?this._parseHex(t,n):this._parseBase(t,e,n),"-"===t[0]&&(this.negative=1),this.strip(),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},o.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,h,s=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)h=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)h=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=h<<s&67108863,this.words[o+1]=h>>>26-s&67108863,(s+=24)>=26&&(s-=26,o++);return this.strip()},o.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var r,n,o=0;for(i=t.length-6,r=0;i>=e;i-=6)n=s(t,i,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,r++);i+6!==e&&(n=s(t,e,i+6),this.words[r]|=n<<o&67108863,this.words[r+1]|=n>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(t,e,i){this.words=[0],this.length=1;for(var r=0,n=1;n<=67108863;n*=e)r++;r--,n=n/e|0;for(var o=t.length-i,h=o%r,s=Math.min(o,o-h)+i,u=0,f=i;f<s;f+=r)u=a(t,f,f+r,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==h){var l=1;for(u=a(t,f,t.length,e),f=0;f<h;f++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var u=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,i){i.negative=e.negative^t.negative;var r=t.length+e.length|0;i.length=r,r=r-1|0;var n=0|t.words[0],o=0|e.words[0],h=n*o,s=67108863&h,a=h/67108864|0;i.words[0]=s;for(var u=1;u<r;u++){for(var f=a>>>26,l=67108863&a,d=Math.min(u,e.length-1),c=Math.max(0,u-t.length+1);c<=d;c++){var p=u-c|0;f+=(h=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&h}i.words[u]=0|l,a=0|f}return 0!==a?i.words[u]=0|a:i.length--,i.strip()}o.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,h=0;h<this.length;h++){var s=this.words[h],a=(16777215&(s<<n|o)).toString(16);i=0!==(o=s>>>24-n&16777215)||h!==this.length-1?u[6-a.length]+a+i:a+i,(n+=2)>=26&&(n-=26,h--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var d=f[t],c=l[t];i="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(c).toString(t);i=(p=p.idivn(c)).isZero()?m+i:u[d-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(t,e){return r(void 0!==h),this.toArrayLike(h,t,e)},o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,i){var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var h,s,a="le"===e,u=new t(o),f=this.clone();if(a){for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[s]=h;for(;s<o;s++)u[s]=0}else{for(s=0;s<o-n;s++)u[s]=0;for(s=0;!f.isZero();s++)h=f.andln(255),f.iushrn(8),u[o-s-1]=h}return u},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,i=0;return e>=4096&&(i+=13,e>>>=13),e>=64&&(i+=7,e>>>=7),e>=8&&(i+=4,e>>>=4),e>=2&&(i+=2,e>>>=2),i+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,i=0;return 0==(8191&e)&&(i+=13,e>>>=13),0==(127&e)&&(i+=7,e>>>=7),0==(15&e)&&(i+=4,e>>>=4),0==(3&e)&&(i+=2,e>>>=2),0==(1&e)&&i++,i},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var i=this._zeroBits(this.words[e]);if(t+=i,26!==i)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},o.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var i=0;i<e.length;i++)this.words[i]=this.words[i]&t.words[i];return this.length=e.length,this.strip()},o.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,i;this.length>t.length?(e=this,i=t):(e=t,i=this);for(var r=0;r<i.length;r++)this.words[r]=e.words[r]^i.words[r];if(this!==e)for(;r<e.length;r++)this.words[r]=e.words[r];return this.length=e.length,this.strip()},o.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},o.prototype.iadd=function(t){var e,i,r;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(i=this,r=t):(i=t,r=this);for(var n=0,o=0;o<r.length;o++)e=(0|i.words[o])+(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<i.length;o++)e=(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=i.length,0!==n)this.words[this.length]=n,this.length++;else if(i!==this)for(;o<i.length;o++)this.words[o]=i.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var i,r,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(i=this,r=t):(i=t,r=this);for(var o=0,h=0;h<r.length;h++)o=(e=(0|i.words[h])-(0|r.words[h])+o)>>26,this.words[h]=67108863&e;for(;0!==o&&h<i.length;h++)o=(e=(0|i.words[h])+o)>>26,this.words[h]=67108863&e;if(0===o&&h<i.length&&i!==this)for(;h<i.length;h++)this.words[h]=i.words[h];return this.length=Math.max(this.length,h),i!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var c=function(t,e,i){var r,n,o,h=t.words,s=e.words,a=i.words,u=0,f=0|h[0],l=8191&f,d=f>>>13,c=0|h[1],p=8191&c,m=c>>>13,v=0|h[2],g=8191&v,b=v>>>13,y=0|h[3],w=8191&y,M=y>>>13,_=0|h[4],S=8191&_,k=_>>>13,A=0|h[5],E=8191&A,x=A>>>13,B=0|h[6],R=8191&B,I=B>>>13,T=0|h[7],P=8191&T,C=T>>>13,L=0|h[8],q=8191&L,j=L>>>13,O=0|h[9],N=8191&O,D=O>>>13,z=0|s[0],U=8191&z,H=z>>>13,Z=0|s[1],F=8191&Z,K=Z>>>13,W=0|s[2],Y=8191&W,V=W>>>13,X=0|s[3],G=8191&X,J=X>>>13,$=0|s[4],Q=8191&$,tt=$>>>13,et=0|s[5],it=8191&et,rt=et>>>13,nt=0|s[6],ot=8191&nt,ht=nt>>>13,st=0|s[7],at=8191&st,ut=st>>>13,ft=0|s[8],lt=8191&ft,dt=ft>>>13,ct=0|s[9],pt=8191&ct,mt=ct>>>13;i.negative=t.negative^e.negative,i.length=19;var vt=(u+(r=Math.imul(l,U))|0)+((8191&(n=(n=Math.imul(l,H))+Math.imul(d,U)|0))<<13)|0;u=((o=Math.imul(d,H))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(p,U),n=(n=Math.imul(p,H))+Math.imul(m,U)|0,o=Math.imul(m,H);var gt=(u+(r=r+Math.imul(l,F)|0)|0)+((8191&(n=(n=n+Math.imul(l,K)|0)+Math.imul(d,F)|0))<<13)|0;u=((o=o+Math.imul(d,K)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(g,U),n=(n=Math.imul(g,H))+Math.imul(b,U)|0,o=Math.imul(b,H),r=r+Math.imul(p,F)|0,n=(n=n+Math.imul(p,K)|0)+Math.imul(m,F)|0,o=o+Math.imul(m,K)|0;var bt=(u+(r=r+Math.imul(l,Y)|0)|0)+((8191&(n=(n=n+Math.imul(l,V)|0)+Math.imul(d,Y)|0))<<13)|0;u=((o=o+Math.imul(d,V)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(w,U),n=(n=Math.imul(w,H))+Math.imul(M,U)|0,o=Math.imul(M,H),r=r+Math.imul(g,F)|0,n=(n=n+Math.imul(g,K)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,K)|0,r=r+Math.imul(p,Y)|0,n=(n=n+Math.imul(p,V)|0)+Math.imul(m,Y)|0,o=o+Math.imul(m,V)|0;var yt=(u+(r=r+Math.imul(l,G)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,G)|0))<<13)|0;u=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(S,U),n=(n=Math.imul(S,H))+Math.imul(k,U)|0,o=Math.imul(k,H),r=r+Math.imul(w,F)|0,n=(n=n+Math.imul(w,K)|0)+Math.imul(M,F)|0,o=o+Math.imul(M,K)|0,r=r+Math.imul(g,Y)|0,n=(n=n+Math.imul(g,V)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,V)|0,r=r+Math.imul(p,G)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,G)|0,o=o+Math.imul(m,J)|0;var wt=(u+(r=r+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;u=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(E,U),n=(n=Math.imul(E,H))+Math.imul(x,U)|0,o=Math.imul(x,H),r=r+Math.imul(S,F)|0,n=(n=n+Math.imul(S,K)|0)+Math.imul(k,F)|0,o=o+Math.imul(k,K)|0,r=r+Math.imul(w,Y)|0,n=(n=n+Math.imul(w,V)|0)+Math.imul(M,Y)|0,o=o+Math.imul(M,V)|0,r=r+Math.imul(g,G)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,J)|0,r=r+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var Mt=(u+(r=r+Math.imul(l,it)|0)|0)+((8191&(n=(n=n+Math.imul(l,rt)|0)+Math.imul(d,it)|0))<<13)|0;u=((o=o+Math.imul(d,rt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(R,U),n=(n=Math.imul(R,H))+Math.imul(I,U)|0,o=Math.imul(I,H),r=r+Math.imul(E,F)|0,n=(n=n+Math.imul(E,K)|0)+Math.imul(x,F)|0,o=o+Math.imul(x,K)|0,r=r+Math.imul(S,Y)|0,n=(n=n+Math.imul(S,V)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,V)|0,r=r+Math.imul(w,G)|0,n=(n=n+Math.imul(w,J)|0)+Math.imul(M,G)|0,o=o+Math.imul(M,J)|0,r=r+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,r=r+Math.imul(p,it)|0,n=(n=n+Math.imul(p,rt)|0)+Math.imul(m,it)|0,o=o+Math.imul(m,rt)|0;var _t=(u+(r=r+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,ht)|0)+Math.imul(d,ot)|0))<<13)|0;u=((o=o+Math.imul(d,ht)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(P,U),n=(n=Math.imul(P,H))+Math.imul(C,U)|0,o=Math.imul(C,H),r=r+Math.imul(R,F)|0,n=(n=n+Math.imul(R,K)|0)+Math.imul(I,F)|0,o=o+Math.imul(I,K)|0,r=r+Math.imul(E,Y)|0,n=(n=n+Math.imul(E,V)|0)+Math.imul(x,Y)|0,o=o+Math.imul(x,V)|0,r=r+Math.imul(S,G)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,J)|0,r=r+Math.imul(w,Q)|0,n=(n=n+Math.imul(w,tt)|0)+Math.imul(M,Q)|0,o=o+Math.imul(M,tt)|0,r=r+Math.imul(g,it)|0,n=(n=n+Math.imul(g,rt)|0)+Math.imul(b,it)|0,o=o+Math.imul(b,rt)|0,r=r+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,ht)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,ht)|0;var St=(u+(r=r+Math.imul(l,at)|0)|0)+((8191&(n=(n=n+Math.imul(l,ut)|0)+Math.imul(d,at)|0))<<13)|0;u=((o=o+Math.imul(d,ut)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(q,U),n=(n=Math.imul(q,H))+Math.imul(j,U)|0,o=Math.imul(j,H),r=r+Math.imul(P,F)|0,n=(n=n+Math.imul(P,K)|0)+Math.imul(C,F)|0,o=o+Math.imul(C,K)|0,r=r+Math.imul(R,Y)|0,n=(n=n+Math.imul(R,V)|0)+Math.imul(I,Y)|0,o=o+Math.imul(I,V)|0,r=r+Math.imul(E,G)|0,n=(n=n+Math.imul(E,J)|0)+Math.imul(x,G)|0,o=o+Math.imul(x,J)|0,r=r+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,tt)|0,r=r+Math.imul(w,it)|0,n=(n=n+Math.imul(w,rt)|0)+Math.imul(M,it)|0,o=o+Math.imul(M,rt)|0,r=r+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,ht)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,ht)|0,r=r+Math.imul(p,at)|0,n=(n=n+Math.imul(p,ut)|0)+Math.imul(m,at)|0,o=o+Math.imul(m,ut)|0;var kt=(u+(r=r+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;u=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(N,U),n=(n=Math.imul(N,H))+Math.imul(D,U)|0,o=Math.imul(D,H),r=r+Math.imul(q,F)|0,n=(n=n+Math.imul(q,K)|0)+Math.imul(j,F)|0,o=o+Math.imul(j,K)|0,r=r+Math.imul(P,Y)|0,n=(n=n+Math.imul(P,V)|0)+Math.imul(C,Y)|0,o=o+Math.imul(C,V)|0,r=r+Math.imul(R,G)|0,n=(n=n+Math.imul(R,J)|0)+Math.imul(I,G)|0,o=o+Math.imul(I,J)|0,r=r+Math.imul(E,Q)|0,n=(n=n+Math.imul(E,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,r=r+Math.imul(S,it)|0,n=(n=n+Math.imul(S,rt)|0)+Math.imul(k,it)|0,o=o+Math.imul(k,rt)|0,r=r+Math.imul(w,ot)|0,n=(n=n+Math.imul(w,ht)|0)+Math.imul(M,ot)|0,o=o+Math.imul(M,ht)|0,r=r+Math.imul(g,at)|0,n=(n=n+Math.imul(g,ut)|0)+Math.imul(b,at)|0,o=o+Math.imul(b,ut)|0,r=r+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(u+(r=r+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;u=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(N,F),n=(n=Math.imul(N,K))+Math.imul(D,F)|0,o=Math.imul(D,K),r=r+Math.imul(q,Y)|0,n=(n=n+Math.imul(q,V)|0)+Math.imul(j,Y)|0,o=o+Math.imul(j,V)|0,r=r+Math.imul(P,G)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(C,G)|0,o=o+Math.imul(C,J)|0,r=r+Math.imul(R,Q)|0,n=(n=n+Math.imul(R,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,r=r+Math.imul(E,it)|0,n=(n=n+Math.imul(E,rt)|0)+Math.imul(x,it)|0,o=o+Math.imul(x,rt)|0,r=r+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,ht)|0)+Math.imul(k,ot)|0,o=o+Math.imul(k,ht)|0,r=r+Math.imul(w,at)|0,n=(n=n+Math.imul(w,ut)|0)+Math.imul(M,at)|0,o=o+Math.imul(M,ut)|0,r=r+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(u+(r=r+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;u=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(N,Y),n=(n=Math.imul(N,V))+Math.imul(D,Y)|0,o=Math.imul(D,V),r=r+Math.imul(q,G)|0,n=(n=n+Math.imul(q,J)|0)+Math.imul(j,G)|0,o=o+Math.imul(j,J)|0,r=r+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(C,Q)|0,o=o+Math.imul(C,tt)|0,r=r+Math.imul(R,it)|0,n=(n=n+Math.imul(R,rt)|0)+Math.imul(I,it)|0,o=o+Math.imul(I,rt)|0,r=r+Math.imul(E,ot)|0,n=(n=n+Math.imul(E,ht)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,ht)|0,r=r+Math.imul(S,at)|0,n=(n=n+Math.imul(S,ut)|0)+Math.imul(k,at)|0,o=o+Math.imul(k,ut)|0,r=r+Math.imul(w,lt)|0,n=(n=n+Math.imul(w,dt)|0)+Math.imul(M,lt)|0,o=o+Math.imul(M,dt)|0;var xt=(u+(r=r+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(b,pt)|0))<<13)|0;u=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(N,G),n=(n=Math.imul(N,J))+Math.imul(D,G)|0,o=Math.imul(D,J),r=r+Math.imul(q,Q)|0,n=(n=n+Math.imul(q,tt)|0)+Math.imul(j,Q)|0,o=o+Math.imul(j,tt)|0,r=r+Math.imul(P,it)|0,n=(n=n+Math.imul(P,rt)|0)+Math.imul(C,it)|0,o=o+Math.imul(C,rt)|0,r=r+Math.imul(R,ot)|0,n=(n=n+Math.imul(R,ht)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,ht)|0,r=r+Math.imul(E,at)|0,n=(n=n+Math.imul(E,ut)|0)+Math.imul(x,at)|0,o=o+Math.imul(x,ut)|0,r=r+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(k,lt)|0,o=o+Math.imul(k,dt)|0;var Bt=(u+(r=r+Math.imul(w,pt)|0)|0)+((8191&(n=(n=n+Math.imul(w,mt)|0)+Math.imul(M,pt)|0))<<13)|0;u=((o=o+Math.imul(M,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(N,Q),n=(n=Math.imul(N,tt))+Math.imul(D,Q)|0,o=Math.imul(D,tt),r=r+Math.imul(q,it)|0,n=(n=n+Math.imul(q,rt)|0)+Math.imul(j,it)|0,o=o+Math.imul(j,rt)|0,r=r+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,ht)|0)+Math.imul(C,ot)|0,o=o+Math.imul(C,ht)|0,r=r+Math.imul(R,at)|0,n=(n=n+Math.imul(R,ut)|0)+Math.imul(I,at)|0,o=o+Math.imul(I,ut)|0,r=r+Math.imul(E,lt)|0,n=(n=n+Math.imul(E,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(u+(r=r+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(k,pt)|0))<<13)|0;u=((o=o+Math.imul(k,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,r=Math.imul(N,it),n=(n=Math.imul(N,rt))+Math.imul(D,it)|0,o=Math.imul(D,rt),r=r+Math.imul(q,ot)|0,n=(n=n+Math.imul(q,ht)|0)+Math.imul(j,ot)|0,o=o+Math.imul(j,ht)|0,r=r+Math.imul(P,at)|0,n=(n=n+Math.imul(P,ut)|0)+Math.imul(C,at)|0,o=o+Math.imul(C,ut)|0,r=r+Math.imul(R,lt)|0,n=(n=n+Math.imul(R,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(u+(r=r+Math.imul(E,pt)|0)|0)+((8191&(n=(n=n+Math.imul(E,mt)|0)+Math.imul(x,pt)|0))<<13)|0;u=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,r=Math.imul(N,ot),n=(n=Math.imul(N,ht))+Math.imul(D,ot)|0,o=Math.imul(D,ht),r=r+Math.imul(q,at)|0,n=(n=n+Math.imul(q,ut)|0)+Math.imul(j,at)|0,o=o+Math.imul(j,ut)|0,r=r+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(C,lt)|0,o=o+Math.imul(C,dt)|0;var Tt=(u+(r=r+Math.imul(R,pt)|0)|0)+((8191&(n=(n=n+Math.imul(R,mt)|0)+Math.imul(I,pt)|0))<<13)|0;u=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,r=Math.imul(N,at),n=(n=Math.imul(N,ut))+Math.imul(D,at)|0,o=Math.imul(D,ut),r=r+Math.imul(q,lt)|0,n=(n=n+Math.imul(q,dt)|0)+Math.imul(j,lt)|0,o=o+Math.imul(j,dt)|0;var Pt=(u+(r=r+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(C,pt)|0))<<13)|0;u=((o=o+Math.imul(C,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,r=Math.imul(N,lt),n=(n=Math.imul(N,dt))+Math.imul(D,lt)|0,o=Math.imul(D,dt);var Ct=(u+(r=r+Math.imul(q,pt)|0)|0)+((8191&(n=(n=n+Math.imul(q,mt)|0)+Math.imul(j,pt)|0))<<13)|0;u=((o=o+Math.imul(j,mt)|0)+(n>>>13)|0)+(Ct>>>26)|0,Ct&=67108863;var Lt=(u+(r=Math.imul(N,pt))|0)+((8191&(n=(n=Math.imul(N,mt))+Math.imul(D,pt)|0))<<13)|0;return u=((o=Math.imul(D,mt))+(n>>>13)|0)+(Lt>>>26)|0,Lt&=67108863,a[0]=vt,a[1]=gt,a[2]=bt,a[3]=yt,a[4]=wt,a[5]=Mt,a[6]=_t,a[7]=St,a[8]=kt,a[9]=At,a[10]=Et,a[11]=xt,a[12]=Bt,a[13]=Rt,a[14]=It,a[15]=Tt,a[16]=Pt,a[17]=Ct,a[18]=Lt,0!==u&&(a[19]=u,i.length++),i};function p(t,e,i){return(new m).mulp(t,e,i)}function m(t,e){this.x=t,this.y=e}Math.imul||(c=d),o.prototype.mulTo=function(t,e){var i=this.length+t.length;return 10===this.length&&10===t.length?c(this,t,e):i<63?d(this,t,e):i<1024?function(t,e,i){i.negative=e.negative^t.negative,i.length=t.length+e.length;for(var r=0,n=0,o=0;o<i.length-1;o++){var h=n;n=0;for(var s=67108863&r,a=Math.min(o,e.length-1),u=Math.max(0,o-t.length+1);u<=a;u++){var f=o-u,l=(0|t.words[f])*(0|e.words[u]),d=67108863&l;s=67108863&(d=d+s|0),n+=(h=(h=h+(l/67108864|0)|0)+(d>>>26)|0)>>>26,h&=67108863}i.words[o]=s,r=h,h=n}return 0!==r?i.words[o]=r:i.length--,i.strip()}(this,t,e):p(this,t,e)},m.prototype.makeRBT=function(t){for(var e=new Array(t),i=o.prototype._countBits(t)-1,r=0;r<t;r++)e[r]=this.revBin(r,i,t);return e},m.prototype.revBin=function(t,e,i){if(0===t||t===i-1)return t;for(var r=0,n=0;n<e;n++)r|=(1&t)<<e-n-1,t>>=1;return r},m.prototype.permute=function(t,e,i,r,n,o){for(var h=0;h<o;h++)r[h]=e[t[h]],n[h]=i[t[h]]},m.prototype.transform=function(t,e,i,r,n,o){this.permute(o,t,e,i,r,n);for(var h=1;h<n;h<<=1)for(var s=h<<1,a=Math.cos(2*Math.PI/s),u=Math.sin(2*Math.PI/s),f=0;f<n;f+=s)for(var l=a,d=u,c=0;c<h;c++){var p=i[f+c],m=r[f+c],v=i[f+c+h],g=r[f+c+h],b=l*v-d*g;g=l*g+d*v,v=b,i[f+c]=p+v,r[f+c]=m+g,i[f+c+h]=p-v,r[f+c+h]=m-g,c!==s&&(b=a*l-u*d,d=a*d+u*l,l=b)}},m.prototype.guessLen13b=function(t,e){var i=1|Math.max(e,t),r=1&i,n=0;for(i=i/2|0;i;i>>>=1)n++;return 1<<n+1+r},m.prototype.conjugate=function(t,e,i){if(!(i<=1))for(var r=0;r<i/2;r++){var n=t[r];t[r]=t[i-r-1],t[i-r-1]=n,n=e[r],e[r]=-e[i-r-1],e[i-r-1]=-n}},m.prototype.normalize13b=function(t,e){for(var i=0,r=0;r<e/2;r++){var n=8192*Math.round(t[2*r+1]/e)+Math.round(t[2*r]/e)+i;t[r]=67108863&n,i=n<67108864?0:n/67108864|0}return t},m.prototype.convert13b=function(t,e,i,n){for(var o=0,h=0;h<e;h++)o+=0|t[h],i[2*h]=8191&o,o>>>=13,i[2*h+1]=8191&o,o>>>=13;for(h=2*e;h<n;++h)i[h]=0;r(0===o),r(0==(-8192&o))},m.prototype.stub=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=0;return e},m.prototype.mulp=function(t,e,i){var r=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(r),o=this.stub(r),h=new Array(r),s=new Array(r),a=new Array(r),u=new Array(r),f=new Array(r),l=new Array(r),d=i.words;d.length=r,this.convert13b(t.words,t.length,h,r),this.convert13b(e.words,e.length,u,r),this.transform(h,o,s,a,r,n),this.transform(u,o,f,l,r,n);for(var c=0;c<r;c++){var p=s[c]*f[c]-a[c]*l[c];a[c]=s[c]*l[c]+a[c]*f[c],s[c]=p}return this.conjugate(s,a,r),this.transform(s,a,d,o,r,n),this.conjugate(d,o,r),this.normalize13b(d,r),i.negative=t.negative^e.negative,i.length=t.length+e.length,i.strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),p(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,o=(67108863&n)+(67108863&e);e>>=26,e+=n/67108864|0,e+=o>>>26,this.words[i]=67108863&o}return 0!==e&&(this.words[i]=e,this.length++),this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),i=0;i<e.length;i++){var r=i/26|0,n=i%26;e[i]=(t.words[r]&1<<n)>>>n}return e}(t);if(0===e.length)return new o(1);for(var i=this,r=0;r<e.length&&0===e[r];r++,i=i.sqr());if(++r<e.length)for(var n=i.sqr();r<e.length;r++,n=n.sqr())0!==e[r]&&(i=i.mul(n));return i},o.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var h=0;for(e=0;e<this.length;e++){var s=this.words[e]&o,a=(0|this.words[e])-s<<i;this.words[e]=a|h,h=s>>>26-i}h&&(this.words[e]=h,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this.strip()},o.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,h=Math.min((t-o)/26,this.length),s=67108863^67108863>>>o<<o,a=i;if(n-=h,n=Math.max(0,n),a){for(var u=0;u<h;u++)a.words[u]=this.words[u];a.length=h}if(0===h);else if(this.length>h)for(this.length-=h,u=0;u<this.length;u++)this.words[u]=this.words[u+h];else this.words[0]=0,this.length=1;var f=0;for(u=this.length-1;u>=0&&(0!==f||u>=n);u--){var l=0|this.words[u];this.words[u]=f<<26-o|l>>>o,f=l&s}return a&&0!==f&&(a.words[a.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i)&&!!(this.words[i]&n)},o.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this.strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,i){var n,o,h=t.length+i;this._expand(h);var s=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+s;var a=(0|t.words[n])*e;s=((o-=67108863&a)>>26)-(a/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)s=(o=(0|this.words[n+i])+s)>>26,this.words[n+i]=67108863&o;if(0===s)return this.strip();for(r(-1===s),s=0,n=0;n<this.length;n++)s=(o=-(0|this.words[n])+s)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(t,e){var i=(this.length,t.length),r=this.clone(),n=t,h=0|n.words[n.length-1];0!==(i=26-this._countBits(h))&&(n=n.ushln(i),r.iushln(i),h=0|n.words[n.length-1]);var s,a=r.length-n.length;if("mod"!==e){(s=new o(null)).length=a+1,s.words=new Array(s.length);for(var u=0;u<s.length;u++)s.words[u]=0}var f=r.clone()._ishlnsubmul(n,1,a);0===f.negative&&(r=f,s&&(s.words[a]=1));for(var l=a-1;l>=0;l--){var d=67108864*(0|r.words[n.length+l])+(0|r.words[n.length+l-1]);for(d=Math.min(d/h|0,67108863),r._ishlnsubmul(n,d,l);0!==r.negative;)d--,r.negative=0,r._ishlnsubmul(n,1,l),r.isZero()||(r.negative^=1);s&&(s.words[l]=d)}return s&&s.strip(),r.strip(),"div"!==e&&0!==i&&r.iushrn(i),{div:s||null,mod:r}},o.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,e),"mod"!==e&&(n=s.div.neg()),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.iadd(t)),{div:n,mod:h}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),e),"mod"!==e&&(n=s.div.neg()),{div:n,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),e),"div"!==e&&(h=s.mod.neg(),i&&0!==h.negative&&h.isub(t)),{div:s.div,mod:h}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modn(t.words[0]))}:this._wordDiv(t,e);var n,h,s},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var i=0!==e.div.negative?e.mod.isub(t):e.mod,r=t.ushrn(1),n=t.andln(1),o=i.cmp(r);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(e*i+(0|this.words[n]))%t;return i},o.prototype.idivn=function(t){r(t<=67108863);for(var e=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*e;this.words[i]=n/t|0,e=n%t}return this.strip()},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n=new o(1),h=new o(0),s=new o(0),a=new o(1),u=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++u;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(n.isOdd()||h.isOdd())&&(n.iadd(f),h.isub(l)),n.iushrn(1),h.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(s.isOdd()||a.isOdd())&&(s.iadd(f),a.isub(l)),s.iushrn(1),a.iushrn(1);e.cmp(i)>=0?(e.isub(i),n.isub(s),h.isub(a)):(i.isub(e),s.isub(n),a.isub(h))}return{a:s,b:a,gcd:i.iushln(u)}},o.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var n,h=new o(1),s=new o(0),a=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var u=0,f=1;0==(e.words[0]&f)&&u<26;++u,f<<=1);if(u>0)for(e.iushrn(u);u-- >0;)h.isOdd()&&h.iadd(a),h.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(a),s.iushrn(1);e.cmp(i)>=0?(e.isub(i),h.isub(s)):(i.isub(e),s.isub(h))}return(n=0===e.cmpn(1)?h:s).cmpn(0)<0&&n.iadd(t),n},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),i=t.clone();e.negative=0,i.negative=0;for(var r=0;e.isEven()&&i.isEven();r++)e.iushrn(1),i.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;i.isEven();)i.iushrn(1);var n=e.cmp(i);if(n<0){var o=e;e=i,i=o}else if(0===n||0===i.cmpn(1))break;e.isub(i)}return i.iushln(r)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,h=i;0!==o&&h<this.length;h++){var s=0|this.words[h];o=(s+=o)>>>26,s&=67108863,this.words[h]=s}return 0!==o&&(this.words[h]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,i=this.length-1;i>=0;i--){var r=0|this.words[i],n=0|t.words[i];if(r!==n){r<n?e=-1:r>n&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new _(t)},o.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function g(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){g.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function y(){g.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){g.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){g.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function S(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},g.prototype.ireduce=function(t){var e,i=t;do{this.split(i,this.tmp),e=(i=(i=this.imulK(i)).iadd(this.tmp)).bitLength()}while(e>this.n);var r=e<this.n?-1:i.ucmp(this.p);return 0===r?(i.words[0]=0,i.length=1):r>0?i.isub(this.p):void 0!==i.strip?i.strip():i._strip(),i},g.prototype.split=function(t,e){t.iushrn(this.n,0,e)},g.prototype.imulK=function(t){return t.imul(this.k)},n(b,g),b.prototype.split=function(t,e){for(var i=Math.min(t.length,9),r=0;r<i;r++)e.words[r]=t.words[r];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var n=t.words[9];for(e.words[e.length++]=4194303&n,r=10;r<t.length;r++){var o=0|t.words[r];t.words[r-10]=(4194303&o)<<4|n>>>22,n=o}n>>>=22,t.words[r-10]=n,0===n&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,i=0;i<t.length;i++){var r=0|t.words[i];e+=977*r,t.words[i]=67108863&e,e=64*r+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(y,g),n(w,g),n(M,g),M.prototype.imulK=function(t){for(var e=0,i=0;i<t.length;i++){var r=19*(0|t.words[i])+e,n=67108863&r;r>>>=26,t.words[i]=n,e=r}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new b;else if("p224"===t)e=new y;else if("p192"===t)e=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new M}return v[t]=e,e},_.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,e){this._verify2(t,e);var i=t.add(e);return i.cmp(this.m)>=0&&i.isub(this.m),i._forceRed(this)},_.prototype.iadd=function(t,e){this._verify2(t,e);var i=t.iadd(e);return i.cmp(this.m)>=0&&i.isub(this.m),i},_.prototype.sub=function(t,e){this._verify2(t,e);var i=t.sub(e);return i.cmpn(0)<0&&i.iadd(this.m),i._forceRed(this)},_.prototype.isub=function(t,e){this._verify2(t,e);var i=t.isub(e);return i.cmpn(0)<0&&i.iadd(this.m),i},_.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},_.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},_.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new o(1)).iushrn(2);return this.pow(t,i)}for(var n=this.m.subn(1),h=0;!n.isZero()&&0===n.andln(1);)h++,n.iushrn(1);r(!n.isZero());var s=new o(1).toRed(this),a=s.redNeg(),u=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new o(2*f*f).toRed(this);0!==this.pow(f,u).cmp(a);)f.redIAdd(a);for(var l=this.pow(f,n),d=this.pow(t,n.addn(1).iushrn(1)),c=this.pow(t,n),p=h;0!==c.cmp(s);){for(var m=c,v=0;0!==m.cmp(s);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new o(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},_.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},_.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var i=new Array(16);i[0]=new o(1).toRed(this),i[1]=t;for(var r=2;r<i.length;r++)i[r]=this.mul(i[r-1],t);var n=i[0],h=0,s=0,a=e.bitLength()%26;for(0===a&&(a=26),r=e.length-1;r>=0;r--){for(var u=e.words[r],f=a-1;f>=0;f--){var l=u>>f&1;n!==i[0]&&(n=this.sqr(n)),0!==l||0!==h?(h<<=1,h|=l,(4===++s||0===r&&0===f)&&(n=this.mul(n,i[h]),s=0,h=0)):s=0}a=26}return n},_.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},_.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new S(t)},n(S,_),S.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},S.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},S.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var i=t.imul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},S.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var i=t.mul(e),r=i.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=i.isub(r).iushrn(this.shift),h=n;return n.cmp(this.m)>=0?h=n.isub(this.m):n.cmpn(0)<0&&(h=n.iadd(this.m)),h._forceRed(this)},S.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)}).call(this,i(52)(t))},function(t,e,i){e.publicEncrypt=i(285),e.privateDecrypt=i(286),e.privateEncrypt=function(t,i){return e.publicEncrypt(t,i,!0)},e.publicDecrypt=function(t,i){return e.privateDecrypt(t,i,!0)}},function(t,e,i){var r=i(86),n=i(67),o=i(74),h=i(182),s=i(183),a=i(113),u=i(185),f=i(105),l=i(34).Buffer;t.exports=function(t,e,i){var d;d=t.padding?t.padding:i?1:4;var c,p=r(t);if(4===d)c=function(t,e){var i=t.modulus.byteLength(),r=e.length,u=o("sha1").update(l.alloc(0)).digest(),f=u.length,d=2*f;if(r>i-d-2)throw new Error("message too long");var c=l.alloc(i-r-d-2),p=i-f-1,m=n(f),v=s(l.concat([u,c,l.alloc(1,1),e],p),h(m,p)),g=s(m,h(v,f));return new a(l.concat([l.alloc(1),g,v],i))}(p,e);else if(1===d)c=function(t,e,i){var r,o=e.length,h=t.modulus.byteLength();if(o>h-11)throw new Error("message too long");r=i?l.alloc(h-o-3,255):function(t){var e,i=l.allocUnsafe(t),r=0,o=n(2*t),h=0;for(;r<t;)h===o.length&&(o=n(2*t),h=0),(e=o[h++])&&(i[r++]=e);return i}(h-o-3);return new a(l.concat([l.from([0,i?1:2]),r,l.alloc(1),e],h))}(p,e,i);else{if(3!==d)throw new Error("unknown padding");if((c=new a(e)).cmp(p.modulus)>=0)throw new Error("data too long for modulus")}return i?f(c,p):u(c,p)}},function(t,e,i){var r=i(86),n=i(182),o=i(183),h=i(113),s=i(105),a=i(74),u=i(185),f=i(34).Buffer;t.exports=function(t,e,i){var l;l=t.padding?t.padding:i?1:4;var d,c=r(t),p=c.modulus.byteLength();if(e.length>p||new h(e).cmp(c.modulus)>=0)throw new Error("decryption error");d=i?u(new h(e),c):s(e,c);var m=f.alloc(p-d.length);if(d=f.concat([m,d],p),4===l)return function(t,e){var i=t.modulus.byteLength(),r=a("sha1").update(f.alloc(0)).digest(),h=r.length;if(0!==e[0])throw new Error("decryption error");var s=e.slice(1,h+1),u=e.slice(h+1),l=o(s,n(u,h)),d=o(u,n(l,i-h-1));if(function(t,e){t=f.from(t),e=f.from(e);var i=0,r=t.length;t.length!==e.length&&(i++,r=Math.min(t.length,e.length));var n=-1;for(;++n<r;)i+=t[n]^e[n];return i}(r,d.slice(0,h)))throw new Error("decryption error");var c=h;for(;0===d[c];)c++;if(1!==d[c++])throw new Error("decryption error");return d.slice(c)}(c,d);if(1===l)return function(t,e,i){var r=e.slice(0,2),n=2,o=0;for(;0!==e[n++];)if(n>=e.length){o++;break}var h=e.slice(2,n-1);("0002"!==r.toString("hex")&&!i||"0001"!==r.toString("hex")&&i)&&o++;h.length<8&&o++;if(o)throw new Error("decryption error");return e.slice(n)}(0,d,i);if(3===l)return d;throw new Error("unknown padding")}},function(t,e,i){"use strict";(function(t,r){function n(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}var o=i(34),h=i(67),s=o.Buffer,a=o.kMaxLength,u=t.crypto||t.msCrypto,f=Math.pow(2,32)-1;function l(t,e){if("number"!=typeof t||t!=t)throw new TypeError("offset must be a number");if(t>f||t<0)throw new TypeError("offset must be a uint32");if(t>a||t>e)throw new RangeError("offset out of range")}function d(t,e,i){if("number"!=typeof t||t!=t)throw new TypeError("size must be a number");if(t>f||t<0)throw new TypeError("size must be a uint32");if(t+e>i||t>a)throw new RangeError("buffer too small")}function c(t,e,i,n){if(r.browser){var o=t.buffer,s=new Uint8Array(o,e,i);return u.getRandomValues(s),n?void r.nextTick((function(){n(null,t)})):t}if(!n)return h(i).copy(t,e),t;h(i,(function(i,r){if(i)return n(i);r.copy(t,e),n(null,t)}))}u&&u.getRandomValues||!r.browser?(e.randomFill=function(e,i,r,n){if(!(s.isBuffer(e)||e instanceof t.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"==typeof i)n=i,i=0,r=e.length;else if("function"==typeof r)n=r,r=e.length-i;else if("function"!=typeof n)throw new TypeError('"cb" argument must be a function');return l(i,e.length),d(r,i,e.length),c(e,i,r,n)},e.randomFillSync=function(e,i,r){void 0===i&&(i=0);if(!(s.isBuffer(e)||e instanceof t.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');l(i,e.length),void 0===r&&(r=e.length-i);return d(r,i,e.length),c(e,i,r)}):(e.randomFill=n,e.randomFillSync=n)}).call(this,i(21),i(42))},function(t,e,i){var r;t.exports=(r=i(36),function(){if("function"==typeof ArrayBuffer){var t=r.lib.WordArray,e=t.init;(t.init=function(t){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),(t instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)&&(t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength)),t instanceof Uint8Array){for(var i=t.byteLength,r=[],n=0;n<i;n++)r[n>>>2]|=t[n]<<24-n%4*8;e.call(this,r,i)}else e.apply(this,arguments)}).prototype=t}}(),r.lib.WordArray)},function(t,e,i){var r;t.exports=(r=i(36),function(){var t=r,e=t.lib.WordArray,i=t.enc;function n(t){return t<<8&4278255360|t>>>8&16711935}i.Utf16=i.Utf16BE={stringify:function(t){for(var e=t.words,i=t.sigBytes,r=[],n=0;n<i;n+=2){var o=e[n>>>2]>>>16-n%4*8&65535;r.push(String.fromCharCode(o))}return r.join("")},parse:function(t){for(var i=t.length,r=[],n=0;n<i;n++)r[n>>>1]|=t.charCodeAt(n)<<16-n%2*16;return e.create(r,2*i)}},i.Utf16LE={stringify:function(t){for(var e=t.words,i=t.sigBytes,r=[],o=0;o<i;o+=2){var h=n(e[o>>>2]>>>16-o%4*8&65535);r.push(String.fromCharCode(h))}return r.join("")},parse:function(t){for(var i=t.length,r=[],o=0;o<i;o++)r[o>>>1]|=n(t.charCodeAt(o)<<16-o%2*16);return e.create(r,2*i)}}}(),r.enc.Utf16)},function(t,e,i){var r,n,o,h,s,a;t.exports=(a=i(36),i(186),n=(r=a).lib.WordArray,o=r.algo,h=o.SHA256,s=o.SHA224=h.extend({_doReset:function(){this._hash=new n.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var t=h._doFinalize.call(this);return t.sigBytes-=4,t}}),r.SHA224=h._createHelper(s),r.HmacSHA224=h._createHmacHelper(s),a.SHA224)},function(t,e,i){var r,n,o,h,s,a,u,f;t.exports=(f=i(36),i(87),i(187),n=(r=f).x64,o=n.Word,h=n.WordArray,s=r.algo,a=s.SHA512,u=s.SHA384=a.extend({_doReset:function(){this._hash=new h.init([new o.init(3418070365,3238371032),new o.init(1654270250,914150663),new o.init(2438529370,812702999),new o.init(355462360,4144912697),new o.init(1731405415,4290775857),new o.init(2394180231,1750603025),new o.init(3675008525,1694076839),new o.init(1203062813,3204075428)])},_doFinalize:function(){var t=a._doFinalize.call(this);return t.sigBytes-=16,t}}),r.SHA384=a._createHelper(u),r.HmacSHA384=a._createHmacHelper(u),f.SHA384)},function(t,e,i){var r;t.exports=(r=i(36),i(87),function(t){var e=r,i=e.lib,n=i.WordArray,o=i.Hasher,h=e.x64.Word,s=e.algo,a=[],u=[],f=[];!function(){for(var t=1,e=0,i=0;i<24;i++){a[t+5*e]=(i+1)*(i+2)/2%64;var r=(2*t+3*e)%5;t=e%5,e=r}for(t=0;t<5;t++)for(e=0;e<5;e++)u[t+5*e]=e+(2*t+3*e)%5*5;for(var n=1,o=0;o<24;o++){for(var s=0,l=0,d=0;d<7;d++){if(1&n){var c=(1<<d)-1;c<32?l^=1<<c:s^=1<<c-32}128&n?n=n<<1^113:n<<=1}f[o]=h.create(s,l)}}();var l=[];!function(){for(var t=0;t<25;t++)l[t]=h.create()}();var d=s.SHA3=o.extend({cfg:o.cfg.extend({outputLength:512}),_doReset:function(){for(var t=this._state=[],e=0;e<25;e++)t[e]=new h.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(t,e){for(var i=this._state,r=this.blockSize/2,n=0;n<r;n++){var o=t[e+2*n],h=t[e+2*n+1];o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),h=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8),(B=i[n]).high^=h,B.low^=o}for(var s=0;s<24;s++){for(var d=0;d<5;d++){for(var c=0,p=0,m=0;m<5;m++)c^=(B=i[d+5*m]).high,p^=B.low;var v=l[d];v.high=c,v.low=p}for(d=0;d<5;d++){var g=l[(d+4)%5],b=l[(d+1)%5],y=b.high,w=b.low;for(c=g.high^(y<<1|w>>>31),p=g.low^(w<<1|y>>>31),m=0;m<5;m++)(B=i[d+5*m]).high^=c,B.low^=p}for(var M=1;M<25;M++){var _=(B=i[M]).high,S=B.low,k=a[M];k<32?(c=_<<k|S>>>32-k,p=S<<k|_>>>32-k):(c=S<<k-32|_>>>64-k,p=_<<k-32|S>>>64-k);var A=l[u[M]];A.high=c,A.low=p}var E=l[0],x=i[0];for(E.high=x.high,E.low=x.low,d=0;d<5;d++)for(m=0;m<5;m++){var B=i[M=d+5*m],R=l[M],I=l[(d+1)%5+5*m],T=l[(d+2)%5+5*m];B.high=R.high^~I.high&T.high,B.low=R.low^~I.low&T.low}B=i[0];var P=f[s];B.high^=P.high,B.low^=P.low}},_doFinalize:function(){var e=this._data,i=e.words,r=(this._nDataBytes,8*e.sigBytes),o=32*this.blockSize;i[r>>>5]|=1<<24-r%32,i[(t.ceil((r+1)/o)*o>>>5)-1]|=128,e.sigBytes=4*i.length,this._process();for(var h=this._state,s=this.cfg.outputLength/8,a=s/8,u=[],f=0;f<a;f++){var l=h[f],d=l.high,c=l.low;d=16711935&(d<<8|d>>>24)|4278255360&(d<<24|d>>>8),c=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8),u.push(c),u.push(d)}return new n.init(u,s)},clone:function(){for(var t=o.clone.call(this),e=t._state=this._state.slice(0),i=0;i<25;i++)e[i]=e[i].clone();return t}});e.SHA3=o._createHelper(d),e.HmacSHA3=o._createHmacHelper(d)}(Math),r.SHA3)},function(t,e,i){var r;t.exports=(r=i(36),
/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
function(t){var e=r,i=e.lib,n=i.WordArray,o=i.Hasher,h=e.algo,s=n.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),a=n.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),u=n.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),f=n.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),l=n.create([0,1518500249,1859775393,2400959708,2840853838]),d=n.create([1352829926,1548603684,1836072691,2053994217,0]),c=h.RIPEMD160=o.extend({_doReset:function(){this._hash=n.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var i=0;i<16;i++){var r=e+i,n=t[r];t[r]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8)}var o,h,c,w,M,_,S,k,A,E,x,B=this._hash.words,R=l.words,I=d.words,T=s.words,P=a.words,C=u.words,L=f.words;for(_=o=B[0],S=h=B[1],k=c=B[2],A=w=B[3],E=M=B[4],i=0;i<80;i+=1)x=o+t[e+T[i]]|0,x+=i<16?p(h,c,w)+R[0]:i<32?m(h,c,w)+R[1]:i<48?v(h,c,w)+R[2]:i<64?g(h,c,w)+R[3]:b(h,c,w)+R[4],x=(x=y(x|=0,C[i]))+M|0,o=M,M=w,w=y(c,10),c=h,h=x,x=_+t[e+P[i]]|0,x+=i<16?b(S,k,A)+I[0]:i<32?g(S,k,A)+I[1]:i<48?v(S,k,A)+I[2]:i<64?m(S,k,A)+I[3]:p(S,k,A)+I[4],x=(x=y(x|=0,L[i]))+E|0,_=E,E=A,A=y(k,10),k=S,S=x;x=B[1]+c+A|0,B[1]=B[2]+w+E|0,B[2]=B[3]+M+_|0,B[3]=B[4]+o+S|0,B[4]=B[0]+h+k|0,B[0]=x},_doFinalize:function(){var t=this._data,e=t.words,i=8*this._nDataBytes,r=8*t.sigBytes;e[r>>>5]|=128<<24-r%32,e[14+(r+64>>>9<<4)]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),t.sigBytes=4*(e.length+1),this._process();for(var n=this._hash,o=n.words,h=0;h<5;h++){var s=o[h];o[h]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8)}return n},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});function p(t,e,i){return t^e^i}function m(t,e,i){return t&e|~t&i}function v(t,e,i){return(t|~e)^i}function g(t,e,i){return t&i|e&~i}function b(t,e,i){return t^(e|~i)}function y(t,e){return t<<e|t>>>32-e}e.RIPEMD160=o._createHelper(c),e.HmacRIPEMD160=o._createHmacHelper(c)}(Math),r.RIPEMD160)},function(t,e,i){var r,n,o,h,s,a,u,f,l;t.exports=(l=i(36),i(114),i(115),n=(r=l).lib,o=n.Base,h=n.WordArray,s=r.algo,a=s.SHA1,u=s.HMAC,f=s.PBKDF2=o.extend({cfg:o.extend({keySize:4,hasher:a,iterations:1}),init:function(t){this.cfg=this.cfg.extend(t)},compute:function(t,e){for(var i=this.cfg,r=u.create(i.hasher,t),n=h.create(),o=h.create([1]),s=n.words,a=o.words,f=i.keySize,l=i.iterations;s.length<f;){var d=r.update(e).finalize(o);r.reset();for(var c=d.words,p=c.length,m=d,v=1;v<l;v++){m=r.finalize(m),r.reset();for(var g=m.words,b=0;b<p;b++)c[b]^=g[b]}n.concat(d),a[0]++}return n.sigBytes=4*f,n}}),r.PBKDF2=function(t,e,i){return f.create(i).compute(t,e)},l.PBKDF2)},function(t,e,i){var r;t.exports=(r=i(36),i(40),r.mode.CFB=function(){var t=r.lib.BlockCipherMode.extend();function e(t,e,i,r){var n,o=this._iv;o?(n=o.slice(0),this._iv=void 0):n=this._prevBlock,r.encryptBlock(n,0);for(var h=0;h<i;h++)t[e+h]^=n[h]}return t.Encryptor=t.extend({processBlock:function(t,i){var r=this._cipher,n=r.blockSize;e.call(this,t,i,n,r),this._prevBlock=t.slice(i,i+n)}}),t.Decryptor=t.extend({processBlock:function(t,i){var r=this._cipher,n=r.blockSize,o=t.slice(i,i+n);e.call(this,t,i,n,r),this._prevBlock=o}}),t}(),r.mode.CFB)},function(t,e,i){var r,n,o;t.exports=(o=i(36),i(40),o.mode.CTR=(r=o.lib.BlockCipherMode.extend(),n=r.Encryptor=r.extend({processBlock:function(t,e){var i=this._cipher,r=i.blockSize,n=this._iv,o=this._counter;n&&(o=this._counter=n.slice(0),this._iv=void 0);var h=o.slice(0);i.encryptBlock(h,0),o[r-1]=o[r-1]+1|0;for(var s=0;s<r;s++)t[e+s]^=h[s]}}),r.Decryptor=n,r),o.mode.CTR)},function(t,e,i){var r;t.exports=(r=i(36),i(40),
/** @preserve
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	 * derived from CryptoJS.mode.CTR
	 * Jan Hruby jhruby.web@gmail.com
	 */
r.mode.CTRGladman=function(){var t=r.lib.BlockCipherMode.extend();function e(t){if(255==(t>>24&255)){var e=t>>16&255,i=t>>8&255,r=255&t;255===e?(e=0,255===i?(i=0,255===r?r=0:++r):++i):++e,t=0,t+=e<<16,t+=i<<8,t+=r}else t+=1<<24;return t}var i=t.Encryptor=t.extend({processBlock:function(t,i){var r=this._cipher,n=r.blockSize,o=this._iv,h=this._counter;o&&(h=this._counter=o.slice(0),this._iv=void 0),function(t){0===(t[0]=e(t[0]))&&(t[1]=e(t[1]))}(h);var s=h.slice(0);r.encryptBlock(s,0);for(var a=0;a<n;a++)t[i+a]^=s[a]}});return t.Decryptor=i,t}(),r.mode.CTRGladman)},function(t,e,i){var r,n,o;t.exports=(o=i(36),i(40),o.mode.OFB=(r=o.lib.BlockCipherMode.extend(),n=r.Encryptor=r.extend({processBlock:function(t,e){var i=this._cipher,r=i.blockSize,n=this._iv,o=this._keystream;n&&(o=this._keystream=n.slice(0),this._iv=void 0),i.encryptBlock(o,0);for(var h=0;h<r;h++)t[e+h]^=o[h]}}),r.Decryptor=n,r),o.mode.OFB)},function(t,e,i){var r,n;t.exports=(n=i(36),i(40),n.mode.ECB=((r=n.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(t,e){this._cipher.encryptBlock(t,e)}}),r.Decryptor=r.extend({processBlock:function(t,e){this._cipher.decryptBlock(t,e)}}),r),n.mode.ECB)},function(t,e,i){var r;t.exports=(r=i(36),i(40),r.pad.AnsiX923={pad:function(t,e){var i=t.sigBytes,r=4*e,n=r-i%r,o=i+n-1;t.clamp(),t.words[o>>>2]|=n<<24-o%4*8,t.sigBytes+=n},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},r.pad.Ansix923)},function(t,e,i){var r;t.exports=(r=i(36),i(40),r.pad.Iso10126={pad:function(t,e){var i=4*e,n=i-t.sigBytes%i;t.concat(r.lib.WordArray.random(n-1)).concat(r.lib.WordArray.create([n<<24],1))},unpad:function(t){var e=255&t.words[t.sigBytes-1>>>2];t.sigBytes-=e}},r.pad.Iso10126)},function(t,e,i){var r;t.exports=(r=i(36),i(40),r.pad.Iso97971={pad:function(t,e){t.concat(r.lib.WordArray.create([2147483648],1)),r.pad.ZeroPadding.pad(t,e)},unpad:function(t){r.pad.ZeroPadding.unpad(t),t.sigBytes--}},r.pad.Iso97971)},function(t,e,i){var r;t.exports=(r=i(36),i(40),r.pad.ZeroPadding={pad:function(t,e){var i=4*e;t.clamp(),t.sigBytes+=i-(t.sigBytes%i||i)},unpad:function(t){var e=t.words,i=t.sigBytes-1;for(i=t.sigBytes-1;i>=0;i--)if(e[i>>>2]>>>24-i%4*8&255){t.sigBytes=i+1;break}}},r.pad.ZeroPadding)},function(t,e,i){var r;t.exports=(r=i(36),i(40),r.pad.NoPadding={pad:function(){},unpad:function(){}},r.pad.NoPadding)},function(t,e,i){var r,n,o,h;t.exports=(h=i(36),i(40),n=(r=h).lib.CipherParams,o=r.enc.Hex,r.format.Hex={stringify:function(t){return t.ciphertext.toString(o)},parse:function(t){var e=o.parse(t);return n.create({ciphertext:e})}},h.format.Hex)},function(t,e,i){var r;t.exports=(r=i(36),i(71),i(72),i(64),i(40),function(){var t=r,e=t.lib.BlockCipher,i=t.algo,n=[],o=[],h=[],s=[],a=[],u=[],f=[],l=[],d=[],c=[];!function(){for(var t=[],e=0;e<256;e++)t[e]=e<128?e<<1:e<<1^283;var i=0,r=0;for(e=0;e<256;e++){var p=r^r<<1^r<<2^r<<3^r<<4;p=p>>>8^255&p^99,n[i]=p,o[p]=i;var m=t[i],v=t[m],g=t[v],b=257*t[p]^16843008*p;h[i]=b<<24|b>>>8,s[i]=b<<16|b>>>16,a[i]=b<<8|b>>>24,u[i]=b,b=16843009*g^65537*v^257*m^16843008*i,f[p]=b<<24|b>>>8,l[p]=b<<16|b>>>16,d[p]=b<<8|b>>>24,c[p]=b,i?(i=m^t[t[t[g^m]]],r^=t[t[r]]):i=r=1}}();var p=[0,1,2,4,8,16,32,64,128,27,54],m=i.AES=e.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var t=this._keyPriorReset=this._key,e=t.words,i=t.sigBytes/4,r=4*((this._nRounds=i+6)+1),o=this._keySchedule=[],h=0;h<r;h++)h<i?o[h]=e[h]:(u=o[h-1],h%i?i>6&&h%i==4&&(u=n[u>>>24]<<24|n[u>>>16&255]<<16|n[u>>>8&255]<<8|n[255&u]):(u=n[(u=u<<8|u>>>24)>>>24]<<24|n[u>>>16&255]<<16|n[u>>>8&255]<<8|n[255&u],u^=p[h/i|0]<<24),o[h]=o[h-i]^u);for(var s=this._invKeySchedule=[],a=0;a<r;a++){if(h=r-a,a%4)var u=o[h];else u=o[h-4];s[a]=a<4||h<=4?u:f[n[u>>>24]]^l[n[u>>>16&255]]^d[n[u>>>8&255]]^c[n[255&u]]}}},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._keySchedule,h,s,a,u,n)},decryptBlock:function(t,e){var i=t[e+1];t[e+1]=t[e+3],t[e+3]=i,this._doCryptBlock(t,e,this._invKeySchedule,f,l,d,c,o),i=t[e+1],t[e+1]=t[e+3],t[e+3]=i},_doCryptBlock:function(t,e,i,r,n,o,h,s){for(var a=this._nRounds,u=t[e]^i[0],f=t[e+1]^i[1],l=t[e+2]^i[2],d=t[e+3]^i[3],c=4,p=1;p<a;p++){var m=r[u>>>24]^n[f>>>16&255]^o[l>>>8&255]^h[255&d]^i[c++],v=r[f>>>24]^n[l>>>16&255]^o[d>>>8&255]^h[255&u]^i[c++],g=r[l>>>24]^n[d>>>16&255]^o[u>>>8&255]^h[255&f]^i[c++],b=r[d>>>24]^n[u>>>16&255]^o[f>>>8&255]^h[255&l]^i[c++];u=m,f=v,l=g,d=b}m=(s[u>>>24]<<24|s[f>>>16&255]<<16|s[l>>>8&255]<<8|s[255&d])^i[c++],v=(s[f>>>24]<<24|s[l>>>16&255]<<16|s[d>>>8&255]<<8|s[255&u])^i[c++],g=(s[l>>>24]<<24|s[d>>>16&255]<<16|s[u>>>8&255]<<8|s[255&f])^i[c++],b=(s[d>>>24]<<24|s[u>>>16&255]<<16|s[f>>>8&255]<<8|s[255&l])^i[c++],t[e]=m,t[e+1]=v,t[e+2]=g,t[e+3]=b},keySize:8});t.AES=e._createHelper(m)}(),r.AES)},function(t,e,i){var r;t.exports=(r=i(36),i(71),i(72),i(64),i(40),function(){var t=r,e=t.lib,i=e.WordArray,n=e.BlockCipher,o=t.algo,h=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],s=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],a=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],u=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],f=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],l=o.DES=n.extend({_doReset:function(){for(var t=this._key.words,e=[],i=0;i<56;i++){var r=h[i]-1;e[i]=t[r>>>5]>>>31-r%32&1}for(var n=this._subKeys=[],o=0;o<16;o++){var u=n[o]=[],f=a[o];for(i=0;i<24;i++)u[i/6|0]|=e[(s[i]-1+f)%28]<<31-i%6,u[4+(i/6|0)]|=e[28+(s[i+24]-1+f)%28]<<31-i%6;for(u[0]=u[0]<<1|u[0]>>>31,i=1;i<7;i++)u[i]=u[i]>>>4*(i-1)+3;u[7]=u[7]<<5|u[7]>>>27}var l=this._invSubKeys=[];for(i=0;i<16;i++)l[i]=n[15-i]},encryptBlock:function(t,e){this._doCryptBlock(t,e,this._subKeys)},decryptBlock:function(t,e){this._doCryptBlock(t,e,this._invSubKeys)},_doCryptBlock:function(t,e,i){this._lBlock=t[e],this._rBlock=t[e+1],d.call(this,4,252645135),d.call(this,16,65535),c.call(this,2,858993459),c.call(this,8,16711935),d.call(this,1,1431655765);for(var r=0;r<16;r++){for(var n=i[r],o=this._lBlock,h=this._rBlock,s=0,a=0;a<8;a++)s|=u[a][((h^n[a])&f[a])>>>0];this._lBlock=h,this._rBlock=o^s}var l=this._lBlock;this._lBlock=this._rBlock,this._rBlock=l,d.call(this,1,1431655765),c.call(this,8,16711935),c.call(this,2,858993459),d.call(this,16,65535),d.call(this,4,252645135),t[e]=this._lBlock,t[e+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function d(t,e){var i=(this._lBlock>>>t^this._rBlock)&e;this._rBlock^=i,this._lBlock^=i<<t}function c(t,e){var i=(this._rBlock>>>t^this._lBlock)&e;this._lBlock^=i,this._rBlock^=i<<t}t.DES=n._createHelper(l);var p=o.TripleDES=n.extend({_doReset:function(){var t=this._key.words;if(2!==t.length&&4!==t.length&&t.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var e=t.slice(0,2),r=t.length<4?t.slice(0,2):t.slice(2,4),n=t.length<6?t.slice(0,2):t.slice(4,6);this._des1=l.createEncryptor(i.create(e)),this._des2=l.createEncryptor(i.create(r)),this._des3=l.createEncryptor(i.create(n))},encryptBlock:function(t,e){this._des1.encryptBlock(t,e),this._des2.decryptBlock(t,e),this._des3.encryptBlock(t,e)},decryptBlock:function(t,e){this._des3.decryptBlock(t,e),this._des2.encryptBlock(t,e),this._des1.decryptBlock(t,e)},keySize:6,ivSize:2,blockSize:2});t.TripleDES=n._createHelper(p)}(),r.TripleDES)},function(t,e,i){var r;t.exports=(r=i(36),i(71),i(72),i(64),i(40),function(){var t=r,e=t.lib.StreamCipher,i=t.algo,n=i.RC4=e.extend({_doReset:function(){for(var t=this._key,e=t.words,i=t.sigBytes,r=this._S=[],n=0;n<256;n++)r[n]=n;n=0;for(var o=0;n<256;n++){var h=n%i,s=e[h>>>2]>>>24-h%4*8&255;o=(o+r[n]+s)%256;var a=r[n];r[n]=r[o],r[o]=a}this._i=this._j=0},_doProcessBlock:function(t,e){t[e]^=o.call(this)},keySize:8,ivSize:0});function o(){for(var t=this._S,e=this._i,i=this._j,r=0,n=0;n<4;n++){i=(i+t[e=(e+1)%256])%256;var o=t[e];t[e]=t[i],t[i]=o,r|=t[(t[e]+t[i])%256]<<24-8*n}return this._i=e,this._j=i,r}t.RC4=e._createHelper(n);var h=i.RC4Drop=n.extend({cfg:n.cfg.extend({drop:192}),_doReset:function(){n._doReset.call(this);for(var t=this.cfg.drop;t>0;t--)o.call(this)}});t.RC4Drop=e._createHelper(h)}(),r.RC4)},function(t,e,i){var r;t.exports=(r=i(36),i(71),i(72),i(64),i(40),function(){var t=r,e=t.lib.StreamCipher,i=t.algo,n=[],o=[],h=[],s=i.Rabbit=e.extend({_doReset:function(){for(var t=this._key.words,e=this.cfg.iv,i=0;i<4;i++)t[i]=16711935&(t[i]<<8|t[i]>>>24)|4278255360&(t[i]<<24|t[i]>>>8);var r=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],n=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];for(this._b=0,i=0;i<4;i++)a.call(this);for(i=0;i<8;i++)n[i]^=r[i+4&7];if(e){var o=e.words,h=o[0],s=o[1],u=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8),f=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),l=u>>>16|4294901760&f,d=f<<16|65535&u;for(n[0]^=u,n[1]^=l,n[2]^=f,n[3]^=d,n[4]^=u,n[5]^=l,n[6]^=f,n[7]^=d,i=0;i<4;i++)a.call(this)}},_doProcessBlock:function(t,e){var i=this._X;a.call(this),n[0]=i[0]^i[5]>>>16^i[3]<<16,n[1]=i[2]^i[7]>>>16^i[5]<<16,n[2]=i[4]^i[1]>>>16^i[7]<<16,n[3]=i[6]^i[3]>>>16^i[1]<<16;for(var r=0;r<4;r++)n[r]=16711935&(n[r]<<8|n[r]>>>24)|4278255360&(n[r]<<24|n[r]>>>8),t[e+r]^=n[r]},blockSize:4,ivSize:2});function a(){for(var t=this._X,e=this._C,i=0;i<8;i++)o[i]=e[i];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<o[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<o[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<o[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<o[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<o[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<o[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<o[6]>>>0?1:0)|0,this._b=e[7]>>>0<o[7]>>>0?1:0,i=0;i<8;i++){var r=t[i]+e[i],n=65535&r,s=r>>>16,a=((n*n>>>17)+n*s>>>15)+s*s,u=((4294901760&r)*r|0)+((65535&r)*r|0);h[i]=a^u}t[0]=h[0]+(h[7]<<16|h[7]>>>16)+(h[6]<<16|h[6]>>>16)|0,t[1]=h[1]+(h[0]<<8|h[0]>>>24)+h[7]|0,t[2]=h[2]+(h[1]<<16|h[1]>>>16)+(h[0]<<16|h[0]>>>16)|0,t[3]=h[3]+(h[2]<<8|h[2]>>>24)+h[1]|0,t[4]=h[4]+(h[3]<<16|h[3]>>>16)+(h[2]<<16|h[2]>>>16)|0,t[5]=h[5]+(h[4]<<8|h[4]>>>24)+h[3]|0,t[6]=h[6]+(h[5]<<16|h[5]>>>16)+(h[4]<<16|h[4]>>>16)|0,t[7]=h[7]+(h[6]<<8|h[6]>>>24)+h[5]|0}t.Rabbit=e._createHelper(s)}(),r.Rabbit)},function(t,e,i){var r;t.exports=(r=i(36),i(71),i(72),i(64),i(40),function(){var t=r,e=t.lib.StreamCipher,i=t.algo,n=[],o=[],h=[],s=i.RabbitLegacy=e.extend({_doReset:function(){var t=this._key.words,e=this.cfg.iv,i=this._X=[t[0],t[3]<<16|t[2]>>>16,t[1],t[0]<<16|t[3]>>>16,t[2],t[1]<<16|t[0]>>>16,t[3],t[2]<<16|t[1]>>>16],r=this._C=[t[2]<<16|t[2]>>>16,4294901760&t[0]|65535&t[1],t[3]<<16|t[3]>>>16,4294901760&t[1]|65535&t[2],t[0]<<16|t[0]>>>16,4294901760&t[2]|65535&t[3],t[1]<<16|t[1]>>>16,4294901760&t[3]|65535&t[0]];this._b=0;for(var n=0;n<4;n++)a.call(this);for(n=0;n<8;n++)r[n]^=i[n+4&7];if(e){var o=e.words,h=o[0],s=o[1],u=16711935&(h<<8|h>>>24)|4278255360&(h<<24|h>>>8),f=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),l=u>>>16|4294901760&f,d=f<<16|65535&u;for(r[0]^=u,r[1]^=l,r[2]^=f,r[3]^=d,r[4]^=u,r[5]^=l,r[6]^=f,r[7]^=d,n=0;n<4;n++)a.call(this)}},_doProcessBlock:function(t,e){var i=this._X;a.call(this),n[0]=i[0]^i[5]>>>16^i[3]<<16,n[1]=i[2]^i[7]>>>16^i[5]<<16,n[2]=i[4]^i[1]>>>16^i[7]<<16,n[3]=i[6]^i[3]>>>16^i[1]<<16;for(var r=0;r<4;r++)n[r]=16711935&(n[r]<<8|n[r]>>>24)|4278255360&(n[r]<<24|n[r]>>>8),t[e+r]^=n[r]},blockSize:4,ivSize:2});function a(){for(var t=this._X,e=this._C,i=0;i<8;i++)o[i]=e[i];for(e[0]=e[0]+1295307597+this._b|0,e[1]=e[1]+3545052371+(e[0]>>>0<o[0]>>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0<o[1]>>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0<o[2]>>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0<o[3]>>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0<o[4]>>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0<o[5]>>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0<o[6]>>>0?1:0)|0,this._b=e[7]>>>0<o[7]>>>0?1:0,i=0;i<8;i++){var r=t[i]+e[i],n=65535&r,s=r>>>16,a=((n*n>>>17)+n*s>>>15)+s*s,u=((4294901760&r)*r|0)+((65535&r)*r|0);h[i]=a^u}t[0]=h[0]+(h[7]<<16|h[7]>>>16)+(h[6]<<16|h[6]>>>16)|0,t[1]=h[1]+(h[0]<<8|h[0]>>>24)+h[7]|0,t[2]=h[2]+(h[1]<<16|h[1]>>>16)+(h[0]<<16|h[0]>>>16)|0,t[3]=h[3]+(h[2]<<8|h[2]>>>24)+h[1]|0,t[4]=h[4]+(h[3]<<16|h[3]>>>16)+(h[2]<<16|h[2]>>>16)|0,t[5]=h[5]+(h[4]<<8|h[4]>>>24)+h[3]|0,t[6]=h[6]+(h[5]<<16|h[5]>>>16)+(h[4]<<16|h[4]>>>16)|0,t[7]=h[7]+(h[6]<<8|h[6]>>>24)+h[5]|0}t.RabbitLegacy=e._createHelper(s)}(),r.RabbitLegacy)}])]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9jb3JlLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9jaXBoZXItY29yZS5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvbWluaW1hbGlzdGljLWFzc2VydC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC91dGlscy5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NpcGhlci1iYXNlL2luZGV4LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9ldnBrZGYuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvcmFuZG9tYnl0ZXMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZXJyb3JzLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9zaGEuanMvaGFzaC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvZW5jLWJhc2U2NC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvbWQ1LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2J1ZmZlci14b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9hZXMuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvZXZwX2J5dGVzdG9rZXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tanMveDY0LWNvcmUuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvbWQ1LmpzL2luZGV4LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9lbmQtb2Ytc3RyZWFtLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3JpcGVtZDE2MC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9zaGEuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2NpcGhlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9icm93c2VyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2luZGV4LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2Jyb3JhbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1yc2EvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZXMuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9zYWZlci1idWZmZXIvc2FmZXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL25vZGUuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL3JlcG9ydGVyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvY29uc3RhbnRzL2Rlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9zaGExLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9obWFjLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2hhc2gtYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyNTYuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyZWF0ZS1obWFjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbWQ1LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3Bia2RmMi9icm93c2VyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3Bia2RmMi9saWIvcHJlY29uZGl0aW9uLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3Bia2RmMi9saWIvZGVmYXVsdC1lbmNvZGluZy5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL3N5bmMtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL3RvLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9kZXMuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY3RyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2luY3IzMi5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9hdXRoQ2lwaGVyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL3N0cmVhbUNpcGhlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9saWIvZ2VuZXJhdGVQcmltZS5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL21pbGxlci1yYWJpbi9saWIvbXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvbWluaW1hbGlzdGljLWNyeXB0by11dGlscy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2luZGV4LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8yNTYuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvNTEyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2FzbjEuanMvbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2VuY29kZXJzL2luZGV4LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvZGVyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9kZXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbWdmLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3hvci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC93aXRoUHVibGljLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9zaGEyNTYuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvYnVmZmVyX2xpc3QuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2FzeW5jX2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9mcm9tLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9waXBlbGluZS5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGExLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEyMjQuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvc2hhLmpzL3NoYTM4NC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS93cml0YWJsZS1icm93c2VyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvc3RyZWFtLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcmVhdGUtaG1hYy9sZWdhY3kuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2FsZ29zLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3Bia2RmMi9saWIvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9jYmMuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvZWRlLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2VuY3J5cHRlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9lY2IuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2JjLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYi5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmI4LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYjEuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvb2ZiLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2doYXNoLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9tb2Rlcy5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9icm93c2VyLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL21pbGxlci1yYWJpbi9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9kaC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYnJvd3Nlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYnJvd3Nlci9zaWduLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktcnNhL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL3Nob3J0LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9tb250LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9lZHdhcmRzLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzEuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMjI0LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzM4NC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3JpcGVtZC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2htYWMuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL3ByZWNvbXB1dGVkL3NlY3AyNTZrMS5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvaG1hYy1kcmJnL2xpYi9obWFjLWRyYmcuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2tleS5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMvc2lnbmF0dXJlLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2Eva2V5LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9hc24xLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYXBpLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvcGVtLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvcGVtLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2NlcnRpZmljYXRlLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvZml4UHJvYy5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYnJvd3Nlci92ZXJpZnkuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcmVhdGUtZWNkaC9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvcHVibGljRW5jcnlwdC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9wcml2YXRlRGVjcnlwdC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9yYW5kb21maWxsL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL2xpYi10eXBlZGFycmF5cy5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvZW5jLXV0ZjE2LmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9zaGEyMjQuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3NoYTM4NC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvc2hhMy5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvcmlwZW1kMTYwLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9wYmtkZjIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL21vZGUtY2ZiLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9tb2RlLWN0ci5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvbW9kZS1jdHItZ2xhZG1hbi5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvbW9kZS1vZmIuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL21vZGUtZWNiLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9wYWQtYW5zaXg5MjMuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3BhZC1pc28xMDEyNi5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvcGFkLWlzbzk3OTcxLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9wYWQtemVyb3BhZGRpbmcuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3BhZC1ub3BhZGRpbmcuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL2Zvcm1hdC1oZXguanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL2Flcy5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvdHJpcGxlZGVzLmpzIiwid2VicGFjazovLy9EOi9Qcm9qZWN0cy9TeXN0ZW1DZW50ZXIvU291cmNlL0FwcGxpY2F0aW9ucy9TeXN0ZW1DZW50ZXIvbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9yYzQuanMiLCJ3ZWJwYWNrOi8vL0Q6L1Byb2plY3RzL1N5c3RlbUNlbnRlci9Tb3VyY2UvQXBwbGljYXRpb25zL1N5c3RlbUNlbnRlci9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL3JhYmJpdC5qcyIsIndlYnBhY2s6Ly8vRDovUHJvamVjdHMvU3lzdGVtQ2VudGVyL1NvdXJjZS9BcHBsaWNhdGlvbnMvU3lzdGVtQ2VudGVyL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvcmFiYml0LWxlZ2FjeS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJjcmVhdGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJUZW1wQ3RvciIsImJ1ZmZlciIsIkJ1ZmZlciIsImNvcHlQcm9wcyIsInNyYyIsImRzdCIsImtleSIsIlNhZmVCdWZmZXIiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwibGVuZ3RoIiwiZnJvbSIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJUeXBlRXJyb3IiLCJzaXplIiwiZmlsbCIsImVuY29kaW5nIiwiYnVmIiwidW5kZWZpbmVkIiwiU2xvd0J1ZmZlciIsIkNyeXB0b0pTIiwiTWF0aCIsImNyeXB0byIsIndpbmRvdyIsIm1zQ3J5cHRvIiwiZ2xvYmFsIiwiZXJyIiwiY3J5cHRvU2VjdXJlUmFuZG9tSW50IiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDMyQXJyYXkiLCJyYW5kb21CeXRlcyIsInJlYWRJbnQzMkxFIiwiRXJyb3IiLCJGIiwib2JqIiwic3VidHlwZSIsIkMiLCJDX2xpYiIsImxpYiIsIkJhc2UiLCJleHRlbmQiLCJvdmVycmlkZXMiLCJ0aGlzIiwibWl4SW4iLCJoYXNPd25Qcm9wZXJ0eSIsImluaXQiLCIkc3VwZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsImluc3RhbmNlIiwicHJvcGVydGllcyIsInByb3BlcnR5TmFtZSIsInRvU3RyaW5nIiwiY2xvbmUiLCJXb3JkQXJyYXkiLCJ3b3JkcyIsInNpZ0J5dGVzIiwiZW5jb2RlciIsIkhleCIsInN0cmluZ2lmeSIsImNvbmNhdCIsIndvcmRBcnJheSIsInRoaXNXb3JkcyIsInRoYXRXb3JkcyIsInRoaXNTaWdCeXRlcyIsInRoYXRTaWdCeXRlcyIsImNsYW1wIiwiaSIsInRoYXRCeXRlIiwiY2VpbCIsImNhbGwiLCJzbGljZSIsInJhbmRvbSIsIm5CeXRlcyIsInB1c2giLCJDX2VuYyIsImVuYyIsImhleENoYXJzIiwiYml0ZSIsImpvaW4iLCJwYXJzZSIsImhleFN0ciIsImhleFN0ckxlbmd0aCIsInBhcnNlSW50Iiwic3Vic3RyIiwiTGF0aW4xIiwibGF0aW4xQ2hhcnMiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJsYXRpbjFTdHIiLCJsYXRpbjFTdHJMZW5ndGgiLCJjaGFyQ29kZUF0IiwiVXRmOCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsImUiLCJ1dGY4U3RyIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJCdWZmZXJlZEJsb2NrQWxnb3JpdGhtIiwicmVzZXQiLCJfZGF0YSIsIl9uRGF0YUJ5dGVzIiwiX2FwcGVuZCIsImRhdGEiLCJfcHJvY2VzcyIsImRvRmx1c2giLCJwcm9jZXNzZWRXb3JkcyIsImRhdGFXb3JkcyIsImRhdGFTaWdCeXRlcyIsImJsb2NrU2l6ZSIsIm5CbG9ja3NSZWFkeSIsIm5Xb3Jkc1JlYWR5IiwibWF4IiwiX21pbkJ1ZmZlclNpemUiLCJuQnl0ZXNSZWFkeSIsIm1pbiIsIm9mZnNldCIsIl9kb1Byb2Nlc3NCbG9jayIsInNwbGljZSIsIkNfYWxnbyIsIkhhc2hlciIsImNmZyIsIl9kb1Jlc2V0IiwidXBkYXRlIiwibWVzc2FnZVVwZGF0ZSIsImZpbmFsaXplIiwiX2RvRmluYWxpemUiLCJfY3JlYXRlSGVscGVyIiwiaGFzaGVyIiwibWVzc2FnZSIsIl9jcmVhdGVIbWFjSGVscGVyIiwiSE1BQyIsImFsZ28iLCJCYXNlNjQiLCJFdnBLREYiLCJDaXBoZXIiLCJDX21vZGUiLCJCbG9ja0NpcGhlck1vZGUiLCJDQkMiLCJQa2NzNyIsIkNpcGhlclBhcmFtcyIsIk9wZW5TU0xGb3JtYXR0ZXIiLCJTZXJpYWxpemFibGVDaXBoZXIiLCJPcGVuU1NMS2RmIiwiUGFzc3dvcmRCYXNlZENpcGhlciIsImNyZWF0ZUVuY3J5cHRvciIsIl9FTkNfWEZPUk1fTU9ERSIsImNyZWF0ZURlY3J5cHRvciIsIl9ERUNfWEZPUk1fTU9ERSIsInhmb3JtTW9kZSIsIl94Zm9ybU1vZGUiLCJfa2V5IiwicHJvY2VzcyIsImRhdGFVcGRhdGUiLCJrZXlTaXplIiwiaXZTaXplIiwic2VsZWN0Q2lwaGVyU3RyYXRlZ3kiLCJjaXBoZXIiLCJlbmNyeXB0IiwiZGVjcnlwdCIsImNpcGhlcnRleHQiLCJTdHJlYW1DaXBoZXIiLCJtb2RlIiwiaXYiLCJFbmNyeXB0b3IiLCJEZWNyeXB0b3IiLCJfY2lwaGVyIiwiX2l2IiwieG9yQmxvY2siLCJibG9jayIsIl9wcmV2QmxvY2siLCJwcm9jZXNzQmxvY2siLCJlbmNyeXB0QmxvY2siLCJ0aGlzQmxvY2siLCJkZWNyeXB0QmxvY2siLCJwYWQiLCJibG9ja1NpemVCeXRlcyIsIm5QYWRkaW5nQnl0ZXMiLCJwYWRkaW5nV29yZCIsInBhZGRpbmdXb3JkcyIsInBhZGRpbmciLCJ1bnBhZCIsIkJsb2NrQ2lwaGVyIiwibW9kZUNyZWF0b3IiLCJfbW9kZSIsIl9fY3JlYXRvciIsImZpbmFsUHJvY2Vzc2VkQmxvY2tzIiwiY2lwaGVyUGFyYW1zIiwiZm9ybWF0dGVyIiwiZm9ybWF0IiwiT3BlblNTTCIsInNhbHQiLCJvcGVuU1NMU3RyIiwiY2lwaGVydGV4dFdvcmRzIiwiZW5jcnlwdG9yIiwiY2lwaGVyQ2ZnIiwiYWxnb3JpdGhtIiwiX3BhcnNlIiwia2RmIiwiZXhlY3V0ZSIsInBhc3N3b3JkIiwiY29tcHV0ZSIsImRlcml2ZWRQYXJhbXMiLCJiYXNlNjQiLCJpZWVlNzU0IiwiaXNBcnJheSIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiX19wcm90b19fIiwiQXJyYXlCdWZmZXIiLCJhcnJheSIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsInN0cmluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsImZyb21TdHJpbmciLCJpc0J1ZmZlciIsImxlbiIsImNoZWNrZWQiLCJjb3B5IiwidmFsIiwidHlwZSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInNsb3dUb1N0cmluZyIsInN0YXJ0IiwiZW5kIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiIiwibiIsIm0iLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImlzTmFOIiwiYXJyYXlJbmRleE9mIiwiaW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJoZXhXcml0ZSIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwiYyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJTeW1ib2wiLCJzcGVjaWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwiYSIsIngiLCJ5IiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJtYXRjaCIsInRhcmdldCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiQXJyYXkiLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsInNldCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInJlcGxhY2UiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJhc3NlcnQiLCJtc2ciLCJlcXVhbCIsImwiLCJyIiwidXRpbHMiLCJCTiIsIm1pbkFzc2VydCIsIm1pblV0aWxzIiwidG9BcnJheSIsInplcm8yIiwiZW5jb2RlIiwiZ2V0TkFGIiwibnVtIiwidyIsImJpdHMiLCJuYWYiLCJiaXRMZW5ndGgiLCJ3cyIsImsiLCJ6IiwibW9kIiwiYW5kbG4iLCJpc09kZCIsImlzdWJuIiwiaXVzaHJuIiwiZ2V0SlNGIiwiazEiLCJrMiIsImpzZiIsImQxIiwiZDIiLCJjbXBuIiwidTEiLCJ1MiIsIm04IiwibTE0IiwibTI0IiwiY2FjaGVkUHJvcGVydHkiLCJuYW1lIiwiY29tcHV0ZXIiLCJwYXJzZUJ5dGVzIiwiaW50RnJvbUxFIiwiaW5oZXJpdHMiLCJpc1N1cnJvZ2F0ZVBhaXIiLCJodG9ubCIsIndvcmQiLCJ6ZXJvOCIsInAiLCJ0b0hleDMyIiwiZW5kaWFuIiwiam9pbjMyIiwic3BsaXQzMiIsInJvdHIzMiIsInJvdGwzMiIsInN1bTMyIiwic3VtMzJfMyIsInN1bTMyXzQiLCJkIiwic3VtMzJfNSIsInN1bTY0IiwiYWgiLCJhbCIsImJoIiwic3VtNjRfaGkiLCJibCIsInN1bTY0X2xvIiwic3VtNjRfNF9oaSIsImNoIiwiY2wiLCJkaCIsImRsIiwiY2FycnkiLCJzdW02NF80X2xvIiwic3VtNjRfNV9oaSIsImVoIiwiZWwiLCJzdW02NF81X2xvIiwicm90cjY0X2hpIiwicm90cjY0X2xvIiwic2hyNjRfaGkiLCJzaHI2NF9sbyIsIm51bWJlciIsImJhc2UiLCJpc0JOIiwibmVnYXRpdmUiLCJyZWQiLCJfaW5pdCIsIndvcmRTaXplIiwicGFyc2VIZXgiLCJwYXJzZUJhc2UiLCJsZWZ0IiwicmlnaHQiLCJjbXAiLCJfaW5pdE51bWJlciIsIl9pbml0QXJyYXkiLCJfcGFyc2VIZXgiLCJfcGFyc2VCYXNlIiwic3RyaXAiLCJvZmYiLCJsaW1iTGVuIiwibGltYlBvdyIsInRvdGFsIiwiaW11bG4iLCJfaWFkZG4iLCJkZXN0IiwiX2V4cGFuZCIsIl9ub3JtU2lnbiIsInplcm9zIiwiZ3JvdXBTaXplcyIsImdyb3VwQmFzZXMiLCJzbWFsbE11bFRvIiwic2VsZiIsIm5jYXJyeSIsInJ3b3JkIiwibWF4SiIsImdyb3VwU2l6ZSIsImdyb3VwQmFzZSIsImlzWmVybyIsIm1vZG4iLCJpZGl2biIsInRvTnVtYmVyIiwidG9CdWZmZXIiLCJ0b0FycmF5TGlrZSIsIkFycmF5VHlwZSIsInJlcUxlbmd0aCIsInEiLCJjbHozMiIsIl9jb3VudEJpdHMiLCJ0IiwiX3plcm9CaXRzIiwiemVyb0JpdHMiLCJ0b1R3b3MiLCJ3aWR0aCIsImFicyIsImlub3RuIiwiaWFkZG4iLCJmcm9tVHdvcyIsInRlc3RuIiwibm90biIsImluZWciLCJpc05lZyIsIm5lZyIsIml1b3IiLCJpb3IiLCJvciIsInVvciIsIml1YW5kIiwiaWFuZCIsImFuZCIsInVhbmQiLCJpdXhvciIsIml4b3IiLCJ4b3IiLCJ1eG9yIiwiYnl0ZXNOZWVkZWQiLCJiaXRzTGVmdCIsInNldG4iLCJiaXQiLCJ3Yml0IiwiaWFkZCIsImlzdWIiLCJhZGQiLCJjb21iMTBNdWxUbyIsIm1pZCIsIm8iLCJhMCIsImFsMCIsImFoMCIsImExIiwiYWwxIiwiYWgxIiwiYTIiLCJhbDIiLCJhaDIiLCJhMyIsImFsMyIsImFoMyIsImE0IiwiYWw0IiwiYWg0IiwiYTUiLCJhbDUiLCJhaDUiLCJhNiIsImFsNiIsImFoNiIsImE3IiwiYWw3IiwiYWg3IiwiYTgiLCJhbDgiLCJhaDgiLCJhOSIsImFsOSIsImFoOSIsImIwIiwiYmwwIiwiYmgwIiwiYjEiLCJibDEiLCJiaDEiLCJiMiIsImJsMiIsImJoMiIsImIzIiwiYmwzIiwiYmgzIiwiYjQiLCJibDQiLCJiaDQiLCJiNSIsImJsNSIsImJoNSIsImI2IiwiYmw2IiwiYmg2IiwiYjciLCJibDciLCJiaDciLCJiOCIsImJsOCIsImJoOCIsImI5IiwiYmw5IiwiYmg5IiwidzAiLCJpbXVsIiwidzEiLCJ3MiIsInczIiwidzQiLCJ3NSIsInc2IiwidzciLCJ3OCIsInc5IiwidzEwIiwidzExIiwidzEyIiwidzEzIiwidzE0IiwidzE1IiwidzE2IiwidzE3IiwidzE4IiwianVtYm9NdWxUbyIsIkZGVE0iLCJtdWxwIiwibXVsVG8iLCJobmNhcnJ5IiwiYmlnTXVsVG8iLCJtYWtlUkJUIiwiTiIsInJldkJpbiIsInJiIiwicGVybXV0ZSIsInJidCIsInJ3cyIsIml3cyIsInJ0d3MiLCJpdHdzIiwidHJhbnNmb3JtIiwicyIsInJ0d2RmIiwiY29zIiwiUEkiLCJpdHdkZiIsInNpbiIsInJ0d2RmXyIsIml0d2RmXyIsInJlIiwiaWUiLCJybyIsImlvIiwicngiLCJndWVzc0xlbjEzYiIsIm9kZCIsImNvbmp1Z2F0ZSIsIm5vcm1hbGl6ZTEzYiIsInJvdW5kIiwiY29udmVydDEzYiIsInN0dWIiLCJwaCIsIl8iLCJyd3N0IiwiaXdzdCIsIm5yd3MiLCJucndzdCIsIm5pd3N0Iiwicm13cyIsIm11bGYiLCJtdWxuIiwic3FyIiwiaXNxciIsInRvQml0QXJyYXkiLCJpdXNobG4iLCJjYXJyeU1hc2siLCJuZXdDYXJyeSIsImlzaGxuIiwiaGludCIsImV4dGVuZGVkIiwiaCIsIm1hc2siLCJtYXNrZWRXb3JkcyIsImlzaHJuIiwic2hsbiIsInVzaGxuIiwic2hybiIsInVzaHJuIiwiaW1hc2tuIiwibWFza24iLCJhZGRuIiwic3VibiIsImlhYnMiLCJfaXNobG5zdWJtdWwiLCJzaGlmdCIsIl93b3JkRGl2IiwiYmhpIiwiZGlmZiIsInFqIiwiZGl2IiwiZGl2bW9kIiwicG9zaXRpdmUiLCJkaXZuIiwidW1vZCIsImRpdlJvdW5kIiwiZG0iLCJoYWxmIiwicjIiLCJhY2MiLCJlZ2NkIiwiQSIsIkIiLCJEIiwiZyIsImlzRXZlbiIsInlwIiwieHAiLCJpbSIsImptIiwiZ2NkIiwiX2ludm1wIiwieDEiLCJ4MiIsImRlbHRhIiwiaW52bSIsImJpbmNuIiwidWNtcCIsImd0biIsImd0IiwiZ3RlbiIsImd0ZSIsImx0biIsImx0IiwibHRlbiIsImx0ZSIsImVxbiIsImVxIiwiUmVkIiwidG9SZWQiLCJjdHgiLCJjb252ZXJ0VG8iLCJfZm9yY2VSZWQiLCJmcm9tUmVkIiwiY29udmVydEZyb20iLCJmb3JjZVJlZCIsInJlZEFkZCIsInJlZElBZGQiLCJyZWRTdWIiLCJyZWRJU3ViIiwicmVkU2hsIiwic2hsIiwicmVkTXVsIiwiX3ZlcmlmeTIiLCJyZWRJTXVsIiwicmVkU3FyIiwiX3ZlcmlmeTEiLCJyZWRJU3FyIiwicmVkU3FydCIsInNxcnQiLCJyZWRJbnZtIiwicmVkTmVnIiwicmVkUG93IiwicHJpbWVzIiwiazI1NiIsInAyMjQiLCJwMTkyIiwicDI1NTE5IiwiTVByaW1lIiwidG1wIiwiX3RtcCIsIksyNTYiLCJQMjI0IiwiUDE5MiIsIlAyNTUxOSIsInByaW1lIiwiX3ByaW1lIiwiTW9udCIsImltb2QiLCJyaW52IiwibWludiIsImlyZWR1Y2UiLCJybGVuIiwic3BsaXQiLCJpbXVsSyIsIl9zdHJpcCIsImlucHV0Iiwib3V0cHV0Iiwib3V0TGVuIiwicHJldiIsIm5leHQiLCJtb2QzIiwib25lIiwibk9uZSIsImxwb3ciLCJpbnYiLCJ3bmQiLCJjdXJyZW50IiwiY3VycmVudExlbiIsIm1vbnQiLCJ1IiwiVHJhbnNmb3JtIiwiU3RyaW5nRGVjb2RlciIsIkNpcGhlckJhc2UiLCJoYXNoTW9kZSIsIl9maW5hbE9yRGlnZXN0IiwiZmluYWwiLCJfZmluYWwiLCJfX2ZpbmFsIiwiX2RlY29kZXIiLCJfZW5jb2RpbmciLCJpbnB1dEVuYyIsIm91dHB1dEVuYyIsIm91dERhdGEiLCJfdXBkYXRlIiwiX3RvU3RyaW5nIiwic2V0QXV0b1BhZGRpbmciLCJnZXRBdXRoVGFnIiwic2V0QXV0aFRhZyIsInNldEFBRCIsIl90cmFuc2Zvcm0iLCJfZmx1c2giLCJkb25lIiwiZmluIiwicG5hIiwib2JqZWN0S2V5cyIsImtleXMiLCJEdXBsZXgiLCJ1dGlsIiwiUmVhZGFibGUiLCJXcml0YWJsZSIsInYiLCJtZXRob2QiLCJvcHRpb25zIiwicmVhZGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25jZSIsIm9uZW5kIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRlZCIsIm5leHRUaWNrIiwib25FbmROVCIsImdldCIsImhpZ2hXYXRlck1hcmsiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIl9kZXN0cm95IiwiY2IiLCJNRDUiLCJpdGVyYXRpb25zIiwiZGVyaXZlZEtleSIsImRlcml2ZWRLZXlXb3JkcyIsImdlbmVyYXRlZCIsImNvZGVzIiwiY3JlYXRlRXJyb3JUeXBlIiwiTm9kZUVycm9yIiwiX0Jhc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJnZXRNZXNzYWdlIiwib25lT2YiLCJleHBlY3RlZCIsInRoaW5nIiwibWFwIiwiZGV0ZXJtaW5lciIsInNlYXJjaCIsInRoaXNfbGVuIiwic3Vic3RyaW5nIiwiZW5kc1dpdGgiLCJnZXRCdWZmZXIiLCJIYXNoIiwiZmluYWxTaXplIiwiX2Jsb2NrIiwiX2ZpbmFsU2l6ZSIsIl9ibG9ja1NpemUiLCJfbGVuIiwiYWNjdW0iLCJhc3NpZ25lZCIsInJlbWFpbmRlciIsImRpZ2VzdCIsInJlbSIsImxvd0JpdHMiLCJoaWdoQml0cyIsImhhc2giLCJfaGFzaCIsIl9tYXAiLCJiYXNlNjRDaGFycyIsInRyaXBsZXQiLCJjaGFyQXQiLCJwYWRkaW5nQ2hhciIsImJhc2U2NFN0ciIsImJhc2U2NFN0ckxlbmd0aCIsInJldmVyc2VNYXAiLCJfcmV2ZXJzZU1hcCIsInBhZGRpbmdJbmRleCIsImJpdHMxIiwiYml0czIiLCJiaXRzQ29tYmluZWQiLCJwYXJzZUxvb3AiLCJUIiwiTSIsIm9mZnNldF9pIiwiTV9vZmZzZXRfaSIsIkgiLCJNX29mZnNldF8wIiwiTV9vZmZzZXRfMSIsIk1fb2Zmc2V0XzIiLCJNX29mZnNldF8zIiwiTV9vZmZzZXRfNCIsIk1fb2Zmc2V0XzUiLCJNX29mZnNldF82IiwiTV9vZmZzZXRfNyIsIk1fb2Zmc2V0XzgiLCJNX29mZnNldF85IiwiTV9vZmZzZXRfMTAiLCJNX29mZnNldF8xMSIsIk1fb2Zmc2V0XzEyIiwiTV9vZmZzZXRfMTMiLCJNX29mZnNldF8xNCIsIk1fb2Zmc2V0XzE1IiwiRkYiLCJHRyIsIkhIIiwiSUkiLCJuQml0c1RvdGFsIiwibkJpdHNMZWZ0IiwibkJpdHNUb3RhbEgiLCJuQml0c1RvdGFsTCIsIkhfaSIsIkhtYWNNRDUiLCJSSVBFTUQxNjAiLCJzaGEiLCJhbGciLCJSZWZsZWN0T3duS2V5cyIsIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwicmVjZWl2ZXIiLCJhcmdzIiwiRnVuY3Rpb24iLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIk51bWJlcklzTmFOIiwiRXZlbnRFbWl0dGVyIiwiZW1pdHRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXZlbnRMaXN0ZW5lciIsImVycm9yTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsIl9ldmVudHMiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsImNoZWNrTGlzdGVuZXIiLCJsaXN0ZW5lciIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJfYWRkTGlzdGVuZXIiLCJwcmVwZW5kIiwiZXZlbnRzIiwiZXhpc3RpbmciLCJ3YXJuaW5nIiwibmV3TGlzdGVuZXIiLCJlbWl0IiwidW5zaGlmdCIsIndhcm5lZCIsImNvdW50IiwiY29uc29sZSIsIndhcm4iLCJvbmNlV3JhcHBlciIsImZpcmVkIiwid3JhcEZuIiwiX29uY2VXcmFwIiwic3RhdGUiLCJ3cmFwcGVkIiwiYmluZCIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwiYXJyYXlDbG9uZSIsImxpc3RlbmVyQ291bnQiLCJnZXRQcm90b3R5cGVPZiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlcnJvciIsImVyIiwiY29udGV4dCIsImhhbmRsZXIiLCJsaXN0ZW5lcnMiLCJhZGRMaXN0ZW5lciIsIm9uIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsImluZGV4IiwicG9wIiwic3BsaWNlT25lIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmF3TGlzdGVuZXJzIiwiZXZlbnROYW1lcyIsIm5iIiwibmVuYyIsInJldHJpZWQiLCJfbm9ybWFsaXplRW5jb2RpbmciLCJub3JtYWxpemVFbmNvZGluZyIsInRleHQiLCJ1dGYxNlRleHQiLCJ1dGYxNkVuZCIsImZpbGxMYXN0IiwidXRmOEZpbGxMYXN0IiwiYmFzZTY0VGV4dCIsImJhc2U2NEVuZCIsInNpbXBsZVdyaXRlIiwic2ltcGxlRW5kIiwibGFzdE5lZWQiLCJsYXN0VG90YWwiLCJsYXN0Q2hhciIsInV0ZjhDaGVja0J5dGUiLCJieXRlIiwidXRmOENoZWNrRXh0cmFCeXRlcyIsInV0ZjhDaGVja0luY29tcGxldGUiLCJvYmplY3RUb1N0cmluZyIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJpc1JlZ0V4cCIsImlzT2JqZWN0IiwiaXNEYXRlIiwiaXNFcnJvciIsImlzRnVuY3Rpb24iLCJpc1ByaW1pdGl2ZSIsIkJsb2NrSGFzaCIsInBlbmRpbmciLCJwZW5kaW5nVG90YWwiLCJvdXRTaXplIiwiaG1hY1N0cmVuZ3RoIiwicGFkTGVuZ3RoIiwiX2RlbHRhOCIsIl9kZWx0YTMyIiwiX3BhZCIsIl9kaWdlc3QiLCJSZXBvcnRlciIsIkRlY29kZXJCdWZmZXIiLCJFbmNvZGVyQnVmZmVyIiwicmVwb3J0ZXIiLCJpdGVtIiwiaXNFbmNvZGVyQnVmZmVyIiwiaXNEZWNvZGVyQnVmZmVyIiwic2F2ZSIsInJlc3RvcmUiLCJpc0VtcHR5Iiwic2tpcCIsInJhdyIsImZhaWwiLCJfcmVwb3J0ZXJTdGF0ZSIsImZvckVhY2giLCJ2ZXJzaW9uIiwiZm4iLCJhc1VJbnQzMkFycmF5Iiwic2NydWJWZWMiLCJjcnlwdEJsb2NrIiwia2V5U2NoZWR1bGUiLCJTVUJfTUlYIiwiU0JPWCIsIm5Sb3VuZHMiLCJ0MCIsInQxIiwidDIiLCJ0MyIsIlNVQl9NSVgwIiwiU1VCX01JWDEiLCJTVUJfTUlYMiIsIlNVQl9NSVgzIiwiczAiLCJzMSIsInMyIiwiczMiLCJrc1JvdyIsIlJDT04iLCJHIiwiSU5WX1NCT1giLCJJTlZfU1VCX01JWCIsInhpIiwic3giLCJ4NCIsIng4IiwiQUVTIiwiX3Jlc2V0Iiwia2V5V29yZHMiLCJrc1Jvd3MiLCJpbnZLZXlTY2hlZHVsZSIsImlrIiwia3NSIiwidHQiLCJfblJvdW5kcyIsIl9rZXlTY2hlZHVsZSIsIl9pbnZLZXlTY2hlZHVsZSIsImVuY3J5cHRCbG9ja1JhdyIsIm0xIiwic2NydWIiLCJrZXlCaXRzIiwiaXZMZW4iLCJrZXlMZW4iLCJ1c2VkIiwia2V5U3RhcnQiLCJpdlN0YXJ0IiwiQmFzZUN1cnZlIiwiY29uZiIsInplcm8iLCJ0d28iLCJwb2ludEZyb21KU09OIiwiZ1JlZCIsIl93bmFmVDEiLCJfd25hZlQyIiwiX3duYWZUMyIsIl93bmFmVDQiLCJfYml0TGVuZ3RoIiwiYWRqdXN0Q291bnQiLCJyZWROIiwiX21heHdlbGxUcmljayIsIkJhc2VQb2ludCIsImN1cnZlIiwicHJlY29tcHV0ZWQiLCJwb2ludCIsInZhbGlkYXRlIiwiX2ZpeGVkTmFmTXVsIiwiZG91YmxlcyIsIl9nZXREb3VibGVzIiwiSSIsInN0ZXAiLCJyZXByIiwibmFmVyIsImpwb2ludCIsIm1peGVkQWRkIiwicG9pbnRzIiwidG9QIiwiX3duYWZNdWwiLCJuYWZQb2ludHMiLCJfZ2V0TkFGUG9pbnRzIiwiZGJscCIsIl93bmFmTXVsQWRkIiwiZGVmVyIsImNvZWZmcyIsImphY29iaWFuUmVzdWx0Iiwid25kV2lkdGgiLCJjb21iIiwidG9KIiwiamEiLCJqYiIsImRlY29kZVBvaW50IiwicG9pbnRGcm9tWCIsImVuY29kZUNvbXByZXNzZWQiLCJfZW5jb2RlIiwiY29tcGFjdCIsImdldFgiLCJnZXRZIiwicHJlY29tcHV0ZSIsInBvd2VyIiwiYmV0YSIsIl9nZXRCZXRhIiwiX2hhc0RvdWJsZXMiLCJkYmwiLCJhc24xIiwiYWVzaWQiLCJmaXhQcm9jIiwiY2lwaGVycyIsImNvbXBhdCIsInBhcnNlS2V5cyIsInBhc3NwaHJhc2UiLCJuZGF0YSIsInN0cmlwcGVkIiwidGFnIiwiY2VydGlmaWNhdGUiLCJkZWNvZGUiLCJ0YnNDZXJ0aWZpY2F0ZSIsInN1YmplY3RQdWJsaWNLZXlJbmZvIiwiUHVibGljS2V5IiwiUlNBUHVibGljS2V5Iiwic3ViamVjdFB1YmxpY0tleSIsInN1YmplY3RQcml2YXRlS2V5IiwicGFyYW1zIiwicHViX2tleSIsIkRTQXBhcmFtIiwia2RlIiwia2RlcGFyYW1zIiwiaXRlcnMiLCJjaXBoZXJUZXh0Iiwia2V5bGVuIiwicGJrZGYyU3luYyIsImNyZWF0ZURlY2lwaGVyaXYiLCJFbmNyeXB0ZWRQcml2YXRlS2V5IiwiUHJpdmF0ZUtleSIsIlJTQVByaXZhdGVLZXkiLCJwcml2YXRlS2V5IiwiRUNQcml2YXRlS2V5IiwicHJpdl9rZXkiLCJEU0FQcml2YXRlS2V5IiwicGFyYW1ldGVycyIsInNpZ25hdHVyZSIsIlgzMldvcmRBcnJheSIsIkNfeDY0IiwieDY0IiwiV29yZCIsImhpZ2giLCJsb3ciLCJ0b1gzMiIsIng2NFdvcmRzIiwieDY0V29yZHNMZW5ndGgiLCJ4MzJXb3JkcyIsIng2NFdvcmQiLCJ3b3Jkc0xlbmd0aCIsIkhhc2hCYXNlIiwiQVJSQVkxNiIsIl9hIiwiX2IiLCJfYyIsIl9kIiwicm90bCIsImZuRiIsImZuRyIsImZuSCIsImZuSSIsIl9ibG9ja09mZnNldCIsIl9sZW5ndGgiLCJFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSIsIm5vb3AiLCJlb3MiLCJzdHJlYW0iLCJvcHRzIiwiY2FsbGJhY2siLCJjYWxsZWQiLCJvbmxlZ2FjeWZpbmlzaCIsIm9uZmluaXNoIiwid3JpdGFibGVFbmRlZCIsImZpbmlzaGVkIiwicmVhZGFibGVFbmRlZCIsImVuZEVtaXR0ZWQiLCJvbmVycm9yIiwib25jbG9zZSIsIm9ucmVxdWVzdCIsInJlcSIsInNldEhlYWRlciIsImFib3J0IiwiaXNSZXF1ZXN0IiwiemwiLCJ6ciIsInNsIiwic3IiLCJobCIsImhyIiwiX2UiLCJmbjEiLCJmbjIiLCJmbjMiLCJmbjQiLCJmbjUiLCJhciIsImJyIiwiY3IiLCJkciIsInRsIiwidHIiLCJBbGdvcml0aG0iLCJzaGExIiwic2hhMjI0Iiwic2hhMjU2Iiwic2hhMzg0Iiwic2hhNTEyIiwiU3RyZWFtIiwiUGFzc1Rocm91Z2giLCJDb3JrZWRSZXF1ZXN0IiwiX3RoaXMiLCJlbnRyeSIsImZpbmlzaCIsImNvcmtSZXEiLCJwZW5kaW5nY2IiLCJjb3JrZWRSZXF1ZXN0c0ZyZWUiLCJvbkNvcmtlZEZpbmlzaCIsImFzeW5jV3JpdGUiLCJicm93c2VyIiwic2V0SW1tZWRpYXRlIiwiV3JpdGFibGVTdGF0ZSIsImludGVybmFsVXRpbCIsImRlcHJlY2F0ZSIsIk91clVpbnQ4QXJyYXkiLCJyZWFsSGFzSW5zdGFuY2UiLCJkZXN0cm95SW1wbCIsIm5vcCIsImlzRHVwbGV4Iiwib2JqZWN0TW9kZSIsIndyaXRhYmxlT2JqZWN0TW9kZSIsImh3bSIsIndyaXRhYmxlSHdtIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwiZGVmYXVsdEh3bSIsImZpbmFsQ2FsbGVkIiwibmVlZERyYWluIiwiZW5kaW5nIiwibm9EZWNvZGUiLCJkZWNvZGVTdHJpbmdzIiwiZGVmYXVsdEVuY29kaW5nIiwid3JpdGluZyIsImNvcmtlZCIsInN5bmMiLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlY2IiLCJ3cml0ZWxlbiIsIm9ud3JpdGVTdGF0ZVVwZGF0ZSIsImZpbmlzaE1heWJlIiwiZXJyb3JFbWl0dGVkIiwib253cml0ZUVycm9yIiwibmVlZEZpbmlzaCIsImJ1ZmZlcmVkUmVxdWVzdCIsImNsZWFyQnVmZmVyIiwiYWZ0ZXJXcml0ZSIsImxhc3RCdWZmZXJlZFJlcXVlc3QiLCJwcmVmaW5pc2hlZCIsImJ1ZmZlcmVkUmVxdWVzdENvdW50IiwiX3dyaXRlIiwid3JpdGV2IiwiX3dyaXRldiIsImRlc3Ryb3kiLCJkb1dyaXRlIiwiY2h1bmsiLCJvbndyaXRlRHJhaW4iLCJob2xkZXIiLCJhbGxCdWZmZXJzIiwiaXNCdWYiLCJjYWxsRmluYWwiLCJuZWVkIiwicHJlZmluaXNoIiwiaGFzSW5zdGFuY2UiLCJvYmplY3QiLCJwaXBlIiwiX3VpbnQ4QXJyYXlUb0J1ZmZlciIsIndyaXRlQWZ0ZXJFbmQiLCJ2YWxpZCIsInZhbGlkQ2h1bmsiLCJuZXdDaHVuayIsImRlY29kZUNodW5rIiwibGFzdCIsIndyaXRlT3JCdWZmZXIiLCJjb3JrIiwidW5jb3JrIiwic2V0RGVmYXVsdEVuY29kaW5nIiwiZW5kV3JpdGFibGUiLCJfdW5kZXN0cm95IiwidW5kZXN0cm95IiwiYnVmZmVyT2ZmIiwiX3VwZGF0ZURlY3J5cHQiLCJfdXBkYXRlRW5jcnlwdCIsIl9idWZmZXIiLCJfZmx1c2hCdWZmZXIiLCJpbnB1dE9mZiIsIm91dHB1dE9mZiIsImZpcnN0IiwiX2ZpbmFsRW5jcnlwdCIsIl9maW5hbERlY3J5cHQiLCJfdW5wYWQiLCJkZWNpcGhlcnMiLCJtb2RlcyIsImNyZWF0ZUNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiQ2lwaGVyaXYiLCJjcmVhdGVEZWNpcGhlciIsIkRlY2lwaGVyIiwiRGVjaXBoZXJpdiIsImxpc3RDaXBoZXJzIiwiZ2V0Q2lwaGVycyIsIm1vZGVNb2R1bGVzIiwiRUNCIiwiQ0ZCIiwiQ0ZCOCIsIkNGQjEiLCJPRkIiLCJDVFIiLCJHQ00iLCJSYW5kIiwicmFuZCIsImdlbmVyYXRlIiwiX3JhbmQiLCJnZXRCeXRlcyIsImdldEJ5dGUiLCJjcnQiLCJwcml2IiwiYmxpbmRzIiwiZ2V0ciIsImJsaW5kZXIiLCJibiIsIm1vZHVsdXMiLCJwdWJsaWNFeHBvbmVudCIsInVuYmxpbmRlciIsImJsaW5kIiwiYmxpbmRlZCIsImMxIiwicHJpbWUxIiwiYzIiLCJwcmltZTIiLCJxaW52IiwiY29lZmZpY2llbnQiLCJleHBvbmVudDEiLCJtMiIsImV4cG9uZW50MiIsImVsbGlwdGljIiwiY3VydmVzIiwiZWMiLCJlZGRzYSIsInByZSIsIlByZXNldEN1cnZlIiwic2hvcnQiLCJlZHdhcmRzIiwiaXNJbmZpbml0eSIsImRlZmluZUN1cnZlIiwibGFtYmRhIiwiYmFzaXMiLCJjb21tb24iLCJyaXBlbWQiLCJobWFjIiwicmlwZW1kMTYwIiwic2FmZXIiLCJTYWZlciIsImtTdHJpbmdNYXhMZW5ndGgiLCJiaW5kaW5nIiwiY29uc3RhbnRzIiwiTUFYX0xFTkdUSCIsIk1BWF9TVFJJTkdfTEVOR1RIIiwidGFncyIsIm1ldGhvZHMiLCJOb2RlIiwicGFyZW50IiwiX2Jhc2VTdGF0ZSIsImNoaWxkcmVuIiwicmV2ZXJzZUFyZ3MiLCJjaG9pY2UiLCJvcHRpb25hbCIsImFueSIsInVzZSIsInVzZURlY29kZXIiLCJleHBsaWNpdCIsImltcGxpY2l0IiwiY29udGFpbnMiLCJfd3JhcCIsInN0YXRlUHJvcHMiLCJjc3RhdGUiLCJwcm9wIiwiYm9keSIsImZpbHRlciIsImNoaWxkIiwiX3VzZUFyZ3MiLCJkZWYiLCJuZXdLZXkiLCJfZGVjb2RlIiwid3JhcFJlc3VsdCIsInByZXZPYmoiLCJyZXN1bHQiLCJwcmVzZW50IiwicHJldktleSIsImVudGVyS2V5IiwiX3BlZWtUYWciLCJfZGVjb2RlR2VuZXJpYyIsIl9kZWNvZGVDaG9pY2UiLCJlbnRlck9iamVjdCIsIl9kZWNvZGVUYWciLCJ0cmFjayIsInBhdGgiLCJfZ2V0VXNlIiwibGVhdmVPYmplY3QiLCJleGl0S2V5IiwibGVhdmVLZXkiLCJfZGVjb2RlTGlzdCIsInRlc3QiLCJfZGVjb2RlU3RyIiwiX2RlY29kZU9iamlkIiwiX2RlY29kZVRpbWUiLCJfZGVjb2RlTnVsbCIsIl9kZWNvZGVCb29sIiwiX2RlY29kZUludCIsImVudGl0eSIsIl91c2UiLCJzb21lIiwibm9kZSIsIl9jcmVhdGVFbmNvZGVyQnVmZmVyIiwiX2VuY29kZVZhbHVlIiwiX3NraXBEZWZhdWx0IiwiY29udGVudCIsInByaW1pdGl2ZSIsIl9lbmNvZGVDaG9pY2UiLCJfZW5jb2RlUHJpbWl0aXZlIiwiY2xzIiwiX2VuY29kZUNvbXBvc2l0ZSIsIkpTT04iLCJfZW5jb2RlU3RyIiwiX2VuY29kZU9iamlkIiwiX2VuY29kZVRpbWUiLCJfZW5jb2RlTnVsbCIsIl9lbmNvZGVJbnQiLCJfZW5jb2RlQm9vbCIsIl9pc051bXN0ciIsIl9pc1ByaW50c3RyIiwiZXJyb3JzIiwiUmVwb3J0ZXJFcnJvciIsInJldGhyb3ciLCJwYXRoTGVuIiwibm93IiwiaW5oZXJpdGVkIiwiZWxlbSIsInN0YWNrIiwicGFydGlhbCIsImNhcHR1cmVTdGFja1RyYWNlIiwicmV2ZXJzZSIsInRhZ0NsYXNzIiwiMCIsIjEiLCIyIiwiMyIsInRhZ0NsYXNzQnlOYW1lIiwidGFnQnlOYW1lIiwiVyIsIlNIQTEiLCJIbWFjU0hBMSIsIl9oYXNoZXIiLCJoYXNoZXJCbG9ja1NpemUiLCJoYXNoZXJCbG9ja1NpemVCeXRlcyIsIm9LZXkiLCJfb0tleSIsImlLZXkiLCJfaUtleSIsIm9LZXlXb3JkcyIsImlLZXlXb3JkcyIsImlubmVySGFzaCIsIl9maW5hbGl6ZWQiLCJwcmVmaXgiLCJ0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIiLCJwaXBlbGluZSIsIlJlYWRhYmxlU3RhdGUiLCJFRWxpc3RlbmVyQ291bnQiLCJkZWJ1ZyIsImRlYnVnVXRpbCIsImRlYnVnbG9nIiwiY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yIiwiQnVmZmVyTGlzdCIsImdldEhpZ2hXYXRlck1hcmsiLCJfcmVxdWlyZSRjb2RlcyIsIkVSUl9JTlZBTElEX0FSR19UWVBFIiwiRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRiIsIkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEIiwiRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCIsImVycm9yT3JEZXN0cm95Iiwia1Byb3h5RXZlbnRzIiwicmVhZGFibGVPYmplY3RNb2RlIiwicGlwZXMiLCJwaXBlc0NvdW50IiwiZmxvd2luZyIsInJlYWRpbmciLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsInJlc3VtZVNjaGVkdWxlZCIsInBhdXNlZCIsImVtaXRDbG9zZSIsImF1dG9EZXN0cm95IiwiYXdhaXREcmFpbiIsInJlYWRpbmdNb3JlIiwiZGVjb2RlciIsIl9yZWFkIiwicmVhZGFibGVBZGRDaHVuayIsImFkZFRvRnJvbnQiLCJza2lwQ2h1bmtDaGVjayIsImVtaXRSZWFkYWJsZSIsImVtaXRSZWFkYWJsZV8iLCJvbkVvZkNodW5rIiwiY2h1bmtJbnZhbGlkIiwiYWRkQ2h1bmsiLCJtYXliZVJlYWRNb3JlIiwiaXNQYXVzZWQiLCJzZXRFbmNvZGluZyIsImhlYWQiLCJjbGVhciIsImhvd011Y2hUb1JlYWQiLCJjb21wdXRlTmV3SGlnaFdhdGVyTWFyayIsImZsb3ciLCJtYXliZVJlYWRNb3JlXyIsInVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nIiwicmVzdW1lIiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJmcm9tTGlzdCIsImNvbnN1bWUiLCJlbmRSZWFkYWJsZSIsImVuZFJlYWRhYmxlTlQiLCJ3U3RhdGUiLCJ4cyIsIm5PcmlnIiwiZG9SZWFkIiwicGlwZU9wdHMiLCJlbmRGbiIsInN0ZG91dCIsInN0ZGVyciIsInVucGlwZSIsIm9udW5waXBlIiwidW5waXBlSW5mbyIsImhhc1VucGlwZWQiLCJvbmRyYWluIiwib25kYXRhIiwiY2xlYW5lZFVwIiwicGlwZU9uRHJhaW4iLCJwYXVzZSIsImV2ZW50IiwiZGVzdHMiLCJldiIsIndyYXAiLCJhc3luY0l0ZXJhdG9yIiwiX2Zyb21MaXN0IiwiaXRlcmFibGUiLCJlbWl0RXJyb3JBbmRDbG9zZU5UIiwiZW1pdEVycm9yTlQiLCJlbWl0Q2xvc2VOVCIsInJlYWRhYmxlRGVzdHJveWVkIiwid3JpdGFibGVEZXN0cm95ZWQiLCJyU3RhdGUiLCJFUlJfSU5WQUxJRF9PUFRfVkFMVUUiLCJkdXBsZXhLZXkiLCJoaWdoV2F0ZXJNYXJrRnJvbSIsIkVSUl9NVUxUSVBMRV9DQUxMQkFDSyIsIkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUiLCJFUlJfU1RSRUFNX0RFU1RST1lFRCIsIkVSUl9TVFJFQU1fTlVMTF9WQUxVRVMiLCJFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCIsIkVSUl9VTktOT1dOX0VOQ09ESU5HIiwiY29uZmlnIiwibG9jYWxTdG9yYWdlIiwidHJhY2UiLCJFUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HIiwiRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wIiwiYWZ0ZXJUcmFuc2Zvcm0iLCJ0cyIsIl90cmFuc2Zvcm1TdGF0ZSIsInRyYW5zZm9ybWluZyIsIndyaXRlY2h1bmsiLCJycyIsIm5lZWRUcmFuc2Zvcm0iLCJ3cml0ZWVuY29kaW5nIiwiZmx1c2giLCJlcnIyIiwiSyIsIlNoYTI1NiIsIl93IiwibWFqIiwic2lnbWEwIiwic2lnbWExIiwiZ2FtbWEwIiwiX2YiLCJfZyIsIl9oIiwiZiIsIlQxIiwiVDIiLCJTaGE1MTIiLCJDaCIsInhsIiwiR2FtbWEwIiwiR2FtbWEwbCIsIkdhbW1hMSIsIkdhbW1hMWwiLCJnZXRDYXJyeSIsIl9haCIsIl9iaCIsIl9jaCIsIl9kaCIsIl9laCIsIl9maCIsIl9naCIsIl9oaCIsIl9hbCIsIl9ibCIsIl9jbCIsIl9kbCIsIl9lbCIsIl9mbCIsIl9nbCIsIl9obCIsImZoIiwiZ2giLCJoaCIsImZsIiwiZ2wiLCJ4aCIsImdhbW1hMGwiLCJnYW1tYTEiLCJnYW1tYTFsIiwiV2k3aCIsIldpN2wiLCJXaTE2aCIsIldpMTZsIiwiV2lsIiwiV2loIiwibWFqaCIsIm1hamwiLCJzaWdtYTBoIiwic2lnbWEwbCIsInNpZ21hMWgiLCJzaWdtYTFsIiwiS2loIiwiS2lsIiwiY2hoIiwiY2hsIiwidDFsIiwidDFoIiwidDJsIiwidDJoIiwid3JpdGVJbnQ2NEJFIiwicmVhZGFibGVId20iLCJyZWFkYWJsZUhpZ2hXYXRlck1hcmsiLCJuZWVkTW9yZURhdGEiLCJoYXNTdHJpbmdzIiwidGFpbCIsImNvcHlGcm9tQnVmZmVyU3RyaW5nIiwiY29weUZyb21CdWZmZXIiLCJmcm9tTGlzdFBhcnRpYWwiLCJpbmNyZWFzZWRBd2FpdERyYWluIiwiX3RoaXMyIiwiTGVnYWN5IiwibWQ1IiwiWkVST1MiLCJIbWFjIiwiYmxvY2tzaXplIiwiX2FsZyIsImlwYWQiLCJfaXBhZCIsIm9wYWQiLCJfb3BhZCIsInBia2RmMiIsIk1BWF9BTExPQyIsImNoZWNrUGFyYW1ldGVycyIsInNpemVzIiwicm1kMTYwIiwic2FsdExlbiIsInNoYUZ1bmMiLCJnZXREaWdlc3QiLCJpcGFkMSIsImlwYWQyIiwicnVuIiwiREsiLCJibG9jazEiLCJkZXN0UG9zIiwiaExlbiIsIlUiLCJpcCIsImluTCIsImluUiIsIm91dEwiLCJvdXRSIiwicmlwIiwicGMxIiwicjI4c2hsIiwicGMydGFibGUiLCJwYzIiLCJleHBhbmQiLCJzVGFibGUiLCJzdWJzdGl0dXRlIiwicGVybXV0ZVRhYmxlIiwicGFkU3BsaXQiLCJncm91cCIsIkRFU1N0YXRlIiwiREVTIiwiX2Rlc1N0YXRlIiwiZGVyaXZlS2V5cyIsInNoaWZ0VGFibGUiLCJrTCIsImtSIiwiaW5wIiwiaW5PZmYiLCJvdXRPZmYiLCJfZW5jcnlwdCIsIl9kZWNyeXB0IiwibFN0YXJ0IiwiclN0YXJ0Iiwia2V5TCIsImtleVIiLCJpbmNyMzIiLCJnZXRCbG9jayIsIl9wcmV2IiwiY2h1bmtOdW0iLCJfY2FjaGUiLCJhZXMiLCJHSEFTSCIsImNrIiwiX2doYXNoIiwiX2ZpbklEIiwiZ2hhc2giLCJ0b1BhZCIsIml2Qml0cyIsImNhbGNJdiIsIl9zZWNDYWNoZSIsIl9hbGVuIiwiX2F1dGhUYWciLCJfY2FsbGVkIiwicnVtcCIsInhvclRlc3QiLCJmaW5kUHJpbWUiLCJzaW1wbGVTaWV2ZSIsImZlcm1hdFRlc3QiLCJUV0VOVFlGT1VSIiwibWlsbGVyUmFiaW4iLCJPTkUiLCJUV08iLCJGSVZFIiwiVEVOIiwiVEhSRUUiLCJFTEVWRU4iLCJGT1VSIiwiX2dldFByaW1lcyIsImdlbiIsIm4yIiwiYnJvcmFuZCIsIk1pbGxlclJhYmluIiwiX3JhbmRiZWxvdyIsIm1pbl9ieXRlcyIsIl9yYW5kcmFuZ2UiLCJzdG9wIiwicm9uZSIsIm4xIiwicm4xIiwiZ2V0RGl2aXNvciIsImNoMzIiLCJtYWozMiIsInAzMiIsImZ0XzEiLCJzMF8yNTYiLCJzMV8yNTYiLCJnMF8yNTYiLCJnMV8yNTYiLCJzaGFDb21tb24iLCJzaGEyNTZfSyIsIlNIQTI1NiIsInNoYTUxMl9LIiwiU0hBNTEyIiwiY2g2NF9oaSIsInloIiwieWwiLCJ6aCIsImNoNjRfbG8iLCJtYWo2NF9oaSIsIm1hajY0X2xvIiwiczBfNTEyX2hpIiwiczBfNTEyX2xvIiwiczFfNTEyX2hpIiwiczFfNTEyX2xvIiwiZzBfNTEyX2hpIiwiZzBfNTEyX2xvIiwiZzFfNTEyX2hpIiwiZzFfNTEyX2xvIiwiX3ByZXBhcmVCbG9jayIsImMwX2hpIiwiYzBfbG8iLCJjMV9oaSIsImMxX2xvIiwiYzJfaGkiLCJjMl9sbyIsImMzX2hpIiwiYzNfbG8iLCJjNF9oaSIsImM0X2xvIiwiVDFfaGkiLCJUMV9sbyIsIlQyX2hpIiwiVDJfbG8iLCJtb3ZlIiwiX21vdmUiLCJmb3IiLCJtb2RybiIsImFsbG9jYXRlIiwiX3RvQXJyYXlMaWtlTEUiLCJfdG9BcnJheUxpa2VCRSIsImlzTmVnTnVtIiwiYmlnbnVtIiwiZGVmaW5lIiwiZGVjb2RlcnMiLCJlbmNvZGVycyIsImRlciIsInBlbSIsIkRFUkVuY29kZXIiLCJ0cmVlIiwiREVSTm9kZSIsImVuY29kZWRUYWciLCJlbmNvZGVUYWciLCJoZWFkZXIiLCJsZW5PY3RldHMiLCJ1bnVzZWQiLCJpZCIsInZhbHVlcyIsInJlbGF0aXZlIiwiaWRlbnQiLCJvYmppZCIsInRpbWUiLCJkYXRlIiwiRGF0ZSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIm51bUFycmF5Iiwic2lnbiIsIl9nZXRFbmNvZGVyIiwiZGF0YUJ1ZmZlciIsImRlZmF1bHRCdWZmZXIiLCJERVJEZWNvZGVyIiwiZGVyRGVjb2RlVGFnIiwib2N0IiwidGFnU3RyIiwiZGVyRGVjb2RlTGVuIiwiZGVjb2RlZFRhZyIsIl9za2lwVW50aWxFbmQiLCJwb3NzaWJsZUVuZCIsIm51bXN0ciIsInByaW50c3RyIiwiaWRlbnRpZmllcnMiLCJzdWJpZGVudCIsInNlY29uZCIsInllYXIiLCJtb24iLCJkYXkiLCJob3VyIiwic2VjIiwiVVRDIiwiX2dldERlY29kZXIiLCJjcmVhdGVIYXNoIiwiaTJvcHMiLCJzZWVkIiwicGFkZGVkTXNnIiwiaXNQcmltZSIsInNxcnROIiwiZmFjdG9yIiwiZ2V0RnJhY3Rpb25hbEJpdHMiLCJuUHJpbWUiLCJnYW1tYTB4IiwiZ2FtbWExeCIsIkhtYWNTSEEyNTYiLCJYNjRXb3JkIiwiWDY0V29yZEFycmF5IiwiWDY0V29yZF9jcmVhdGUiLCJIMCIsIkgxIiwiSDIiLCJIMyIsIkg0IiwiSDUiLCJINiIsIkg3IiwiSDBoIiwiSDBsIiwiSDFoIiwiSDFsIiwiSDJoIiwiSDJsIiwiSDNoIiwiSDNsIiwiSDRoIiwiSDRsIiwiSDVoIiwiSDVsIiwiSDZoIiwiSDZsIiwiSDdoIiwiSDdsIiwiV2kiLCJnYW1tYTB4aCIsImdhbW1hMHhsIiwiZ2FtbWEwaCIsImdhbW1hMXhoIiwiZ2FtbWExeGwiLCJnYW1tYTFoIiwiV2k3IiwiV2kxNiIsIktpIiwiSG1hY1NIQTUxMiIsInJuZyIsInBzZXVkb1JhbmRvbUJ5dGVzIiwicHJuZyIsImNyZWF0ZUhtYWMiLCJhbGdvcyIsImFsZ29LZXlzIiwiaGFzaGVzIiwiZ2V0SGFzaGVzIiwiRGlmZmllSGVsbG1hbkdyb3VwIiwiY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwIiwiZ2V0RGlmZmllSGVsbG1hbiIsImNyZWF0ZURpZmZpZUhlbGxtYW4iLCJEaWZmaWVIZWxsbWFuIiwiY3JlYXRlU2lnbiIsIlNpZ24iLCJjcmVhdGVWZXJpZnkiLCJWZXJpZnkiLCJjcmVhdGVFQ0RIIiwicHVibGljRW5jcnlwdCIsInByaXZhdGVFbmNyeXB0IiwicHVibGljRGVjcnlwdCIsInByaXZhdGVEZWNyeXB0IiwicmYiLCJyYW5kb21GaWxsIiwicmFuZG9tRmlsbFN5bmMiLCJjcmVhdGVDcmVkZW50aWFscyIsImI2NCIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJyZXZMb29rdXAiLCJ1aW50OCIsImV4dHJhQnl0ZXMiLCJwYXJ0cyIsImxlbjIiLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsImlzTEUiLCJtTGVuIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJsb2ciLCJMTjIiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfZGVmaW5lUHJvcGVydHkiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsImN1c3RvbSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2dldFN0cmluZyIsIl9nZXRCdWZmZXIiLCJzb3VyY2UiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl9vYmplY3RTcHJlYWQiLCJkZXB0aCIsImN1c3RvbUluc3BlY3QiLCJfT2JqZWN0JHNldFByb3RvdHlwZU8iLCJrTGFzdFJlc29sdmUiLCJrTGFzdFJlamVjdCIsImtFcnJvciIsImtFbmRlZCIsImtMYXN0UHJvbWlzZSIsImtIYW5kbGVQcm9taXNlIiwia1N0cmVhbSIsImNyZWF0ZUl0ZXJSZXN1bHQiLCJyZWFkQW5kUmVzb2x2ZSIsIml0ZXIiLCJvblJlYWRhYmxlIiwiQXN5bmNJdGVyYXRvclByb3RvdHlwZSIsIlJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSIsInNldFByb3RvdHlwZU9mIiwicHJvbWlzZSIsImxhc3RQcm9taXNlIiwidGhlbiIsIndyYXBGb3JOZXh0IiwiX09iamVjdCRjcmVhdGUiLCJpdGVyYXRvciIsIkVSUl9NSVNTSU5HX0FSR1MiLCJkZXN0cm95ZXIiLCJjbG9zZWQiLCJ0byIsInBvcENhbGxiYWNrIiwic3RyZWFtcyIsImRlc3Ryb3lzIiwicmVkdWNlIiwiU2hhIiwicm90bDMwIiwiZnQiLCJTaGExIiwicm90bDUiLCJTaGEyMjQiLCJTaGEzODQiLCJFRSIsIl9pc1N0ZGlvIiwiZGlkT25FbmQiLCJjbGVhbnVwIiwiVGltZW91dCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNldFRpbWVvdXQiLCJzY29wZSIsImNsZWFyVGltZW91dCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInRpbWVvdXQiLCJjbG9zZSIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsImNsZWFySW1tZWRpYXRlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJodG1sIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImRvY3VtZW50IiwiYXR0YWNoVG8iLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJjcmVhdGVFbGVtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInRhc2siLCJaRVJPX0JVRiIsInN1YnRsZSIsInRvQnJvd3NlciIsImNoZWNrcyIsImJyb3dzZXJQYmtkZjIiLCJpbXBvcnRLZXkiLCJkZXJpdmVCaXRzIiwicmVzb2x2ZVByb21pc2UiLCJwcm9tIiwiY2F0Y2giLCJjaGVja05hdGl2ZSIsInJlc3AiLCJhZXNNb2RlcyIsImRlc01vZGVzIiwiZWJ0ayIsInN1aXRlIiwiZGVzIiwiaW5zdGFudGlhdGUiLCJFREUiLCJtb2RlTmFtZSIsIl9kZXMiLCJkZXMzIiwicHJvdG8iLCJDQkNTdGF0ZSIsIl9jYmNJbml0IiwiX2NiY1N0YXRlIiwic3VwZXJQcm90byIsIkVERVN0YXRlIiwiazMiLCJfZWRlU3RhdGUiLCJNT0RFUyIsIkF1dGhDaXBoZXIiLCJTcGxpdHRlciIsIl9hdXRvcGFkZGluZyIsIlBBRERJTkciLCJjYWNoZSIsInNldFRvIiwicGFkQnVmZiIsImVuY3J5cHRTdGFydCIsImVuY3J5cHRCeXRlIiwiYnl0ZVBhcmFtIiwic2hpZnRJbiIsIlpFUk9FUyIsImZyb21BcnJheSIsIl9tdWx0aXBseSIsImxzYlZpIiwiVmkiLCJaaSIsImFibCIsIl9sYXN0IiwicGFkZGVkIiwiYXV0b1BhZGRpbmciLCJESCIsIkVOQ09ESU5HUyIsImdlbmVyYXRvciIsImdlbmMiLCJnZW5lcmF0ZVByaW1lIiwiU0VWRU4iLCJzZXRQdWJsaWNLZXkiLCJwdWIiLCJfcHViIiwic2V0UHJpdmF0ZUtleSIsIl9wcml2IiwicHJpbWVDYWNoZSIsIm1hbGxlYWJsZSIsInNldEdlbmVyYXRvciIsIl9fcHJpbWUiLCJfcHJpbWVMZW4iLCJfcHJpbWVDb2RlIiwiZm9ybWF0UmV0dXJuVmFsdWUiLCJoZXgiLCJjaGVja1ByaW1lIiwiX19nZW4iLCJnZW5lcmF0ZUtleXMiLCJfZ2VuIiwiZ2V0UHVibGljS2V5IiwiY29tcHV0ZVNlY3JldCIsIm90aGVyIiwic2VjcmV0IiwiZ2V0UHJpbWUiLCJmcm9udCIsImdldFByaXZhdGVLZXkiLCJnZXRHZW5lcmF0b3IiLCJ2ZXJpZnkiLCJhbGdvcml0aG1zIiwiX2hhc2hUeXBlIiwiX3RhZyIsIl9zaWduVHlwZSIsInNpZyIsIkVDIiwiZ2V0S2V5IiwiaGxlbiIsImhiaXRzIiwiYml0czJpbnQiLCJiaXRzMm9jdGV0cyIsIm9iaXRzIiwibWFrZUtleSIsImt2IiwibWFrZVIiLCJoYXNoVHlwZSIsInNpZ25UeXBlIiwiY3VydmVJZCIsImtleUZyb21Qcml2YXRlIiwidG9ERVIiLCJlY1NpZ24iLCJkc2FTaWduIiwiU2hvcnRDdXJ2ZSIsInRpbnYiLCJ6ZXJvQSIsInRocmVlQSIsImVuZG8iLCJfZ2V0RW5kb21vcnBoaXNtIiwiX2VuZG9XbmFmVDEiLCJfZW5kb1duYWZUMiIsIlBvaW50IiwiaXNSZWQiLCJpbmYiLCJKUG9pbnQiLCJ6T25lIiwiYmV0YXMiLCJfZ2V0RW5kb1Jvb3RzIiwibGFtYmRhcyIsInZlYyIsIl9nZXRFbmRvQmFzaXMiLCJudGludiIsInByZXZSIiwiYXByeFNxcnQiLCJ5MSIsInkyIiwibGVuMSIsIl9lbmRvU3BsaXQiLCJ2MSIsInYyIiwicDEiLCJwMiIsInExIiwicTIiLCJheCIsInJocyIsIl9lbmRvV25hZk11bEFkZCIsIm5wb2ludHMiLCJuY29lZmZzIiwiZnJvbUpTT04iLCJlbmRvTXVsIiwib2JqMnBvaW50IiwibngiLCJueSIsInlzMSIsImR5aW52IiwibXVsQWRkIiwiam11bEFkZCIsIl9wcmVjb21wdXRlIiwibmVnYXRlIiwiemludiIsInppbnYyIiwiYXkiLCJwejIiLCJ6MiIsImgyIiwiaDMiLCJueiIsImp4IiwiankiLCJqeiIsImp6NCIsImp5ZCIsImp4MiIsImp5ZDIiLCJqeWQ0IiwiZG55IiwiX3plcm9EYmwiLCJfdGhyZWVEYmwiLCJfZGJsIiwieHgiLCJ5eSIsInl5eXkiLCJ5eXl5OCIsImM4IiwiZ2FtbWEiLCJhbHBoYSIsImJldGE0IiwiYmV0YTgiLCJnZ2FtbWE4IiwiankyIiwianhkNCIsImp5ZDgiLCJ0cnBsIiwienoiLCJtbSIsImVlIiwieXl1NCIsImtiYXNlIiwiejMiLCJwejMiLCJlcVhUb1AiLCJ6cyIsInhjIiwiTW9udEN1cnZlIiwiaTQiLCJhMjQiLCJub3JtYWxpemUiLCJhYSIsImJiIiwiZGlmZkFkZCIsImRhIiwianVtbEFkZCIsIkVkd2FyZHNDdXJ2ZSIsInR3aXN0ZWQiLCJtT25lQSIsImRkIiwib25lQyIsIl9tdWxBIiwiX211bEMiLCJsaHMiLCJwb2ludEZyb21ZIiwiX2V4dERibCIsIm50IiwiX3Byb2pEYmwiLCJfZXh0QWRkIiwiX3Byb2pBZGQiLCJ6aSIsInNoYTFfSyIsIlNIQTIyNCIsIlNIQTM4NCIsIktoIiwiRSIsIkFoIiwiQmgiLCJEaCIsIkVoIiwicmgiLCJzaCIsImlubmVyIiwib3V0ZXIiLCJIbWFjRFJCRyIsIktleVBhaXIiLCJTaWduYXR1cmUiLCJuaCIsImtleVBhaXIiLCJmcm9tUHJpdmF0ZSIsImtleUZyb21QdWJsaWMiLCJmcm9tUHVibGljIiwiZ2VuS2V5UGFpciIsImRyYmciLCJwZXJzIiwicGVyc0VuYyIsImVudHJvcHkiLCJlbnRyb3B5RW5jIiwibm9uY2UiLCJuczIiLCJfdHJ1bmNhdGVUb04iLCJ0cnVuY09ubHkiLCJia2V5IiwiZ2V0UHJpdmF0ZSIsIm5zMSIsImtwIiwia3BYIiwicmVjb3ZlcnlQYXJhbSIsImNhbm9uaWNhbCIsInNpbnYiLCJnZXRQdWJsaWMiLCJyZWNvdmVyUHViS2V5IiwiaXNZT2RkIiwiaXNTZWNvbmRLZXkiLCJySW52IiwiZ2V0S2V5UmVjb3ZlcnlQYXJhbSIsIlEiLCJRcHJpbWUiLCJwcmVkUmVzaXN0IiwibWluRW50cm9weSIsIl9yZXNlZWQiLCJyZXNlZWRJbnRlcnZhbCIsIlYiLCJub25jZUVuYyIsIl9obWFjIiwia21hYyIsInJlc2VlZCIsImFkZEVuYyIsInRlbXAiLCJfaW1wb3J0UHJpdmF0ZSIsInByaXZFbmMiLCJfaW1wb3J0UHVibGljIiwicHViRW5jIiwicmVhc29uIiwiZGVyaXZlIiwiX2ltcG9ydERFUiIsIlBvc2l0aW9uIiwicGxhY2UiLCJnZXRMZW5ndGgiLCJpbml0aWFsIiwib2N0ZXRMZW4iLCJybVBhZGRpbmciLCJjb25zdHJ1Y3RMZW5ndGgiLCJvY3RldHMiLCJzbGVuIiwiYmFja0hhbGYiLCJFRERTQSIsInBvaW50Q2xhc3MiLCJlbmNvZGluZ0xlbmd0aCIsImtleUZyb21TZWNyZXQiLCJoYXNoSW50IiwiUmVuY29kZWQiLCJlbmNvZGVQb2ludCIsInNfIiwicHViQnl0ZXMiLCJTIiwibWFrZVNpZ25hdHVyZSIsIlNHIiwiZnJvbVNlY3JldCIsImxhc3RJeCIsIm5vcm1lZCIsInhJc09kZCIsImVuY29kZUludCIsImRlY29kZUludCIsImlzUG9pbnQiLCJfc2VjcmV0IiwiX3B1YkJ5dGVzIiwicHJpdkJ5dGVzIiwiZ2V0U2VjcmV0IiwiX1IiLCJfUyIsIl9SZW5jb2RlZCIsIl9TZW5jb2RlZCIsIlNlbmNvZGVkIiwidG9CeXRlcyIsInRvVXBwZXJDYXNlIiwic2VxIiwiaW50IiwiQWxnb3JpdGhtSWRlbnRpZmllciIsImJpdHN0ciIsIm51bGxfIiwiUHJpdmF0ZUtleUluZm8iLCJvY3RzdHIiLCJFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbyIsIkVDUGFyYW1ldGVycyIsIm5hbWVkQ3VydmUiLCJFbnRpdHkiLCJfY3JlYXRlTmFtZWQiLCJHZW5lcmF0ZWQiLCJfaW5pdE5hbWVkIiwiUEVNRW5jb2RlciIsImxhYmVsIiwiUEVNRGVjb2RlciIsImxpbmVzIiwiX3JldmVyc2UiLCJhc24iLCJUaW1lIiwidXRjVGltZSIsInV0Y3RpbWUiLCJnZW5lcmFsVGltZSIsImdlbnRpbWUiLCJBdHRyaWJ1dGVUeXBlVmFsdWUiLCJTdWJqZWN0UHVibGljS2V5SW5mbyIsIlJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUiLCJzZXRvZiIsIlJETlNlcXVlbmNlIiwic2Vxb2YiLCJOYW1lIiwicmRuU2VxdWVuY2UiLCJWYWxpZGl0eSIsIkV4dGVuc2lvbiIsImJvb2wiLCJUQlNDZXJ0aWZpY2F0ZSIsIlg1MDlDZXJ0aWZpY2F0ZSIsImZpbmRQcm9jIiwic3RhcnRSZWdleCIsImZ1bGxSZWdleCIsImV2cCIsIm9rZXkiLCJkZWNyeXB0ZWQiLCJjaXBoZXJLZXkiLCJtYXRjaDIiLCJjaGVja1ZhbHVlIiwicHVia2V5IiwiZWNWZXJpZnkiLCJ1bnBhY2tlZCIsIm1vbnRwIiwiZHNhVmVyaWZ5IiwicGFkTnVtIiwiRUNESCIsImFsaWFzZXMiLCJzZWNwMjU2azEiLCJzZWNwMjI0cjEiLCJwcmltZTI1NnYxIiwicHJpbWUxOTJ2MSIsImVkMjU1MTkiLCJzZWNwMzg0cjEiLCJzZWNwNTIxcjEiLCJjdXJ2ZVR5cGUiLCJwMjU2Iiwic2VjcDI1NnIxIiwic2VjcDE5MnIxIiwicDM4NCIsInA1MjEiLCJpbmVuYyIsIm1nZiIsIndpdGhQdWJsaWMiLCJwdWJsaWNLZXkiLCJpSGFzaCIsImhMZW4yIiwicHMiLCJkYmxlbiIsIm1hc2tlZERiIiwibWFza2VkU2VlZCIsIm9hZXAiLCJjdXIiLCJub25aZXJvIiwicGtjczEiLCJ6QnVmZmVyIiwiZGIiLCJkaWYiLCJzdGF0dXMiLCJvbGRCcm93c2VyIiwic2FmZUJ1ZmZlciIsInJhbmRvbWJ5dGVzIiwia0J1ZmZlck1heExlbmd0aCIsImtNYXhVaW50MzIiLCJhc3NlcnRPZmZzZXQiLCJhY3R1YWxGaWxsIiwib3VyQnVmIiwidWludCIsInN1cGVySW5pdCIsInR5cGVkQXJyYXkiLCJJbnQ4QXJyYXkiLCJVaW50OENsYW1wZWRBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJ0eXBlZEFycmF5Qnl0ZUxlbmd0aCIsInN3YXBFbmRpYW4iLCJVdGYxNiIsIlV0ZjE2QkUiLCJ1dGYxNkNoYXJzIiwidXRmMTZTdHIiLCJ1dGYxNlN0ckxlbmd0aCIsIlV0ZjE2TEUiLCJIbWFjU0hBMjI0IiwiSG1hY1NIQTM4NCIsIlJIT19PRkZTRVRTIiwiUElfSU5ERVhFUyIsIlJPVU5EX0NPTlNUQU5UUyIsIm5ld1kiLCJMRlNSIiwicm91bmRDb25zdGFudE1zdyIsInJvdW5kQ29uc3RhbnRMc3ciLCJiaXRQb3NpdGlvbiIsIlNIQTMiLCJvdXRwdXRMZW5ndGgiLCJfc3RhdGUiLCJuQmxvY2tTaXplTGFuZXMiLCJNMmkiLCJNMmkxIiwibGFuZSIsInRNc3ciLCJ0THN3IiwiVHgiLCJUeDQiLCJUeDEiLCJUeDFNc3ciLCJUeDFMc3ciLCJsYW5lSW5kZXgiLCJsYW5lTXN3IiwibGFuZUxzdyIsInJob09mZnNldCIsIlRQaUxhbmUiLCJUMCIsInN0YXRlMCIsIlRMYW5lIiwiVHgxTGFuZSIsIlR4MkxhbmUiLCJyb3VuZENvbnN0YW50IiwiYmxvY2tTaXplQml0cyIsIm91dHB1dExlbmd0aEJ5dGVzIiwib3V0cHV0TGVuZ3RoTGFuZXMiLCJoYXNoV29yZHMiLCJIbWFjU0hBMyIsIl96bCIsIl96ciIsIl9zbCIsIl9zciIsIl9ociIsImYxIiwiZjIiLCJmMyIsImY0IiwiZjUiLCJIbWFjUklQRU1EMTYwIiwiUEJLREYyIiwiYmxvY2tJbmRleCIsImJsb2NrSW5kZXhXb3JkcyIsImJsb2NrV29yZHMiLCJibG9ja1dvcmRzTGVuZ3RoIiwiaW50ZXJtZWRpYXRlIiwiaW50ZXJtZWRpYXRlV29yZHMiLCJnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQiLCJrZXlzdHJlYW0iLCJjb3VudGVyIiwiX2NvdW50ZXIiLCJDVFJHbGFkbWFuIiwiaW5jV29yZCIsImluY0NvdW50ZXIiLCJfa2V5c3RyZWFtIiwiQW5zaVg5MjMiLCJsYXN0Qnl0ZVBvcyIsIkFuc2l4OTIzIiwiSXNvMTAxMjYiLCJJc285Nzk3MSIsIlplcm9QYWRkaW5nIiwiTm9QYWRkaW5nIiwiU1VCX01JWF8wIiwiU1VCX01JWF8xIiwiU1VCX01JWF8yIiwiU1VCX01JWF8zIiwiSU5WX1NVQl9NSVhfMCIsIklOVl9TVUJfTUlYXzEiLCJJTlZfU1VCX01JWF8yIiwiSU5WX1NVQl9NSVhfMyIsIl9rZXlQcmlvclJlc2V0IiwiaW52S3NSb3ciLCJfZG9DcnlwdEJsb2NrIiwiUEMxIiwiUEMyIiwiQklUX1NISUZUUyIsIlNCT1hfUCIsIlNCT1hfTUFTSyIsImtleUJpdFBvcyIsInN1YktleXMiLCJfc3ViS2V5cyIsIm5TdWJLZXkiLCJzdWJLZXkiLCJiaXRTaGlmdCIsImludlN1YktleXMiLCJfaW52U3ViS2V5cyIsIl9sQmxvY2siLCJfckJsb2NrIiwiZXhjaGFuZ2VMUiIsImV4Y2hhbmdlUkwiLCJsQmxvY2siLCJyQmxvY2siLCJUcmlwbGVERVMiLCJrZXkxIiwia2V5MiIsImtleTMiLCJfZGVzMSIsIl9kZXMyIiwiX2RlczMiLCJSQzQiLCJrZXlTaWdCeXRlcyIsImtleUJ5dGVJbmRleCIsImtleUJ5dGUiLCJfaSIsIl9qIiwiZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkIiwia2V5c3RyZWFtV29yZCIsIlJDNERyb3AiLCJkcm9wIiwiQ18iLCJSYWJiaXQiLCJYIiwiX1giLCJfQyIsIm5leHRTdGF0ZSIsIklWIiwiSVZfMCIsIklWXzEiLCJpMCIsImkyIiwiaTEiLCJpMyIsImd4IiwiZ2EiLCJnYiIsIlJhYmJpdExlZ2FjeSJdLCJtYXBwaW5ncyI6IndGQUE2QixtQkFBbEJBLE9BQU9DLE9BRWhCQyxFQUFPQyxRQUFVLFNBQWtCQyxFQUFNQyxHQUNuQ0EsSUFDRkQsRUFBS0UsT0FBU0QsRUFDZEQsRUFBS0csVUFBWVAsT0FBT0MsT0FBT0ksRUFBVUUsVUFBVyxDQUNsREMsWUFBYSxDQUNYQyxNQUFPTCxFQUNQTSxZQUFZLEVBQ1pDLFVBQVUsRUFDVkMsY0FBYyxPQU90QlYsRUFBT0MsUUFBVSxTQUFrQkMsRUFBTUMsR0FDdkMsR0FBSUEsRUFBVyxDQUNiRCxFQUFLRSxPQUFTRCxFQUNkLElBQUlRLEVBQVcsYUFDZkEsRUFBU04sVUFBWUYsRUFBVUUsVUFDL0JILEVBQUtHLFVBQVksSUFBSU0sRUFD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QUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLElBR2hEQyxFQUFLLENBQ1AsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FDbEQsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFDbkQsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FDbEQsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FDbEQsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsSUFHaERDLEVBQUssQ0FDUCxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUNyRCxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUNwRCxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUNyRCxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUNwRCxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUduREMsRUFB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R0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFDcEQsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFDbEQsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFDbEQsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFbkQsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDbEQsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFDbkQsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFDcEQsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFFbEQsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FDakQsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFDcEQsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFDakQsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FFcEQsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFDbkQsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFDbkQsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFDcEQsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFakQsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFDcEQsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFDbEQsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FDbkQsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFFbEQsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFDbkQsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFDbkQsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FB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LEVBQUVpRyxLQUVmLFNBQVM2eUQsSUFDTCxPQUFPRixFQUFROTdELE9BQU82RCxNQUFNaTRELEVBQVNoNEQsV0FJekMsSUFBSXdsRCxFQUFJLENBQ0owUyxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFdBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFVBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxVQUFZLFlBQ25FQSxFQUFlLFVBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFdBQ25FQSxFQUFlLFdBQVksV0FBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFdBQ25FQSxFQUFlLFVBQVksWUFBYUEsRUFBZSxVQUFZLFlBQ25FQSxFQUFlLFVBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFdBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFVBQVksWUFBYUEsRUFBZSxVQUFZLFdBQ25FQSxFQUFlLFVBQVksWUFBYUEsRUFBZSxVQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFdBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFdBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxVQUFZLFdBQ25FQSxFQUFlLFVBQVksWUFBYUEsRUFBZSxVQUFZLFlBQ25FQSxFQUFlLFVBQVksWUFBYUEsRUFBZSxVQUFZLFlBQ25FQSxFQUFlLFVBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFdBQ25FQSxFQUFlLFdBQVksV0FBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFdBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFVBQVksWUFBYUEsRUFBZSxVQUFZLFlBQ25FQSxFQUFlLFVBQVksWUFBYUEsRUFBZSxVQUFZLFdBQ25FQSxFQUFlLFVBQVksV0FBYUEsRUFBZSxVQUFZLFlBQ25FQSxFQUFlLFdBQVksV0FBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksWUFBYUEsRUFBZSxXQUFZLFlBQ25FQSxFQUFlLFdBQVksV0FBYUEsRUFBZSxXQUFZLGFBSW5FemEsRUFBSSxJQUNQLFdBQ0csSUFBSyxJQUFJdDhDLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUNwQnM4QyxFQUFFdDhDLEdBQUsrMkQsSUFGZixHQVNBLElBQUkxRyxFQUFTaHRELEVBQU9ndEQsT0FBUy9zRCxFQUFPakYsT0FBTyxDQUN2Q21GLFNBQVUsV0FDTmpGLEtBQUs0MUIsTUFBUSxJQUFJMmlDLEVBQWFwNEQsS0FBSyxDQUMvQixJQUFJbTRELEVBQVFuNEQsS0FBSyxXQUFZLFlBQWEsSUFBSW00RCxFQUFRbjRELEtBQUssV0FBWSxZQUN2RSxJQUFJbTRELEVBQVFuNEQsS0FBSyxXQUFZLFlBQWEsSUFBSW00RCxFQUFRbjRELEtBQUssV0FBWSxZQUN2RSxJQUFJbTRELEVBQVFuNEQsS0FBSyxXQUFZLFlBQWEsSUFBSW00RCxFQUFRbjRELEtBQUssV0FBWSxXQUN2RSxJQUFJbTRELEVBQVFuNEQsS0FBSyxVQUFZLFlBQWEsSUFBSW00RCxFQUFRbjRELEtBQUssV0FBWSxjQUkvRXlFLGdCQUFpQixTQUFVZ3lCLEVBQUdqeUIsR0FpRDFCLElBL0NBLElBQUlveUIsRUFBSS8yQixLQUFLNDFCLE1BQU0vMEIsTUFFZjQzRCxFQUFLMWhDLEVBQUUsR0FDUDJoQyxFQUFLM2hDLEVBQUUsR0FDUDRoQyxFQUFLNWhDLEVBQUUsR0FDUDZoQyxFQUFLN2hDLEVBQUUsR0FDUDhoQyxFQUFLOWhDLEVBQUUsR0FDUCtoQyxFQUFLL2hDLEVBQUUsR0FDUGdpQyxFQUFLaGlDLEVBQUUsR0FDUGlpQyxFQUFLamlDLEVBQUUsR0FFUGtpQyxFQUFNUixFQUFHcnVCLEtBQ1Q4dUIsRUFBTVQsRUFBR3B1QixJQUNUOHVCLEVBQU1ULEVBQUd0dUIsS0FDVGd2QixFQUFNVixFQUFHcnVCLElBQ1RndkIsRUFBTVYsRUFBR3Z1QixLQUNUa3ZCLEVBQU1YLEVBQUd0dUIsSUFDVGt2QixFQUFNWCxFQUFHeHVCLEtBQ1RvdkIsRUFBTVosRUFBR3Z1QixJQUNUb3ZCLEVBQU1aLEVBQUd6dUIsS0FDVHN2QixFQUFNYixFQUFHeHVCLElBQ1RzdkIsRUFBTWIsRUFBRzF1QixLQUNUd3ZCLEVBQU1kLEVBQUd6dUIsSUFDVHd2QixFQUFNZCxFQUFHM3VCLEtBQ1QwdkIsRUFBTWYsRUFBRzF1QixJQUNUMHZCLEVBQU1mLEVBQUc1dUIsS0FDVDR2QixFQUFNaEIsRUFBRzN1QixJQUdUeHdCLEVBQUtvL0MsRUFDTG4vQyxFQUFLby9DLEVBQ0xuL0MsRUFBS28vQyxFQUNMbC9DLEVBQUttL0MsRUFDTGgvQyxFQUFLaS9DLEVBQ0xoL0MsRUFBS2kvQyxFQUNMaC9DLEVBQUtpL0MsRUFDTGgvQyxFQUFLaS9DLEVBQ0w3K0MsRUFBSzgrQyxFQUNMNytDLEVBQUs4K0MsRUFDTHZSLEVBQUt3UixFQUNMclIsRUFBS3NSLEVBQ0x4UixFQUFLeVIsRUFDTHRSLEVBQUt1UixFQUNMelIsRUFBSzBSLEVBQ0w5c0IsRUFBSytzQixFQUdBdjRELEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUFLLENBQ3pCLElBQUl1bkQsRUFDQUMsRUFHQWdSLEVBQUtsYyxFQUFFdDhDLEdBR1gsR0FBSUEsRUFBSSxHQUNKd25ELEVBQU1nUixFQUFHN3ZCLEtBQStCLEVBQXhCeFQsRUFBRWp5QixFQUFhLEVBQUpsRCxHQUMzQnVuRCxFQUFNaVIsRUFBRzV2QixJQUErQixFQUF4QnpULEVBQUVqeUIsRUFBYSxFQUFKbEQsRUFBUSxPQUNoQyxDQUVILElBQUkwMkQsRUFBV3BhLEVBQUV0OEMsRUFBSSxJQUNqQnk0RCxFQUFXL0IsRUFBUS90QixLQUNuQit2QixFQUFXaEMsRUFBUTl0QixJQUNuQit2QixHQUFhRixJQUFhLEVBQU1DLEdBQVksS0FBU0QsSUFBYSxFQUFNQyxHQUFZLElBQVFELElBQWEsRUFDekd6UixHQUFhMFIsSUFBYSxFQUFNRCxHQUFZLEtBQVNDLElBQWEsRUFBTUQsR0FBWSxLQUFTQyxJQUFhLEVBQU1ELEdBQVksSUFHNUg5QixHQUFXcmEsRUFBRXQ4QyxFQUFJLEdBQ2pCNDRELEdBQVdqQyxHQUFRaHVCLEtBQ25Ca3dCLEdBQVdsQyxHQUFRL3RCLElBQ25Ca3dCLElBQWFGLEtBQWEsR0FBT0MsSUFBWSxLQUFTRCxJQUFZLEVBQU1DLEtBQWEsSUFBUUQsS0FBYSxFQUMxRzFSLElBQWEyUixLQUFhLEdBQU9ELElBQVksS0FBU0MsSUFBWSxFQUFNRCxLQUFhLEtBQVNDLEtBQWEsRUFBTUQsSUFBWSxJQUc3SEcsR0FBT3pjLEVBQUV0OEMsRUFBSSxHQUNibW5ELEdBQU80UixHQUFJcHdCLEtBQ1h5ZSxHQUFPMlIsR0FBSW53QixJQUVYb3dCLEdBQVExYyxFQUFFdDhDLEVBQUksSUFDZHFuRCxHQUFRMlIsR0FBS3J3QixLQUNiMmUsR0FBUTBSLEdBQUtwd0IsSUFPakI0ZSxHQUZBQSxHQUZBQSxFQUFNbVIsRUFBVXhSLEtBRGhCSSxFQUFNUCxFQUFVSSxNQUNpQixFQUFNSixJQUFZLEVBQUssRUFBSSxJQUVoRDhSLEtBRFp2UixHQUFZTCxNQUNvQixFQUFNQSxLQUFZLEVBQUssRUFBSSxJQUUvQ0csS0FEWkUsR0FBWUQsTUFDa0IsRUFBTUEsS0FBVSxFQUFLLEVBQUksR0FFdkRrUixFQUFHN3ZCLEtBQU82ZSxFQUNWZ1IsRUFBRzV2QixJQUFPMmUsRUFHZCxJQXFCSVksR0FyQkFGLEdBQVEvdUMsRUFBS3d0QyxHQUFReHRDLEVBQUt5dEMsRUFDMUJ1QixHQUFRL3VDLEVBQUswdEMsR0FBUTF0QyxFQUFLMnRDLEVBQzFCVyxHQUFRcnZDLEVBQUtFLEVBQU9GLEVBQUtPLEVBQU9MLEVBQUtLLEVBQ3JDK3VDLEdBQVFydkMsRUFBS0csRUFBT0gsRUFBS08sRUFBT0osRUFBS0ksRUFFckMrdUMsSUFBWXZ2QyxJQUFPLEdBQU9DLEdBQU0sSUFBU0QsR0FBTSxHQUFRQyxJQUFPLElBQVFELEdBQU0sR0FBT0MsSUFBTyxHQUMxRnV2QyxJQUFZdnZDLElBQU8sR0FBT0QsR0FBTSxJQUFTQyxHQUFNLEdBQVFELElBQU8sSUFBUUMsR0FBTSxHQUFPRCxJQUFPLEdBQzFGeXZDLElBQVkzdUMsSUFBTyxHQUFPQyxHQUFNLEtBQVNELElBQU8sR0FBT0MsR0FBTSxLQUFTRCxHQUFNLEdBQU9DLElBQU8sR0FDMUYydUMsSUFBWTN1QyxJQUFPLEdBQU9ELEdBQU0sS0FBU0MsSUFBTyxHQUFPRCxHQUFNLEtBQVNDLEdBQU0sR0FBT0QsSUFBTyxHQUcxRisvQyxHQUFNNVUsRUFBRXJrRCxHQUNSK25ELEdBQU1rUixHQUFHdHdCLEtBQ1RxZixHQUFNaVIsR0FBR3J3QixJQUdUd2YsR0FBTXhCLEVBQUtpQixLQURYTSxHQUFNM2MsRUFBS3NjLE1BQ29CLEVBQU10YyxJQUFPLEVBQUssRUFBSSxHQVNyRDZjLEdBQU1ULEdBQVVGLEdBSXBCZCxFQUFLRCxFQUNMbmIsRUFBS3NiLEVBQ0xILEVBQUtELEVBQ0xJLEVBQUtELEVBQ0xILEVBQUt4dEMsRUFDTDJ0QyxFQUFLMXRDLEVBRUxELEVBQU1MLEdBZEZ1dkMsSUFGQUEsSUFGQUEsR0FBTUEsR0FBTUgsS0FEWkUsSUFBWUQsTUFDZ0IsRUFBTUEsS0FBUSxFQUFLLEVBQUksSUFFdkNILEtBRFpJLElBQVlILE1BQ2dCLEVBQU1BLEtBQVEsRUFBSyxFQUFJLElBRXZDUixJQURaVyxJQUFZWixLQUNnQixFQUFNQSxJQUFRLEVBQUssRUFBSSxNQWF2RHB1QyxFQUFNTCxFQUFLcXZDLEdBQU8sS0FDUSxFQUFNcnZDLElBQU8sRUFBSyxFQUFJLEdBQU0sRUFDdERELEVBQUtGLEVBQ0xHLEVBQUtGLEVBQ0xELEVBQUtMLEVBQ0xNLEVBQUtKLEVBQ0xGLEVBQUtGLEVBQ0xJLEVBQUtILEVBRUxELEVBQU1nd0MsSUFsQklULEdBQVVGLElBQVNZLEtBQVEsRUFBTVQsS0FBWSxFQUFLLEVBQUksTUFpQmhFdnZDLEVBQU04dkMsR0FBTUUsR0FBTyxLQUNRLEVBQU1GLEtBQVEsRUFBSyxFQUFJLEdBQU0sRUFJNURzUCxFQUFNVCxFQUFHcHVCLElBQVE2dUIsRUFBTXAvQyxFQUN2QjIrQyxFQUFHcnVCLEtBQVE2dUIsRUFBTXAvQyxHQUFPcS9DLElBQVEsRUFBTXAvQyxJQUFPLEVBQUssRUFBSSxHQUN0RHMvQyxFQUFNVixFQUFHcnVCLElBQVErdUIsRUFBTW4vQyxFQUN2QnkrQyxFQUFHdHVCLEtBQVErdUIsRUFBTXAvQyxHQUFPcS9DLElBQVEsRUFBTW4vQyxJQUFPLEVBQUssRUFBSSxHQUN0RHEvQyxFQUFNWCxFQUFHdHVCLElBQVFpdkIsRUFBTWovQyxFQUN2QnMrQyxFQUFHdnVCLEtBQVFpdkIsRUFBTWovQyxHQUFPay9DLElBQVEsRUFBTWovQyxJQUFPLEVBQUssRUFBSSxHQUN0RG0vQyxFQUFNWixFQUFHdnVCLElBQVFtdkIsRUFBTWovQyxFQUN2QnErQyxFQUFHeHVCLEtBQVFtdkIsRUFBTWovQyxHQUFPay9DLElBQVEsRUFBTWovQyxJQUFPLEVBQUssRUFBSSxHQUN0RG0vQyxFQUFNYixFQUFHeHVCLElBQVFxdkIsRUFBTTkrQyxFQUN2QmkrQyxFQUFHenVCLEtBQVFxdkIsRUFBTTkrQyxHQUFPKytDLElBQVEsRUFBTTkrQyxJQUFPLEVBQUssRUFBSSxHQUN0RGcvQyxFQUFNZCxFQUFHenVCLElBQVF1dkIsRUFBTXRSLEVBQ3ZCd1EsRUFBRzF1QixLQUFRdXZCLEVBQU14UixHQUFPeVIsSUFBUSxFQUFNdFIsSUFBTyxFQUFLLEVBQUksR0FDdER3UixFQUFNZixFQUFHMXVCLElBQVF5dkIsRUFBTXZSLEVBQ3ZCd1EsRUFBRzN1QixLQUFReXZCLEVBQU16UixHQUFPMFIsSUFBUSxFQUFNdlIsSUFBTyxFQUFLLEVBQUksR0FDdER5UixFQUFNaEIsRUFBRzN1QixJQUFRMnZCLEVBQU0vc0IsRUFDdkIrckIsRUFBRzV1QixLQUFRMnZCLEVBQU0xUixHQUFPMlIsSUFBUSxFQUFNL3NCLElBQU8sRUFBSyxFQUFJLElBRzFENW5DLFlBQWEsV0FFVCxJQUFJdkIsRUFBTzlELEtBQUsyRCxNQUNaTyxFQUFZSixFQUFLakQsTUFFakJ1M0IsRUFBZ0MsRUFBbkJwNEIsS0FBSzRELFlBQ2xCeTBCLEVBQTRCLEVBQWhCdjBCLEVBQUtoRCxTQWVyQixPQVpBb0QsRUFBVW0wQixJQUFjLElBQU0sS0FBUyxHQUFLQSxFQUFZLEdBQ3hEbjBCLEVBQThDLElBQWpDbTBCLEVBQVksTUFBUyxJQUFPLElBQVcxNUIsS0FBS3dWLE1BQU1pa0IsRUFBYSxZQUM1RWwwQixFQUE4QyxJQUFqQ20wQixFQUFZLE1BQVMsSUFBTyxJQUFXRCxFQUNwRHQwQixFQUFLaEQsU0FBOEIsRUFBbkJvRCxFQUFVcEcsT0FHMUJrQyxLQUFLK0QsV0FHTS9ELEtBQUs0MUIsTUFBTTBVLFNBTTFCM3BDLE1BQU8sV0FDSCxJQUFJQSxFQUFRb0UsRUFBT3BFLE1BQU1pQixLQUFLNUIsTUFHOUIsT0FGQVcsRUFBTWkxQixNQUFRNTFCLEtBQUs0MUIsTUFBTWoxQixRQUVsQkEsR0FHWHlELFVBQVcsS0FpQmYxRSxFQUFFb3lELE9BQVMvc0QsRUFBT08sY0FBY3dzRCxHQWdCaENweUQsRUFBRWk3RCxXQUFhNTFELEVBQU9VLGtCQUFrQnFzRCxHQWhUNUMsR0FvVE9wekQsRUFBU296RCxTLGlEQ2pVakJwMUQsRUFBUTBDLFlBQWMxQyxFQUFRaytELElBQU1sK0QsRUFBUW0rRCxrQkFBb0JuK0QsRUFBUW8rRCxLQUFPLEVBQVEsSUFDdkZwK0QsRUFBUWc3RCxXQUFhaDdELEVBQVFvNEIsS0FBTyxFQUFRLElBQzVDcDRCLEVBQVFxK0QsV0FBYXIrRCxFQUFRb3VELEtBQU8sRUFBUSxLQUU1QyxJQUFJa1EsRUFBUSxFQUFRLEtBQ2hCQyxFQUFXMStELE9BQU93MUIsS0FBS2lwQyxHQUN2QkUsRUFBUyxDQUFDLE9BQVEsU0FBVSxTQUFVLFNBQVUsU0FBVSxNQUFPLFVBQVVoNkQsT0FBTys1RCxHQUN0RnYrRCxFQUFReStELFVBQVksV0FDbEIsT0FBT0QsR0FHVCxJQUFJbGlELEVBQUksRUFBUSxLQUNoQnRjLEVBQVEydUQsT0FBU3J5QyxFQUFFcXlDLE9BQ25CM3VELEVBQVEyc0MsV0FBYXJ3QixFQUFFcXdCLFdBRXZCLElBQUlxbEIsRUFBTSxFQUFRLEtBRWxCaHlELEVBQVFvSixPQUFTNG9ELEVBQUk1b0QsT0FDckJwSixFQUFReTNDLGFBQWV1YSxFQUFJdmEsYUFDM0J6M0MsRUFBUTIzQyxTQUFXcWEsRUFBSXJhLFNBQ3ZCMzNDLEVBQVEwM0MsZUFBaUJzYSxFQUFJdGEsZUFDN0IxM0MsRUFBUTYzQyxTQUFXbWEsRUFBSW5hLFNBQ3ZCNzNDLEVBQVE0M0MsZUFBaUJvYSxFQUFJcGEsZUFDN0I1M0MsRUFBUTgzQyxXQUFha2EsRUFBSWxhLFdBQ3pCOTNDLEVBQVE0c0MsaUJBQW1Cb2xCLEVBQUlwbEIsaUJBQy9CNXNDLEVBQVFnNEMsV0FBYWdhLEVBQUloYSxXQUN6Qmg0QyxFQUFRKzNDLFlBQWNpYSxFQUFJamEsWUFFMUIsSUFBSW42QixFQUFLLEVBQVEsS0FFakI1ZCxFQUFRMCtELG1CQUFxQjlnRCxFQUFHOGdELG1CQUNoQzErRCxFQUFRMitELHlCQUEyQi9nRCxFQUFHK2dELHlCQUN0QzMrRCxFQUFRNCtELGlCQUFtQmhoRCxFQUFHZ2hELGlCQUM5QjUrRCxFQUFRNitELG9CQUFzQmpoRCxFQUFHaWhELG9CQUNqQzcrRCxFQUFROCtELGNBQWdCbGhELEVBQUdraEQsY0FFM0IsSUFBSXRGLEVBQU8sRUFBUSxLQUVuQng1RCxFQUFRKytELFdBQWF2RixFQUFLdUYsV0FDMUIvK0QsRUFBUWcvRCxLQUFPeEYsRUFBS3dGLEtBQ3BCaC9ELEVBQVFpL0QsYUFBZXpGLEVBQUt5RixhQUM1QmovRCxFQUFRay9ELE9BQVMxRixFQUFLMEYsT0FFdEJsL0QsRUFBUW0vRCxXQUFhLEVBQVEsS0FFN0IsSUFBSUMsRUFBZ0IsRUFBUSxLQUU1QnAvRCxFQUFRby9ELGNBQWdCQSxFQUFjQSxjQUN0Q3AvRCxFQUFRcS9ELGVBQWlCRCxFQUFjQyxlQUN2Q3IvRCxFQUFRcy9ELGNBQWdCRixFQUFjRSxjQUN0Q3QvRCxFQUFRdS9ELGVBQWlCSCxFQUFjRyxlQWV2QyxJQUFJQyxFQUFLLEVBQVEsS0FFakJ4L0QsRUFBUXkvRCxXQUFhRCxFQUFHQyxXQUN4QnovRCxFQUFRMC9ELGVBQWlCRixFQUFHRSxlQUU1QjEvRCxFQUFRMi9ELGtCQUFvQixXQUMxQixNQUFNLElBQUkvOEQsTUFBTSxDQUNkLGtEQUNBLDBCQUNBLDBEQUNBK0MsS0FBSyxRQUdUM0YsRUFBUXU3QyxVQUFZLENBQ2xCLDBCQUE2QixFQUM3QixxQkFBd0IsRUFDeEIsNkJBQWdDLEVBQ2hDLDBCQUE2QixFQUM3QixZQUFlLEVBQ2YsYUFBZ0IsRUFDaEIsa0JBQXFCLEVBQ3JCLG1CQUFzQixFQUN0QixlQUFrQixFQUNsQix1QkFBMEIsRUFDMUIsaUJBQW9CLEVBQ3BCLHNCQUF5QixFQUN6Qiw0QkFBK0IsRUFDL0IsOEJBQWlDLEVBQ2pDLHdCQUEyQixJLDZCQzdGN0J2N0MsRUFBUXFPLFdBdUNSLFNBQXFCdXhELEdBQ25CLElBQUlDLEVBQU9DLEVBQVFGLEdBQ2ZHLEVBQVdGLEVBQUssR0FDaEJHLEVBQWtCSCxFQUFLLEdBQzNCLE9BQXVDLEdBQTlCRSxFQUFXQyxHQUF1QixFQUFLQSxHQTFDbERoZ0UsRUFBUWlaLFlBaURSLFNBQXNCMm1ELEdBQ3BCLElBQUlodUMsRUFjQTdzQixFQWJBODZELEVBQU9DLEVBQVFGLEdBQ2ZHLEVBQVdGLEVBQUssR0FDaEJHLEVBQWtCSCxFQUFLLEdBRXZCaHZELEVBQU0sSUFBSW92RCxFQVZoQixTQUFzQkwsRUFBS0csRUFBVUMsR0FDbkMsT0FBdUMsR0FBOUJELEVBQVdDLEdBQXVCLEVBQUtBLEVBUzlCRSxDQUFZTixFQUFLRyxFQUFVQyxJQUV6Q0csRUFBVSxFQUdWcnhELEVBQU1reEQsRUFBa0IsRUFDeEJELEVBQVcsRUFDWEEsRUFHSixJQUFLaDdELEVBQUksRUFBR0EsRUFBSStKLEVBQUsvSixHQUFLLEVBQ3hCNnNCLEVBQ0d3dUMsRUFBVVIsRUFBSXI1RCxXQUFXeEIsS0FBTyxHQUNoQ3E3RCxFQUFVUixFQUFJcjVELFdBQVd4QixFQUFJLEtBQU8sR0FDcENxN0QsRUFBVVIsRUFBSXI1RCxXQUFXeEIsRUFBSSxLQUFPLEVBQ3JDcTdELEVBQVVSLEVBQUlyNUQsV0FBV3hCLEVBQUksSUFDL0I4TCxFQUFJc3ZELEtBQWN2dUMsR0FBTyxHQUFNLElBQy9CL2dCLEVBQUlzdkQsS0FBY3Z1QyxHQUFPLEVBQUssSUFDOUIvZ0IsRUFBSXN2RCxLQUFtQixJQUFOdnVDLEVBR0ssSUFBcEJvdUMsSUFDRnB1QyxFQUNHd3VDLEVBQVVSLEVBQUlyNUQsV0FBV3hCLEtBQU8sRUFDaENxN0QsRUFBVVIsRUFBSXI1RCxXQUFXeEIsRUFBSSxLQUFPLEVBQ3ZDOEwsRUFBSXN2RCxLQUFtQixJQUFOdnVDLEdBR0ssSUFBcEJvdUMsSUFDRnB1QyxFQUNHd3VDLEVBQVVSLEVBQUlyNUQsV0FBV3hCLEtBQU8sR0FDaENxN0QsRUFBVVIsRUFBSXI1RCxXQUFXeEIsRUFBSSxLQUFPLEVBQ3BDcTdELEVBQVVSLEVBQUlyNUQsV0FBV3hCLEVBQUksS0FBTyxFQUN2QzhMLEVBQUlzdkQsS0FBY3Z1QyxHQUFPLEVBQUssSUFDOUIvZ0IsRUFBSXN2RCxLQUFtQixJQUFOdnVDLEdBR25CLE9BQU8vZ0IsR0EzRlQ3USxFQUFReVMsY0FrSFIsU0FBd0I0dEQsR0FRdEIsSUFQQSxJQUFJenVDLEVBQ0E5aUIsRUFBTXV4RCxFQUFNai9ELE9BQ1prL0QsRUFBYXh4RCxFQUFNLEVBQ25CeXhELEVBQVEsR0FJSHg3RCxFQUFJLEVBQUd5N0QsRUFBTzF4RCxFQUFNd3hELEVBQVl2N0QsRUFBSXk3RCxFQUFNejdELEdBSDlCLE1BSW5CdzdELEVBQU1qN0QsS0FBS203RCxFQUNUSixFQUFPdDdELEVBQUlBLEVBTE0sTUFLZ0J5N0QsRUFBT0EsRUFBUXo3RCxFQUwvQixRQVVGLElBQWZ1N0QsR0FDRjF1QyxFQUFNeXVDLEVBQU12eEQsRUFBTSxHQUNsQnl4RCxFQUFNajdELEtBQ0pvN0QsRUFBTzl1QyxHQUFPLEdBQ2Q4dUMsRUFBUTl1QyxHQUFPLEVBQUssSUFDcEIsT0FFc0IsSUFBZjB1QyxJQUNUMXVDLEdBQU95dUMsRUFBTXZ4RCxFQUFNLElBQU0sR0FBS3V4RCxFQUFNdnhELEVBQU0sR0FDMUN5eEQsRUFBTWo3RCxLQUNKbzdELEVBQU85dUMsR0FBTyxJQUNkOHVDLEVBQVE5dUMsR0FBTyxFQUFLLElBQ3BCOHVDLEVBQVE5dUMsR0FBTyxFQUFLLElBQ3BCLE1BSUosT0FBTzJ1QyxFQUFNNTZELEtBQUssS0EzSXBCLElBTEEsSUFBSSs2RCxFQUFTLEdBQ1ROLEVBQVksR0FDWkgsRUFBNEIsb0JBQWZqeUQsV0FBNkJBLFdBQWFrSCxNQUV2RDJELEVBQU8sbUVBQ0Y5VCxFQUFJLEVBQUcrSixFQUFNK0osRUFBS3pYLE9BQVEyRCxFQUFJK0osSUFBTy9KLEVBQzVDMjdELEVBQU8zN0QsR0FBSzhULEVBQUs5VCxHQUNqQnE3RCxFQUFVdm5ELEVBQUt0UyxXQUFXeEIsSUFBTUEsRUFRbEMsU0FBUys2RCxFQUFTRixHQUNoQixJQUFJOXdELEVBQU04d0QsRUFBSXgrRCxPQUVkLEdBQUkwTixFQUFNLEVBQUksRUFDWixNQUFNLElBQUlsTSxNQUFNLGtEQUtsQixJQUFJbTlELEVBQVdILEVBQUlqdkQsUUFBUSxLQU8zQixPQU5rQixJQUFkb3ZELElBQWlCQSxFQUFXanhELEdBTXpCLENBQUNpeEQsRUFKY0EsSUFBYWp4RCxFQUMvQixFQUNBLEVBQUtpeEQsRUFBVyxHQXNFdEIsU0FBU1UsRUFBYUosRUFBTzF3RCxFQUFPQyxHQUdsQyxJQUZBLElBQUlnaUIsRUFSb0J6WCxFQVNwQjJZLEVBQVMsR0FDSi90QixFQUFJNEssRUFBTzVLLEVBQUk2SyxFQUFLN0ssR0FBSyxFQUNoQzZzQixHQUNJeXVDLEVBQU10N0QsSUFBTSxHQUFNLFdBQ2xCczdELEVBQU10N0QsRUFBSSxJQUFNLEVBQUssUUFDUCxJQUFmczdELEVBQU10N0QsRUFBSSxJQUNiK3RCLEVBQU94dEIsS0FkRm83RCxHQURpQnZtRCxFQWVNeVgsSUFkVCxHQUFLLElBQ3hCOHVDLEVBQU92bUQsR0FBTyxHQUFLLElBQ25CdW1ELEVBQU92bUQsR0FBTyxFQUFJLElBQ2xCdW1ELEVBQWEsR0FBTnZtRCxJQWFULE9BQU8yWSxFQUFPbnRCLEtBQUssSUFqR3JCeTZELEVBQVUsSUFBSTc1RCxXQUFXLElBQU0sR0FDL0I2NUQsRUFBVSxJQUFJNzVELFdBQVcsSUFBTSxJLGNDbkIvQnZHLEVBQVFpUixLQUFPLFNBQVV0USxFQUFRc0gsRUFBUTA0RCxFQUFNQyxFQUFNdjdELEdBQ25ELElBQUlzQixFQUFHMkosRUFDSHV3RCxFQUFpQixFQUFUeDdELEVBQWN1N0QsRUFBTyxFQUM3QkUsR0FBUSxHQUFLRCxHQUFRLEVBQ3JCRSxFQUFRRCxHQUFRLEVBQ2hCRSxHQUFTLEVBQ1RqOEQsRUFBSTQ3RCxFQUFRdDdELEVBQVMsRUFBSyxFQUMxQjJYLEVBQUkyakQsR0FBUSxFQUFJLEVBQ2hCOTJDLEVBQUlscEIsRUFBT3NILEVBQVNsRCxHQU94QixJQUxBQSxHQUFLaVksRUFFTHJXLEVBQUlrakIsR0FBTSxJQUFPbTNDLEdBQVUsRUFDM0JuM0MsS0FBUW0zQyxFQUNSQSxHQUFTSCxFQUNGRyxFQUFRLEVBQUdyNkQsRUFBUyxJQUFKQSxFQUFXaEcsRUFBT3NILEVBQVNsRCxHQUFJQSxHQUFLaVksRUFBR2drRCxHQUFTLEdBS3ZFLElBSEExd0QsRUFBSTNKLEdBQU0sSUFBT3E2RCxHQUFVLEVBQzNCcjZELEtBQVFxNkQsRUFDUkEsR0FBU0osRUFDRkksRUFBUSxFQUFHMXdELEVBQVMsSUFBSkEsRUFBVzNQLEVBQU9zSCxFQUFTbEQsR0FBSUEsR0FBS2lZLEVBQUdna0QsR0FBUyxHQUV2RSxHQUFVLElBQU5yNkQsRUFDRkEsRUFBSSxFQUFJbzZELE1BQ0gsSUFBSXA2RCxJQUFNbTZELEVBQ2YsT0FBT3h3RCxFQUFJMndELElBQXNCbG9ELEtBQWQ4USxHQUFLLEVBQUksR0FFNUJ2WixHQUFRck8sS0FBSzJVLElBQUksRUFBR2dxRCxHQUNwQmo2RCxHQUFRbzZELEVBRVYsT0FBUWwzQyxHQUFLLEVBQUksR0FBS3ZaLEVBQUlyTyxLQUFLMlUsSUFBSSxFQUFHalEsRUFBSWk2RCxJQUc1QzVnRSxFQUFRMk8sTUFBUSxTQUFVaE8sRUFBUUwsRUFBTzJILEVBQVEwNEQsRUFBTUMsRUFBTXY3RCxHQUMzRCxJQUFJc0IsRUFBRzJKLEVBQUcrQixFQUNOd3VELEVBQWlCLEVBQVR4N0QsRUFBY3U3RCxFQUFPLEVBQzdCRSxHQUFRLEdBQUtELEdBQVEsRUFDckJFLEVBQVFELEdBQVEsRUFDaEJJLEVBQWUsS0FBVE4sRUFBYzMrRCxLQUFLMlUsSUFBSSxHQUFJLElBQU0zVSxLQUFLMlUsSUFBSSxHQUFJLElBQU0sRUFDMUQ3UixFQUFJNDdELEVBQU8sRUFBS3Q3RCxFQUFTLEVBQ3pCMlgsRUFBSTJqRCxFQUFPLEdBQUssRUFDaEI5MkMsRUFBSXZwQixFQUFRLEdBQWdCLElBQVZBLEdBQWUsRUFBSUEsRUFBUSxFQUFLLEVBQUksRUFtQzFELElBakNBQSxFQUFRMkIsS0FBSzJmLElBQUl0aEIsR0FFYm1RLE1BQU1uUSxJQUFVQSxJQUFVeVksS0FDNUJ6SSxFQUFJRyxNQUFNblEsR0FBUyxFQUFJLEVBQ3ZCcUcsRUFBSW02RCxJQUVKbjZELEVBQUkxRSxLQUFLd1YsTUFBTXhWLEtBQUtrL0QsSUFBSTdnRSxHQUFTMkIsS0FBS20vRCxLQUNsQzlnRSxHQUFTK1IsRUFBSXBRLEtBQUsyVSxJQUFJLEdBQUlqUSxJQUFNLElBQ2xDQSxJQUNBMEwsR0FBSyxJQUdML1IsR0FERXFHLEVBQUlvNkQsR0FBUyxFQUNORyxFQUFLN3VELEVBRUw2dUQsRUFBS2ovRCxLQUFLMlUsSUFBSSxFQUFHLEVBQUltcUQsSUFFcEIxdUQsR0FBSyxJQUNmMUwsSUFDQTBMLEdBQUssR0FHSDFMLEVBQUlvNkQsR0FBU0QsR0FDZnh3RCxFQUFJLEVBQ0ozSixFQUFJbTZELEdBQ0tuNkQsRUFBSW82RCxHQUFTLEdBQ3RCendELEdBQU1oUSxFQUFRK1IsRUFBSyxHQUFLcFEsS0FBSzJVLElBQUksRUFBR2dxRCxHQUNwQ2o2RCxHQUFRbzZELElBRVJ6d0QsRUFBSWhRLEVBQVEyQixLQUFLMlUsSUFBSSxFQUFHbXFELEVBQVEsR0FBSzkrRCxLQUFLMlUsSUFBSSxFQUFHZ3FELEdBQ2pEajZELEVBQUksSUFJRGk2RCxHQUFRLEVBQUdqZ0UsRUFBT3NILEVBQVNsRCxHQUFTLElBQUp1TCxFQUFVdkwsR0FBS2lZLEVBQUcxTSxHQUFLLElBQUtzd0QsR0FBUSxHQUkzRSxJQUZBajZELEVBQUtBLEdBQUtpNkQsRUFBUXR3RCxFQUNsQnV3RCxHQUFRRCxFQUNEQyxFQUFPLEVBQUdsZ0UsRUFBT3NILEVBQVNsRCxHQUFTLElBQUo0QixFQUFVNUIsR0FBS2lZLEVBQUdyVyxHQUFLLElBQUtrNkQsR0FBUSxHQUUxRWxnRSxFQUFPc0gsRUFBU2xELEVBQUlpWSxJQUFVLElBQUo2TSxJLDZCQ2hGNUIsU0FBUzZTLEVBQVFrWixFQUFReXJCLEdBQWtCLElBQUloc0MsRUFBT3gxQixPQUFPdzFCLEtBQUt1Z0IsR0FBUyxHQUFJLzFDLE9BQU84OEIsc0JBQXVCLENBQUUsSUFBSTJrQyxFQUFVemhFLE9BQU84OEIsc0JBQXNCaVosR0FBYXlyQixJQUFnQkMsRUFBVUEsRUFBUXhrQixRQUFPLFNBQVV5a0IsR0FBTyxPQUFPMWhFLE9BQU8yaEUseUJBQXlCNXJCLEVBQVEyckIsR0FBS2hoRSxlQUFnQjgwQixFQUFLL3ZCLEtBQUszQixNQUFNMHhCLEVBQU1pc0MsR0FBWSxPQUFPanNDLEVBSTlVLFNBQVNvc0MsRUFBZ0IzK0QsRUFBSzlCLEVBQUtWLEdBQWlLLE9BQXBKVSxLQUFPOEIsRUFBT2pELE9BQU8rVCxlQUFlOVEsRUFBSzlCLEVBQUssQ0FBRVYsTUFBT0EsRUFBT0MsWUFBWSxFQUFNRSxjQUFjLEVBQU1ELFVBQVUsSUFBa0JzQyxFQUFJOUIsR0FBT1YsRUFBZ0J3QyxFQUkzTSxTQUFTNCtELEVBQWtCaHRELEVBQVFpdEQsR0FBUyxJQUFLLElBQUk1OEQsRUFBSSxFQUFHQSxFQUFJNDhELEVBQU12Z0UsT0FBUTJELElBQUssQ0FBRSxJQUFJNjhELEVBQWFELEVBQU01OEQsR0FBSTY4RCxFQUFXcmhFLFdBQWFxaEUsRUFBV3JoRSxhQUFjLEVBQU9xaEUsRUFBV25oRSxjQUFlLEVBQVUsVUFBV21oRSxJQUFZQSxFQUFXcGhFLFVBQVcsR0FBTVgsT0FBTytULGVBQWVjLEVBQVFrdEQsRUFBVzVnRSxJQUFLNGdFLElBSTdTLElBQ0loaEUsRUFEVyxFQUFRLElBQ0RBLE9BR2xCNFQsRUFEWSxFQUFRLEtBQ0FBLFFBRXBCcXRELEVBQVNydEQsR0FBV0EsRUFBUXF0RCxRQUFVLFVBTTFDOWhFLEVBQU9DLFFBRVAsV0FDRSxTQUFTNGlELEtBckJYLFNBQXlCLytDLEVBQVVpK0QsR0FBZSxLQUFNaitELGFBQW9CaStELEdBQWdCLE1BQU0sSUFBSXJnRSxVQUFVLHFDQXNCNUdzZ0UsQ0FBZ0J6K0QsS0FBTXMvQyxHQUV0QnQvQyxLQUFLMGhELEtBQU8sS0FDWjFoRCxLQUFLcXFELEtBQU8sS0FDWnJxRCxLQUFLbEMsT0FBUyxFQXRCbEIsSUFBc0IwZ0UsRUFBYUUsRUFBWUMsRUFvTTdDLE9BcE1vQkgsRUF5QlBsZixHQXpCb0JvZixFQXlCUixDQUFDLENBQ3hCaGhFLElBQUssT0FDTFYsTUFBTyxTQUFjbzFCLEdBQ25CLElBQUlxYyxFQUFRLENBQ1YzcUMsS0FBTXN1QixFQUNOekMsS0FBTSxNQUVKM3ZCLEtBQUtsQyxPQUFTLEVBQUdrQyxLQUFLcXFELEtBQUsxNkIsS0FBTzhlLEVBQVd6dUMsS0FBSzBoRCxLQUFPalQsRUFDN0R6dUMsS0FBS3FxRCxLQUFPNWIsSUFDVnp1QyxLQUFLbEMsU0FFUixDQUNESixJQUFLLFVBQ0xWLE1BQU8sU0FBaUJvMUIsR0FDdEIsSUFBSXFjLEVBQVEsQ0FDVjNxQyxLQUFNc3VCLEVBQ056QyxLQUFNM3ZCLEtBQUswaEQsTUFFTyxJQUFoQjFoRCxLQUFLbEMsU0FBY2tDLEtBQUtxcUQsS0FBTzViLEdBQ25DenVDLEtBQUswaEQsS0FBT2pULElBQ1Z6dUMsS0FBS2xDLFNBRVIsQ0FDREosSUFBSyxRQUNMVixNQUFPLFdBQ0wsR0FBb0IsSUFBaEJnRCxLQUFLbEMsT0FBVCxDQUNBLElBQUlnVSxFQUFNOVIsS0FBSzBoRCxLQUFLNTlDLEtBR3BCLE9BRm9CLElBQWhCOUQsS0FBS2xDLE9BQWNrQyxLQUFLMGhELEtBQU8xaEQsS0FBS3FxRCxLQUFPLEtBQVVycUQsS0FBSzBoRCxLQUFPMWhELEtBQUswaEQsS0FBSy94QixPQUM3RTN2QixLQUFLbEMsT0FDQWdVLEtBRVIsQ0FDRHBVLElBQUssUUFDTFYsTUFBTyxXQUNMZ0QsS0FBSzBoRCxLQUFPMWhELEtBQUtxcUQsS0FBTyxLQUN4QnJxRCxLQUFLbEMsT0FBUyxJQUVmLENBQ0RKLElBQUssT0FDTFYsTUFBTyxTQUFjdXBCLEdBQ25CLEdBQW9CLElBQWhCdm1CLEtBQUtsQyxPQUFjLE1BQU8sR0FJOUIsSUFIQSxJQUFJa2IsRUFBSWhaLEtBQUswaEQsS0FDVDV2QyxFQUFNLEdBQUtrSCxFQUFFbFYsS0FFVmtWLEVBQUlBLEVBQUUyVyxNQUNYN2QsR0FBT3lVLEVBQUl2TixFQUFFbFYsS0FHZixPQUFPZ08sSUFFUixDQUNEcFUsSUFBSyxTQUNMVixNQUFPLFNBQWdCK1AsR0FDckIsR0FBb0IsSUFBaEIvTSxLQUFLbEMsT0FBYyxPQUFPUixFQUFPVSxNQUFNLEdBSzNDLElBSkEsSUFyRWNSLEVBQUs0VCxFQUFRek0sRUFxRXZCbU4sRUFBTXhVLEVBQU9XLFlBQVk4TyxJQUFNLEdBQy9CaU0sRUFBSWhaLEtBQUswaEQsS0FDVGpnRCxFQUFJLEVBRUR1WCxHQXpFT3hiLEVBMEVEd2IsRUFBRWxWLEtBMUVJc04sRUEwRUVVLEVBMUVNbk4sRUEwRURsRCxFQXpFOUJuRSxFQUFPUixVQUFVNE8sS0FBSzlKLEtBQUtwRSxFQUFLNFQsRUFBUXpNLEdBMEVsQ2xELEdBQUt1WCxFQUFFbFYsS0FBS2hHLE9BQ1prYixFQUFJQSxFQUFFMlcsS0FHUixPQUFPN2QsSUFHUixDQUNEcFUsSUFBSyxVQUNMVixNQUFPLFNBQWlCK1AsRUFBR3E5QyxHQUN6QixJQUFJdDRDLEVBY0osT0FaSS9FLEVBQUkvTSxLQUFLMGhELEtBQUs1OUMsS0FBS2hHLFFBRXJCZ1UsRUFBTTlSLEtBQUswaEQsS0FBSzU5QyxLQUFLakMsTUFBTSxFQUFHa0wsR0FDOUIvTSxLQUFLMGhELEtBQUs1OUMsS0FBTzlELEtBQUswaEQsS0FBSzU5QyxLQUFLakMsTUFBTWtMLElBR3RDK0UsRUFGUy9FLElBQU0vTSxLQUFLMGhELEtBQUs1OUMsS0FBS2hHLE9BRXhCa0MsS0FBSzRwQixRQUdMd2dDLEVBQWFwcUQsS0FBSzQrRCxXQUFXN3hELEdBQUsvTSxLQUFLNitELFdBQVc5eEQsR0FHbkQrRSxJQUVSLENBQ0RwVSxJQUFLLFFBQ0xWLE1BQU8sV0FDTCxPQUFPZ0QsS0FBSzBoRCxLQUFLNTlDLE9BR2xCLENBQ0RwRyxJQUFLLGFBQ0xWLE1BQU8sU0FBb0IrUCxHQUN6QixJQUFJaU0sRUFBSWhaLEtBQUswaEQsS0FDVDN5QyxFQUFJLEVBQ0orQyxFQUFNa0gsRUFBRWxWLEtBR1osSUFGQWlKLEdBQUsrRSxFQUFJaFUsT0FFRmtiLEVBQUlBLEVBQUUyVyxNQUFNLENBQ2pCLElBQUluaEIsRUFBTXdLLEVBQUVsVixLQUNSdTVCLEVBQUt0d0IsRUFBSXlCLEVBQUkxUSxPQUFTMFEsRUFBSTFRLE9BQVNpUCxFQUl2QyxHQUhJc3dCLElBQU83dUIsRUFBSTFRLE9BQVFnVSxHQUFPdEQsRUFBU3NELEdBQU90RCxFQUFJM00sTUFBTSxFQUFHa0wsR0FHakQsSUFGVkEsR0FBS3N3QixHQUVRLENBQ1BBLElBQU83dUIsRUFBSTFRLFVBQ1hpUixFQUNFaUssRUFBRTJXLEtBQU0zdkIsS0FBSzBoRCxLQUFPMW9DLEVBQUUyVyxLQUFVM3ZCLEtBQUswaEQsS0FBTzFoRCxLQUFLcXFELEtBQU8sT0FFNURycUQsS0FBSzBoRCxLQUFPMW9DLEVBQ1pBLEVBQUVsVixLQUFPMEssRUFBSTNNLE1BQU13N0IsSUFHckIsUUFHQXR1QixFQUlKLE9BREEvTyxLQUFLbEMsUUFBVWlSLEVBQ1IrQyxJQUdSLENBQ0RwVSxJQUFLLGFBQ0xWLE1BQU8sU0FBb0IrUCxHQUN6QixJQUFJK0UsRUFBTXhVLEVBQU9XLFlBQVk4TyxHQUN6QmlNLEVBQUloWixLQUFLMGhELEtBQ1QzeUMsRUFBSSxFQUlSLElBSEFpSyxFQUFFbFYsS0FBSzRILEtBQUtvRyxHQUNaL0UsR0FBS2lNLEVBQUVsVixLQUFLaEcsT0FFTGtiLEVBQUlBLEVBQUUyVyxNQUFNLENBQ2pCLElBQUlweEIsRUFBTXlhLEVBQUVsVixLQUNSdTVCLEVBQUt0d0IsRUFBSXhPLEVBQUlULE9BQVNTLEVBQUlULE9BQVNpUCxFQUl2QyxHQUhBeE8sRUFBSW1OLEtBQUtvRyxFQUFLQSxFQUFJaFUsT0FBU2lQLEVBQUcsRUFBR3N3QixHQUd2QixJQUZWdHdCLEdBQUtzd0IsR0FFUSxDQUNQQSxJQUFPOStCLEVBQUlULFVBQ1hpUixFQUNFaUssRUFBRTJXLEtBQU0zdkIsS0FBSzBoRCxLQUFPMW9DLEVBQUUyVyxLQUFVM3ZCLEtBQUswaEQsS0FBTzFoRCxLQUFLcXFELEtBQU8sT0FFNURycUQsS0FBSzBoRCxLQUFPMW9DLEVBQ1pBLEVBQUVsVixLQUFPdkYsRUFBSXNELE1BQU13N0IsSUFHckIsUUFHQXR1QixFQUlKLE9BREEvTyxLQUFLbEMsUUFBVWlSLEVBQ1IrQyxJQUdSLENBQ0RwVSxJQUFLNmdFLEVBQ0x2aEUsTUFBTyxTQUFlNHFCLEVBQUcwSyxHQUN2QixPQUFPcGhCLEVBQVFsUixLQW5NckIsU0FBdUJvUixHQUFVLElBQUssSUFBSTNQLEVBQUksRUFBR0EsRUFBSW5CLFVBQVV4QyxPQUFRMkQsSUFBSyxDQUFFLElBQUlxOUQsRUFBeUIsTUFBaEJ4K0QsVUFBVW1CLEdBQWFuQixVQUFVbUIsR0FBSyxHQUFRQSxFQUFJLEVBQUsyM0IsRUFBUTc4QixPQUFPdWlFLElBQVMsR0FBTTk5QixTQUFRLFNBQVV0akMsR0FBT3lnRSxFQUFnQi9zRCxFQUFRMVQsRUFBS29oRSxFQUFPcGhFLE9BQXNCbkIsT0FBT3dpRSwwQkFBNkJ4aUUsT0FBT3lpRSxpQkFBaUI1dEQsRUFBUTdVLE9BQU93aUUsMEJBQTBCRCxJQUFtQjFsQyxFQUFRNzhCLE9BQU91aUUsSUFBUzk5QixTQUFRLFNBQVV0akMsR0FBT25CLE9BQU8rVCxlQUFlYyxFQUFRMVQsRUFBS25CLE9BQU8yaEUseUJBQXlCWSxFQUFRcGhFLE9BQWUsT0FBTzBULEVBbU1sZjZ0RCxDQUFjLEdBQUkzc0MsRUFBUyxDQUU5QzRzQyxNQUFPLEVBRVBDLGVBQWUsVUEvTHVEZixFQUFrQkksRUFBWTFoRSxVQUFXNGhFLEdBQWlCQyxHQUFhUCxFQUFrQkksRUFBYUcsR0FvTTNLcmYsRUFwTFQsSSw4QkM1QkEsWUFFQSxJQUFJOGYsRUFFSixTQUFTakIsRUFBZ0IzK0QsRUFBSzlCLEVBQUtWLEdBQWlLLE9BQXBKVSxLQUFPOEIsRUFBT2pELE9BQU8rVCxlQUFlOVEsRUFBSzlCLEVBQUssQ0FBRVYsTUFBT0EsRUFBT0MsWUFBWSxFQUFNRSxjQUFjLEVBQU1ELFVBQVUsSUFBa0JzQyxFQUFJOUIsR0FBT1YsRUFBZ0J3QyxFQUUzTSxJQUFJMnNDLEVBQVcsRUFBUSxJQUVuQmt6QixFQUFlanZELE9BQU8sZUFDdEJrdkQsRUFBY2x2RCxPQUFPLGNBQ3JCbXZELEVBQVNudkQsT0FBTyxTQUNoQm92RCxFQUFTcHZELE9BQU8sU0FDaEJxdkQsRUFBZXJ2RCxPQUFPLGVBQ3RCc3ZELEVBQWlCdHZELE9BQU8saUJBQ3hCdXZELEVBQVV2dkQsT0FBTyxVQUVyQixTQUFTd3ZELEVBQWlCNWlFLEVBQU8yMEIsR0FDL0IsTUFBTyxDQUNMMzBCLE1BQU9BLEVBQ1AyMEIsS0FBTUEsR0FJVixTQUFTa3VDLEVBQWVDLEdBQ3RCLElBQUlubUMsRUFBVW1tQyxFQUFLVCxHQUVuQixHQUFnQixPQUFaMWxDLEVBQWtCLENBQ3BCLElBQUk3MUIsRUFBT2c4RCxFQUFLSCxHQUFTaHlELE9BSVosT0FBVDdKLElBQ0ZnOEQsRUFBS0wsR0FBZ0IsS0FDckJLLEVBQUtULEdBQWdCLEtBQ3JCUyxFQUFLUixHQUFlLEtBQ3BCM2xDLEVBQVFpbUMsRUFBaUI5N0QsR0FBTSxNQUtyQyxTQUFTaThELEVBQVdELEdBR2xCLzRELEVBQVE4ckIsU0FBU2d0QyxFQUFnQkMsR0FnQm5DLElBQUlFLEVBQXlCempFLE9BQU95L0IsZ0JBQWUsZUFDL0Npa0MsRUFBdUMxakUsT0FBTzJqRSxnQkE0RC9DL0IsRUE1RCtEaUIsRUFBd0IsQ0FDeEYsYUFDRSxPQUFPcC9ELEtBQUsyL0QsSUFHZGh3QyxLQUFNLFdBQ0osSUFBSTZlLEVBQVF4dUMsS0FJUm84QixFQUFRcDhCLEtBQUt1L0QsR0FFakIsR0FBYyxPQUFWbmpDLEVBQ0YsT0FBTzFDLFFBQVFFLE9BQU93QyxHQUd4QixHQUFJcDhCLEtBQUt3L0QsR0FDUCxPQUFPOWxDLFFBQVFDLFFBQVFpbUMsT0FBaUJwaEUsR0FBVyxJQUdyRCxHQUFJd0IsS0FBSzIvRCxHQUFTenNDLFVBS2hCLE9BQU8sSUFBSXdHLFNBQVEsU0FBVUMsRUFBU0MsR0FDcEM3eUIsRUFBUThyQixVQUFTLFdBQ1gyYixFQUFNK3dCLEdBQ1IzbEMsRUFBTzRVLEVBQU0rd0IsSUFFYjVsQyxFQUFRaW1DLE9BQWlCcGhFLEdBQVcsVUFVNUMsSUFDSTJoRSxFQURBQyxFQUFjcGdFLEtBQUt5L0QsR0FHdkIsR0FBSVcsRUFDRkQsRUFBVSxJQUFJem1DLFFBMURwQixTQUFxQjBtQyxFQUFhTixHQUNoQyxPQUFPLFNBQVVubUMsRUFBU0MsR0FDeEJ3bUMsRUFBWUMsTUFBSyxXQUNYUCxFQUFLTixHQUNQN2xDLEVBQVFpbUMsT0FBaUJwaEUsR0FBVyxJQUl0Q3NoRSxFQUFLSixHQUFnQi9sQyxFQUFTQyxLQUM3QkEsSUFpRHFCMG1DLENBQVlGLEVBQWFwZ0UsV0FDMUMsQ0FHTCxJQUFJOEQsRUFBTzlELEtBQUsyL0QsR0FBU2h5RCxPQUV6QixHQUFhLE9BQVQ3SixFQUNGLE9BQU80MUIsUUFBUUMsUUFBUWltQyxFQUFpQjk3RCxHQUFNLElBR2hEcThELEVBQVUsSUFBSXptQyxRQUFRMTVCLEtBQUswL0QsSUFJN0IsT0FEQTEvRCxLQUFLeS9ELEdBQWdCVSxFQUNkQSxJQUUrQi92RCxPQUFPeXpDLGVBQWUsV0FDOUQsT0FBTzdqRCxRQUNMbStELEVBQWdCaUIsRUFBdUIsVUFBVSxXQUNuRCxJQUFJMVUsRUFBUzFxRCxLQUtiLE9BQU8sSUFBSTA1QixTQUFRLFNBQVVDLEVBQVNDLEdBQ3BDOHdCLEVBQU9pVixHQUFTaHVCLFFBQVEsTUFBTSxTQUFVM3lDLEdBQ2xDQSxFQUNGNDZCLEVBQU81NkIsR0FJVDI2QixFQUFRaW1DLE9BQWlCcGhFLEdBQVcsYUFHdEM0Z0UsR0FBd0JZLEdBb0U1QnZqRSxFQUFPQyxRQWxFaUMsU0FBMkNrdkMsR0FDakYsSUFBSTIwQixFQUVBQyxFQUFXamtFLE9BQU9DLE9BQU95akUsR0FBNEQ5QixFQUFyQm9DLEVBQWlCLEdBQW9DWixFQUFTLENBQ2hJM2lFLE1BQU80dUMsRUFDUDF1QyxVQUFVLElBQ1JpaEUsRUFBZ0JvQyxFQUFnQmxCLEVBQWMsQ0FDaERyaUUsTUFBTyxLQUNQRSxVQUFVLElBQ1JpaEUsRUFBZ0JvQyxFQUFnQmpCLEVBQWEsQ0FDL0N0aUUsTUFBTyxLQUNQRSxVQUFVLElBQ1JpaEUsRUFBZ0JvQyxFQUFnQmhCLEVBQVEsQ0FDMUN2aUUsTUFBTyxLQUNQRSxVQUFVLElBQ1JpaEUsRUFBZ0JvQyxFQUFnQmYsRUFBUSxDQUMxQ3hpRSxNQUFPNHVDLEVBQU8zWSxlQUFlb1osV0FDN0JudkMsVUFBVSxJQUNSaWhFLEVBQWdCb0MsRUFBZ0JiLEVBQWdCLENBQ2xEMWlFLE1BQU8sU0FBZTI4QixFQUFTQyxHQUM3QixJQUFJOTFCLEVBQU8wOEQsRUFBU2IsR0FBU2h5RCxPQUV6QjdKLEdBQ0YwOEQsRUFBU2YsR0FBZ0IsS0FDekJlLEVBQVNuQixHQUFnQixLQUN6Qm1CLEVBQVNsQixHQUFlLEtBQ3hCM2xDLEVBQVFpbUMsRUFBaUI5N0QsR0FBTSxNQUUvQjA4RCxFQUFTbkIsR0FBZ0IxbEMsRUFDekI2bUMsRUFBU2xCLEdBQWUxbEMsSUFHNUIxOEIsVUFBVSxJQUNScWpFLElBOEJKLE9BN0JBQyxFQUFTZixHQUFnQixLQUN6QnR6QixFQUFTUCxHQUFRLFNBQVU1c0MsR0FDekIsR0FBSUEsR0FBb0IsK0JBQWJBLEVBQUl1VyxLQUF1QyxDQUNwRCxJQUFJcWtCLEVBQVM0bUMsRUFBU2xCLEdBV3RCLE9BUmUsT0FBWDFsQyxJQUNGNG1DLEVBQVNmLEdBQWdCLEtBQ3pCZSxFQUFTbkIsR0FBZ0IsS0FDekJtQixFQUFTbEIsR0FBZSxLQUN4QjFsQyxFQUFPNTZCLFNBR1R3aEUsRUFBU2pCLEdBQVV2Z0UsR0FJckIsSUFBSTI2QixFQUFVNm1DLEVBQVNuQixHQUVQLE9BQVoxbEMsSUFDRjZtQyxFQUFTZixHQUFnQixLQUN6QmUsRUFBU25CLEdBQWdCLEtBQ3pCbUIsRUFBU2xCLEdBQWUsS0FDeEIzbEMsRUFBUWltQyxPQUFpQnBoRSxHQUFXLEtBR3RDZ2lFLEVBQVNoQixJQUFVLEtBRXJCNXpCLEVBQU9sUCxHQUFHLFdBQVlxakMsRUFBV3RrQyxLQUFLLEtBQU0ra0MsSUFDckNBLEssZ0NDM01UL2pFLEVBQU9DLFFBQVUsV0FDZixNQUFNLElBQUk0QyxNQUFNLG1ELDZCQ3dCbEI3QyxFQUFPQyxRQUFVNHhDLEVBRWpCLElBQUloZSxFQUFZLEVBQVEsS0FJeEIsU0FBU2dlLEVBQVloYyxHQUNuQixLQUFNdHlCLGdCQUFnQnN1QyxHQUFjLE9BQU8sSUFBSUEsRUFBWWhjLEdBQzNEaEMsRUFBVTF1QixLQUFLNUIsS0FBTXN5QixHQUp2QixFQUFRLEdBQVIsQ0FBb0JnYyxFQUFhaGUsR0FPakNnZSxFQUFZeHhDLFVBQVUyMEIsV0FBYSxTQUFVb2dCLEVBQU92ekMsRUFBVTgwQixHQUM1REEsRUFBRyxLQUFNeWUsSyw2QkNqQ1gsSUFBSWxHLEVBV0osSUFBSTZULEVBQWlCLEVBQVEsSUFBbUI5ckIsTUFDNUMrc0MsRUFBbUJqaEIsRUFBZWloQixpQkFDbEM5YixFQUF1Qm5GLEVBQWVtRixxQkFFMUMsU0FBU2paLEVBQUsxc0MsR0FFWixHQUFJQSxFQUFLLE1BQU1BLEVBT2pCLFNBQVMwaEUsRUFBVTkwQixFQUFRdVUsRUFBUzdQLEVBQVN4RSxHQUMzQ0EsRUF2QkYsU0FBY0EsR0FDWixJQUFJQyxHQUFTLEVBQ2IsT0FBTyxXQUNEQSxJQUNKQSxHQUFTLEVBQ1RELEVBQVN6ckMsV0FBTSxFQUFRQyxhQWtCZG15QixDQUFLcVosR0FDaEIsSUFBSTYwQixHQUFTLEVBQ2IvMEIsRUFBT2xQLEdBQUcsU0FBUyxXQUNqQmlrQyxHQUFTLFVBRUNuaUUsSUFBUm10QyxJQUFtQkEsRUFBTSxFQUFRLEtBQ3JDQSxFQUFJQyxFQUFRLENBQ1ZyWixTQUFVNHRCLEVBQ1ZqakQsU0FBVW96QyxJQUNULFNBQVV0eEMsR0FDWCxHQUFJQSxFQUFLLE9BQU84c0MsRUFBUzlzQyxHQUN6QjJoRSxHQUFTLEVBQ1Q3MEIsT0FFRixJQUFJNVksR0FBWSxFQUNoQixPQUFPLFNBQVVsMEIsR0FDZixJQUFJMmhFLElBQ0F6dEMsRUFHSixPQUZBQSxHQUFZLEVBdkJoQixTQUFtQjBZLEdBQ2pCLE9BQU9BLEVBQU9jLFdBQXFDLG1CQUFqQmQsRUFBT2UsTUF3Qm5DQyxDQUFVaEIsR0FBZ0JBLEVBQU9lLFFBQ1AsbUJBQW5CZixFQUFPK0YsUUFBK0IvRixFQUFPK0YsZUFDeEQ3RixFQUFTOXNDLEdBQU8sSUFBSTJsRCxFQUFxQixVQUk3QyxTQUFTL2lELEVBQUtzL0IsR0FDWkEsSUFHRixTQUFTcVIsRUFBS3gwQyxFQUFNNmlFLEdBQ2xCLE9BQU83aUUsRUFBS3cwQyxLQUFLcXVCLEdBR25CLFNBQVNDLEVBQVlDLEdBQ25CLE9BQUtBLEVBQVFoakUsT0FDOEIsbUJBQWhDZ2pFLEVBQVFBLEVBQVFoakUsT0FBUyxHQUEwQjR0QyxFQUN2RG8xQixFQUFROWpDLE1BRmEwTyxFQWdDOUJqdkMsRUFBT0MsUUEzQlAsV0FDRSxJQUFLLElBQUl5NEIsRUFBTzcwQixVQUFVeEMsT0FBUWdqRSxFQUFVLElBQUlsdkQsTUFBTXVqQixHQUFPcnVCLEVBQU8sRUFBR0EsRUFBT3F1QixFQUFNcnVCLElBQ2xGZzZELEVBQVFoNkQsR0FBUXhHLFVBQVV3RyxHQUc1QixJQU9JczFCLEVBUEEwUCxFQUFXKzBCLEVBQVlDLEdBRzNCLEdBRklsdkQsTUFBTXhILFFBQVEwMkQsRUFBUSxNQUFLQSxFQUFVQSxFQUFRLElBRTdDQSxFQUFRaGpFLE9BQVMsRUFDbkIsTUFBTSxJQUFJMmlFLEVBQWlCLFdBSTdCLElBQUlNLEVBQVdELEVBQVF2c0MsS0FBSSxTQUFVcVgsRUFBUW5xQyxHQUMzQyxJQUFJMCtDLEVBQVUxK0MsRUFBSXEvRCxFQUFRaGpFLE9BQVMsRUFFbkMsT0FBTzRpRSxFQUFVOTBCLEVBQVF1VSxFQURYMStDLEVBQUksR0FDeUIsU0FBVXpDLEdBQzlDbzlCLElBQU9BLEVBQVFwOUIsR0FDaEJBLEdBQUsraEUsRUFBUy8vQixRQUFRcC9CLEdBQ3RCdStDLElBQ0o0Z0IsRUFBUy8vQixRQUFRcC9CLEdBQ2pCa3FDLEVBQVMxUCxVQUdiLE9BQU8wa0MsRUFBUUUsT0FBT3p1QixLLGdCQ3JGeEIsSUFBSTU1QixFQUFXLEVBQVEsSUFDbkJtYyxFQUFPLEVBQVEsSUFDZngzQixFQUFTLEVBQVEsSUFBZUEsT0FFaEN3b0QsRUFBSSxDQUNOLFdBQVksWUFBWSxZQUFnQixXQUd0Qy9ILEVBQUksSUFBSW5zQyxNQUFNLElBRWxCLFNBQVNxdkQsSUFDUGpoRSxLQUFLRyxPQUNMSCxLQUFLZ21ELEdBQUtqSSxFQUVWanBCLEVBQUtsekIsS0FBSzVCLEtBQU0sR0FBSSxJQW1CdEIsU0FBU2toRSxFQUFRcnFELEdBQ2YsT0FBUUEsR0FBTyxHQUFPQSxJQUFRLEVBR2hDLFNBQVNzcUQsRUFBSTU2QyxFQUFHelosRUFBR2lDLEVBQUcySyxHQUNwQixPQUFVLElBQU42TSxFQUFpQnpaLEVBQUlpQyxHQUFRakMsRUFBSzRNLEVBQzVCLElBQU42TSxFQUFpQnpaLEVBQUlpQyxFQUFNakMsRUFBSTRNLEVBQU0zSyxFQUFJMkssRUFDdEM1TSxFQUFJaUMsRUFBSTJLLEVBdkJqQmYsRUFBU3NvRCxFQUFLbnNDLEdBRWRtc0MsRUFBSW5rRSxVQUFVcUQsS0FBTyxXQU9uQixPQU5BSCxLQUFLOHFDLEdBQUssV0FDVjlxQyxLQUFLK3FDLEdBQUssV0FDVi9xQyxLQUFLZ3JDLEdBQUssV0FDVmhyQyxLQUFLaXJDLEdBQUssVUFDVmpyQyxLQUFLbXRDLEdBQUssV0FFSG50QyxNQWlCVGloRSxFQUFJbmtFLFVBQVVxMEIsUUFBVSxTQUFVeUYsR0FTaEMsSUFSQSxJQWZjL2YsRUFlVmtuQyxFQUFJLzlDLEtBQUtnbUQsR0FFVHYxQyxFQUFjLEVBQVZ6USxLQUFLOHFDLEdBQ1RoK0IsRUFBYyxFQUFWOU0sS0FBSytxQyxHQUNUaDhCLEVBQWMsRUFBVi9PLEtBQUtnckMsR0FDVHR4QixFQUFjLEVBQVYxWixLQUFLaXJDLEdBQ1Q1bkMsRUFBYyxFQUFWckQsS0FBS210QyxHQUVKMXJDLEVBQUksRUFBR0EsRUFBSSxLQUFNQSxFQUFHczhDLEVBQUV0OEMsR0FBS20xQixFQUFFampCLFlBQWdCLEVBQUpsUyxHQUNsRCxLQUFPQSxFQUFJLEtBQU1BLEVBQUdzOEMsRUFBRXQ4QyxHQUFLczhDLEVBQUV0OEMsRUFBSSxHQUFLczhDLEVBQUV0OEMsRUFBSSxHQUFLczhDLEVBQUV0OEMsRUFBSSxJQUFNczhDLEVBQUV0OEMsRUFBSSxJQUVuRSxJQUFLLElBQUlzTSxFQUFJLEVBQUdBLEVBQUksS0FBTUEsRUFBRyxDQUMzQixJQUFJd1ksS0FBT3hZLEVBQUksSUFDWGtRLEVBQW9ELElBNUI1Q3BILEVBNEJHcEcsSUEzQkYsRUFBTW9HLElBQVEsSUEyQlBzcUQsRUFBRzU2QyxFQUFHelosRUFBR2lDLEVBQUcySyxHQUFLclcsRUFBSTA2QyxFQUFFaHdDLEdBQUsrM0MsRUFBRXYvQixHQUVsRGxqQixFQUFJcVcsRUFDSkEsRUFBSTNLLEVBQ0pBLEVBQUlteUQsRUFBT3AwRCxHQUNYQSxFQUFJMkQsRUFDSkEsRUFBSXdOLEVBR05qZSxLQUFLOHFDLEdBQU1yNkIsRUFBSXpRLEtBQUs4cUMsR0FBTSxFQUMxQjlxQyxLQUFLK3FDLEdBQU1qK0IsRUFBSTlNLEtBQUsrcUMsR0FBTSxFQUMxQi9xQyxLQUFLZ3JDLEdBQU1qOEIsRUFBSS9PLEtBQUtnckMsR0FBTSxFQUMxQmhyQyxLQUFLaXJDLEdBQU12eEIsRUFBSTFaLEtBQUtpckMsR0FBTSxFQUMxQmpyQyxLQUFLbXRDLEdBQU05cEMsRUFBSXJELEtBQUttdEMsR0FBTSxHQUc1Qjh6QixFQUFJbmtFLFVBQVU4NEIsTUFBUSxXQUNwQixJQUFJbUIsRUFBSXo1QixFQUFPVyxZQUFZLElBUTNCLE9BTkE4NEIsRUFBRS9oQixhQUF1QixFQUFWaFYsS0FBSzhxQyxHQUFRLEdBQzVCL1QsRUFBRS9oQixhQUF1QixFQUFWaFYsS0FBSytxQyxHQUFRLEdBQzVCaFUsRUFBRS9oQixhQUF1QixFQUFWaFYsS0FBS2dyQyxHQUFRLEdBQzVCalUsRUFBRS9oQixhQUF1QixFQUFWaFYsS0FBS2lyQyxHQUFRLElBQzVCbFUsRUFBRS9oQixhQUF1QixFQUFWaFYsS0FBS210QyxHQUFRLElBRXJCcFcsR0FHVHQ2QixFQUFPQyxRQUFVdWtFLEcsZ0JDcEZqQixJQUFJdG9ELEVBQVcsRUFBUSxJQUNuQm1jLEVBQU8sRUFBUSxJQUNmeDNCLEVBQVMsRUFBUSxJQUFlQSxPQUVoQ3dvRCxFQUFJLENBQ04sV0FBWSxZQUFZLFlBQWdCLFdBR3RDL0gsRUFBSSxJQUFJbnNDLE1BQU0sSUFFbEIsU0FBU3d2RCxJQUNQcGhFLEtBQUtHLE9BQ0xILEtBQUtnbUQsR0FBS2pJLEVBRVZqcEIsRUFBS2x6QixLQUFLNUIsS0FBTSxHQUFJLElBbUJ0QixTQUFTcWhFLEVBQU94cUQsR0FDZCxPQUFRQSxHQUFPLEVBQU1BLElBQVEsR0FHL0IsU0FBU3FxRCxFQUFRcnFELEdBQ2YsT0FBUUEsR0FBTyxHQUFPQSxJQUFRLEVBR2hDLFNBQVNzcUQsRUFBSTU2QyxFQUFHelosRUFBR2lDLEVBQUcySyxHQUNwQixPQUFVLElBQU42TSxFQUFpQnpaLEVBQUlpQyxHQUFRakMsRUFBSzRNLEVBQzVCLElBQU42TSxFQUFpQnpaLEVBQUlpQyxFQUFNakMsRUFBSTRNLEVBQU0zSyxFQUFJMkssRUFDdEM1TSxFQUFJaUMsRUFBSTJLLEVBM0JqQmYsRUFBU3lvRCxFQUFNdHNDLEdBRWZzc0MsRUFBS3RrRSxVQUFVcUQsS0FBTyxXQU9wQixPQU5BSCxLQUFLOHFDLEdBQUssV0FDVjlxQyxLQUFLK3FDLEdBQUssV0FDVi9xQyxLQUFLZ3JDLEdBQUssV0FDVmhyQyxLQUFLaXJDLEdBQUssVUFDVmpyQyxLQUFLbXRDLEdBQUssV0FFSG50QyxNQXFCVG9oRSxFQUFLdGtFLFVBQVVxMEIsUUFBVSxTQUFVeUYsR0FTakMsSUFSQSxJQW5CYy9mLEVBbUJWa25DLEVBQUkvOUMsS0FBS2dtRCxHQUVUdjFDLEVBQWMsRUFBVnpRLEtBQUs4cUMsR0FDVGgrQixFQUFjLEVBQVY5TSxLQUFLK3FDLEdBQ1RoOEIsRUFBYyxFQUFWL08sS0FBS2dyQyxHQUNUdHhCLEVBQWMsRUFBVjFaLEtBQUtpckMsR0FDVDVuQyxFQUFjLEVBQVZyRCxLQUFLbXRDLEdBRUoxckMsRUFBSSxFQUFHQSxFQUFJLEtBQU1BLEVBQUdzOEMsRUFBRXQ4QyxHQUFLbTFCLEVBQUVqakIsWUFBZ0IsRUFBSmxTLEdBQ2xELEtBQU9BLEVBQUksS0FBTUEsRUFBR3M4QyxFQUFFdDhDLElBNUJSb1YsRUE0Qm1Ca25DLEVBQUV0OEMsRUFBSSxHQUFLczhDLEVBQUV0OEMsRUFBSSxHQUFLczhDLEVBQUV0OEMsRUFBSSxJQUFNczhDLEVBQUV0OEMsRUFBSSxNQTNCMUQsRUFBTW9WLElBQVEsR0E2QjdCLElBQUssSUFBSTlJLEVBQUksRUFBR0EsRUFBSSxLQUFNQSxFQUFHLENBQzNCLElBQUl3WSxLQUFPeFksRUFBSSxJQUNYa1EsRUFBS29qRCxFQUFNNXdELEdBQUswd0QsRUFBRzU2QyxFQUFHelosRUFBR2lDLEVBQUcySyxHQUFLclcsRUFBSTA2QyxFQUFFaHdDLEdBQUsrM0MsRUFBRXYvQixHQUFNLEVBRXhEbGpCLEVBQUlxVyxFQUNKQSxFQUFJM0ssRUFDSkEsRUFBSW15RCxFQUFPcDBELEdBQ1hBLEVBQUkyRCxFQUNKQSxFQUFJd04sRUFHTmplLEtBQUs4cUMsR0FBTXI2QixFQUFJelEsS0FBSzhxQyxHQUFNLEVBQzFCOXFDLEtBQUsrcUMsR0FBTWorQixFQUFJOU0sS0FBSytxQyxHQUFNLEVBQzFCL3FDLEtBQUtnckMsR0FBTWo4QixFQUFJL08sS0FBS2dyQyxHQUFNLEVBQzFCaHJDLEtBQUtpckMsR0FBTXZ4QixFQUFJMVosS0FBS2lyQyxHQUFNLEVBQzFCanJDLEtBQUttdEMsR0FBTTlwQyxFQUFJckQsS0FBS210QyxHQUFNLEdBRzVCaTBCLEVBQUt0a0UsVUFBVTg0QixNQUFRLFdBQ3JCLElBQUltQixFQUFJejVCLEVBQU9XLFlBQVksSUFRM0IsT0FOQTg0QixFQUFFL2hCLGFBQXVCLEVBQVZoVixLQUFLOHFDLEdBQVEsR0FDNUIvVCxFQUFFL2hCLGFBQXVCLEVBQVZoVixLQUFLK3FDLEdBQVEsR0FDNUJoVSxFQUFFL2hCLGFBQXVCLEVBQVZoVixLQUFLZ3JDLEdBQVEsR0FDNUJqVSxFQUFFL2hCLGFBQXVCLEVBQVZoVixLQUFLaXJDLEdBQVEsSUFDNUJsVSxFQUFFL2hCLGFBQXVCLEVBQVZoVixLQUFLbXRDLEdBQVEsSUFFckJwVyxHQUdUdDZCLEVBQU9DLFFBQVUwa0UsRyxnQkMxRmpCLElBQUl6b0QsRUFBVyxFQUFRLElBQ25Cb3RDLEVBQVMsRUFBUSxLQUNqQmp4QixFQUFPLEVBQVEsSUFDZngzQixFQUFTLEVBQVEsSUFBZUEsT0FFaEN5Z0QsRUFBSSxJQUFJbnNDLE1BQU0sSUFFbEIsU0FBUzB2RCxJQUNQdGhFLEtBQUtHLE9BRUxILEtBQUtnbUQsR0FBS2pJLEVBRVZqcEIsRUFBS2x6QixLQUFLNUIsS0FBTSxHQUFJLElBR3RCMlksRUFBUzJvRCxFQUFRdmIsR0FFakJ1YixFQUFPeGtFLFVBQVVxRCxLQUFPLFdBVXRCLE9BVEFILEtBQUs4cUMsR0FBSyxXQUNWOXFDLEtBQUsrcUMsR0FBSyxVQUNWL3FDLEtBQUtnckMsR0FBSyxVQUNWaHJDLEtBQUtpckMsR0FBSyxXQUNWanJDLEtBQUttdEMsR0FBSyxXQUNWbnRDLEtBQUtxbUQsR0FBSyxXQUNWcm1ELEtBQUtzbUQsR0FBSyxXQUNWdG1ELEtBQUt1bUQsR0FBSyxXQUVIdm1ELE1BR1RzaEUsRUFBT3hrRSxVQUFVODRCLE1BQVEsV0FDdkIsSUFBSW1CLEVBQUl6NUIsRUFBT1csWUFBWSxJQVUzQixPQVJBODRCLEVBQUUvaEIsYUFBYWhWLEtBQUs4cUMsR0FBSSxHQUN4Qi9ULEVBQUUvaEIsYUFBYWhWLEtBQUsrcUMsR0FBSSxHQUN4QmhVLEVBQUUvaEIsYUFBYWhWLEtBQUtnckMsR0FBSSxHQUN4QmpVLEVBQUUvaEIsYUFBYWhWLEtBQUtpckMsR0FBSSxJQUN4QmxVLEVBQUUvaEIsYUFBYWhWLEtBQUttdEMsR0FBSSxJQUN4QnBXLEVBQUUvaEIsYUFBYWhWLEtBQUtxbUQsR0FBSSxJQUN4QnR2QixFQUFFL2hCLGFBQWFoVixLQUFLc21ELEdBQUksSUFFakJ2dkIsR0FHVHQ2QixFQUFPQyxRQUFVNGtFLEcsZ0JDcERqQixJQUFJM29ELEVBQVcsRUFBUSxJQUNuQm01QyxFQUFTLEVBQVEsS0FDakJoOUIsRUFBTyxFQUFRLElBQ2Z4M0IsRUFBUyxFQUFRLElBQWVBLE9BRWhDeWdELEVBQUksSUFBSW5zQyxNQUFNLEtBRWxCLFNBQVMydkQsSUFDUHZoRSxLQUFLRyxPQUNMSCxLQUFLZ21ELEdBQUtqSSxFQUVWanBCLEVBQUtsekIsS0FBSzVCLEtBQU0sSUFBSyxLQUd2QjJZLEVBQVM0b0QsRUFBUXpQLEdBRWpCeVAsRUFBT3prRSxVQUFVcUQsS0FBTyxXQW1CdEIsT0FsQkFILEtBQUttbkQsSUFBTSxXQUNYbm5ELEtBQUtvbkQsSUFBTSxXQUNYcG5ELEtBQUtxbkQsSUFBTSxXQUNYcm5ELEtBQUtzbkQsSUFBTSxVQUNYdG5ELEtBQUt1bkQsSUFBTSxXQUNYdm5ELEtBQUt3bkQsSUFBTSxXQUNYeG5ELEtBQUt5bkQsSUFBTSxXQUNYem5ELEtBQUswbkQsSUFBTSxXQUVYMW5ELEtBQUsybkQsSUFBTSxXQUNYM25ELEtBQUs0bkQsSUFBTSxVQUNYNW5ELEtBQUs2bkQsSUFBTSxVQUNYN25ELEtBQUs4bkQsSUFBTSxXQUNYOW5ELEtBQUsrbkQsSUFBTSxXQUNYL25ELEtBQUtnb0QsSUFBTSxXQUNYaG9ELEtBQUtpb0QsSUFBTSxXQUNYam9ELEtBQUtrb0QsSUFBTSxXQUVKbG9ELE1BR1R1aEUsRUFBT3prRSxVQUFVODRCLE1BQVEsV0FDdkIsSUFBSW1CLEVBQUl6NUIsRUFBT1csWUFBWSxJQUUzQixTQUFTK3JELEVBQWNsaEMsRUFBRzNTLEVBQUd4UixHQUMzQm95QixFQUFFL2hCLGFBQWE4VCxFQUFHbmtCLEdBQ2xCb3lCLEVBQUUvaEIsYUFBYW1CLEVBQUd4UixFQUFTLEdBVTdCLE9BUEFxbEQsRUFBYWhxRCxLQUFLbW5ELElBQUtubkQsS0FBSzJuRCxJQUFLLEdBQ2pDcUMsRUFBYWhxRCxLQUFLb25ELElBQUtwbkQsS0FBSzRuRCxJQUFLLEdBQ2pDb0MsRUFBYWhxRCxLQUFLcW5ELElBQUtybkQsS0FBSzZuRCxJQUFLLElBQ2pDbUMsRUFBYWhxRCxLQUFLc25ELElBQUt0bkQsS0FBSzhuRCxJQUFLLElBQ2pDa0MsRUFBYWhxRCxLQUFLdW5ELElBQUt2bkQsS0FBSytuRCxJQUFLLElBQ2pDaUMsRUFBYWhxRCxLQUFLd25ELElBQUt4bkQsS0FBS2dvRCxJQUFLLElBRTFCanhCLEdBR1R0NkIsRUFBT0MsUUFBVTZrRSxHLGdCQ25DakI5a0UsRUFBT0MsUUFBVTJ4QyxFQUVqQixJQUFJbXpCLEVBQUssRUFBUSxJQUFVaG9DLGFBa0IzQixTQUFTNlUsSUFDUG16QixFQUFHNS9ELEtBQUs1QixNQWxCSyxFQUFRLEdBRXZCMlksQ0FBUzAxQixFQUFRbXpCLEdBQ2pCbnpCLEVBQU9uYyxTQUFXLEVBQVEsSUFDMUJtYyxFQUFPbGMsU0FBVyxFQUFRLEtBQzFCa2MsRUFBT3JjLE9BQVMsRUFBUSxLQUN4QnFjLEVBQU8vZCxVQUFZLEVBQVEsS0FDM0IrZCxFQUFPQyxZQUFjLEVBQVEsS0FHN0JELEVBQU9BLE9BQVNBLEVBV2hCQSxFQUFPdnhDLFVBQVV5MUMsS0FBTyxTQUFTOTFCLEVBQU02VixHQUNyQyxJQUFJd3NDLEVBQVM5K0QsS0FFYixTQUFTcWpELEVBQU94UixHQUNWcDFCLEVBQUt2ZixXQUNILElBQVV1ZixFQUFLcFIsTUFBTXdtQyxJQUFVaXRCLEVBQU90YixPQUN4Q3NiLEVBQU90YixRQU9iLFNBQVNKLElBQ0gwYixFQUFPdnNDLFVBQVl1c0MsRUFBTzdjLFFBQzVCNmMsRUFBTzdjLFNBSlg2YyxFQUFPcGlDLEdBQUcsT0FBUTJtQixHQVFsQjVtQyxFQUFLaWdCLEdBQUcsUUFBUzBtQixHQUlaM21DLEVBQUtnbEQsVUFBY252QyxJQUEyQixJQUFoQkEsRUFBUWhtQixNQUN6Q3d5RCxFQUFPcGlDLEdBQUcsTUFBT2hLLEdBQ2pCb3NDLEVBQU9waUMsR0FBRyxRQUFTNlAsSUFHckIsSUFBSW0xQixHQUFXLEVBQ2YsU0FBU2h2QyxJQUNIZ3ZDLElBQ0pBLEdBQVcsRUFFWGpsRCxFQUFLblEsT0FJUCxTQUFTaWdDLElBQ0htMUIsSUFDSkEsR0FBVyxFQUVpQixtQkFBakJqbEQsRUFBS2sxQixTQUF3QmwxQixFQUFLazFCLFdBSS9DLFNBQVNyRixFQUFRalEsR0FFZixHQURBc2xDLElBQ3dDLElBQXBDSCxFQUFHemxDLGNBQWMvN0IsS0FBTSxTQUN6QixNQUFNcThCLEVBUVYsU0FBU3NsQyxJQUNQN0MsRUFBTy9rQyxlQUFlLE9BQVFzcEIsR0FDOUI1bUMsRUFBS3NkLGVBQWUsUUFBU3FwQixHQUU3QjBiLEVBQU8va0MsZUFBZSxNQUFPckgsR0FDN0Jvc0MsRUFBTy9rQyxlQUFlLFFBQVN3UyxHQUUvQnV5QixFQUFPL2tDLGVBQWUsUUFBU3VTLEdBQy9CN3ZCLEVBQUtzZCxlQUFlLFFBQVN1UyxHQUU3Qnd5QixFQUFPL2tDLGVBQWUsTUFBTzRuQyxHQUM3QjdDLEVBQU8va0MsZUFBZSxRQUFTNG5DLEdBRS9CbGxELEVBQUtzZCxlQUFlLFFBQVM0bkMsR0FXL0IsT0E1QkE3QyxFQUFPcGlDLEdBQUcsUUFBUzRQLEdBQ25CN3ZCLEVBQUtpZ0IsR0FBRyxRQUFTNFAsR0FtQmpCd3lCLEVBQU9waUMsR0FBRyxNQUFPaWxDLEdBQ2pCN0MsRUFBT3BpQyxHQUFHLFFBQVNpbEMsR0FFbkJsbEQsRUFBS2lnQixHQUFHLFFBQVNpbEMsR0FFakJsbEQsRUFBS29lLEtBQUssT0FBUWlrQyxHQUdYcmlELEksNkJDekhULElBQUluZixFQUFTLEVBQVEsSUFBZUEsT0FDaEMyMEIsRUFBTyxFQUFRLEtBTW5CeDFCLEVBQU9DLFFBQVUsV0FDZixTQUFTNGlELEtBVlgsU0FBeUIvK0MsRUFBVWkrRCxHQUFlLEtBQU1qK0QsYUFBb0JpK0QsR0FBZ0IsTUFBTSxJQUFJcmdFLFVBQVUscUNBVzVHc2dFLENBQWdCeitELEtBQU1zL0MsR0FFdEJ0L0MsS0FBSzBoRCxLQUFPLEtBQ1oxaEQsS0FBS3FxRCxLQUFPLEtBQ1pycUQsS0FBS2xDLE9BQVMsRUFxRGhCLE9BbERBd2hELEVBQVd4aUQsVUFBVWtGLEtBQU8sU0FBY293QixHQUN4QyxJQUFJcWMsRUFBUSxDQUFFM3FDLEtBQU1zdUIsRUFBR3pDLEtBQU0sTUFDekIzdkIsS0FBS2xDLE9BQVMsRUFBR2tDLEtBQUtxcUQsS0FBSzE2QixLQUFPOGUsRUFBV3p1QyxLQUFLMGhELEtBQU9qVCxFQUM3RHp1QyxLQUFLcXFELEtBQU81YixJQUNWenVDLEtBQUtsQyxRQUdUd2hELEVBQVd4aUQsVUFBVWcrQixRQUFVLFNBQWlCMUksR0FDOUMsSUFBSXFjLEVBQVEsQ0FBRTNxQyxLQUFNc3VCLEVBQUd6QyxLQUFNM3ZCLEtBQUswaEQsTUFDZCxJQUFoQjFoRCxLQUFLbEMsU0FBY2tDLEtBQUtxcUQsS0FBTzViLEdBQ25DenVDLEtBQUswaEQsS0FBT2pULElBQ1Z6dUMsS0FBS2xDLFFBR1R3aEQsRUFBV3hpRCxVQUFVOHNCLE1BQVEsV0FDM0IsR0FBb0IsSUFBaEI1cEIsS0FBS2xDLE9BQVQsQ0FDQSxJQUFJZ1UsRUFBTTlSLEtBQUswaEQsS0FBSzU5QyxLQUdwQixPQUZvQixJQUFoQjlELEtBQUtsQyxPQUFja0MsS0FBSzBoRCxLQUFPMWhELEtBQUtxcUQsS0FBTyxLQUFVcnFELEtBQUswaEQsS0FBTzFoRCxLQUFLMGhELEtBQUsveEIsT0FDN0UzdkIsS0FBS2xDLE9BQ0FnVSxJQUdUd3RDLEVBQVd4aUQsVUFBVTZrRCxNQUFRLFdBQzNCM2hELEtBQUswaEQsS0FBTzFoRCxLQUFLcXFELEtBQU8sS0FDeEJycUQsS0FBS2xDLE9BQVMsR0FHaEJ3aEQsRUFBV3hpRCxVQUFVdUYsS0FBTyxTQUFja2tCLEdBQ3hDLEdBQW9CLElBQWhCdm1CLEtBQUtsQyxPQUFjLE1BQU8sR0FHOUIsSUFGQSxJQUFJa2IsRUFBSWhaLEtBQUswaEQsS0FDVDV2QyxFQUFNLEdBQUtrSCxFQUFFbFYsS0FDVmtWLEVBQUlBLEVBQUUyVyxNQUNYN2QsR0FBT3lVLEVBQUl2TixFQUFFbFYsS0FDZCxPQUFPZ08sR0FHVnd0QyxFQUFXeGlELFVBQVVvRSxPQUFTLFNBQWdCNkwsR0FDNUMsR0FBb0IsSUFBaEIvTSxLQUFLbEMsT0FBYyxPQUFPUixFQUFPVSxNQUFNLEdBQzNDLEdBQW9CLElBQWhCZ0MsS0FBS2xDLE9BQWMsT0FBT2tDLEtBQUswaEQsS0FBSzU5QyxLQUl4QyxJQUhBLElBcERnQnRHLEVBQUs0VCxFQUFRek0sRUFvRHpCbU4sRUFBTXhVLEVBQU9XLFlBQVk4TyxJQUFNLEdBQy9CaU0sRUFBSWhaLEtBQUswaEQsS0FDVGpnRCxFQUFJLEVBQ0R1WCxHQXZEU3hiLEVBd0RId2IsRUFBRWxWLEtBeERNc04sRUF3REFVLEVBeERRbk4sRUF3REhsRCxFQXZENUJqRSxFQUFJa08sS0FBSzBGLEVBQVF6TSxHQXdEYmxELEdBQUt1WCxFQUFFbFYsS0FBS2hHLE9BQ1prYixFQUFJQSxFQUFFMlcsS0FFUixPQUFPN2QsR0FHRnd0QyxFQTNEUSxHQThEYnJ0QixHQUFRQSxFQUFLL2dCLFNBQVcrZ0IsRUFBSy9nQixRQUFRcXRELFNBQ3ZDOWhFLEVBQU9DLFFBQVFJLFVBQVVtMUIsRUFBSy9nQixRQUFRcXRELFFBQVUsV0FDOUMsSUFBSS8rRCxFQUFNeXlCLEVBQUsvZ0IsUUFBUSxDQUFFcFQsT0FBUWtDLEtBQUtsQyxTQUN0QyxPQUFPa0MsS0FBS2pELFlBQVl3YixLQUFPLElBQU0vWSxLLGlCQzVFekMsaUNBQzZCLG9CQUFUd2QsTUFBd0JBLE1BQ2hDbmUsT0FDUndCLEVBQVE4NEIsU0FBU3I4QixVQUFVdUQsTUFpQi9CLFNBQVN1aEUsRUFBUXpNLEVBQUkwTSxHQUNuQjdoRSxLQUFLOGhFLElBQU0zTSxFQUNYbjFELEtBQUsraEUsU0FBV0YsRUFmbEJubEUsRUFBUXNsRSxXQUFhLFdBQ25CLE9BQU8sSUFBSUosRUFBUXZoRSxFQUFNdUIsS0FBS29nRSxXQUFZQyxFQUFPM2hFLFdBQVk0aEUsZUFFL0R4bEUsRUFBUXlsRSxZQUFjLFdBQ3BCLE9BQU8sSUFBSVAsRUFBUXZoRSxFQUFNdUIsS0FBS3VnRSxZQUFhRixFQUFPM2hFLFdBQVk4aEUsZ0JBRWhFMWxFLEVBQVF3bEUsYUFDUnhsRSxFQUFRMGxFLGNBQWdCLFNBQVNDLEdBQzNCQSxHQUNGQSxFQUFRQyxTQVFaVixFQUFROWtFLFVBQVV5bEUsTUFBUVgsRUFBUTlrRSxVQUFVMGxFLElBQU0sYUFDbERaLEVBQVE5a0UsVUFBVXdsRSxNQUFRLFdBQ3hCdGlFLEtBQUsraEUsU0FBU25nRSxLQUFLcWdFLEVBQU9qaUUsS0FBSzhoRSxNQUlqQ3BsRSxFQUFRK2xFLE9BQVMsU0FBU25pQyxFQUFNb2lDLEdBQzlCUixhQUFhNWhDLEVBQUtxaUMsZ0JBQ2xCcmlDLEVBQUtzaUMsYUFBZUYsR0FHdEJobUUsRUFBUW1tRSxTQUFXLFNBQVN2aUMsR0FDMUI0aEMsYUFBYTVoQyxFQUFLcWlDLGdCQUNsQnJpQyxFQUFLc2lDLGNBQWdCLEdBR3ZCbG1FLEVBQVFvbUUsYUFBZXBtRSxFQUFRcW1FLE9BQVMsU0FBU3ppQyxHQUMvQzRoQyxhQUFhNWhDLEVBQUtxaUMsZ0JBRWxCLElBQUlELEVBQVFwaUMsRUFBS3NpQyxhQUNiRixHQUFTLElBQ1hwaUMsRUFBS3FpQyxlQUFpQlgsWUFBVyxXQUMzQjFoQyxFQUFLMGlDLFlBQ1AxaUMsRUFBSzBpQyxlQUNOTixLQUtQLEVBQVEsS0FJUmhtRSxFQUFRdXlDLGFBQWdDLG9CQUFUanlCLE1BQXdCQSxLQUFLaXlCLG1CQUNsQixJQUFYbHdDLEdBQTBCQSxFQUFPa3dDLGNBQ3hDanZDLE1BQVFBLEtBQUtpdkMsYUFDckN2eUMsRUFBUXVtRSxlQUFrQyxvQkFBVGptRCxNQUF3QkEsS0FBS2ltRCxxQkFDbEIsSUFBWGxrRSxHQUEwQkEsRUFBT2trRSxnQkFDeENqakUsTUFBUUEsS0FBS2lqRSxpQixtQ0M5RHZDLDZCQUNJLGFBRUEsSUFBSWxrRSxFQUFPa3dDLGFBQVgsQ0FJQSxJQUlJaTBCLEVBNkhJQyxFQVpBQyxFQXJCQUMsRUFDQUMsRUFqR0pDLEVBQWEsRUFDYkMsRUFBZ0IsR0FDaEJDLEdBQXdCLEVBQ3hCQyxFQUFNM2tFLEVBQU80a0UsU0FvSmJDLEVBQVdybkUsT0FBT3kvQixnQkFBa0J6L0IsT0FBT3kvQixlQUFlajlCLEdBQzlENmtFLEVBQVdBLEdBQVlBLEVBQVM1QixXQUFhNEIsRUFBVzdrRSxFQUdmLHFCQUFyQyxHQUFHMkIsU0FBU2tCLEtBQUs3QyxFQUFPZ0ksU0FwRnhCbThELEVBQW9CLFNBQVNXLEdBQ3pCOThELEVBQVE4ckIsVUFBUyxXQUFjaXhDLEVBQWFELFFBSXBELFdBR0ksR0FBSTlrRSxFQUFPZ2xFLGNBQWdCaGxFLEVBQU9pbEUsY0FBZSxDQUM3QyxJQUFJQyxHQUE0QixFQUM1QkMsRUFBZW5sRSxFQUFPb2xFLFVBTTFCLE9BTEFwbEUsRUFBT29sRSxVQUFZLFdBQ2ZGLEdBQTRCLEdBRWhDbGxFLEVBQU9nbEUsWUFBWSxHQUFJLEtBQ3ZCaGxFLEVBQU9vbEUsVUFBWUQsRUFDWkQsR0F3RUpHLEdBSUFybEUsRUFBT3NsRSxpQkE5Q1ZqQixFQUFVLElBQUlpQixnQkFDVkMsTUFBTUgsVUFBWSxTQUFTMWdCLEdBRS9CcWdCLEVBRGFyZ0IsRUFBTTMvQyxPQUl2Qm8vRCxFQUFvQixTQUFTVyxHQUN6QlQsRUFBUW1CLE1BQU1SLFlBQVlGLEtBMkN2QkgsR0FBTyx1QkFBd0JBLEVBQUljLGNBQWMsV0F0Q3BEckIsRUFBT08sRUFBSWUsZ0JBQ2Z2QixFQUFvQixTQUFTVyxHQUd6QixJQUFJYSxFQUFTaEIsRUFBSWMsY0FBYyxVQUMvQkUsRUFBT0MsbUJBQXFCLFdBQ3hCYixFQUFhRCxHQUNiYSxFQUFPQyxtQkFBcUIsS0FDNUJ4QixFQUFLeUIsWUFBWUYsR0FDakJBLEVBQVMsTUFFYnZCLEVBQUswQixZQUFZSCxLQUtyQnhCLEVBQW9CLFNBQVNXLEdBQ3pCN0IsV0FBVzhCLEVBQWMsRUFBR0QsS0FsRDVCUixFQUFnQixnQkFBa0Ixa0UsS0FBS21ELFNBQVcsSUFDbER3aEUsRUFBa0IsU0FBUzdmLEdBQ3ZCQSxFQUFNcWIsU0FBVy8vRCxHQUNLLGlCQUFmMGtELEVBQU0zL0MsTUFDeUIsSUFBdEMyL0MsRUFBTTMvQyxLQUFLdUosUUFBUWcyRCxJQUNuQlMsR0FBY3JnQixFQUFNMy9DLEtBQUtqQyxNQUFNd2hFLEVBQWN2bEUsVUFJakRpQixFQUFPK2xFLGlCQUNQL2xFLEVBQU8rbEUsaUJBQWlCLFVBQVd4QixHQUFpQixHQUVwRHZrRSxFQUFPZ21FLFlBQVksWUFBYXpCLEdBR3BDSixFQUFvQixTQUFTVyxHQUN6QjlrRSxFQUFPZ2xFLFlBQVlWLEVBQWdCUSxFQUFRLE9BZ0VuREQsRUFBUzMwQixhQTFLVCxTQUFzQm5ELEdBRUksbUJBQWJBLElBQ1RBLEVBQVcsSUFBSTNTLFNBQVMsR0FBSzJTLElBSS9CLElBREEsSUFBSTVTLEVBQU8sSUFBSXRuQixNQUFNdFIsVUFBVXhDLE9BQVMsR0FDL0IyRCxFQUFJLEVBQUdBLEVBQUl5M0IsRUFBS3A3QixPQUFRMkQsSUFDN0J5M0IsRUFBS3ozQixHQUFLbkIsVUFBVW1CLEVBQUksR0FHNUIsSUFBSXVqRSxFQUFPLENBQUVsNUIsU0FBVUEsRUFBVTVTLEtBQU1BLEdBR3ZDLE9BRkFzcUMsRUFBY0QsR0FBY3lCLEVBQzVCOUIsRUFBa0JLLEdBQ1hBLEtBNkpUSyxFQUFTWCxlQUFpQkEsRUExSjFCLFNBQVNBLEVBQWVZLFVBQ2JMLEVBQWNLLEdBeUJ6QixTQUFTQyxFQUFhRCxHQUdsQixHQUFJSixFQUdBekIsV0FBVzhCLEVBQWMsRUFBR0QsT0FDekIsQ0FDSCxJQUFJbUIsRUFBT3hCLEVBQWNLLEdBQ3pCLEdBQUltQixFQUFNLENBQ052QixHQUF3QixFQUN4QixLQWpDWixTQUFhdUIsR0FDVCxJQUFJbDVCLEVBQVdrNUIsRUFBS2w1QixTQUNoQjVTLEVBQU84ckMsRUFBSzlyQyxLQUNoQixPQUFRQSxFQUFLcDdCLFFBQ2IsS0FBSyxFQUNEZ3VDLElBQ0EsTUFDSixLQUFLLEVBQ0RBLEVBQVM1UyxFQUFLLElBQ2QsTUFDSixLQUFLLEVBQ0Q0UyxFQUFTNVMsRUFBSyxHQUFJQSxFQUFLLElBQ3ZCLE1BQ0osS0FBSyxFQUNENFMsRUFBUzVTLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBQ2hDLE1BQ0osUUFDSTRTLEVBQVN6ckMsV0FuRHJCLEVBbURzQzY0QixJQWlCbEI2eUIsQ0FBSWlaLEdBQ04sUUFDRS9CLEVBQWVZLEdBQ2ZKLEdBQXdCLE1BdkU1QyxDQXlMa0Isb0JBQVR6bUQsVUFBeUMsSUFBWGplLEVBQXlCaUIsS0FBT2pCLEVBQVNpZSxRLHFEQzlKaEZ2Z0IsRUFBT0MsUUFBVTR4QyxFQUVqQixJQUFJaGUsRUFBWSxFQUFRLEtBR3BCMkIsRUFBTzExQixPQUFPQyxPQUFPLEVBQVEsS0FNakMsU0FBUzh4QyxFQUFZaGMsR0FDbkIsS0FBTXR5QixnQkFBZ0JzdUMsR0FBYyxPQUFPLElBQUlBLEVBQVloYyxHQUUzRGhDLEVBQVUxdUIsS0FBSzVCLEtBQU1zeUIsR0FSdkJMLEVBQUt0WixTQUFXLEVBQVEsSUFHeEJzWixFQUFLdFosU0FBUzIxQixFQUFhaGUsR0FRM0JnZSxFQUFZeHhDLFVBQVUyMEIsV0FBYSxTQUFVb2dCLEVBQU92ekMsRUFBVTgwQixHQUM1REEsRUFBRyxLQUFNeWUsSyxnQkM3Q1hwMUMsRUFBT0MsUUFBVSxFQUFRLE0sZ0JDQXpCRCxFQUFPQyxRQUFVLEVBQVEsSyxnQkNBekJELEVBQU9DLFFBQVUsRUFBUSxJQUFjNHpCLFcsZ0JDQXZDN3pCLEVBQU9DLFFBQVUsRUFBUSxJQUFjNHhDLGEsNkJDQ3ZDLElBQUkzMUIsRUFBVyxFQUFRLElBQ25CcmIsRUFBUyxFQUFRLElBQWVBLE9BRWhDdUMsRUFBTyxFQUFRLElBRWZnckQsRUFBUXZ0RCxFQUFPVSxNQUFNLEtBR3pCLFNBQVM4c0QsRUFBTWx5QixFQUFLbDdCLEdBQ2xCbUMsRUFBSytCLEtBQUs1QixLQUFNLFVBQ0csaUJBQVJ0QyxJQUNUQSxFQUFNSixFQUFPUyxLQUFLTCxJQUdwQnNDLEtBQUtnckQsS0FBT3B5QixFQUNaNTRCLEtBQUs4RyxLQUFPcEosRUFFUkEsRUFBSUksT0FYTSxHQVlaSixFQUFNazdCLEVBQUlsN0IsR0FDREEsRUFBSUksT0FiRCxLQWNaSixFQUFNSixFQUFPNEQsT0FBTyxDQUFDeEQsRUFBS210RCxHQWRkLEtBb0JkLElBSEEsSUFBSUksRUFBT2pyRCxLQUFLa3JELE1BQVE1dEQsRUFBT1csWUFqQmpCLElBa0JWa3RELEVBQU9uckQsS0FBS29yRCxNQUFROXRELEVBQU9XLFlBbEJqQixJQW9CTHdELEVBQUksRUFBR0EsRUFwQkYsR0FvQmlCQSxJQUM3QndwRCxFQUFLeHBELEdBQWMsR0FBVC9ELEVBQUkrRCxHQUNkMHBELEVBQUsxcEQsR0FBYyxHQUFUL0QsRUFBSStELEdBR2hCekIsS0FBSzQxQixNQUFRLENBQUNxMUIsR0FHaEJ0eUMsRUFBU215QyxFQUFNanJELEdBRWZpckQsRUFBS2h1RCxVQUFVcTBCLFFBQVUsU0FBVXJ0QixHQUNqQzlELEtBQUs0MUIsTUFBTTV6QixLQUFLOEIsSUFHbEJnbkQsRUFBS2h1RCxVQUFVOHpCLE9BQVMsV0FDdEIsSUFBSTlILEVBQUk5b0IsS0FBS2dyRCxLQUFLMXRELEVBQU80RCxPQUFPbEIsS0FBSzQxQixRQUNyQyxPQUFPNTFCLEtBQUtnckQsS0FBSzF0RCxFQUFPNEQsT0FBTyxDQUFDbEIsS0FBS29yRCxNQUFPdGlDLE1BRTlDcnNCLEVBQU9DLFFBQVVvdUQsRyxnQkM3Q2pCcnVELEVBQU9DLFFBQVUsRUFBUSxNLGlCQ0F6QixrQkFPSXVvRSxFQVBKLEVBQWEsRUFBUSxJQUFlM25FLE9BRWhDaXVELEVBQWtCLEVBQVEsS0FDMUJsYixFQUFrQixFQUFRLEtBQzFCRyxFQUFPLEVBQVEsS0FDZjl5QixFQUFXLEVBQVEsS0FHbkJ3bkQsRUFBU25tRSxFQUFPSCxRQUFVRyxFQUFPSCxPQUFPc21FLE9BQ3hDQyxFQUFZLENBQ2R4c0MsSUFBSyxRQUNMLFFBQVMsUUFDVHFWLEtBQU0sUUFDTkUsT0FBUSxVQUNSLFVBQVcsVUFDWEMsT0FBUSxVQUNSLFVBQVcsVUFDWCxVQUFXLFVBQ1hDLE9BQVEsV0FFTmczQixFQUFTLEdBc0JiLFNBQVNDLEVBQWV0N0QsRUFBVVQsRUFBTWdxQixFQUFZeDFCLEVBQVE2SCxHQUMxRCxPQUFPdS9ELEVBQU9JLFVBQ1osTUFBT3Y3RCxFQUFVLENBQUV3TyxLQUFNLFdBQVksRUFBTyxDQUFDLGVBQzdDOG5ELE1BQUssU0FBVTNpRSxHQUNmLE9BQU93bkUsRUFBT0ssV0FBVyxDQUN2Qmh0RCxLQUFNLFNBQ05qUCxLQUFNQSxFQUNOZ3FCLFdBQVlBLEVBQ1pxQyxLQUFNLENBQ0pwZCxLQUFNNVMsSUFFUGpJLEVBQUtJLEdBQVUsTUFDakJ1aUUsTUFBSyxTQUFVanhELEdBQ2hCLE9BQU85UixFQUFPUyxLQUFLcVIsTUFldkIzUyxFQUFPQyxRQUFVLFNBQVVxTixFQUFVVCxFQUFNZ3FCLEVBQVk4VixFQUFRN1QsRUFBUXVXLEdBQy9DLG1CQUFYdlcsSUFDVHVXLEVBQVd2VyxFQUNYQSxPQUFTLzJCLEdBSVgsSUFBSW1ILEVBQU93L0QsR0FEWDV2QyxFQUFTQSxHQUFVLFFBQ1NwcEIsZUFFNUIsSUFBS3hHLEdBQWtDLG1CQUFuQjVHLEVBQU8yNkIsUUFDekIsT0FBTzN5QixFQUFROHJCLFVBQVMsV0FDdEIsSUFBSTlnQixFQUNKLElBQ0VBLEVBQU15K0IsRUFBS3ptQyxFQUFVVCxFQUFNZ3FCLEVBQVk4VixFQUFRN1QsR0FDL0MsTUFBT2x5QixHQUNQLE9BQU95b0MsRUFBU3pvQyxHQUVsQnlvQyxFQUFTLEtBQU0vNUIsTUFPbkIsR0FIQXc1QyxFQUFnQmo0QixFQUFZOFYsR0FDNUJyL0IsRUFBVzJULEVBQVMzVCxFQUFVc21DLEVBQWlCLFlBQy9DL21DLEVBQU9vVSxFQUFTcFUsRUFBTSttQyxFQUFpQixRQUNmLG1CQUFidkUsRUFBeUIsTUFBTSxJQUFJeHNDLE1BQU0sbUNBbkN0RCxTQUF5QjZnRSxFQUFTcjBCLEdBQ2hDcTBCLEVBQVFFLE1BQUssU0FBVXR1RCxHQUNyQmhMLEVBQVE4ckIsVUFBUyxXQUNmaVosRUFBUyxLQUFNLzVCLFNBRWhCLFNBQVUxTyxHQUNYMEQsRUFBUThyQixVQUFTLFdBQ2ZpWixFQUFTem9DLFNBOEJibWlFLENBM0VGLFNBQXNCNy9ELEdBQ3BCLEdBQUk1RyxFQUFPZ0ksVUFBWWhJLEVBQU9nSSxRQUFRaW9DLFFBQ3BDLE9BQU90VixRQUFRQyxTQUFRLEdBRXpCLElBQUt1ckMsSUFBV0EsRUFBT0ksWUFBY0osRUFBT0ssV0FDMUMsT0FBTzdyQyxRQUFRQyxTQUFRLEdBRXpCLFFBQXFCbjdCLElBQWpCNG1FLEVBQU96L0QsR0FDVCxPQUFPeS9ELEVBQU96L0QsR0FHaEIsSUFBSTgvRCxFQUFPSixFQURYSixFQUFXQSxHQUFZM25FLEVBQU9VLE1BQU0sR0FDRGluRSxFQUFVLEdBQUksSUFBS3QvRCxHQUNuRDA2RCxNQUFLLFdBQ0osT0FBTyxLQUNOcUYsT0FBTSxXQUNQLE9BQU8sS0FHWCxPQURBTixFQUFPei9ELEdBQVE4L0QsRUFDUkEsRUF5RFFFLENBQVloZ0UsR0FBTTA2RCxNQUFLLFNBQVV1RixHQUM5QyxPQUFJQSxFQUFhUCxFQUFjdDdELEVBQVVULEVBQU1ncUIsRUFBWThWLEVBQVF6akMsR0FFNUQ2cUMsRUFBS3ptQyxFQUFVVCxFQUFNZ3FCLEVBQVk4VixFQUFRN1QsTUFDOUN1VyxNLHdDQ3BHTixJQUFJd2hCLEVBQU0sRUFBUSxLQUNkb0IsRUFBTSxFQUFRLEtBQ2RtWCxFQUFXLEVBQVEsS0FDbkJDLEVBQVcsRUFBUSxLQUNuQkMsRUFBTyxFQUFRLElBc0NuQixTQUFTM3hCLEVBQWdCNHhCLEVBQU90b0UsRUFBS2dLLEdBRW5DLEdBREFzK0QsRUFBUUEsRUFBTTc1RCxjQUNWMDVELEVBQVNHLEdBQVEsT0FBT3RYLEVBQUl0YSxlQUFlNHhCLEVBQU90b0UsRUFBS2dLLEdBQzNELEdBQUlvK0QsRUFBU0UsR0FBUSxPQUFPLElBQUkxWSxFQUFJLENBQUU1dkQsSUFBS0EsRUFBS2dLLEdBQUlBLEVBQUlELEtBQU11K0QsSUFFOUQsTUFBTSxJQUFJN25FLFVBQVUsc0JBR3RCLFNBQVNtckMsRUFBa0IwOEIsRUFBT3RvRSxFQUFLZ0ssR0FFckMsR0FEQXMrRCxFQUFRQSxFQUFNNzVELGNBQ1YwNUQsRUFBU0csR0FBUSxPQUFPdFgsRUFBSXBsQixpQkFBaUIwOEIsRUFBT3RvRSxFQUFLZ0ssR0FDN0QsR0FBSW8rRCxFQUFTRSxHQUFRLE9BQU8sSUFBSTFZLEVBQUksQ0FBRTV2RCxJQUFLQSxFQUFLZ0ssR0FBSUEsRUFBSUQsS0FBTXUrRCxFQUFPMStELFNBQVMsSUFFOUUsTUFBTSxJQUFJbkosVUFBVSxzQkFPdEJ6QixFQUFReTNDLGFBQWV6M0MsRUFBUW9KLE9BeEQvQixTQUF1QmtnRSxFQUFPajhELEdBRzVCLElBQUlnNkIsRUFBUUQsRUFDWixHQUhBa2lDLEVBQVFBLEVBQU03NUQsY0FHVjA1RCxFQUFTRyxHQUNYamlDLEVBQVM4aEMsRUFBU0csR0FBT3RvRSxJQUN6Qm9tQyxFQUFRK2hDLEVBQVNHLEdBQU90K0QsT0FDbkIsS0FBSW8rRCxFQUFTRSxHQUlsQixNQUFNLElBQUk3bkUsVUFBVSxzQkFIcEI0bEMsRUFBK0IsRUFBdEIraEMsRUFBU0UsR0FBT3RvRSxJQUN6Qm9tQyxFQUFRZ2lDLEVBQVNFLEdBQU90K0QsR0FLMUIsSUFBSXFxQixFQUFPZzBDLEVBQUtoOEQsR0FBVSxFQUFPZzZCLEVBQVFELEdBQ3pDLE9BQU9zUSxFQUFlNHhCLEVBQU9qMEMsRUFBS3IwQixJQUFLcTBCLEVBQUtycUIsS0EwQzlDaEwsRUFBUTAzQyxlQUFpQjEzQyxFQUFRMjNDLFNBQVdELEVBQzVDMTNDLEVBQVE0M0MsZUFBaUI1M0MsRUFBUTYzQyxTQXhDakMsU0FBeUJ5eEIsRUFBT2o4RCxHQUc5QixJQUFJZzZCLEVBQVFELEVBQ1osR0FIQWtpQyxFQUFRQSxFQUFNNzVELGNBR1YwNUQsRUFBU0csR0FDWGppQyxFQUFTOGhDLEVBQVNHLEdBQU90b0UsSUFDekJvbUMsRUFBUStoQyxFQUFTRyxHQUFPdCtELE9BQ25CLEtBQUlvK0QsRUFBU0UsR0FJbEIsTUFBTSxJQUFJN25FLFVBQVUsc0JBSHBCNGxDLEVBQStCLEVBQXRCK2hDLEVBQVNFLEdBQU90b0UsSUFDekJvbUMsRUFBUWdpQyxFQUFTRSxHQUFPdCtELEdBSzFCLElBQUlxcUIsRUFBT2cwQyxFQUFLaDhELEdBQVUsRUFBT2c2QixFQUFRRCxHQUN6QyxPQUFPd0YsRUFBaUIwOEIsRUFBT2owQyxFQUFLcjBCLElBQUtxMEIsRUFBS3JxQixLQTBCaERoTCxFQUFRNHNDLGlCQUFtQjVzQyxFQUFRODNDLFdBQWFsTCxFQUNoRDVzQyxFQUFRKzNDLFlBQWMvM0MsRUFBUWc0QyxXQVI5QixXQUNFLE9BQU9uNEMsT0FBT3cxQixLQUFLK3pDLEdBQVU1a0UsT0FBT3d0RCxFQUFJaGEsZ0IsZ0JDM0QxQyxJQUFJbGtCLEVBQWEsRUFBUSxJQUNyQnkxQyxFQUFNLEVBQVEsS0FDZHR0RCxFQUFXLEVBQVEsSUFDbkJyYixFQUFTLEVBQVEsSUFBZUEsT0FFaEM0MkMsRUFBUSxDQUNWLGVBQWdCK3hCLEVBQUloZ0UsSUFBSWlnRSxZQUFZRCxFQUFJRSxLQUN4QyxXQUFZRixFQUFJRSxJQUNoQixjQUFlRixFQUFJaGdFLElBQUlpZ0UsWUFBWUQsRUFBSUUsS0FDdkMsVUFBV0YsRUFBSUUsSUFDZixVQUFXRixFQUFJaGdFLElBQUlpZ0UsWUFBWUQsRUFBSTNZLEtBQ25DLFVBQVcyWSxFQUFJM1ksS0FNakIsU0FBU0EsRUFBS3poQixHQUNacmIsRUFBVzV1QixLQUFLNUIsTUFDaEIsSUFFSTRMLEVBRkF3NkQsRUFBV3Y2QixFQUFLcGtDLEtBQUswRSxjQUNyQjFFLEVBQU95c0MsRUFBTWt5QixHQUdmeDZELEVBREVpZ0MsRUFBS3ZrQyxRQUNBLFVBRUEsVUFFVCxJQUFJNUosRUFBTW11QyxFQUFLbnVDLElBQ1ZKLEVBQU9pTyxTQUFTN04sS0FDbkJBLEVBQU1KLEVBQU9TLEtBQUtMLElBRUgsWUFBYjBvRSxHQUF1QyxnQkFBYkEsSUFDNUIxb0UsRUFBTUosRUFBTzRELE9BQU8sQ0FBQ3hELEVBQUtBLEVBQUltRSxNQUFNLEVBQUcsTUFFekMsSUFBSTZGLEVBQUtta0MsRUFBS25rQyxHQUNUcEssRUFBT2lPLFNBQVM3RCxLQUNuQkEsRUFBS3BLLEVBQU9TLEtBQUsySixJQUVuQjFILEtBQUtxbUUsS0FBTzUrRCxFQUFLakwsT0FBTyxDQUN0QmtCLElBQUtBLEVBQ0xnSyxHQUFJQSxFQUNKa0UsS0FBTUEsSUE1QlZzb0MsRUFBTSt4QixJQUFNL3hCLEVBQU0sV0FDbEJBLEVBQU1veUIsS0FBT3B5QixFQUFNLGdCQUNuQnozQyxFQUFPQyxRQUFVNHdELEVBQ2pCMzBDLEVBQVMyMEMsRUFBSzk4QixHQTRCZDg4QixFQUFJeHdELFVBQVVxMEIsUUFBVSxTQUFVcnRCLEdBQ2hDLE9BQU94RyxFQUFPUyxLQUFLaUMsS0FBS3FtRSxLQUFLbmhFLE9BQU9wQixLQUV0Q3dwRCxFQUFJeHdELFVBQVU4ekIsT0FBUyxXQUNyQixPQUFPdHpCLEVBQU9TLEtBQUtpQyxLQUFLcW1FLEtBQUsxMUMsVyw2QkM5Qy9CajBCLEVBQVEyWixNQUFRLEVBQVEsS0FDeEIzWixFQUFRb0osT0FBUyxFQUFRLEtBQ3pCcEosRUFBUTR3RCxJQUFNLEVBQVEsS0FDdEI1d0QsRUFBUXVKLElBQU0sRUFBUSxLQUN0QnZKLEVBQVF5cEUsSUFBTSxFQUFRLE0sNkJDSnRCLElBQUlud0QsRUFBUyxFQUFRLElBQ2pCMkMsRUFBVyxFQUFRLElBRW5CNHRELEVBQVEsR0FFWixTQUFTQyxFQUFTOStELEdBQ2hCc08sRUFBT0UsTUFBTXhPLEVBQUc1SixPQUFRLEVBQUcscUJBRTNCa0MsS0FBSzBILEdBQUssSUFBSWtLLE1BQU0sR0FDcEIsSUFBSyxJQUFJblEsRUFBSSxFQUFHQSxFQUFJekIsS0FBSzBILEdBQUc1SixPQUFRMkQsSUFDbEN6QixLQUFLMEgsR0FBR2pHLEdBQUtpRyxFQUFHakcsR0F1QnBCL0UsRUFBUXdwRSxZQXBCUixTQUFxQnJtRSxHQUNuQixTQUFTb0csRUFBSXFzQixHQUNYenlCLEVBQUsrQixLQUFLNUIsS0FBTXN5QixHQUNoQnR5QixLQUFLeW1FLFdBRVA5dEQsRUFBUzFTLEVBQUtwRyxHQUdkLElBREEsSUFBSWt5QixFQUFPeDFCLE9BQU93MUIsS0FBS3cwQyxHQUNkOWtFLEVBQUksRUFBR0EsRUFBSXN3QixFQUFLajBCLE9BQVEyRCxJQUFLLENBQ3BDLElBQUkvRCxFQUFNcTBCLEVBQUt0d0IsR0FDZndFLEVBQUluSixVQUFVWSxHQUFPNm9FLEVBQU03b0UsR0FPN0IsT0FKQXVJLEVBQUl6SixPQUFTLFNBQWdCODFCLEdBQzNCLE9BQU8sSUFBSXJzQixFQUFJcXNCLElBR1Zyc0IsR0FLVHNnRSxFQUFNRSxTQUFXLFdBQ2YsSUFBSWxyQyxFQUFRLElBQUlpckMsRUFBU3htRSxLQUFLc3lCLFFBQVE1cUIsSUFDdEMxSCxLQUFLMG1FLFVBQVluckMsR0FHbkJnckMsRUFBTXAxQyxRQUFVLFNBQWlCeThCLEVBQUtDLEVBQU85N0MsRUFBSys3QyxHQUNoRCxJQUFJdnlCLEVBQVF2N0IsS0FBSzBtRSxVQUNiQyxFQUFhM21FLEtBQUtqRCxZQUFZRixPQUFPQyxVQUVyQzRLLEVBQUs2ekIsRUFBTTd6QixHQUNmLEdBQWtCLFlBQWQxSCxLQUFLNEwsS0FBb0IsQ0FDM0IsSUFBSyxJQUFJbkssRUFBSSxFQUFHQSxFQUFJekIsS0FBS29FLFVBQVczQyxJQUNsQ2lHLEVBQUdqRyxJQUFNbXNELEVBQUlDLEVBQVFwc0QsR0FFdkJrbEUsRUFBV3gxQyxRQUFRdnZCLEtBQUs1QixLQUFNMEgsRUFBSSxFQUFHcUssRUFBSys3QyxHQUUxQyxJQUFTcnNELEVBQUksRUFBR0EsRUFBSXpCLEtBQUtvRSxVQUFXM0MsSUFDbENpRyxFQUFHakcsR0FBS3NRLEVBQUkrN0MsRUFBU3JzRCxPQUNsQixDQUNMa2xFLEVBQVd4MUMsUUFBUXZ2QixLQUFLNUIsS0FBTTR0RCxFQUFLQyxFQUFPOTdDLEVBQUsrN0MsR0FFL0MsSUFBU3JzRCxFQUFJLEVBQUdBLEVBQUl6QixLQUFLb0UsVUFBVzNDLElBQ2xDc1EsRUFBSSs3QyxFQUFTcnNELElBQU1pRyxFQUFHakcsR0FFeEIsSUFBU0EsRUFBSSxFQUFHQSxFQUFJekIsS0FBS29FLFVBQVczQyxJQUNsQ2lHLEVBQUdqRyxHQUFLbXNELEVBQUlDLEVBQVFwc0QsTSw2QkM1RDFCLElBQUl1VSxFQUFTLEVBQVEsSUFDakIyQyxFQUFXLEVBQVEsSUFFbkI3UyxFQUFTLEVBQVEsS0FDakJ3bkQsRUFBTSxFQUFRLEtBRWxCLFNBQVNzWixFQUFTaDdELEVBQU1sTyxHQUN0QnNZLEVBQU9FLE1BQU14WSxFQUFJSSxPQUFRLEdBQUksc0JBRTdCLElBQUk2WixFQUFLamEsRUFBSW1FLE1BQU0sRUFBRyxHQUNsQitWLEVBQUtsYSxFQUFJbUUsTUFBTSxFQUFHLElBQ2xCZ2xFLEVBQUtucEUsRUFBSW1FLE1BQU0sR0FBSSxJQUdyQjdCLEtBQUs4bkMsUUFETSxZQUFUbDhCLEVBQ2EsQ0FDYjBoRCxFQUFJOXdELE9BQU8sQ0FBRW9QLEtBQU0sVUFBV2xPLElBQUtpYSxJQUNuQzIxQyxFQUFJOXdELE9BQU8sQ0FBRW9QLEtBQU0sVUFBV2xPLElBQUtrYSxJQUNuQzAxQyxFQUFJOXdELE9BQU8sQ0FBRW9QLEtBQU0sVUFBV2xPLElBQUttcEUsS0FHdEIsQ0FDYnZaLEVBQUk5d0QsT0FBTyxDQUFFb1AsS0FBTSxVQUFXbE8sSUFBS21wRSxJQUNuQ3ZaLEVBQUk5d0QsT0FBTyxDQUFFb1AsS0FBTSxVQUFXbE8sSUFBS2thLElBQ25DMDFDLEVBQUk5d0QsT0FBTyxDQUFFb1AsS0FBTSxVQUFXbE8sSUFBS2lhLEtBS3pDLFNBQVN3dUQsRUFBSTd6QyxHQUNYeHNCLEVBQU9sRSxLQUFLNUIsS0FBTXN5QixHQUVsQixJQUFJaUosRUFBUSxJQUFJcXJDLEVBQVM1bUUsS0FBSzRMLEtBQU01TCxLQUFLc3lCLFFBQVE1MEIsS0FDakRzQyxLQUFLOG1FLFVBQVl2ckMsRUFFbkI1aUIsRUFBU3d0RCxFQUFLcmdFLEdBRWRySixFQUFPQyxRQUFVeXBFLEVBRWpCQSxFQUFJM3BFLE9BQVMsU0FBZ0I4MUIsR0FDM0IsT0FBTyxJQUFJNnpDLEVBQUk3ekMsSUFHakI2ekMsRUFBSXJwRSxVQUFVcTBCLFFBQVUsU0FBaUJ5OEIsRUFBS0MsRUFBTzk3QyxFQUFLKzdDLEdBQ3hELElBQUl2eUIsRUFBUXY3QixLQUFLOG1FLFVBRWpCdnJDLEVBQU11TSxRQUFRLEdBQUczVyxRQUFReThCLEVBQUtDLEVBQU85N0MsRUFBSys3QyxHQUMxQ3Z5QixFQUFNdU0sUUFBUSxHQUFHM1csUUFBUXBmLEVBQUsrN0MsRUFBUS83QyxFQUFLKzdDLEdBQzNDdnlCLEVBQU11TSxRQUFRLEdBQUczVyxRQUFRcGYsRUFBSys3QyxFQUFRLzdDLEVBQUsrN0MsSUFHN0NxWSxFQUFJcnBFLFVBQVVrakMsS0FBT3N0QixFQUFJeHdELFVBQVVrakMsS0FDbkNtbUMsRUFBSXJwRSxVQUFVazNDLE9BQVNzWixFQUFJeHdELFVBQVVrM0MsUSxnQkNyRHJDLElBQUkreUIsRUFBUSxFQUFRLEtBQ2hCQyxFQUFhLEVBQVEsS0FDckIxcEUsRUFBUyxFQUFRLElBQWVBLE9BQ2hDa0ssRUFBZSxFQUFRLEtBQ3ZCOG9CLEVBQVksRUFBUSxJQUNwQm8rQixFQUFNLEVBQVEsSUFDZHFYLEVBQU8sRUFBUSxJQUduQixTQUFTamdFLEVBQVEyQixFQUFNL0osRUFBS2dLLEdBQzFCNG9CLEVBQVUxdUIsS0FBSzVCLE1BRWZBLEtBQUt5dUQsT0FBUyxJQUFJd1ksRUFDbEJqbkUsS0FBSzZILFFBQVUsSUFBSTZtRCxFQUFJM3JCLElBQUlybEMsR0FDM0JzQyxLQUFLdXVELE1BQVFqeEQsRUFBT1MsS0FBSzJKLEdBQ3pCMUgsS0FBSytJLE1BQVF0QixFQUNiekgsS0FBS2tuRSxjQUFlLEVBVFAsRUFBUSxHQVl2QnZ1RCxDQUFTN1MsRUFBUXdxQixHQUVqQnhxQixFQUFPaEosVUFBVXEwQixRQUFVLFNBQVVydEIsR0FFbkMsSUFBSSt0QyxFQUNBdmQsRUFGSnQwQixLQUFLeXVELE9BQU92dUMsSUFBSXBjLEdBS2hCLElBRkEsSUFBSWlPLEVBQU0sR0FFRjgvQixFQUFRN3hDLEtBQUt5dUQsT0FBTzE3QixPQUMxQnVCLEVBQVF0MEIsS0FBSytJLE1BQU0xQixRQUFRckgsS0FBTTZ4QyxHQUNqQzkvQixFQUFJL1AsS0FBS3N5QixHQUdYLE9BQU9oM0IsRUFBTzRELE9BQU82USxJQUd2QixJQUFJbzFELEVBQVU3cEUsRUFBT1UsTUFBTSxHQUFJLElBcUIvQixTQUFTaXBFLElBQ1BqbkUsS0FBS29uRSxNQUFROXBFLEVBQU9XLFlBQVksR0E0QmxDLFNBQVNtMkMsRUFBZ0I0eEIsRUFBT2o4RCxFQUFVckMsR0FDeEMsSUFBSXE5QyxFQUFTZ2lCLEVBQU1mLEVBQU03NUQsZUFDekIsSUFBSzQ0QyxFQUFRLE1BQU0sSUFBSTVtRCxVQUFVLHNCQUdqQyxHQUR3QixpQkFBYjRMLElBQXVCQSxFQUFXek0sRUFBT1MsS0FBS2dNLElBQ3JEQSxFQUFTak0sU0FBV2luRCxFQUFPcm5ELElBQU0sRUFBRyxNQUFNLElBQUlTLFVBQVUsc0JBQXdCNEwsRUFBU2pNLFFBRzdGLEdBRGtCLGlCQUFQNEosSUFBaUJBLEVBQUtwSyxFQUFPUyxLQUFLMkosSUFDekIsUUFBaEJxOUMsRUFBT3Q5QyxNQUFrQkMsRUFBRzVKLFNBQVdpbkQsRUFBT3I5QyxHQUFJLE1BQU0sSUFBSXZKLFVBQVUscUJBQXVCdUosRUFBRzVKLFFBRXBHLE1BQW9CLFdBQWhCaW5ELEVBQU9uNUMsS0FDRixJQUFJcEUsRUFBYXU5QyxFQUFPdG9ELE9BQVFzTixFQUFVckMsR0FDeEIsU0FBaEJxOUMsRUFBT241QyxLQUNULElBQUlvN0QsRUFBV2ppQixFQUFPdG9ELE9BQVFzTixFQUFVckMsR0FHMUMsSUFBSTVCLEVBQU9pL0MsRUFBT3RvRCxPQUFRc04sRUFBVXJDLEdBaEU3QzVCLEVBQU9oSixVQUFVOHpCLE9BQVMsV0FDeEIsSUFBSWloQixFQUFRN3hDLEtBQUt5dUQsT0FBTzdJLFFBQ3hCLEdBQUk1bEQsS0FBS2tuRSxhQUdQLE9BRkFyMUIsRUFBUTd4QyxLQUFLK0ksTUFBTTFCLFFBQVFySCxLQUFNNnhDLEdBQ2pDN3hDLEtBQUs2SCxRQUFRKzdCLFFBQ05pTyxFQUdULElBQUtBLEVBQU01Z0MsT0FBT2syRCxHQUVoQixNQURBbm5FLEtBQUs2SCxRQUFRKzdCLFFBQ1AsSUFBSXRrQyxNQUFNLHNDQUlwQndHLEVBQU9oSixVQUFVdTBCLGVBQWlCLFNBQVVnMkMsR0FFMUMsT0FEQXJuRSxLQUFLa25FLGVBQWlCRyxFQUNmcm5FLE1BT1RpbkUsRUFBU25xRSxVQUFVb2pCLElBQU0sU0FBVXBjLEdBQ2pDOUQsS0FBS29uRSxNQUFROXBFLEVBQU80RCxPQUFPLENBQUNsQixLQUFLb25FLE1BQU90akUsS0FHMUNtakUsRUFBU25xRSxVQUFVaTJCLElBQU0sV0FDdkIsR0FBSS95QixLQUFLb25FLE1BQU10cEUsT0FBUyxHQUFJLENBQzFCLElBQUlpVSxFQUFNL1IsS0FBS29uRSxNQUFNdmxFLE1BQU0sRUFBRyxJQUU5QixPQURBN0IsS0FBS29uRSxNQUFRcG5FLEtBQUtvbkUsTUFBTXZsRSxNQUFNLElBQ3ZCa1EsRUFFVCxPQUFPLE1BR1RrMUQsRUFBU25xRSxVQUFVOG9ELE1BQVEsV0FLekIsSUFKQSxJQUFJcDZDLEVBQU0sR0FBS3hMLEtBQUtvbkUsTUFBTXRwRSxPQUN0QndwRSxFQUFVaHFFLEVBQU9XLFlBQVl1TixHQUU3Qi9KLEdBQUssSUFDQUEsRUFBSStKLEdBQ1g4N0QsRUFBUXB6RCxXQUFXMUksRUFBSy9KLEdBRzFCLE9BQU9uRSxFQUFPNEQsT0FBTyxDQUFDbEIsS0FBS29uRSxNQUFPRSxLQThCcEM1cUUsRUFBUTAzQyxlQUFpQkEsRUFDekIxM0MsRUFBUXkzQyxhQVRSLFNBQXVCNnhCLEVBQU9qOEQsR0FDNUIsSUFBSWc3QyxFQUFTZ2lCLEVBQU1mLEVBQU03NUQsZUFDekIsSUFBSzQ0QyxFQUFRLE1BQU0sSUFBSTVtRCxVQUFVLHNCQUVqQyxJQUFJNHpCLEVBQU9nMEMsRUFBS2g4RCxHQUFVLEVBQU9nN0MsRUFBT3JuRCxJQUFLcW5ELEVBQU9yOUMsSUFDcEQsT0FBTzBzQyxFQUFlNHhCLEVBQU9qMEMsRUFBS3IwQixJQUFLcTBCLEVBQUtycUIsTSxjQzdHOUNoTCxFQUFRMkssUUFBVSxTQUFVMlYsRUFBTWhWLEdBQ2hDLE9BQU9nVixFQUFLblYsUUFBUU0sYUFBYUgsSUFHbkN0TCxFQUFRNEssUUFBVSxTQUFVMFYsRUFBTWhWLEdBQ2hDLE9BQU9nVixFQUFLblYsUUFBUVEsYUFBYUwsSyxnQkNMbkMsSUFBSXlYLEVBQU0sRUFBUSxJQUVsQi9pQixFQUFRMkssUUFBVSxTQUFVMlYsRUFBTWhWLEdBQ2hDLElBQUlsRSxFQUFPMmIsRUFBSXpYLEVBQU9nVixFQUFLdXhDLE9BRzNCLE9BREF2eEMsRUFBS3V4QyxNQUFRdnhDLEVBQUtuVixRQUFRTSxhQUFhckUsR0FDaENrWixFQUFLdXhDLE9BR2Q3eEQsRUFBUTRLLFFBQVUsU0FBVTBWLEVBQU1oVixHQUNoQyxJQUFJTSxFQUFNMFUsRUFBS3V4QyxNQUVmdnhDLEVBQUt1eEMsTUFBUXZtRCxFQUNiLElBQUkrSixFQUFNaUwsRUFBS25WLFFBQVFRLGFBQWFMLEdBRXBDLE9BQU95WCxFQUFJMU4sRUFBS3pKLEssZ0JDZmxCLElBQUloTCxFQUFTLEVBQVEsSUFBZUEsT0FDaENtaUIsRUFBTSxFQUFRLElBRWxCLFNBQVM4bkQsRUFBY3ZxRCxFQUFNbFosRUFBTXdELEdBQ2pDLElBQUlrRSxFQUFNMUgsRUFBS2hHLE9BQ1hpVSxFQUFNME4sRUFBSTNiLEVBQU1rWixFQUFLeXhDLFFBR3pCLE9BRkF6eEMsRUFBS3l4QyxPQUFTenhDLEVBQUt5eEMsT0FBTzVzRCxNQUFNMkosR0FDaEN3UixFQUFLdXhDLE1BQVFqeEQsRUFBTzRELE9BQU8sQ0FBQzhiLEVBQUt1eEMsTUFBT2puRCxFQUFVeEQsRUFBT2lPLElBQ2xEQSxFQUdUclYsRUFBUTJLLFFBQVUsU0FBVTJWLEVBQU1sWixFQUFNd0QsR0FJdEMsSUFIQSxJQUNJa0UsRUFEQXVHLEVBQU16VSxFQUFPVyxZQUFZLEdBR3RCNkYsRUFBS2hHLFFBQVEsQ0FNbEIsR0FMMkIsSUFBdkJrZixFQUFLeXhDLE9BQU8zd0QsU0FDZGtmLEVBQUt5eEMsT0FBU3p4QyxFQUFLblYsUUFBUU0sYUFBYTZVLEVBQUt1eEMsT0FDN0N2eEMsRUFBS3V4QyxNQUFRanhELEVBQU9XLFlBQVksTUFHOUIrZSxFQUFLeXhDLE9BQU8zd0QsUUFBVWdHLEVBQUtoRyxRQUl4QixDQUNMaVUsRUFBTXpVLEVBQU80RCxPQUFPLENBQUM2USxFQUFLdzFELEVBQWF2cUQsRUFBTWxaLEVBQU13RCxLQUNuRCxNQUxBa0UsRUFBTXdSLEVBQUt5eEMsT0FBTzN3RCxPQUNsQmlVLEVBQU16VSxFQUFPNEQsT0FBTyxDQUFDNlEsRUFBS3cxRCxFQUFhdnFELEVBQU1sWixFQUFLakMsTUFBTSxFQUFHMkosR0FBTWxFLEtBQ2pFeEQsRUFBT0EsRUFBS2pDLE1BQU0ySixHQU90QixPQUFPdUcsSSxnQkMvQlQsSUFBSXpVLEVBQVMsRUFBUSxJQUFlQSxPQUVwQyxTQUFTa3FFLEVBQWF4cUQsRUFBTXlxRCxFQUFXbmdFLEdBQ3JDLElBQ0l5SyxFQURNaUwsRUFBS25WLFFBQVFNLGFBQWE2VSxFQUFLdXhDLE9BQzNCLEdBQUtrWixFQU9uQixPQUxBenFELEVBQUt1eEMsTUFBUWp4RCxFQUFPNEQsT0FBTyxDQUN6QjhiLEVBQUt1eEMsTUFBTTFzRCxNQUFNLEdBQ2pCdkUsRUFBT1MsS0FBSyxDQUFDdUosRUFBVW1nRSxFQUFZMTFELE1BRzlCQSxFQUdUclYsRUFBUTJLLFFBQVUsU0FBVTJWLEVBQU02MEIsRUFBT3ZxQyxHQUt2QyxJQUpBLElBQUlrRSxFQUFNcW1DLEVBQU0vekMsT0FDWmlVLEVBQU16VSxFQUFPVyxZQUFZdU4sR0FDekIvSixHQUFLLElBRUFBLEVBQUkrSixHQUNYdUcsRUFBSXRRLEdBQUsrbEUsRUFBWXhxRCxFQUFNNjBCLEVBQU1wd0MsR0FBSTZGLEdBR3ZDLE9BQU95SyxJLGdCQ3ZCVCxJQUFJelUsRUFBUyxFQUFRLElBQWVBLE9BRXBDLFNBQVNrcUUsRUFBYXhxRCxFQUFNeXFELEVBQVduZ0UsR0FNckMsSUFMQSxJQUlJd1ksRUFBSzlpQixFQUhMeUUsR0FBSyxFQUVMc1EsRUFBTSxJQUVEdFEsRUFIQyxHQUtScWUsRUFBTzJuRCxFQUFhLEdBQU0sRUFBSWhtRSxFQUFPLElBQU8sRUFFNUNzUSxJQUFpQixLQURqQi9VLEVBRk1nZ0IsRUFBS25WLFFBQVFNLGFBQWE2VSxFQUFLdXhDLE9BRXpCLEdBQUt6dUMsS0FDVXJlLEVBQUksRUFDL0J1YixFQUFLdXhDLE1BQVFtWixFQUFRMXFELEVBQUt1eEMsTUFBT2puRCxFQUFVd1ksRUFBTTlpQixHQUVuRCxPQUFPK1UsRUFHVCxTQUFTMjFELEVBQVNycUUsRUFBUUwsR0FDeEIsSUFBSXdPLEVBQU1uTyxFQUFPUyxPQUNiMkQsR0FBSyxFQUNMc1EsRUFBTXpVLEVBQU9XLFlBQVlaLEVBQU9TLFFBR3BDLElBRkFULEVBQVNDLEVBQU80RCxPQUFPLENBQUM3RCxFQUFRQyxFQUFPUyxLQUFLLENBQUNmLFFBRXBDeUUsRUFBSStKLEdBQ1h1RyxFQUFJdFEsR0FBS3BFLEVBQU9vRSxJQUFNLEVBQUlwRSxFQUFPb0UsRUFBSSxJQUFNLEVBRzdDLE9BQU9zUSxFQUdUclYsRUFBUTJLLFFBQVUsU0FBVTJWLEVBQU02MEIsRUFBT3ZxQyxHQUt2QyxJQUpBLElBQUlrRSxFQUFNcW1DLEVBQU0vekMsT0FDWmlVLEVBQU16VSxFQUFPVyxZQUFZdU4sR0FDekIvSixHQUFLLElBRUFBLEVBQUkrSixHQUNYdUcsRUFBSXRRLEdBQUsrbEUsRUFBWXhxRCxFQUFNNjBCLEVBQU1wd0MsR0FBSTZGLEdBR3ZDLE9BQU95SyxJLGlCQ3hDVCxrQkFBVSxFQUFRLElBRWxCLFNBQVN1OEMsRUFBVXR4QyxHQUVqQixPQURBQSxFQUFLdXhDLE1BQVF2eEMsRUFBS25WLFFBQVFNLGFBQWE2VSxFQUFLdXhDLE9BQ3JDdnhDLEVBQUt1eEMsTUFHZDd4RCxFQUFRMkssUUFBVSxTQUFVMlYsRUFBTTYwQixHQUNoQyxLQUFPNzBCLEVBQUt5eEMsT0FBTzN3RCxPQUFTK3pDLEVBQU0vekMsUUFDaENrZixFQUFLeXhDLE9BQVNueEQsRUFBTzRELE9BQU8sQ0FBQzhiLEVBQUt5eEMsT0FBUUgsRUFBU3R4QyxLQUdyRCxJQUFJMVUsRUFBTTBVLEVBQUt5eEMsT0FBTzVzRCxNQUFNLEVBQUdnd0MsRUFBTS96QyxRQUVyQyxPQURBa2YsRUFBS3l4QyxPQUFTenhDLEVBQUt5eEMsT0FBTzVzRCxNQUFNZ3dDLEVBQU0vekMsUUFDL0IyaEIsRUFBSW95QixFQUFPdnBDLE0seUNDZHBCLElBQUloTCxFQUFTLEVBQVEsSUFBZUEsT0FDaENxcUUsRUFBU3JxRSxFQUFPVSxNQUFNLEdBQUksR0FXOUIsU0FBUzRwRSxFQUFXNzFELEdBQ2xCLElBQUl4VCxFQUFNakIsRUFBT1csWUFBWSxJQUs3QixPQUpBTSxFQUFJZ1csY0FBY3hDLEVBQUksS0FBTyxFQUFHLEdBQ2hDeFQsRUFBSWdXLGNBQWN4QyxFQUFJLEtBQU8sRUFBRyxHQUNoQ3hULEVBQUlnVyxjQUFjeEMsRUFBSSxLQUFPLEVBQUcsR0FDaEN4VCxFQUFJZ1csY0FBY3hDLEVBQUksS0FBTyxFQUFHLElBQ3pCeFQsRUFHVCxTQUFTb3dELEVBQU9qeEQsR0FDZHNDLEtBQUs4b0IsRUFBSXByQixFQUNUc0MsS0FBS3U3QixNQUFRaitCLEVBQU9VLE1BQU0sR0FBSSxHQUM5QmdDLEtBQUtvbkUsTUFBUTlwRSxFQUFPVyxZQUFZLEdBS2xDMHdELEVBQU03eEQsVUFBVWl5RCxNQUFRLFNBQVUvbUQsR0FFaEMsSUFEQSxJQUFJdkcsR0FBSyxJQUNBQSxFQUFJdUcsRUFBTWxLLFFBQ2pCa0MsS0FBS3U3QixNQUFNOTVCLElBQU11RyxFQUFNdkcsR0FFekJ6QixLQUFLNm5FLGFBR1BsWixFQUFNN3hELFVBQVUrcUUsVUFBWSxXQUsxQixJQUpBLElBbkNnQnRwRSxFQXFDWndQLEVBQU8rNUQsRUFGUEMsRUFsQ0csRUFEU3hwRSxFQW1DQ3lCLEtBQUs4b0IsR0FqQ2hCMVYsYUFBYSxHQUNqQjdVLEVBQUk2VSxhQUFhLEdBQ2pCN1UsRUFBSTZVLGFBQWEsR0FDakI3VSxFQUFJNlUsYUFBYSxLQStCZjQwRCxFQUFLLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FFZnZtRSxHQUFLLElBQ0FBLEVBQUksS0FBSyxDQWNoQixJQWJ3RCxJQUFsRHpCLEtBQUt1N0IsU0FBUzk1QixFQUFJLElBQU8sR0FBTSxFQUFLQSxFQUFJLEtBRzVDdW1FLEVBQUcsSUFBTUQsRUFBRyxHQUNaQyxFQUFHLElBQU1ELEVBQUcsR0FDWkMsRUFBRyxJQUFNRCxFQUFHLEdBQ1pDLEVBQUcsSUFBTUQsRUFBRyxJQUlkRCxFQUF3QixJQUFQLEVBQVJDLEVBQUcsSUFHUGg2RCxFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFDakJnNkQsRUFBR2g2RCxHQUFNZzZELEVBQUdoNkQsS0FBTyxHQUFtQixFQUFaZzZELEVBQUdoNkQsRUFBSSxLQUFXLEdBRTlDZzZELEVBQUcsR0FBS0EsRUFBRyxLQUFPLEVBR2RELElBQ0ZDLEVBQUcsR0FBS0EsRUFBRyxHQUFNLEtBQVEsSUFHN0IvbkUsS0FBS3U3QixNQUFRcXNDLEVBQVVJLElBR3pCclosRUFBTTd4RCxVQUFVb0ksT0FBUyxTQUFVM0csR0FFakMsSUFBSXN6QyxFQUNKLElBRkE3eEMsS0FBS29uRSxNQUFROXBFLEVBQU80RCxPQUFPLENBQUNsQixLQUFLb25FLE1BQU83b0UsSUFFakN5QixLQUFLb25FLE1BQU10cEUsUUFBVSxJQUMxQit6QyxFQUFRN3hDLEtBQUtvbkUsTUFBTXZsRSxNQUFNLEVBQUcsSUFDNUI3QixLQUFLb25FLE1BQVFwbkUsS0FBS29uRSxNQUFNdmxFLE1BQU0sSUFDOUI3QixLQUFLK3VELE1BQU1sZCxJQUlmOGMsRUFBTTd4RCxVQUFVNnpCLE1BQVEsU0FBVXMzQyxFQUFLaHVELEdBTXJDLE9BTElqYSxLQUFLb25FLE1BQU10cEUsUUFDYmtDLEtBQUsrdUQsTUFBTXp4RCxFQUFPNEQsT0FBTyxDQUFDbEIsS0FBS29uRSxNQUFPTyxHQUFTLEtBR2pEM25FLEtBQUsrdUQsTUFBTTZZLEVBQVUsQ0FBQyxFQUFHSyxFQUFLLEVBQUdodUQsS0FDMUJqYSxLQUFLdTdCLE9BR2Q5K0IsRUFBT0MsUUFBVWl5RCxHLGdCQ3hGakIsSUFBSXFZLEVBQWEsRUFBUSxLQUNyQjFwRSxFQUFTLEVBQVEsSUFBZUEsT0FDaEN5cEUsRUFBUSxFQUFRLEtBQ2hCdi9ELEVBQWUsRUFBUSxLQUN2QjhvQixFQUFZLEVBQVEsSUFDcEJvK0IsRUFBTSxFQUFRLElBQ2RxWCxFQUFPLEVBQVEsSUFHbkIsU0FBU3h4QixFQUFVOXNDLEVBQU0vSixFQUFLZ0ssR0FDNUI0b0IsRUFBVTF1QixLQUFLNUIsTUFFZkEsS0FBS3l1RCxPQUFTLElBQUl3WSxFQUNsQmpuRSxLQUFLa29FLFdBQVEsRUFDYmxvRSxLQUFLNkgsUUFBVSxJQUFJNm1ELEVBQUkzckIsSUFBSXJsQyxHQUMzQnNDLEtBQUt1dUQsTUFBUWp4RCxFQUFPUyxLQUFLMkosR0FDekIxSCxLQUFLK0ksTUFBUXRCLEVBQ2J6SCxLQUFLa25FLGNBQWUsRUErQnRCLFNBQVNELElBQ1BqbkUsS0FBS29uRSxNQUFROXBFLEVBQU9XLFlBQVksR0E4Q2xDLFNBQVNxckMsRUFBa0IwOEIsRUFBT2o4RCxFQUFVckMsR0FDMUMsSUFBSXE5QyxFQUFTZ2lCLEVBQU1mLEVBQU03NUQsZUFDekIsSUFBSzQ0QyxFQUFRLE1BQU0sSUFBSTVtRCxVQUFVLHNCQUdqQyxHQURrQixpQkFBUHVKLElBQWlCQSxFQUFLcEssRUFBT1MsS0FBSzJKLElBQ3pCLFFBQWhCcTlDLEVBQU90OUMsTUFBa0JDLEVBQUc1SixTQUFXaW5ELEVBQU9yOUMsR0FBSSxNQUFNLElBQUl2SixVQUFVLHFCQUF1QnVKLEVBQUc1SixRQUdwRyxHQUR3QixpQkFBYmlNLElBQXVCQSxFQUFXek0sRUFBT1MsS0FBS2dNLElBQ3JEQSxFQUFTak0sU0FBV2luRCxFQUFPcm5ELElBQU0sRUFBRyxNQUFNLElBQUlTLFVBQVUsc0JBQXdCNEwsRUFBU2pNLFFBRTdGLE1BQW9CLFdBQWhCaW5ELEVBQU9uNUMsS0FDRixJQUFJcEUsRUFBYXU5QyxFQUFPdG9ELE9BQVFzTixFQUFVckMsR0FBSSxHQUM1QixTQUFoQnE5QyxFQUFPbjVDLEtBQ1QsSUFBSW83RCxFQUFXamlCLEVBQU90b0QsT0FBUXNOLEVBQVVyQyxHQUFJLEdBRzlDLElBQUk2c0MsRUFBU3dRLEVBQU90b0QsT0FBUXNOLEVBQVVyQyxHQXhHaEMsRUFBUSxHQWF2QmlSLENBQVM0N0IsRUFBVWprQixHQUVuQmlrQixFQUFTejNDLFVBQVVxMEIsUUFBVSxTQUFVcnRCLEdBRXJDLElBQUkrdEMsRUFDQXZkLEVBRkp0MEIsS0FBS3l1RCxPQUFPdnVDLElBQUlwYyxHQUloQixJQURBLElBQUlpTyxFQUFNLEdBQ0Y4L0IsRUFBUTd4QyxLQUFLeXVELE9BQU8xN0IsSUFBSS95QixLQUFLa25FLGVBQ25DNXlDLEVBQVF0MEIsS0FBSytJLE1BQU16QixRQUFRdEgsS0FBTTZ4QyxHQUNqQzkvQixFQUFJL1AsS0FBS3N5QixHQUVYLE9BQU9oM0IsRUFBTzRELE9BQU82USxJQUd2QndpQyxFQUFTejNDLFVBQVU4ekIsT0FBUyxXQUMxQixJQUFJaWhCLEVBQVE3eEMsS0FBS3l1RCxPQUFPN0ksUUFDeEIsR0FBSTVsRCxLQUFLa25FLGFBQ1AsT0EwQ0osU0FBZ0JwMEIsR0FDZCxJQUFJcTFCLEVBQVNyMUIsRUFBSyxJQUNsQixHQUFJcTFCLEVBQVMsR0FBS0EsRUFBUyxHQUN6QixNQUFNLElBQUk3b0UsTUFBTSwwQkFFbEIsSUFBSW1DLEdBQUssRUFDVCxPQUFTQSxFQUFJMG1FLEdBQ1gsR0FBSXIxQixFQUFNcnhDLEdBQUssR0FBSzBtRSxNQUFjQSxFQUNoQyxNQUFNLElBQUk3b0UsTUFBTSwwQkFHcEIsR0FBZSxLQUFYNm9FLEVBQWUsT0FFbkIsT0FBT3IxQixFQUFLanhDLE1BQU0sRUFBRyxHQUFLc21FLEdBdkRqQnYvRCxDQUFNNUksS0FBSytJLE1BQU16QixRQUFRdEgsS0FBTTZ4QyxJQUNqQyxHQUFJQSxFQUNULE1BQU0sSUFBSXZ5QyxNQUFNLHNDQUlwQmkxQyxFQUFTejNDLFVBQVV1MEIsZUFBaUIsU0FBVWcyQyxHQUU1QyxPQURBcm5FLEtBQUtrbkUsZUFBaUJHLEVBQ2ZybkUsTUFPVGluRSxFQUFTbnFFLFVBQVVvakIsSUFBTSxTQUFVcGMsR0FDakM5RCxLQUFLb25FLE1BQVE5cEUsRUFBTzRELE9BQU8sQ0FBQ2xCLEtBQUtvbkUsTUFBT3RqRSxLQUcxQ21qRSxFQUFTbnFFLFVBQVVpMkIsSUFBTSxTQUFVcTFDLEdBQ2pDLElBQUlyMkQsRUFDSixHQUFJcTJELEdBQ0YsR0FBSXBvRSxLQUFLb25FLE1BQU10cEUsT0FBUyxHQUd0QixPQUZBaVUsRUFBTS9SLEtBQUtvbkUsTUFBTXZsRSxNQUFNLEVBQUcsSUFDMUI3QixLQUFLb25FLE1BQVFwbkUsS0FBS29uRSxNQUFNdmxFLE1BQU0sSUFDdkJrUSxPQUdULEdBQUkvUixLQUFLb25FLE1BQU10cEUsUUFBVSxHQUd2QixPQUZBaVUsRUFBTS9SLEtBQUtvbkUsTUFBTXZsRSxNQUFNLEVBQUcsSUFDMUI3QixLQUFLb25FLE1BQVFwbkUsS0FBS29uRSxNQUFNdmxFLE1BQU0sSUFDdkJrUSxFQUlYLE9BQU8sTUFHVGsxRCxFQUFTbnFFLFVBQVU4b0QsTUFBUSxXQUN6QixHQUFJNWxELEtBQUtvbkUsTUFBTXRwRSxPQUFRLE9BQU9rQyxLQUFLb25FLE9BOENyQzFxRSxFQUFRNDNDLGVBUlIsU0FBeUIweEIsRUFBT2o4RCxHQUM5QixJQUFJZzdDLEVBQVNnaUIsRUFBTWYsRUFBTTc1RCxlQUN6QixJQUFLNDRDLEVBQVEsTUFBTSxJQUFJNW1ELFVBQVUsc0JBRWpDLElBQUk0ekIsRUFBT2cwQyxFQUFLaDhELEdBQVUsRUFBT2c3QyxFQUFPcm5ELElBQUtxbkQsRUFBT3I5QyxJQUNwRCxPQUFPNGhDLEVBQWlCMDhCLEVBQU9qMEMsRUFBS3IwQixJQUFLcTBCLEVBQUtycUIsS0FJaERoTCxFQUFRNHNDLGlCQUFtQkEsRyxjQzNIM0I1c0MsRUFBUSxXQUFhLENBQ25CZ0IsSUFBSyxFQUNMZ0ssR0FBSSxHQUVOaEwsRUFBUSxXQUFhQSxFQUFRdXBFLElBQU0sQ0FDakN2b0UsSUFBSyxFQUNMZ0ssR0FBSSxHQUVOaEwsRUFBUSxnQkFBa0JBLEVBQVE0cEUsS0FBTyxDQUN2QzVvRSxJQUFLLEdBQ0xnSyxHQUFJLEdBRU5oTCxFQUFRLFlBQWMsQ0FDcEJnQixJQUFLLEdBQ0xnSyxHQUFJLEdBRU5oTCxFQUFRLGVBQWlCLENBQ3ZCZ0IsSUFBSyxHQUNMZ0ssR0FBSSxHQUVOaEwsRUFBUSxXQUFhLENBQ25CZ0IsSUFBSyxHQUNMZ0ssR0FBSSxJLGlCQ3RCTixrQkFBb0IsRUFBUSxLQUN4QnNtQixFQUFTLEVBQVEsS0FFakJxNkMsRUFBSyxFQUFRLEtBU2pCLElBQUlDLEVBQVksQ0FDZCxRQUFVLEVBQU0sS0FBTyxFQUFNLFFBQVUsR0EyQnpDNXJFLEVBQVEwK0QsbUJBQXFCMStELEVBQVEyK0QseUJBQTJCMytELEVBQVE0K0QsaUJBbkN4RSxTQUEyQmprRCxHQUN6QixJQUFJdVgsRUFBUSxJQUFJdHhCLEVBQU8wd0IsRUFBTzNXLEdBQUt1WCxNQUFPLE9BQ3RDMGhDLEVBQU0sSUFBSWh6RCxFQUFPMHdCLEVBQU8zVyxHQUFLaTVDLElBQUssT0FFdEMsT0FBTyxJQUFJK1gsRUFBR3o1QyxFQUFPMGhDLElBZ0N2QjV6RCxFQUFRNitELG9CQUFzQjcrRCxFQUFROCtELGNBekJ0QyxTQUFTRCxFQUFxQjNzQyxFQUFPMXNCLEVBQUtxbUUsRUFBV0MsR0FDbkQsT0FBSWxyRSxFQUFPaU8sU0FBU3JKLFNBQTJCMUQsSUFBbkI4cEUsRUFBVXBtRSxHQUM3QnE1RCxFQUFvQjNzQyxFQUFPLFNBQVUxc0IsRUFBS3FtRSxJQUduRHJtRSxFQUFNQSxHQUFPLFNBQ2JzbUUsRUFBT0EsR0FBUSxTQUNmRCxFQUFZQSxHQUFhLElBQUlqckUsRUFBTyxDQUFDLElBRWhDQSxFQUFPaU8sU0FBU2c5RCxLQUNuQkEsRUFBWSxJQUFJanJFLEVBQU9pckUsRUFBV0MsSUFHZixpQkFBVjU1QyxFQUNGLElBQUl5NUMsRUFBR0ksRUFBYzc1QyxFQUFPMjVDLEdBQVlBLEdBQVcsSUFHdkRqckUsRUFBT2lPLFNBQVNxakIsS0FDbkJBLEVBQVEsSUFBSXR4QixFQUFPc3hCLEVBQU8xc0IsSUFHckIsSUFBSW1tRSxFQUFHejVDLEVBQU8yNUMsR0FBVyxRLDBDQ3JDbEMsMkJBQ0UsYUFHQSxTQUFTdnlELEVBQVFySyxFQUFLc0ssR0FDcEIsSUFBS3RLLEVBQUssTUFBTSxJQUFJck0sTUFBTTJXLEdBQU8sb0JBS25DLFNBQVMwQyxFQUFVaGMsRUFBTUMsR0FDdkJELEVBQUtFLE9BQVNELEVBQ2QsSUFBSVEsRUFBVyxhQUNmQSxFQUFTTixVQUFZRixFQUFVRSxVQUMvQkgsRUFBS0csVUFBWSxJQUFJTSxFQUNyQlQsRUFBS0csVUFBVUMsWUFBY0osRUFLL0IsU0FBUzJaLEVBQUk0RSxFQUFRQyxFQUFNakMsR0FDekIsR0FBSTVDLEVBQUc4RSxLQUFLRixHQUNWLE9BQU9BLEVBR1RsYixLQUFLcWIsU0FBVyxFQUNoQnJiLEtBQUthLE1BQVEsS0FDYmIsS0FBS2xDLE9BQVMsRUFHZGtDLEtBQUtzYixJQUFNLEtBRUksT0FBWEosSUFDVyxPQUFUQyxHQUEwQixPQUFUQSxJQUNuQmpDLEVBQVNpQyxFQUNUQSxFQUFPLElBR1RuYixLQUFLdWIsTUFBTUwsR0FBVSxFQUFHQyxHQUFRLEdBQUlqQyxHQUFVLE9BWWxELElBQUk1YixFQVRrQixpQkFBWGIsRUFDVEEsRUFBT0MsUUFBVTRaLEVBRWpCNVosRUFBUTRaLEdBQUtBLEVBR2ZBLEVBQUdBLEdBQUtBLEVBQ1JBLEVBQUdrRixTQUFXLEdBR2QsSUFDRWxlLEVBQVMsRUFBUSxLQUFVQSxPQUMzQixNQUFPK0YsSUFvSVQsU0FBU29ZLEVBQVVqTixFQUFLbkMsRUFBT0MsR0FHN0IsSUFGQSxJQUFJOEosRUFBSSxFQUNKNUssRUFBTTdNLEtBQUsrRixJQUFJOEosRUFBSTFRLE9BQVF3TyxHQUN0QjdLLEVBQUk0SyxFQUFPNUssRUFBSStKLEVBQUsvSixJQUFLLENBQ2hDLElBQUlzTixFQUFJUCxFQUFJdkwsV0FBV3hCLEdBQUssR0FFNUIyVSxJQUFNLEVBSUpBLEdBREVySCxHQUFLLElBQU1BLEdBQUssR0FDYkEsRUFBSSxHQUFLLEdBR0xBLEdBQUssSUFBTUEsR0FBSyxHQUNwQkEsRUFBSSxHQUFLLEdBSUwsR0FBSkEsRUFHVCxPQUFPcUgsRUFpQ1QsU0FBU3NGLEVBQVdsTixFQUFLbkMsRUFBT0MsRUFBS3lHLEdBR25DLElBRkEsSUFBSXFELEVBQUksRUFDSjVLLEVBQU03TSxLQUFLK0YsSUFBSThKLEVBQUkxUSxPQUFRd08sR0FDdEI3SyxFQUFJNEssRUFBTzVLLEVBQUkrSixFQUFLL0osSUFBSyxDQUNoQyxJQUFJc04sRUFBSVAsRUFBSXZMLFdBQVd4QixHQUFLLEdBRTVCMlUsR0FBS3JELEVBSUhxRCxHQURFckgsR0FBSyxHQUNGQSxFQUFJLEdBQUssR0FHTEEsR0FBSyxHQUNUQSxFQUFJLEdBQUssR0FJVEEsRUFHVCxPQUFPcUgsRUE1TVRFLEVBQUc4RSxLQUFPLFNBQWV2RSxHQUN2QixPQUFJQSxhQUFlUCxHQUlKLE9BQVJPLEdBQStCLGlCQUFSQSxHQUM1QkEsRUFBSTlaLFlBQVl5ZSxXQUFhbEYsRUFBR2tGLFVBQVk1SixNQUFNeEgsUUFBUXlNLEVBQUloVyxRQUdsRXlWLEVBQUcvUixJQUFNLFNBQWNvWCxFQUFNQyxHQUMzQixPQUFJRCxFQUFLRSxJQUFJRCxHQUFTLEVBQVVELEVBQ3pCQyxHQUdUdEYsRUFBRzVSLElBQU0sU0FBY2lYLEVBQU1DLEdBQzNCLE9BQUlELEVBQUtFLElBQUlELEdBQVMsRUFBVUQsRUFDekJDLEdBR1R0RixFQUFHeFosVUFBVXllLE1BQVEsU0FBZUwsRUFBUUMsRUFBTWpDLEdBQ2hELEdBQXNCLGlCQUFYZ0MsRUFDVCxPQUFPbGIsS0FBSzhiLFlBQVlaLEVBQVFDLEVBQU1qQyxHQUd4QyxHQUFzQixpQkFBWGdDLEVBQ1QsT0FBT2xiLEtBQUsrYixXQUFXYixFQUFRQyxFQUFNakMsR0FHMUIsUUFBVGlDLElBQ0ZBLEVBQU8sSUFFVG5GLEVBQU9tRixLQUFpQixFQUFQQSxJQUFhQSxHQUFRLEdBQUtBLEdBQVEsSUFHbkQsSUFBSTlPLEVBQVEsRUFDTSxPQUZsQjZPLEVBQVNBLEVBQU94YSxXQUFXbVYsUUFBUSxPQUFRLEtBRWhDLElBQ1R4SixJQUdXLEtBQVQ4TyxFQUNGbmIsS0FBS2djLFVBQVVkLEVBQVE3TyxHQUV2QnJNLEtBQUtpYyxXQUFXZixFQUFRQyxFQUFNOU8sR0FHZCxNQUFkNk8sRUFBTyxLQUNUbGIsS0FBS3FiLFNBQVcsR0FHbEJyYixLQUFLa2MsUUFFVSxPQUFYaEQsR0FFSmxaLEtBQUsrYixXQUFXL2IsS0FBS3lXLFVBQVcwRSxFQUFNakMsSUFHeEM1QyxFQUFHeFosVUFBVWdmLFlBQWMsU0FBc0JaLEVBQVFDLEVBQU1qQyxHQUN6RGdDLEVBQVMsSUFDWGxiLEtBQUtxYixTQUFXLEVBQ2hCSCxHQUFVQSxHQUVSQSxFQUFTLFVBQ1hsYixLQUFLYSxNQUFRLENBQVcsU0FBVHFhLEdBQ2ZsYixLQUFLbEMsT0FBUyxHQUNMb2QsRUFBUyxrQkFDbEJsYixLQUFLYSxNQUFRLENBQ0YsU0FBVHFhLEVBQ0NBLEVBQVMsU0FBYSxVQUV6QmxiLEtBQUtsQyxPQUFTLElBRWRrWSxFQUFPa0YsRUFBUyxrQkFDaEJsYixLQUFLYSxNQUFRLENBQ0YsU0FBVHFhLEVBQ0NBLEVBQVMsU0FBYSxTQUN2QixHQUVGbGIsS0FBS2xDLE9BQVMsR0FHRCxPQUFYb2IsR0FHSmxaLEtBQUsrYixXQUFXL2IsS0FBS3lXLFVBQVcwRSxFQUFNakMsSUFHeEM1QyxFQUFHeFosVUFBVWlmLFdBQWEsU0FBcUJiLEVBQVFDLEVBQU1qQyxHQUczRCxHQURBbEQsRUFBZ0MsaUJBQWxCa0YsRUFBT3BkLFFBQ2pCb2QsRUFBT3BkLFFBQVUsRUFHbkIsT0FGQWtDLEtBQUthLE1BQVEsQ0FBRSxHQUNmYixLQUFLbEMsT0FBUyxFQUNQa0MsS0FHVEEsS0FBS2xDLE9BQVNhLEtBQUtnRCxLQUFLdVosRUFBT3BkLE9BQVMsR0FDeENrQyxLQUFLYSxNQUFRLElBQUkrUSxNQUFNNVIsS0FBS2xDLFFBQzVCLElBQUssSUFBSTJELEVBQUksRUFBR0EsRUFBSXpCLEtBQUtsQyxPQUFRMkQsSUFDL0J6QixLQUFLYSxNQUFNWSxHQUFLLEVBR2xCLElBQUlzTSxFQUFHK0ksRUFDSHFGLEVBQU0sRUFDVixHQUFlLE9BQVhqRCxFQUNGLElBQUt6WCxFQUFJeVosRUFBT3BkLE9BQVMsRUFBR2lRLEVBQUksRUFBR3RNLEdBQUssRUFBR0EsR0FBSyxFQUM5Q3FWLEVBQUlvRSxFQUFPelosR0FBTXlaLEVBQU96WixFQUFJLElBQU0sRUFBTXlaLEVBQU96WixFQUFJLElBQU0sR0FDekR6QixLQUFLYSxNQUFNa04sSUFBTytJLEdBQUtxRixFQUFPLFNBQzlCbmMsS0FBS2EsTUFBTWtOLEVBQUksR0FBTStJLElBQU8sR0FBS3FGLEVBQVEsVUFDekNBLEdBQU8sS0FDSSxLQUNUQSxHQUFPLEdBQ1BwTyxVQUdDLEdBQWUsT0FBWG1MLEVBQ1QsSUFBS3pYLEVBQUksRUFBR3NNLEVBQUksRUFBR3RNLEVBQUl5WixFQUFPcGQsT0FBUTJELEdBQUssRUFDekNxVixFQUFJb0UsRUFBT3paLEdBQU15WixFQUFPelosRUFBSSxJQUFNLEVBQU15WixFQUFPelosRUFBSSxJQUFNLEdBQ3pEekIsS0FBS2EsTUFBTWtOLElBQU8rSSxHQUFLcUYsRUFBTyxTQUM5Qm5jLEtBQUthLE1BQU1rTixFQUFJLEdBQU0rSSxJQUFPLEdBQUtxRixFQUFRLFVBQ3pDQSxHQUFPLEtBQ0ksS0FDVEEsR0FBTyxHQUNQcE8sS0FJTixPQUFPL04sS0FBS2tjLFNBMkJkNUYsRUFBR3haLFVBQVVrZixVQUFZLFNBQW9CZCxFQUFRN08sR0FFbkRyTSxLQUFLbEMsT0FBU2EsS0FBS2dELE1BQU11WixFQUFPcGQsT0FBU3VPLEdBQVMsR0FDbERyTSxLQUFLYSxNQUFRLElBQUkrUSxNQUFNNVIsS0FBS2xDLFFBQzVCLElBQUssSUFBSTJELEVBQUksRUFBR0EsRUFBSXpCLEtBQUtsQyxPQUFRMkQsSUFDL0J6QixLQUFLYSxNQUFNWSxHQUFLLEVBR2xCLElBQUlzTSxFQUFHK0ksRUFFSHFGLEVBQU0sRUFDVixJQUFLMWEsRUFBSXlaLEVBQU9wZCxPQUFTLEVBQUdpUSxFQUFJLEVBQUd0TSxHQUFLNEssRUFBTzVLLEdBQUssRUFDbERxVixFQUFJMkUsRUFBU1AsRUFBUXpaLEVBQUdBLEVBQUksR0FDNUJ6QixLQUFLYSxNQUFNa04sSUFBTytJLEdBQUtxRixFQUFPLFNBRTlCbmMsS0FBS2EsTUFBTWtOLEVBQUksSUFBTStJLElBQU8sR0FBS3FGLEVBQU8sU0FDeENBLEdBQU8sS0FDSSxLQUNUQSxHQUFPLEdBQ1BwTyxLQUdBdE0sRUFBSSxJQUFNNEssSUFDWnlLLEVBQUkyRSxFQUFTUCxFQUFRN08sRUFBTzVLLEVBQUksR0FDaEN6QixLQUFLYSxNQUFNa04sSUFBTytJLEdBQUtxRixFQUFPLFNBQzlCbmMsS0FBS2EsTUFBTWtOLEVBQUksSUFBTStJLElBQU8sR0FBS3FGLEVBQU8sU0FFMUNuYyxLQUFLa2MsU0EyQlA1RixFQUFHeFosVUFBVW1mLFdBQWEsU0FBcUJmLEVBQVFDLEVBQU05TyxHQUUzRHJNLEtBQUthLE1BQVEsQ0FBRSxHQUNmYixLQUFLbEMsT0FBUyxFQUdkLElBQUssSUFBSXNlLEVBQVUsRUFBR0MsRUFBVSxFQUFHQSxHQUFXLFNBQVdBLEdBQVdsQixFQUNsRWlCLElBRUZBLElBQ0FDLEVBQVdBLEVBQVVsQixFQUFRLEVBTzdCLElBTEEsSUFBSW1CLEVBQVFwQixFQUFPcGQsT0FBU3VPLEVBQ3hCZ0wsRUFBTWlGLEVBQVFGLEVBQ2Q5UCxFQUFNM04sS0FBSytGLElBQUk0WCxFQUFPQSxFQUFRakYsR0FBT2hMLEVBRXJDeU0sRUFBTyxFQUNGclgsRUFBSTRLLEVBQU81SyxFQUFJNkssRUFBSzdLLEdBQUsyYSxFQUNoQ3RELEVBQU80QyxFQUFVUixFQUFRelosRUFBR0EsRUFBSTJhLEVBQVNqQixHQUV6Q25iLEtBQUt1YyxNQUFNRixHQUNQcmMsS0FBS2EsTUFBTSxHQUFLaVksRUFBTyxTQUN6QjlZLEtBQUthLE1BQU0sSUFBTWlZLEVBRWpCOVksS0FBS3djLE9BQU8xRCxHQUloQixHQUFZLElBQVJ6QixFQUFXLENBQ2IsSUFBSS9ELEVBQU0sRUFHVixJQUZBd0YsRUFBTzRDLEVBQVVSLEVBQVF6WixFQUFHeVosRUFBT3BkLE9BQVFxZCxHQUV0QzFaLEVBQUksRUFBR0EsRUFBSTRWLEVBQUs1VixJQUNuQjZSLEdBQU82SCxFQUdUbmIsS0FBS3VjLE1BQU1qSixHQUNQdFQsS0FBS2EsTUFBTSxHQUFLaVksRUFBTyxTQUN6QjlZLEtBQUthLE1BQU0sSUFBTWlZLEVBRWpCOVksS0FBS3djLE9BQU8xRCxLQUtsQnhDLEVBQUd4WixVQUFVNE8sS0FBTyxTQUFlK1EsR0FDakNBLEVBQUs1YixNQUFRLElBQUkrUSxNQUFNNVIsS0FBS2xDLFFBQzVCLElBQUssSUFBSTJELEVBQUksRUFBR0EsRUFBSXpCLEtBQUtsQyxPQUFRMkQsSUFDL0JnYixFQUFLNWIsTUFBTVksR0FBS3pCLEtBQUthLE1BQU1ZLEdBRTdCZ2IsRUFBSzNlLE9BQVNrQyxLQUFLbEMsT0FDbkIyZSxFQUFLcEIsU0FBV3JiLEtBQUtxYixTQUNyQm9CLEVBQUtuQixJQUFNdGIsS0FBS3NiLEtBR2xCaEYsRUFBR3haLFVBQVU2RCxNQUFRLFdBQ25CLElBQUl5VixFQUFJLElBQUlFLEVBQUcsTUFFZixPQURBdFcsS0FBSzBMLEtBQUswSyxHQUNIQSxHQUdURSxFQUFHeFosVUFBVTRmLFFBQVUsU0FBa0J0ZSxHQUN2QyxLQUFPNEIsS0FBS2xDLE9BQVNNLEdBQ25CNEIsS0FBS2EsTUFBTWIsS0FBS2xDLFVBQVksRUFFOUIsT0FBT2tDLE1BSVRzVyxFQUFHeFosVUFBVW9mLE1BQVEsV0FDbkIsS0FBT2xjLEtBQUtsQyxPQUFTLEdBQXFDLElBQWhDa0MsS0FBS2EsTUFBTWIsS0FBS2xDLE9BQVMsSUFDakRrQyxLQUFLbEMsU0FFUCxPQUFPa0MsS0FBSzJjLGFBR2RyRyxFQUFHeFosVUFBVTZmLFVBQVksV0FLdkIsT0FIb0IsSUFBaEIzYyxLQUFLbEMsUUFBa0MsSUFBbEJrQyxLQUFLYSxNQUFNLEtBQ2xDYixLQUFLcWIsU0FBVyxHQUVYcmIsTUFHVHNXLEVBQUd4WixVQUFVb1UsUUFBVSxXQUNyQixPQUFRbFIsS0FBS3NiLElBQU0sVUFBWSxTQUFXdGIsS0FBS1UsU0FBUyxJQUFNLEtBaUNoRSxJQUFJa2MsRUFBUSxDQUNWLEdBQ0EsSUFDQSxLQUNBLE1BQ0EsT0FDQSxRQUNBLFNBQ0EsVUFDQSxXQUNBLFlBQ0EsYUFDQSxjQUNBLGVBQ0EsZ0JBQ0EsaUJBQ0Esa0JBQ0EsbUJBQ0Esb0JBQ0EscUJBQ0Esc0JBQ0EsdUJBQ0Esd0JBQ0EseUJBQ0EsMEJBQ0EsMkJBQ0EsNkJBR0VDLEVBQWEsQ0FDZixFQUFHLEVBQ0gsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDdkIsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFDbEIsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFDbEIsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFDbEIsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FHaEJDLEVBQWEsQ0FDZixFQUFHLEVBQ0gsU0FBVSxTQUFVLFNBQVUsU0FBVSxTQUFVLFNBQVUsU0FDNUQsU0FBVSxJQUFVLFNBQVUsU0FBVSxTQUFVLFFBQVMsU0FDM0QsU0FBVSxTQUFVLFNBQVUsU0FBVSxLQUFVLFFBQVMsUUFDM0QsUUFBUyxRQUFTLFFBQVMsU0FBVSxTQUFVLFNBQVUsU0FDekQsTUFBVSxTQUFVLFNBQVUsU0FBVSxTQUFVLFNBQVUsVUFzakI5RCxTQUFTQyxFQUFZQyxFQUFNbkcsRUFBSzlFLEdBQzlCQSxFQUFJc0osU0FBV3hFLEVBQUl3RSxTQUFXMkIsRUFBSzNCLFNBQ25DLElBQUk3UCxFQUFPd1IsRUFBS2xmLE9BQVMrWSxFQUFJL1ksT0FBVSxFQUN2Q2lVLEVBQUlqVSxPQUFTME4sRUFDYkEsRUFBT0EsRUFBTSxFQUFLLEVBR2xCLElBQUlpRixFQUFvQixFQUFoQnVNLEVBQUtuYyxNQUFNLEdBQ2ZpTSxFQUFtQixFQUFmK0osRUFBSWhXLE1BQU0sR0FDZHVWLEVBQUkzRixFQUFJM0QsRUFFUm1DLEVBQVMsU0FBSm1ILEVBQ0xvRSxFQUFTcEUsRUFBSSxTQUFhLEVBQzlCckUsRUFBSWxSLE1BQU0sR0FBS29PLEVBRWYsSUFBSyxJQUFJa0ksRUFBSSxFQUFHQSxFQUFJM0wsRUFBSzJMLElBQUssQ0FNNUIsSUFIQSxJQUFJOEYsRUFBU3pDLElBQVUsR0FDbkIwQyxFQUFnQixTQUFSMUMsRUFDUjJDLEVBQU94ZSxLQUFLK0YsSUFBSXlTLEVBQUdOLEVBQUkvWSxPQUFTLEdBQzNCaVEsRUFBSXBQLEtBQUs0RixJQUFJLEVBQUc0UyxFQUFJNkYsRUFBS2xmLE9BQVMsR0FBSWlRLEdBQUtvUCxFQUFNcFAsSUFBSyxDQUM3RCxJQUFJdE0sRUFBSzBWLEVBQUlwSixFQUFLLEVBSWxCa1AsSUFEQTdHLEdBRkEzRixFQUFvQixFQUFoQnVNLEVBQUtuYyxNQUFNWSxLQUNmcUwsRUFBbUIsRUFBZitKLEVBQUloVyxNQUFNa04sSUFDRm1QLEdBQ0csU0FBYSxFQUM1QkEsRUFBWSxTQUFKOUcsRUFFVnJFLEVBQUlsUixNQUFNc1csR0FBYSxFQUFSK0YsRUFDZjFDLEVBQWlCLEVBQVR5QyxFQVFWLE9BTmMsSUFBVnpDLEVBQ0Z6SSxFQUFJbFIsTUFBTXNXLEdBQWEsRUFBUnFELEVBRWZ6SSxFQUFJalUsU0FHQ2lVLEVBQUltSyxRQXpsQmI1RixFQUFHeFosVUFBVTRELFNBQVcsU0FBbUJ5YSxFQUFNeFMsR0FJL0MsSUFBSW9KLEVBQ0osR0FIQXBKLEVBQW9CLEVBQVZBLEdBQWUsRUFHWixNQUpid1MsRUFBT0EsR0FBUSxLQUlhLFFBQVRBLEVBQWdCLENBQ2pDcEosRUFBTSxHQUdOLElBRkEsSUFBSW9LLEVBQU0sRUFDTjNCLEVBQVEsRUFDSC9ZLEVBQUksRUFBR0EsRUFBSXpCLEtBQUtsQyxPQUFRMkQsSUFBSyxDQUNwQyxJQUFJcVYsRUFBSTlXLEtBQUthLE1BQU1ZLEdBQ2ZxWCxHQUErQixVQUFyQmhDLEdBQUtxRixFQUFPM0IsSUFBbUI5WixTQUFTLElBR3BEcVIsRUFEWSxLQURkeUksRUFBUzFELElBQU8sR0FBS3FGLEVBQVEsV0FDVjFhLElBQU16QixLQUFLbEMsT0FBUyxFQUMvQjhlLEVBQU0sRUFBSTlELEVBQUtoYixRQUFVZ2IsRUFBTy9HLEVBRWhDK0csRUFBTy9HLEdBRWZvSyxHQUFPLElBQ0ksS0FDVEEsR0FBTyxHQUNQMWEsS0FNSixJQUhjLElBQVYrWSxJQUNGekksRUFBTXlJLEVBQU05WixTQUFTLElBQU1xUixHQUV0QkEsRUFBSWpVLE9BQVM2SyxHQUFZLEdBQzlCb0osRUFBTSxJQUFNQSxFQUtkLE9BSHNCLElBQWxCL1IsS0FBS3FiLFdBQ1B0SixFQUFNLElBQU1BLEdBRVBBLEVBR1QsR0FBSW9KLEtBQWlCLEVBQVBBLElBQWFBLEdBQVEsR0FBS0EsR0FBUSxHQUFJLENBRWxELElBQUlpQyxFQUFZUCxFQUFXMUIsR0FFdkJrQyxFQUFZUCxFQUFXM0IsR0FDM0JwSixFQUFNLEdBQ04sSUFBSWhELEVBQUkvTyxLQUFLVyxRQUViLElBREFvTyxFQUFFc00sU0FBVyxHQUNMdE0sRUFBRXVPLFVBQVUsQ0FDbEIsSUFBSWxILEVBQUlySCxFQUFFd08sS0FBS0YsR0FBVzNjLFNBQVN5YSxHQU1qQ3BKLEdBTEZoRCxFQUFJQSxFQUFFeU8sTUFBTUgsSUFFTEMsU0FHQ2xILEVBQUlyRSxFQUZKNkssRUFBTVEsRUFBWWhILEVBQUV0WSxRQUFVc1ksRUFBSXJFLEVBUTVDLElBSEkvUixLQUFLc2QsV0FDUHZMLEVBQU0sSUFBTUEsR0FFUEEsRUFBSWpVLE9BQVM2SyxHQUFZLEdBQzlCb0osRUFBTSxJQUFNQSxFQUtkLE9BSHNCLElBQWxCL1IsS0FBS3FiLFdBQ1B0SixFQUFNLElBQU1BLEdBRVBBLEVBR1RpRSxHQUFPLEVBQU8sb0NBR2hCTSxFQUFHeFosVUFBVTJnQixTQUFXLFdBQ3RCLElBQUkzTCxFQUFNOVIsS0FBS2EsTUFBTSxHQVNyQixPQVJvQixJQUFoQmIsS0FBS2xDLE9BQ1BnVSxHQUF1QixTQUFoQjlSLEtBQUthLE1BQU0sR0FDTyxJQUFoQmIsS0FBS2xDLFFBQWtDLElBQWxCa0MsS0FBS2EsTUFBTSxHQUV6Q2lSLEdBQU8saUJBQW9DLFNBQWhCOVIsS0FBS2EsTUFBTSxHQUM3QmIsS0FBS2xDLE9BQVMsR0FDdkJrWSxHQUFPLEVBQU8sOENBRVUsSUFBbEJoVyxLQUFLcWIsVUFBbUJ2SixFQUFNQSxHQUd4Q3dFLEVBQUd4WixVQUFVNlUsT0FBUyxXQUNwQixPQUFPM1IsS0FBS1UsU0FBUyxLQUd2QjRWLEVBQUd4WixVQUFVNGdCLFNBQVcsU0FBbUJ4RSxFQUFRcGIsR0FFakQsT0FEQWtZLE9BQXlCLElBQVgxWSxHQUNQMEMsS0FBSzJkLFlBQVlyZ0IsRUFBUTRiLEVBQVFwYixJQUcxQ3dZLEVBQUd4WixVQUFVMlosUUFBVSxTQUFrQnlDLEVBQVFwYixHQUMvQyxPQUFPa0MsS0FBSzJkLFlBQVkvTCxNQUFPc0gsRUFBUXBiLElBR3pDd1ksRUFBR3haLFVBQVU2Z0IsWUFBYyxTQUFzQkMsRUFBVzFFLEVBQVFwYixHQUNsRSxJQUFJaU4sRUFBYS9LLEtBQUsrSyxhQUNsQjhTLEVBQVkvZixHQUFVYSxLQUFLNEYsSUFBSSxFQUFHd0csR0FDdENpTCxFQUFPakwsR0FBYzhTLEVBQVcseUNBQ2hDN0gsRUFBTzZILEVBQVksRUFBRywrQkFFdEI3ZCxLQUFLa2MsUUFDTCxJQUdJcFAsRUFBR3JMLEVBSEg2USxFQUEwQixPQUFYNEcsRUFDZjlKLEVBQU0sSUFBSXdPLEVBQVVDLEdBR3BCQyxFQUFJOWQsS0FBS1csUUFDYixHQUFLMlIsRUFZRSxDQUNMLElBQUs3USxFQUFJLEdBQUlxYyxFQUFFUixTQUFVN2IsSUFDdkJxTCxFQUFJZ1IsRUFBRXhHLE1BQU0sS0FDWndHLEVBQUVyRyxPQUFPLEdBRVRySSxFQUFJM04sR0FBS3FMLEVBR1gsS0FBT3JMLEVBQUlvYyxFQUFXcGMsSUFDcEIyTixFQUFJM04sR0FBSyxNQXJCTSxDQUVqQixJQUFLQSxFQUFJLEVBQUdBLEVBQUlvYyxFQUFZOVMsRUFBWXRKLElBQ3RDMk4sRUFBSTNOLEdBQUssRUFHWCxJQUFLQSxFQUFJLEdBQUlxYyxFQUFFUixTQUFVN2IsSUFDdkJxTCxFQUFJZ1IsRUFBRXhHLE1BQU0sS0FDWndHLEVBQUVyRyxPQUFPLEdBRVRySSxFQUFJeU8sRUFBWXBjLEVBQUksR0FBS3FMLEVBZTdCLE9BQU9zQyxHQUdMelEsS0FBS29mLE1BQ1B6SCxFQUFHeFosVUFBVWtoQixXQUFhLFNBQXFCbEgsR0FDN0MsT0FBTyxHQUFLblksS0FBS29mLE1BQU1qSCxJQUd6QlIsRUFBR3haLFVBQVVraEIsV0FBYSxTQUFxQmxILEdBQzdDLElBQUltSCxFQUFJbkgsRUFDSlYsRUFBSSxFQWlCUixPQWhCSTZILEdBQUssT0FDUDdILEdBQUssR0FDTDZILEtBQU8sSUFFTEEsR0FBSyxLQUNQN0gsR0FBSyxFQUNMNkgsS0FBTyxHQUVMQSxHQUFLLElBQ1A3SCxHQUFLLEVBQ0w2SCxLQUFPLEdBRUxBLEdBQUssSUFDUDdILEdBQUssRUFDTDZILEtBQU8sR0FFRjdILEVBQUk2SCxHQUlmM0gsRUFBR3haLFVBQVVvaEIsVUFBWSxTQUFvQnBILEdBRTNDLEdBQVUsSUFBTkEsRUFBUyxPQUFPLEdBRXBCLElBQUltSCxFQUFJbkgsRUFDSlYsRUFBSSxFQW9CUixPQW5CcUIsSUFBWixLQUFKNkgsS0FDSDdILEdBQUssR0FDTDZILEtBQU8sSUFFVSxJQUFWLElBQUpBLEtBQ0g3SCxHQUFLLEVBQ0w2SCxLQUFPLEdBRVMsSUFBVCxHQUFKQSxLQUNIN0gsR0FBSyxFQUNMNkgsS0FBTyxHQUVTLElBQVQsRUFBSkEsS0FDSDdILEdBQUssRUFDTDZILEtBQU8sR0FFUyxJQUFULEVBQUpBLElBQ0g3SCxJQUVLQSxHQUlURSxFQUFHeFosVUFBVW1hLFVBQVksV0FDdkIsSUFBSUgsRUFBSTlXLEtBQUthLE1BQU1iLEtBQUtsQyxPQUFTLEdBQzdCa1IsRUFBS2hQLEtBQUtnZSxXQUFXbEgsR0FDekIsT0FBMkIsSUFBbkI5VyxLQUFLbEMsT0FBUyxHQUFVa1IsR0FpQmxDc0gsRUFBR3haLFVBQVVxaEIsU0FBVyxXQUN0QixHQUFJbmUsS0FBS3NkLFNBQVUsT0FBTyxFQUcxQixJQURBLElBQUlsSCxFQUFJLEVBQ0MzVSxFQUFJLEVBQUdBLEVBQUl6QixLQUFLbEMsT0FBUTJELElBQUssQ0FDcEMsSUFBSXFMLEVBQUk5TSxLQUFLa2UsVUFBVWxlLEtBQUthLE1BQU1ZLElBRWxDLEdBREEyVSxHQUFLdEosRUFDSyxLQUFOQSxFQUFVLE1BRWhCLE9BQU9zSixHQUdURSxFQUFHeFosVUFBVWlPLFdBQWEsV0FDeEIsT0FBT3BNLEtBQUtnRCxLQUFLM0IsS0FBS2lYLFlBQWMsSUFHdENYLEVBQUd4WixVQUFVc2hCLE9BQVMsU0FBaUJDLEdBQ3JDLE9BQXNCLElBQWxCcmUsS0FBS3FiLFNBQ0FyYixLQUFLc2UsTUFBTUMsTUFBTUYsR0FBT0csTUFBTSxHQUVoQ3hlLEtBQUtXLFNBR2QyVixFQUFHeFosVUFBVTJoQixTQUFXLFNBQW1CSixHQUN6QyxPQUFJcmUsS0FBSzBlLE1BQU1MLEVBQVEsR0FDZHJlLEtBQUsyZSxLQUFLTixHQUFPRyxNQUFNLEdBQUdJLE9BRTVCNWUsS0FBS1csU0FHZDJWLEVBQUd4WixVQUFVK2hCLE1BQVEsV0FDbkIsT0FBeUIsSUFBbEI3ZSxLQUFLcWIsVUFJZC9FLEVBQUd4WixVQUFVZ2lCLElBQU0sV0FDakIsT0FBTzllLEtBQUtXLFFBQVFpZSxRQUd0QnRJLEVBQUd4WixVQUFVOGhCLEtBQU8sV0FLbEIsT0FKSzVlLEtBQUtzZCxXQUNSdGQsS0FBS3FiLFVBQVksR0FHWnJiLE1BSVRzVyxFQUFHeFosVUFBVWlpQixLQUFPLFNBQWVsSSxHQUNqQyxLQUFPN1csS0FBS2xDLE9BQVMrWSxFQUFJL1ksUUFDdkJrQyxLQUFLYSxNQUFNYixLQUFLbEMsVUFBWSxFQUc5QixJQUFLLElBQUkyRCxFQUFJLEVBQUdBLEVBQUlvVixFQUFJL1ksT0FBUTJELElBQzlCekIsS0FBS2EsTUFBTVksR0FBS3pCLEtBQUthLE1BQU1ZLEdBQUtvVixFQUFJaFcsTUFBTVksR0FHNUMsT0FBT3pCLEtBQUtrYyxTQUdkNUYsRUFBR3haLFVBQVVraUIsSUFBTSxTQUFjbkksR0FFL0IsT0FEQWIsRUFBMEMsSUFBbENoVyxLQUFLcWIsU0FBV3hFLEVBQUl3RSxXQUNyQnJiLEtBQUsrZSxLQUFLbEksSUFJbkJQLEVBQUd4WixVQUFVbWlCLEdBQUssU0FBYXBJLEdBQzdCLE9BQUk3VyxLQUFLbEMsT0FBUytZLEVBQUkvWSxPQUFla0MsS0FBS1csUUFBUXFlLElBQUluSSxHQUMvQ0EsRUFBSWxXLFFBQVFxZSxJQUFJaGYsT0FHekJzVyxFQUFHeFosVUFBVW9pQixJQUFNLFNBQWNySSxHQUMvQixPQUFJN1csS0FBS2xDLE9BQVMrWSxFQUFJL1ksT0FBZWtDLEtBQUtXLFFBQVFvZSxLQUFLbEksR0FDaERBLEVBQUlsVyxRQUFRb2UsS0FBSy9lLE9BSTFCc1csRUFBR3haLFVBQVVxaUIsTUFBUSxTQUFnQnRJLEdBRW5DLElBQUkvSixFQUVGQSxFQURFOU0sS0FBS2xDLE9BQVMrWSxFQUFJL1ksT0FDaEIrWSxFQUVBN1csS0FHTixJQUFLLElBQUl5QixFQUFJLEVBQUdBLEVBQUlxTCxFQUFFaFAsT0FBUTJELElBQzVCekIsS0FBS2EsTUFBTVksR0FBS3pCLEtBQUthLE1BQU1ZLEdBQUtvVixFQUFJaFcsTUFBTVksR0FLNUMsT0FGQXpCLEtBQUtsQyxPQUFTZ1AsRUFBRWhQLE9BRVRrQyxLQUFLa2MsU0FHZDVGLEVBQUd4WixVQUFVc2lCLEtBQU8sU0FBZXZJLEdBRWpDLE9BREFiLEVBQTBDLElBQWxDaFcsS0FBS3FiLFNBQVd4RSxFQUFJd0UsV0FDckJyYixLQUFLbWYsTUFBTXRJLElBSXBCUCxFQUFHeFosVUFBVXVpQixJQUFNLFNBQWN4SSxHQUMvQixPQUFJN1csS0FBS2xDLE9BQVMrWSxFQUFJL1ksT0FBZWtDLEtBQUtXLFFBQVF5ZSxLQUFLdkksR0FDaERBLEVBQUlsVyxRQUFReWUsS0FBS3BmLE9BRzFCc1csRUFBR3haLFVBQVV3aUIsS0FBTyxTQUFlekksR0FDakMsT0FBSTdXLEtBQUtsQyxPQUFTK1ksRUFBSS9ZLE9BQWVrQyxLQUFLVyxRQUFRd2UsTUFBTXRJLEdBQ2pEQSxFQUFJbFcsUUFBUXdlLE1BQU1uZixPQUkzQnNXLEVBQUd4WixVQUFVeWlCLE1BQVEsU0FBZ0IxSSxHQUVuQyxJQUFJcEcsRUFDQTNELEVBQ0E5TSxLQUFLbEMsT0FBUytZLEVBQUkvWSxRQUNwQjJTLEVBQUl6USxLQUNKOE0sRUFBSStKLElBRUpwRyxFQUFJb0csRUFDSi9KLEVBQUk5TSxNQUdOLElBQUssSUFBSXlCLEVBQUksRUFBR0EsRUFBSXFMLEVBQUVoUCxPQUFRMkQsSUFDNUJ6QixLQUFLYSxNQUFNWSxHQUFLZ1AsRUFBRTVQLE1BQU1ZLEdBQUtxTCxFQUFFak0sTUFBTVksR0FHdkMsR0FBSXpCLE9BQVN5USxFQUNYLEtBQU9oUCxFQUFJZ1AsRUFBRTNTLE9BQVEyRCxJQUNuQnpCLEtBQUthLE1BQU1ZLEdBQUtnUCxFQUFFNVAsTUFBTVksR0FNNUIsT0FGQXpCLEtBQUtsQyxPQUFTMlMsRUFBRTNTLE9BRVRrQyxLQUFLa2MsU0FHZDVGLEVBQUd4WixVQUFVMGlCLEtBQU8sU0FBZTNJLEdBRWpDLE9BREFiLEVBQTBDLElBQWxDaFcsS0FBS3FiLFNBQVd4RSxFQUFJd0UsV0FDckJyYixLQUFLdWYsTUFBTTFJLElBSXBCUCxFQUFHeFosVUFBVTJpQixJQUFNLFNBQWM1SSxHQUMvQixPQUFJN1csS0FBS2xDLE9BQVMrWSxFQUFJL1ksT0FBZWtDLEtBQUtXLFFBQVE2ZSxLQUFLM0ksR0FDaERBLEVBQUlsVyxRQUFRNmUsS0FBS3hmLE9BRzFCc1csRUFBR3haLFVBQVU0aUIsS0FBTyxTQUFlN0ksR0FDakMsT0FBSTdXLEtBQUtsQyxPQUFTK1ksRUFBSS9ZLE9BQWVrQyxLQUFLVyxRQUFRNGUsTUFBTTFJLEdBQ2pEQSxFQUFJbFcsUUFBUTRlLE1BQU12ZixPQUkzQnNXLEVBQUd4WixVQUFVeWhCLE1BQVEsU0FBZ0JGLEdBQ25DckksRUFBd0IsaUJBQVZxSSxHQUFzQkEsR0FBUyxHQUU3QyxJQUFJc0IsRUFBc0MsRUFBeEJoaEIsS0FBS2dELEtBQUswYyxFQUFRLElBQ2hDdUIsRUFBV3ZCLEVBQVEsR0FHdkJyZSxLQUFLMGMsUUFBUWlELEdBRVRDLEVBQVcsR0FDYkQsSUFJRixJQUFLLElBQUlsZSxFQUFJLEVBQUdBLEVBQUlrZSxFQUFhbGUsSUFDL0J6QixLQUFLYSxNQUFNWSxHQUFzQixVQUFoQnpCLEtBQUthLE1BQU1ZLEdBUzlCLE9BTEltZSxFQUFXLElBQ2I1ZixLQUFLYSxNQUFNWSxJQUFNekIsS0FBS2EsTUFBTVksR0FBTSxVQUFjLEdBQUttZSxHQUloRDVmLEtBQUtrYyxTQUdkNUYsRUFBR3haLFVBQVU2aEIsS0FBTyxTQUFlTixHQUNqQyxPQUFPcmUsS0FBS1csUUFBUTRkLE1BQU1GLElBSTVCL0gsRUFBR3haLFVBQVUraUIsS0FBTyxTQUFlQyxFQUFLblUsR0FDdENxSyxFQUFzQixpQkFBUjhKLEdBQW9CQSxHQUFPLEdBRXpDLElBQUkzRCxFQUFPMkQsRUFBTSxHQUFNLEVBQ25CQyxFQUFPRCxFQUFNLEdBVWpCLE9BUkE5ZixLQUFLMGMsUUFBUVAsRUFBTSxHQUdqQm5jLEtBQUthLE1BQU1zYixHQURUeFEsRUFDZ0IzTCxLQUFLYSxNQUFNc2IsR0FBUSxHQUFLNEQsRUFFeEIvZixLQUFLYSxNQUFNc2IsS0FBUyxHQUFLNEQsR0FHdEMvZixLQUFLa2MsU0FJZDVGLEVBQUd4WixVQUFVa2pCLEtBQU8sU0FBZW5KLEdBQ2pDLElBQUlULEVBa0JBM0YsRUFBRzNELEVBZlAsR0FBc0IsSUFBbEI5TSxLQUFLcWIsVUFBbUMsSUFBakJ4RSxFQUFJd0UsU0FJN0IsT0FIQXJiLEtBQUtxYixTQUFXLEVBQ2hCakYsRUFBSXBXLEtBQUtpZ0IsS0FBS3BKLEdBQ2Q3VyxLQUFLcWIsVUFBWSxFQUNWcmIsS0FBSzJjLFlBR1AsR0FBc0IsSUFBbEIzYyxLQUFLcWIsVUFBbUMsSUFBakJ4RSxFQUFJd0UsU0FJcEMsT0FIQXhFLEVBQUl3RSxTQUFXLEVBQ2ZqRixFQUFJcFcsS0FBS2lnQixLQUFLcEosR0FDZEEsRUFBSXdFLFNBQVcsRUFDUmpGLEVBQUV1RyxZQUtQM2MsS0FBS2xDLE9BQVMrWSxFQUFJL1ksUUFDcEIyUyxFQUFJelEsS0FDSjhNLEVBQUkrSixJQUVKcEcsRUFBSW9HLEVBQ0ovSixFQUFJOU0sTUFJTixJQURBLElBQUl3YSxFQUFRLEVBQ0gvWSxFQUFJLEVBQUdBLEVBQUlxTCxFQUFFaFAsT0FBUTJELElBQzVCMlUsR0FBa0IsRUFBYjNGLEVBQUU1UCxNQUFNWSxLQUF3QixFQUFicUwsRUFBRWpNLE1BQU1ZLElBQVUrWSxFQUMxQ3hhLEtBQUthLE1BQU1ZLEdBQVMsU0FBSjJVLEVBQ2hCb0UsRUFBUXBFLElBQU0sR0FFaEIsS0FBaUIsSUFBVm9FLEdBQWUvWSxFQUFJZ1AsRUFBRTNTLE9BQVEyRCxJQUNsQzJVLEdBQWtCLEVBQWIzRixFQUFFNVAsTUFBTVksSUFBVStZLEVBQ3ZCeGEsS0FBS2EsTUFBTVksR0FBUyxTQUFKMlUsRUFDaEJvRSxFQUFRcEUsSUFBTSxHQUloQixHQURBcFcsS0FBS2xDLE9BQVMyUyxFQUFFM1MsT0FDRixJQUFWMGMsRUFDRnhhLEtBQUthLE1BQU1iLEtBQUtsQyxRQUFVMGMsRUFDMUJ4YSxLQUFLbEMsY0FFQSxHQUFJMlMsSUFBTXpRLEtBQ2YsS0FBT3lCLEVBQUlnUCxFQUFFM1MsT0FBUTJELElBQ25CekIsS0FBS2EsTUFBTVksR0FBS2dQLEVBQUU1UCxNQUFNWSxHQUk1QixPQUFPekIsTUFJVHNXLEVBQUd4WixVQUFVb2pCLElBQU0sU0FBY3JKLEdBQy9CLElBQUl6SCxFQUNKLE9BQXFCLElBQWpCeUgsRUFBSXdFLFVBQW9DLElBQWxCcmIsS0FBS3FiLFVBQzdCeEUsRUFBSXdFLFNBQVcsRUFDZmpNLEVBQU1wUCxLQUFLMFUsSUFBSW1DLEdBQ2ZBLEVBQUl3RSxVQUFZLEVBQ1RqTSxHQUNtQixJQUFqQnlILEVBQUl3RSxVQUFvQyxJQUFsQnJiLEtBQUtxYixVQUNwQ3JiLEtBQUtxYixTQUFXLEVBQ2hCak0sRUFBTXlILEVBQUluQyxJQUFJMVUsTUFDZEEsS0FBS3FiLFNBQVcsRUFDVGpNLEdBR0xwUCxLQUFLbEMsT0FBUytZLEVBQUkvWSxPQUFla0MsS0FBS1csUUFBUXFmLEtBQUtuSixHQUVoREEsRUFBSWxXLFFBQVFxZixLQUFLaGdCLE9BSTFCc1csRUFBR3haLFVBQVVtakIsS0FBTyxTQUFlcEosR0FFakMsR0FBcUIsSUFBakJBLEVBQUl3RSxTQUFnQixDQUN0QnhFLEVBQUl3RSxTQUFXLEVBQ2YsSUFBSWpGLEVBQUlwVyxLQUFLZ2dCLEtBQUtuSixHQUVsQixPQURBQSxFQUFJd0UsU0FBVyxFQUNSakYsRUFBRXVHLFlBR0osR0FBc0IsSUFBbEIzYyxLQUFLcWIsU0FJZCxPQUhBcmIsS0FBS3FiLFNBQVcsRUFDaEJyYixLQUFLZ2dCLEtBQUtuSixHQUNWN1csS0FBS3FiLFNBQVcsRUFDVHJiLEtBQUsyYyxZQUlkLElBV0lsTSxFQUFHM0QsRUFYSCtPLEVBQU03YixLQUFLNmIsSUFBSWhGLEdBR25CLEdBQVksSUFBUmdGLEVBSUYsT0FIQTdiLEtBQUtxYixTQUFXLEVBQ2hCcmIsS0FBS2xDLE9BQVMsRUFDZGtDLEtBQUthLE1BQU0sR0FBSyxFQUNUYixLQUtMNmIsRUFBTSxHQUNScEwsRUFBSXpRLEtBQ0o4TSxFQUFJK0osSUFFSnBHLEVBQUlvRyxFQUNKL0osRUFBSTlNLE1BSU4sSUFEQSxJQUFJd2EsRUFBUSxFQUNIL1ksRUFBSSxFQUFHQSxFQUFJcUwsRUFBRWhQLE9BQVEyRCxJQUU1QitZLEdBREFwRSxHQUFrQixFQUFiM0YsRUFBRTVQLE1BQU1ZLEtBQXdCLEVBQWJxTCxFQUFFak0sTUFBTVksSUFBVStZLElBQzdCLEdBQ2J4YSxLQUFLYSxNQUFNWSxHQUFTLFNBQUoyVSxFQUVsQixLQUFpQixJQUFWb0UsR0FBZS9ZLEVBQUlnUCxFQUFFM1MsT0FBUTJELElBRWxDK1ksR0FEQXBFLEdBQWtCLEVBQWIzRixFQUFFNVAsTUFBTVksSUFBVStZLElBQ1YsR0FDYnhhLEtBQUthLE1BQU1ZLEdBQVMsU0FBSjJVLEVBSWxCLEdBQWMsSUFBVm9FLEdBQWUvWSxFQUFJZ1AsRUFBRTNTLFFBQVUyUyxJQUFNelEsS0FDdkMsS0FBT3lCLEVBQUlnUCxFQUFFM1MsT0FBUTJELElBQ25CekIsS0FBS2EsTUFBTVksR0FBS2dQLEVBQUU1UCxNQUFNWSxHQVU1QixPQU5BekIsS0FBS2xDLE9BQVNhLEtBQUs0RixJQUFJdkUsS0FBS2xDLE9BQVEyRCxHQUVoQ2dQLElBQU16USxPQUNSQSxLQUFLcWIsU0FBVyxHQUdYcmIsS0FBS2tjLFNBSWQ1RixFQUFHeFosVUFBVTRYLElBQU0sU0FBY21DLEdBQy9CLE9BQU83VyxLQUFLVyxRQUFRc2YsS0FBS3BKLElBK0MzQixJQUFJc0osRUFBYyxTQUFzQm5ELEVBQU1uRyxFQUFLOUUsR0FDakQsSUFJSTlDLEVBQ0FtUixFQUNBcFIsRUFOQXlCLEVBQUl1TSxFQUFLbmMsTUFDVGlNLEVBQUkrSixFQUFJaFcsTUFDUndmLEVBQUl0TyxFQUFJbFIsTUFDUmtPLEVBQUksRUFJSnVSLEVBQVksRUFBUDdQLEVBQUUsR0FDUDhQLEVBQVcsS0FBTEQsRUFDTkUsRUFBTUYsSUFBTyxHQUNiRyxFQUFZLEVBQVBoUSxFQUFFLEdBQ1BpUSxFQUFXLEtBQUxELEVBQ05FLEVBQU1GLElBQU8sR0FDYkcsRUFBWSxFQUFQblEsRUFBRSxHQUNQb1EsRUFBVyxLQUFMRCxFQUNORSxFQUFNRixJQUFPLEdBQ2JHLEVBQVksRUFBUHRRLEVBQUUsR0FDUHVRLEVBQVcsS0FBTEQsRUFDTkUsRUFBTUYsSUFBTyxHQUNiRyxFQUFZLEVBQVB6USxFQUFFLEdBQ1AwUSxFQUFXLEtBQUxELEVBQ05FLEVBQU1GLElBQU8sR0FDYkcsRUFBWSxFQUFQNVEsRUFBRSxHQUNQNlEsRUFBVyxLQUFMRCxFQUNORSxFQUFNRixJQUFPLEdBQ2JHLEVBQVksRUFBUC9RLEVBQUUsR0FDUGdSLEVBQVcsS0FBTEQsRUFDTkUsRUFBTUYsSUFBTyxHQUNiRyxFQUFZLEVBQVBsUixFQUFFLEdBQ1BtUixFQUFXLEtBQUxELEVBQ05FLEVBQU1GLElBQU8sR0FDYkcsRUFBWSxFQUFQclIsRUFBRSxHQUNQc1IsRUFBVyxLQUFMRCxFQUNORSxFQUFNRixJQUFPLEdBQ2JHLEVBQVksRUFBUHhSLEVBQUUsR0FDUHlSLEVBQVcsS0FBTEQsRUFDTkUsRUFBTUYsSUFBTyxHQUNiRyxFQUFZLEVBQVB0VixFQUFFLEdBQ1B1VixFQUFXLEtBQUxELEVBQ05FLEVBQU1GLElBQU8sR0FDYkcsRUFBWSxFQUFQelYsRUFBRSxHQUNQMFYsRUFBVyxLQUFMRCxFQUNORSxFQUFNRixJQUFPLEdBQ2JHLEVBQVksRUFBUDVWLEVBQUUsR0FDUDZWLEVBQVcsS0FBTEQsRUFDTkUsRUFBTUYsSUFBTyxHQUNiRyxFQUFZLEVBQVAvVixFQUFFLEdBQ1BnVyxFQUFXLEtBQUxELEVBQ05FLEVBQU1GLElBQU8sR0FDYkcsRUFBWSxFQUFQbFcsRUFBRSxHQUNQbVcsRUFBVyxLQUFMRCxFQUNORSxHQUFNRixJQUFPLEdBQ2JHLEdBQVksRUFBUHJXLEVBQUUsR0FDUHNXLEdBQVcsS0FBTEQsR0FDTkUsR0FBTUYsS0FBTyxHQUNiRyxHQUFZLEVBQVB4VyxFQUFFLEdBQ1B5VyxHQUFXLEtBQUxELEdBQ05FLEdBQU1GLEtBQU8sR0FDYkcsR0FBWSxFQUFQM1csRUFBRSxHQUNQNFcsR0FBVyxLQUFMRCxHQUNORSxHQUFNRixLQUFPLEdBQ2JHLEdBQVksRUFBUDlXLEVBQUUsR0FDUCtXLEdBQVcsS0FBTEQsR0FDTkUsR0FBTUYsS0FBTyxHQUNiRyxHQUFZLEVBQVBqWCxFQUFFLEdBQ1BrWCxHQUFXLEtBQUxELEdBQ05FLEdBQU1GLEtBQU8sR0FFakJoUyxFQUFJc0osU0FBVzJCLEVBQUszQixTQUFXeEUsRUFBSXdFLFNBQ25DdEosRUFBSWpVLE9BQVMsR0FNYixJQUFJb21CLElBQVFuVixHQUpaRSxFQUFLdFEsS0FBS3dsQixLQUFLNUQsRUFBSzhCLElBSUUsS0FBYSxNQUZuQ2pDLEdBREFBLEVBQU16aEIsS0FBS3dsQixLQUFLNUQsRUFBSytCLElBQ1IzakIsS0FBS3dsQixLQUFLM0QsRUFBSzZCLEdBQVEsS0FFVSxJQUFPLEVBQ3JEdFQsSUFGQUMsRUFBS3JRLEtBQUt3bEIsS0FBSzNELEVBQUs4QixLQUVQbEMsSUFBUSxJQUFPLElBQU04RCxLQUFPLElBQU8sRUFDaERBLElBQU0sU0FFTmpWLEVBQUt0USxLQUFLd2xCLEtBQUt6RCxFQUFLMkIsR0FFcEJqQyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUs0QixJQUNSM2pCLEtBQUt3bEIsS0FBS3hELEVBQUswQixHQUFRLEVBQ3BDclQsRUFBS3JRLEtBQUt3bEIsS0FBS3hELEVBQUsyQixHQUtwQixJQUFJOEIsSUFBUXJWLEdBSlpFLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs1RCxFQUFLaUMsR0FBUSxHQUlaLEtBQWEsTUFGbkNwQyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBSzVELEVBQUtrQyxHQUFRLEdBQ3ZCOWpCLEtBQUt3bEIsS0FBSzNELEVBQUtnQyxHQUFRLEtBRVUsSUFBTyxFQUNyRHpULElBRkFDLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUszRCxFQUFLaUMsR0FBUSxJQUVyQnJDLElBQVEsSUFBTyxJQUFNZ0UsS0FBTyxJQUFPLEVBQ2hEQSxJQUFNLFNBRU5uVixFQUFLdFEsS0FBS3dsQixLQUFLdEQsRUFBS3dCLEdBRXBCakMsR0FEQUEsRUFBTXpoQixLQUFLd2xCLEtBQUt0RCxFQUFLeUIsSUFDUjNqQixLQUFLd2xCLEtBQUtyRCxFQUFLdUIsR0FBUSxFQUNwQ3JULEVBQUtyUSxLQUFLd2xCLEtBQUtyRCxFQUFLd0IsR0FDcEJyVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLekQsRUFBSzhCLEdBQVEsRUFFbENwQyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUsrQixHQUFRLEdBQ3ZCOWpCLEtBQUt3bEIsS0FBS3hELEVBQUs2QixHQUFRLEVBQ3BDeFQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3hELEVBQUs4QixHQUFRLEVBS2xDLElBQUk0QixJQUFRdFYsR0FKWkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzVELEVBQUtvQyxHQUFRLEdBSVosS0FBYSxNQUZuQ3ZDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLNUQsRUFBS3FDLEdBQVEsR0FDdkJqa0IsS0FBS3dsQixLQUFLM0QsRUFBS21DLEdBQVEsS0FFVSxJQUFPLEVBQ3JENVQsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSzNELEVBQUtvQyxHQUFRLElBRXJCeEMsSUFBUSxJQUFPLElBQU1pRSxLQUFPLElBQU8sRUFDaERBLElBQU0sU0FFTnBWLEVBQUt0USxLQUFLd2xCLEtBQUtuRCxFQUFLcUIsR0FFcEJqQyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS25ELEVBQUtzQixJQUNSM2pCLEtBQUt3bEIsS0FBS2xELEVBQUtvQixHQUFRLEVBQ3BDclQsRUFBS3JRLEtBQUt3bEIsS0FBS2xELEVBQUtxQixHQUNwQnJULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt0RCxFQUFLMkIsR0FBUSxFQUVsQ3BDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdEQsRUFBSzRCLEdBQVEsR0FDdkI5akIsS0FBS3dsQixLQUFLckQsRUFBSzBCLEdBQVEsRUFDcEN4VCxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLckQsRUFBSzJCLEdBQVEsRUFDbEN4VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLekQsRUFBS2lDLEdBQVEsRUFFbEN2QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUtrQyxHQUFRLEdBQ3ZCamtCLEtBQUt3bEIsS0FBS3hELEVBQUtnQyxHQUFRLEVBQ3BDM1QsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3hELEVBQUtpQyxHQUFRLEVBS2xDLElBQUkwQixJQUFRdlYsR0FKWkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzVELEVBQUt1QyxHQUFRLEdBSVosS0FBYSxNQUZuQzFDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLNUQsRUFBS3dDLEdBQVEsR0FDdkJwa0IsS0FBS3dsQixLQUFLM0QsRUFBS3NDLEdBQVEsS0FFVSxJQUFPLEVBQ3JEL1QsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSzNELEVBQUt1QyxHQUFRLElBRXJCM0MsSUFBUSxJQUFPLElBQU1rRSxLQUFPLElBQU8sRUFDaERBLElBQU0sU0FFTnJWLEVBQUt0USxLQUFLd2xCLEtBQUtoRCxFQUFLa0IsR0FFcEJqQyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUttQixJQUNSM2pCLEtBQUt3bEIsS0FBSy9DLEVBQUtpQixHQUFRLEVBQ3BDclQsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUtrQixHQUNwQnJULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtuRCxFQUFLd0IsR0FBUSxFQUVsQ3BDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLbkQsRUFBS3lCLEdBQVEsR0FDdkI5akIsS0FBS3dsQixLQUFLbEQsRUFBS3VCLEdBQVEsRUFDcEN4VCxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLbEQsRUFBS3dCLEdBQVEsRUFDbEN4VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdEQsRUFBSzhCLEdBQVEsRUFFbEN2QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3RELEVBQUsrQixHQUFRLEdBQ3ZCamtCLEtBQUt3bEIsS0FBS3JELEVBQUs2QixHQUFRLEVBQ3BDM1QsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3JELEVBQUs4QixHQUFRLEVBQ2xDM1QsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3pELEVBQUtvQyxHQUFRLEVBRWxDMUMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUt6RCxFQUFLcUMsR0FBUSxHQUN2QnBrQixLQUFLd2xCLEtBQUt4RCxFQUFLbUMsR0FBUSxFQUNwQzlULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt4RCxFQUFLb0MsR0FBUSxFQUtsQyxJQUFJd0IsSUFBUXhWLEdBSlpFLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs1RCxFQUFLMEMsR0FBUSxHQUlaLEtBQWEsTUFGbkM3QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBSzVELEVBQUsyQyxJQUFRLEdBQ3ZCdmtCLEtBQUt3bEIsS0FBSzNELEVBQUt5QyxHQUFRLEtBRVUsSUFBTyxFQUNyRGxVLElBRkFDLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUszRCxFQUFLMEMsSUFBUSxJQUVyQjlDLElBQVEsSUFBTyxJQUFNbUUsS0FBTyxJQUFPLEVBQ2hEQSxJQUFNLFNBRU50VixFQUFLdFEsS0FBS3dsQixLQUFLN0MsRUFBS2UsR0FFcEJqQyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBSzdDLEVBQUtnQixJQUNSM2pCLEtBQUt3bEIsS0FBSzVDLEVBQUtjLEdBQVEsRUFDcENyVCxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBS2UsR0FDcEJyVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBS3FCLEdBQVEsRUFFbENwQyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUtzQixHQUFRLEdBQ3ZCOWpCLEtBQUt3bEIsS0FBSy9DLEVBQUtvQixHQUFRLEVBQ3BDeFQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUtxQixHQUFRLEVBQ2xDeFQsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS25ELEVBQUsyQixHQUFRLEVBRWxDdkMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtuRCxFQUFLNEIsR0FBUSxHQUN2QmprQixLQUFLd2xCLEtBQUtsRCxFQUFLMEIsR0FBUSxFQUNwQzNULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtsRCxFQUFLMkIsR0FBUSxFQUNsQzNULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt0RCxFQUFLaUMsR0FBUSxFQUVsQzFDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdEQsRUFBS2tDLEdBQVEsR0FDdkJwa0IsS0FBS3dsQixLQUFLckQsRUFBS2dDLEdBQVEsRUFDcEM5VCxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLckQsRUFBS2lDLEdBQVEsRUFDbEM5VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLekQsRUFBS3VDLEdBQVEsRUFFbEM3QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUt3QyxJQUFRLEdBQ3ZCdmtCLEtBQUt3bEIsS0FBS3hELEVBQUtzQyxHQUFRLEVBQ3BDalUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3hELEVBQUt1QyxJQUFRLEVBS2xDLElBQUlzQixJQUFRelYsR0FKWkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzVELEVBQUs2QyxJQUFRLEdBSVosS0FBYSxNQUZuQ2hELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLNUQsRUFBSzhDLElBQVEsR0FDdkIxa0IsS0FBS3dsQixLQUFLM0QsRUFBSzRDLElBQVEsS0FFVSxJQUFPLEVBQ3JEclUsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSzNELEVBQUs2QyxJQUFRLElBRXJCakQsSUFBUSxJQUFPLElBQU1vRSxLQUFPLElBQU8sRUFDaERBLElBQU0sU0FFTnZWLEVBQUt0USxLQUFLd2xCLEtBQUsxQyxFQUFLWSxHQUVwQmpDLEdBREFBLEVBQU16aEIsS0FBS3dsQixLQUFLMUMsRUFBS2EsSUFDUjNqQixLQUFLd2xCLEtBQUt6QyxFQUFLVyxHQUFRLEVBQ3BDclQsRUFBS3JRLEtBQUt3bEIsS0FBS3pDLEVBQUtZLEdBQ3BCclQsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzdDLEVBQUtrQixHQUFRLEVBRWxDcEMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs3QyxFQUFLbUIsR0FBUSxHQUN2QjlqQixLQUFLd2xCLEtBQUs1QyxFQUFLaUIsR0FBUSxFQUNwQ3hULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUs1QyxFQUFLa0IsR0FBUSxFQUNsQ3hULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtoRCxFQUFLd0IsR0FBUSxFQUVsQ3ZDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLaEQsRUFBS3lCLEdBQVEsR0FDdkJqa0IsS0FBS3dsQixLQUFLL0MsRUFBS3VCLEdBQVEsRUFDcEMzVCxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLL0MsRUFBS3dCLEdBQVEsRUFDbEMzVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLbkQsRUFBSzhCLEdBQVEsRUFFbEMxQyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS25ELEVBQUsrQixHQUFRLEdBQ3ZCcGtCLEtBQUt3bEIsS0FBS2xELEVBQUs2QixHQUFRLEVBQ3BDOVQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS2xELEVBQUs4QixHQUFRLEVBQ2xDOVQsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3RELEVBQUtvQyxHQUFRLEVBRWxDN0MsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUt0RCxFQUFLcUMsSUFBUSxHQUN2QnZrQixLQUFLd2xCLEtBQUtyRCxFQUFLbUMsR0FBUSxFQUNwQ2pVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtyRCxFQUFLb0MsSUFBUSxFQUNsQ2pVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt6RCxFQUFLMEMsSUFBUSxFQUVsQ2hELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLekQsRUFBSzJDLElBQVEsR0FDdkIxa0IsS0FBS3dsQixLQUFLeEQsRUFBS3lDLElBQVEsRUFDcENwVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLeEQsRUFBSzBDLElBQVEsRUFLbEMsSUFBSW9CLElBQVExVixHQUpaRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLNUQsRUFBS2dELElBQVEsR0FJWixLQUFhLE1BRm5DbkQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs1RCxFQUFLaUQsSUFBUSxHQUN2QjdrQixLQUFLd2xCLEtBQUszRCxFQUFLK0MsSUFBUSxLQUVVLElBQU8sRUFDckR4VSxJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLM0QsRUFBS2dELElBQVEsSUFFckJwRCxJQUFRLElBQU8sSUFBTXFFLEtBQU8sSUFBTyxFQUNoREEsSUFBTSxTQUVOeFYsRUFBS3RRLEtBQUt3bEIsS0FBS3ZDLEVBQUtTLEdBRXBCakMsR0FEQUEsRUFBTXpoQixLQUFLd2xCLEtBQUt2QyxFQUFLVSxJQUNSM2pCLEtBQUt3bEIsS0FBS3RDLEVBQUtRLEdBQVEsRUFDcENyVCxFQUFLclEsS0FBS3dsQixLQUFLdEMsRUFBS1MsR0FDcEJyVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLMUMsRUFBS2UsR0FBUSxFQUVsQ3BDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLMUMsRUFBS2dCLEdBQVEsR0FDdkI5akIsS0FBS3dsQixLQUFLekMsRUFBS2MsR0FBUSxFQUNwQ3hULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLZSxHQUFRLEVBQ2xDeFQsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzdDLEVBQUtxQixHQUFRLEVBRWxDdkMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs3QyxFQUFLc0IsR0FBUSxHQUN2QmprQixLQUFLd2xCLEtBQUs1QyxFQUFLb0IsR0FBUSxFQUNwQzNULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUs1QyxFQUFLcUIsR0FBUSxFQUNsQzNULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtoRCxFQUFLMkIsR0FBUSxFQUVsQzFDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLaEQsRUFBSzRCLEdBQVEsR0FDdkJwa0IsS0FBS3dsQixLQUFLL0MsRUFBSzBCLEdBQVEsRUFDcEM5VCxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLL0MsRUFBSzJCLEdBQVEsRUFDbEM5VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLbkQsRUFBS2lDLEdBQVEsRUFFbEM3QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS25ELEVBQUtrQyxJQUFRLEdBQ3ZCdmtCLEtBQUt3bEIsS0FBS2xELEVBQUtnQyxHQUFRLEVBQ3BDalUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS2xELEVBQUtpQyxJQUFRLEVBQ2xDalUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3RELEVBQUt1QyxJQUFRLEVBRWxDaEQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUt0RCxFQUFLd0MsSUFBUSxHQUN2QjFrQixLQUFLd2xCLEtBQUtyRCxFQUFLc0MsSUFBUSxFQUNwQ3BVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtyRCxFQUFLdUMsSUFBUSxFQUNsQ3BVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt6RCxFQUFLNkMsSUFBUSxFQUVsQ25ELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLekQsRUFBSzhDLElBQVEsR0FDdkI3a0IsS0FBS3dsQixLQUFLeEQsRUFBSzRDLElBQVEsRUFDcEN2VSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLeEQsRUFBSzZDLElBQVEsRUFLbEMsSUFBSWtCLElBQVEzVixHQUpaRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLNUQsRUFBS21ELElBQVEsR0FJWixLQUFhLE1BRm5DdEQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs1RCxFQUFLb0QsSUFBUSxHQUN2QmhsQixLQUFLd2xCLEtBQUszRCxFQUFLa0QsSUFBUSxLQUVVLElBQU8sRUFDckQzVSxJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLM0QsRUFBS21ELElBQVEsSUFFckJ2RCxJQUFRLElBQU8sSUFBTXNFLEtBQU8sSUFBTyxFQUNoREEsSUFBTSxTQUVOelYsRUFBS3RRLEtBQUt3bEIsS0FBS3BDLEVBQUtNLEdBRXBCakMsR0FEQUEsRUFBTXpoQixLQUFLd2xCLEtBQUtwQyxFQUFLTyxJQUNSM2pCLEtBQUt3bEIsS0FBS25DLEVBQUtLLEdBQVEsRUFDcENyVCxFQUFLclEsS0FBS3dsQixLQUFLbkMsRUFBS00sR0FDcEJyVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS1ksR0FBUSxFQUVsQ3BDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdkMsRUFBS2EsR0FBUSxHQUN2QjlqQixLQUFLd2xCLEtBQUt0QyxFQUFLVyxHQUFRLEVBQ3BDeFQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUtZLEdBQVEsRUFDbEN4VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLMUMsRUFBS2tCLEdBQVEsRUFFbEN2QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBSzFDLEVBQUttQixHQUFRLEdBQ3ZCamtCLEtBQUt3bEIsS0FBS3pDLEVBQUtpQixHQUFRLEVBQ3BDM1QsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3pDLEVBQUtrQixHQUFRLEVBQ2xDM1QsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzdDLEVBQUt3QixHQUFRLEVBRWxDMUMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs3QyxFQUFLeUIsR0FBUSxHQUN2QnBrQixLQUFLd2xCLEtBQUs1QyxFQUFLdUIsR0FBUSxFQUNwQzlULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUs1QyxFQUFLd0IsR0FBUSxFQUNsQzlULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtoRCxFQUFLOEIsR0FBUSxFQUVsQzdDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLaEQsRUFBSytCLElBQVEsR0FDdkJ2a0IsS0FBS3dsQixLQUFLL0MsRUFBSzZCLEdBQVEsRUFDcENqVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLL0MsRUFBSzhCLElBQVEsRUFDbENqVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLbkQsRUFBS29DLElBQVEsRUFFbENoRCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS25ELEVBQUtxQyxJQUFRLEdBQ3ZCMWtCLEtBQUt3bEIsS0FBS2xELEVBQUttQyxJQUFRLEVBQ3BDcFUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS2xELEVBQUtvQyxJQUFRLEVBQ2xDcFUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3RELEVBQUswQyxJQUFRLEVBRWxDbkQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUt0RCxFQUFLMkMsSUFBUSxHQUN2QjdrQixLQUFLd2xCLEtBQUtyRCxFQUFLeUMsSUFBUSxFQUNwQ3ZVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtyRCxFQUFLMEMsSUFBUSxFQUNsQ3ZVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt6RCxFQUFLZ0QsSUFBUSxFQUVsQ3RELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLekQsRUFBS2lELElBQVEsR0FDdkJobEIsS0FBS3dsQixLQUFLeEQsRUFBSytDLElBQVEsRUFDcEMxVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLeEQsRUFBS2dELElBQVEsRUFLbEMsSUFBSWdCLElBQVE1VixHQUpaRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLNUQsRUFBS3NELElBQVEsR0FJWixLQUFhLE1BRm5DekQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs1RCxFQUFLdUQsSUFBUSxHQUN2Qm5sQixLQUFLd2xCLEtBQUszRCxFQUFLcUQsSUFBUSxLQUVVLElBQU8sRUFDckQ5VSxJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLM0QsRUFBS3NELElBQVEsSUFFckIxRCxJQUFRLElBQU8sSUFBTXVFLEtBQU8sSUFBTyxFQUNoREEsSUFBTSxTQUVOMVYsRUFBS3RRLEtBQUt3bEIsS0FBS2pDLEVBQUtHLEdBRXBCakMsR0FEQUEsRUFBTXpoQixLQUFLd2xCLEtBQUtqQyxFQUFLSSxJQUNSM2pCLEtBQUt3bEIsS0FBS2hDLEVBQUtFLEdBQVEsRUFDcENyVCxFQUFLclEsS0FBS3dsQixLQUFLaEMsRUFBS0csR0FDcEJyVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLcEMsRUFBS1MsR0FBUSxFQUVsQ3BDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBS1UsR0FBUSxHQUN2QjlqQixLQUFLd2xCLEtBQUtuQyxFQUFLUSxHQUFRLEVBQ3BDeFQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS25DLEVBQUtTLEdBQVEsRUFDbEN4VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS2UsR0FBUSxFQUVsQ3ZDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdkMsRUFBS2dCLEdBQVEsR0FDdkJqa0IsS0FBS3dsQixLQUFLdEMsRUFBS2MsR0FBUSxFQUNwQzNULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt0QyxFQUFLZSxHQUFRLEVBQ2xDM1QsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUtxQixHQUFRLEVBRWxDMUMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUsxQyxFQUFLc0IsR0FBUSxHQUN2QnBrQixLQUFLd2xCLEtBQUt6QyxFQUFLb0IsR0FBUSxFQUNwQzlULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLcUIsR0FBUSxFQUNsQzlULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs3QyxFQUFLMkIsR0FBUSxFQUVsQzdDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBSzRCLElBQVEsR0FDdkJ2a0IsS0FBS3dsQixLQUFLNUMsRUFBSzBCLEdBQVEsRUFDcENqVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBSzJCLElBQVEsRUFDbENqVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBS2lDLElBQVEsRUFFbENoRCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUtrQyxJQUFRLEdBQ3ZCMWtCLEtBQUt3bEIsS0FBSy9DLEVBQUtnQyxJQUFRLEVBQ3BDcFUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUtpQyxJQUFRLEVBQ2xDcFUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS25ELEVBQUt1QyxJQUFRLEVBRWxDbkQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtuRCxFQUFLd0MsSUFBUSxHQUN2QjdrQixLQUFLd2xCLEtBQUtsRCxFQUFLc0MsSUFBUSxFQUNwQ3ZVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtsRCxFQUFLdUMsSUFBUSxFQUNsQ3ZVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt0RCxFQUFLNkMsSUFBUSxFQUVsQ3RELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdEQsRUFBSzhDLElBQVEsR0FDdkJobEIsS0FBS3dsQixLQUFLckQsRUFBSzRDLElBQVEsRUFDcEMxVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLckQsRUFBSzZDLElBQVEsRUFDbEMxVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLekQsRUFBS21ELElBQVEsRUFFbEN6RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUtvRCxJQUFRLEdBQ3ZCbmxCLEtBQUt3bEIsS0FBS3hELEVBQUtrRCxJQUFRLEVBQ3BDN1UsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3hELEVBQUttRCxJQUFRLEVBS2xDLElBQUljLElBQVE3VixHQUpaRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLNUQsRUFBS3lELElBQVEsR0FJWixLQUFhLE1BRm5DNUQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs1RCxFQUFLMEQsSUFBUSxHQUN2QnRsQixLQUFLd2xCLEtBQUszRCxFQUFLd0QsSUFBUSxLQUVVLElBQU8sRUFDckRqVixJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLM0QsRUFBS3lELElBQVEsSUFFckI3RCxJQUFRLElBQU8sSUFBTXdFLEtBQU8sSUFBTyxFQUNoREEsSUFBTSxTQUVOM1YsRUFBS3RRLEtBQUt3bEIsS0FBS2pDLEVBQUtNLEdBRXBCcEMsR0FEQUEsRUFBTXpoQixLQUFLd2xCLEtBQUtqQyxFQUFLTyxJQUNSOWpCLEtBQUt3bEIsS0FBS2hDLEVBQUtLLEdBQVEsRUFDcEN4VCxFQUFLclEsS0FBS3dsQixLQUFLaEMsRUFBS00sR0FDcEJ4VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLcEMsRUFBS1ksR0FBUSxFQUVsQ3ZDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBS2EsR0FBUSxHQUN2QmprQixLQUFLd2xCLEtBQUtuQyxFQUFLVyxHQUFRLEVBQ3BDM1QsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS25DLEVBQUtZLEdBQVEsRUFDbEMzVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS2tCLEdBQVEsRUFFbEMxQyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3ZDLEVBQUttQixHQUFRLEdBQ3ZCcGtCLEtBQUt3bEIsS0FBS3RDLEVBQUtpQixHQUFRLEVBQ3BDOVQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUtrQixHQUFRLEVBQ2xDOVQsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUt3QixHQUFRLEVBRWxDN0MsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUsxQyxFQUFLeUIsSUFBUSxHQUN2QnZrQixLQUFLd2xCLEtBQUt6QyxFQUFLdUIsR0FBUSxFQUNwQ2pVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLd0IsSUFBUSxFQUNsQ2pVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs3QyxFQUFLOEIsSUFBUSxFQUVsQ2hELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBSytCLElBQVEsR0FDdkIxa0IsS0FBS3dsQixLQUFLNUMsRUFBSzZCLElBQVEsRUFDcENwVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBSzhCLElBQVEsRUFDbENwVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBS29DLElBQVEsRUFFbENuRCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUtxQyxJQUFRLEdBQ3ZCN2tCLEtBQUt3bEIsS0FBSy9DLEVBQUttQyxJQUFRLEVBQ3BDdlUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUtvQyxJQUFRLEVBQ2xDdlUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS25ELEVBQUswQyxJQUFRLEVBRWxDdEQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtuRCxFQUFLMkMsSUFBUSxHQUN2QmhsQixLQUFLd2xCLEtBQUtsRCxFQUFLeUMsSUFBUSxFQUNwQzFVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtsRCxFQUFLMEMsSUFBUSxFQUNsQzFVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt0RCxFQUFLZ0QsSUFBUSxFQUVsQ3pELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdEQsRUFBS2lELElBQVEsR0FDdkJubEIsS0FBS3dsQixLQUFLckQsRUFBSytDLElBQVEsRUFDcEM3VSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLckQsRUFBS2dELElBQVEsRUFLbEMsSUFBSWUsSUFBUzlWLEdBSmJFLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt6RCxFQUFLc0QsSUFBUSxHQUlYLEtBQWEsTUFGcEM1RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUt1RCxJQUFRLEdBQ3ZCdGxCLEtBQUt3bEIsS0FBS3hELEVBQUtxRCxJQUFRLEtBRVcsSUFBTyxFQUN0RGpWLElBRkFDLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt4RCxFQUFLc0QsSUFBUSxJQUVyQjdELElBQVEsSUFBTyxJQUFNeUUsS0FBUSxJQUFPLEVBQ2pEQSxJQUFPLFNBRVA1VixFQUFLdFEsS0FBS3dsQixLQUFLakMsRUFBS1MsR0FFcEJ2QyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2pDLEVBQUtVLElBQ1Jqa0IsS0FBS3dsQixLQUFLaEMsRUFBS1EsR0FBUSxFQUNwQzNULEVBQUtyUSxLQUFLd2xCLEtBQUtoQyxFQUFLUyxHQUNwQjNULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtwQyxFQUFLZSxHQUFRLEVBRWxDMUMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtwQyxFQUFLZ0IsR0FBUSxHQUN2QnBrQixLQUFLd2xCLEtBQUtuQyxFQUFLYyxHQUFRLEVBQ3BDOVQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS25DLEVBQUtlLEdBQVEsRUFDbEM5VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS3FCLEdBQVEsRUFFbEM3QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3ZDLEVBQUtzQixJQUFRLEdBQ3ZCdmtCLEtBQUt3bEIsS0FBS3RDLEVBQUtvQixHQUFRLEVBQ3BDalUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUtxQixJQUFRLEVBQ2xDalUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUsyQixJQUFRLEVBRWxDaEQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUsxQyxFQUFLNEIsSUFBUSxHQUN2QjFrQixLQUFLd2xCLEtBQUt6QyxFQUFLMEIsSUFBUSxFQUNwQ3BVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLMkIsSUFBUSxFQUNsQ3BVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs3QyxFQUFLaUMsSUFBUSxFQUVsQ25ELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBS2tDLElBQVEsR0FDdkI3a0IsS0FBS3dsQixLQUFLNUMsRUFBS2dDLElBQVEsRUFDcEN2VSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBS2lDLElBQVEsRUFDbEN2VSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBS3VDLElBQVEsRUFFbEN0RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUt3QyxJQUFRLEdBQ3ZCaGxCLEtBQUt3bEIsS0FBSy9DLEVBQUtzQyxJQUFRLEVBQ3BDMVUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUt1QyxJQUFRLEVBQ2xDMVUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS25ELEVBQUs2QyxJQUFRLEVBRWxDekQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtuRCxFQUFLOEMsSUFBUSxHQUN2Qm5sQixLQUFLd2xCLEtBQUtsRCxFQUFLNEMsSUFBUSxFQUNwQzdVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtsRCxFQUFLNkMsSUFBUSxFQUtsQyxJQUFJZ0IsSUFBUy9WLEdBSmJFLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt0RCxFQUFLbUQsSUFBUSxHQUlYLEtBQWEsTUFGcEM1RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3RELEVBQUtvRCxJQUFRLEdBQ3ZCdGxCLEtBQUt3bEIsS0FBS3JELEVBQUtrRCxJQUFRLEtBRVcsSUFBTyxFQUN0RGpWLElBRkFDLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtyRCxFQUFLbUQsSUFBUSxJQUVyQjdELElBQVEsSUFBTyxJQUFNMEUsS0FBUSxJQUFPLEVBQ2pEQSxJQUFPLFNBRVA3VixFQUFLdFEsS0FBS3dsQixLQUFLakMsRUFBS1ksR0FFcEIxQyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2pDLEVBQUthLElBQ1Jwa0IsS0FBS3dsQixLQUFLaEMsRUFBS1csR0FBUSxFQUNwQzlULEVBQUtyUSxLQUFLd2xCLEtBQUtoQyxFQUFLWSxHQUNwQjlULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtwQyxFQUFLa0IsR0FBUSxFQUVsQzdDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBS21CLElBQVEsR0FDdkJ2a0IsS0FBS3dsQixLQUFLbkMsRUFBS2lCLEdBQVEsRUFDcENqVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLbkMsRUFBS2tCLElBQVEsRUFDbENqVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS3dCLElBQVEsRUFFbENoRCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3ZDLEVBQUt5QixJQUFRLEdBQ3ZCMWtCLEtBQUt3bEIsS0FBS3RDLEVBQUt1QixJQUFRLEVBQ3BDcFUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUt3QixJQUFRLEVBQ2xDcFUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUs4QixJQUFRLEVBRWxDbkQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUsxQyxFQUFLK0IsSUFBUSxHQUN2QjdrQixLQUFLd2xCLEtBQUt6QyxFQUFLNkIsSUFBUSxFQUNwQ3ZVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLOEIsSUFBUSxFQUNsQ3ZVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs3QyxFQUFLb0MsSUFBUSxFQUVsQ3RELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBS3FDLElBQVEsR0FDdkJobEIsS0FBS3dsQixLQUFLNUMsRUFBS21DLElBQVEsRUFDcEMxVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBS29DLElBQVEsRUFDbEMxVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBSzBDLElBQVEsRUFFbEN6RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUsyQyxJQUFRLEdBQ3ZCbmxCLEtBQUt3bEIsS0FBSy9DLEVBQUt5QyxJQUFRLEVBQ3BDN1UsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUswQyxJQUFRLEVBS2xDLElBQUlpQixJQUFTaFcsR0FKYkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS25ELEVBQUtnRCxJQUFRLEdBSVgsS0FBYSxNQUZwQzVELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLbkQsRUFBS2lELElBQVEsR0FDdkJ0bEIsS0FBS3dsQixLQUFLbEQsRUFBSytDLElBQVEsS0FFVyxJQUFPLEVBQ3REalYsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS2xELEVBQUtnRCxJQUFRLElBRXJCN0QsSUFBUSxJQUFPLElBQU0yRSxLQUFRLElBQU8sRUFDakRBLElBQU8sU0FFUDlWLEVBQUt0USxLQUFLd2xCLEtBQUtqQyxFQUFLZSxHQUVwQjdDLEdBREFBLEVBQU16aEIsS0FBS3dsQixLQUFLakMsRUFBS2dCLEtBQ1J2a0IsS0FBS3dsQixLQUFLaEMsRUFBS2MsR0FBUSxFQUNwQ2pVLEVBQUtyUSxLQUFLd2xCLEtBQUtoQyxFQUFLZSxJQUNwQmpVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtwQyxFQUFLcUIsSUFBUSxFQUVsQ2hELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBS3NCLElBQVEsR0FDdkIxa0IsS0FBS3dsQixLQUFLbkMsRUFBS29CLElBQVEsRUFDcENwVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLbkMsRUFBS3FCLElBQVEsRUFDbENwVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBSzJCLElBQVEsRUFFbENuRCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3ZDLEVBQUs0QixJQUFRLEdBQ3ZCN2tCLEtBQUt3bEIsS0FBS3RDLEVBQUswQixJQUFRLEVBQ3BDdlUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUsyQixJQUFRLEVBQ2xDdlUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUtpQyxJQUFRLEVBRWxDdEQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUsxQyxFQUFLa0MsSUFBUSxHQUN2QmhsQixLQUFLd2xCLEtBQUt6QyxFQUFLZ0MsSUFBUSxFQUNwQzFVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLaUMsSUFBUSxFQUNsQzFVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs3QyxFQUFLdUMsSUFBUSxFQUVsQ3pELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBS3dDLElBQVEsR0FDdkJubEIsS0FBS3dsQixLQUFLNUMsRUFBS3NDLElBQVEsRUFDcEM3VSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBS3VDLElBQVEsRUFLbEMsSUFBSWtCLElBQVNqVyxHQUpiRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBSzZDLElBQVEsR0FJWCxLQUFhLE1BRnBDNUQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtoRCxFQUFLOEMsSUFBUSxHQUN2QnRsQixLQUFLd2xCLEtBQUsvQyxFQUFLNEMsSUFBUSxLQUVXLElBQU8sRUFDdERqVixJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLL0MsRUFBSzZDLElBQVEsSUFFckI3RCxJQUFRLElBQU8sSUFBTTRFLEtBQVEsSUFBTyxFQUNqREEsSUFBTyxTQUVQL1YsRUFBS3RRLEtBQUt3bEIsS0FBS2pDLEVBQUtrQixJQUVwQmhELEdBREFBLEVBQU16aEIsS0FBS3dsQixLQUFLakMsRUFBS21CLEtBQ1Ixa0IsS0FBS3dsQixLQUFLaEMsRUFBS2lCLElBQVEsRUFDcENwVSxFQUFLclEsS0FBS3dsQixLQUFLaEMsRUFBS2tCLElBQ3BCcFUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3BDLEVBQUt3QixJQUFRLEVBRWxDbkQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtwQyxFQUFLeUIsSUFBUSxHQUN2QjdrQixLQUFLd2xCLEtBQUtuQyxFQUFLdUIsSUFBUSxFQUNwQ3ZVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtuQyxFQUFLd0IsSUFBUSxFQUNsQ3ZVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt2QyxFQUFLOEIsSUFBUSxFQUVsQ3RELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdkMsRUFBSytCLElBQVEsR0FDdkJobEIsS0FBS3dsQixLQUFLdEMsRUFBSzZCLElBQVEsRUFDcEMxVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLdEMsRUFBSzhCLElBQVEsRUFDbEMxVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLMUMsRUFBS29DLElBQVEsRUFFbEN6RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBSzFDLEVBQUtxQyxJQUFRLEdBQ3ZCbmxCLEtBQUt3bEIsS0FBS3pDLEVBQUttQyxJQUFRLEVBQ3BDN1UsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3pDLEVBQUtvQyxJQUFRLEVBS2xDLElBQUltQixJQUFTbFcsR0FKYkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzdDLEVBQUswQyxJQUFRLEdBSVgsS0FBYSxNQUZwQzVELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBSzJDLElBQVEsR0FDdkJ0bEIsS0FBS3dsQixLQUFLNUMsRUFBS3lDLElBQVEsS0FFVyxJQUFPLEVBQ3REalYsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSzVDLEVBQUswQyxJQUFRLElBRXJCN0QsSUFBUSxJQUFPLElBQU02RSxLQUFRLElBQU8sRUFDakRBLElBQU8sU0FFUGhXLEVBQUt0USxLQUFLd2xCLEtBQUtqQyxFQUFLcUIsSUFFcEJuRCxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2pDLEVBQUtzQixLQUNSN2tCLEtBQUt3bEIsS0FBS2hDLEVBQUtvQixJQUFRLEVBQ3BDdlUsRUFBS3JRLEtBQUt3bEIsS0FBS2hDLEVBQUtxQixJQUNwQnZVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtwQyxFQUFLMkIsSUFBUSxFQUVsQ3RELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBSzRCLElBQVEsR0FDdkJobEIsS0FBS3dsQixLQUFLbkMsRUFBSzBCLElBQVEsRUFDcEMxVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLbkMsRUFBSzJCLElBQVEsRUFDbEMxVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS2lDLElBQVEsRUFFbEN6RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3ZDLEVBQUtrQyxJQUFRLEdBQ3ZCbmxCLEtBQUt3bEIsS0FBS3RDLEVBQUtnQyxJQUFRLEVBQ3BDN1UsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUtpQyxJQUFRLEVBS2xDLElBQUlvQixJQUFTblcsR0FKYkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUt1QyxJQUFRLEdBSVgsS0FBYSxNQUZwQzVELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLMUMsRUFBS3dDLElBQVEsR0FDdkJ0bEIsS0FBS3dsQixLQUFLekMsRUFBS3NDLElBQVEsS0FFVyxJQUFPLEVBQ3REalYsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3pDLEVBQUt1QyxJQUFRLElBRXJCN0QsSUFBUSxJQUFPLElBQU04RSxLQUFRLElBQU8sRUFDakRBLElBQU8sU0FFUGpXLEVBQUt0USxLQUFLd2xCLEtBQUtqQyxFQUFLd0IsSUFFcEJ0RCxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2pDLEVBQUt5QixLQUNSaGxCLEtBQUt3bEIsS0FBS2hDLEVBQUt1QixJQUFRLEVBQ3BDMVUsRUFBS3JRLEtBQUt3bEIsS0FBS2hDLEVBQUt3QixJQUNwQjFVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtwQyxFQUFLOEIsSUFBUSxFQUVsQ3pELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBSytCLElBQVEsR0FDdkJubEIsS0FBS3dsQixLQUFLbkMsRUFBSzZCLElBQVEsRUFDcEM3VSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLbkMsRUFBSzhCLElBQVEsRUFLbEMsSUFBSXFCLElBQVNwVyxHQUpiRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS29DLElBQVEsR0FJWCxLQUFhLE1BRnBDNUQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUt2QyxFQUFLcUMsSUFBUSxHQUN2QnRsQixLQUFLd2xCLEtBQUt0QyxFQUFLbUMsSUFBUSxLQUVXLElBQU8sRUFDdERqVixJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLdEMsRUFBS29DLElBQVEsSUFFckI3RCxJQUFRLElBQU8sSUFBTStFLEtBQVEsSUFBTyxFQUNqREEsSUFBTyxTQUVQbFcsRUFBS3RRLEtBQUt3bEIsS0FBS2pDLEVBQUsyQixJQUVwQnpELEdBREFBLEVBQU16aEIsS0FBS3dsQixLQUFLakMsRUFBSzRCLEtBQ1JubEIsS0FBS3dsQixLQUFLaEMsRUFBSzBCLElBQVEsRUFDcEM3VSxFQUFLclEsS0FBS3dsQixLQUFLaEMsRUFBSzJCLElBS3BCLElBQUlzQixJQUFTclcsR0FKYkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3BDLEVBQUtpQyxJQUFRLEdBSVgsS0FBYSxNQUZwQzVELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBS2tDLElBQVEsR0FDdkJ0bEIsS0FBS3dsQixLQUFLbkMsRUFBS2dDLElBQVEsS0FFVyxJQUFPLEVBQ3REalYsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS25DLEVBQUtpQyxJQUFRLElBRXJCN0QsSUFBUSxJQUFPLElBQU1nRixLQUFRLElBQU8sRUFDakRBLElBQU8sU0FNUCxJQUFJQyxJQUFTdFcsR0FKYkUsRUFBS3RRLEtBQUt3bEIsS0FBS2pDLEVBQUs4QixLQUlHLEtBQWEsTUFGcEM1RCxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2pDLEVBQUsrQixLQUNSdGxCLEtBQUt3bEIsS0FBS2hDLEVBQUs2QixJQUFRLEtBRVcsSUFBTyxFQTBCdEQsT0F6QkFqVixJQUZBQyxFQUFLclEsS0FBS3dsQixLQUFLaEMsRUFBSzhCLE1BRVA3RCxJQUFRLElBQU8sSUFBTWlGLEtBQVEsSUFBTyxFQUNqREEsSUFBTyxTQUNQaEYsRUFBRSxHQUFLNkQsR0FDUDdELEVBQUUsR0FBSytELEdBQ1AvRCxFQUFFLEdBQUtnRSxHQUNQaEUsRUFBRSxHQUFLaUUsR0FDUGpFLEVBQUUsR0FBS2tFLEdBQ1BsRSxFQUFFLEdBQUttRSxHQUNQbkUsRUFBRSxHQUFLb0UsR0FDUHBFLEVBQUUsR0FBS3FFLEdBQ1ByRSxFQUFFLEdBQUtzRSxHQUNQdEUsRUFBRSxHQUFLdUUsR0FDUHZFLEVBQUUsSUFBTXdFLEdBQ1J4RSxFQUFFLElBQU15RSxHQUNSekUsRUFBRSxJQUFNMEUsR0FDUjFFLEVBQUUsSUFBTTJFLEdBQ1IzRSxFQUFFLElBQU00RSxHQUNSNUUsRUFBRSxJQUFNNkUsR0FDUjdFLEVBQUUsSUFBTThFLEdBQ1I5RSxFQUFFLElBQU0rRSxHQUNSL0UsRUFBRSxJQUFNZ0YsR0FDRSxJQUFOdFcsSUFDRnNSLEVBQUUsSUFBTXRSLEVBQ1JnRCxFQUFJalUsVUFFQ2lVLEdBaURULFNBQVN1VCxFQUFZdEksRUFBTW5HLEVBQUs5RSxHQUU5QixPQURXLElBQUl3VCxHQUNIQyxLQUFLeEksRUFBTW5HLEVBQUs5RSxHQXNCOUIsU0FBU3dULEVBQU03VSxFQUFHQyxHQUNoQjNRLEtBQUswUSxFQUFJQSxFQUNUMVEsS0FBSzJRLEVBQUlBLEVBdkVOaFMsS0FBS3dsQixPQUNSaEUsRUFBY3BELEdBaURoQnpHLEVBQUd4WixVQUFVMm9CLE1BQVEsU0FBZ0I1TyxFQUFLOUUsR0FDeEMsSUFDSXZHLEVBQU14TCxLQUFLbEMsT0FBUytZLEVBQUkvWSxPQVc1QixPQVZvQixLQUFoQmtDLEtBQUtsQyxRQUFnQyxLQUFmK1ksRUFBSS9ZLE9BQ3RCcWlCLEVBQVluZ0IsS0FBTTZXLEVBQUs5RSxHQUNwQnZHLEVBQU0sR0FDVHVSLEVBQVcvYyxLQUFNNlcsRUFBSzlFLEdBQ25CdkcsRUFBTSxLQXJEbkIsU0FBbUJ3UixFQUFNbkcsRUFBSzlFLEdBQzVCQSxFQUFJc0osU0FBV3hFLEVBQUl3RSxTQUFXMkIsRUFBSzNCLFNBQ25DdEosRUFBSWpVLE9BQVNrZixFQUFLbGYsT0FBUytZLEVBQUkvWSxPQUkvQixJQUZBLElBQUkwYyxFQUFRLEVBQ1JrTCxFQUFVLEVBQ0x2TyxFQUFJLEVBQUdBLEVBQUlwRixFQUFJalUsT0FBUyxFQUFHcVosSUFBSyxDQUd2QyxJQUFJOEYsRUFBU3lJLEVBQ2JBLEVBQVUsRUFHVixJQUZBLElBQUl4SSxFQUFnQixTQUFSMUMsRUFDUjJDLEVBQU94ZSxLQUFLK0YsSUFBSXlTLEVBQUdOLEVBQUkvWSxPQUFTLEdBQzNCaVEsRUFBSXBQLEtBQUs0RixJQUFJLEVBQUc0UyxFQUFJNkYsRUFBS2xmLE9BQVMsR0FBSWlRLEdBQUtvUCxFQUFNcFAsSUFBSyxDQUM3RCxJQUFJdE0sRUFBSTBWLEVBQUlwSixFQUdScUksR0FGb0IsRUFBaEI0RyxFQUFLbmMsTUFBTVksS0FDSSxFQUFmb1YsRUFBSWhXLE1BQU1rTixJQUdka0IsRUFBUyxTQUFKbUgsRUFHVDhHLEVBQWEsVUFEYmpPLEVBQU1BLEVBQUtpTyxFQUFTLEdBSXBCd0ksSUFGQXpJLEdBSEFBLEVBQVVBLEdBQVc3RyxFQUFJLFNBQWEsR0FBTSxJQUd4Qm5ILElBQU8sSUFBTyxLQUVaLEdBQ3RCZ08sR0FBVSxTQUVabEwsRUFBSWxSLE1BQU1zVyxHQUFLK0YsRUFDZjFDLEVBQVF5QyxFQUNSQSxFQUFTeUksRUFRWCxPQU5jLElBQVZsTCxFQUNGekksRUFBSWxSLE1BQU1zVyxHQUFLcUQsRUFFZnpJLEVBQUlqVSxTQUdDaVUsRUFBSW1LLFFBZ0JIeUosQ0FBUzNsQixLQUFNNlcsRUFBSzlFLEdBRXBCdVQsRUFBV3RsQixLQUFNNlcsRUFBSzlFLElBY2hDd1QsRUFBS3pvQixVQUFVOG9CLFFBQVUsU0FBa0JDLEdBR3pDLElBRkEsSUFBSTVILEVBQUksSUFBSXJNLE1BQU1pVSxHQUNkMVAsRUFBSUcsRUFBR3haLFVBQVVraEIsV0FBVzZILEdBQUssRUFDNUJwa0IsRUFBSSxFQUFHQSxFQUFJb2tCLEVBQUdwa0IsSUFDckJ3YyxFQUFFeGMsR0FBS3pCLEtBQUs4bEIsT0FBT3JrQixFQUFHMFUsRUFBRzBQLEdBRzNCLE9BQU81SCxHQUlUc0gsRUFBS3pvQixVQUFVZ3BCLE9BQVMsU0FBaUJwVixFQUFHeUYsRUFBRzBQLEdBQzdDLEdBQVUsSUFBTm5WLEdBQVdBLElBQU1tVixFQUFJLEVBQUcsT0FBT25WLEVBR25DLElBREEsSUFBSXFWLEVBQUssRUFDQXRrQixFQUFJLEVBQUdBLEVBQUkwVSxFQUFHMVUsSUFDckJza0IsSUFBVyxFQUFKclYsSUFBV3lGLEVBQUkxVSxFQUFJLEVBQzFCaVAsSUFBTSxFQUdSLE9BQU9xVixHQUtUUixFQUFLem9CLFVBQVVrcEIsUUFBVSxTQUFrQkMsRUFBS0MsRUFBS0MsRUFBS0MsRUFBTUMsRUFBTVIsR0FDcEUsSUFBSyxJQUFJcGtCLEVBQUksRUFBR0EsRUFBSW9rQixFQUFHcGtCLElBQ3JCMmtCLEVBQUsza0IsR0FBS3lrQixFQUFJRCxFQUFJeGtCLElBQ2xCNGtCLEVBQUs1a0IsR0FBSzBrQixFQUFJRixFQUFJeGtCLEtBSXRCOGpCLEVBQUt6b0IsVUFBVXdwQixVQUFZLFNBQW9CSixFQUFLQyxFQUFLQyxFQUFNQyxFQUFNUixFQUFHSSxHQUN0RWptQixLQUFLZ21CLFFBQVFDLEVBQUtDLEVBQUtDLEVBQUtDLEVBQU1DLEVBQU1SLEdBRXhDLElBQUssSUFBSVUsRUFBSSxFQUFHQSxFQUFJVixFQUFHVSxJQUFNLEVBTTNCLElBTEEsSUFBSXBRLEVBQUlvUSxHQUFLLEVBRVRDLEVBQVE3bkIsS0FBSzhuQixJQUFJLEVBQUk5bkIsS0FBSytuQixHQUFLdlEsR0FDL0J3USxFQUFRaG9CLEtBQUtpb0IsSUFBSSxFQUFJam9CLEtBQUsrbkIsR0FBS3ZRLEdBRTFCNkMsRUFBSSxFQUFHQSxFQUFJNk0sRUFBRzdNLEdBQUs3QyxFQUkxQixJQUhBLElBQUkwUSxFQUFTTCxFQUNUTSxFQUFTSCxFQUVKNVksRUFBSSxFQUFHQSxFQUFJd1ksRUFBR3hZLElBQUssQ0FDMUIsSUFBSWdaLEVBQUtYLEVBQUtwTixFQUFJakwsR0FDZGlaLEVBQUtYLEVBQUtyTixFQUFJakwsR0FFZGtaLEVBQUtiLEVBQUtwTixFQUFJakwsRUFBSXdZLEdBQ2xCVyxFQUFLYixFQUFLck4sRUFBSWpMLEVBQUl3WSxHQUVsQlksRUFBS04sRUFBU0ksRUFBS0gsRUFBU0ksRUFFaENBLEVBQUtMLEVBQVNLLEVBQUtKLEVBQVNHLEVBQzVCQSxFQUFLRSxFQUVMZixFQUFLcE4sRUFBSWpMLEdBQUtnWixFQUFLRSxFQUNuQlosRUFBS3JOLEVBQUlqTCxHQUFLaVosRUFBS0UsRUFFbkJkLEVBQUtwTixFQUFJakwsRUFBSXdZLEdBQUtRLEVBQUtFLEVBQ3ZCWixFQUFLck4sRUFBSWpMLEVBQUl3WSxHQUFLUyxFQUFLRSxFQUduQm5aLElBQU1vSSxJQUNSZ1IsRUFBS1gsRUFBUUssRUFBU0YsRUFBUUcsRUFFOUJBLEVBQVNOLEVBQVFNLEVBQVNILEVBQVFFLEVBQ2xDQSxFQUFTTSxLQU9uQjVCLEVBQUt6b0IsVUFBVXNxQixZQUFjLFNBQXNCcmEsRUFBR0MsR0FDcEQsSUFBSTZZLEVBQXFCLEVBQWpCbG5CLEtBQUs0RixJQUFJeUksRUFBR0QsR0FDaEJzYSxFQUFVLEVBQUp4QixFQUNOcGtCLEVBQUksRUFDUixJQUFLb2tCLEVBQUlBLEVBQUksRUFBSSxFQUFHQSxFQUFHQSxLQUFVLEVBQy9CcGtCLElBR0YsT0FBTyxHQUFLQSxFQUFJLEVBQUk0bEIsR0FHdEI5QixFQUFLem9CLFVBQVV3cUIsVUFBWSxTQUFvQnBCLEVBQUtDLEVBQUtOLEdBQ3ZELEtBQUlBLEdBQUssR0FFVCxJQUFLLElBQUlwa0IsRUFBSSxFQUFHQSxFQUFJb2tCLEVBQUksRUFBR3BrQixJQUFLLENBQzlCLElBQUl3YyxFQUFJaUksRUFBSXprQixHQUVaeWtCLEVBQUl6a0IsR0FBS3lrQixFQUFJTCxFQUFJcGtCLEVBQUksR0FDckJ5a0IsRUFBSUwsRUFBSXBrQixFQUFJLEdBQUt3YyxFQUVqQkEsRUFBSWtJLEVBQUkxa0IsR0FFUjBrQixFQUFJMWtCLElBQU0wa0IsRUFBSU4sRUFBSXBrQixFQUFJLEdBQ3RCMGtCLEVBQUlOLEVBQUlwa0IsRUFBSSxJQUFNd2MsSUFJdEJzSCxFQUFLem9CLFVBQVV5cUIsYUFBZSxTQUF1QnJRLEVBQUkyTyxHQUV2RCxJQURBLElBQUlyTCxFQUFRLEVBQ0gvWSxFQUFJLEVBQUdBLEVBQUlva0IsRUFBSSxFQUFHcGtCLElBQUssQ0FDOUIsSUFBSXFWLEVBQW9DLEtBQWhDblksS0FBSzZvQixNQUFNdFEsRUFBRyxFQUFJelYsRUFBSSxHQUFLb2tCLEdBQ2pDbG5CLEtBQUs2b0IsTUFBTXRRLEVBQUcsRUFBSXpWLEdBQUtva0IsR0FDdkJyTCxFQUVGdEQsRUFBR3pWLEdBQVMsU0FBSnFWLEVBR04wRCxFQURFMUQsRUFBSSxTQUNFLEVBRUFBLEVBQUksU0FBWSxFQUk1QixPQUFPSSxHQUdUcU8sRUFBS3pvQixVQUFVMnFCLFdBQWEsU0FBcUJ2USxFQUFJMUwsRUFBSzBhLEVBQUtMLEdBRTdELElBREEsSUFBSXJMLEVBQVEsRUFDSC9ZLEVBQUksRUFBR0EsRUFBSStKLEVBQUsvSixJQUN2QitZLEdBQXlCLEVBQVJ0RCxFQUFHelYsR0FFcEJ5a0IsRUFBSSxFQUFJemtCLEdBQWEsS0FBUitZLEVBQWdCQSxLQUFrQixHQUMvQzBMLEVBQUksRUFBSXprQixFQUFJLEdBQWEsS0FBUitZLEVBQWdCQSxLQUFrQixHQUlyRCxJQUFLL1ksRUFBSSxFQUFJK0osRUFBSy9KLEVBQUlva0IsSUFBS3BrQixFQUN6QnlrQixFQUFJemtCLEdBQUssRUFHWHVVLEVBQWlCLElBQVZ3RSxHQUNQeEUsRUFBNkIsS0FBYixLQUFSd0UsS0FHVitLLEVBQUt6b0IsVUFBVTRxQixLQUFPLFNBQWU3QixHQUVuQyxJQURBLElBQUk4QixFQUFLLElBQUkvVixNQUFNaVUsR0FDVnBrQixFQUFJLEVBQUdBLEVBQUlva0IsRUFBR3BrQixJQUNyQmttQixFQUFHbG1CLEdBQUssRUFHVixPQUFPa21CLEdBR1RwQyxFQUFLem9CLFVBQVUwb0IsS0FBTyxTQUFlOVUsRUFBR0MsRUFBR29CLEdBQ3pDLElBQUk4VCxFQUFJLEVBQUk3bEIsS0FBS29uQixZQUFZMVcsRUFBRTVTLE9BQVE2UyxFQUFFN1MsUUFFckNtb0IsRUFBTWptQixLQUFLNGxCLFFBQVFDLEdBRW5CK0IsRUFBSTVuQixLQUFLMG5CLEtBQUs3QixHQUVkSyxFQUFNLElBQUl0VSxNQUFNaVUsR0FDaEJnQyxFQUFPLElBQUlqVyxNQUFNaVUsR0FDakJpQyxFQUFPLElBQUlsVyxNQUFNaVUsR0FFakJrQyxFQUFPLElBQUluVyxNQUFNaVUsR0FDakJtQyxFQUFRLElBQUlwVyxNQUFNaVUsR0FDbEJvQyxFQUFRLElBQUlyVyxNQUFNaVUsR0FFbEJxQyxFQUFPblcsRUFBSWxSLE1BQ2ZxbkIsRUFBS3BxQixPQUFTK25CLEVBRWQ3bEIsS0FBS3luQixXQUFXL1csRUFBRTdQLE1BQU82UCxFQUFFNVMsT0FBUW9vQixFQUFLTCxHQUN4QzdsQixLQUFLeW5CLFdBQVc5VyxFQUFFOVAsTUFBTzhQLEVBQUU3UyxPQUFRaXFCLEVBQU1sQyxHQUV6QzdsQixLQUFLc21CLFVBQVVKLEVBQUswQixFQUFHQyxFQUFNQyxFQUFNakMsRUFBR0ksR0FDdENqbUIsS0FBS3NtQixVQUFVeUIsRUFBTUgsRUFBR0ksRUFBT0MsRUFBT3BDLEVBQUdJLEdBRXpDLElBQUssSUFBSXhrQixFQUFJLEVBQUdBLEVBQUlva0IsRUFBR3BrQixJQUFLLENBQzFCLElBQUkwbEIsRUFBS1UsRUFBS3BtQixHQUFLdW1CLEVBQU12bUIsR0FBS3FtQixFQUFLcm1CLEdBQUt3bUIsRUFBTXhtQixHQUM5Q3FtQixFQUFLcm1CLEdBQUtvbUIsRUFBS3BtQixHQUFLd21CLEVBQU14bUIsR0FBS3FtQixFQUFLcm1CLEdBQUt1bUIsRUFBTXZtQixHQUMvQ29tQixFQUFLcG1CLEdBQUswbEIsRUFVWixPQVBBbm5CLEtBQUtzbkIsVUFBVU8sRUFBTUMsRUFBTWpDLEdBQzNCN2xCLEtBQUtzbUIsVUFBVXVCLEVBQU1DLEVBQU1JLEVBQU1OLEVBQUcvQixFQUFHSSxHQUN2Q2ptQixLQUFLc25CLFVBQVVZLEVBQU1OLEVBQUcvQixHQUN4QjdsQixLQUFLdW5CLGFBQWFXLEVBQU1yQyxHQUV4QjlULEVBQUlzSixTQUFXM0ssRUFBRTJLLFNBQVcxSyxFQUFFMEssU0FDOUJ0SixFQUFJalUsT0FBUzRTLEVBQUU1UyxPQUFTNlMsRUFBRTdTLE9BQ25CaVUsRUFBSW1LLFNBSWI1RixFQUFHeFosVUFBVWlXLElBQU0sU0FBYzhELEdBQy9CLElBQUk5RSxFQUFNLElBQUl1RSxFQUFHLE1BRWpCLE9BREF2RSxFQUFJbFIsTUFBUSxJQUFJK1EsTUFBTTVSLEtBQUtsQyxPQUFTK1ksRUFBSS9ZLFFBQ2pDa0MsS0FBS3lsQixNQUFNNU8sRUFBSzlFLElBSXpCdUUsRUFBR3haLFVBQVVxckIsS0FBTyxTQUFldFIsR0FDakMsSUFBSTlFLEVBQU0sSUFBSXVFLEVBQUcsTUFFakIsT0FEQXZFLEVBQUlsUixNQUFRLElBQUkrUSxNQUFNNVIsS0FBS2xDLE9BQVMrWSxFQUFJL1ksUUFDakN3bkIsRUFBV3RsQixLQUFNNlcsRUFBSzlFLElBSS9CdUUsRUFBR3haLFVBQVVxbkIsS0FBTyxTQUFldE4sR0FDakMsT0FBTzdXLEtBQUtXLFFBQVE4a0IsTUFBTTVPLEVBQUs3VyxPQUdqQ3NXLEVBQUd4WixVQUFVeWYsTUFBUSxTQUFnQjFGLEdBQ25DYixFQUFzQixpQkFBUmEsR0FDZGIsRUFBT2EsRUFBTSxVQUliLElBREEsSUFBSTJELEVBQVEsRUFDSC9ZLEVBQUksRUFBR0EsRUFBSXpCLEtBQUtsQyxPQUFRMkQsSUFBSyxDQUNwQyxJQUFJcVYsR0FBcUIsRUFBaEI5VyxLQUFLYSxNQUFNWSxJQUFVb1YsRUFDMUI1SCxHQUFVLFNBQUo2SCxJQUEwQixTQUFSMEQsR0FDNUJBLElBQVUsR0FDVkEsR0FBVTFELEVBQUksU0FBYSxFQUUzQjBELEdBQVN2TCxJQUFPLEdBQ2hCalAsS0FBS2EsTUFBTVksR0FBVSxTQUFMd04sRUFRbEIsT0FMYyxJQUFWdUwsSUFDRnhhLEtBQUthLE1BQU1ZLEdBQUsrWSxFQUNoQnhhLEtBQUtsQyxVQUdBa0MsTUFHVHNXLEVBQUd4WixVQUFVc3JCLEtBQU8sU0FBZXZSLEdBQ2pDLE9BQU83VyxLQUFLVyxRQUFRNGIsTUFBTTFGLElBSTVCUCxFQUFHeFosVUFBVXVyQixJQUFNLFdBQ2pCLE9BQU9yb0IsS0FBSytTLElBQUkvUyxPQUlsQnNXLEVBQUd4WixVQUFVd3JCLEtBQU8sV0FDbEIsT0FBT3RvQixLQUFLbWtCLEtBQUtua0IsS0FBS1csVUFJeEIyVixFQUFHeFosVUFBVXdXLElBQU0sU0FBY3VELEdBQy9CLElBQUlDLEVBeHhDTixTQUFxQkQsR0FHbkIsSUFGQSxJQUFJQyxFQUFJLElBQUlsRixNQUFNaUYsRUFBSUksYUFFYjZJLEVBQU0sRUFBR0EsRUFBTWhKLEVBQUVoWixPQUFRZ2lCLElBQU8sQ0FDdkMsSUFBSTNELEVBQU8yRCxFQUFNLEdBQU0sRUFDbkJDLEVBQU9ELEVBQU0sR0FFakJoSixFQUFFZ0osSUFBUWpKLEVBQUloVyxNQUFNc2IsR0FBUSxHQUFLNEQsS0FBV0EsRUFHOUMsT0FBT2pKLEVBOHdDQ3lSLENBQVcxUixHQUNuQixHQUFpQixJQUFiQyxFQUFFaFosT0FBYyxPQUFPLElBQUl3WSxFQUFHLEdBSWxDLElBREEsSUFBSWxILEVBQU1wUCxLQUNEeUIsRUFBSSxFQUFHQSxFQUFJcVYsRUFBRWhaLFFBQ1AsSUFBVGdaLEVBQUVyVixHQURzQkEsSUFBSzJOLEVBQU1BLEVBQUlpWixPQUk3QyxLQUFNNW1CLEVBQUlxVixFQUFFaFosT0FDVixJQUFLLElBQUlnZ0IsRUFBSTFPLEVBQUlpWixNQUFPNW1CLEVBQUlxVixFQUFFaFosT0FBUTJELElBQUtxYyxFQUFJQSxFQUFFdUssTUFDbEMsSUFBVHZSLEVBQUVyVixLQUVOMk4sRUFBTUEsRUFBSTJELElBQUkrSyxJQUlsQixPQUFPMU8sR0FJVGtILEVBQUd4WixVQUFVMHJCLE9BQVMsU0FBaUJ6UixHQUNyQ2YsRUFBdUIsaUJBQVRlLEdBQXFCQSxHQUFRLEdBQzNDLElBR0l0VixFQUhBMlUsRUFBSVcsRUFBTyxHQUNYd1AsR0FBS3hQLEVBQU9YLEdBQUssR0FDakJxUyxFQUFhLFdBQWUsR0FBS3JTLEdBQVEsR0FBS0EsRUFHbEQsR0FBVSxJQUFOQSxFQUFTLENBQ1gsSUFBSW9FLEVBQVEsRUFFWixJQUFLL1ksRUFBSSxFQUFHQSxFQUFJekIsS0FBS2xDLE9BQVEyRCxJQUFLLENBQ2hDLElBQUlpbkIsRUFBVzFvQixLQUFLYSxNQUFNWSxHQUFLZ25CLEVBQzNCMVosR0FBc0IsRUFBaEIvTyxLQUFLYSxNQUFNWSxJQUFVaW5CLEdBQWF0UyxFQUM1Q3BXLEtBQUthLE1BQU1ZLEdBQUtzTixFQUFJeUwsRUFDcEJBLEVBQVFrTyxJQUFjLEdBQUt0UyxFQUd6Qm9FLElBQ0Z4YSxLQUFLYSxNQUFNWSxHQUFLK1ksRUFDaEJ4YSxLQUFLbEMsVUFJVCxHQUFVLElBQU55b0IsRUFBUyxDQUNYLElBQUs5a0IsRUFBSXpCLEtBQUtsQyxPQUFTLEVBQUcyRCxHQUFLLEVBQUdBLElBQ2hDekIsS0FBS2EsTUFBTVksRUFBSThrQixHQUFLdm1CLEtBQUthLE1BQU1ZLEdBR2pDLElBQUtBLEVBQUksRUFBR0EsRUFBSThrQixFQUFHOWtCLElBQ2pCekIsS0FBS2EsTUFBTVksR0FBSyxFQUdsQnpCLEtBQUtsQyxRQUFVeW9CLEVBR2pCLE9BQU92bUIsS0FBS2tjLFNBR2Q1RixFQUFHeFosVUFBVTZyQixNQUFRLFNBQWdCNVIsR0FHbkMsT0FEQWYsRUFBeUIsSUFBbEJoVyxLQUFLcWIsVUFDTHJiLEtBQUt3b0IsT0FBT3pSLElBTXJCVCxFQUFHeFosVUFBVTJhLE9BQVMsU0FBaUJWLEVBQU02UixFQUFNQyxHQUVqRCxJQUFJQyxFQURKOVMsRUFBdUIsaUJBQVRlLEdBQXFCQSxHQUFRLEdBR3pDK1IsRUFERUYsR0FDR0EsRUFBUUEsRUFBTyxJQUFPLEdBRXZCLEVBR04sSUFBSXhTLEVBQUlXLEVBQU8sR0FDWHdQLEVBQUk1bkIsS0FBSytGLEtBQUtxUyxFQUFPWCxHQUFLLEdBQUlwVyxLQUFLbEMsUUFDbkNpckIsRUFBTyxTQUFjLFdBQWMzUyxHQUFNQSxFQUN6QzRTLEVBQWNILEVBTWxCLEdBSkFDLEdBQUt2QyxFQUNMdUMsRUFBSW5xQixLQUFLNEYsSUFBSSxFQUFHdWtCLEdBR1pFLEVBQWEsQ0FDZixJQUFLLElBQUl2bkIsRUFBSSxFQUFHQSxFQUFJOGtCLEVBQUc5a0IsSUFDckJ1bkIsRUFBWW5vQixNQUFNWSxHQUFLekIsS0FBS2EsTUFBTVksR0FFcEN1bkIsRUFBWWxyQixPQUFTeW9CLEVBR3ZCLEdBQVUsSUFBTkEsUUFFRyxHQUFJdm1CLEtBQUtsQyxPQUFTeW9CLEVBRXZCLElBREF2bUIsS0FBS2xDLFFBQVV5b0IsRUFDVjlrQixFQUFJLEVBQUdBLEVBQUl6QixLQUFLbEMsT0FBUTJELElBQzNCekIsS0FBS2EsTUFBTVksR0FBS3pCLEtBQUthLE1BQU1ZLEVBQUk4a0IsUUFHakN2bUIsS0FBS2EsTUFBTSxHQUFLLEVBQ2hCYixLQUFLbEMsT0FBUyxFQUdoQixJQUFJMGMsRUFBUSxFQUNaLElBQUsvWSxFQUFJekIsS0FBS2xDLE9BQVMsRUFBRzJELEdBQUssSUFBZ0IsSUFBVitZLEdBQWUvWSxHQUFLcW5CLEdBQUlybkIsSUFBSyxDQUNoRSxJQUFJcVgsRUFBdUIsRUFBaEI5WSxLQUFLYSxNQUFNWSxHQUN0QnpCLEtBQUthLE1BQU1ZLEdBQU0rWSxHQUFVLEdBQUtwRSxFQUFPMEMsSUFBUzFDLEVBQ2hEb0UsRUFBUTFCLEVBQU9pUSxFQWFqQixPQVRJQyxHQUF5QixJQUFWeE8sSUFDakJ3TyxFQUFZbm9CLE1BQU1tb0IsRUFBWWxyQixVQUFZMGMsR0FHeEIsSUFBaEJ4YSxLQUFLbEMsU0FDUGtDLEtBQUthLE1BQU0sR0FBSyxFQUNoQmIsS0FBS2xDLE9BQVMsR0FHVGtDLEtBQUtrYyxTQUdkNUYsRUFBR3haLFVBQVVtc0IsTUFBUSxTQUFnQmxTLEVBQU02UixFQUFNQyxHQUcvQyxPQURBN1MsRUFBeUIsSUFBbEJoVyxLQUFLcWIsVUFDTHJiLEtBQUt5WCxPQUFPVixFQUFNNlIsRUFBTUMsSUFJakN2UyxFQUFHeFosVUFBVW9zQixLQUFPLFNBQWVuUyxHQUNqQyxPQUFPL1csS0FBS1csUUFBUWdvQixNQUFNNVIsSUFHNUJULEVBQUd4WixVQUFVcXNCLE1BQVEsU0FBZ0JwUyxHQUNuQyxPQUFPL1csS0FBS1csUUFBUTZuQixPQUFPelIsSUFJN0JULEVBQUd4WixVQUFVc3NCLEtBQU8sU0FBZXJTLEdBQ2pDLE9BQU8vVyxLQUFLVyxRQUFRc29CLE1BQU1sUyxJQUc1QlQsRUFBR3haLFVBQVV1c0IsTUFBUSxTQUFnQnRTLEdBQ25DLE9BQU8vVyxLQUFLVyxRQUFROFcsT0FBT1YsSUFJN0JULEVBQUd4WixVQUFVNGhCLE1BQVEsU0FBZ0JvQixHQUNuQzlKLEVBQXNCLGlCQUFSOEosR0FBb0JBLEdBQU8sR0FDekMsSUFBSTFKLEVBQUkwSixFQUFNLEdBQ1Z5RyxHQUFLekcsRUFBTTFKLEdBQUssR0FDaEIwSCxFQUFJLEdBQUsxSCxFQUdiLFFBQUlwVyxLQUFLbEMsUUFBVXlvQixPQUdYdm1CLEtBQUthLE1BQU0wbEIsR0FFTHpJLElBSWhCeEgsRUFBR3haLFVBQVV3c0IsT0FBUyxTQUFpQnZTLEdBQ3JDZixFQUF1QixpQkFBVGUsR0FBcUJBLEdBQVEsR0FDM0MsSUFBSVgsRUFBSVcsRUFBTyxHQUNYd1AsR0FBS3hQLEVBQU9YLEdBQUssR0FJckIsR0FGQUosRUFBeUIsSUFBbEJoVyxLQUFLcWIsU0FBZ0IsMkNBRXhCcmIsS0FBS2xDLFFBQVV5b0IsRUFDakIsT0FBT3ZtQixLQVFULEdBTFUsSUFBTm9XLEdBQ0ZtUSxJQUVGdm1CLEtBQUtsQyxPQUFTYSxLQUFLK0YsSUFBSTZoQixFQUFHdm1CLEtBQUtsQyxRQUVyQixJQUFOc1ksRUFBUyxDQUNYLElBQUkyUyxFQUFPLFNBQWMsV0FBYzNTLEdBQU1BLEVBQzdDcFcsS0FBS2EsTUFBTWIsS0FBS2xDLE9BQVMsSUFBTWlyQixFQUdqQyxPQUFPL29CLEtBQUtrYyxTQUlkNUYsRUFBR3haLFVBQVV5c0IsTUFBUSxTQUFnQnhTLEdBQ25DLE9BQU8vVyxLQUFLVyxRQUFRMm9CLE9BQU92UyxJQUk3QlQsRUFBR3haLFVBQVUwaEIsTUFBUSxTQUFnQjNILEdBR25DLE9BRkFiLEVBQXNCLGlCQUFSYSxHQUNkYixFQUFPYSxFQUFNLFVBQ1RBLEVBQU0sRUFBVTdXLEtBQUt3WCxPQUFPWCxHQUdWLElBQWxCN1csS0FBS3FiLFNBQ2EsSUFBaEJyYixLQUFLbEMsU0FBaUMsRUFBaEJrQyxLQUFLYSxNQUFNLElBQVVnVyxHQUM3QzdXLEtBQUthLE1BQU0sR0FBS2dXLEdBQXVCLEVBQWhCN1csS0FBS2EsTUFBTSxJQUNsQ2IsS0FBS3FiLFNBQVcsRUFDVHJiLE9BR1RBLEtBQUtxYixTQUFXLEVBQ2hCcmIsS0FBS3dYLE1BQU1YLEdBQ1g3VyxLQUFLcWIsU0FBVyxFQUNUcmIsTUFJRkEsS0FBS3djLE9BQU8zRixJQUdyQlAsRUFBR3haLFVBQVUwZixPQUFTLFNBQWlCM0YsR0FDckM3VyxLQUFLYSxNQUFNLElBQU1nVyxFQUdqQixJQUFLLElBQUlwVixFQUFJLEVBQUdBLEVBQUl6QixLQUFLbEMsUUFBVWtDLEtBQUthLE1BQU1ZLElBQU0sU0FBV0EsSUFDN0R6QixLQUFLYSxNQUFNWSxJQUFNLFNBQ2JBLElBQU16QixLQUFLbEMsT0FBUyxFQUN0QmtDLEtBQUthLE1BQU1ZLEVBQUksR0FBSyxFQUVwQnpCLEtBQUthLE1BQU1ZLEVBQUksS0FLbkIsT0FGQXpCLEtBQUtsQyxPQUFTYSxLQUFLNEYsSUFBSXZFLEtBQUtsQyxPQUFRMkQsRUFBSSxHQUVqQ3pCLE1BSVRzVyxFQUFHeFosVUFBVTBhLE1BQVEsU0FBZ0JYLEdBR25DLEdBRkFiLEVBQXNCLGlCQUFSYSxHQUNkYixFQUFPYSxFQUFNLFVBQ1RBLEVBQU0sRUFBRyxPQUFPN1csS0FBS3dlLE9BQU8zSCxHQUVoQyxHQUFzQixJQUFsQjdXLEtBQUtxYixTQUlQLE9BSEFyYixLQUFLcWIsU0FBVyxFQUNoQnJiLEtBQUt3ZSxNQUFNM0gsR0FDWDdXLEtBQUtxYixTQUFXLEVBQ1RyYixLQUtULEdBRkFBLEtBQUthLE1BQU0sSUFBTWdXLEVBRUcsSUFBaEI3VyxLQUFLbEMsUUFBZ0JrQyxLQUFLYSxNQUFNLEdBQUssRUFDdkNiLEtBQUthLE1BQU0sSUFBTWIsS0FBS2EsTUFBTSxHQUM1QmIsS0FBS3FiLFNBQVcsT0FHaEIsSUFBSyxJQUFJNVosRUFBSSxFQUFHQSxFQUFJekIsS0FBS2xDLFFBQVVrQyxLQUFLYSxNQUFNWSxHQUFLLEVBQUdBLElBQ3BEekIsS0FBS2EsTUFBTVksSUFBTSxTQUNqQnpCLEtBQUthLE1BQU1ZLEVBQUksSUFBTSxFQUl6QixPQUFPekIsS0FBS2tjLFNBR2Q1RixFQUFHeFosVUFBVTBzQixLQUFPLFNBQWUzUyxHQUNqQyxPQUFPN1csS0FBS1csUUFBUTZkLE1BQU0zSCxJQUc1QlAsRUFBR3haLFVBQVUyc0IsS0FBTyxTQUFlNVMsR0FDakMsT0FBTzdXLEtBQUtXLFFBQVE2VyxNQUFNWCxJQUc1QlAsRUFBR3haLFVBQVU0c0IsS0FBTyxXQUdsQixPQUZBMXBCLEtBQUtxYixTQUFXLEVBRVRyYixNQUdUc1csRUFBR3haLFVBQVV3aEIsSUFBTSxXQUNqQixPQUFPdGUsS0FBS1csUUFBUStvQixRQUd0QnBULEVBQUd4WixVQUFVNnNCLGFBQWUsU0FBdUI5UyxFQUFLOUQsRUFBSzZXLEdBQzNELElBQ0lub0IsRUFJQXFWLEVBTEF0TCxFQUFNcUwsRUFBSS9ZLE9BQVM4ckIsRUFHdkI1cEIsS0FBSzBjLFFBQVFsUixHQUdiLElBQUlnUCxFQUFRLEVBQ1osSUFBSy9ZLEVBQUksRUFBR0EsRUFBSW9WLEVBQUkvWSxPQUFRMkQsSUFBSyxDQUMvQnFWLEdBQTZCLEVBQXhCOVcsS0FBS2EsTUFBTVksRUFBSW1vQixJQUFjcFAsRUFDbEMsSUFBSW9CLEdBQXdCLEVBQWYvRSxFQUFJaFcsTUFBTVksSUFBVXNSLEVBRWpDeUgsSUFEQTFELEdBQWEsU0FBUjhFLElBQ1MsS0FBUUEsRUFBUSxTQUFhLEdBQzNDNWIsS0FBS2EsTUFBTVksRUFBSW1vQixHQUFhLFNBQUo5UyxFQUUxQixLQUFPclYsRUFBSXpCLEtBQUtsQyxPQUFTOHJCLEVBQU9ub0IsSUFFOUIrWSxHQURBMUQsR0FBNkIsRUFBeEI5VyxLQUFLYSxNQUFNWSxFQUFJbW9CLElBQWNwUCxJQUNyQixHQUNieGEsS0FBS2EsTUFBTVksRUFBSW1vQixHQUFhLFNBQUo5UyxFQUcxQixHQUFjLElBQVYwRCxFQUFhLE9BQU94YSxLQUFLa2MsUUFLN0IsSUFGQWxHLEdBQWtCLElBQVh3RSxHQUNQQSxFQUFRLEVBQ0gvWSxFQUFJLEVBQUdBLEVBQUl6QixLQUFLbEMsT0FBUTJELElBRTNCK1ksR0FEQTFELElBQXNCLEVBQWhCOVcsS0FBS2EsTUFBTVksSUFBVStZLElBQ2QsR0FDYnhhLEtBQUthLE1BQU1ZLEdBQVMsU0FBSnFWLEVBSWxCLE9BRkE5VyxLQUFLcWIsU0FBVyxFQUVUcmIsS0FBS2tjLFNBR2Q1RixFQUFHeFosVUFBVStzQixTQUFXLFNBQW1CaFQsRUFBS3BQLEdBQzlDLElBQUltaUIsR0FBUTVwQixLQUFLbEMsT0FBUytZLEVBQUkvWSxRQUUxQjJTLEVBQUl6USxLQUFLVyxRQUNUbU0sRUFBSStKLEVBR0ppVCxFQUE4QixFQUF4QmhkLEVBQUVqTSxNQUFNaU0sRUFBRWhQLE9BQVMsR0FHZixLQURkOHJCLEVBQVEsR0FETTVwQixLQUFLZ2UsV0FBVzhMLE1BRzVCaGQsRUFBSUEsRUFBRXFjLE1BQU1TLEdBQ1puWixFQUFFK1gsT0FBT29CLEdBQ1RFLEVBQThCLEVBQXhCaGQsRUFBRWpNLE1BQU1pTSxFQUFFaFAsT0FBUyxJQUkzQixJQUNJZ2dCLEVBREE5USxFQUFJeUQsRUFBRTNTLE9BQVNnUCxFQUFFaFAsT0FHckIsR0FBYSxRQUFUMkosRUFBZ0IsRUFDbEJxVyxFQUFJLElBQUl4SCxFQUFHLE9BQ1R4WSxPQUFTa1AsRUFBSSxFQUNmOFEsRUFBRWpkLE1BQVEsSUFBSStRLE1BQU1rTSxFQUFFaGdCLFFBQ3RCLElBQUssSUFBSTJELEVBQUksRUFBR0EsRUFBSXFjLEVBQUVoZ0IsT0FBUTJELElBQzVCcWMsRUFBRWpkLE1BQU1ZLEdBQUssRUFJakIsSUFBSXNvQixFQUFPdFosRUFBRTlQLFFBQVFncEIsYUFBYTdjLEVBQUcsRUFBR0UsR0FDbEIsSUFBbEIrYyxFQUFLMU8sV0FDUDVLLEVBQUlzWixFQUNBak0sSUFDRkEsRUFBRWpkLE1BQU1tTSxHQUFLLElBSWpCLElBQUssSUFBSWUsRUFBSWYsRUFBSSxFQUFHZSxHQUFLLEVBQUdBLElBQUssQ0FDL0IsSUFBSWljLEVBQW1DLFVBQUwsRUFBeEJ2WixFQUFFNVAsTUFBTWlNLEVBQUVoUCxPQUFTaVEsS0FDRSxFQUE1QjBDLEVBQUU1UCxNQUFNaU0sRUFBRWhQLE9BQVNpUSxFQUFJLElBTzFCLElBSEFpYyxFQUFLcnJCLEtBQUsrRixJQUFLc2xCLEVBQUtGLEVBQU8sRUFBRyxVQUU5QnJaLEVBQUVrWixhQUFhN2MsRUFBR2tkLEVBQUlqYyxHQUNBLElBQWYwQyxFQUFFNEssVUFDUDJPLElBQ0F2WixFQUFFNEssU0FBVyxFQUNiNUssRUFBRWtaLGFBQWE3YyxFQUFHLEVBQUdpQixHQUNoQjBDLEVBQUU2TSxXQUNMN00sRUFBRTRLLFVBQVksR0FHZHlDLElBQ0ZBLEVBQUVqZCxNQUFNa04sR0FBS2ljLEdBYWpCLE9BVklsTSxHQUNGQSxFQUFFNUIsUUFFSnpMLEVBQUV5TCxRQUdXLFFBQVR6VSxHQUE0QixJQUFWbWlCLEdBQ3BCblosRUFBRWdILE9BQU9tUyxHQUdKLENBQ0xLLElBQUtuTSxHQUFLLEtBQ1Z6RyxJQUFLNUcsSUFRVDZGLEVBQUd4WixVQUFVb3RCLE9BQVMsU0FBaUJyVCxFQUFLcFAsRUFBTTBpQixHQUdoRCxPQUZBblUsR0FBUWEsRUFBSXlHLFVBRVJ0ZCxLQUFLc2QsU0FDQSxDQUNMMk0sSUFBSyxJQUFJM1QsRUFBRyxHQUNaZSxJQUFLLElBQUlmLEVBQUcsSUFLTSxJQUFsQnRXLEtBQUtxYixVQUFtQyxJQUFqQnhFLEVBQUl3RSxVQUM3QmpNLEVBQU1wUCxLQUFLOGUsTUFBTW9MLE9BQU9yVCxFQUFLcFAsR0FFaEIsUUFBVEEsSUFDRndpQixFQUFNN2EsRUFBSTZhLElBQUluTCxPQUdILFFBQVRyWCxJQUNGNFAsRUFBTWpJLEVBQUlpSSxJQUFJeUgsTUFDVnFMLEdBQTZCLElBQWpCOVMsRUFBSWdFLFVBQ2xCaEUsRUFBSTJJLEtBQUtuSixJQUlOLENBQ0xvVCxJQUFLQSxFQUNMNVMsSUFBS0EsSUFJYSxJQUFsQnJYLEtBQUtxYixVQUFtQyxJQUFqQnhFLEVBQUl3RSxVQUM3QmpNLEVBQU1wUCxLQUFLa3FCLE9BQU9yVCxFQUFJaUksTUFBT3JYLEdBRWhCLFFBQVRBLElBQ0Z3aUIsRUFBTTdhLEVBQUk2YSxJQUFJbkwsT0FHVCxDQUNMbUwsSUFBS0EsRUFDTDVTLElBQUtqSSxFQUFJaUksTUFJMEIsSUFBbENyWCxLQUFLcWIsU0FBV3hFLEVBQUl3RSxXQUN2QmpNLEVBQU1wUCxLQUFLOGUsTUFBTW9MLE9BQU9yVCxFQUFJaUksTUFBT3JYLEdBRXRCLFFBQVRBLElBQ0Y0UCxFQUFNakksRUFBSWlJLElBQUl5SCxNQUNWcUwsR0FBNkIsSUFBakI5UyxFQUFJZ0UsVUFDbEJoRSxFQUFJNEksS0FBS3BKLElBSU4sQ0FDTG9ULElBQUs3YSxFQUFJNmEsSUFDVDVTLElBQUtBLElBT0xSLEVBQUkvWSxPQUFTa0MsS0FBS2xDLFFBQVVrQyxLQUFLNmIsSUFBSWhGLEdBQU8sRUFDdkMsQ0FDTG9ULElBQUssSUFBSTNULEVBQUcsR0FDWmUsSUFBS3JYLE1BS1UsSUFBZjZXLEVBQUkvWSxPQUNPLFFBQVQySixFQUNLLENBQ0x3aUIsSUFBS2pxQixLQUFLb3FCLEtBQUt2VCxFQUFJaFcsTUFBTSxJQUN6QndXLElBQUssTUFJSSxRQUFUNVAsRUFDSyxDQUNMd2lCLElBQUssS0FDTDVTLElBQUssSUFBSWYsRUFBR3RXLEtBQUt1ZCxLQUFLMUcsRUFBSWhXLE1BQU0sTUFJN0IsQ0FDTG9wQixJQUFLanFCLEtBQUtvcUIsS0FBS3ZULEVBQUloVyxNQUFNLElBQ3pCd1csSUFBSyxJQUFJZixFQUFHdFcsS0FBS3VkLEtBQUsxRyxFQUFJaFcsTUFBTSxNQUk3QmIsS0FBSzZwQixTQUFTaFQsRUFBS3BQLEdBbEYxQixJQUFJd2lCLEVBQUs1UyxFQUFLakksR0FzRmhCa0gsRUFBR3haLFVBQVVtdEIsSUFBTSxTQUFjcFQsR0FDL0IsT0FBTzdXLEtBQUtrcUIsT0FBT3JULEVBQUssT0FBTyxHQUFPb1QsS0FJeEMzVCxFQUFHeFosVUFBVXVhLElBQU0sU0FBY1IsR0FDL0IsT0FBTzdXLEtBQUtrcUIsT0FBT3JULEVBQUssT0FBTyxHQUFPUSxLQUd4Q2YsRUFBR3haLFVBQVV1dEIsS0FBTyxTQUFleFQsR0FDakMsT0FBTzdXLEtBQUtrcUIsT0FBT3JULEVBQUssT0FBTyxHQUFNUSxLQUl2Q2YsRUFBR3haLFVBQVV3dEIsU0FBVyxTQUFtQnpULEdBQ3pDLElBQUkwVCxFQUFLdnFCLEtBQUtrcUIsT0FBT3JULEdBR3JCLEdBQUkwVCxFQUFHbFQsSUFBSWlHLFNBQVUsT0FBT2lOLEVBQUdOLElBRS9CLElBQUk1UyxFQUEwQixJQUFwQmtULEVBQUdOLElBQUk1TyxTQUFpQmtQLEVBQUdsVCxJQUFJNEksS0FBS3BKLEdBQU8wVCxFQUFHbFQsSUFFcERtVCxFQUFPM1QsRUFBSXdTLE1BQU0sR0FDakJvQixFQUFLNVQsRUFBSVMsTUFBTSxHQUNmdUUsRUFBTXhFLEVBQUl3RSxJQUFJMk8sR0FHbEIsT0FBSTNPLEVBQU0sR0FBWSxJQUFQNE8sR0FBb0IsSUFBUjVPLEVBQWtCME8sRUFBR04sSUFHckIsSUFBcEJNLEVBQUdOLElBQUk1TyxTQUFpQmtQLEVBQUdOLElBQUl6UyxNQUFNLEdBQUsrUyxFQUFHTixJQUFJekwsTUFBTSxJQUdoRWxJLEVBQUd4WixVQUFVeWdCLEtBQU8sU0FBZTFHLEdBQ2pDYixFQUFPYSxHQUFPLFVBSWQsSUFIQSxJQUFJbUMsR0FBSyxHQUFLLElBQU1uQyxFQUVoQjZULEVBQU0sRUFDRGpwQixFQUFJekIsS0FBS2xDLE9BQVMsRUFBRzJELEdBQUssRUFBR0EsSUFDcENpcEIsR0FBTzFSLEVBQUkwUixHQUF1QixFQUFoQjFxQixLQUFLYSxNQUFNWSxLQUFXb1YsRUFHMUMsT0FBTzZULEdBSVRwVSxFQUFHeFosVUFBVTBnQixNQUFRLFNBQWdCM0csR0FDbkNiLEVBQU9hLEdBQU8sVUFHZCxJQURBLElBQUkyRCxFQUFRLEVBQ0gvWSxFQUFJekIsS0FBS2xDLE9BQVMsRUFBRzJELEdBQUssRUFBR0EsSUFBSyxDQUN6QyxJQUFJcVYsR0FBcUIsRUFBaEI5VyxLQUFLYSxNQUFNWSxJQUFrQixTQUFSK1ksRUFDOUJ4YSxLQUFLYSxNQUFNWSxHQUFNcVYsRUFBSUQsRUFBTyxFQUM1QjJELEVBQVExRCxFQUFJRCxFQUdkLE9BQU83VyxLQUFLa2MsU0FHZDVGLEVBQUd4WixVQUFVc3RCLEtBQU8sU0FBZXZULEdBQ2pDLE9BQU83VyxLQUFLVyxRQUFRNmMsTUFBTTNHLElBRzVCUCxFQUFHeFosVUFBVTZ0QixLQUFPLFNBQWUzUixHQUNqQ2hELEVBQXNCLElBQWZnRCxFQUFFcUMsVUFDVHJGLEdBQVFnRCxFQUFFc0UsVUFFVixJQUFJNU0sRUFBSTFRLEtBQ0oyUSxFQUFJcUksRUFBRXJZLFFBR1IrUCxFQURpQixJQUFmQSxFQUFFMkssU0FDQTNLLEVBQUUyWixLQUFLclIsR0FFUHRJLEVBQUUvUCxRQWFSLElBVEEsSUFBSWlxQixFQUFJLElBQUl0VSxFQUFHLEdBQ1h1VSxFQUFJLElBQUl2VSxFQUFHLEdBR1g1VyxFQUFJLElBQUk0VyxFQUFHLEdBQ1h3VSxFQUFJLElBQUl4VSxFQUFHLEdBRVh5VSxFQUFJLEVBRURyYSxFQUFFc2EsVUFBWXJhLEVBQUVxYSxVQUNyQnRhLEVBQUUrRyxPQUFPLEdBQ1Q5RyxFQUFFOEcsT0FBTyxLQUNQc1QsRUFNSixJQUhBLElBQUlFLEVBQUt0YSxFQUFFaFEsUUFDUHVxQixFQUFLeGEsRUFBRS9QLFNBRUgrUCxFQUFFNE0sVUFBVSxDQUNsQixJQUFLLElBQUk3YixFQUFJLEVBQUcwcEIsRUFBSyxFQUF5QixJQUFyQnphLEVBQUU3UCxNQUFNLEdBQUtzcUIsSUFBYTFwQixFQUFJLEtBQU1BLEVBQUcwcEIsSUFBTyxHQUN2RSxHQUFJMXBCLEVBQUksRUFFTixJQURBaVAsRUFBRStHLE9BQU9oVyxHQUNGQSxLQUFNLElBQ1BtcEIsRUFBRXJULFNBQVdzVCxFQUFFdFQsV0FDakJxVCxFQUFFNUssS0FBS2lMLEdBQ1BKLEVBQUU1SyxLQUFLaUwsSUFHVE4sRUFBRW5ULE9BQU8sR0FDVG9ULEVBQUVwVCxPQUFPLEdBSWIsSUFBSyxJQUFJMUosRUFBSSxFQUFHcWQsRUFBSyxFQUF5QixJQUFyQnphLEVBQUU5UCxNQUFNLEdBQUt1cUIsSUFBYXJkLEVBQUksS0FBTUEsRUFBR3FkLElBQU8sR0FDdkUsR0FBSXJkLEVBQUksRUFFTixJQURBNEMsRUFBRThHLE9BQU8xSixHQUNGQSxLQUFNLElBQ1ByTyxFQUFFNlgsU0FBV3VULEVBQUV2VCxXQUNqQjdYLEVBQUVzZ0IsS0FBS2lMLEdBQ1BILEVBQUU3SyxLQUFLaUwsSUFHVHhyQixFQUFFK1gsT0FBTyxHQUNUcVQsRUFBRXJULE9BQU8sR0FJVC9HLEVBQUVtTCxJQUFJbEwsSUFBTSxHQUNkRCxFQUFFdVAsS0FBS3RQLEdBQ1BpYSxFQUFFM0ssS0FBS3ZnQixHQUNQbXJCLEVBQUU1SyxLQUFLNkssS0FFUG5hLEVBQUVzUCxLQUFLdlAsR0FDUGhSLEVBQUV1Z0IsS0FBSzJLLEdBQ1BFLEVBQUU3SyxLQUFLNEssSUFJWCxNQUFPLENBQ0xwYSxFQUFHL1EsRUFDSG9OLEVBQUdnZSxFQUNITyxJQUFLMWEsRUFBRTZYLE9BQU91QyxLQU9sQnpVLEVBQUd4WixVQUFVd3VCLE9BQVMsU0FBaUJ0UyxHQUNyQ2hELEVBQXNCLElBQWZnRCxFQUFFcUMsVUFDVHJGLEdBQVFnRCxFQUFFc0UsVUFFVixJQUFJN00sRUFBSXpRLEtBQ0o4TSxFQUFJa00sRUFBRXJZLFFBR1I4UCxFQURpQixJQUFmQSxFQUFFNEssU0FDQTVLLEVBQUU0WixLQUFLclIsR0FFUHZJLEVBQUU5UCxRQVFSLElBTEEsSUF1Q0l5TyxFQXZDQW1jLEVBQUssSUFBSWpWLEVBQUcsR0FDWmtWLEVBQUssSUFBSWxWLEVBQUcsR0FFWm1WLEVBQVEzZSxFQUFFbk0sUUFFUDhQLEVBQUV1SCxLQUFLLEdBQUssR0FBS2xMLEVBQUVrTCxLQUFLLEdBQUssR0FBRyxDQUNyQyxJQUFLLElBQUl2VyxFQUFJLEVBQUcwcEIsRUFBSyxFQUF5QixJQUFyQjFhLEVBQUU1UCxNQUFNLEdBQUtzcUIsSUFBYTFwQixFQUFJLEtBQU1BLEVBQUcwcEIsSUFBTyxHQUN2RSxHQUFJMXBCLEVBQUksRUFFTixJQURBZ1AsRUFBRWdILE9BQU9oVyxHQUNGQSxLQUFNLEdBQ1A4cEIsRUFBR2hVLFNBQ0xnVSxFQUFHdkwsS0FBS3lMLEdBR1ZGLEVBQUc5VCxPQUFPLEdBSWQsSUFBSyxJQUFJMUosRUFBSSxFQUFHcWQsRUFBSyxFQUF5QixJQUFyQnRlLEVBQUVqTSxNQUFNLEdBQUt1cUIsSUFBYXJkLEVBQUksS0FBTUEsRUFBR3FkLElBQU8sR0FDdkUsR0FBSXJkLEVBQUksRUFFTixJQURBakIsRUFBRTJLLE9BQU8xSixHQUNGQSxLQUFNLEdBQ1B5ZCxFQUFHalUsU0FDTGlVLEVBQUd4TCxLQUFLeUwsR0FHVkQsRUFBRy9ULE9BQU8sR0FJVmhILEVBQUVvTCxJQUFJL08sSUFBTSxHQUNkMkQsRUFBRXdQLEtBQUtuVCxHQUNQeWUsRUFBR3RMLEtBQUt1TCxLQUVSMWUsRUFBRW1ULEtBQUt4UCxHQUNQK2EsRUFBR3ZMLEtBQUtzTCxJQWVaLE9BVEVuYyxFQURnQixJQUFkcUIsRUFBRXVILEtBQUssR0FDSHVULEVBRUFDLEdBR0F4VCxLQUFLLEdBQUssR0FDaEI1SSxFQUFJNFEsS0FBS2hILEdBR0o1SixHQUdUa0gsRUFBR3haLFVBQVV1dUIsSUFBTSxTQUFjeFUsR0FDL0IsR0FBSTdXLEtBQUtzZCxTQUFVLE9BQU96RyxFQUFJeUgsTUFDOUIsR0FBSXpILEVBQUl5RyxTQUFVLE9BQU90ZCxLQUFLc2UsTUFFOUIsSUFBSTdOLEVBQUl6USxLQUFLVyxRQUNUbU0sRUFBSStKLEVBQUlsVyxRQUNaOFAsRUFBRTRLLFNBQVcsRUFDYnZPLEVBQUV1TyxTQUFXLEVBR2IsSUFBSyxJQUFJdU8sRUFBUSxFQUFHblosRUFBRXVhLFVBQVlsZSxFQUFFa2UsU0FBVXBCLElBQzVDblosRUFBRWdILE9BQU8sR0FDVDNLLEVBQUUySyxPQUFPLEdBR1gsT0FBRyxDQUNELEtBQU9oSCxFQUFFdWEsVUFDUHZhLEVBQUVnSCxPQUFPLEdBRVgsS0FBTzNLLEVBQUVrZSxVQUNQbGUsRUFBRTJLLE9BQU8sR0FHWCxJQUFJckIsRUFBSTNGLEVBQUVvTCxJQUFJL08sR0FDZCxHQUFJc0osRUFBSSxFQUFHLENBRVQsSUFBSTZILEVBQUl4TixFQUNSQSxFQUFJM0QsRUFDSkEsRUFBSW1SLE9BQ0MsR0FBVSxJQUFON0gsR0FBeUIsSUFBZHRKLEVBQUVrTCxLQUFLLEdBQzNCLE1BR0Z2SCxFQUFFd1AsS0FBS25ULEdBR1QsT0FBT0EsRUFBRTBiLE9BQU9vQixJQUlsQnRULEVBQUd4WixVQUFVNHVCLEtBQU8sU0FBZTdVLEdBQ2pDLE9BQU83VyxLQUFLMnFCLEtBQUs5VCxHQUFLcEcsRUFBRTRaLEtBQUt4VCxJQUcvQlAsRUFBR3haLFVBQVVrdUIsT0FBUyxXQUNwQixPQUErQixJQUFQLEVBQWhCaHJCLEtBQUthLE1BQU0sS0FHckJ5VixFQUFHeFosVUFBVXlhLE1BQVEsV0FDbkIsT0FBK0IsSUFBUCxFQUFoQnZYLEtBQUthLE1BQU0sS0FJckJ5VixFQUFHeFosVUFBVXdhLE1BQVEsU0FBZ0JULEdBQ25DLE9BQU83VyxLQUFLYSxNQUFNLEdBQUtnVyxHQUl6QlAsRUFBR3haLFVBQVU2dUIsTUFBUSxTQUFnQjdMLEdBQ25DOUosRUFBc0IsaUJBQVI4SixHQUNkLElBQUkxSixFQUFJMEosRUFBTSxHQUNWeUcsR0FBS3pHLEVBQU0xSixHQUFLLEdBQ2hCMEgsRUFBSSxHQUFLMUgsRUFHYixHQUFJcFcsS0FBS2xDLFFBQVV5b0IsRUFHakIsT0FGQXZtQixLQUFLMGMsUUFBUTZKLEVBQUksR0FDakJ2bUIsS0FBS2EsTUFBTTBsQixJQUFNekksRUFDVjlkLEtBS1QsSUFEQSxJQUFJd2EsRUFBUXNELEVBQ0hyYyxFQUFJOGtCLEVBQWEsSUFBVi9MLEdBQWUvWSxFQUFJekIsS0FBS2xDLE9BQVEyRCxJQUFLLENBQ25ELElBQUlxVixFQUFvQixFQUFoQjlXLEtBQUthLE1BQU1ZLEdBRW5CK1ksR0FEQTFELEdBQUswRCxLQUNTLEdBQ2QxRCxHQUFLLFNBQ0w5VyxLQUFLYSxNQUFNWSxHQUFLcVYsRUFNbEIsT0FKYyxJQUFWMEQsSUFDRnhhLEtBQUthLE1BQU1ZLEdBQUsrWSxFQUNoQnhhLEtBQUtsQyxVQUVBa0MsTUFHVHNXLEVBQUd4WixVQUFVd2dCLE9BQVMsV0FDcEIsT0FBdUIsSUFBaEJ0ZCxLQUFLbEMsUUFBa0MsSUFBbEJrQyxLQUFLYSxNQUFNLElBR3pDeVYsRUFBR3haLFVBQVVrYixLQUFPLFNBQWVuQixHQUNqQyxJQU9JekgsRUFQQWlNLEVBQVd4RSxFQUFNLEVBRXJCLEdBQXNCLElBQWxCN1csS0FBS3FiLFdBQW1CQSxFQUFVLE9BQVEsRUFDOUMsR0FBc0IsSUFBbEJyYixLQUFLcWIsVUFBa0JBLEVBQVUsT0FBTyxFQUs1QyxHQUhBcmIsS0FBS2tjLFFBR0RsYyxLQUFLbEMsT0FBUyxFQUNoQnNSLEVBQU0sTUFDRCxDQUNEaU0sSUFDRnhFLEdBQU9BLEdBR1RiLEVBQU9hLEdBQU8sU0FBVyxxQkFFekIsSUFBSUMsRUFBb0IsRUFBaEI5VyxLQUFLYSxNQUFNLEdBQ25CdU8sRUFBTTBILElBQU1ELEVBQU0sRUFBSUMsRUFBSUQsR0FBTyxFQUFJLEVBRXZDLE9BQXNCLElBQWxCN1csS0FBS3FiLFNBQThCLEdBQU5qTSxFQUMxQkEsR0FPVGtILEVBQUd4WixVQUFVK2UsSUFBTSxTQUFjaEYsR0FDL0IsR0FBc0IsSUFBbEI3VyxLQUFLcWIsVUFBbUMsSUFBakJ4RSxFQUFJd0UsU0FBZ0IsT0FBUSxFQUN2RCxHQUFzQixJQUFsQnJiLEtBQUtxYixVQUFtQyxJQUFqQnhFLEVBQUl3RSxTQUFnQixPQUFPLEVBRXRELElBQUlqTSxFQUFNcFAsS0FBSzRyQixLQUFLL1UsR0FDcEIsT0FBc0IsSUFBbEI3VyxLQUFLcWIsU0FBOEIsR0FBTmpNLEVBQzFCQSxHQUlUa0gsRUFBR3haLFVBQVU4dUIsS0FBTyxTQUFlL1UsR0FFakMsR0FBSTdXLEtBQUtsQyxPQUFTK1ksRUFBSS9ZLE9BQVEsT0FBTyxFQUNyQyxHQUFJa0MsS0FBS2xDLE9BQVMrWSxFQUFJL1ksT0FBUSxPQUFRLEVBR3RDLElBREEsSUFBSXNSLEVBQU0sRUFDRDNOLEVBQUl6QixLQUFLbEMsT0FBUyxFQUFHMkQsR0FBSyxFQUFHQSxJQUFLLENBQ3pDLElBQUlnUCxFQUFvQixFQUFoQnpRLEtBQUthLE1BQU1ZLEdBQ2ZxTCxFQUFtQixFQUFmK0osRUFBSWhXLE1BQU1ZLEdBRWxCLEdBQUlnUCxJQUFNM0QsRUFBVixDQUNJMkQsRUFBSTNELEVBQ05zQyxHQUFPLEVBQ0VxQixFQUFJM0QsSUFDYnNDLEVBQU0sR0FFUixPQUVGLE9BQU9BLEdBR1RrSCxFQUFHeFosVUFBVSt1QixJQUFNLFNBQWNoVixHQUMvQixPQUEwQixJQUFuQjdXLEtBQUtnWSxLQUFLbkIsSUFHbkJQLEVBQUd4WixVQUFVZ3ZCLEdBQUssU0FBYWpWLEdBQzdCLE9BQXlCLElBQWxCN1csS0FBSzZiLElBQUloRixJQUdsQlAsRUFBR3haLFVBQVVpdkIsS0FBTyxTQUFlbFYsR0FDakMsT0FBTzdXLEtBQUtnWSxLQUFLbkIsSUFBUSxHQUczQlAsRUFBR3haLFVBQVVrdkIsSUFBTSxTQUFjblYsR0FDL0IsT0FBTzdXLEtBQUs2YixJQUFJaEYsSUFBUSxHQUcxQlAsRUFBR3haLFVBQVVtdkIsSUFBTSxTQUFjcFYsR0FDL0IsT0FBMkIsSUFBcEI3VyxLQUFLZ1ksS0FBS25CLElBR25CUCxFQUFHeFosVUFBVW92QixHQUFLLFNBQWFyVixHQUM3QixPQUEwQixJQUFuQjdXLEtBQUs2YixJQUFJaEYsSUFHbEJQLEVBQUd4WixVQUFVcXZCLEtBQU8sU0FBZXRWLEdBQ2pDLE9BQU83VyxLQUFLZ1ksS0FBS25CLElBQVEsR0FHM0JQLEVBQUd4WixVQUFVc3ZCLElBQU0sU0FBY3ZWLEdBQy9CLE9BQU83VyxLQUFLNmIsSUFBSWhGLElBQVEsR0FHMUJQLEVBQUd4WixVQUFVdXZCLElBQU0sU0FBY3hWLEdBQy9CLE9BQTBCLElBQW5CN1csS0FBS2dZLEtBQUtuQixJQUduQlAsRUFBR3haLFVBQVV3dkIsR0FBSyxTQUFhelYsR0FDN0IsT0FBeUIsSUFBbEI3VyxLQUFLNmIsSUFBSWhGLElBT2xCUCxFQUFHZ0YsSUFBTSxTQUFjekUsR0FDckIsT0FBTyxJQUFJMFYsRUFBSTFWLElBR2pCUCxFQUFHeFosVUFBVTB2QixNQUFRLFNBQWdCQyxHQUduQyxPQUZBelcsR0FBUWhXLEtBQUtzYixJQUFLLHlDQUNsQnRGLEVBQXlCLElBQWxCaFcsS0FBS3FiLFNBQWdCLGlDQUNyQm9SLEVBQUlDLFVBQVUxc0IsTUFBTTJzQixVQUFVRixJQUd2Q25XLEVBQUd4WixVQUFVOHZCLFFBQVUsV0FFckIsT0FEQTVXLEVBQU9oVyxLQUFLc2IsSUFBSyx3REFDVnRiLEtBQUtzYixJQUFJdVIsWUFBWTdzQixPQUc5QnNXLEVBQUd4WixVQUFVNnZCLFVBQVksU0FBb0JGLEdBRTNDLE9BREF6c0IsS0FBS3NiLElBQU1tUixFQUNKenNCLE1BR1RzVyxFQUFHeFosVUFBVWd3QixTQUFXLFNBQW1CTCxHQUV6QyxPQURBelcsR0FBUWhXLEtBQUtzYixJQUFLLHlDQUNYdGIsS0FBSzJzQixVQUFVRixJQUd4Qm5XLEVBQUd4WixVQUFVaXdCLE9BQVMsU0FBaUJsVyxHQUVyQyxPQURBYixFQUFPaFcsS0FBS3NiLElBQUssc0NBQ1Z0YixLQUFLc2IsSUFBSTRFLElBQUlsZ0IsS0FBTTZXLElBRzVCUCxFQUFHeFosVUFBVWt3QixRQUFVLFNBQWtCblcsR0FFdkMsT0FEQWIsRUFBT2hXLEtBQUtzYixJQUFLLHVDQUNWdGIsS0FBS3NiLElBQUkwRSxLQUFLaGdCLEtBQU02VyxJQUc3QlAsRUFBR3haLFVBQVVtd0IsT0FBUyxTQUFpQnBXLEdBRXJDLE9BREFiLEVBQU9oVyxLQUFLc2IsSUFBSyxzQ0FDVnRiLEtBQUtzYixJQUFJNUcsSUFBSTFVLEtBQU02VyxJQUc1QlAsRUFBR3haLFVBQVVvd0IsUUFBVSxTQUFrQnJXLEdBRXZDLE9BREFiLEVBQU9oVyxLQUFLc2IsSUFBSyx1Q0FDVnRiLEtBQUtzYixJQUFJMkUsS0FBS2pnQixLQUFNNlcsSUFHN0JQLEVBQUd4WixVQUFVcXdCLE9BQVMsU0FBaUJ0VyxHQUVyQyxPQURBYixFQUFPaFcsS0FBS3NiLElBQUssc0NBQ1Z0YixLQUFLc2IsSUFBSThSLElBQUlwdEIsS0FBTTZXLElBRzVCUCxFQUFHeFosVUFBVXV3QixPQUFTLFNBQWlCeFcsR0FHckMsT0FGQWIsRUFBT2hXLEtBQUtzYixJQUFLLHNDQUNqQnRiLEtBQUtzYixJQUFJZ1MsU0FBU3R0QixLQUFNNlcsR0FDakI3VyxLQUFLc2IsSUFBSXZJLElBQUkvUyxLQUFNNlcsSUFHNUJQLEVBQUd4WixVQUFVeXdCLFFBQVUsU0FBa0IxVyxHQUd2QyxPQUZBYixFQUFPaFcsS0FBS3NiLElBQUssc0NBQ2pCdGIsS0FBS3NiLElBQUlnUyxTQUFTdHRCLEtBQU02VyxHQUNqQjdXLEtBQUtzYixJQUFJNkksS0FBS25rQixLQUFNNlcsSUFHN0JQLEVBQUd4WixVQUFVMHdCLE9BQVMsV0FHcEIsT0FGQXhYLEVBQU9oVyxLQUFLc2IsSUFBSyxzQ0FDakJ0YixLQUFLc2IsSUFBSW1TLFNBQVN6dEIsTUFDWEEsS0FBS3NiLElBQUkrTSxJQUFJcm9CLE9BR3RCc1csRUFBR3haLFVBQVU0d0IsUUFBVSxXQUdyQixPQUZBMVgsRUFBT2hXLEtBQUtzYixJQUFLLHVDQUNqQnRiLEtBQUtzYixJQUFJbVMsU0FBU3p0QixNQUNYQSxLQUFLc2IsSUFBSWdOLEtBQUt0b0IsT0FJdkJzVyxFQUFHeFosVUFBVTZ3QixRQUFVLFdBR3JCLE9BRkEzWCxFQUFPaFcsS0FBS3NiLElBQUssdUNBQ2pCdGIsS0FBS3NiLElBQUltUyxTQUFTenRCLE1BQ1hBLEtBQUtzYixJQUFJc1MsS0FBSzV0QixPQUd2QnNXLEVBQUd4WixVQUFVK3dCLFFBQVUsV0FHckIsT0FGQTdYLEVBQU9oVyxLQUFLc2IsSUFBSyx1Q0FDakJ0YixLQUFLc2IsSUFBSW1TLFNBQVN6dEIsTUFDWEEsS0FBS3NiLElBQUlvUSxLQUFLMXJCLE9BSXZCc1csRUFBR3haLFVBQVVneEIsT0FBUyxXQUdwQixPQUZBOVgsRUFBT2hXLEtBQUtzYixJQUFLLHNDQUNqQnRiLEtBQUtzYixJQUFJbVMsU0FBU3p0QixNQUNYQSxLQUFLc2IsSUFBSXdELElBQUk5ZSxPQUd0QnNXLEVBQUd4WixVQUFVaXhCLE9BQVMsU0FBaUJsWCxHQUdyQyxPQUZBYixFQUFPaFcsS0FBS3NiLE1BQVF6RSxFQUFJeUUsSUFBSyxxQkFDN0J0YixLQUFLc2IsSUFBSW1TLFNBQVN6dEIsTUFDWEEsS0FBS3NiLElBQUloSSxJQUFJdFQsS0FBTTZXLElBSTVCLElBQUltWCxFQUFTLENBQ1hDLEtBQU0sS0FDTkMsS0FBTSxLQUNOQyxLQUFNLEtBQ05DLE9BQVEsTUFJVixTQUFTQyxFQUFROVYsRUFBTVMsR0FFckJoWixLQUFLdVksS0FBT0EsRUFDWnZZLEtBQUtnWixFQUFJLElBQUkxQyxFQUFHMEMsRUFBRyxJQUNuQmhaLEtBQUsrTSxFQUFJL00sS0FBS2daLEVBQUUvQixZQUNoQmpYLEtBQUttWCxFQUFJLElBQUliLEVBQUcsR0FBR2tTLE9BQU94b0IsS0FBSytNLEdBQUdrVCxLQUFLamdCLEtBQUtnWixHQUU1Q2haLEtBQUtzdUIsSUFBTXR1QixLQUFLdXVCLE9BaURsQixTQUFTQyxJQUNQSCxFQUFPenNCLEtBQ0w1QixLQUNBLE9BQ0EsMkVBK0RKLFNBQVN5dUIsSUFDUEosRUFBT3pzQixLQUNMNUIsS0FDQSxPQUNBLGtFQUlKLFNBQVMwdUIsSUFDUEwsRUFBT3pzQixLQUNMNUIsS0FDQSxPQUNBLHlEQUlKLFNBQVMydUIsSUFFUE4sRUFBT3pzQixLQUNMNUIsS0FDQSxRQUNBLHVFQThDSixTQUFTdXNCLEVBQUt2ZixHQUNaLEdBQWlCLGlCQUFOQSxFQUFnQixDQUN6QixJQUFJNGhCLEVBQVF0WSxFQUFHdVksT0FBTzdoQixHQUN0QmhOLEtBQUtnTixFQUFJNGhCLEVBQU01VixFQUNmaFosS0FBSzR1QixNQUFRQSxPQUViNVksRUFBT2hKLEVBQUU2ZSxJQUFJLEdBQUksa0NBQ2pCN3JCLEtBQUtnTixFQUFJQSxFQUNUaE4sS0FBSzR1QixNQUFRLEtBa09qQixTQUFTRSxFQUFNOWhCLEdBQ2J1ZixFQUFJM3FCLEtBQUs1QixLQUFNZ04sR0FFZmhOLEtBQUs0cEIsTUFBUTVwQixLQUFLZ04sRUFBRWlLLFlBQ2hCalgsS0FBSzRwQixNQUFRLElBQU8sSUFDdEI1cEIsS0FBSzRwQixPQUFTLEdBQU01cEIsS0FBSzRwQixNQUFRLElBR25DNXBCLEtBQUtvVyxFQUFJLElBQUlFLEVBQUcsR0FBR2tTLE9BQU94b0IsS0FBSzRwQixPQUMvQjVwQixLQUFLeXFCLEdBQUt6cUIsS0FBSyt1QixLQUFLL3VCLEtBQUtvVyxFQUFFaVMsT0FDM0Jyb0IsS0FBS2d2QixLQUFPaHZCLEtBQUtvVyxFQUFFa1YsT0FBT3RyQixLQUFLZ04sR0FFL0JoTixLQUFLaXZCLEtBQU9qdkIsS0FBS2d2QixLQUFLamMsSUFBSS9TLEtBQUtvVyxHQUFHb0IsTUFBTSxHQUFHeVMsSUFBSWpxQixLQUFLZ04sR0FDcERoTixLQUFLaXZCLEtBQU9qdkIsS0FBS2l2QixLQUFLNUUsS0FBS3JxQixLQUFLb1csR0FDaENwVyxLQUFLaXZCLEtBQU9qdkIsS0FBS29XLEVBQUUxQixJQUFJMVUsS0FBS2l2QixNQTVhOUJaLEVBQU92eEIsVUFBVXl4QixLQUFPLFdBQ3RCLElBQUlELEVBQU0sSUFBSWhZLEVBQUcsTUFFakIsT0FEQWdZLEVBQUl6dEIsTUFBUSxJQUFJK1EsTUFBTWpULEtBQUtnRCxLQUFLM0IsS0FBSytNLEVBQUksS0FDbEN1aEIsR0FHVEQsRUFBT3Z4QixVQUFVb3lCLFFBQVUsU0FBa0JyWSxHQUczQyxJQUNJc1ksRUFEQS9ZLEVBQUlTLEVBR1IsR0FDRTdXLEtBQUtvdkIsTUFBTWhaLEVBQUdwVyxLQUFLc3VCLEtBR25CYSxHQURBL1ksR0FEQUEsRUFBSXBXLEtBQUtxdkIsTUFBTWpaLElBQ1Q0SixLQUFLaGdCLEtBQUtzdUIsTUFDUHJYLGtCQUNGa1ksRUFBT252QixLQUFLK00sR0FFckIsSUFBSThPLEVBQU1zVCxFQUFPbnZCLEtBQUsrTSxHQUFLLEVBQUlxSixFQUFFd1YsS0FBSzVyQixLQUFLZ1osR0FnQjNDLE9BZlksSUFBUjZDLEdBQ0Z6RixFQUFFdlYsTUFBTSxHQUFLLEVBQ2J1VixFQUFFdFksT0FBUyxHQUNGK2QsRUFBTSxFQUNmekYsRUFBRTZKLEtBQUtqZ0IsS0FBS2daLFFBRUl4YSxJQUFaNFgsRUFBRThGLE1BRUo5RixFQUFFOEYsUUFHRjlGLEVBQUVrWixTQUlDbFosR0FHVGlZLEVBQU92eEIsVUFBVXN5QixNQUFRLFNBQWdCRyxFQUFPeGQsR0FDOUN3ZCxFQUFNOVgsT0FBT3pYLEtBQUsrTSxFQUFHLEVBQUdnRixJQUcxQnNjLEVBQU92eEIsVUFBVXV5QixNQUFRLFNBQWdCeFksR0FDdkMsT0FBT0EsRUFBSXNOLEtBQUtua0IsS0FBS21YLElBU3ZCd0IsRUFBUzZWLEVBQU1ILEdBRWZHLEVBQUsxeEIsVUFBVXN5QixNQUFRLFNBQWdCRyxFQUFPQyxHQUs1QyxJQUhBLElBRUlDLEVBQVM5d0IsS0FBSytGLElBQUk2cUIsRUFBTXp4QixPQUFRLEdBQzNCMkQsRUFBSSxFQUFHQSxFQUFJZ3VCLEVBQVFodUIsSUFDMUIrdEIsRUFBTzN1QixNQUFNWSxHQUFLOHRCLEVBQU0xdUIsTUFBTVksR0FJaEMsR0FGQSt0QixFQUFPMXhCLE9BQVMyeEIsRUFFWkYsRUFBTXp4QixRQUFVLEVBR2xCLE9BRkF5eEIsRUFBTTF1QixNQUFNLEdBQUssT0FDakIwdUIsRUFBTXp4QixPQUFTLEdBS2pCLElBQUk0eEIsRUFBT0gsRUFBTTF1QixNQUFNLEdBR3ZCLElBRkEydUIsRUFBTzN1QixNQUFNMnVCLEVBQU8xeEIsVUFoQlQsUUFnQnFCNHhCLEVBRTNCanVCLEVBQUksR0FBSUEsRUFBSTh0QixFQUFNenhCLE9BQVEyRCxJQUFLLENBQ2xDLElBQUlrdUIsRUFBd0IsRUFBakJKLEVBQU0xdUIsTUFBTVksR0FDdkI4dEIsRUFBTTF1QixNQUFNWSxFQUFJLEtBcEJQLFFBb0Jla3VCLElBQWdCLEVBQU1ELElBQVMsR0FDdkRBLEVBQU9DLEVBRVRELEtBQVUsR0FDVkgsRUFBTTF1QixNQUFNWSxFQUFJLElBQU1pdUIsRUFDVCxJQUFUQSxHQUFjSCxFQUFNenhCLE9BQVMsR0FDL0J5eEIsRUFBTXp4QixRQUFVLEdBRWhCeXhCLEVBQU16eEIsUUFBVSxHQUlwQjB3QixFQUFLMXhCLFVBQVV1eUIsTUFBUSxTQUFnQnhZLEdBRXJDQSxFQUFJaFcsTUFBTWdXLEVBQUkvWSxRQUFVLEVBQ3hCK1ksRUFBSWhXLE1BQU1nVyxFQUFJL1ksT0FBUyxHQUFLLEVBQzVCK1ksRUFBSS9ZLFFBQVUsRUFJZCxJQURBLElBQUltUixFQUFLLEVBQ0F4TixFQUFJLEVBQUdBLEVBQUlvVixFQUFJL1ksT0FBUTJELElBQUssQ0FDbkMsSUFBSXFWLEVBQW1CLEVBQWZELEVBQUloVyxNQUFNWSxHQUNsQndOLEdBQVUsSUFBSjZILEVBQ05ELEVBQUloVyxNQUFNWSxHQUFVLFNBQUx3TixFQUNmQSxFQUFTLEdBQUo2SCxHQUFhN0gsRUFBSyxTQUFhLEdBVXRDLE9BTmtDLElBQTlCNEgsRUFBSWhXLE1BQU1nVyxFQUFJL1ksT0FBUyxLQUN6QitZLEVBQUkvWSxTQUM4QixJQUE5QitZLEVBQUloVyxNQUFNZ1csRUFBSS9ZLE9BQVMsSUFDekIrWSxFQUFJL1ksVUFHRCtZLEdBU1Q4QixFQUFTOFYsRUFBTUosR0FRZjFWLEVBQVMrVixFQUFNTCxHQVNmMVYsRUFBU2dXLEVBQVFOLEdBRWpCTSxFQUFPN3hCLFVBQVV1eUIsTUFBUSxTQUFnQnhZLEdBR3ZDLElBREEsSUFBSTJELEVBQVEsRUFDSC9ZLEVBQUksRUFBR0EsRUFBSW9WLEVBQUkvWSxPQUFRMkQsSUFBSyxDQUNuQyxJQUFJdU4sRUFBMEIsSUFBTCxFQUFmNkgsRUFBSWhXLE1BQU1ZLElBQWlCK1ksRUFDakN2TCxFQUFVLFNBQUxELEVBQ1RBLEtBQVEsR0FFUjZILEVBQUloVyxNQUFNWSxHQUFLd04sRUFDZnVMLEVBQVF4TCxFQUtWLE9BSGMsSUFBVndMLElBQ0YzRCxFQUFJaFcsTUFBTWdXLEVBQUkvWSxVQUFZMGMsR0FFckIzRCxHQUlUUCxFQUFHdVksT0FBUyxTQUFnQnRXLEdBRTFCLEdBQUl5VixFQUFPelYsR0FBTyxPQUFPeVYsRUFBT3pWLEdBRWhDLElBQUlxVyxFQUNKLEdBQWEsU0FBVHJXLEVBQ0ZxVyxFQUFRLElBQUlKLE9BQ1AsR0FBYSxTQUFUalcsRUFDVHFXLEVBQVEsSUFBSUgsT0FDUCxHQUFhLFNBQVRsVyxFQUNUcVcsRUFBUSxJQUFJRixNQUNQLElBQWEsV0FBVG5XLEVBR1QsTUFBTSxJQUFJalosTUFBTSxpQkFBbUJpWixHQUZuQ3FXLEVBQVEsSUFBSUQsRUFNZCxPQUZBWCxFQUFPelYsR0FBUXFXLEVBRVJBLEdBa0JUckMsRUFBSXp2QixVQUFVMndCLFNBQVcsU0FBbUJoZCxHQUMxQ3VGLEVBQXNCLElBQWZ2RixFQUFFNEssU0FBZ0IsaUNBQ3pCckYsRUFBT3ZGLEVBQUU2SyxJQUFLLG9DQUdoQmlSLEVBQUl6dkIsVUFBVXd3QixTQUFXLFNBQW1CN2MsRUFBRzNELEdBQzdDa0osRUFBcUMsSUFBN0J2RixFQUFFNEssU0FBV3ZPLEVBQUV1TyxVQUFpQixpQ0FDeENyRixFQUFPdkYsRUFBRTZLLEtBQU83SyxFQUFFNkssTUFBUXhPLEVBQUV3TyxJQUMxQixvQ0FHSmlSLEVBQUl6dkIsVUFBVWl5QixLQUFPLFNBQWV0ZSxHQUNsQyxPQUFJelEsS0FBSzR1QixNQUFjNXVCLEtBQUs0dUIsTUFBTU0sUUFBUXplLEdBQUdrYyxVQUFVM3NCLE1BQ2hEeVEsRUFBRTRaLEtBQUtycUIsS0FBS2dOLEdBQUcyZixVQUFVM3NCLE9BR2xDdXNCLEVBQUl6dkIsVUFBVWdpQixJQUFNLFNBQWNyTyxHQUNoQyxPQUFJQSxFQUFFNk0sU0FDRzdNLEVBQUU5UCxRQUdKWCxLQUFLZ04sRUFBRTBILElBQUlqRSxHQUFHa2MsVUFBVTNzQixPQUdqQ3VzQixFQUFJenZCLFVBQVVvakIsSUFBTSxTQUFjelAsRUFBRzNELEdBQ25DOU0sS0FBS3N0QixTQUFTN2MsRUFBRzNELEdBRWpCLElBQUlzQyxFQUFNcUIsRUFBRXlQLElBQUlwVCxHQUloQixPQUhJc0MsRUFBSXlNLElBQUk3YixLQUFLZ04sSUFBTSxHQUNyQm9DLEVBQUk2USxLQUFLamdCLEtBQUtnTixHQUVUb0MsRUFBSXVkLFVBQVUzc0IsT0FHdkJ1c0IsRUFBSXp2QixVQUFVa2pCLEtBQU8sU0FBZXZQLEVBQUczRCxHQUNyQzlNLEtBQUtzdEIsU0FBUzdjLEVBQUczRCxHQUVqQixJQUFJc0MsRUFBTXFCLEVBQUV1UCxLQUFLbFQsR0FJakIsT0FISXNDLEVBQUl5TSxJQUFJN2IsS0FBS2dOLElBQU0sR0FDckJvQyxFQUFJNlEsS0FBS2pnQixLQUFLZ04sR0FFVG9DLEdBR1RtZCxFQUFJenZCLFVBQVU0WCxJQUFNLFNBQWNqRSxFQUFHM0QsR0FDbkM5TSxLQUFLc3RCLFNBQVM3YyxFQUFHM0QsR0FFakIsSUFBSXNDLEVBQU1xQixFQUFFaUUsSUFBSTVILEdBSWhCLE9BSElzQyxFQUFJNEksS0FBSyxHQUFLLEdBQ2hCNUksRUFBSTRRLEtBQUtoZ0IsS0FBS2dOLEdBRVRvQyxFQUFJdWQsVUFBVTNzQixPQUd2QnVzQixFQUFJenZCLFVBQVVtakIsS0FBTyxTQUFleFAsRUFBRzNELEdBQ3JDOU0sS0FBS3N0QixTQUFTN2MsRUFBRzNELEdBRWpCLElBQUlzQyxFQUFNcUIsRUFBRXdQLEtBQUtuVCxHQUlqQixPQUhJc0MsRUFBSTRJLEtBQUssR0FBSyxHQUNoQjVJLEVBQUk0USxLQUFLaGdCLEtBQUtnTixHQUVUb0MsR0FHVG1kLEVBQUl6dkIsVUFBVXN3QixJQUFNLFNBQWMzYyxFQUFHb0csR0FFbkMsT0FEQTdXLEtBQUt5dEIsU0FBU2hkLEdBQ1B6USxLQUFLK3VCLEtBQUt0ZSxFQUFFMFksTUFBTXRTLEtBRzNCMFYsRUFBSXp2QixVQUFVcW5CLEtBQU8sU0FBZTFULEVBQUczRCxHQUVyQyxPQURBOU0sS0FBS3N0QixTQUFTN2MsRUFBRzNELEdBQ1Y5TSxLQUFLK3VCLEtBQUt0ZSxFQUFFMFQsS0FBS3JYLEtBRzFCeWYsRUFBSXp2QixVQUFVaVcsSUFBTSxTQUFjdEMsRUFBRzNELEdBRW5DLE9BREE5TSxLQUFLc3RCLFNBQVM3YyxFQUFHM0QsR0FDVjlNLEtBQUsrdUIsS0FBS3RlLEVBQUVzQyxJQUFJakcsS0FHekJ5ZixFQUFJenZCLFVBQVV3ckIsS0FBTyxTQUFlN1gsR0FDbEMsT0FBT3pRLEtBQUtta0IsS0FBSzFULEVBQUdBLEVBQUU5UCxVQUd4QjRyQixFQUFJenZCLFVBQVV1ckIsSUFBTSxTQUFjNVgsR0FDaEMsT0FBT3pRLEtBQUsrUyxJQUFJdEMsRUFBR0EsSUFHckI4YixFQUFJenZCLFVBQVU4d0IsS0FBTyxTQUFlbmQsR0FDbEMsR0FBSUEsRUFBRTZNLFNBQVUsT0FBTzdNLEVBQUU5UCxRQUV6QixJQUFJaXZCLEVBQU81dkIsS0FBS2dOLEVBQUVzSyxNQUFNLEdBSXhCLEdBSEF0QixFQUFPNFosRUFBTyxHQUFNLEdBR1AsSUFBVEEsRUFBWSxDQUNkLElBQUl0YyxFQUFNdFQsS0FBS2dOLEVBQUVrVCxJQUFJLElBQUk1SixFQUFHLElBQUltQixPQUFPLEdBQ3ZDLE9BQU96WCxLQUFLc1QsSUFBSTdDLEVBQUc2QyxHQVFyQixJQUZBLElBQUl3SyxFQUFJOWQsS0FBS2dOLEVBQUV5YyxLQUFLLEdBQ2hCbEQsRUFBSSxHQUNBekksRUFBRVIsVUFBMkIsSUFBZlEsRUFBRXhHLE1BQU0sSUFDNUJpUCxJQUNBekksRUFBRXJHLE9BQU8sR0FFWHpCLEdBQVE4SCxFQUFFUixVQUVWLElBQUl1UyxFQUFNLElBQUl2WixFQUFHLEdBQUdrVyxNQUFNeHNCLE1BQ3RCOHZCLEVBQU9ELEVBQUkvQixTQUlYaUMsRUFBTy92QixLQUFLZ04sRUFBRXljLEtBQUssR0FBR2hTLE9BQU8sR0FDN0JMLEVBQUlwWCxLQUFLZ04sRUFBRWlLLFlBR2YsSUFGQUcsRUFBSSxJQUFJZCxFQUFHLEVBQUljLEVBQUlBLEdBQUdvVixNQUFNeHNCLE1BRVcsSUFBaENBLEtBQUtzVCxJQUFJOEQsRUFBRzJZLEdBQU1sVSxJQUFJaVUsSUFDM0IxWSxFQUFFNFYsUUFBUThDLEdBT1osSUFKQSxJQUFJL2dCLEVBQUkvTyxLQUFLc1QsSUFBSThELEVBQUcwRyxHQUNoQjFILEVBQUlwVyxLQUFLc1QsSUFBSTdDLEVBQUdxTixFQUFFMEwsS0FBSyxHQUFHL1IsT0FBTyxJQUNqQ3dHLEVBQUlqZSxLQUFLc1QsSUFBSTdDLEVBQUdxTixHQUNoQjlRLEVBQUl1WixFQUNjLElBQWZ0SSxFQUFFcEMsSUFBSWdVLElBQVksQ0FFdkIsSUFEQSxJQUFJdkIsRUFBTXJRLEVBQ0R4YyxFQUFJLEVBQW9CLElBQWpCNnNCLEVBQUl6UyxJQUFJZ1UsR0FBWXB1QixJQUNsQzZzQixFQUFNQSxFQUFJZCxTQUVaeFgsRUFBT3ZVLEVBQUl1TCxHQUNYLElBQUlGLEVBQUk5TSxLQUFLc1QsSUFBSXZFLEVBQUcsSUFBSXVILEVBQUcsR0FBR2tTLE9BQU94YixFQUFJdkwsRUFBSSxJQUU3QzJVLEVBQUlBLEVBQUVpWCxPQUFPdmdCLEdBQ2JpQyxFQUFJakMsRUFBRTBnQixTQUNOdlAsRUFBSUEsRUFBRW9QLE9BQU90ZSxHQUNiL0IsRUFBSXZMLEVBR04sT0FBTzJVLEdBR1RtVyxFQUFJenZCLFVBQVU0dUIsS0FBTyxTQUFlamIsR0FDbEMsSUFBSXVmLEVBQU12ZixFQUFFNmEsT0FBT3RyQixLQUFLZ04sR0FDeEIsT0FBcUIsSUFBakJnakIsRUFBSTNVLFVBQ04yVSxFQUFJM1UsU0FBVyxFQUNScmIsS0FBSyt1QixLQUFLaUIsR0FBS2xDLFVBRWY5dEIsS0FBSyt1QixLQUFLaUIsSUFJckJ6RCxFQUFJenZCLFVBQVV3VyxJQUFNLFNBQWM3QyxFQUFHb0csR0FDbkMsR0FBSUEsRUFBSXlHLFNBQVUsT0FBTyxJQUFJaEgsRUFBRyxHQUFHa1csTUFBTXhzQixNQUN6QyxHQUFvQixJQUFoQjZXLEVBQUltQixLQUFLLEdBQVUsT0FBT3ZILEVBQUU5UCxRQUVoQyxJQUNJc3ZCLEVBQU0sSUFBSXJlLE1BQU0sSUFDcEJxZSxFQUFJLEdBQUssSUFBSTNaLEVBQUcsR0FBR2tXLE1BQU14c0IsTUFDekJpd0IsRUFBSSxHQUFLeGYsRUFDVCxJQUFLLElBQUloUCxFQUFJLEVBQUdBLEVBQUl3dUIsRUFBSW55QixPQUFRMkQsSUFDOUJ3dUIsRUFBSXh1QixHQUFLekIsS0FBSytTLElBQUlrZCxFQUFJeHVCLEVBQUksR0FBSWdQLEdBR2hDLElBQUlyQixFQUFNNmdCLEVBQUksR0FDVkMsRUFBVSxFQUNWQyxFQUFhLEVBQ2I5akIsRUFBUXdLLEVBQUlJLFlBQWMsR0FLOUIsSUFKYyxJQUFWNUssSUFDRkEsRUFBUSxJQUdMNUssRUFBSW9WLEVBQUkvWSxPQUFTLEVBQUcyRCxHQUFLLEVBQUdBLElBQUssQ0FFcEMsSUFEQSxJQUFJcVgsRUFBT2pDLEVBQUloVyxNQUFNWSxHQUNac00sRUFBSTFCLEVBQVEsRUFBRzBCLEdBQUssRUFBR0EsSUFBSyxDQUNuQyxJQUFJK1IsRUFBT2hILEdBQVEvSyxFQUFLLEVBQ3BCcUIsSUFBUTZnQixFQUFJLEtBQ2Q3Z0IsRUFBTXBQLEtBQUtxb0IsSUFBSWpaLElBR0wsSUFBUjBRLEdBQXlCLElBQVpvUSxHQUtqQkEsSUFBWSxFQUNaQSxHQUFXcFEsR0E5QkUsTUErQmJxUSxHQUN3QyxJQUFOMXVCLEdBQWlCLElBQU5zTSxLQUU3Q3FCLEVBQU1wUCxLQUFLK1MsSUFBSTNELEVBQUs2Z0IsRUFBSUMsSUFDeEJDLEVBQWEsRUFDYkQsRUFBVSxJQVhSQyxFQUFhLEVBYWpCOWpCLEVBQVEsR0FHVixPQUFPK0MsR0FHVG1kLEVBQUl6dkIsVUFBVTR2QixVQUFZLFNBQW9CN1YsR0FDNUMsSUFBSVQsRUFBSVMsRUFBSXdULEtBQUtycUIsS0FBS2dOLEdBRXRCLE9BQU9vSixJQUFNUyxFQUFNVCxFQUFFelYsUUFBVXlWLEdBR2pDbVcsRUFBSXp2QixVQUFVK3ZCLFlBQWMsU0FBc0JoVyxHQUNoRCxJQUFJekgsRUFBTXlILEVBQUlsVyxRQUVkLE9BREF5TyxFQUFJa00sSUFBTSxLQUNIbE0sR0FPVGtILEVBQUc4WixLQUFPLFNBQWV2WixHQUN2QixPQUFPLElBQUlpWSxFQUFLalksSUFtQmxCOEIsRUFBU21XLEVBQU12QyxHQUVmdUMsRUFBS2h5QixVQUFVNHZCLFVBQVksU0FBb0I3VixHQUM3QyxPQUFPN1csS0FBSyt1QixLQUFLbFksRUFBSXNTLE1BQU1ucEIsS0FBSzRwQixTQUdsQ2tGLEVBQUtoeUIsVUFBVSt2QixZQUFjLFNBQXNCaFcsR0FDakQsSUFBSVQsRUFBSXBXLEtBQUsrdUIsS0FBS2xZLEVBQUk5RCxJQUFJL1MsS0FBS2d2QixPQUUvQixPQURBNVksRUFBRWtGLElBQU0sS0FDRGxGLEdBR1QwWSxFQUFLaHlCLFVBQVVxbkIsS0FBTyxTQUFlMVQsRUFBRzNELEdBQ3RDLEdBQUkyRCxFQUFFNk0sVUFBWXhRLEVBQUV3USxTQUdsQixPQUZBN00sRUFBRTVQLE1BQU0sR0FBSyxFQUNiNFAsRUFBRTNTLE9BQVMsRUFDSjJTLEVBR1QsSUFBSXdOLEVBQUl4TixFQUFFMFQsS0FBS3JYLEdBQ1hpQyxFQUFJa1AsRUFBRXNMLE1BQU12cEIsS0FBSzRwQixPQUFPN1csSUFBSS9TLEtBQUtpdkIsTUFBTTNGLE9BQU90cEIsS0FBSzRwQixPQUFPN1csSUFBSS9TLEtBQUtnTixHQUNuRXFqQixFQUFJcFMsRUFBRWdDLEtBQUtsUixHQUFHMEksT0FBT3pYLEtBQUs0cEIsT0FDMUJ4YSxFQUFNaWhCLEVBUVYsT0FOSUEsRUFBRXhVLElBQUk3YixLQUFLZ04sSUFBTSxFQUNuQm9DLEVBQU1paEIsRUFBRXBRLEtBQUtqZ0IsS0FBS2dOLEdBQ1RxakIsRUFBRXJZLEtBQUssR0FBSyxJQUNyQjVJLEVBQU1paEIsRUFBRXJRLEtBQUtoZ0IsS0FBS2dOLElBR2JvQyxFQUFJdWQsVUFBVTNzQixPQUd2Qjh1QixFQUFLaHlCLFVBQVVpVyxJQUFNLFNBQWN0QyxFQUFHM0QsR0FDcEMsR0FBSTJELEVBQUU2TSxVQUFZeFEsRUFBRXdRLFNBQVUsT0FBTyxJQUFJaEgsRUFBRyxHQUFHcVcsVUFBVTNzQixNQUV6RCxJQUFJaWUsRUFBSXhOLEVBQUVzQyxJQUFJakcsR0FDVmlDLEVBQUlrUCxFQUFFc0wsTUFBTXZwQixLQUFLNHBCLE9BQU83VyxJQUFJL1MsS0FBS2l2QixNQUFNM0YsT0FBT3RwQixLQUFLNHBCLE9BQU83VyxJQUFJL1MsS0FBS2dOLEdBQ25FcWpCLEVBQUlwUyxFQUFFZ0MsS0FBS2xSLEdBQUcwSSxPQUFPelgsS0FBSzRwQixPQUMxQnhhLEVBQU1paEIsRUFPVixPQU5JQSxFQUFFeFUsSUFBSTdiLEtBQUtnTixJQUFNLEVBQ25Cb0MsRUFBTWloQixFQUFFcFEsS0FBS2pnQixLQUFLZ04sR0FDVHFqQixFQUFFclksS0FBSyxHQUFLLElBQ3JCNUksRUFBTWloQixFQUFFclEsS0FBS2hnQixLQUFLZ04sSUFHYm9DLEVBQUl1ZCxVQUFVM3NCLE9BR3ZCOHVCLEVBQUtoeUIsVUFBVTR1QixLQUFPLFNBQWVqYixHQUduQyxPQURVelEsS0FBSyt1QixLQUFLdGUsRUFBRTZhLE9BQU90ckIsS0FBS2dOLEdBQUcrRixJQUFJL1MsS0FBS3lxQixLQUNuQ2tDLFVBQVUzc0IsT0F0Mkd6QixDQXcyR29DdkQsRUFBUXVELFEsbzFOQ3gyRzVDLGtCQUFTLEVBQVEsS0FFYjZ2RCxFQUFjLElBREEsRUFBUSxNQUV0QkQsRUFBYSxJQUFJdDVDLEVBQUcsSUFDcEI2NUMsRUFBUyxJQUFJNzVDLEVBQUcsSUFDaEIyNUMsRUFBTSxJQUFJMzVDLEVBQUcsSUFDYjQ1QyxFQUFRLElBQUk1NUMsRUFBRyxHQUNmb3lELEVBQVEsSUFBSXB5RCxFQUFHLEdBQ2YwWCxFQUFTLEVBQVEsS0FDakI1dUIsRUFBYyxFQUFRLElBRzFCLFNBQVN1cEUsRUFBYUMsRUFBSzFtRSxHQU16QixPQUxBQSxFQUFNQSxHQUFPLE9BQ1I1RSxFQUFPaU8sU0FBU3E5RCxLQUNuQkEsRUFBTSxJQUFJdHJFLEVBQU9zckUsRUFBSzFtRSxJQUV4QmxDLEtBQUs2b0UsS0FBTyxJQUFJdnlELEVBQUdzeUQsR0FDWjVvRSxLQUdULFNBQVM4b0UsRUFBY3B6QixFQUFNeHpDLEdBTTNCLE9BTEFBLEVBQU1BLEdBQU8sT0FDUjVFLEVBQU9pTyxTQUFTbXFDLEtBQ25CQSxFQUFPLElBQUlwNEMsRUFBT280QyxFQUFNeHpDLElBRTFCbEMsS0FBSytvRSxNQUFRLElBQUl6eUQsRUFBR28vQixHQUNiMTFDLEtBakJUdkQsRUFBT0MsUUFBVTJyRSxFQW9CakIsSUFBSVcsRUFBYSxHQXNEakIsU0FBU1gsRUFBR3o1QyxFQUFPMjVDLEVBQVdVLEdBQzVCanBFLEtBQUtrcEUsYUFBYVgsR0FDbEJ2b0UsS0FBS21wRSxRQUFVLElBQUk3eUQsRUFBR3NZLEdBQ3RCNXVCLEtBQUs2dUIsT0FBU3ZZLEVBQUc4WixLQUFLcHdCLEtBQUttcEUsU0FDM0JucEUsS0FBS29wRSxVQUFZeDZDLEVBQU05d0IsT0FDdkJrQyxLQUFLNm9FLFVBQU9ycUUsRUFDWndCLEtBQUsrb0UsV0FBUXZxRSxFQUNid0IsS0FBS3FwRSxnQkFBYTdxRSxFQUNkeXFFLEdBQ0ZqcEUsS0FBSzJvRSxhQUFlQSxFQUNwQjNvRSxLQUFLOG9FLGNBQWdCQSxHQUVyQjlvRSxLQUFLcXBFLFdBQWEsRUE0RHRCLFNBQVNDLEVBQWtCeHpCLEVBQUk1ekMsR0FDN0IsSUFBSTNELEVBQU0sSUFBSWpCLEVBQU93NEMsRUFBR3IvQixXQUN4QixPQUFLdlUsRUFHSTNELEVBQUltQyxTQUFTd0IsR0FGYjNELEVBNURYaEMsT0FBTytULGVBQWUrM0QsRUFBR3ZyRSxVQUFXLGNBQWUsQ0FDakRHLFlBQVksRUFDWjgxQixJQUFLLFdBSUgsTUFIK0IsaUJBQXBCL3lCLEtBQUtxcEUsYUFDZHJwRSxLQUFLcXBFLFdBeEVYLFNBQW9CejZDLEVBQU8yNUMsR0FDekIsSUFBSWpZLEVBQU1pWSxFQUFVN25FLFNBQVMsT0FDekI2b0UsRUFBTSxDQUFDalosRUFBSzFoQyxFQUFNbHVCLFNBQVMsS0FBSzJCLEtBQUssS0FDekMsR0FBSWtuRSxLQUFPUCxFQUNULE9BQU9BLEVBQVdPLEdBRXBCLElBeUJJL3pDLEVBekJBNEcsRUFBUSxFQUVaLEdBQUl4TixFQUFNNUQsV0FDUGdELEVBQU8waEMsY0FDUDFoQyxFQUFPMmhDLFdBQVcvZ0MsS0FDbEJpaEMsRUFBWTdVLEtBQUtwc0IsR0FjbEIsT0FaQXdOLEdBQVMsRUFLUEEsR0FIVSxPQUFSazBCLEdBQXdCLE9BQVJBLEVBR1QsRUFJQSxFQUVYMFksRUFBV08sR0FBT250QyxFQUNYQSxFQU9ULE9BTEt5ekIsRUFBWTdVLEtBQUtwc0IsRUFBTXhGLEtBQUssTUFFL0JnVCxHQUFTLEdBR0hrMEIsR0FDTixJQUFLLEtBQ0MxaEMsRUFBTXZYLElBQUl1NEMsR0FBWS96QyxJQUFJczBDLEtBRTVCL3pCLEdBQVMsR0FFWCxNQUNGLElBQUssTUFDSDVHLEVBQU01RyxFQUFNdlgsSUFBSTQ0QyxJQUNScDBDLElBQUlxMEMsSUFBVTE2QixFQUFJM1osSUFBSTZzRCxLQUU1QnRzQyxHQUFTLEdBRVgsTUFDRixRQUNFQSxHQUFTLEVBR2IsT0FEQTRzQyxFQUFXTyxHQUFPbnRDLEVBQ1hBLEVBc0Jlb3RDLENBQVd4cEUsS0FBS21wRSxRQUFTbnBFLEtBQUt5cEUsUUFFM0N6cEUsS0FBS3FwRSxjQUdoQmhCLEVBQUd2ckUsVUFBVTRzRSxhQUFlLFdBSzFCLE9BSksxcEUsS0FBSytvRSxRQUNSL29FLEtBQUsrb0UsTUFBUSxJQUFJenlELEVBQUdsWCxFQUFZWSxLQUFLb3BFLGFBRXZDcHBFLEtBQUs2b0UsS0FBTzdvRSxLQUFLMnBFLEtBQUtuOUMsTUFBTXhzQixLQUFLNnVCLFFBQVFkLE9BQU8vdEIsS0FBSytvRSxPQUFPbjhDLFVBQ3JENXNCLEtBQUs0cEUsZ0JBR2R2QixFQUFHdnJFLFVBQVUrc0UsY0FBZ0IsU0FBVUMsR0FHckMsSUFBSUMsR0FESkQsR0FEQUEsRUFBUSxJQUFJeHpELEVBQUd3ekQsSUFDRHQ5QyxNQUFNeHNCLEtBQUs2dUIsU0FDTmQsT0FBTy90QixLQUFLK29FLE9BQU9uOEMsVUFDbEM3YSxFQUFNLElBQUl6VSxFQUFPeXNFLEVBQU90ekQsV0FDeEJtWSxFQUFRNXVCLEtBQUtncUUsV0FDakIsR0FBSWo0RCxFQUFJalUsT0FBUzh3QixFQUFNOXdCLE9BQVEsQ0FDN0IsSUFBSW1zRSxFQUFRLElBQUkzc0UsRUFBT3N4QixFQUFNOXdCLE9BQVNpVSxFQUFJalUsUUFDMUNtc0UsRUFBTTVyRSxLQUFLLEdBQ1gwVCxFQUFNelUsRUFBTzRELE9BQU8sQ0FBQytvRSxFQUFPbDRELElBRTlCLE9BQU9BLEdBR1RzMkQsRUFBR3ZyRSxVQUFVOHNFLGFBQWUsU0FBc0IxbkUsR0FDaEQsT0FBT29uRSxFQUFrQnRwRSxLQUFLNm9FLEtBQU0zbUUsSUFHdENtbUUsRUFBR3ZyRSxVQUFVb3RFLGNBQWdCLFNBQXVCaG9FLEdBQ2xELE9BQU9vbkUsRUFBa0J0cEUsS0FBSytvRSxNQUFPN21FLElBR3ZDbW1FLEVBQUd2ckUsVUFBVWt0RSxTQUFXLFNBQVU5bkUsR0FDaEMsT0FBT29uRSxFQUFrQnRwRSxLQUFLbXBFLFFBQVNqbkUsSUFHekNtbUUsRUFBR3ZyRSxVQUFVcXRFLGFBQWUsU0FBVWpvRSxHQUNwQyxPQUFPb25FLEVBQWtCdHBFLEtBQUsycEUsS0FBTXpuRSxJQUd0Q21tRSxFQUFHdnJFLFVBQVVvc0UsYUFBZSxTQUFVNVksRUFBS3B1RCxHQU96QyxPQU5BQSxFQUFNQSxHQUFPLE9BQ1I1RSxFQUFPaU8sU0FBUytrRCxLQUNuQkEsRUFBTSxJQUFJaHpELEVBQU9nekQsRUFBS3B1RCxJQUV4QmxDLEtBQUt5cEUsTUFBUW5aLEVBQ2J0d0QsS0FBSzJwRSxLQUFPLElBQUlyekQsRUFBR2c2QyxHQUNadHdELFEseUNDekpULElBQUkxQyxFQUFTLEVBQVEsSUFBZUEsT0FDaENvNkQsRUFBYSxFQUFRLElBQ3JCOXJCLEVBQVMsRUFBUSxLQUNqQmp6QixFQUFXLEVBQVEsSUFDbkJ1OUMsRUFBTyxFQUFRLEtBQ2ZrVSxFQUFTLEVBQVEsS0FFakJDLEVBQWEsRUFBUSxLQU16QixTQUFTM08sRUFBTS94RCxHQUNiaWlDLEVBQU96WixTQUFTdndCLEtBQUs1QixNQUVyQixJQUFJOEQsRUFBT3VtRSxFQUFXMWdFLEdBQ3RCLElBQUs3RixFQUFNLE1BQU0sSUFBSXhFLE1BQU0sMEJBRTNCVSxLQUFLc3FFLFVBQVl4bUUsRUFBSzZ4QixLQUN0QjMxQixLQUFLNDFCLE1BQVE4aEMsRUFBVzV6RCxFQUFLNnhCLE1BQzdCMzFCLEtBQUt1cUUsS0FBT3ptRSxFQUFLcXhELEdBQ2pCbjFELEtBQUt3cUUsVUFBWTFtRSxFQUFLb3lELEtBd0J4QixTQUFTMEYsRUFBUWp5RCxHQUNmaWlDLEVBQU96WixTQUFTdndCLEtBQUs1QixNQUVyQixJQUFJOEQsRUFBT3VtRSxFQUFXMWdFLEdBQ3RCLElBQUs3RixFQUFNLE1BQU0sSUFBSXhFLE1BQU0sMEJBRTNCVSxLQUFLNDFCLE1BQVE4aEMsRUFBVzV6RCxFQUFLNnhCLE1BQzdCMzFCLEtBQUt1cUUsS0FBT3ptRSxFQUFLcXhELEdBQ2pCbjFELEtBQUt3cUUsVUFBWTFtRSxFQUFLb3lELEtBd0J4QixTQUFTdUYsRUFBWTl4RCxHQUNuQixPQUFPLElBQUkreEQsRUFBSy94RCxHQUdsQixTQUFTZ3lELEVBQWNoeUQsR0FDckIsT0FBTyxJQUFJaXlELEVBQU9qeUQsR0EzRXBCcE4sT0FBT3cxQixLQUFLczRDLEdBQVlycEMsU0FBUSxTQUFVdGpDLEdBQ3hDMnNFLEVBQVczc0UsR0FBS3kzRCxHQUFLNzNELEVBQU9TLEtBQUtzc0UsRUFBVzNzRSxHQUFLeTNELEdBQUksT0FDckRrVixFQUFXM3NFLEVBQUl5TyxlQUFpQmsrRCxFQUFXM3NFLE1BYzdDaWIsRUFBUytpRCxFQUFNOXZCLEVBQU96WixVQUV0QnVwQyxFQUFLNStELFVBQVUwMEMsT0FBUyxTQUFpQjF0QyxFQUFNOGpCLEVBQUcrSixHQUNoRDN4QixLQUFLNDFCLE1BQU0xd0IsT0FBT3BCLEdBQ2xCNnRCLEtBR0YrcEMsRUFBSzUrRCxVQUFVb0ksT0FBUyxTQUFpQnBCLEVBQU01QixHQUk3QyxNQUhvQixpQkFBVDRCLElBQW1CQSxFQUFPeEcsRUFBT1MsS0FBSytGLEVBQU01QixJQUV2RGxDLEtBQUs0MUIsTUFBTTF3QixPQUFPcEIsR0FDWDlELE1BR1QwN0QsRUFBSzUrRCxVQUFVbzVELEtBQU8sU0FBcUJ4NEQsRUFBS3dFLEdBQzlDbEMsS0FBS3NNLE1BQ0wsSUFBSXFwQixFQUFPMzFCLEtBQUs0MUIsTUFBTUwsU0FDbEJrMUMsRUFBTXZVLEVBQUt2Z0MsRUFBTWo0QixFQUFLc0MsS0FBS3NxRSxVQUFXdHFFLEtBQUt3cUUsVUFBV3hxRSxLQUFLdXFFLE1BRS9ELE9BQU9yb0UsRUFBTXVvRSxFQUFJL3BFLFNBQVN3QixHQUFPdW9FLEdBYW5DOXhELEVBQVNpakQsRUFBUWh3QixFQUFPelosVUFFeEJ5cEMsRUFBTzkrRCxVQUFVMDBDLE9BQVMsU0FBaUIxdEMsRUFBTThqQixFQUFHK0osR0FDbEQzeEIsS0FBSzQxQixNQUFNMXdCLE9BQU9wQixHQUNsQjZ0QixLQUdGaXFDLEVBQU85K0QsVUFBVW9JLE9BQVMsU0FBaUJwQixFQUFNNUIsR0FJL0MsTUFIb0IsaUJBQVQ0QixJQUFtQkEsRUFBT3hHLEVBQU9TLEtBQUsrRixFQUFNNUIsSUFFdkRsQyxLQUFLNDFCLE1BQU0xd0IsT0FBT3BCLEdBQ1g5RCxNQUdUNDdELEVBQU85K0QsVUFBVXN0RSxPQUFTLFNBQXVCMXNFLEVBQUsrc0UsRUFBS3ZvRSxHQUN0QyxpQkFBUnVvRSxJQUFrQkEsRUFBTW50RSxFQUFPUyxLQUFLMHNFLEVBQUt2b0UsSUFFcERsQyxLQUFLc00sTUFDTCxJQUFJcXBCLEVBQU8zMUIsS0FBSzQxQixNQUFNTCxTQUN0QixPQUFPNjBDLEVBQU9LLEVBQUs5MEMsRUFBTWo0QixFQUFLc0MsS0FBS3dxRSxVQUFXeHFFLEtBQUt1cUUsT0FXckQ5dEUsRUFBT0MsUUFBVSxDQUNmZy9ELEtBQU1ELEVBQ05HLE9BQVFELEVBQ1JGLFdBQVlBLEVBQ1pFLGFBQWNBLEksZ0JDekZoQixJQUFJcitELEVBQVMsRUFBUSxJQUFlQSxPQUNoQ3k5RCxFQUFhLEVBQVEsS0FDckJ0bEIsRUFBTSxFQUFRLEtBQ2RpMUIsRUFBSyxFQUFRLEtBQVkzekIsR0FDekJ6Z0MsRUFBSyxFQUFRLEtBQ2IweEIsRUFBWSxFQUFRLElBQ3BCOE8sRUFBUyxFQUFRLEtBeUVyQixTQUFTNnpCLEVBQVFqNkQsRUFBR29OLEVBQUc2WCxFQUFNaHdCLEdBRTNCLElBREErSyxFQUFJcFQsRUFBT1MsS0FBSzJTLEVBQUUrRixZQUNaM1ksT0FBU2dnQixFQUFFL1MsYUFBYyxDQUM3QixJQUFJNlIsRUFBUXRmLEVBQU9VLE1BQU04ZixFQUFFL1MsYUFBZTJGLEVBQUU1UyxRQUM1QzRTLEVBQUlwVCxFQUFPNEQsT0FBTyxDQUFDMGIsRUFBT2xNLElBRTVCLElBQUlrNkQsRUFBT2oxQyxFQUFLNzNCLE9BQ1orc0UsRUFrQk4sU0FBc0I5ekQsRUFBTStHLEdBRTFCL0csR0FEQUEsRUFBTyt6RCxFQUFTL3pELEVBQU0rRyxJQUNWekcsSUFBSXlHLEdBQ2hCLElBQUkvTCxFQUFNelUsRUFBT1MsS0FBS2daLEVBQUtOLFdBQzNCLEdBQUkxRSxFQUFJalUsT0FBU2dnQixFQUFFL1MsYUFBYyxDQUMvQixJQUFJNlIsRUFBUXRmLEVBQU9VLE1BQU04ZixFQUFFL1MsYUFBZWdILEVBQUlqVSxRQUM5Q2lVLEVBQU16VSxFQUFPNEQsT0FBTyxDQUFDMGIsRUFBTzdLLElBRTlCLE9BQU9BLEVBMUJLZzVELENBQVlwMUMsRUFBTTdYLEdBQzFCc1UsRUFBSTkwQixFQUFPVSxNQUFNNHNFLEdBQ3JCeDRDLEVBQUUvekIsS0FBSyxHQUNQLElBQUk4WSxFQUFJN1osRUFBT1UsTUFBTTRzRSxHQUtyQixPQUpBenpELEVBQUk0akQsRUFBV3AxRCxFQUFNd1IsR0FBR2pTLE9BQU9rdEIsR0FBR2x0QixPQUFPNUgsRUFBT1MsS0FBSyxDQUFDLEtBQUttSCxPQUFPd0wsR0FBR3hMLE9BQU8ybEUsR0FBT3QxQyxTQUNuRm5ELEVBQUkyb0MsRUFBV3AxRCxFQUFNd1IsR0FBR2pTLE9BQU9rdEIsR0FBR21ELFNBRzNCLENBQUVwZSxFQUZUQSxFQUFJNGpELEVBQVdwMUQsRUFBTXdSLEdBQUdqUyxPQUFPa3RCLEdBQUdsdEIsT0FBTzVILEVBQU9TLEtBQUssQ0FBQyxLQUFLbUgsT0FBT3dMLEdBQUd4TCxPQUFPMmxFLEdBQU90MUMsU0FFcEVuRCxFQURmQSxFQUFJMm9DLEVBQVdwMUQsRUFBTXdSLEdBQUdqUyxPQUFPa3RCLEdBQUdtRCxVQUlwQyxTQUFTdTFDLEVBQVVFLEVBQU9sdEQsR0FDeEIsSUFBSS9HLEVBQU8sSUFBSVQsRUFBRzAwRCxHQUNkcGhELEdBQVNvaEQsRUFBTWx0RSxRQUFVLEdBQUtnZ0IsRUFBRTdHLFlBRXBDLE9BREkyUyxFQUFRLEdBQUc3UyxFQUFLa1MsTUFBTVcsR0FDbkI3UyxFQWNULFNBQVNrMEQsRUFBU250RCxFQUFHb3RELEVBQUl2bEUsR0FDdkIsSUFBSXNZLEVBQ0E5RyxFQUVKLEVBQUcsQ0FHRCxJQUZBOEcsRUFBSTNnQixFQUFPVSxNQUFNLEdBRUMsRUFBWGlnQixFQUFFbmdCLE9BQWFnZ0IsRUFBRTdHLGFBQ3RCaTBELEVBQUc5NEMsRUFBSTJvQyxFQUFXcDFELEVBQU11bEUsRUFBRy96RCxHQUFHalMsT0FBT2dtRSxFQUFHOTRDLEdBQUdtRCxTQUMzQ3RYLEVBQUkzZ0IsRUFBTzRELE9BQU8sQ0FBQytjLEVBQUdpdEQsRUFBRzk0QyxJQUczQmpiLEVBQUkyekQsRUFBUzdzRCxFQUFHSCxHQUNoQm90RCxFQUFHL3pELEVBQUk0akQsRUFBV3AxRCxFQUFNdWxFLEVBQUcvekQsR0FBR2pTLE9BQU9nbUUsRUFBRzk0QyxHQUFHbHRCLE9BQU81SCxFQUFPUyxLQUFLLENBQUMsS0FBS3czQixTQUNwRTIxQyxFQUFHOTRDLEVBQUkyb0MsRUFBV3AxRCxFQUFNdWxFLEVBQUcvekQsR0FBR2pTLE9BQU9nbUUsRUFBRzk0QyxHQUFHbUQsZ0JBQ3RCLElBQWRwZSxFQUFFMEUsSUFBSWlDLElBRWYsT0FBTzNHLEVBR1QsU0FBU2cwRCxFQUFPcGdELEVBQUc1VCxFQUFHNkIsRUFBRzhFLEdBQ3ZCLE9BQU9pTixFQUFFeUIsTUFBTWxXLEVBQUc4WixLQUFLcFgsSUFBSStVLE9BQU81VyxHQUFHeVYsVUFBVXZWLElBQUl5RyxHQUdyRHJoQixFQUFPQyxRQW5JUCxTQUFlaTVCLEVBQU1qNEIsRUFBSzB0RSxFQUFVQyxFQUFVampDLEdBQzVDLElBQUlzTixFQUFPMU4sRUFBVXRxQyxHQUNyQixHQUFJZzRDLEVBQUt4USxNQUFPLENBRWQsR0FBaUIsVUFBYm1tQyxHQUFxQyxjQUFiQSxFQUEwQixNQUFNLElBQUkvckUsTUFBTSwwQkFDdEUsT0FtQkosU0FBaUJxMkIsRUFBTStmLEdBQ3JCLElBQUk0MUIsRUFBVXgwQixFQUFPcEIsRUFBS3hRLE1BQU03aUMsS0FBSyxNQUNyQyxJQUFLaXBFLEVBQVMsTUFBTSxJQUFJaHNFLE1BQU0saUJBQW1CbzJDLEVBQUt4USxNQUFNN2lDLEtBQUssTUFFakUsSUFFSTBQLEVBRlEsSUFBSTI0RCxFQUFHWSxHQUNIQyxlQUFlNzFCLEVBQUtoTSxZQUN0QndzQixLQUFLdmdDLEdBRW5CLE9BQU9yNEIsRUFBT1MsS0FBS2dVLEVBQUl5NUQsU0EzQmRDLENBQU85MUMsRUFBTStmLEdBQ2YsR0FBa0IsUUFBZEEsRUFBSzlwQyxLQUFnQixDQUM5QixHQUFpQixRQUFieS9ELEVBQW9CLE1BQU0sSUFBSS9yRSxNQUFNLDBCQUN4QyxPQTJCSixTQUFrQnEyQixFQUFNK2YsRUFBTS92QyxHQUM1QixJQUtJd1IsRUFMQXpHLEVBQUlnbEMsRUFBSzdNLE9BQU9lLFNBQ2hCNXdCLEVBQUkwOEIsRUFBSzdNLE9BQU83dkIsRUFDaEI4RSxFQUFJNDNCLEVBQUs3TSxPQUFPL3FCLEVBQ2hCaU4sRUFBSTJxQixFQUFLN00sT0FBTzlkLEVBQ2hCM1UsRUFBSSxJQUFJRSxFQUFHLEdBRVh5Z0IsRUFBSSt6QyxFQUFTbjFDLEVBQU03WCxHQUFHekcsSUFBSXlHLEdBQzFCeUksR0FBSSxFQUNKMmtELEVBQUtQLEVBQU9qNkQsRUFBR29OLEVBQUc2WCxFQUFNaHdCLEdBQzVCLE1BQWEsSUFBTjRnQixHQUNMcFAsRUFBSTh6RCxFQUFRbnRELEVBQUdvdEQsRUFBSXZsRSxHQUNuQnlRLEVBQUkrMEQsRUFBTXBnRCxFQUFHNVQsRUFBRzZCLEVBQUc4RSxHQUVELEtBRGxCeUksRUFBSXBQLEVBQUV1VSxLQUFLNU4sR0FBR3FHLEtBQUs0UyxFQUFFN1csSUFBSXhQLEVBQUVxQyxJQUFJcUQsS0FBS2lCLElBQUl5RyxJQUNsQzlGLEtBQUssS0FDVHVPLEdBQUksRUFDSm5RLEVBQUksSUFBSUUsRUFBRyxJQUdmLE9BR0YsU0FBZ0JGLEVBQUdtUSxHQUNqQm5RLEVBQUlBLEVBQUVLLFVBQ044UCxFQUFJQSxFQUFFOVAsVUFHSyxJQUFQTCxFQUFFLEtBQVdBLEVBQUksQ0FBQyxHQUFHbFYsT0FBT2tWLElBQ3JCLElBQVBtUSxFQUFFLEtBQVdBLEVBQUksQ0FBQyxHQUFHcmxCLE9BQU9xbEIsSUFFaEMsSUFDSW5YLEVBQU0sQ0FBQyxHQURDZ0gsRUFBRXRZLE9BQVN5b0IsRUFBRXpvQixPQUFTLEVBQ1YsRUFBTXNZLEVBQUV0WSxRQUVoQyxPQURBc1IsRUFBTUEsRUFBSWxPLE9BQU9rVixFQUFHLENBQUMsRUFBTW1RLEVBQUV6b0IsUUFBU3lvQixHQUMvQmpwQixFQUFPUyxLQUFLcVIsR0FkWm84RCxDQUFNcDFELEVBQUdtUSxHQTlDUG1sRCxDQUFRLzFDLEVBQU0rZixFQUFNMDFCLEdBRTNCLEdBQWlCLFFBQWJDLEdBQW1DLGNBQWJBLEVBQTBCLE1BQU0sSUFBSS9yRSxNQUFNLDBCQUV0RXEyQixFQUFPcjRCLEVBQU80RCxPQUFPLENBQUNrbkMsRUFBS3pTLElBRzNCLElBRkEsSUFBSW5xQixFQUFNa3FDLEVBQUtLLFFBQVFockMsYUFDbkJ6QyxFQUFNLENBQUMsRUFBRyxHQUNQcXRCLEVBQUs3M0IsT0FBU3dLLEVBQUl4SyxPQUFTLEVBQUkwTixHQUFLbEQsRUFBSXRHLEtBQUssS0FDcERzRyxFQUFJdEcsS0FBSyxHQUVULElBREEsSUFBSVAsR0FBSyxJQUNBQSxFQUFJazBCLEVBQUs3M0IsUUFBUXdLLEVBQUl0RyxLQUFLMnpCLEVBQUtsMEIsSUFHeEMsT0FEVWcwQyxFQUFJbnRDLEVBQUtvdEMsSUFnSHJCajVDLEVBQU9DLFFBQVFpdUUsT0FBU0EsRUFDeEJsdUUsRUFBT0MsUUFBUXV1RSxRQUFVQSxHLGlCQzlJekIsMkJBQ0UsYUFHQSxTQUFTajFELEVBQVFySyxFQUFLc0ssR0FDcEIsSUFBS3RLLEVBQUssTUFBTSxJQUFJck0sTUFBTTJXLEdBQU8sb0JBS25DLFNBQVMwQyxFQUFVaGMsRUFBTUMsR0FDdkJELEVBQUtFLE9BQVNELEVBQ2QsSUFBSVEsRUFBVyxhQUNmQSxFQUFTTixVQUFZRixFQUFVRSxVQUMvQkgsRUFBS0csVUFBWSxJQUFJTSxFQUNyQlQsRUFBS0csVUFBVUMsWUFBY0osRUFLL0IsU0FBUzJaLEVBQUk0RSxFQUFRQyxFQUFNakMsR0FDekIsR0FBSTVDLEVBQUc4RSxLQUFLRixHQUNWLE9BQU9BLEVBR1RsYixLQUFLcWIsU0FBVyxFQUNoQnJiLEtBQUthLE1BQVEsS0FDYmIsS0FBS2xDLE9BQVMsRUFHZGtDLEtBQUtzYixJQUFNLEtBRUksT0FBWEosSUFDVyxPQUFUQyxHQUEwQixPQUFUQSxJQUNuQmpDLEVBQVNpQyxFQUNUQSxFQUFPLElBR1RuYixLQUFLdWIsTUFBTUwsR0FBVSxFQUFHQyxHQUFRLEdBQUlqQyxHQUFVLE9BWWxELElBQUk1YixFQVRrQixpQkFBWGIsRUFDVEEsRUFBT0MsUUFBVTRaLEVBRWpCNVosRUFBUTRaLEdBQUtBLEVBR2ZBLEVBQUdBLEdBQUtBLEVBQ1JBLEVBQUdrRixTQUFXLEdBR2QsSUFDRWxlLEVBQVMsRUFBUSxLQUFVQSxPQUMzQixNQUFPK0YsSUFvSVQsU0FBU29ZLEVBQVVqTixFQUFLbkMsRUFBT0MsR0FHN0IsSUFGQSxJQUFJOEosRUFBSSxFQUNKNUssRUFBTTdNLEtBQUsrRixJQUFJOEosRUFBSTFRLE9BQVF3TyxHQUN0QjdLLEVBQUk0SyxFQUFPNUssRUFBSStKLEVBQUsvSixJQUFLLENBQ2hDLElBQUlzTixFQUFJUCxFQUFJdkwsV0FBV3hCLEdBQUssR0FFNUIyVSxJQUFNLEVBSUpBLEdBREVySCxHQUFLLElBQU1BLEdBQUssR0FDYkEsRUFBSSxHQUFLLEdBR0xBLEdBQUssSUFBTUEsR0FBSyxHQUNwQkEsRUFBSSxHQUFLLEdBSUwsR0FBSkEsRUFHVCxPQUFPcUgsRUFpQ1QsU0FBU3NGLEVBQVdsTixFQUFLbkMsRUFBT0MsRUFBS3lHLEdBR25DLElBRkEsSUFBSXFELEVBQUksRUFDSjVLLEVBQU03TSxLQUFLK0YsSUFBSThKLEVBQUkxUSxPQUFRd08sR0FDdEI3SyxFQUFJNEssRUFBTzVLLEVBQUkrSixFQUFLL0osSUFBSyxDQUNoQyxJQUFJc04sRUFBSVAsRUFBSXZMLFdBQVd4QixHQUFLLEdBRTVCMlUsR0FBS3JELEVBSUhxRCxHQURFckgsR0FBSyxHQUNGQSxFQUFJLEdBQUssR0FHTEEsR0FBSyxHQUNUQSxFQUFJLEdBQUssR0FJVEEsRUFHVCxPQUFPcUgsRUE1TVRFLEVBQUc4RSxLQUFPLFNBQWV2RSxHQUN2QixPQUFJQSxhQUFlUCxHQUlKLE9BQVJPLEdBQStCLGlCQUFSQSxHQUM1QkEsRUFBSTlaLFlBQVl5ZSxXQUFhbEYsRUFBR2tGLFVBQVk1SixNQUFNeEgsUUFBUXlNLEVBQUloVyxRQUdsRXlWLEVBQUcvUixJQUFNLFNBQWNvWCxFQUFNQyxHQUMzQixPQUFJRCxFQUFLRSxJQUFJRCxHQUFTLEVBQVVELEVBQ3pCQyxHQUdUdEYsRUFBRzVSLElBQU0sU0FBY2lYLEVBQU1DLEdBQzNCLE9BQUlELEVBQUtFLElBQUlELEdBQVMsRUFBVUQsRUFDekJDLEdBR1R0RixFQUFHeFosVUFBVXllLE1BQVEsU0FBZUwsRUFBUUMsRUFBTWpDLEdBQ2hELEdBQXNCLGlCQUFYZ0MsRUFDVCxPQUFPbGIsS0FBSzhiLFlBQVlaLEVBQVFDLEVBQU1qQyxHQUd4QyxHQUFzQixpQkFBWGdDLEVBQ1QsT0FBT2xiLEtBQUsrYixXQUFXYixFQUFRQyxFQUFNakMsR0FHMUIsUUFBVGlDLElBQ0ZBLEVBQU8sSUFFVG5GLEVBQU9tRixLQUFpQixFQUFQQSxJQUFhQSxHQUFRLEdBQUtBLEdBQVEsSUFHbkQsSUFBSTlPLEVBQVEsRUFDTSxPQUZsQjZPLEVBQVNBLEVBQU94YSxXQUFXbVYsUUFBUSxPQUFRLEtBRWhDLElBQ1R4SixJQUdXLEtBQVQ4TyxFQUNGbmIsS0FBS2djLFVBQVVkLEVBQVE3TyxHQUV2QnJNLEtBQUtpYyxXQUFXZixFQUFRQyxFQUFNOU8sR0FHZCxNQUFkNk8sRUFBTyxLQUNUbGIsS0FBS3FiLFNBQVcsR0FHbEJyYixLQUFLa2MsUUFFVSxPQUFYaEQsR0FFSmxaLEtBQUsrYixXQUFXL2IsS0FBS3lXLFVBQVcwRSxFQUFNakMsSUFHeEM1QyxFQUFHeFosVUFBVWdmLFlBQWMsU0FBc0JaLEVBQVFDLEVBQU1qQyxHQUN6RGdDLEVBQVMsSUFDWGxiLEtBQUtxYixTQUFXLEVBQ2hCSCxHQUFVQSxHQUVSQSxFQUFTLFVBQ1hsYixLQUFLYSxNQUFRLENBQVcsU0FBVHFhLEdBQ2ZsYixLQUFLbEMsT0FBUyxHQUNMb2QsRUFBUyxrQkFDbEJsYixLQUFLYSxNQUFRLENBQ0YsU0FBVHFhLEVBQ0NBLEVBQVMsU0FBYSxVQUV6QmxiLEtBQUtsQyxPQUFTLElBRWRrWSxFQUFPa0YsRUFBUyxrQkFDaEJsYixLQUFLYSxNQUFRLENBQ0YsU0FBVHFhLEVBQ0NBLEVBQVMsU0FBYSxTQUN2QixHQUVGbGIsS0FBS2xDLE9BQVMsR0FHRCxPQUFYb2IsR0FHSmxaLEtBQUsrYixXQUFXL2IsS0FBS3lXLFVBQVcwRSxFQUFNakMsSUFHeEM1QyxFQUFHeFosVUFBVWlmLFdBQWEsU0FBcUJiLEVBQVFDLEVBQU1qQyxHQUczRCxHQURBbEQsRUFBZ0MsaUJBQWxCa0YsRUFBT3BkLFFBQ2pCb2QsRUFBT3BkLFFBQVUsRUFHbkIsT0FGQWtDLEtBQUthLE1BQVEsQ0FBRSxHQUNmYixLQUFLbEMsT0FBUyxFQUNQa0MsS0FHVEEsS0FBS2xDLE9BQVNhLEtBQUtnRCxLQUFLdVosRUFBT3BkLE9BQVMsR0FDeENrQyxLQUFLYSxNQUFRLElBQUkrUSxNQUFNNVIsS0FBS2xDLFFBQzVCLElBQUssSUFBSTJELEVBQUksRUFBR0EsRUFBSXpCLEtBQUtsQyxPQUFRMkQsSUFDL0J6QixLQUFLYSxNQUFNWSxHQUFLLEVBR2xCLElBQUlzTSxFQUFHK0ksRUFDSHFGLEVBQU0sRUFDVixHQUFlLE9BQVhqRCxFQUNGLElBQUt6WCxFQUFJeVosRUFBT3BkLE9BQVMsRUFBR2lRLEVBQUksRUFBR3RNLEdBQUssRUFBR0EsR0FBSyxFQUM5Q3FWLEVBQUlvRSxFQUFPelosR0FBTXlaLEVBQU96WixFQUFJLElBQU0sRUFBTXlaLEVBQU96WixFQUFJLElBQU0sR0FDekR6QixLQUFLYSxNQUFNa04sSUFBTytJLEdBQUtxRixFQUFPLFNBQzlCbmMsS0FBS2EsTUFBTWtOLEVBQUksR0FBTStJLElBQU8sR0FBS3FGLEVBQVEsVUFDekNBLEdBQU8sS0FDSSxLQUNUQSxHQUFPLEdBQ1BwTyxVQUdDLEdBQWUsT0FBWG1MLEVBQ1QsSUFBS3pYLEVBQUksRUFBR3NNLEVBQUksRUFBR3RNLEVBQUl5WixFQUFPcGQsT0FBUTJELEdBQUssRUFDekNxVixFQUFJb0UsRUFBT3paLEdBQU15WixFQUFPelosRUFBSSxJQUFNLEVBQU15WixFQUFPelosRUFBSSxJQUFNLEdBQ3pEekIsS0FBS2EsTUFBTWtOLElBQU8rSSxHQUFLcUYsRUFBTyxTQUM5Qm5jLEtBQUthLE1BQU1rTixFQUFJLEdBQU0rSSxJQUFPLEdBQUtxRixFQUFRLFVBQ3pDQSxHQUFPLEtBQ0ksS0FDVEEsR0FBTyxHQUNQcE8sS0FJTixPQUFPL04sS0FBS2tjLFNBMkJkNUYsRUFBR3haLFVBQVVrZixVQUFZLFNBQW9CZCxFQUFRN08sR0FFbkRyTSxLQUFLbEMsT0FBU2EsS0FBS2dELE1BQU11WixFQUFPcGQsT0FBU3VPLEdBQVMsR0FDbERyTSxLQUFLYSxNQUFRLElBQUkrUSxNQUFNNVIsS0FBS2xDLFFBQzVCLElBQUssSUFBSTJELEVBQUksRUFBR0EsRUFBSXpCLEtBQUtsQyxPQUFRMkQsSUFDL0J6QixLQUFLYSxNQUFNWSxHQUFLLEVBR2xCLElBQUlzTSxFQUFHK0ksRUFFSHFGLEVBQU0sRUFDVixJQUFLMWEsRUFBSXlaLEVBQU9wZCxPQUFTLEVBQUdpUSxFQUFJLEVBQUd0TSxHQUFLNEssRUFBTzVLLEdBQUssRUFDbERxVixFQUFJMkUsRUFBU1AsRUFBUXpaLEVBQUdBLEVBQUksR0FDNUJ6QixLQUFLYSxNQUFNa04sSUFBTytJLEdBQUtxRixFQUFPLFNBRTlCbmMsS0FBS2EsTUFBTWtOLEVBQUksSUFBTStJLElBQU8sR0FBS3FGLEVBQU8sU0FDeENBLEdBQU8sS0FDSSxLQUNUQSxHQUFPLEdBQ1BwTyxLQUdBdE0sRUFBSSxJQUFNNEssSUFDWnlLLEVBQUkyRSxFQUFTUCxFQUFRN08sRUFBTzVLLEVBQUksR0FDaEN6QixLQUFLYSxNQUFNa04sSUFBTytJLEdBQUtxRixFQUFPLFNBQzlCbmMsS0FBS2EsTUFBTWtOLEVBQUksSUFBTStJLElBQU8sR0FBS3FGLEVBQU8sU0FFMUNuYyxLQUFLa2MsU0EyQlA1RixFQUFHeFosVUFBVW1mLFdBQWEsU0FBcUJmLEVBQVFDLEVBQU05TyxHQUUzRHJNLEtBQUthLE1BQVEsQ0FBRSxHQUNmYixLQUFLbEMsT0FBUyxFQUdkLElBQUssSUFBSXNlLEVBQVUsRUFBR0MsRUFBVSxFQUFHQSxHQUFXLFNBQVdBLEdBQVdsQixFQUNsRWlCLElBRUZBLElBQ0FDLEVBQVdBLEVBQVVsQixFQUFRLEVBTzdCLElBTEEsSUFBSW1CLEVBQVFwQixFQUFPcGQsT0FBU3VPLEVBQ3hCZ0wsRUFBTWlGLEVBQVFGLEVBQ2Q5UCxFQUFNM04sS0FBSytGLElBQUk0WCxFQUFPQSxFQUFRakYsR0FBT2hMLEVBRXJDeU0sRUFBTyxFQUNGclgsRUFBSTRLLEVBQU81SyxFQUFJNkssRUFBSzdLLEdBQUsyYSxFQUNoQ3RELEVBQU80QyxFQUFVUixFQUFRelosRUFBR0EsRUFBSTJhLEVBQVNqQixHQUV6Q25iLEtBQUt1YyxNQUFNRixHQUNQcmMsS0FBS2EsTUFBTSxHQUFLaVksRUFBTyxTQUN6QjlZLEtBQUthLE1BQU0sSUFBTWlZLEVBRWpCOVksS0FBS3djLE9BQU8xRCxHQUloQixHQUFZLElBQVJ6QixFQUFXLENBQ2IsSUFBSS9ELEVBQU0sRUFHVixJQUZBd0YsRUFBTzRDLEVBQVVSLEVBQVF6WixFQUFHeVosRUFBT3BkLE9BQVFxZCxHQUV0QzFaLEVBQUksRUFBR0EsRUFBSTRWLEVBQUs1VixJQUNuQjZSLEdBQU82SCxFQUdUbmIsS0FBS3VjLE1BQU1qSixHQUNQdFQsS0FBS2EsTUFBTSxHQUFLaVksRUFBTyxTQUN6QjlZLEtBQUthLE1BQU0sSUFBTWlZLEVBRWpCOVksS0FBS3djLE9BQU8xRCxLQUtsQnhDLEVBQUd4WixVQUFVNE8sS0FBTyxTQUFlK1EsR0FDakNBLEVBQUs1YixNQUFRLElBQUkrUSxNQUFNNVIsS0FBS2xDLFFBQzVCLElBQUssSUFBSTJELEVBQUksRUFBR0EsRUFBSXpCLEtBQUtsQyxPQUFRMkQsSUFDL0JnYixFQUFLNWIsTUFBTVksR0FBS3pCLEtBQUthLE1BQU1ZLEdBRTdCZ2IsRUFBSzNlLE9BQVNrQyxLQUFLbEMsT0FDbkIyZSxFQUFLcEIsU0FBV3JiLEtBQUtxYixTQUNyQm9CLEVBQUtuQixJQUFNdGIsS0FBS3NiLEtBR2xCaEYsRUFBR3haLFVBQVU2RCxNQUFRLFdBQ25CLElBQUl5VixFQUFJLElBQUlFLEVBQUcsTUFFZixPQURBdFcsS0FBSzBMLEtBQUswSyxHQUNIQSxHQUdURSxFQUFHeFosVUFBVTRmLFFBQVUsU0FBa0J0ZSxHQUN2QyxLQUFPNEIsS0FBS2xDLE9BQVNNLEdBQ25CNEIsS0FBS2EsTUFBTWIsS0FBS2xDLFVBQVksRUFFOUIsT0FBT2tDLE1BSVRzVyxFQUFHeFosVUFBVW9mLE1BQVEsV0FDbkIsS0FBT2xjLEtBQUtsQyxPQUFTLEdBQXFDLElBQWhDa0MsS0FBS2EsTUFBTWIsS0FBS2xDLE9BQVMsSUFDakRrQyxLQUFLbEMsU0FFUCxPQUFPa0MsS0FBSzJjLGFBR2RyRyxFQUFHeFosVUFBVTZmLFVBQVksV0FLdkIsT0FIb0IsSUFBaEIzYyxLQUFLbEMsUUFBa0MsSUFBbEJrQyxLQUFLYSxNQUFNLEtBQ2xDYixLQUFLcWIsU0FBVyxHQUVYcmIsTUFHVHNXLEVBQUd4WixVQUFVb1UsUUFBVSxXQUNyQixPQUFRbFIsS0FBS3NiLElBQU0sVUFBWSxTQUFXdGIsS0FBS1UsU0FBUyxJQUFNLEtBaUNoRSxJQUFJa2MsRUFBUSxDQUNWLEdBQ0EsSUFDQSxLQUNBLE1BQ0EsT0FDQSxRQUNBLFNBQ0EsVUFDQSxXQUNBLFlBQ0EsYUFDQSxjQUNBLGVBQ0EsZ0JBQ0EsaUJBQ0Esa0JBQ0EsbUJBQ0Esb0JBQ0EscUJBQ0Esc0JBQ0EsdUJBQ0Esd0JBQ0EseUJBQ0EsMEJBQ0EsMkJBQ0EsNkJBR0VDLEVBQWEsQ0FDZixFQUFHLEVBQ0gsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFDdkIsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFDbEIsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFDbEIsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFDbEIsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FHaEJDLEVBQWEsQ0FDZixFQUFHLEVBQ0gsU0FBVSxTQUFVLFNBQVUsU0FBVSxTQUFVLFNBQVUsU0FDNUQsU0FBVSxJQUFVLFNBQVUsU0FBVSxTQUFVLFFBQVMsU0FDM0QsU0FBVSxTQUFVLFNBQVUsU0FBVSxLQUFVLFFBQVMsUUFDM0QsUUFBUyxRQUFTLFFBQVMsU0FBVSxTQUFVLFNBQVUsU0FDekQsTUFBVSxTQUFVLFNBQVUsU0FBVSxTQUFVLFNBQVUsVUFzakI5RCxTQUFTQyxFQUFZQyxFQUFNbkcsRUFBSzlFLEdBQzlCQSxFQUFJc0osU0FBV3hFLEVBQUl3RSxTQUFXMkIsRUFBSzNCLFNBQ25DLElBQUk3UCxFQUFPd1IsRUFBS2xmLE9BQVMrWSxFQUFJL1ksT0FBVSxFQUN2Q2lVLEVBQUlqVSxPQUFTME4sRUFDYkEsRUFBT0EsRUFBTSxFQUFLLEVBR2xCLElBQUlpRixFQUFvQixFQUFoQnVNLEVBQUtuYyxNQUFNLEdBQ2ZpTSxFQUFtQixFQUFmK0osRUFBSWhXLE1BQU0sR0FDZHVWLEVBQUkzRixFQUFJM0QsRUFFUm1DLEVBQVMsU0FBSm1ILEVBQ0xvRSxFQUFTcEUsRUFBSSxTQUFhLEVBQzlCckUsRUFBSWxSLE1BQU0sR0FBS29PLEVBRWYsSUFBSyxJQUFJa0ksRUFBSSxFQUFHQSxFQUFJM0wsRUFBSzJMLElBQUssQ0FNNUIsSUFIQSxJQUFJOEYsRUFBU3pDLElBQVUsR0FDbkIwQyxFQUFnQixTQUFSMUMsRUFDUjJDLEVBQU94ZSxLQUFLK0YsSUFBSXlTLEVBQUdOLEVBQUkvWSxPQUFTLEdBQzNCaVEsRUFBSXBQLEtBQUs0RixJQUFJLEVBQUc0UyxFQUFJNkYsRUFBS2xmLE9BQVMsR0FBSWlRLEdBQUtvUCxFQUFNcFAsSUFBSyxDQUM3RCxJQUFJdE0sRUFBSzBWLEVBQUlwSixFQUFLLEVBSWxCa1AsSUFEQTdHLEdBRkEzRixFQUFvQixFQUFoQnVNLEVBQUtuYyxNQUFNWSxLQUNmcUwsRUFBbUIsRUFBZitKLEVBQUloVyxNQUFNa04sSUFDRm1QLEdBQ0csU0FBYSxFQUM1QkEsRUFBWSxTQUFKOUcsRUFFVnJFLEVBQUlsUixNQUFNc1csR0FBYSxFQUFSK0YsRUFDZjFDLEVBQWlCLEVBQVR5QyxFQVFWLE9BTmMsSUFBVnpDLEVBQ0Z6SSxFQUFJbFIsTUFBTXNXLEdBQWEsRUFBUnFELEVBRWZ6SSxFQUFJalUsU0FHQ2lVLEVBQUltSyxRQXpsQmI1RixFQUFHeFosVUFBVTRELFNBQVcsU0FBbUJ5YSxFQUFNeFMsR0FJL0MsSUFBSW9KLEVBQ0osR0FIQXBKLEVBQW9CLEVBQVZBLEdBQWUsRUFHWixNQUpid1MsRUFBT0EsR0FBUSxLQUlhLFFBQVRBLEVBQWdCLENBQ2pDcEosRUFBTSxHQUdOLElBRkEsSUFBSW9LLEVBQU0sRUFDTjNCLEVBQVEsRUFDSC9ZLEVBQUksRUFBR0EsRUFBSXpCLEtBQUtsQyxPQUFRMkQsSUFBSyxDQUNwQyxJQUFJcVYsRUFBSTlXLEtBQUthLE1BQU1ZLEdBQ2ZxWCxHQUErQixVQUFyQmhDLEdBQUtxRixFQUFPM0IsSUFBbUI5WixTQUFTLElBR3BEcVIsRUFEWSxLQURkeUksRUFBUzFELElBQU8sR0FBS3FGLEVBQVEsV0FDVjFhLElBQU16QixLQUFLbEMsT0FBUyxFQUMvQjhlLEVBQU0sRUFBSTlELEVBQUtoYixRQUFVZ2IsRUFBTy9HLEVBRWhDK0csRUFBTy9HLEdBRWZvSyxHQUFPLElBQ0ksS0FDVEEsR0FBTyxHQUNQMWEsS0FNSixJQUhjLElBQVYrWSxJQUNGekksRUFBTXlJLEVBQU05WixTQUFTLElBQU1xUixHQUV0QkEsRUFBSWpVLE9BQVM2SyxHQUFZLEdBQzlCb0osRUFBTSxJQUFNQSxFQUtkLE9BSHNCLElBQWxCL1IsS0FBS3FiLFdBQ1B0SixFQUFNLElBQU1BLEdBRVBBLEVBR1QsR0FBSW9KLEtBQWlCLEVBQVBBLElBQWFBLEdBQVEsR0FBS0EsR0FBUSxHQUFJLENBRWxELElBQUlpQyxFQUFZUCxFQUFXMUIsR0FFdkJrQyxFQUFZUCxFQUFXM0IsR0FDM0JwSixFQUFNLEdBQ04sSUFBSWhELEVBQUkvTyxLQUFLVyxRQUViLElBREFvTyxFQUFFc00sU0FBVyxHQUNMdE0sRUFBRXVPLFVBQVUsQ0FDbEIsSUFBSWxILEVBQUlySCxFQUFFd08sS0FBS0YsR0FBVzNjLFNBQVN5YSxHQU1qQ3BKLEdBTEZoRCxFQUFJQSxFQUFFeU8sTUFBTUgsSUFFTEMsU0FHQ2xILEVBQUlyRSxFQUZKNkssRUFBTVEsRUFBWWhILEVBQUV0WSxRQUFVc1ksRUFBSXJFLEVBUTVDLElBSEkvUixLQUFLc2QsV0FDUHZMLEVBQU0sSUFBTUEsR0FFUEEsRUFBSWpVLE9BQVM2SyxHQUFZLEdBQzlCb0osRUFBTSxJQUFNQSxFQUtkLE9BSHNCLElBQWxCL1IsS0FBS3FiLFdBQ1B0SixFQUFNLElBQU1BLEdBRVBBLEVBR1RpRSxHQUFPLEVBQU8sb0NBR2hCTSxFQUFHeFosVUFBVTJnQixTQUFXLFdBQ3RCLElBQUkzTCxFQUFNOVIsS0FBS2EsTUFBTSxHQVNyQixPQVJvQixJQUFoQmIsS0FBS2xDLE9BQ1BnVSxHQUF1QixTQUFoQjlSLEtBQUthLE1BQU0sR0FDTyxJQUFoQmIsS0FBS2xDLFFBQWtDLElBQWxCa0MsS0FBS2EsTUFBTSxHQUV6Q2lSLEdBQU8saUJBQW9DLFNBQWhCOVIsS0FBS2EsTUFBTSxHQUM3QmIsS0FBS2xDLE9BQVMsR0FDdkJrWSxHQUFPLEVBQU8sOENBRVUsSUFBbEJoVyxLQUFLcWIsVUFBbUJ2SixFQUFNQSxHQUd4Q3dFLEVBQUd4WixVQUFVNlUsT0FBUyxXQUNwQixPQUFPM1IsS0FBS1UsU0FBUyxLQUd2QjRWLEVBQUd4WixVQUFVNGdCLFNBQVcsU0FBbUJ4RSxFQUFRcGIsR0FFakQsT0FEQWtZLE9BQXlCLElBQVgxWSxHQUNQMEMsS0FBSzJkLFlBQVlyZ0IsRUFBUTRiLEVBQVFwYixJQUcxQ3dZLEVBQUd4WixVQUFVMlosUUFBVSxTQUFrQnlDLEVBQVFwYixHQUMvQyxPQUFPa0MsS0FBSzJkLFlBQVkvTCxNQUFPc0gsRUFBUXBiLElBR3pDd1ksRUFBR3haLFVBQVU2Z0IsWUFBYyxTQUFzQkMsRUFBVzFFLEVBQVFwYixHQUNsRSxJQUFJaU4sRUFBYS9LLEtBQUsrSyxhQUNsQjhTLEVBQVkvZixHQUFVYSxLQUFLNEYsSUFBSSxFQUFHd0csR0FDdENpTCxFQUFPakwsR0FBYzhTLEVBQVcseUNBQ2hDN0gsRUFBTzZILEVBQVksRUFBRywrQkFFdEI3ZCxLQUFLa2MsUUFDTCxJQUdJcFAsRUFBR3JMLEVBSEg2USxFQUEwQixPQUFYNEcsRUFDZjlKLEVBQU0sSUFBSXdPLEVBQVVDLEdBR3BCQyxFQUFJOWQsS0FBS1csUUFDYixHQUFLMlIsRUFZRSxDQUNMLElBQUs3USxFQUFJLEdBQUlxYyxFQUFFUixTQUFVN2IsSUFDdkJxTCxFQUFJZ1IsRUFBRXhHLE1BQU0sS0FDWndHLEVBQUVyRyxPQUFPLEdBRVRySSxFQUFJM04sR0FBS3FMLEVBR1gsS0FBT3JMLEVBQUlvYyxFQUFXcGMsSUFDcEIyTixFQUFJM04sR0FBSyxNQXJCTSxDQUVqQixJQUFLQSxFQUFJLEVBQUdBLEVBQUlvYyxFQUFZOVMsRUFBWXRKLElBQ3RDMk4sRUFBSTNOLEdBQUssRUFHWCxJQUFLQSxFQUFJLEdBQUlxYyxFQUFFUixTQUFVN2IsSUFDdkJxTCxFQUFJZ1IsRUFBRXhHLE1BQU0sS0FDWndHLEVBQUVyRyxPQUFPLEdBRVRySSxFQUFJeU8sRUFBWXBjLEVBQUksR0FBS3FMLEVBZTdCLE9BQU9zQyxHQUdMelEsS0FBS29mLE1BQ1B6SCxFQUFHeFosVUFBVWtoQixXQUFhLFNBQXFCbEgsR0FDN0MsT0FBTyxHQUFLblksS0FBS29mLE1BQU1qSCxJQUd6QlIsRUFBR3haLFVBQVVraEIsV0FBYSxTQUFxQmxILEdBQzdDLElBQUltSCxFQUFJbkgsRUFDSlYsRUFBSSxFQWlCUixPQWhCSTZILEdBQUssT0FDUDdILEdBQUssR0FDTDZILEtBQU8sSUFFTEEsR0FBSyxLQUNQN0gsR0FBSyxFQUNMNkgsS0FBTyxHQUVMQSxHQUFLLElBQ1A3SCxHQUFLLEVBQ0w2SCxLQUFPLEdBRUxBLEdBQUssSUFDUDdILEdBQUssRUFDTDZILEtBQU8sR0FFRjdILEVBQUk2SCxHQUlmM0gsRUFBR3haLFVBQVVvaEIsVUFBWSxTQUFvQnBILEdBRTNDLEdBQVUsSUFBTkEsRUFBUyxPQUFPLEdBRXBCLElBQUltSCxFQUFJbkgsRUFDSlYsRUFBSSxFQW9CUixPQW5CcUIsSUFBWixLQUFKNkgsS0FDSDdILEdBQUssR0FDTDZILEtBQU8sSUFFVSxJQUFWLElBQUpBLEtBQ0g3SCxHQUFLLEVBQ0w2SCxLQUFPLEdBRVMsSUFBVCxHQUFKQSxLQUNIN0gsR0FBSyxFQUNMNkgsS0FBTyxHQUVTLElBQVQsRUFBSkEsS0FDSDdILEdBQUssRUFDTDZILEtBQU8sR0FFUyxJQUFULEVBQUpBLElBQ0g3SCxJQUVLQSxHQUlURSxFQUFHeFosVUFBVW1hLFVBQVksV0FDdkIsSUFBSUgsRUFBSTlXLEtBQUthLE1BQU1iLEtBQUtsQyxPQUFTLEdBQzdCa1IsRUFBS2hQLEtBQUtnZSxXQUFXbEgsR0FDekIsT0FBMkIsSUFBbkI5VyxLQUFLbEMsT0FBUyxHQUFVa1IsR0FpQmxDc0gsRUFBR3haLFVBQVVxaEIsU0FBVyxXQUN0QixHQUFJbmUsS0FBS3NkLFNBQVUsT0FBTyxFQUcxQixJQURBLElBQUlsSCxFQUFJLEVBQ0MzVSxFQUFJLEVBQUdBLEVBQUl6QixLQUFLbEMsT0FBUTJELElBQUssQ0FDcEMsSUFBSXFMLEVBQUk5TSxLQUFLa2UsVUFBVWxlLEtBQUthLE1BQU1ZLElBRWxDLEdBREEyVSxHQUFLdEosRUFDSyxLQUFOQSxFQUFVLE1BRWhCLE9BQU9zSixHQUdURSxFQUFHeFosVUFBVWlPLFdBQWEsV0FDeEIsT0FBT3BNLEtBQUtnRCxLQUFLM0IsS0FBS2lYLFlBQWMsSUFHdENYLEVBQUd4WixVQUFVc2hCLE9BQVMsU0FBaUJDLEdBQ3JDLE9BQXNCLElBQWxCcmUsS0FBS3FiLFNBQ0FyYixLQUFLc2UsTUFBTUMsTUFBTUYsR0FBT0csTUFBTSxHQUVoQ3hlLEtBQUtXLFNBR2QyVixFQUFHeFosVUFBVTJoQixTQUFXLFNBQW1CSixHQUN6QyxPQUFJcmUsS0FBSzBlLE1BQU1MLEVBQVEsR0FDZHJlLEtBQUsyZSxLQUFLTixHQUFPRyxNQUFNLEdBQUdJLE9BRTVCNWUsS0FBS1csU0FHZDJWLEVBQUd4WixVQUFVK2hCLE1BQVEsV0FDbkIsT0FBeUIsSUFBbEI3ZSxLQUFLcWIsVUFJZC9FLEVBQUd4WixVQUFVZ2lCLElBQU0sV0FDakIsT0FBTzllLEtBQUtXLFFBQVFpZSxRQUd0QnRJLEVBQUd4WixVQUFVOGhCLEtBQU8sV0FLbEIsT0FKSzVlLEtBQUtzZCxXQUNSdGQsS0FBS3FiLFVBQVksR0FHWnJiLE1BSVRzVyxFQUFHeFosVUFBVWlpQixLQUFPLFNBQWVsSSxHQUNqQyxLQUFPN1csS0FBS2xDLE9BQVMrWSxFQUFJL1ksUUFDdkJrQyxLQUFLYSxNQUFNYixLQUFLbEMsVUFBWSxFQUc5QixJQUFLLElBQUkyRCxFQUFJLEVBQUdBLEVBQUlvVixFQUFJL1ksT0FBUTJELElBQzlCekIsS0FBS2EsTUFBTVksR0FBS3pCLEtBQUthLE1BQU1ZLEdBQUtvVixFQUFJaFcsTUFBTVksR0FHNUMsT0FBT3pCLEtBQUtrYyxTQUdkNUYsRUFBR3haLFVBQVVraUIsSUFBTSxTQUFjbkksR0FFL0IsT0FEQWIsRUFBMEMsSUFBbENoVyxLQUFLcWIsU0FBV3hFLEVBQUl3RSxXQUNyQnJiLEtBQUsrZSxLQUFLbEksSUFJbkJQLEVBQUd4WixVQUFVbWlCLEdBQUssU0FBYXBJLEdBQzdCLE9BQUk3VyxLQUFLbEMsT0FBUytZLEVBQUkvWSxPQUFla0MsS0FBS1csUUFBUXFlLElBQUluSSxHQUMvQ0EsRUFBSWxXLFFBQVFxZSxJQUFJaGYsT0FHekJzVyxFQUFHeFosVUFBVW9pQixJQUFNLFNBQWNySSxHQUMvQixPQUFJN1csS0FBS2xDLE9BQVMrWSxFQUFJL1ksT0FBZWtDLEtBQUtXLFFBQVFvZSxLQUFLbEksR0FDaERBLEVBQUlsVyxRQUFRb2UsS0FBSy9lLE9BSTFCc1csRUFBR3haLFVBQVVxaUIsTUFBUSxTQUFnQnRJLEdBRW5DLElBQUkvSixFQUVGQSxFQURFOU0sS0FBS2xDLE9BQVMrWSxFQUFJL1ksT0FDaEIrWSxFQUVBN1csS0FHTixJQUFLLElBQUl5QixFQUFJLEVBQUdBLEVBQUlxTCxFQUFFaFAsT0FBUTJELElBQzVCekIsS0FBS2EsTUFBTVksR0FBS3pCLEtBQUthLE1BQU1ZLEdBQUtvVixFQUFJaFcsTUFBTVksR0FLNUMsT0FGQXpCLEtBQUtsQyxPQUFTZ1AsRUFBRWhQLE9BRVRrQyxLQUFLa2MsU0FHZDVGLEVBQUd4WixVQUFVc2lCLEtBQU8sU0FBZXZJLEdBRWpDLE9BREFiLEVBQTBDLElBQWxDaFcsS0FBS3FiLFNBQVd4RSxFQUFJd0UsV0FDckJyYixLQUFLbWYsTUFBTXRJLElBSXBCUCxFQUFHeFosVUFBVXVpQixJQUFNLFNBQWN4SSxHQUMvQixPQUFJN1csS0FBS2xDLE9BQVMrWSxFQUFJL1ksT0FBZWtDLEtBQUtXLFFBQVF5ZSxLQUFLdkksR0FDaERBLEVBQUlsVyxRQUFReWUsS0FBS3BmLE9BRzFCc1csRUFBR3haLFVBQVV3aUIsS0FBTyxTQUFlekksR0FDakMsT0FBSTdXLEtBQUtsQyxPQUFTK1ksRUFBSS9ZLE9BQWVrQyxLQUFLVyxRQUFRd2UsTUFBTXRJLEdBQ2pEQSxFQUFJbFcsUUFBUXdlLE1BQU1uZixPQUkzQnNXLEVBQUd4WixVQUFVeWlCLE1BQVEsU0FBZ0IxSSxHQUVuQyxJQUFJcEcsRUFDQTNELEVBQ0E5TSxLQUFLbEMsT0FBUytZLEVBQUkvWSxRQUNwQjJTLEVBQUl6USxLQUNKOE0sRUFBSStKLElBRUpwRyxFQUFJb0csRUFDSi9KLEVBQUk5TSxNQUdOLElBQUssSUFBSXlCLEVBQUksRUFBR0EsRUFBSXFMLEVBQUVoUCxPQUFRMkQsSUFDNUJ6QixLQUFLYSxNQUFNWSxHQUFLZ1AsRUFBRTVQLE1BQU1ZLEdBQUtxTCxFQUFFak0sTUFBTVksR0FHdkMsR0FBSXpCLE9BQVN5USxFQUNYLEtBQU9oUCxFQUFJZ1AsRUFBRTNTLE9BQVEyRCxJQUNuQnpCLEtBQUthLE1BQU1ZLEdBQUtnUCxFQUFFNVAsTUFBTVksR0FNNUIsT0FGQXpCLEtBQUtsQyxPQUFTMlMsRUFBRTNTLE9BRVRrQyxLQUFLa2MsU0FHZDVGLEVBQUd4WixVQUFVMGlCLEtBQU8sU0FBZTNJLEdBRWpDLE9BREFiLEVBQTBDLElBQWxDaFcsS0FBS3FiLFNBQVd4RSxFQUFJd0UsV0FDckJyYixLQUFLdWYsTUFBTTFJLElBSXBCUCxFQUFHeFosVUFBVTJpQixJQUFNLFNBQWM1SSxHQUMvQixPQUFJN1csS0FBS2xDLE9BQVMrWSxFQUFJL1ksT0FBZWtDLEtBQUtXLFFBQVE2ZSxLQUFLM0ksR0FDaERBLEVBQUlsVyxRQUFRNmUsS0FBS3hmLE9BRzFCc1csRUFBR3haLFVBQVU0aUIsS0FBTyxTQUFlN0ksR0FDakMsT0FBSTdXLEtBQUtsQyxPQUFTK1ksRUFBSS9ZLE9BQWVrQyxLQUFLVyxRQUFRNGUsTUFBTTFJLEdBQ2pEQSxFQUFJbFcsUUFBUTRlLE1BQU12ZixPQUkzQnNXLEVBQUd4WixVQUFVeWhCLE1BQVEsU0FBZ0JGLEdBQ25DckksRUFBd0IsaUJBQVZxSSxHQUFzQkEsR0FBUyxHQUU3QyxJQUFJc0IsRUFBc0MsRUFBeEJoaEIsS0FBS2dELEtBQUswYyxFQUFRLElBQ2hDdUIsRUFBV3ZCLEVBQVEsR0FHdkJyZSxLQUFLMGMsUUFBUWlELEdBRVRDLEVBQVcsR0FDYkQsSUFJRixJQUFLLElBQUlsZSxFQUFJLEVBQUdBLEVBQUlrZSxFQUFhbGUsSUFDL0J6QixLQUFLYSxNQUFNWSxHQUFzQixVQUFoQnpCLEtBQUthLE1BQU1ZLEdBUzlCLE9BTEltZSxFQUFXLElBQ2I1ZixLQUFLYSxNQUFNWSxJQUFNekIsS0FBS2EsTUFBTVksR0FBTSxVQUFjLEdBQUttZSxHQUloRDVmLEtBQUtrYyxTQUdkNUYsRUFBR3haLFVBQVU2aEIsS0FBTyxTQUFlTixHQUNqQyxPQUFPcmUsS0FBS1csUUFBUTRkLE1BQU1GLElBSTVCL0gsRUFBR3haLFVBQVUraUIsS0FBTyxTQUFlQyxFQUFLblUsR0FDdENxSyxFQUFzQixpQkFBUjhKLEdBQW9CQSxHQUFPLEdBRXpDLElBQUkzRCxFQUFPMkQsRUFBTSxHQUFNLEVBQ25CQyxFQUFPRCxFQUFNLEdBVWpCLE9BUkE5ZixLQUFLMGMsUUFBUVAsRUFBTSxHQUdqQm5jLEtBQUthLE1BQU1zYixHQURUeFEsRUFDZ0IzTCxLQUFLYSxNQUFNc2IsR0FBUSxHQUFLNEQsRUFFeEIvZixLQUFLYSxNQUFNc2IsS0FBUyxHQUFLNEQsR0FHdEMvZixLQUFLa2MsU0FJZDVGLEVBQUd4WixVQUFVa2pCLEtBQU8sU0FBZW5KLEdBQ2pDLElBQUlULEVBa0JBM0YsRUFBRzNELEVBZlAsR0FBc0IsSUFBbEI5TSxLQUFLcWIsVUFBbUMsSUFBakJ4RSxFQUFJd0UsU0FJN0IsT0FIQXJiLEtBQUtxYixTQUFXLEVBQ2hCakYsRUFBSXBXLEtBQUtpZ0IsS0FBS3BKLEdBQ2Q3VyxLQUFLcWIsVUFBWSxFQUNWcmIsS0FBSzJjLFlBR1AsR0FBc0IsSUFBbEIzYyxLQUFLcWIsVUFBbUMsSUFBakJ4RSxFQUFJd0UsU0FJcEMsT0FIQXhFLEVBQUl3RSxTQUFXLEVBQ2ZqRixFQUFJcFcsS0FBS2lnQixLQUFLcEosR0FDZEEsRUFBSXdFLFNBQVcsRUFDUmpGLEVBQUV1RyxZQUtQM2MsS0FBS2xDLE9BQVMrWSxFQUFJL1ksUUFDcEIyUyxFQUFJelEsS0FDSjhNLEVBQUkrSixJQUVKcEcsRUFBSW9HLEVBQ0ovSixFQUFJOU0sTUFJTixJQURBLElBQUl3YSxFQUFRLEVBQ0gvWSxFQUFJLEVBQUdBLEVBQUlxTCxFQUFFaFAsT0FBUTJELElBQzVCMlUsR0FBa0IsRUFBYjNGLEVBQUU1UCxNQUFNWSxLQUF3QixFQUFicUwsRUFBRWpNLE1BQU1ZLElBQVUrWSxFQUMxQ3hhLEtBQUthLE1BQU1ZLEdBQVMsU0FBSjJVLEVBQ2hCb0UsRUFBUXBFLElBQU0sR0FFaEIsS0FBaUIsSUFBVm9FLEdBQWUvWSxFQUFJZ1AsRUFBRTNTLE9BQVEyRCxJQUNsQzJVLEdBQWtCLEVBQWIzRixFQUFFNVAsTUFBTVksSUFBVStZLEVBQ3ZCeGEsS0FBS2EsTUFBTVksR0FBUyxTQUFKMlUsRUFDaEJvRSxFQUFRcEUsSUFBTSxHQUloQixHQURBcFcsS0FBS2xDLE9BQVMyUyxFQUFFM1MsT0FDRixJQUFWMGMsRUFDRnhhLEtBQUthLE1BQU1iLEtBQUtsQyxRQUFVMGMsRUFDMUJ4YSxLQUFLbEMsY0FFQSxHQUFJMlMsSUFBTXpRLEtBQ2YsS0FBT3lCLEVBQUlnUCxFQUFFM1MsT0FBUTJELElBQ25CekIsS0FBS2EsTUFBTVksR0FBS2dQLEVBQUU1UCxNQUFNWSxHQUk1QixPQUFPekIsTUFJVHNXLEVBQUd4WixVQUFVb2pCLElBQU0sU0FBY3JKLEdBQy9CLElBQUl6SCxFQUNKLE9BQXFCLElBQWpCeUgsRUFBSXdFLFVBQW9DLElBQWxCcmIsS0FBS3FiLFVBQzdCeEUsRUFBSXdFLFNBQVcsRUFDZmpNLEVBQU1wUCxLQUFLMFUsSUFBSW1DLEdBQ2ZBLEVBQUl3RSxVQUFZLEVBQ1RqTSxHQUNtQixJQUFqQnlILEVBQUl3RSxVQUFvQyxJQUFsQnJiLEtBQUtxYixVQUNwQ3JiLEtBQUtxYixTQUFXLEVBQ2hCak0sRUFBTXlILEVBQUluQyxJQUFJMVUsTUFDZEEsS0FBS3FiLFNBQVcsRUFDVGpNLEdBR0xwUCxLQUFLbEMsT0FBUytZLEVBQUkvWSxPQUFla0MsS0FBS1csUUFBUXFmLEtBQUtuSixHQUVoREEsRUFBSWxXLFFBQVFxZixLQUFLaGdCLE9BSTFCc1csRUFBR3haLFVBQVVtakIsS0FBTyxTQUFlcEosR0FFakMsR0FBcUIsSUFBakJBLEVBQUl3RSxTQUFnQixDQUN0QnhFLEVBQUl3RSxTQUFXLEVBQ2YsSUFBSWpGLEVBQUlwVyxLQUFLZ2dCLEtBQUtuSixHQUVsQixPQURBQSxFQUFJd0UsU0FBVyxFQUNSakYsRUFBRXVHLFlBR0osR0FBc0IsSUFBbEIzYyxLQUFLcWIsU0FJZCxPQUhBcmIsS0FBS3FiLFNBQVcsRUFDaEJyYixLQUFLZ2dCLEtBQUtuSixHQUNWN1csS0FBS3FiLFNBQVcsRUFDVHJiLEtBQUsyYyxZQUlkLElBV0lsTSxFQUFHM0QsRUFYSCtPLEVBQU03YixLQUFLNmIsSUFBSWhGLEdBR25CLEdBQVksSUFBUmdGLEVBSUYsT0FIQTdiLEtBQUtxYixTQUFXLEVBQ2hCcmIsS0FBS2xDLE9BQVMsRUFDZGtDLEtBQUthLE1BQU0sR0FBSyxFQUNUYixLQUtMNmIsRUFBTSxHQUNScEwsRUFBSXpRLEtBQ0o4TSxFQUFJK0osSUFFSnBHLEVBQUlvRyxFQUNKL0osRUFBSTlNLE1BSU4sSUFEQSxJQUFJd2EsRUFBUSxFQUNIL1ksRUFBSSxFQUFHQSxFQUFJcUwsRUFBRWhQLE9BQVEyRCxJQUU1QitZLEdBREFwRSxHQUFrQixFQUFiM0YsRUFBRTVQLE1BQU1ZLEtBQXdCLEVBQWJxTCxFQUFFak0sTUFBTVksSUFBVStZLElBQzdCLEdBQ2J4YSxLQUFLYSxNQUFNWSxHQUFTLFNBQUoyVSxFQUVsQixLQUFpQixJQUFWb0UsR0FBZS9ZLEVBQUlnUCxFQUFFM1MsT0FBUTJELElBRWxDK1ksR0FEQXBFLEdBQWtCLEVBQWIzRixFQUFFNVAsTUFBTVksSUFBVStZLElBQ1YsR0FDYnhhLEtBQUthLE1BQU1ZLEdBQVMsU0FBSjJVLEVBSWxCLEdBQWMsSUFBVm9FLEdBQWUvWSxFQUFJZ1AsRUFBRTNTLFFBQVUyUyxJQUFNelEsS0FDdkMsS0FBT3lCLEVBQUlnUCxFQUFFM1MsT0FBUTJELElBQ25CekIsS0FBS2EsTUFBTVksR0FBS2dQLEVBQUU1UCxNQUFNWSxHQVU1QixPQU5BekIsS0FBS2xDLE9BQVNhLEtBQUs0RixJQUFJdkUsS0FBS2xDLE9BQVEyRCxHQUVoQ2dQLElBQU16USxPQUNSQSxLQUFLcWIsU0FBVyxHQUdYcmIsS0FBS2tjLFNBSWQ1RixFQUFHeFosVUFBVTRYLElBQU0sU0FBY21DLEdBQy9CLE9BQU83VyxLQUFLVyxRQUFRc2YsS0FBS3BKLElBK0MzQixJQUFJc0osRUFBYyxTQUFzQm5ELEVBQU1uRyxFQUFLOUUsR0FDakQsSUFJSTlDLEVBQ0FtUixFQUNBcFIsRUFOQXlCLEVBQUl1TSxFQUFLbmMsTUFDVGlNLEVBQUkrSixFQUFJaFcsTUFDUndmLEVBQUl0TyxFQUFJbFIsTUFDUmtPLEVBQUksRUFJSnVSLEVBQVksRUFBUDdQLEVBQUUsR0FDUDhQLEVBQVcsS0FBTEQsRUFDTkUsRUFBTUYsSUFBTyxHQUNiRyxFQUFZLEVBQVBoUSxFQUFFLEdBQ1BpUSxFQUFXLEtBQUxELEVBQ05FLEVBQU1GLElBQU8sR0FDYkcsRUFBWSxFQUFQblEsRUFBRSxHQUNQb1EsRUFBVyxLQUFMRCxFQUNORSxFQUFNRixJQUFPLEdBQ2JHLEVBQVksRUFBUHRRLEVBQUUsR0FDUHVRLEVBQVcsS0FBTEQsRUFDTkUsRUFBTUYsSUFBTyxHQUNiRyxFQUFZLEVBQVB6USxFQUFFLEdBQ1AwUSxFQUFXLEtBQUxELEVBQ05FLEVBQU1GLElBQU8sR0FDYkcsRUFBWSxFQUFQNVEsRUFBRSxHQUNQNlEsRUFBVyxLQUFMRCxFQUNORSxFQUFNRixJQUFPLEdBQ2JHLEVBQVksRUFBUC9RLEVBQUUsR0FDUGdSLEVBQVcsS0FBTEQsRUFDTkUsRUFBTUYsSUFBTyxHQUNiRyxFQUFZLEVBQVBsUixFQUFFLEdBQ1BtUixFQUFXLEtBQUxELEVBQ05FLEVBQU1GLElBQU8sR0FDYkcsRUFBWSxFQUFQclIsRUFBRSxHQUNQc1IsRUFBVyxLQUFMRCxFQUNORSxFQUFNRixJQUFPLEdBQ2JHLEVBQVksRUFBUHhSLEVBQUUsR0FDUHlSLEVBQVcsS0FBTEQsRUFDTkUsRUFBTUYsSUFBTyxHQUNiRyxFQUFZLEVBQVB0VixFQUFFLEdBQ1B1VixFQUFXLEtBQUxELEVBQ05FLEVBQU1GLElBQU8sR0FDYkcsRUFBWSxFQUFQelYsRUFBRSxHQUNQMFYsRUFBVyxLQUFMRCxFQUNORSxFQUFNRixJQUFPLEdBQ2JHLEVBQVksRUFBUDVWLEVBQUUsR0FDUDZWLEVBQVcsS0FBTEQsRUFDTkUsRUFBTUYsSUFBTyxHQUNiRyxFQUFZLEVBQVAvVixFQUFFLEdBQ1BnVyxFQUFXLEtBQUxELEVBQ05FLEVBQU1GLElBQU8sR0FDYkcsRUFBWSxFQUFQbFcsRUFBRSxHQUNQbVcsRUFBVyxLQUFMRCxFQUNORSxHQUFNRixJQUFPLEdBQ2JHLEdBQVksRUFBUHJXLEVBQUUsR0FDUHNXLEdBQVcsS0FBTEQsR0FDTkUsR0FBTUYsS0FBTyxHQUNiRyxHQUFZLEVBQVB4VyxFQUFFLEdBQ1B5VyxHQUFXLEtBQUxELEdBQ05FLEdBQU1GLEtBQU8sR0FDYkcsR0FBWSxFQUFQM1csRUFBRSxHQUNQNFcsR0FBVyxLQUFMRCxHQUNORSxHQUFNRixLQUFPLEdBQ2JHLEdBQVksRUFBUDlXLEVBQUUsR0FDUCtXLEdBQVcsS0FBTEQsR0FDTkUsR0FBTUYsS0FBTyxHQUNiRyxHQUFZLEVBQVBqWCxFQUFFLEdBQ1BrWCxHQUFXLEtBQUxELEdBQ05FLEdBQU1GLEtBQU8sR0FFakJoUyxFQUFJc0osU0FBVzJCLEVBQUszQixTQUFXeEUsRUFBSXdFLFNBQ25DdEosRUFBSWpVLE9BQVMsR0FNYixJQUFJb21CLElBQVFuVixHQUpaRSxFQUFLdFEsS0FBS3dsQixLQUFLNUQsRUFBSzhCLElBSUUsS0FBYSxNQUZuQ2pDLEdBREFBLEVBQU16aEIsS0FBS3dsQixLQUFLNUQsRUFBSytCLElBQ1IzakIsS0FBS3dsQixLQUFLM0QsRUFBSzZCLEdBQVEsS0FFVSxJQUFPLEVBQ3JEdFQsSUFGQUMsRUFBS3JRLEtBQUt3bEIsS0FBSzNELEVBQUs4QixLQUVQbEMsSUFBUSxJQUFPLElBQU04RCxLQUFPLElBQU8sRUFDaERBLElBQU0sU0FFTmpWLEVBQUt0USxLQUFLd2xCLEtBQUt6RCxFQUFLMkIsR0FFcEJqQyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUs0QixJQUNSM2pCLEtBQUt3bEIsS0FBS3hELEVBQUswQixHQUFRLEVBQ3BDclQsRUFBS3JRLEtBQUt3bEIsS0FBS3hELEVBQUsyQixHQUtwQixJQUFJOEIsSUFBUXJWLEdBSlpFLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs1RCxFQUFLaUMsR0FBUSxHQUlaLEtBQWEsTUFGbkNwQyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBSzVELEVBQUtrQyxHQUFRLEdBQ3ZCOWpCLEtBQUt3bEIsS0FBSzNELEVBQUtnQyxHQUFRLEtBRVUsSUFBTyxFQUNyRHpULElBRkFDLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUszRCxFQUFLaUMsR0FBUSxJQUVyQnJDLElBQVEsSUFBTyxJQUFNZ0UsS0FBTyxJQUFPLEVBQ2hEQSxJQUFNLFNBRU5uVixFQUFLdFEsS0FBS3dsQixLQUFLdEQsRUFBS3dCLEdBRXBCakMsR0FEQUEsRUFBTXpoQixLQUFLd2xCLEtBQUt0RCxFQUFLeUIsSUFDUjNqQixLQUFLd2xCLEtBQUtyRCxFQUFLdUIsR0FBUSxFQUNwQ3JULEVBQUtyUSxLQUFLd2xCLEtBQUtyRCxFQUFLd0IsR0FDcEJyVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLekQsRUFBSzhCLEdBQVEsRUFFbENwQyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUsrQixHQUFRLEdBQ3ZCOWpCLEtBQUt3bEIsS0FBS3hELEVBQUs2QixHQUFRLEVBQ3BDeFQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3hELEVBQUs4QixHQUFRLEVBS2xDLElBQUk0QixJQUFRdFYsR0FKWkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzVELEVBQUtvQyxHQUFRLEdBSVosS0FBYSxNQUZuQ3ZDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLNUQsRUFBS3FDLEdBQVEsR0FDdkJqa0IsS0FBS3dsQixLQUFLM0QsRUFBS21DLEdBQVEsS0FFVSxJQUFPLEVBQ3JENVQsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSzNELEVBQUtvQyxHQUFRLElBRXJCeEMsSUFBUSxJQUFPLElBQU1pRSxLQUFPLElBQU8sRUFDaERBLElBQU0sU0FFTnBWLEVBQUt0USxLQUFLd2xCLEtBQUtuRCxFQUFLcUIsR0FFcEJqQyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS25ELEVBQUtzQixJQUNSM2pCLEtBQUt3bEIsS0FBS2xELEVBQUtvQixHQUFRLEVBQ3BDclQsRUFBS3JRLEtBQUt3bEIsS0FBS2xELEVBQUtxQixHQUNwQnJULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt0RCxFQUFLMkIsR0FBUSxFQUVsQ3BDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdEQsRUFBSzRCLEdBQVEsR0FDdkI5akIsS0FBS3dsQixLQUFLckQsRUFBSzBCLEdBQVEsRUFDcEN4VCxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLckQsRUFBSzJCLEdBQVEsRUFDbEN4VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLekQsRUFBS2lDLEdBQVEsRUFFbEN2QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUtrQyxHQUFRLEdBQ3ZCamtCLEtBQUt3bEIsS0FBS3hELEVBQUtnQyxHQUFRLEVBQ3BDM1QsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3hELEVBQUtpQyxHQUFRLEVBS2xDLElBQUkwQixJQUFRdlYsR0FKWkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzVELEVBQUt1QyxHQUFRLEdBSVosS0FBYSxNQUZuQzFDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLNUQsRUFBS3dDLEdBQVEsR0FDdkJwa0IsS0FBS3dsQixLQUFLM0QsRUFBS3NDLEdBQVEsS0FFVSxJQUFPLEVBQ3JEL1QsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSzNELEVBQUt1QyxHQUFRLElBRXJCM0MsSUFBUSxJQUFPLElBQU1rRSxLQUFPLElBQU8sRUFDaERBLElBQU0sU0FFTnJWLEVBQUt0USxLQUFLd2xCLEtBQUtoRCxFQUFLa0IsR0FFcEJqQyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUttQixJQUNSM2pCLEtBQUt3bEIsS0FBSy9DLEVBQUtpQixHQUFRLEVBQ3BDclQsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUtrQixHQUNwQnJULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtuRCxFQUFLd0IsR0FBUSxFQUVsQ3BDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLbkQsRUFBS3lCLEdBQVEsR0FDdkI5akIsS0FBS3dsQixLQUFLbEQsRUFBS3VCLEdBQVEsRUFDcEN4VCxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLbEQsRUFBS3dCLEdBQVEsRUFDbEN4VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdEQsRUFBSzhCLEdBQVEsRUFFbEN2QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3RELEVBQUsrQixHQUFRLEdBQ3ZCamtCLEtBQUt3bEIsS0FBS3JELEVBQUs2QixHQUFRLEVBQ3BDM1QsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3JELEVBQUs4QixHQUFRLEVBQ2xDM1QsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3pELEVBQUtvQyxHQUFRLEVBRWxDMUMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUt6RCxFQUFLcUMsR0FBUSxHQUN2QnBrQixLQUFLd2xCLEtBQUt4RCxFQUFLbUMsR0FBUSxFQUNwQzlULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt4RCxFQUFLb0MsR0FBUSxFQUtsQyxJQUFJd0IsSUFBUXhWLEdBSlpFLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs1RCxFQUFLMEMsR0FBUSxHQUlaLEtBQWEsTUFGbkM3QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBSzVELEVBQUsyQyxJQUFRLEdBQ3ZCdmtCLEtBQUt3bEIsS0FBSzNELEVBQUt5QyxHQUFRLEtBRVUsSUFBTyxFQUNyRGxVLElBRkFDLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUszRCxFQUFLMEMsSUFBUSxJQUVyQjlDLElBQVEsSUFBTyxJQUFNbUUsS0FBTyxJQUFPLEVBQ2hEQSxJQUFNLFNBRU50VixFQUFLdFEsS0FBS3dsQixLQUFLN0MsRUFBS2UsR0FFcEJqQyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBSzdDLEVBQUtnQixJQUNSM2pCLEtBQUt3bEIsS0FBSzVDLEVBQUtjLEdBQVEsRUFDcENyVCxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBS2UsR0FDcEJyVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBS3FCLEdBQVEsRUFFbENwQyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUtzQixHQUFRLEdBQ3ZCOWpCLEtBQUt3bEIsS0FBSy9DLEVBQUtvQixHQUFRLEVBQ3BDeFQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUtxQixHQUFRLEVBQ2xDeFQsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS25ELEVBQUsyQixHQUFRLEVBRWxDdkMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtuRCxFQUFLNEIsR0FBUSxHQUN2QmprQixLQUFLd2xCLEtBQUtsRCxFQUFLMEIsR0FBUSxFQUNwQzNULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtsRCxFQUFLMkIsR0FBUSxFQUNsQzNULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt0RCxFQUFLaUMsR0FBUSxFQUVsQzFDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdEQsRUFBS2tDLEdBQVEsR0FDdkJwa0IsS0FBS3dsQixLQUFLckQsRUFBS2dDLEdBQVEsRUFDcEM5VCxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLckQsRUFBS2lDLEdBQVEsRUFDbEM5VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLekQsRUFBS3VDLEdBQVEsRUFFbEM3QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUt3QyxJQUFRLEdBQ3ZCdmtCLEtBQUt3bEIsS0FBS3hELEVBQUtzQyxHQUFRLEVBQ3BDalUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3hELEVBQUt1QyxJQUFRLEVBS2xDLElBQUlzQixJQUFRelYsR0FKWkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzVELEVBQUs2QyxJQUFRLEdBSVosS0FBYSxNQUZuQ2hELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLNUQsRUFBSzhDLElBQVEsR0FDdkIxa0IsS0FBS3dsQixLQUFLM0QsRUFBSzRDLElBQVEsS0FFVSxJQUFPLEVBQ3JEclUsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSzNELEVBQUs2QyxJQUFRLElBRXJCakQsSUFBUSxJQUFPLElBQU1vRSxLQUFPLElBQU8sRUFDaERBLElBQU0sU0FFTnZWLEVBQUt0USxLQUFLd2xCLEtBQUsxQyxFQUFLWSxHQUVwQmpDLEdBREFBLEVBQU16aEIsS0FBS3dsQixLQUFLMUMsRUFBS2EsSUFDUjNqQixLQUFLd2xCLEtBQUt6QyxFQUFLVyxHQUFRLEVBQ3BDclQsRUFBS3JRLEtBQUt3bEIsS0FBS3pDLEVBQUtZLEdBQ3BCclQsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzdDLEVBQUtrQixHQUFRLEVBRWxDcEMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs3QyxFQUFLbUIsR0FBUSxHQUN2QjlqQixLQUFLd2xCLEtBQUs1QyxFQUFLaUIsR0FBUSxFQUNwQ3hULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUs1QyxFQUFLa0IsR0FBUSxFQUNsQ3hULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtoRCxFQUFLd0IsR0FBUSxFQUVsQ3ZDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLaEQsRUFBS3lCLEdBQVEsR0FDdkJqa0IsS0FBS3dsQixLQUFLL0MsRUFBS3VCLEdBQVEsRUFDcEMzVCxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLL0MsRUFBS3dCLEdBQVEsRUFDbEMzVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLbkQsRUFBSzhCLEdBQVEsRUFFbEMxQyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS25ELEVBQUsrQixHQUFRLEdBQ3ZCcGtCLEtBQUt3bEIsS0FBS2xELEVBQUs2QixHQUFRLEVBQ3BDOVQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS2xELEVBQUs4QixHQUFRLEVBQ2xDOVQsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3RELEVBQUtvQyxHQUFRLEVBRWxDN0MsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUt0RCxFQUFLcUMsSUFBUSxHQUN2QnZrQixLQUFLd2xCLEtBQUtyRCxFQUFLbUMsR0FBUSxFQUNwQ2pVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtyRCxFQUFLb0MsSUFBUSxFQUNsQ2pVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt6RCxFQUFLMEMsSUFBUSxFQUVsQ2hELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLekQsRUFBSzJDLElBQVEsR0FDdkIxa0IsS0FBS3dsQixLQUFLeEQsRUFBS3lDLElBQVEsRUFDcENwVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLeEQsRUFBSzBDLElBQVEsRUFLbEMsSUFBSW9CLElBQVExVixHQUpaRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLNUQsRUFBS2dELElBQVEsR0FJWixLQUFhLE1BRm5DbkQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs1RCxFQUFLaUQsSUFBUSxHQUN2QjdrQixLQUFLd2xCLEtBQUszRCxFQUFLK0MsSUFBUSxLQUVVLElBQU8sRUFDckR4VSxJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLM0QsRUFBS2dELElBQVEsSUFFckJwRCxJQUFRLElBQU8sSUFBTXFFLEtBQU8sSUFBTyxFQUNoREEsSUFBTSxTQUVOeFYsRUFBS3RRLEtBQUt3bEIsS0FBS3ZDLEVBQUtTLEdBRXBCakMsR0FEQUEsRUFBTXpoQixLQUFLd2xCLEtBQUt2QyxFQUFLVSxJQUNSM2pCLEtBQUt3bEIsS0FBS3RDLEVBQUtRLEdBQVEsRUFDcENyVCxFQUFLclEsS0FBS3dsQixLQUFLdEMsRUFBS1MsR0FDcEJyVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLMUMsRUFBS2UsR0FBUSxFQUVsQ3BDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLMUMsRUFBS2dCLEdBQVEsR0FDdkI5akIsS0FBS3dsQixLQUFLekMsRUFBS2MsR0FBUSxFQUNwQ3hULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLZSxHQUFRLEVBQ2xDeFQsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzdDLEVBQUtxQixHQUFRLEVBRWxDdkMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs3QyxFQUFLc0IsR0FBUSxHQUN2QmprQixLQUFLd2xCLEtBQUs1QyxFQUFLb0IsR0FBUSxFQUNwQzNULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUs1QyxFQUFLcUIsR0FBUSxFQUNsQzNULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtoRCxFQUFLMkIsR0FBUSxFQUVsQzFDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLaEQsRUFBSzRCLEdBQVEsR0FDdkJwa0IsS0FBS3dsQixLQUFLL0MsRUFBSzBCLEdBQVEsRUFDcEM5VCxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLL0MsRUFBSzJCLEdBQVEsRUFDbEM5VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLbkQsRUFBS2lDLEdBQVEsRUFFbEM3QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS25ELEVBQUtrQyxJQUFRLEdBQ3ZCdmtCLEtBQUt3bEIsS0FBS2xELEVBQUtnQyxHQUFRLEVBQ3BDalUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS2xELEVBQUtpQyxJQUFRLEVBQ2xDalUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3RELEVBQUt1QyxJQUFRLEVBRWxDaEQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUt0RCxFQUFLd0MsSUFBUSxHQUN2QjFrQixLQUFLd2xCLEtBQUtyRCxFQUFLc0MsSUFBUSxFQUNwQ3BVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtyRCxFQUFLdUMsSUFBUSxFQUNsQ3BVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt6RCxFQUFLNkMsSUFBUSxFQUVsQ25ELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLekQsRUFBSzhDLElBQVEsR0FDdkI3a0IsS0FBS3dsQixLQUFLeEQsRUFBSzRDLElBQVEsRUFDcEN2VSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLeEQsRUFBSzZDLElBQVEsRUFLbEMsSUFBSWtCLElBQVEzVixHQUpaRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLNUQsRUFBS21ELElBQVEsR0FJWixLQUFhLE1BRm5DdEQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs1RCxFQUFLb0QsSUFBUSxHQUN2QmhsQixLQUFLd2xCLEtBQUszRCxFQUFLa0QsSUFBUSxLQUVVLElBQU8sRUFDckQzVSxJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLM0QsRUFBS21ELElBQVEsSUFFckJ2RCxJQUFRLElBQU8sSUFBTXNFLEtBQU8sSUFBTyxFQUNoREEsSUFBTSxTQUVOelYsRUFBS3RRLEtBQUt3bEIsS0FBS3BDLEVBQUtNLEdBRXBCakMsR0FEQUEsRUFBTXpoQixLQUFLd2xCLEtBQUtwQyxFQUFLTyxJQUNSM2pCLEtBQUt3bEIsS0FBS25DLEVBQUtLLEdBQVEsRUFDcENyVCxFQUFLclEsS0FBS3dsQixLQUFLbkMsRUFBS00sR0FDcEJyVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS1ksR0FBUSxFQUVsQ3BDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdkMsRUFBS2EsR0FBUSxHQUN2QjlqQixLQUFLd2xCLEtBQUt0QyxFQUFLVyxHQUFRLEVBQ3BDeFQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUtZLEdBQVEsRUFDbEN4VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLMUMsRUFBS2tCLEdBQVEsRUFFbEN2QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBSzFDLEVBQUttQixHQUFRLEdBQ3ZCamtCLEtBQUt3bEIsS0FBS3pDLEVBQUtpQixHQUFRLEVBQ3BDM1QsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3pDLEVBQUtrQixHQUFRLEVBQ2xDM1QsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzdDLEVBQUt3QixHQUFRLEVBRWxDMUMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs3QyxFQUFLeUIsR0FBUSxHQUN2QnBrQixLQUFLd2xCLEtBQUs1QyxFQUFLdUIsR0FBUSxFQUNwQzlULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUs1QyxFQUFLd0IsR0FBUSxFQUNsQzlULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtoRCxFQUFLOEIsR0FBUSxFQUVsQzdDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLaEQsRUFBSytCLElBQVEsR0FDdkJ2a0IsS0FBS3dsQixLQUFLL0MsRUFBSzZCLEdBQVEsRUFDcENqVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLL0MsRUFBSzhCLElBQVEsRUFDbENqVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLbkQsRUFBS29DLElBQVEsRUFFbENoRCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS25ELEVBQUtxQyxJQUFRLEdBQ3ZCMWtCLEtBQUt3bEIsS0FBS2xELEVBQUttQyxJQUFRLEVBQ3BDcFUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS2xELEVBQUtvQyxJQUFRLEVBQ2xDcFUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3RELEVBQUswQyxJQUFRLEVBRWxDbkQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUt0RCxFQUFLMkMsSUFBUSxHQUN2QjdrQixLQUFLd2xCLEtBQUtyRCxFQUFLeUMsSUFBUSxFQUNwQ3ZVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtyRCxFQUFLMEMsSUFBUSxFQUNsQ3ZVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt6RCxFQUFLZ0QsSUFBUSxFQUVsQ3RELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLekQsRUFBS2lELElBQVEsR0FDdkJobEIsS0FBS3dsQixLQUFLeEQsRUFBSytDLElBQVEsRUFDcEMxVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLeEQsRUFBS2dELElBQVEsRUFLbEMsSUFBSWdCLElBQVE1VixHQUpaRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLNUQsRUFBS3NELElBQVEsR0FJWixLQUFhLE1BRm5DekQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs1RCxFQUFLdUQsSUFBUSxHQUN2Qm5sQixLQUFLd2xCLEtBQUszRCxFQUFLcUQsSUFBUSxLQUVVLElBQU8sRUFDckQ5VSxJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLM0QsRUFBS3NELElBQVEsSUFFckIxRCxJQUFRLElBQU8sSUFBTXVFLEtBQU8sSUFBTyxFQUNoREEsSUFBTSxTQUVOMVYsRUFBS3RRLEtBQUt3bEIsS0FBS2pDLEVBQUtHLEdBRXBCakMsR0FEQUEsRUFBTXpoQixLQUFLd2xCLEtBQUtqQyxFQUFLSSxJQUNSM2pCLEtBQUt3bEIsS0FBS2hDLEVBQUtFLEdBQVEsRUFDcENyVCxFQUFLclEsS0FBS3dsQixLQUFLaEMsRUFBS0csR0FDcEJyVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLcEMsRUFBS1MsR0FBUSxFQUVsQ3BDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBS1UsR0FBUSxHQUN2QjlqQixLQUFLd2xCLEtBQUtuQyxFQUFLUSxHQUFRLEVBQ3BDeFQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS25DLEVBQUtTLEdBQVEsRUFDbEN4VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS2UsR0FBUSxFQUVsQ3ZDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdkMsRUFBS2dCLEdBQVEsR0FDdkJqa0IsS0FBS3dsQixLQUFLdEMsRUFBS2MsR0FBUSxFQUNwQzNULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt0QyxFQUFLZSxHQUFRLEVBQ2xDM1QsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUtxQixHQUFRLEVBRWxDMUMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUsxQyxFQUFLc0IsR0FBUSxHQUN2QnBrQixLQUFLd2xCLEtBQUt6QyxFQUFLb0IsR0FBUSxFQUNwQzlULEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLcUIsR0FBUSxFQUNsQzlULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs3QyxFQUFLMkIsR0FBUSxFQUVsQzdDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBSzRCLElBQVEsR0FDdkJ2a0IsS0FBS3dsQixLQUFLNUMsRUFBSzBCLEdBQVEsRUFDcENqVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBSzJCLElBQVEsRUFDbENqVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBS2lDLElBQVEsRUFFbENoRCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUtrQyxJQUFRLEdBQ3ZCMWtCLEtBQUt3bEIsS0FBSy9DLEVBQUtnQyxJQUFRLEVBQ3BDcFUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUtpQyxJQUFRLEVBQ2xDcFUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS25ELEVBQUt1QyxJQUFRLEVBRWxDbkQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtuRCxFQUFLd0MsSUFBUSxHQUN2QjdrQixLQUFLd2xCLEtBQUtsRCxFQUFLc0MsSUFBUSxFQUNwQ3ZVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtsRCxFQUFLdUMsSUFBUSxFQUNsQ3ZVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt0RCxFQUFLNkMsSUFBUSxFQUVsQ3RELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdEQsRUFBSzhDLElBQVEsR0FDdkJobEIsS0FBS3dsQixLQUFLckQsRUFBSzRDLElBQVEsRUFDcEMxVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLckQsRUFBSzZDLElBQVEsRUFDbEMxVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLekQsRUFBS21ELElBQVEsRUFFbEN6RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUtvRCxJQUFRLEdBQ3ZCbmxCLEtBQUt3bEIsS0FBS3hELEVBQUtrRCxJQUFRLEVBQ3BDN1UsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3hELEVBQUttRCxJQUFRLEVBS2xDLElBQUljLElBQVE3VixHQUpaRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLNUQsRUFBS3lELElBQVEsR0FJWixLQUFhLE1BRm5DNUQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUs1RCxFQUFLMEQsSUFBUSxHQUN2QnRsQixLQUFLd2xCLEtBQUszRCxFQUFLd0QsSUFBUSxLQUVVLElBQU8sRUFDckRqVixJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLM0QsRUFBS3lELElBQVEsSUFFckI3RCxJQUFRLElBQU8sSUFBTXdFLEtBQU8sSUFBTyxFQUNoREEsSUFBTSxTQUVOM1YsRUFBS3RRLEtBQUt3bEIsS0FBS2pDLEVBQUtNLEdBRXBCcEMsR0FEQUEsRUFBTXpoQixLQUFLd2xCLEtBQUtqQyxFQUFLTyxJQUNSOWpCLEtBQUt3bEIsS0FBS2hDLEVBQUtLLEdBQVEsRUFDcEN4VCxFQUFLclEsS0FBS3dsQixLQUFLaEMsRUFBS00sR0FDcEJ4VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLcEMsRUFBS1ksR0FBUSxFQUVsQ3ZDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBS2EsR0FBUSxHQUN2QmprQixLQUFLd2xCLEtBQUtuQyxFQUFLVyxHQUFRLEVBQ3BDM1QsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS25DLEVBQUtZLEdBQVEsRUFDbEMzVCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS2tCLEdBQVEsRUFFbEMxQyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3ZDLEVBQUttQixHQUFRLEdBQ3ZCcGtCLEtBQUt3bEIsS0FBS3RDLEVBQUtpQixHQUFRLEVBQ3BDOVQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUtrQixHQUFRLEVBQ2xDOVQsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUt3QixHQUFRLEVBRWxDN0MsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUsxQyxFQUFLeUIsSUFBUSxHQUN2QnZrQixLQUFLd2xCLEtBQUt6QyxFQUFLdUIsR0FBUSxFQUNwQ2pVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLd0IsSUFBUSxFQUNsQ2pVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs3QyxFQUFLOEIsSUFBUSxFQUVsQ2hELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBSytCLElBQVEsR0FDdkIxa0IsS0FBS3dsQixLQUFLNUMsRUFBSzZCLElBQVEsRUFDcENwVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBSzhCLElBQVEsRUFDbENwVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBS29DLElBQVEsRUFFbENuRCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUtxQyxJQUFRLEdBQ3ZCN2tCLEtBQUt3bEIsS0FBSy9DLEVBQUttQyxJQUFRLEVBQ3BDdlUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUtvQyxJQUFRLEVBQ2xDdlUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS25ELEVBQUswQyxJQUFRLEVBRWxDdEQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtuRCxFQUFLMkMsSUFBUSxHQUN2QmhsQixLQUFLd2xCLEtBQUtsRCxFQUFLeUMsSUFBUSxFQUNwQzFVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtsRCxFQUFLMEMsSUFBUSxFQUNsQzFVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt0RCxFQUFLZ0QsSUFBUSxFQUVsQ3pELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdEQsRUFBS2lELElBQVEsR0FDdkJubEIsS0FBS3dsQixLQUFLckQsRUFBSytDLElBQVEsRUFDcEM3VSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLckQsRUFBS2dELElBQVEsRUFLbEMsSUFBSWUsSUFBUzlWLEdBSmJFLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt6RCxFQUFLc0QsSUFBUSxHQUlYLEtBQWEsTUFGcEM1RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3pELEVBQUt1RCxJQUFRLEdBQ3ZCdGxCLEtBQUt3bEIsS0FBS3hELEVBQUtxRCxJQUFRLEtBRVcsSUFBTyxFQUN0RGpWLElBRkFDLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt4RCxFQUFLc0QsSUFBUSxJQUVyQjdELElBQVEsSUFBTyxJQUFNeUUsS0FBUSxJQUFPLEVBQ2pEQSxJQUFPLFNBRVA1VixFQUFLdFEsS0FBS3dsQixLQUFLakMsRUFBS1MsR0FFcEJ2QyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2pDLEVBQUtVLElBQ1Jqa0IsS0FBS3dsQixLQUFLaEMsRUFBS1EsR0FBUSxFQUNwQzNULEVBQUtyUSxLQUFLd2xCLEtBQUtoQyxFQUFLUyxHQUNwQjNULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtwQyxFQUFLZSxHQUFRLEVBRWxDMUMsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtwQyxFQUFLZ0IsR0FBUSxHQUN2QnBrQixLQUFLd2xCLEtBQUtuQyxFQUFLYyxHQUFRLEVBQ3BDOVQsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS25DLEVBQUtlLEdBQVEsRUFDbEM5VCxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS3FCLEdBQVEsRUFFbEM3QyxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3ZDLEVBQUtzQixJQUFRLEdBQ3ZCdmtCLEtBQUt3bEIsS0FBS3RDLEVBQUtvQixHQUFRLEVBQ3BDalUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUtxQixJQUFRLEVBQ2xDalUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUsyQixJQUFRLEVBRWxDaEQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUsxQyxFQUFLNEIsSUFBUSxHQUN2QjFrQixLQUFLd2xCLEtBQUt6QyxFQUFLMEIsSUFBUSxFQUNwQ3BVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLMkIsSUFBUSxFQUNsQ3BVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs3QyxFQUFLaUMsSUFBUSxFQUVsQ25ELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBS2tDLElBQVEsR0FDdkI3a0IsS0FBS3dsQixLQUFLNUMsRUFBS2dDLElBQVEsRUFDcEN2VSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBS2lDLElBQVEsRUFDbEN2VSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBS3VDLElBQVEsRUFFbEN0RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUt3QyxJQUFRLEdBQ3ZCaGxCLEtBQUt3bEIsS0FBSy9DLEVBQUtzQyxJQUFRLEVBQ3BDMVUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUt1QyxJQUFRLEVBQ2xDMVUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS25ELEVBQUs2QyxJQUFRLEVBRWxDekQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtuRCxFQUFLOEMsSUFBUSxHQUN2Qm5sQixLQUFLd2xCLEtBQUtsRCxFQUFLNEMsSUFBUSxFQUNwQzdVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtsRCxFQUFLNkMsSUFBUSxFQUtsQyxJQUFJZ0IsSUFBUy9WLEdBSmJFLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt0RCxFQUFLbUQsSUFBUSxHQUlYLEtBQWEsTUFGcEM1RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3RELEVBQUtvRCxJQUFRLEdBQ3ZCdGxCLEtBQUt3bEIsS0FBS3JELEVBQUtrRCxJQUFRLEtBRVcsSUFBTyxFQUN0RGpWLElBRkFDLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtyRCxFQUFLbUQsSUFBUSxJQUVyQjdELElBQVEsSUFBTyxJQUFNMEUsS0FBUSxJQUFPLEVBQ2pEQSxJQUFPLFNBRVA3VixFQUFLdFEsS0FBS3dsQixLQUFLakMsRUFBS1ksR0FFcEIxQyxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2pDLEVBQUthLElBQ1Jwa0IsS0FBS3dsQixLQUFLaEMsRUFBS1csR0FBUSxFQUNwQzlULEVBQUtyUSxLQUFLd2xCLEtBQUtoQyxFQUFLWSxHQUNwQjlULEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtwQyxFQUFLa0IsR0FBUSxFQUVsQzdDLEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBS21CLElBQVEsR0FDdkJ2a0IsS0FBS3dsQixLQUFLbkMsRUFBS2lCLEdBQVEsRUFDcENqVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLbkMsRUFBS2tCLElBQVEsRUFDbENqVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS3dCLElBQVEsRUFFbENoRCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3ZDLEVBQUt5QixJQUFRLEdBQ3ZCMWtCLEtBQUt3bEIsS0FBS3RDLEVBQUt1QixJQUFRLEVBQ3BDcFUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUt3QixJQUFRLEVBQ2xDcFUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUs4QixJQUFRLEVBRWxDbkQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUsxQyxFQUFLK0IsSUFBUSxHQUN2QjdrQixLQUFLd2xCLEtBQUt6QyxFQUFLNkIsSUFBUSxFQUNwQ3ZVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLOEIsSUFBUSxFQUNsQ3ZVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs3QyxFQUFLb0MsSUFBUSxFQUVsQ3RELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBS3FDLElBQVEsR0FDdkJobEIsS0FBS3dsQixLQUFLNUMsRUFBS21DLElBQVEsRUFDcEMxVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBS29DLElBQVEsRUFDbEMxVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBSzBDLElBQVEsRUFFbEN6RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS2hELEVBQUsyQyxJQUFRLEdBQ3ZCbmxCLEtBQUt3bEIsS0FBSy9DLEVBQUt5QyxJQUFRLEVBQ3BDN1UsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSy9DLEVBQUswQyxJQUFRLEVBS2xDLElBQUlpQixJQUFTaFcsR0FKYkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS25ELEVBQUtnRCxJQUFRLEdBSVgsS0FBYSxNQUZwQzVELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLbkQsRUFBS2lELElBQVEsR0FDdkJ0bEIsS0FBS3dsQixLQUFLbEQsRUFBSytDLElBQVEsS0FFVyxJQUFPLEVBQ3REalYsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS2xELEVBQUtnRCxJQUFRLElBRXJCN0QsSUFBUSxJQUFPLElBQU0yRSxLQUFRLElBQU8sRUFDakRBLElBQU8sU0FFUDlWLEVBQUt0USxLQUFLd2xCLEtBQUtqQyxFQUFLZSxHQUVwQjdDLEdBREFBLEVBQU16aEIsS0FBS3dsQixLQUFLakMsRUFBS2dCLEtBQ1J2a0IsS0FBS3dsQixLQUFLaEMsRUFBS2MsR0FBUSxFQUNwQ2pVLEVBQUtyUSxLQUFLd2xCLEtBQUtoQyxFQUFLZSxJQUNwQmpVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtwQyxFQUFLcUIsSUFBUSxFQUVsQ2hELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBS3NCLElBQVEsR0FDdkIxa0IsS0FBS3dsQixLQUFLbkMsRUFBS29CLElBQVEsRUFDcENwVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLbkMsRUFBS3FCLElBQVEsRUFDbENwVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBSzJCLElBQVEsRUFFbENuRCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3ZDLEVBQUs0QixJQUFRLEdBQ3ZCN2tCLEtBQUt3bEIsS0FBS3RDLEVBQUswQixJQUFRLEVBQ3BDdlUsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUsyQixJQUFRLEVBQ2xDdlUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUtpQyxJQUFRLEVBRWxDdEQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUsxQyxFQUFLa0MsSUFBUSxHQUN2QmhsQixLQUFLd2xCLEtBQUt6QyxFQUFLZ0MsSUFBUSxFQUNwQzFVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUt6QyxFQUFLaUMsSUFBUSxFQUNsQzFVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUs3QyxFQUFLdUMsSUFBUSxFQUVsQ3pELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBS3dDLElBQVEsR0FDdkJubEIsS0FBS3dsQixLQUFLNUMsRUFBS3NDLElBQVEsRUFDcEM3VSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLNUMsRUFBS3VDLElBQVEsRUFLbEMsSUFBSWtCLElBQVNqVyxHQUpiRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLaEQsRUFBSzZDLElBQVEsR0FJWCxLQUFhLE1BRnBDNUQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtoRCxFQUFLOEMsSUFBUSxHQUN2QnRsQixLQUFLd2xCLEtBQUsvQyxFQUFLNEMsSUFBUSxLQUVXLElBQU8sRUFDdERqVixJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLL0MsRUFBSzZDLElBQVEsSUFFckI3RCxJQUFRLElBQU8sSUFBTTRFLEtBQVEsSUFBTyxFQUNqREEsSUFBTyxTQUVQL1YsRUFBS3RRLEtBQUt3bEIsS0FBS2pDLEVBQUtrQixJQUVwQmhELEdBREFBLEVBQU16aEIsS0FBS3dsQixLQUFLakMsRUFBS21CLEtBQ1Ixa0IsS0FBS3dsQixLQUFLaEMsRUFBS2lCLElBQVEsRUFDcENwVSxFQUFLclEsS0FBS3dsQixLQUFLaEMsRUFBS2tCLElBQ3BCcFUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3BDLEVBQUt3QixJQUFRLEVBRWxDbkQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUtwQyxFQUFLeUIsSUFBUSxHQUN2QjdrQixLQUFLd2xCLEtBQUtuQyxFQUFLdUIsSUFBUSxFQUNwQ3ZVLEVBQU1BLEVBQUtyUSxLQUFLd2xCLEtBQUtuQyxFQUFLd0IsSUFBUSxFQUNsQ3ZVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUt2QyxFQUFLOEIsSUFBUSxFQUVsQ3RELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLdkMsRUFBSytCLElBQVEsR0FDdkJobEIsS0FBS3dsQixLQUFLdEMsRUFBSzZCLElBQVEsRUFDcEMxVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLdEMsRUFBSzhCLElBQVEsRUFDbEMxVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLMUMsRUFBS29DLElBQVEsRUFFbEN6RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBSzFDLEVBQUtxQyxJQUFRLEdBQ3ZCbmxCLEtBQUt3bEIsS0FBS3pDLEVBQUttQyxJQUFRLEVBQ3BDN1UsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3pDLEVBQUtvQyxJQUFRLEVBS2xDLElBQUltQixJQUFTbFcsR0FKYkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzdDLEVBQUswQyxJQUFRLEdBSVgsS0FBYSxNQUZwQzVELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLN0MsRUFBSzJDLElBQVEsR0FDdkJ0bEIsS0FBS3dsQixLQUFLNUMsRUFBS3lDLElBQVEsS0FFVyxJQUFPLEVBQ3REalYsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBSzVDLEVBQUswQyxJQUFRLElBRXJCN0QsSUFBUSxJQUFPLElBQU02RSxLQUFRLElBQU8sRUFDakRBLElBQU8sU0FFUGhXLEVBQUt0USxLQUFLd2xCLEtBQUtqQyxFQUFLcUIsSUFFcEJuRCxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2pDLEVBQUtzQixLQUNSN2tCLEtBQUt3bEIsS0FBS2hDLEVBQUtvQixJQUFRLEVBQ3BDdlUsRUFBS3JRLEtBQUt3bEIsS0FBS2hDLEVBQUtxQixJQUNwQnZVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtwQyxFQUFLMkIsSUFBUSxFQUVsQ3RELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBSzRCLElBQVEsR0FDdkJobEIsS0FBS3dsQixLQUFLbkMsRUFBSzBCLElBQVEsRUFDcEMxVSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLbkMsRUFBSzJCLElBQVEsRUFDbEMxVSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS2lDLElBQVEsRUFFbEN6RCxHQURBQSxFQUFPQSxFQUFNemhCLEtBQUt3bEIsS0FBS3ZDLEVBQUtrQyxJQUFRLEdBQ3ZCbmxCLEtBQUt3bEIsS0FBS3RDLEVBQUtnQyxJQUFRLEVBQ3BDN1UsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3RDLEVBQUtpQyxJQUFRLEVBS2xDLElBQUlvQixJQUFTblcsR0FKYkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBSzFDLEVBQUt1QyxJQUFRLEdBSVgsS0FBYSxNQUZwQzVELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLMUMsRUFBS3dDLElBQVEsR0FDdkJ0bEIsS0FBS3dsQixLQUFLekMsRUFBS3NDLElBQVEsS0FFVyxJQUFPLEVBQ3REalYsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS3pDLEVBQUt1QyxJQUFRLElBRXJCN0QsSUFBUSxJQUFPLElBQU04RSxLQUFRLElBQU8sRUFDakRBLElBQU8sU0FFUGpXLEVBQUt0USxLQUFLd2xCLEtBQUtqQyxFQUFLd0IsSUFFcEJ0RCxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2pDLEVBQUt5QixLQUNSaGxCLEtBQUt3bEIsS0FBS2hDLEVBQUt1QixJQUFRLEVBQ3BDMVUsRUFBS3JRLEtBQUt3bEIsS0FBS2hDLEVBQUt3QixJQUNwQjFVLEVBQU1BLEVBQUt0USxLQUFLd2xCLEtBQUtwQyxFQUFLOEIsSUFBUSxFQUVsQ3pELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBSytCLElBQVEsR0FDdkJubEIsS0FBS3dsQixLQUFLbkMsRUFBSzZCLElBQVEsRUFDcEM3VSxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLbkMsRUFBSzhCLElBQVEsRUFLbEMsSUFBSXFCLElBQVNwVyxHQUpiRSxFQUFNQSxFQUFLdFEsS0FBS3dsQixLQUFLdkMsRUFBS29DLElBQVEsR0FJWCxLQUFhLE1BRnBDNUQsR0FEQUEsRUFBT0EsRUFBTXpoQixLQUFLd2xCLEtBQUt2QyxFQUFLcUMsSUFBUSxHQUN2QnRsQixLQUFLd2xCLEtBQUt0QyxFQUFLbUMsSUFBUSxLQUVXLElBQU8sRUFDdERqVixJQUZBQyxFQUFNQSxFQUFLclEsS0FBS3dsQixLQUFLdEMsRUFBS29DLElBQVEsSUFFckI3RCxJQUFRLElBQU8sSUFBTStFLEtBQVEsSUFBTyxFQUNqREEsSUFBTyxTQUVQbFcsRUFBS3RRLEtBQUt3bEIsS0FBS2pDLEVBQUsyQixJQUVwQnpELEdBREFBLEVBQU16aEIsS0FBS3dsQixLQUFLakMsRUFBSzRCLEtBQ1JubEIsS0FBS3dsQixLQUFLaEMsRUFBSzBCLElBQVEsRUFDcEM3VSxFQUFLclEsS0FBS3dsQixLQUFLaEMsRUFBSzJCLElBS3BCLElBQUlzQixJQUFTclcsR0FKYkUsRUFBTUEsRUFBS3RRLEtBQUt3bEIsS0FBS3BDLEVBQUtpQyxJQUFRLEdBSVgsS0FBYSxNQUZwQzVELEdBREFBLEVBQU9BLEVBQU16aEIsS0FBS3dsQixLQUFLcEMsRUFBS2tDLElBQVEsR0FDdkJ0bEIsS0FBS3dsQixLQUFLbkMsRUFBS2dDLElBQVEsS0FFVyxJQUFPLEVBQ3REalYsSUFGQUMsRUFBTUEsRUFBS3JRLEtBQUt3bEIsS0FBS25DLEVBQUtpQyxJQUFRLElBRXJCN0QsSUFBUSxJQUFPLElBQU1nRixLQUFRLElBQU8sRUFDakRBLElBQU8sU0FNUCxJQUFJQyxJQUFTdFcsR0FKYkUsRUFBS3RRLEtBQUt3bEIsS0FBS2pDLEVBQUs4QixLQUlHLEtBQWEsTUFGcEM1RCxHQURBQSxFQUFNemhCLEtBQUt3bEIsS0FBS2pDLEVBQUsrQixLQUNSdGxCLEtBQUt3bEIsS0FBS2hDLEVBQUs2QixJQUFRLEtBRVcsSUFBTyxFQTBCdEQsT0F6QkFqVixJQUZBQyxFQUFLclEsS0FBS3dsQixLQUFLaEMsRUFBSzhCLE1BRVA3RCxJQUFRLElBQU8sSUFBTWlGLEtBQVEsSUFBTyxFQUNqREEsSUFBTyxTQUNQaEYsRUFBRSxHQUFLNkQsR0FDUDdELEVBQUUsR0FBSytELEdBQ1AvRCxFQUFFLEdBQUtnRSxHQUNQaEUsRUFBRSxHQUFLaUUsR0FDUGpFLEVBQUUsR0FBS2tFLEdBQ1BsRSxFQUFFLEdBQUttRSxHQUNQbkUsRUFBRSxHQUFLb0UsR0FDUHBFLEVBQUUsR0FBS3FFLEdBQ1ByRSxFQUFFLEdBQUtzRSxHQUNQdEUsRUFBRSxHQUFLdUUsR0FDUHZFLEVBQUUsSUFBTXdFLEdBQ1J4RSxFQUFFLElBQU15RSxHQUNSekUsRUFBRSxJQUFNMEUsR0FDUjFFLEVBQUUsSUFBTTJFLEdBQ1IzRSxFQUFFLElBQU00RSxHQUNSNUUsRUFBRSxJQUFNNkUsR0FDUjdFLEVBQUUsSUFBTThFLEdBQ1I5RSxFQUFFLElBQU0rRSxHQUNSL0UsRUFBRSxJQUFNZ0YsR0FDRSxJQUFOdFcsSUFDRnNSLEVBQUUsSUFBTXRSLEVBQ1JnRCxFQUFJalUsVUFFQ2lVLEdBaURULFNBQVN1VCxFQUFZdEksRUFBTW5HLEVBQUs5RSxHQUU5QixPQURXLElBQUl3VCxHQUNIQyxLQUFLeEksRUFBTW5HLEVBQUs5RSxHQXNCOUIsU0FBU3dULEVBQU03VSxFQUFHQyxHQUNoQjNRLEtBQUswUSxFQUFJQSxFQUNUMVEsS0FBSzJRLEVBQUlBLEVBdkVOaFMsS0FBS3dsQixPQUNSaEUsRUFBY3BELEdBaURoQnpHLEVBQUd4WixVQUFVMm9CLE1BQVEsU0FBZ0I1TyxFQUFLOUUsR0FDeEMsSUFDSXZHLEVBQU14TCxLQUFLbEMsT0FBUytZLEVBQUkvWSxPQVc1QixPQVZvQixLQUFoQmtDLEtBQUtsQyxRQUFnQyxLQUFmK1ksRUFBSS9ZLE9BQ3RCcWlCLEVBQVluZ0IsS0FBTTZXLEVBQUs5RSxHQUNwQnZHLEVBQU0sR0FDVHVSLEVBQVcvYyxLQUFNNlcsRUFBSzlFLEdBQ25CdkcsRUFBTSxLQXJEbkIsU0FBbUJ3UixFQUFNbkcsRUFBSzlFLEdBQzVCQSxFQUFJc0osU0FBV3hFLEVBQUl3RSxTQUFXMkIsRUFBSzNCLFNBQ25DdEosRUFBSWpVLE9BQVNrZixFQUFLbGYsT0FBUytZLEVBQUkvWSxPQUkvQixJQUZBLElBQUkwYyxFQUFRLEVBQ1JrTCxFQUFVLEVBQ0x2TyxFQUFJLEVBQUdBLEVBQUlwRixFQUFJalUsT0FBUyxFQUFHcVosSUFBSyxDQUd2QyxJQUFJOEYsRUFBU3lJLEVBQ2JBLEVBQVUsRUFHVixJQUZBLElBQUl4SSxFQUFnQixTQUFSMUMsRUFDUjJDLEVBQU94ZSxLQUFLK0YsSUFBSXlTLEVBQUdOLEVBQUkvWSxPQUFTLEdBQzNCaVEsRUFBSXBQLEtBQUs0RixJQUFJLEVBQUc0UyxFQUFJNkYsRUFBS2xmLE9BQVMsR0FBSWlRLEdBQUtvUCxFQUFNcFAsSUFBSyxDQUM3RCxJQUFJdE0sRUFBSTBWLEVBQUlwSixFQUdScUksR0FGb0IsRUFBaEI0RyxFQUFLbmMsTUFBTVksS0FDSSxFQUFmb1YsRUFBSWhXLE1BQU1rTixJQUdka0IsRUFBUyxTQUFKbUgsRUFHVDhHLEVBQWEsVUFEYmpPLEVBQU1BLEVBQUtpTyxFQUFTLEdBSXBCd0ksSUFGQXpJLEdBSEFBLEVBQVVBLEdBQVc3RyxFQUFJLFNBQWEsR0FBTSxJQUd4Qm5ILElBQU8sSUFBTyxLQUVaLEdBQ3RCZ08sR0FBVSxTQUVabEwsRUFBSWxSLE1BQU1zVyxHQUFLK0YsRUFDZjFDLEVBQVF5QyxFQUNSQSxFQUFTeUksRUFRWCxPQU5jLElBQVZsTCxFQUNGekksRUFBSWxSLE1BQU1zVyxHQUFLcUQsRUFFZnpJLEVBQUlqVSxTQUdDaVUsRUFBSW1LLFFBZ0JIeUosQ0FBUzNsQixLQUFNNlcsRUFBSzlFLEdBRXBCdVQsRUFBV3RsQixLQUFNNlcsRUFBSzlFLElBY2hDd1QsRUFBS3pvQixVQUFVOG9CLFFBQVUsU0FBa0JDLEdBR3pDLElBRkEsSUFBSTVILEVBQUksSUFBSXJNLE1BQU1pVSxHQUNkMVAsRUFBSUcsRUFBR3haLFVBQVVraEIsV0FBVzZILEdBQUssRUFDNUJwa0IsRUFBSSxFQUFHQSxFQUFJb2tCLEVBQUdwa0IsSUFDckJ3YyxFQUFFeGMsR0FBS3pCLEtBQUs4bEIsT0FBT3JrQixFQUFHMFUsRUFBRzBQLEdBRzNCLE9BQU81SCxHQUlUc0gsRUFBS3pvQixVQUFVZ3BCLE9BQVMsU0FBaUJwVixFQUFHeUYsRUFBRzBQLEdBQzdDLEdBQVUsSUFBTm5WLEdBQVdBLElBQU1tVixFQUFJLEVBQUcsT0FBT25WLEVBR25DLElBREEsSUFBSXFWLEVBQUssRUFDQXRrQixFQUFJLEVBQUdBLEVBQUkwVSxFQUFHMVUsSUFDckJza0IsSUFBVyxFQUFKclYsSUFBV3lGLEVBQUkxVSxFQUFJLEVBQzFCaVAsSUFBTSxFQUdSLE9BQU9xVixHQUtUUixFQUFLem9CLFVBQVVrcEIsUUFBVSxTQUFrQkMsRUFBS0MsRUFBS0MsRUFBS0MsRUFBTUMsRUFBTVIsR0FDcEUsSUFBSyxJQUFJcGtCLEVBQUksRUFBR0EsRUFBSW9rQixFQUFHcGtCLElBQ3JCMmtCLEVBQUsza0IsR0FBS3lrQixFQUFJRCxFQUFJeGtCLElBQ2xCNGtCLEVBQUs1a0IsR0FBSzBrQixFQUFJRixFQUFJeGtCLEtBSXRCOGpCLEVBQUt6b0IsVUFBVXdwQixVQUFZLFNBQW9CSixFQUFLQyxFQUFLQyxFQUFNQyxFQUFNUixFQUFHSSxHQUN0RWptQixLQUFLZ21CLFFBQVFDLEVBQUtDLEVBQUtDLEVBQUtDLEVBQU1DLEVBQU1SLEdBRXhDLElBQUssSUFBSVUsRUFBSSxFQUFHQSxFQUFJVixFQUFHVSxJQUFNLEVBTTNCLElBTEEsSUFBSXBRLEVBQUlvUSxHQUFLLEVBRVRDLEVBQVE3bkIsS0FBSzhuQixJQUFJLEVBQUk5bkIsS0FBSytuQixHQUFLdlEsR0FDL0J3USxFQUFRaG9CLEtBQUtpb0IsSUFBSSxFQUFJam9CLEtBQUsrbkIsR0FBS3ZRLEdBRTFCNkMsRUFBSSxFQUFHQSxFQUFJNk0sRUFBRzdNLEdBQUs3QyxFQUkxQixJQUhBLElBQUkwUSxFQUFTTCxFQUNUTSxFQUFTSCxFQUVKNVksRUFBSSxFQUFHQSxFQUFJd1ksRUFBR3hZLElBQUssQ0FDMUIsSUFBSWdaLEVBQUtYLEVBQUtwTixFQUFJakwsR0FDZGlaLEVBQUtYLEVBQUtyTixFQUFJakwsR0FFZGtaLEVBQUtiLEVBQUtwTixFQUFJakwsRUFBSXdZLEdBQ2xCVyxFQUFLYixFQUFLck4sRUFBSWpMLEVBQUl3WSxHQUVsQlksRUFBS04sRUFBU0ksRUFBS0gsRUFBU0ksRUFFaENBLEVBQUtMLEVBQVNLLEVBQUtKLEVBQVNHLEVBQzVCQSxFQUFLRSxFQUVMZixFQUFLcE4sRUFBSWpMLEdBQUtnWixFQUFLRSxFQUNuQlosRUFBS3JOLEVBQUlqTCxHQUFLaVosRUFBS0UsRUFFbkJkLEVBQUtwTixFQUFJakwsRUFBSXdZLEdBQUtRLEVBQUtFLEVBQ3ZCWixFQUFLck4sRUFBSWpMLEVBQUl3WSxHQUFLUyxFQUFLRSxFQUduQm5aLElBQU1vSSxJQUNSZ1IsRUFBS1gsRUFBUUssRUFBU0YsRUFBUUcsRUFFOUJBLEVBQVNOLEVBQVFNLEVBQVNILEVBQVFFLEVBQ2xDQSxFQUFTTSxLQU9uQjVCLEVBQUt6b0IsVUFBVXNxQixZQUFjLFNBQXNCcmEsRUFBR0MsR0FDcEQsSUFBSTZZLEVBQXFCLEVBQWpCbG5CLEtBQUs0RixJQUFJeUksRUFBR0QsR0FDaEJzYSxFQUFVLEVBQUp4QixFQUNOcGtCLEVBQUksRUFDUixJQUFLb2tCLEVBQUlBLEVBQUksRUFBSSxFQUFHQSxFQUFHQSxLQUFVLEVBQy9CcGtCLElBR0YsT0FBTyxHQUFLQSxFQUFJLEVBQUk0bEIsR0FHdEI5QixFQUFLem9CLFVBQVV3cUIsVUFBWSxTQUFvQnBCLEVBQUtDLEVBQUtOLEdBQ3ZELEtBQUlBLEdBQUssR0FFVCxJQUFLLElBQUlwa0IsRUFBSSxFQUFHQSxFQUFJb2tCLEVBQUksRUFBR3BrQixJQUFLLENBQzlCLElBQUl3YyxFQUFJaUksRUFBSXprQixHQUVaeWtCLEVBQUl6a0IsR0FBS3lrQixFQUFJTCxFQUFJcGtCLEVBQUksR0FDckJ5a0IsRUFBSUwsRUFBSXBrQixFQUFJLEdBQUt3YyxFQUVqQkEsRUFBSWtJLEVBQUkxa0IsR0FFUjBrQixFQUFJMWtCLElBQU0wa0IsRUFBSU4sRUFBSXBrQixFQUFJLEdBQ3RCMGtCLEVBQUlOLEVBQUlwa0IsRUFBSSxJQUFNd2MsSUFJdEJzSCxFQUFLem9CLFVBQVV5cUIsYUFBZSxTQUF1QnJRLEVBQUkyTyxHQUV2RCxJQURBLElBQUlyTCxFQUFRLEVBQ0gvWSxFQUFJLEVBQUdBLEVBQUlva0IsRUFBSSxFQUFHcGtCLElBQUssQ0FDOUIsSUFBSXFWLEVBQW9DLEtBQWhDblksS0FBSzZvQixNQUFNdFEsRUFBRyxFQUFJelYsRUFBSSxHQUFLb2tCLEdBQ2pDbG5CLEtBQUs2b0IsTUFBTXRRLEVBQUcsRUFBSXpWLEdBQUtva0IsR0FDdkJyTCxFQUVGdEQsRUFBR3pWLEdBQVMsU0FBSnFWLEVBR04wRCxFQURFMUQsRUFBSSxTQUNFLEVBRUFBLEVBQUksU0FBWSxFQUk1QixPQUFPSSxHQUdUcU8sRUFBS3pvQixVQUFVMnFCLFdBQWEsU0FBcUJ2USxFQUFJMUwsRUFBSzBhLEVBQUtMLEdBRTdELElBREEsSUFBSXJMLEVBQVEsRUFDSC9ZLEVBQUksRUFBR0EsRUFBSStKLEVBQUsvSixJQUN2QitZLEdBQXlCLEVBQVJ0RCxFQUFHelYsR0FFcEJ5a0IsRUFBSSxFQUFJemtCLEdBQWEsS0FBUitZLEVBQWdCQSxLQUFrQixHQUMvQzBMLEVBQUksRUFBSXprQixFQUFJLEdBQWEsS0FBUitZLEVBQWdCQSxLQUFrQixHQUlyRCxJQUFLL1ksRUFBSSxFQUFJK0osRUFBSy9KLEVBQUlva0IsSUFBS3BrQixFQUN6QnlrQixFQUFJemtCLEdBQUssRUFHWHVVLEVBQWlCLElBQVZ3RSxHQUNQeEUsRUFBNkIsS0FBYixLQUFSd0UsS0FHVitLLEVBQUt6b0IsVUFBVTRxQixLQUFPLFNBQWU3QixHQUVuQyxJQURBLElBQUk4QixFQUFLLElBQUkvVixNQUFNaVUsR0FDVnBrQixFQUFJLEVBQUdBLEVBQUlva0IsRUFBR3BrQixJQUNyQmttQixFQUFHbG1CLEdBQUssRUFHVixPQUFPa21CLEdBR1RwQyxFQUFLem9CLFVBQVUwb0IsS0FBTyxTQUFlOVUsRUFBR0MsRUFBR29CLEdBQ3pDLElBQUk4VCxFQUFJLEVBQUk3bEIsS0FBS29uQixZQUFZMVcsRUFBRTVTLE9BQVE2UyxFQUFFN1MsUUFFckNtb0IsRUFBTWptQixLQUFLNGxCLFFBQVFDLEdBRW5CK0IsRUFBSTVuQixLQUFLMG5CLEtBQUs3QixHQUVkSyxFQUFNLElBQUl0VSxNQUFNaVUsR0FDaEJnQyxFQUFPLElBQUlqVyxNQUFNaVUsR0FDakJpQyxFQUFPLElBQUlsVyxNQUFNaVUsR0FFakJrQyxFQUFPLElBQUluVyxNQUFNaVUsR0FDakJtQyxFQUFRLElBQUlwVyxNQUFNaVUsR0FDbEJvQyxFQUFRLElBQUlyVyxNQUFNaVUsR0FFbEJxQyxFQUFPblcsRUFBSWxSLE1BQ2ZxbkIsRUFBS3BxQixPQUFTK25CLEVBRWQ3bEIsS0FBS3luQixXQUFXL1csRUFBRTdQLE1BQU82UCxFQUFFNVMsT0FBUW9vQixFQUFLTCxHQUN4QzdsQixLQUFLeW5CLFdBQVc5VyxFQUFFOVAsTUFBTzhQLEVBQUU3UyxPQUFRaXFCLEVBQU1sQyxHQUV6QzdsQixLQUFLc21CLFVBQVVKLEVBQUswQixFQUFHQyxFQUFNQyxFQUFNakMsRUFBR0ksR0FDdENqbUIsS0FBS3NtQixVQUFVeUIsRUFBTUgsRUFBR0ksRUFBT0MsRUFBT3BDLEVBQUdJLEdBRXpDLElBQUssSUFBSXhrQixFQUFJLEVBQUdBLEVBQUlva0IsRUFBR3BrQixJQUFLLENBQzFCLElBQUkwbEIsRUFBS1UsRUFBS3BtQixHQUFLdW1CLEVBQU12bUIsR0FBS3FtQixFQUFLcm1CLEdBQUt3bUIsRUFBTXhtQixHQUM5Q3FtQixFQUFLcm1CLEdBQUtvbUIsRUFBS3BtQixHQUFLd21CLEVBQU14bUIsR0FBS3FtQixFQUFLcm1CLEdBQUt1bUIsRUFBTXZtQixHQUMvQ29tQixFQUFLcG1CLEdBQUswbEIsRUFVWixPQVBBbm5CLEtBQUtzbkIsVUFBVU8sRUFBTUMsRUFBTWpDLEdBQzNCN2xCLEtBQUtzbUIsVUFBVXVCLEVBQU1DLEVBQU1JLEVBQU1OLEVBQUcvQixFQUFHSSxHQUN2Q2ptQixLQUFLc25CLFVBQVVZLEVBQU1OLEVBQUcvQixHQUN4QjdsQixLQUFLdW5CLGFBQWFXLEVBQU1yQyxHQUV4QjlULEVBQUlzSixTQUFXM0ssRUFBRTJLLFNBQVcxSyxFQUFFMEssU0FDOUJ0SixFQUFJalUsT0FBUzRTLEVBQUU1UyxPQUFTNlMsRUFBRTdTLE9BQ25CaVUsRUFBSW1LLFNBSWI1RixFQUFHeFosVUFBVWlXLElBQU0sU0FBYzhELEdBQy9CLElBQUk5RSxFQUFNLElBQUl1RSxFQUFHLE1BRWpCLE9BREF2RSxFQUFJbFIsTUFBUSxJQUFJK1EsTUFBTTVSLEtBQUtsQyxPQUFTK1ksRUFBSS9ZLFFBQ2pDa0MsS0FBS3lsQixNQUFNNU8sRUFBSzlFLElBSXpCdUUsRUFBR3haLFVBQVVxckIsS0FBTyxTQUFldFIsR0FDakMsSUFBSTlFLEVBQU0sSUFBSXVFLEVBQUcsTUFFakIsT0FEQXZFLEVBQUlsUixNQUFRLElBQUkrUSxNQUFNNVIsS0FBS2xDLE9BQVMrWSxFQUFJL1ksUUFDakN3bkIsRUFBV3RsQixLQUFNNlcsRUFBSzlFLElBSS9CdUUsRUFBR3haLFVBQVVxbkIsS0FBTyxTQUFldE4sR0FDakMsT0FBTzdXLEtBQUtXLFFBQVE4a0IsTUFBTTVPLEVBQUs3VyxPQUdqQ3NXLEVBQUd4WixVQUFVeWYsTUFBUSxTQUFnQjFGLEdBQ25DYixFQUFzQixpQkFBUmEsR0FDZGIsRUFBT2EsRUFBTSxVQUliLElBREEsSUFBSTJELEVBQVEsRUFDSC9ZLEVBQUksRUFBR0EsRUFBSXpCLEtBQUtsQyxPQUFRMkQsSUFBSyxDQUNwQyxJQUFJcVYsR0FBcUIsRUFBaEI5VyxLQUFLYSxNQUFNWSxJQUFVb1YsRUFDMUI1SCxHQUFVLFNBQUo2SCxJQUEwQixTQUFSMEQsR0FDNUJBLElBQVUsR0FDVkEsR0FBVTFELEVBQUksU0FBYSxFQUUzQjBELEdBQVN2TCxJQUFPLEdBQ2hCalAsS0FBS2EsTUFBTVksR0FBVSxTQUFMd04sRUFRbEIsT0FMYyxJQUFWdUwsSUFDRnhhLEtBQUthLE1BQU1ZLEdBQUsrWSxFQUNoQnhhLEtBQUtsQyxVQUdBa0MsTUFHVHNXLEVBQUd4WixVQUFVc3JCLEtBQU8sU0FBZXZSLEdBQ2pDLE9BQU83VyxLQUFLVyxRQUFRNGIsTUFBTTFGLElBSTVCUCxFQUFHeFosVUFBVXVyQixJQUFNLFdBQ2pCLE9BQU9yb0IsS0FBSytTLElBQUkvUyxPQUlsQnNXLEVBQUd4WixVQUFVd3JCLEtBQU8sV0FDbEIsT0FBT3RvQixLQUFLbWtCLEtBQUtua0IsS0FBS1csVUFJeEIyVixFQUFHeFosVUFBVXdXLElBQU0sU0FBY3VELEdBQy9CLElBQUlDLEVBeHhDTixTQUFxQkQsR0FHbkIsSUFGQSxJQUFJQyxFQUFJLElBQUlsRixNQUFNaUYsRUFBSUksYUFFYjZJLEVBQU0sRUFBR0EsRUFBTWhKLEVBQUVoWixPQUFRZ2lCLElBQU8sQ0FDdkMsSUFBSTNELEVBQU8yRCxFQUFNLEdBQU0sRUFDbkJDLEVBQU9ELEVBQU0sR0FFakJoSixFQUFFZ0osSUFBUWpKLEVBQUloVyxNQUFNc2IsR0FBUSxHQUFLNEQsS0FBV0EsRUFHOUMsT0FBT2pKLEVBOHdDQ3lSLENBQVcxUixHQUNuQixHQUFpQixJQUFiQyxFQUFFaFosT0FBYyxPQUFPLElBQUl3WSxFQUFHLEdBSWxDLElBREEsSUFBSWxILEVBQU1wUCxLQUNEeUIsRUFBSSxFQUFHQSxFQUFJcVYsRUFBRWhaLFFBQ1AsSUFBVGdaLEVBQUVyVixHQURzQkEsSUFBSzJOLEVBQU1BLEVBQUlpWixPQUk3QyxLQUFNNW1CLEVBQUlxVixFQUFFaFosT0FDVixJQUFLLElBQUlnZ0IsRUFBSTFPLEVBQUlpWixNQUFPNW1CLEVBQUlxVixFQUFFaFosT0FBUTJELElBQUtxYyxFQUFJQSxFQUFFdUssTUFDbEMsSUFBVHZSLEVBQUVyVixLQUVOMk4sRUFBTUEsRUFBSTJELElBQUkrSyxJQUlsQixPQUFPMU8sR0FJVGtILEVBQUd4WixVQUFVMHJCLE9BQVMsU0FBaUJ6UixHQUNyQ2YsRUFBdUIsaUJBQVRlLEdBQXFCQSxHQUFRLEdBQzNDLElBR0l0VixFQUhBMlUsRUFBSVcsRUFBTyxHQUNYd1AsR0FBS3hQLEVBQU9YLEdBQUssR0FDakJxUyxFQUFhLFdBQWUsR0FBS3JTLEdBQVEsR0FBS0EsRUFHbEQsR0FBVSxJQUFOQSxFQUFTLENBQ1gsSUFBSW9FLEVBQVEsRUFFWixJQUFLL1ksRUFBSSxFQUFHQSxFQUFJekIsS0FBS2xDLE9BQVEyRCxJQUFLLENBQ2hDLElBQUlpbkIsRUFBVzFvQixLQUFLYSxNQUFNWSxHQUFLZ25CLEVBQzNCMVosR0FBc0IsRUFBaEIvTyxLQUFLYSxNQUFNWSxJQUFVaW5CLEdBQWF0UyxFQUM1Q3BXLEtBQUthLE1BQU1ZLEdBQUtzTixFQUFJeUwsRUFDcEJBLEVBQVFrTyxJQUFjLEdBQUt0UyxFQUd6Qm9FLElBQ0Z4YSxLQUFLYSxNQUFNWSxHQUFLK1ksRUFDaEJ4YSxLQUFLbEMsVUFJVCxHQUFVLElBQU55b0IsRUFBUyxDQUNYLElBQUs5a0IsRUFBSXpCLEtBQUtsQyxPQUFTLEVBQUcyRCxHQUFLLEVBQUdBLElBQ2hDekIsS0FBS2EsTUFBTVksRUFBSThrQixHQUFLdm1CLEtBQUthLE1BQU1ZLEdBR2pDLElBQUtBLEVBQUksRUFBR0EsRUFBSThrQixFQUFHOWtCLElBQ2pCekIsS0FBS2EsTUFBTVksR0FBSyxFQUdsQnpCLEtBQUtsQyxRQUFVeW9CLEVBR2pCLE9BQU92bUIsS0FBS2tjLFNBR2Q1RixFQUFHeFosVUFBVTZyQixNQUFRLFNBQWdCNVIsR0FHbkMsT0FEQWYsRUFBeUIsSUFBbEJoVyxLQUFLcWIsVUFDTHJiLEtBQUt3b0IsT0FBT3pSLElBTXJCVCxFQUFHeFosVUFBVTJhLE9BQVMsU0FBaUJWLEVBQU02UixFQUFNQyxHQUVqRCxJQUFJQyxFQURKOVMsRUFBdUIsaUJBQVRlLEdBQXFCQSxHQUFRLEdBR3pDK1IsRUFERUYsR0FDR0EsRUFBUUEsRUFBTyxJQUFPLEdBRXZCLEVBR04sSUFBSXhTLEVBQUlXLEVBQU8sR0FDWHdQLEVBQUk1bkIsS0FBSytGLEtBQUtxUyxFQUFPWCxHQUFLLEdBQUlwVyxLQUFLbEMsUUFDbkNpckIsRUFBTyxTQUFjLFdBQWMzUyxHQUFNQSxFQUN6QzRTLEVBQWNILEVBTWxCLEdBSkFDLEdBQUt2QyxFQUNMdUMsRUFBSW5xQixLQUFLNEYsSUFBSSxFQUFHdWtCLEdBR1pFLEVBQWEsQ0FDZixJQUFLLElBQUl2bkIsRUFBSSxFQUFHQSxFQUFJOGtCLEVBQUc5a0IsSUFDckJ1bkIsRUFBWW5vQixNQUFNWSxHQUFLekIsS0FBS2EsTUFBTVksR0FFcEN1bkIsRUFBWWxyQixPQUFTeW9CLEVBR3ZCLEdBQVUsSUFBTkEsUUFFRyxHQUFJdm1CLEtBQUtsQyxPQUFTeW9CLEVBRXZCLElBREF2bUIsS0FBS2xDLFFBQVV5b0IsRUFDVjlrQixFQUFJLEVBQUdBLEVBQUl6QixLQUFLbEMsT0FBUTJELElBQzNCekIsS0FBS2EsTUFBTVksR0FBS3pCLEtBQUthLE1BQU1ZLEVBQUk4a0IsUUFHakN2bUIsS0FBS2EsTUFBTSxHQUFLLEVBQ2hCYixLQUFLbEMsT0FBUyxFQUdoQixJQUFJMGMsRUFBUSxFQUNaLElBQUsvWSxFQUFJekIsS0FBS2xDLE9BQVMsRUFBRzJELEdBQUssSUFBZ0IsSUFBVitZLEdBQWUvWSxHQUFLcW5CLEdBQUlybkIsSUFBSyxDQUNoRSxJQUFJcVgsRUFBdUIsRUFBaEI5WSxLQUFLYSxNQUFNWSxHQUN0QnpCLEtBQUthLE1BQU1ZLEdBQU0rWSxHQUFVLEdBQUtwRSxFQUFPMEMsSUFBUzFDLEVBQ2hEb0UsRUFBUTFCLEVBQU9pUSxFQWFqQixPQVRJQyxHQUF5QixJQUFWeE8sSUFDakJ3TyxFQUFZbm9CLE1BQU1tb0IsRUFBWWxyQixVQUFZMGMsR0FHeEIsSUFBaEJ4YSxLQUFLbEMsU0FDUGtDLEtBQUthLE1BQU0sR0FBSyxFQUNoQmIsS0FBS2xDLE9BQVMsR0FHVGtDLEtBQUtrYyxTQUdkNUYsRUFBR3haLFVBQVVtc0IsTUFBUSxTQUFnQmxTLEVBQU02UixFQUFNQyxHQUcvQyxPQURBN1MsRUFBeUIsSUFBbEJoVyxLQUFLcWIsVUFDTHJiLEtBQUt5WCxPQUFPVixFQUFNNlIsRUFBTUMsSUFJakN2UyxFQUFHeFosVUFBVW9zQixLQUFPLFNBQWVuUyxHQUNqQyxPQUFPL1csS0FBS1csUUFBUWdvQixNQUFNNVIsSUFHNUJULEVBQUd4WixVQUFVcXNCLE1BQVEsU0FBZ0JwUyxHQUNuQyxPQUFPL1csS0FBS1csUUFBUTZuQixPQUFPelIsSUFJN0JULEVBQUd4WixVQUFVc3NCLEtBQU8sU0FBZXJTLEdBQ2pDLE9BQU8vVyxLQUFLVyxRQUFRc29CLE1BQU1sUyxJQUc1QlQsRUFBR3haLFVBQVV1c0IsTUFBUSxTQUFnQnRTLEdBQ25DLE9BQU8vVyxLQUFLVyxRQUFROFcsT0FBT1YsSUFJN0JULEVBQUd4WixVQUFVNGhCLE1BQVEsU0FBZ0JvQixHQUNuQzlKLEVBQXNCLGlCQUFSOEosR0FBb0JBLEdBQU8sR0FDekMsSUFBSTFKLEVBQUkwSixFQUFNLEdBQ1Z5RyxHQUFLekcsRUFBTTFKLEdBQUssR0FDaEIwSCxFQUFJLEdBQUsxSCxFQUdiLFFBQUlwVyxLQUFLbEMsUUFBVXlvQixPQUdYdm1CLEtBQUthLE1BQU0wbEIsR0FFTHpJLElBSWhCeEgsRUFBR3haLFVBQVV3c0IsT0FBUyxTQUFpQnZTLEdBQ3JDZixFQUF1QixpQkFBVGUsR0FBcUJBLEdBQVEsR0FDM0MsSUFBSVgsRUFBSVcsRUFBTyxHQUNYd1AsR0FBS3hQLEVBQU9YLEdBQUssR0FJckIsR0FGQUosRUFBeUIsSUFBbEJoVyxLQUFLcWIsU0FBZ0IsMkNBRXhCcmIsS0FBS2xDLFFBQVV5b0IsRUFDakIsT0FBT3ZtQixLQVFULEdBTFUsSUFBTm9XLEdBQ0ZtUSxJQUVGdm1CLEtBQUtsQyxPQUFTYSxLQUFLK0YsSUFBSTZoQixFQUFHdm1CLEtBQUtsQyxRQUVyQixJQUFOc1ksRUFBUyxDQUNYLElBQUkyUyxFQUFPLFNBQWMsV0FBYzNTLEdBQU1BLEVBQzdDcFcsS0FBS2EsTUFBTWIsS0FBS2xDLE9BQVMsSUFBTWlyQixFQUdqQyxPQUFPL29CLEtBQUtrYyxTQUlkNUYsRUFBR3haLFVBQVV5c0IsTUFBUSxTQUFnQnhTLEdBQ25DLE9BQU8vVyxLQUFLVyxRQUFRMm9CLE9BQU92UyxJQUk3QlQsRUFBR3haLFVBQVUwaEIsTUFBUSxTQUFnQjNILEdBR25DLE9BRkFiLEVBQXNCLGlCQUFSYSxHQUNkYixFQUFPYSxFQUFNLFVBQ1RBLEVBQU0sRUFBVTdXLEtBQUt3WCxPQUFPWCxHQUdWLElBQWxCN1csS0FBS3FiLFNBQ2EsSUFBaEJyYixLQUFLbEMsU0FBaUMsRUFBaEJrQyxLQUFLYSxNQUFNLElBQVVnVyxHQUM3QzdXLEtBQUthLE1BQU0sR0FBS2dXLEdBQXVCLEVBQWhCN1csS0FBS2EsTUFBTSxJQUNsQ2IsS0FBS3FiLFNBQVcsRUFDVHJiLE9BR1RBLEtBQUtxYixTQUFXLEVBQ2hCcmIsS0FBS3dYLE1BQU1YLEdBQ1g3VyxLQUFLcWIsU0FBVyxFQUNUcmIsTUFJRkEsS0FBS3djLE9BQU8zRixJQUdyQlAsRUFBR3haLFVBQVUwZixPQUFTLFNBQWlCM0YsR0FDckM3VyxLQUFLYSxNQUFNLElBQU1nVyxFQUdqQixJQUFLLElBQUlwVixFQUFJLEVBQUdBLEVBQUl6QixLQUFLbEMsUUFBVWtDLEtBQUthLE1BQU1ZLElBQU0sU0FBV0EsSUFDN0R6QixLQUFLYSxNQUFNWSxJQUFNLFNBQ2JBLElBQU16QixLQUFLbEMsT0FBUyxFQUN0QmtDLEtBQUthLE1BQU1ZLEVBQUksR0FBSyxFQUVwQnpCLEtBQUthLE1BQU1ZLEVBQUksS0FLbkIsT0FGQXpCLEtBQUtsQyxPQUFTYSxLQUFLNEYsSUFBSXZFLEtBQUtsQyxPQUFRMkQsRUFBSSxHQUVqQ3pCLE1BSVRzVyxFQUFHeFosVUFBVTBhLE1BQVEsU0FBZ0JYLEdBR25DLEdBRkFiLEVBQXNCLGlCQUFSYSxHQUNkYixFQUFPYSxFQUFNLFVBQ1RBLEVBQU0sRUFBRyxPQUFPN1csS0FBS3dlLE9BQU8zSCxHQUVoQyxHQUFzQixJQUFsQjdXLEtBQUtxYixTQUlQLE9BSEFyYixLQUFLcWIsU0FBVyxFQUNoQnJiLEtBQUt3ZSxNQUFNM0gsR0FDWDdXLEtBQUtxYixTQUFXLEVBQ1RyYixLQUtULEdBRkFBLEtBQUthLE1BQU0sSUFBTWdXLEVBRUcsSUFBaEI3VyxLQUFLbEMsUUFBZ0JrQyxLQUFLYSxNQUFNLEdBQUssRUFDdkNiLEtBQUthLE1BQU0sSUFBTWIsS0FBS2EsTUFBTSxHQUM1QmIsS0FBS3FiLFNBQVcsT0FHaEIsSUFBSyxJQUFJNVosRUFBSSxFQUFHQSxFQUFJekIsS0FBS2xDLFFBQVVrQyxLQUFLYSxNQUFNWSxHQUFLLEVBQUdBLElBQ3BEekIsS0FBS2EsTUFBTVksSUFBTSxTQUNqQnpCLEtBQUthLE1BQU1ZLEVBQUksSUFBTSxFQUl6QixPQUFPekIsS0FBS2tjLFNBR2Q1RixFQUFHeFosVUFBVTBzQixLQUFPLFNBQWUzUyxHQUNqQyxPQUFPN1csS0FBS1csUUFBUTZkLE1BQU0zSCxJQUc1QlAsRUFBR3haLFVBQVUyc0IsS0FBTyxTQUFlNVMsR0FDakMsT0FBTzdXLEtBQUtXLFFBQVE2VyxNQUFNWCxJQUc1QlAsRUFBR3haLFVBQVU0c0IsS0FBTyxXQUdsQixPQUZBMXBCLEtBQUtxYixTQUFXLEVBRVRyYixNQUdUc1csRUFBR3haLFVBQVV3aEIsSUFBTSxXQUNqQixPQUFPdGUsS0FBS1csUUFBUStvQixRQUd0QnBULEVBQUd4WixVQUFVNnNCLGFBQWUsU0FBdUI5UyxFQUFLOUQsRUFBSzZXLEdBQzNELElBQ0lub0IsRUFJQXFWLEVBTEF0TCxFQUFNcUwsRUFBSS9ZLE9BQVM4ckIsRUFHdkI1cEIsS0FBSzBjLFFBQVFsUixHQUdiLElBQUlnUCxFQUFRLEVBQ1osSUFBSy9ZLEVBQUksRUFBR0EsRUFBSW9WLEVBQUkvWSxPQUFRMkQsSUFBSyxDQUMvQnFWLEdBQTZCLEVBQXhCOVcsS0FBS2EsTUFBTVksRUFBSW1vQixJQUFjcFAsRUFDbEMsSUFBSW9CLEdBQXdCLEVBQWYvRSxFQUFJaFcsTUFBTVksSUFBVXNSLEVBRWpDeUgsSUFEQTFELEdBQWEsU0FBUjhFLElBQ1MsS0FBUUEsRUFBUSxTQUFhLEdBQzNDNWIsS0FBS2EsTUFBTVksRUFBSW1vQixHQUFhLFNBQUo5UyxFQUUxQixLQUFPclYsRUFBSXpCLEtBQUtsQyxPQUFTOHJCLEVBQU9ub0IsSUFFOUIrWSxHQURBMUQsR0FBNkIsRUFBeEI5VyxLQUFLYSxNQUFNWSxFQUFJbW9CLElBQWNwUCxJQUNyQixHQUNieGEsS0FBS2EsTUFBTVksRUFBSW1vQixHQUFhLFNBQUo5UyxFQUcxQixHQUFjLElBQVYwRCxFQUFhLE9BQU94YSxLQUFLa2MsUUFLN0IsSUFGQWxHLEdBQWtCLElBQVh3RSxHQUNQQSxFQUFRLEVBQ0gvWSxFQUFJLEVBQUdBLEVBQUl6QixLQUFLbEMsT0FBUTJELElBRTNCK1ksR0FEQTFELElBQXNCLEVBQWhCOVcsS0FBS2EsTUFBTVksSUFBVStZLElBQ2QsR0FDYnhhLEtBQUthLE1BQU1ZLEdBQVMsU0FBSnFWLEVBSWxCLE9BRkE5VyxLQUFLcWIsU0FBVyxFQUVUcmIsS0FBS2tjLFNBR2Q1RixFQUFHeFosVUFBVStzQixTQUFXLFNBQW1CaFQsRUFBS3BQLEdBQzlDLElBQUltaUIsR0FBUTVwQixLQUFLbEMsT0FBUytZLEVBQUkvWSxRQUUxQjJTLEVBQUl6USxLQUFLVyxRQUNUbU0sRUFBSStKLEVBR0ppVCxFQUE4QixFQUF4QmhkLEVBQUVqTSxNQUFNaU0sRUFBRWhQLE9BQVMsR0FHZixLQURkOHJCLEVBQVEsR0FETTVwQixLQUFLZ2UsV0FBVzhMLE1BRzVCaGQsRUFBSUEsRUFBRXFjLE1BQU1TLEdBQ1puWixFQUFFK1gsT0FBT29CLEdBQ1RFLEVBQThCLEVBQXhCaGQsRUFBRWpNLE1BQU1pTSxFQUFFaFAsT0FBUyxJQUkzQixJQUNJZ2dCLEVBREE5USxFQUFJeUQsRUFBRTNTLE9BQVNnUCxFQUFFaFAsT0FHckIsR0FBYSxRQUFUMkosRUFBZ0IsRUFDbEJxVyxFQUFJLElBQUl4SCxFQUFHLE9BQ1R4WSxPQUFTa1AsRUFBSSxFQUNmOFEsRUFBRWpkLE1BQVEsSUFBSStRLE1BQU1rTSxFQUFFaGdCLFFBQ3RCLElBQUssSUFBSTJELEVBQUksRUFBR0EsRUFBSXFjLEVBQUVoZ0IsT0FBUTJELElBQzVCcWMsRUFBRWpkLE1BQU1ZLEdBQUssRUFJakIsSUFBSXNvQixFQUFPdFosRUFBRTlQLFFBQVFncEIsYUFBYTdjLEVBQUcsRUFBR0UsR0FDbEIsSUFBbEIrYyxFQUFLMU8sV0FDUDVLLEVBQUlzWixFQUNBak0sSUFDRkEsRUFBRWpkLE1BQU1tTSxHQUFLLElBSWpCLElBQUssSUFBSWUsRUFBSWYsRUFBSSxFQUFHZSxHQUFLLEVBQUdBLElBQUssQ0FDL0IsSUFBSWljLEVBQW1DLFVBQUwsRUFBeEJ2WixFQUFFNVAsTUFBTWlNLEVBQUVoUCxPQUFTaVEsS0FDRSxFQUE1QjBDLEVBQUU1UCxNQUFNaU0sRUFBRWhQLE9BQVNpUSxFQUFJLElBTzFCLElBSEFpYyxFQUFLcnJCLEtBQUsrRixJQUFLc2xCLEVBQUtGLEVBQU8sRUFBRyxVQUU5QnJaLEVBQUVrWixhQUFhN2MsRUFBR2tkLEVBQUlqYyxHQUNBLElBQWYwQyxFQUFFNEssVUFDUDJPLElBQ0F2WixFQUFFNEssU0FBVyxFQUNiNUssRUFBRWtaLGFBQWE3YyxFQUFHLEVBQUdpQixHQUNoQjBDLEVBQUU2TSxXQUNMN00sRUFBRTRLLFVBQVksR0FHZHlDLElBQ0ZBLEVBQUVqZCxNQUFNa04sR0FBS2ljLEdBYWpCLE9BVklsTSxHQUNGQSxFQUFFNUIsUUFFSnpMLEVBQUV5TCxRQUdXLFFBQVR6VSxHQUE0QixJQUFWbWlCLEdBQ3BCblosRUFBRWdILE9BQU9tUyxHQUdKLENBQ0xLLElBQUtuTSxHQUFLLEtBQ1Z6RyxJQUFLNUcsSUFRVDZGLEVBQUd4WixVQUFVb3RCLE9BQVMsU0FBaUJyVCxFQUFLcFAsRUFBTTBpQixHQUdoRCxPQUZBblUsR0FBUWEsRUFBSXlHLFVBRVJ0ZCxLQUFLc2QsU0FDQSxDQUNMMk0sSUFBSyxJQUFJM1QsRUFBRyxHQUNaZSxJQUFLLElBQUlmLEVBQUcsSUFLTSxJQUFsQnRXLEtBQUtxYixVQUFtQyxJQUFqQnhFLEVBQUl3RSxVQUM3QmpNLEVBQU1wUCxLQUFLOGUsTUFBTW9MLE9BQU9yVCxFQUFLcFAsR0FFaEIsUUFBVEEsSUFDRndpQixFQUFNN2EsRUFBSTZhLElBQUluTCxPQUdILFFBQVRyWCxJQUNGNFAsRUFBTWpJLEVBQUlpSSxJQUFJeUgsTUFDVnFMLEdBQTZCLElBQWpCOVMsRUFBSWdFLFVBQ2xCaEUsRUFBSTJJLEtBQUtuSixJQUlOLENBQ0xvVCxJQUFLQSxFQUNMNVMsSUFBS0EsSUFJYSxJQUFsQnJYLEtBQUtxYixVQUFtQyxJQUFqQnhFLEVBQUl3RSxVQUM3QmpNLEVBQU1wUCxLQUFLa3FCLE9BQU9yVCxFQUFJaUksTUFBT3JYLEdBRWhCLFFBQVRBLElBQ0Z3aUIsRUFBTTdhLEVBQUk2YSxJQUFJbkwsT0FHVCxDQUNMbUwsSUFBS0EsRUFDTDVTLElBQUtqSSxFQUFJaUksTUFJMEIsSUFBbENyWCxLQUFLcWIsU0FBV3hFLEVBQUl3RSxXQUN2QmpNLEVBQU1wUCxLQUFLOGUsTUFBTW9MLE9BQU9yVCxFQUFJaUksTUFBT3JYLEdBRXRCLFFBQVRBLElBQ0Y0UCxFQUFNakksRUFBSWlJLElBQUl5SCxNQUNWcUwsR0FBNkIsSUFBakI5UyxFQUFJZ0UsVUFDbEJoRSxFQUFJNEksS0FBS3BKLElBSU4sQ0FDTG9ULElBQUs3YSxFQUFJNmEsSUFDVDVTLElBQUtBLElBT0xSLEVBQUkvWSxPQUFTa0MsS0FBS2xDLFFBQVVrQyxLQUFLNmIsSUFBSWhGLEdBQU8sRUFDdkMsQ0FDTG9ULElBQUssSUFBSTNULEVBQUcsR0FDWmUsSUFBS3JYLE1BS1UsSUFBZjZXLEVBQUkvWSxPQUNPLFFBQVQySixFQUNLLENBQ0x3aUIsSUFBS2pxQixLQUFLb3FCLEtBQUt2VCxFQUFJaFcsTUFBTSxJQUN6QndXLElBQUssTUFJSSxRQUFUNVAsRUFDSyxDQUNMd2lCLElBQUssS0FDTDVTLElBQUssSUFBSWYsRUFBR3RXLEtBQUt1ZCxLQUFLMUcsRUFBSWhXLE1BQU0sTUFJN0IsQ0FDTG9wQixJQUFLanFCLEtBQUtvcUIsS0FBS3ZULEVBQUloVyxNQUFNLElBQ3pCd1csSUFBSyxJQUFJZixFQUFHdFcsS0FBS3VkLEtBQUsxRyxFQUFJaFcsTUFBTSxNQUk3QmIsS0FBSzZwQixTQUFTaFQsRUFBS3BQLEdBbEYxQixJQUFJd2lCLEVBQUs1UyxFQUFLakksR0FzRmhCa0gsRUFBR3haLFVBQVVtdEIsSUFBTSxTQUFjcFQsR0FDL0IsT0FBTzdXLEtBQUtrcUIsT0FBT3JULEVBQUssT0FBTyxHQUFPb1QsS0FJeEMzVCxFQUFHeFosVUFBVXVhLElBQU0sU0FBY1IsR0FDL0IsT0FBTzdXLEtBQUtrcUIsT0FBT3JULEVBQUssT0FBTyxHQUFPUSxLQUd4Q2YsRUFBR3haLFVBQVV1dEIsS0FBTyxTQUFleFQsR0FDakMsT0FBTzdXLEtBQUtrcUIsT0FBT3JULEVBQUssT0FBTyxHQUFNUSxLQUl2Q2YsRUFBR3haLFVBQVV3dEIsU0FBVyxTQUFtQnpULEdBQ3pDLElBQUkwVCxFQUFLdnFCLEtBQUtrcUIsT0FBT3JULEdBR3JCLEdBQUkwVCxFQUFHbFQsSUFBSWlHLFNBQVUsT0FBT2lOLEVBQUdOLElBRS9CLElBQUk1UyxFQUEwQixJQUFwQmtULEVBQUdOLElBQUk1TyxTQUFpQmtQLEVBQUdsVCxJQUFJNEksS0FBS3BKLEdBQU8wVCxFQUFHbFQsSUFFcERtVCxFQUFPM1QsRUFBSXdTLE1BQU0sR0FDakJvQixFQUFLNVQsRUFBSVMsTUFBTSxHQUNmdUUsRUFBTXhFLEVBQUl3RSxJQUFJMk8sR0FHbEIsT0FBSTNPLEVBQU0sR0FBWSxJQUFQNE8sR0FBb0IsSUFBUjVPLEVBQWtCME8sRUFBR04sSUFHckIsSUFBcEJNLEVBQUdOLElBQUk1TyxTQUFpQmtQLEVBQUdOLElBQUl6UyxNQUFNLEdBQUsrUyxFQUFHTixJQUFJekwsTUFBTSxJQUdoRWxJLEVBQUd4WixVQUFVeWdCLEtBQU8sU0FBZTFHLEdBQ2pDYixFQUFPYSxHQUFPLFVBSWQsSUFIQSxJQUFJbUMsR0FBSyxHQUFLLElBQU1uQyxFQUVoQjZULEVBQU0sRUFDRGpwQixFQUFJekIsS0FBS2xDLE9BQVMsRUFBRzJELEdBQUssRUFBR0EsSUFDcENpcEIsR0FBTzFSLEVBQUkwUixHQUF1QixFQUFoQjFxQixLQUFLYSxNQUFNWSxLQUFXb1YsRUFHMUMsT0FBTzZULEdBSVRwVSxFQUFHeFosVUFBVTBnQixNQUFRLFNBQWdCM0csR0FDbkNiLEVBQU9hLEdBQU8sVUFHZCxJQURBLElBQUkyRCxFQUFRLEVBQ0gvWSxFQUFJekIsS0FBS2xDLE9BQVMsRUFBRzJELEdBQUssRUFBR0EsSUFBSyxDQUN6QyxJQUFJcVYsR0FBcUIsRUFBaEI5VyxLQUFLYSxNQUFNWSxJQUFrQixTQUFSK1ksRUFDOUJ4YSxLQUFLYSxNQUFNWSxHQUFNcVYsRUFBSUQsRUFBTyxFQUM1QjJELEVBQVExRCxFQUFJRCxFQUdkLE9BQU83VyxLQUFLa2MsU0FHZDVGLEVBQUd4WixVQUFVc3RCLEtBQU8sU0FBZXZULEdBQ2pDLE9BQU83VyxLQUFLVyxRQUFRNmMsTUFBTTNHLElBRzVCUCxFQUFHeFosVUFBVTZ0QixLQUFPLFNBQWUzUixHQUNqQ2hELEVBQXNCLElBQWZnRCxFQUFFcUMsVUFDVHJGLEdBQVFnRCxFQUFFc0UsVUFFVixJQUFJNU0sRUFBSTFRLEtBQ0oyUSxFQUFJcUksRUFBRXJZLFFBR1IrUCxFQURpQixJQUFmQSxFQUFFMkssU0FDQTNLLEVBQUUyWixLQUFLclIsR0FFUHRJLEVBQUUvUCxRQWFSLElBVEEsSUFBSWlxQixFQUFJLElBQUl0VSxFQUFHLEdBQ1h1VSxFQUFJLElBQUl2VSxFQUFHLEdBR1g1VyxFQUFJLElBQUk0VyxFQUFHLEdBQ1h3VSxFQUFJLElBQUl4VSxFQUFHLEdBRVh5VSxFQUFJLEVBRURyYSxFQUFFc2EsVUFBWXJhLEVBQUVxYSxVQUNyQnRhLEVBQUUrRyxPQUFPLEdBQ1Q5RyxFQUFFOEcsT0FBTyxLQUNQc1QsRUFNSixJQUhBLElBQUlFLEVBQUt0YSxFQUFFaFEsUUFDUHVxQixFQUFLeGEsRUFBRS9QLFNBRUgrUCxFQUFFNE0sVUFBVSxDQUNsQixJQUFLLElBQUk3YixFQUFJLEVBQUcwcEIsRUFBSyxFQUF5QixJQUFyQnphLEVBQUU3UCxNQUFNLEdBQUtzcUIsSUFBYTFwQixFQUFJLEtBQU1BLEVBQUcwcEIsSUFBTyxHQUN2RSxHQUFJMXBCLEVBQUksRUFFTixJQURBaVAsRUFBRStHLE9BQU9oVyxHQUNGQSxLQUFNLElBQ1BtcEIsRUFBRXJULFNBQVdzVCxFQUFFdFQsV0FDakJxVCxFQUFFNUssS0FBS2lMLEdBQ1BKLEVBQUU1SyxLQUFLaUwsSUFHVE4sRUFBRW5ULE9BQU8sR0FDVG9ULEVBQUVwVCxPQUFPLEdBSWIsSUFBSyxJQUFJMUosRUFBSSxFQUFHcWQsRUFBSyxFQUF5QixJQUFyQnphLEVBQUU5UCxNQUFNLEdBQUt1cUIsSUFBYXJkLEVBQUksS0FBTUEsRUFBR3FkLElBQU8sR0FDdkUsR0FBSXJkLEVBQUksRUFFTixJQURBNEMsRUFBRThHLE9BQU8xSixHQUNGQSxLQUFNLElBQ1ByTyxFQUFFNlgsU0FBV3VULEVBQUV2VCxXQUNqQjdYLEVBQUVzZ0IsS0FBS2lMLEdBQ1BILEVBQUU3SyxLQUFLaUwsSUFHVHhyQixFQUFFK1gsT0FBTyxHQUNUcVQsRUFBRXJULE9BQU8sR0FJVC9HLEVBQUVtTCxJQUFJbEwsSUFBTSxHQUNkRCxFQUFFdVAsS0FBS3RQLEdBQ1BpYSxFQUFFM0ssS0FBS3ZnQixHQUNQbXJCLEVBQUU1SyxLQUFLNkssS0FFUG5hLEVBQUVzUCxLQUFLdlAsR0FDUGhSLEVBQUV1Z0IsS0FBSzJLLEdBQ1BFLEVBQUU3SyxLQUFLNEssSUFJWCxNQUFPLENBQ0xwYSxFQUFHL1EsRUFDSG9OLEVBQUdnZSxFQUNITyxJQUFLMWEsRUFBRTZYLE9BQU91QyxLQU9sQnpVLEVBQUd4WixVQUFVd3VCLE9BQVMsU0FBaUJ0UyxHQUNyQ2hELEVBQXNCLElBQWZnRCxFQUFFcUMsVUFDVHJGLEdBQVFnRCxFQUFFc0UsVUFFVixJQUFJN00sRUFBSXpRLEtBQ0o4TSxFQUFJa00sRUFBRXJZLFFBR1I4UCxFQURpQixJQUFmQSxFQUFFNEssU0FDQTVLLEVBQUU0WixLQUFLclIsR0FFUHZJLEVBQUU5UCxRQVFSLElBTEEsSUF1Q0l5TyxFQXZDQW1jLEVBQUssSUFBSWpWLEVBQUcsR0FDWmtWLEVBQUssSUFBSWxWLEVBQUcsR0FFWm1WLEVBQVEzZSxFQUFFbk0sUUFFUDhQLEVBQUV1SCxLQUFLLEdBQUssR0FBS2xMLEVBQUVrTCxLQUFLLEdBQUssR0FBRyxDQUNyQyxJQUFLLElBQUl2VyxFQUFJLEVBQUcwcEIsRUFBSyxFQUF5QixJQUFyQjFhLEVBQUU1UCxNQUFNLEdBQUtzcUIsSUFBYTFwQixFQUFJLEtBQU1BLEVBQUcwcEIsSUFBTyxHQUN2RSxHQUFJMXBCLEVBQUksRUFFTixJQURBZ1AsRUFBRWdILE9BQU9oVyxHQUNGQSxLQUFNLEdBQ1A4cEIsRUFBR2hVLFNBQ0xnVSxFQUFHdkwsS0FBS3lMLEdBR1ZGLEVBQUc5VCxPQUFPLEdBSWQsSUFBSyxJQUFJMUosRUFBSSxFQUFHcWQsRUFBSyxFQUF5QixJQUFyQnRlLEVBQUVqTSxNQUFNLEdBQUt1cUIsSUFBYXJkLEVBQUksS0FBTUEsRUFBR3FkLElBQU8sR0FDdkUsR0FBSXJkLEVBQUksRUFFTixJQURBakIsRUFBRTJLLE9BQU8xSixHQUNGQSxLQUFNLEdBQ1B5ZCxFQUFHalUsU0FDTGlVLEVBQUd4TCxLQUFLeUwsR0FHVkQsRUFBRy9ULE9BQU8sR0FJVmhILEVBQUVvTCxJQUFJL08sSUFBTSxHQUNkMkQsRUFBRXdQLEtBQUtuVCxHQUNQeWUsRUFBR3RMLEtBQUt1TCxLQUVSMWUsRUFBRW1ULEtBQUt4UCxHQUNQK2EsRUFBR3ZMLEtBQUtzTCxJQWVaLE9BVEVuYyxFQURnQixJQUFkcUIsRUFBRXVILEtBQUssR0FDSHVULEVBRUFDLEdBR0F4VCxLQUFLLEdBQUssR0FDaEI1SSxFQUFJNFEsS0FBS2hILEdBR0o1SixHQUdUa0gsRUFBR3haLFVBQVV1dUIsSUFBTSxTQUFjeFUsR0FDL0IsR0FBSTdXLEtBQUtzZCxTQUFVLE9BQU96RyxFQUFJeUgsTUFDOUIsR0FBSXpILEVBQUl5RyxTQUFVLE9BQU90ZCxLQUFLc2UsTUFFOUIsSUFBSTdOLEVBQUl6USxLQUFLVyxRQUNUbU0sRUFBSStKLEVBQUlsVyxRQUNaOFAsRUFBRTRLLFNBQVcsRUFDYnZPLEVBQUV1TyxTQUFXLEVBR2IsSUFBSyxJQUFJdU8sRUFBUSxFQUFHblosRUFBRXVhLFVBQVlsZSxFQUFFa2UsU0FBVXBCLElBQzVDblosRUFBRWdILE9BQU8sR0FDVDNLLEVBQUUySyxPQUFPLEdBR1gsT0FBRyxDQUNELEtBQU9oSCxFQUFFdWEsVUFDUHZhLEVBQUVnSCxPQUFPLEdBRVgsS0FBTzNLLEVBQUVrZSxVQUNQbGUsRUFBRTJLLE9BQU8sR0FHWCxJQUFJckIsRUFBSTNGLEVBQUVvTCxJQUFJL08sR0FDZCxHQUFJc0osRUFBSSxFQUFHLENBRVQsSUFBSTZILEVBQUl4TixFQUNSQSxFQUFJM0QsRUFDSkEsRUFBSW1SLE9BQ0MsR0FBVSxJQUFON0gsR0FBeUIsSUFBZHRKLEVBQUVrTCxLQUFLLEdBQzNCLE1BR0Z2SCxFQUFFd1AsS0FBS25ULEdBR1QsT0FBT0EsRUFBRTBiLE9BQU9vQixJQUlsQnRULEVBQUd4WixVQUFVNHVCLEtBQU8sU0FBZTdVLEdBQ2pDLE9BQU83VyxLQUFLMnFCLEtBQUs5VCxHQUFLcEcsRUFBRTRaLEtBQUt4VCxJQUcvQlAsRUFBR3haLFVBQVVrdUIsT0FBUyxXQUNwQixPQUErQixJQUFQLEVBQWhCaHJCLEtBQUthLE1BQU0sS0FHckJ5VixFQUFHeFosVUFBVXlhLE1BQVEsV0FDbkIsT0FBK0IsSUFBUCxFQUFoQnZYLEtBQUthLE1BQU0sS0FJckJ5VixFQUFHeFosVUFBVXdhLE1BQVEsU0FBZ0JULEdBQ25DLE9BQU83VyxLQUFLYSxNQUFNLEdBQUtnVyxHQUl6QlAsRUFBR3haLFVBQVU2dUIsTUFBUSxTQUFnQjdMLEdBQ25DOUosRUFBc0IsaUJBQVI4SixHQUNkLElBQUkxSixFQUFJMEosRUFBTSxHQUNWeUcsR0FBS3pHLEVBQU0xSixHQUFLLEdBQ2hCMEgsRUFBSSxHQUFLMUgsRUFHYixHQUFJcFcsS0FBS2xDLFFBQVV5b0IsRUFHakIsT0FGQXZtQixLQUFLMGMsUUFBUTZKLEVBQUksR0FDakJ2bUIsS0FBS2EsTUFBTTBsQixJQUFNekksRUFDVjlkLEtBS1QsSUFEQSxJQUFJd2EsRUFBUXNELEVBQ0hyYyxFQUFJOGtCLEVBQWEsSUFBVi9MLEdBQWUvWSxFQUFJekIsS0FBS2xDLE9BQVEyRCxJQUFLLENBQ25ELElBQUlxVixFQUFvQixFQUFoQjlXLEtBQUthLE1BQU1ZLEdBRW5CK1ksR0FEQTFELEdBQUswRCxLQUNTLEdBQ2QxRCxHQUFLLFNBQ0w5VyxLQUFLYSxNQUFNWSxHQUFLcVYsRUFNbEIsT0FKYyxJQUFWMEQsSUFDRnhhLEtBQUthLE1BQU1ZLEdBQUsrWSxFQUNoQnhhLEtBQUtsQyxVQUVBa0MsTUFHVHNXLEVBQUd4WixVQUFVd2dCLE9BQVMsV0FDcEIsT0FBdUIsSUFBaEJ0ZCxLQUFLbEMsUUFBa0MsSUFBbEJrQyxLQUFLYSxNQUFNLElBR3pDeVYsRUFBR3haLFVBQVVrYixLQUFPLFNBQWVuQixHQUNqQyxJQU9JekgsRUFQQWlNLEVBQVd4RSxFQUFNLEVBRXJCLEdBQXNCLElBQWxCN1csS0FBS3FiLFdBQW1CQSxFQUFVLE9BQVEsRUFDOUMsR0FBc0IsSUFBbEJyYixLQUFLcWIsVUFBa0JBLEVBQVUsT0FBTyxFQUs1QyxHQUhBcmIsS0FBS2tjLFFBR0RsYyxLQUFLbEMsT0FBUyxFQUNoQnNSLEVBQU0sTUFDRCxDQUNEaU0sSUFDRnhFLEdBQU9BLEdBR1RiLEVBQU9hLEdBQU8sU0FBVyxxQkFFekIsSUFBSUMsRUFBb0IsRUFBaEI5VyxLQUFLYSxNQUFNLEdBQ25CdU8sRUFBTTBILElBQU1ELEVBQU0sRUFBSUMsRUFBSUQsR0FBTyxFQUFJLEVBRXZDLE9BQXNCLElBQWxCN1csS0FBS3FiLFNBQThCLEdBQU5qTSxFQUMxQkEsR0FPVGtILEVBQUd4WixVQUFVK2UsSUFBTSxTQUFjaEYsR0FDL0IsR0FBc0IsSUFBbEI3VyxLQUFLcWIsVUFBbUMsSUFBakJ4RSxFQUFJd0UsU0FBZ0IsT0FBUSxFQUN2RCxHQUFzQixJQUFsQnJiLEtBQUtxYixVQUFtQyxJQUFqQnhFLEVBQUl3RSxTQUFnQixPQUFPLEVBRXRELElBQUlqTSxFQUFNcFAsS0FBSzRyQixLQUFLL1UsR0FDcEIsT0FBc0IsSUFBbEI3VyxLQUFLcWIsU0FBOEIsR0FBTmpNLEVBQzFCQSxHQUlUa0gsRUFBR3haLFVBQVU4dUIsS0FBTyxTQUFlL1UsR0FFakMsR0FBSTdXLEtBQUtsQyxPQUFTK1ksRUFBSS9ZLE9BQVEsT0FBTyxFQUNyQyxHQUFJa0MsS0FBS2xDLE9BQVMrWSxFQUFJL1ksT0FBUSxPQUFRLEVBR3RDLElBREEsSUFBSXNSLEVBQU0sRUFDRDNOLEVBQUl6QixLQUFLbEMsT0FBUyxFQUFHMkQsR0FBSyxFQUFHQSxJQUFLLENBQ3pDLElBQUlnUCxFQUFvQixFQUFoQnpRLEtBQUthLE1BQU1ZLEdBQ2ZxTCxFQUFtQixFQUFmK0osRUFBSWhXLE1BQU1ZLEdBRWxCLEdBQUlnUCxJQUFNM0QsRUFBVixDQUNJMkQsRUFBSTNELEVBQ05zQyxHQUFPLEVBQ0VxQixFQUFJM0QsSUFDYnNDLEVBQU0sR0FFUixPQUVGLE9BQU9BLEdBR1RrSCxFQUFHeFosVUFBVSt1QixJQUFNLFNBQWNoVixHQUMvQixPQUEwQixJQUFuQjdXLEtBQUtnWSxLQUFLbkIsSUFHbkJQLEVBQUd4WixVQUFVZ3ZCLEdBQUssU0FBYWpWLEdBQzdCLE9BQXlCLElBQWxCN1csS0FBSzZiLElBQUloRixJQUdsQlAsRUFBR3haLFVBQVVpdkIsS0FBTyxTQUFlbFYsR0FDakMsT0FBTzdXLEtBQUtnWSxLQUFLbkIsSUFBUSxHQUczQlAsRUFBR3haLFVBQVVrdkIsSUFBTSxTQUFjblYsR0FDL0IsT0FBTzdXLEtBQUs2YixJQUFJaEYsSUFBUSxHQUcxQlAsRUFBR3haLFVBQVVtdkIsSUFBTSxTQUFjcFYsR0FDL0IsT0FBMkIsSUFBcEI3VyxLQUFLZ1ksS0FBS25CLElBR25CUCxFQUFHeFosVUFBVW92QixHQUFLLFNBQWFyVixHQUM3QixPQUEwQixJQUFuQjdXLEtBQUs2YixJQUFJaEYsSUFHbEJQLEVBQUd4WixVQUFVcXZCLEtBQU8sU0FBZXRWLEdBQ2pDLE9BQU83VyxLQUFLZ1ksS0FBS25CLElBQVEsR0FHM0JQLEVBQUd4WixVQUFVc3ZCLElBQU0sU0FBY3ZWLEdBQy9CLE9BQU83VyxLQUFLNmIsSUFBSWhGLElBQVEsR0FHMUJQLEVBQUd4WixVQUFVdXZCLElBQU0sU0FBY3hWLEdBQy9CLE9BQTBCLElBQW5CN1csS0FBS2dZLEtBQUtuQixJQUduQlAsRUFBR3haLFVBQVV3dkIsR0FBSyxTQUFhelYsR0FDN0IsT0FBeUIsSUFBbEI3VyxLQUFLNmIsSUFBSWhGLElBT2xCUCxFQUFHZ0YsSUFBTSxTQUFjekUsR0FDckIsT0FBTyxJQUFJMFYsRUFBSTFWLElBR2pCUCxFQUFHeFosVUFBVTB2QixNQUFRLFNBQWdCQyxHQUduQyxPQUZBelcsR0FBUWhXLEtBQUtzYixJQUFLLHlDQUNsQnRGLEVBQXlCLElBQWxCaFcsS0FBS3FiLFNBQWdCLGlDQUNyQm9SLEVBQUlDLFVBQVUxc0IsTUFBTTJzQixVQUFVRixJQUd2Q25XLEVBQUd4WixVQUFVOHZCLFFBQVUsV0FFckIsT0FEQTVXLEVBQU9oVyxLQUFLc2IsSUFBSyx3REFDVnRiLEtBQUtzYixJQUFJdVIsWUFBWTdzQixPQUc5QnNXLEVBQUd4WixVQUFVNnZCLFVBQVksU0FBb0JGLEdBRTNDLE9BREF6c0IsS0FBS3NiLElBQU1tUixFQUNKenNCLE1BR1RzVyxFQUFHeFosVUFBVWd3QixTQUFXLFNBQW1CTCxHQUV6QyxPQURBelcsR0FBUWhXLEtBQUtzYixJQUFLLHlDQUNYdGIsS0FBSzJzQixVQUFVRixJQUd4Qm5XLEVBQUd4WixVQUFVaXdCLE9BQVMsU0FBaUJsVyxHQUVyQyxPQURBYixFQUFPaFcsS0FBS3NiLElBQUssc0NBQ1Z0YixLQUFLc2IsSUFBSTRFLElBQUlsZ0IsS0FBTTZXLElBRzVCUCxFQUFHeFosVUFBVWt3QixRQUFVLFNBQWtCblcsR0FFdkMsT0FEQWIsRUFBT2hXLEtBQUtzYixJQUFLLHVDQUNWdGIsS0FBS3NiLElBQUkwRSxLQUFLaGdCLEtBQU02VyxJQUc3QlAsRUFBR3haLFVBQVVtd0IsT0FBUyxTQUFpQnBXLEdBRXJDLE9BREFiLEVBQU9oVyxLQUFLc2IsSUFBSyxzQ0FDVnRiLEtBQUtzYixJQUFJNUcsSUFBSTFVLEtBQU02VyxJQUc1QlAsRUFBR3haLFVBQVVvd0IsUUFBVSxTQUFrQnJXLEdBRXZDLE9BREFiLEVBQU9oVyxLQUFLc2IsSUFBSyx1Q0FDVnRiLEtBQUtzYixJQUFJMkUsS0FBS2pnQixLQUFNNlcsSUFHN0JQLEVBQUd4WixVQUFVcXdCLE9BQVMsU0FBaUJ0VyxHQUVyQyxPQURBYixFQUFPaFcsS0FBS3NiLElBQUssc0NBQ1Z0YixLQUFLc2IsSUFBSThSLElBQUlwdEIsS0FBTTZXLElBRzVCUCxFQUFHeFosVUFBVXV3QixPQUFTLFNBQWlCeFcsR0FHckMsT0FGQWIsRUFBT2hXLEtBQUtzYixJQUFLLHNDQUNqQnRiLEtBQUtzYixJQUFJZ1MsU0FBU3R0QixLQUFNNlcsR0FDakI3VyxLQUFLc2IsSUFBSXZJLElBQUkvUyxLQUFNNlcsSUFHNUJQLEVBQUd4WixVQUFVeXdCLFFBQVUsU0FBa0IxVyxHQUd2QyxPQUZBYixFQUFPaFcsS0FBS3NiLElBQUssc0NBQ2pCdGIsS0FBS3NiLElBQUlnUyxTQUFTdHRCLEtBQU02VyxHQUNqQjdXLEtBQUtzYixJQUFJNkksS0FBS25rQixLQUFNNlcsSUFHN0JQLEVBQUd4WixVQUFVMHdCLE9BQVMsV0FHcEIsT0FGQXhYLEVBQU9oVyxLQUFLc2IsSUFBSyxzQ0FDakJ0YixLQUFLc2IsSUFBSW1TLFNBQVN6dEIsTUFDWEEsS0FBS3NiLElBQUkrTSxJQUFJcm9CLE9BR3RCc1csRUFBR3haLFVBQVU0d0IsUUFBVSxXQUdyQixPQUZBMVgsRUFBT2hXLEtBQUtzYixJQUFLLHVDQUNqQnRiLEtBQUtzYixJQUFJbVMsU0FBU3p0QixNQUNYQSxLQUFLc2IsSUFBSWdOLEtBQUt0b0IsT0FJdkJzVyxFQUFHeFosVUFBVTZ3QixRQUFVLFdBR3JCLE9BRkEzWCxFQUFPaFcsS0FBS3NiLElBQUssdUNBQ2pCdGIsS0FBS3NiLElBQUltUyxTQUFTenRCLE1BQ1hBLEtBQUtzYixJQUFJc1MsS0FBSzV0QixPQUd2QnNXLEVBQUd4WixVQUFVK3dCLFFBQVUsV0FHckIsT0FGQTdYLEVBQU9oVyxLQUFLc2IsSUFBSyx1Q0FDakJ0YixLQUFLc2IsSUFBSW1TLFNBQVN6dEIsTUFDWEEsS0FBS3NiLElBQUlvUSxLQUFLMXJCLE9BSXZCc1csRUFBR3haLFVBQVVneEIsT0FBUyxXQUdwQixPQUZBOVgsRUFBT2hXLEtBQUtzYixJQUFLLHNDQUNqQnRiLEtBQUtzYixJQUFJbVMsU0FBU3p0QixNQUNYQSxLQUFLc2IsSUFBSXdELElBQUk5ZSxPQUd0QnNXLEVBQUd4WixVQUFVaXhCLE9BQVMsU0FBaUJsWCxHQUdyQyxPQUZBYixFQUFPaFcsS0FBS3NiLE1BQVF6RSxFQUFJeUUsSUFBSyxxQkFDN0J0YixLQUFLc2IsSUFBSW1TLFNBQVN6dEIsTUFDWEEsS0FBS3NiLElBQUloSSxJQUFJdFQsS0FBTTZXLElBSTVCLElBQUltWCxFQUFTLENBQ1hDLEtBQU0sS0FDTkMsS0FBTSxLQUNOQyxLQUFNLEtBQ05DLE9BQVEsTUFJVixTQUFTQyxFQUFROVYsRUFBTVMsR0FFckJoWixLQUFLdVksS0FBT0EsRUFDWnZZLEtBQUtnWixFQUFJLElBQUkxQyxFQUFHMEMsRUFBRyxJQUNuQmhaLEtBQUsrTSxFQUFJL00sS0FBS2daLEVBQUUvQixZQUNoQmpYLEtBQUttWCxFQUFJLElBQUliLEVBQUcsR0FBR2tTLE9BQU94b0IsS0FBSytNLEdBQUdrVCxLQUFLamdCLEtBQUtnWixHQUU1Q2haLEtBQUtzdUIsSUFBTXR1QixLQUFLdXVCLE9BaURsQixTQUFTQyxJQUNQSCxFQUFPenNCLEtBQ0w1QixLQUNBLE9BQ0EsMkVBK0RKLFNBQVN5dUIsSUFDUEosRUFBT3pzQixLQUNMNUIsS0FDQSxPQUNBLGtFQUlKLFNBQVMwdUIsSUFDUEwsRUFBT3pzQixLQUNMNUIsS0FDQSxPQUNBLHlEQUlKLFNBQVMydUIsSUFFUE4sRUFBT3pzQixLQUNMNUIsS0FDQSxRQUNBLHVFQThDSixTQUFTdXNCLEVBQUt2ZixHQUNaLEdBQWlCLGlCQUFOQSxFQUFnQixDQUN6QixJQUFJNGhCLEVBQVF0WSxFQUFHdVksT0FBTzdoQixHQUN0QmhOLEtBQUtnTixFQUFJNGhCLEVBQU01VixFQUNmaFosS0FBSzR1QixNQUFRQSxPQUViNVksRUFBT2hKLEVBQUU2ZSxJQUFJLEdBQUksa0NBQ2pCN3JCLEtBQUtnTixFQUFJQSxFQUNUaE4sS0FBSzR1QixNQUFRLEtBa09qQixTQUFTRSxFQUFNOWhCLEdBQ2J1ZixFQUFJM3FCLEtBQUs1QixLQUFNZ04sR0FFZmhOLEtBQUs0cEIsTUFBUTVwQixLQUFLZ04sRUFBRWlLLFlBQ2hCalgsS0FBSzRwQixNQUFRLElBQU8sSUFDdEI1cEIsS0FBSzRwQixPQUFTLEdBQU01cEIsS0FBSzRwQixNQUFRLElBR25DNXBCLEtBQUtvVyxFQUFJLElBQUlFLEVBQUcsR0FBR2tTLE9BQU94b0IsS0FBSzRwQixPQUMvQjVwQixLQUFLeXFCLEdBQUt6cUIsS0FBSyt1QixLQUFLL3VCLEtBQUtvVyxFQUFFaVMsT0FDM0Jyb0IsS0FBS2d2QixLQUFPaHZCLEtBQUtvVyxFQUFFa1YsT0FBT3RyQixLQUFLZ04sR0FFL0JoTixLQUFLaXZCLEtBQU9qdkIsS0FBS2d2QixLQUFLamMsSUFBSS9TLEtBQUtvVyxHQUFHb0IsTUFBTSxHQUFHeVMsSUFBSWpxQixLQUFLZ04sR0FDcERoTixLQUFLaXZCLEtBQU9qdkIsS0FBS2l2QixLQUFLNUUsS0FBS3JxQixLQUFLb1csR0FDaENwVyxLQUFLaXZCLEtBQU9qdkIsS0FBS29XLEVBQUUxQixJQUFJMVUsS0FBS2l2QixNQTVhOUJaLEVBQU92eEIsVUFBVXl4QixLQUFPLFdBQ3RCLElBQUlELEVBQU0sSUFBSWhZLEVBQUcsTUFFakIsT0FEQWdZLEVBQUl6dEIsTUFBUSxJQUFJK1EsTUFBTWpULEtBQUtnRCxLQUFLM0IsS0FBSytNLEVBQUksS0FDbEN1aEIsR0FHVEQsRUFBT3Z4QixVQUFVb3lCLFFBQVUsU0FBa0JyWSxHQUczQyxJQUNJc1ksRUFEQS9ZLEVBQUlTLEVBR1IsR0FDRTdXLEtBQUtvdkIsTUFBTWhaLEVBQUdwVyxLQUFLc3VCLEtBR25CYSxHQURBL1ksR0FEQUEsRUFBSXBXLEtBQUtxdkIsTUFBTWpaLElBQ1Q0SixLQUFLaGdCLEtBQUtzdUIsTUFDUHJYLGtCQUNGa1ksRUFBT252QixLQUFLK00sR0FFckIsSUFBSThPLEVBQU1zVCxFQUFPbnZCLEtBQUsrTSxHQUFLLEVBQUlxSixFQUFFd1YsS0FBSzVyQixLQUFLZ1osR0FnQjNDLE9BZlksSUFBUjZDLEdBQ0Z6RixFQUFFdlYsTUFBTSxHQUFLLEVBQ2J1VixFQUFFdFksT0FBUyxHQUNGK2QsRUFBTSxFQUNmekYsRUFBRTZKLEtBQUtqZ0IsS0FBS2daLFFBRUl4YSxJQUFaNFgsRUFBRThGLE1BRUo5RixFQUFFOEYsUUFHRjlGLEVBQUVrWixTQUlDbFosR0FHVGlZLEVBQU92eEIsVUFBVXN5QixNQUFRLFNBQWdCRyxFQUFPeGQsR0FDOUN3ZCxFQUFNOVgsT0FBT3pYLEtBQUsrTSxFQUFHLEVBQUdnRixJQUcxQnNjLEVBQU92eEIsVUFBVXV5QixNQUFRLFNBQWdCeFksR0FDdkMsT0FBT0EsRUFBSXNOLEtBQUtua0IsS0FBS21YLElBU3ZCd0IsRUFBUzZWLEVBQU1ILEdBRWZHLEVBQUsxeEIsVUFBVXN5QixNQUFRLFNBQWdCRyxFQUFPQyxHQUs1QyxJQUhBLElBRUlDLEVBQVM5d0IsS0FBSytGLElBQUk2cUIsRUFBTXp4QixPQUFRLEdBQzNCMkQsRUFBSSxFQUFHQSxFQUFJZ3VCLEVBQVFodUIsSUFDMUIrdEIsRUFBTzN1QixNQUFNWSxHQUFLOHRCLEVBQU0xdUIsTUFBTVksR0FJaEMsR0FGQSt0QixFQUFPMXhCLE9BQVMyeEIsRUFFWkYsRUFBTXp4QixRQUFVLEVBR2xCLE9BRkF5eEIsRUFBTTF1QixNQUFNLEdBQUssT0FDakIwdUIsRUFBTXp4QixPQUFTLEdBS2pCLElBQUk0eEIsRUFBT0gsRUFBTTF1QixNQUFNLEdBR3ZCLElBRkEydUIsRUFBTzN1QixNQUFNMnVCLEVBQU8xeEIsVUFoQlQsUUFnQnFCNHhCLEVBRTNCanVCLEVBQUksR0FBSUEsRUFBSTh0QixFQUFNenhCLE9BQVEyRCxJQUFLLENBQ2xDLElBQUlrdUIsRUFBd0IsRUFBakJKLEVBQU0xdUIsTUFBTVksR0FDdkI4dEIsRUFBTTF1QixNQUFNWSxFQUFJLEtBcEJQLFFBb0Jla3VCLElBQWdCLEVBQU1ELElBQVMsR0FDdkRBLEVBQU9DLEVBRVRELEtBQVUsR0FDVkgsRUFBTTF1QixNQUFNWSxFQUFJLElBQU1pdUIsRUFDVCxJQUFUQSxHQUFjSCxFQUFNenhCLE9BQVMsR0FDL0J5eEIsRUFBTXp4QixRQUFVLEdBRWhCeXhCLEVBQU16eEIsUUFBVSxHQUlwQjB3QixFQUFLMXhCLFVBQVV1eUIsTUFBUSxTQUFnQnhZLEdBRXJDQSxFQUFJaFcsTUFBTWdXLEVBQUkvWSxRQUFVLEVBQ3hCK1ksRUFBSWhXLE1BQU1nVyxFQUFJL1ksT0FBUyxHQUFLLEVBQzVCK1ksRUFBSS9ZLFFBQVUsRUFJZCxJQURBLElBQUltUixFQUFLLEVBQ0F4TixFQUFJLEVBQUdBLEVBQUlvVixFQUFJL1ksT0FBUTJELElBQUssQ0FDbkMsSUFBSXFWLEVBQW1CLEVBQWZELEVBQUloVyxNQUFNWSxHQUNsQndOLEdBQVUsSUFBSjZILEVBQ05ELEVBQUloVyxNQUFNWSxHQUFVLFNBQUx3TixFQUNmQSxFQUFTLEdBQUo2SCxHQUFhN0gsRUFBSyxTQUFhLEdBVXRDLE9BTmtDLElBQTlCNEgsRUFBSWhXLE1BQU1nVyxFQUFJL1ksT0FBUyxLQUN6QitZLEVBQUkvWSxTQUM4QixJQUE5QitZLEVBQUloVyxNQUFNZ1csRUFBSS9ZLE9BQVMsSUFDekIrWSxFQUFJL1ksVUFHRCtZLEdBU1Q4QixFQUFTOFYsRUFBTUosR0FRZjFWLEVBQVMrVixFQUFNTCxHQVNmMVYsRUFBU2dXLEVBQVFOLEdBRWpCTSxFQUFPN3hCLFVBQVV1eUIsTUFBUSxTQUFnQnhZLEdBR3ZDLElBREEsSUFBSTJELEVBQVEsRUFDSC9ZLEVBQUksRUFBR0EsRUFBSW9WLEVBQUkvWSxPQUFRMkQsSUFBSyxDQUNuQyxJQUFJdU4sRUFBMEIsSUFBTCxFQUFmNkgsRUFBSWhXLE1BQU1ZLElBQWlCK1ksRUFDakN2TCxFQUFVLFNBQUxELEVBQ1RBLEtBQVEsR0FFUjZILEVBQUloVyxNQUFNWSxHQUFLd04sRUFDZnVMLEVBQVF4TCxFQUtWLE9BSGMsSUFBVndMLElBQ0YzRCxFQUFJaFcsTUFBTWdXLEVBQUkvWSxVQUFZMGMsR0FFckIzRCxHQUlUUCxFQUFHdVksT0FBUyxTQUFnQnRXLEdBRTFCLEdBQUl5VixFQUFPelYsR0FBTyxPQUFPeVYsRUFBT3pWLEdBRWhDLElBQUlxVyxFQUNKLEdBQWEsU0FBVHJXLEVBQ0ZxVyxFQUFRLElBQUlKLE9BQ1AsR0FBYSxTQUFUalcsRUFDVHFXLEVBQVEsSUFBSUgsT0FDUCxHQUFhLFNBQVRsVyxFQUNUcVcsRUFBUSxJQUFJRixNQUNQLElBQWEsV0FBVG5XLEVBR1QsTUFBTSxJQUFJalosTUFBTSxpQkFBbUJpWixHQUZuQ3FXLEVBQVEsSUFBSUQsRUFNZCxPQUZBWCxFQUFPelYsR0FBUXFXLEVBRVJBLEdBa0JUckMsRUFBSXp2QixVQUFVMndCLFNBQVcsU0FBbUJoZCxHQUMxQ3VGLEVBQXNCLElBQWZ2RixFQUFFNEssU0FBZ0IsaUNBQ3pCckYsRUFBT3ZGLEVBQUU2SyxJQUFLLG9DQUdoQmlSLEVBQUl6dkIsVUFBVXd3QixTQUFXLFNBQW1CN2MsRUFBRzNELEdBQzdDa0osRUFBcUMsSUFBN0J2RixFQUFFNEssU0FBV3ZPLEVBQUV1TyxVQUFpQixpQ0FDeENyRixFQUFPdkYsRUFBRTZLLEtBQU83SyxFQUFFNkssTUFBUXhPLEVBQUV3TyxJQUMxQixvQ0FHSmlSLEVBQUl6dkIsVUFBVWl5QixLQUFPLFNBQWV0ZSxHQUNsQyxPQUFJelEsS0FBSzR1QixNQUFjNXVCLEtBQUs0dUIsTUFBTU0sUUFBUXplLEdBQUdrYyxVQUFVM3NCLE1BQ2hEeVEsRUFBRTRaLEtBQUtycUIsS0FBS2dOLEdBQUcyZixVQUFVM3NCLE9BR2xDdXNCLEVBQUl6dkIsVUFBVWdpQixJQUFNLFNBQWNyTyxHQUNoQyxPQUFJQSxFQUFFNk0sU0FDRzdNLEVBQUU5UCxRQUdKWCxLQUFLZ04sRUFBRTBILElBQUlqRSxHQUFHa2MsVUFBVTNzQixPQUdqQ3VzQixFQUFJenZCLFVBQVVvakIsSUFBTSxTQUFjelAsRUFBRzNELEdBQ25DOU0sS0FBS3N0QixTQUFTN2MsRUFBRzNELEdBRWpCLElBQUlzQyxFQUFNcUIsRUFBRXlQLElBQUlwVCxHQUloQixPQUhJc0MsRUFBSXlNLElBQUk3YixLQUFLZ04sSUFBTSxHQUNyQm9DLEVBQUk2USxLQUFLamdCLEtBQUtnTixHQUVUb0MsRUFBSXVkLFVBQVUzc0IsT0FHdkJ1c0IsRUFBSXp2QixVQUFVa2pCLEtBQU8sU0FBZXZQLEVBQUczRCxHQUNyQzlNLEtBQUtzdEIsU0FBUzdjLEVBQUczRCxHQUVqQixJQUFJc0MsRUFBTXFCLEVBQUV1UCxLQUFLbFQsR0FJakIsT0FISXNDLEVBQUl5TSxJQUFJN2IsS0FBS2dOLElBQU0sR0FDckJvQyxFQUFJNlEsS0FBS2pnQixLQUFLZ04sR0FFVG9DLEdBR1RtZCxFQUFJenZCLFVBQVU0WCxJQUFNLFNBQWNqRSxFQUFHM0QsR0FDbkM5TSxLQUFLc3RCLFNBQVM3YyxFQUFHM0QsR0FFakIsSUFBSXNDLEVBQU1xQixFQUFFaUUsSUFBSTVILEdBSWhCLE9BSElzQyxFQUFJNEksS0FBSyxHQUFLLEdBQ2hCNUksRUFBSTRRLEtBQUtoZ0IsS0FBS2dOLEdBRVRvQyxFQUFJdWQsVUFBVTNzQixPQUd2QnVzQixFQUFJenZCLFVBQVVtakIsS0FBTyxTQUFleFAsRUFBRzNELEdBQ3JDOU0sS0FBS3N0QixTQUFTN2MsRUFBRzNELEdBRWpCLElBQUlzQyxFQUFNcUIsRUFBRXdQLEtBQUtuVCxHQUlqQixPQUhJc0MsRUFBSTRJLEtBQUssR0FBSyxHQUNoQjVJLEVBQUk0USxLQUFLaGdCLEtBQUtnTixHQUVUb0MsR0FHVG1kLEVBQUl6dkIsVUFBVXN3QixJQUFNLFNBQWMzYyxFQUFHb0csR0FFbkMsT0FEQTdXLEtBQUt5dEIsU0FBU2hkLEdBQ1B6USxLQUFLK3VCLEtBQUt0ZSxFQUFFMFksTUFBTXRTLEtBRzNCMFYsRUFBSXp2QixVQUFVcW5CLEtBQU8sU0FBZTFULEVBQUczRCxHQUVyQyxPQURBOU0sS0FBS3N0QixTQUFTN2MsRUFBRzNELEdBQ1Y5TSxLQUFLK3VCLEtBQUt0ZSxFQUFFMFQsS0FBS3JYLEtBRzFCeWYsRUFBSXp2QixVQUFVaVcsSUFBTSxTQUFjdEMsRUFBRzNELEdBRW5DLE9BREE5TSxLQUFLc3RCLFNBQVM3YyxFQUFHM0QsR0FDVjlNLEtBQUsrdUIsS0FBS3RlLEVBQUVzQyxJQUFJakcsS0FHekJ5ZixFQUFJenZCLFVBQVV3ckIsS0FBTyxTQUFlN1gsR0FDbEMsT0FBT3pRLEtBQUtta0IsS0FBSzFULEVBQUdBLEVBQUU5UCxVQUd4QjRyQixFQUFJenZCLFVBQVV1ckIsSUFBTSxTQUFjNVgsR0FDaEMsT0FBT3pRLEtBQUsrUyxJQUFJdEMsRUFBR0EsSUFHckI4YixFQUFJenZCLFVBQVU4d0IsS0FBTyxTQUFlbmQsR0FDbEMsR0FBSUEsRUFBRTZNLFNBQVUsT0FBTzdNLEVBQUU5UCxRQUV6QixJQUFJaXZCLEVBQU81dkIsS0FBS2dOLEVBQUVzSyxNQUFNLEdBSXhCLEdBSEF0QixFQUFPNFosRUFBTyxHQUFNLEdBR1AsSUFBVEEsRUFBWSxDQUNkLElBQUl0YyxFQUFNdFQsS0FBS2dOLEVBQUVrVCxJQUFJLElBQUk1SixFQUFHLElBQUltQixPQUFPLEdBQ3ZDLE9BQU96WCxLQUFLc1QsSUFBSTdDLEVBQUc2QyxHQVFyQixJQUZBLElBQUl3SyxFQUFJOWQsS0FBS2dOLEVBQUV5YyxLQUFLLEdBQ2hCbEQsRUFBSSxHQUNBekksRUFBRVIsVUFBMkIsSUFBZlEsRUFBRXhHLE1BQU0sSUFDNUJpUCxJQUNBekksRUFBRXJHLE9BQU8sR0FFWHpCLEdBQVE4SCxFQUFFUixVQUVWLElBQUl1UyxFQUFNLElBQUl2WixFQUFHLEdBQUdrVyxNQUFNeHNCLE1BQ3RCOHZCLEVBQU9ELEVBQUkvQixTQUlYaUMsRUFBTy92QixLQUFLZ04sRUFBRXljLEtBQUssR0FBR2hTLE9BQU8sR0FDN0JMLEVBQUlwWCxLQUFLZ04sRUFBRWlLLFlBR2YsSUFGQUcsRUFBSSxJQUFJZCxFQUFHLEVBQUljLEVBQUlBLEdBQUdvVixNQUFNeHNCLE1BRVcsSUFBaENBLEtBQUtzVCxJQUFJOEQsRUFBRzJZLEdBQU1sVSxJQUFJaVUsSUFDM0IxWSxFQUFFNFYsUUFBUThDLEdBT1osSUFKQSxJQUFJL2dCLEVBQUkvTyxLQUFLc1QsSUFBSThELEVBQUcwRyxHQUNoQjFILEVBQUlwVyxLQUFLc1QsSUFBSTdDLEVBQUdxTixFQUFFMEwsS0FBSyxHQUFHL1IsT0FBTyxJQUNqQ3dHLEVBQUlqZSxLQUFLc1QsSUFBSTdDLEVBQUdxTixHQUNoQjlRLEVBQUl1WixFQUNjLElBQWZ0SSxFQUFFcEMsSUFBSWdVLElBQVksQ0FFdkIsSUFEQSxJQUFJdkIsRUFBTXJRLEVBQ0R4YyxFQUFJLEVBQW9CLElBQWpCNnNCLEVBQUl6UyxJQUFJZ1UsR0FBWXB1QixJQUNsQzZzQixFQUFNQSxFQUFJZCxTQUVaeFgsRUFBT3ZVLEVBQUl1TCxHQUNYLElBQUlGLEVBQUk5TSxLQUFLc1QsSUFBSXZFLEVBQUcsSUFBSXVILEVBQUcsR0FBR2tTLE9BQU94YixFQUFJdkwsRUFBSSxJQUU3QzJVLEVBQUlBLEVBQUVpWCxPQUFPdmdCLEdBQ2JpQyxFQUFJakMsRUFBRTBnQixTQUNOdlAsRUFBSUEsRUFBRW9QLE9BQU90ZSxHQUNiL0IsRUFBSXZMLEVBR04sT0FBTzJVLEdBR1RtVyxFQUFJenZCLFVBQVU0dUIsS0FBTyxTQUFlamIsR0FDbEMsSUFBSXVmLEVBQU12ZixFQUFFNmEsT0FBT3RyQixLQUFLZ04sR0FDeEIsT0FBcUIsSUFBakJnakIsRUFBSTNVLFVBQ04yVSxFQUFJM1UsU0FBVyxFQUNScmIsS0FBSyt1QixLQUFLaUIsR0FBS2xDLFVBRWY5dEIsS0FBSyt1QixLQUFLaUIsSUFJckJ6RCxFQUFJenZCLFVBQVV3VyxJQUFNLFNBQWM3QyxFQUFHb0csR0FDbkMsR0FBSUEsRUFBSXlHLFNBQVUsT0FBTyxJQUFJaEgsRUFBRyxHQUFHa1csTUFBTXhzQixNQUN6QyxHQUFvQixJQUFoQjZXLEVBQUltQixLQUFLLEdBQVUsT0FBT3ZILEVBQUU5UCxRQUVoQyxJQUNJc3ZCLEVBQU0sSUFBSXJlLE1BQU0sSUFDcEJxZSxFQUFJLEdBQUssSUFBSTNaLEVBQUcsR0FBR2tXLE1BQU14c0IsTUFDekJpd0IsRUFBSSxHQUFLeGYsRUFDVCxJQUFLLElBQUloUCxFQUFJLEVBQUdBLEVBQUl3dUIsRUFBSW55QixPQUFRMkQsSUFDOUJ3dUIsRUFBSXh1QixHQUFLekIsS0FBSytTLElBQUlrZCxFQUFJeHVCLEVBQUksR0FBSWdQLEdBR2hDLElBQUlyQixFQUFNNmdCLEVBQUksR0FDVkMsRUFBVSxFQUNWQyxFQUFhLEVBQ2I5akIsRUFBUXdLLEVBQUlJLFlBQWMsR0FLOUIsSUFKYyxJQUFWNUssSUFDRkEsRUFBUSxJQUdMNUssRUFBSW9WLEVBQUkvWSxPQUFTLEVBQUcyRCxHQUFLLEVBQUdBLElBQUssQ0FFcEMsSUFEQSxJQUFJcVgsRUFBT2pDLEVBQUloVyxNQUFNWSxHQUNac00sRUFBSTFCLEVBQVEsRUFBRzBCLEdBQUssRUFBR0EsSUFBSyxDQUNuQyxJQUFJK1IsRUFBT2hILEdBQVEvSyxFQUFLLEVBQ3BCcUIsSUFBUTZnQixFQUFJLEtBQ2Q3Z0IsRUFBTXBQLEtBQUtxb0IsSUFBSWpaLElBR0wsSUFBUjBRLEdBQXlCLElBQVpvUSxHQUtqQkEsSUFBWSxFQUNaQSxHQUFXcFEsR0E5QkUsTUErQmJxUSxHQUN3QyxJQUFOMXVCLEdBQWlCLElBQU5zTSxLQUU3Q3FCLEVBQU1wUCxLQUFLK1MsSUFBSTNELEVBQUs2Z0IsRUFBSUMsSUFDeEJDLEVBQWEsRUFDYkQsRUFBVSxJQVhSQyxFQUFhLEVBYWpCOWpCLEVBQVEsR0FHVixPQUFPK0MsR0FHVG1kLEVBQUl6dkIsVUFBVTR2QixVQUFZLFNBQW9CN1YsR0FDNUMsSUFBSVQsRUFBSVMsRUFBSXdULEtBQUtycUIsS0FBS2dOLEdBRXRCLE9BQU9vSixJQUFNUyxFQUFNVCxFQUFFelYsUUFBVXlWLEdBR2pDbVcsRUFBSXp2QixVQUFVK3ZCLFlBQWMsU0FBc0JoVyxHQUNoRCxJQUFJekgsRUFBTXlILEVBQUlsVyxRQUVkLE9BREF5TyxFQUFJa00sSUFBTSxLQUNIbE0sR0FPVGtILEVBQUc4WixLQUFPLFNBQWV2WixHQUN2QixPQUFPLElBQUlpWSxFQUFLalksSUFtQmxCOEIsRUFBU21XLEVBQU12QyxHQUVmdUMsRUFBS2h5QixVQUFVNHZCLFVBQVksU0FBb0I3VixHQUM3QyxPQUFPN1csS0FBSyt1QixLQUFLbFksRUFBSXNTLE1BQU1ucEIsS0FBSzRwQixTQUdsQ2tGLEVBQUtoeUIsVUFBVSt2QixZQUFjLFNBQXNCaFcsR0FDakQsSUFBSVQsRUFBSXBXLEtBQUsrdUIsS0FBS2xZLEVBQUk5RCxJQUFJL1MsS0FBS2d2QixPQUUvQixPQURBNVksRUFBRWtGLElBQU0sS0FDRGxGLEdBR1QwWSxFQUFLaHlCLFVBQVVxbkIsS0FBTyxTQUFlMVQsRUFBRzNELEdBQ3RDLEdBQUkyRCxFQUFFNk0sVUFBWXhRLEVBQUV3USxTQUdsQixPQUZBN00sRUFBRTVQLE1BQU0sR0FBSyxFQUNiNFAsRUFBRTNTLE9BQVMsRUFDSjJTLEVBR1QsSUFBSXdOLEVBQUl4TixFQUFFMFQsS0FBS3JYLEdBQ1hpQyxFQUFJa1AsRUFBRXNMLE1BQU12cEIsS0FBSzRwQixPQUFPN1csSUFBSS9TLEtBQUtpdkIsTUFBTTNGLE9BQU90cEIsS0FBSzRwQixPQUFPN1csSUFBSS9TLEtBQUtnTixHQUNuRXFqQixFQUFJcFMsRUFBRWdDLEtBQUtsUixHQUFHMEksT0FBT3pYLEtBQUs0cEIsT0FDMUJ4YSxFQUFNaWhCLEVBUVYsT0FOSUEsRUFBRXhVLElBQUk3YixLQUFLZ04sSUFBTSxFQUNuQm9DLEVBQU1paEIsRUFBRXBRLEtBQUtqZ0IsS0FBS2dOLEdBQ1RxakIsRUFBRXJZLEtBQUssR0FBSyxJQUNyQjVJLEVBQU1paEIsRUFBRXJRLEtBQUtoZ0IsS0FBS2dOLElBR2JvQyxFQUFJdWQsVUFBVTNzQixPQUd2Qjh1QixFQUFLaHlCLFVBQVVpVyxJQUFNLFNBQWN0QyxFQUFHM0QsR0FDcEMsR0FBSTJELEVBQUU2TSxVQUFZeFEsRUFBRXdRLFNBQVUsT0FBTyxJQUFJaEgsRUFBRyxHQUFHcVcsVUFBVTNzQixNQUV6RCxJQUFJaWUsRUFBSXhOLEVBQUVzQyxJQUFJakcsR0FDVmlDLEVBQUlrUCxFQUFFc0wsTUFBTXZwQixLQUFLNHBCLE9BQU83VyxJQUFJL1MsS0FBS2l2QixNQUFNM0YsT0FBT3RwQixLQUFLNHBCLE9BQU83VyxJQUFJL1MsS0FBS2dOLEdBQ25FcWpCLEVBQUlwUyxFQUFFZ0MsS0FBS2xSLEdBQUcwSSxPQUFPelgsS0FBSzRwQixPQUMxQnhhLEVBQU1paEIsRUFPVixPQU5JQSxFQUFFeFUsSUFBSTdiLEtBQUtnTixJQUFNLEVBQ25Cb0MsRUFBTWloQixFQUFFcFEsS0FBS2pnQixLQUFLZ04sR0FDVHFqQixFQUFFclksS0FBSyxHQUFLLElBQ3JCNUksRUFBTWloQixFQUFFclEsS0FBS2hnQixLQUFLZ04sSUFHYm9DLEVBQUl1ZCxVQUFVM3NCLE9BR3ZCOHVCLEVBQUtoeUIsVUFBVTR1QixLQUFPLFNBQWVqYixHQUduQyxPQURVelEsS0FBSyt1QixLQUFLdGUsRUFBRTZhLE9BQU90ckIsS0FBS2dOLEdBQUcrRixJQUFJL1MsS0FBS3lxQixLQUNuQ2tDLFVBQVUzc0IsT0F0Mkd6QixDQXcyR29DdkQsRUFBUXVELFEsazhEQ3QyRzVDLElBQUlxVyxFQUFRLEVBQVEsSUFDaEJDLEVBQUssRUFBUSxJQUNicUMsRUFBVyxFQUFRLElBQ25COVksRUFBTyxFQUFRLElBRWZtVyxFQUFTSyxFQUFNTCxPQUVuQixTQUFTMjFELEVBQVd2bkMsR0FDbEJ2a0MsRUFBSytCLEtBQUs1QixLQUFNLFFBQVNva0MsR0FFekJwa0MsS0FBS3lRLEVBQUksSUFBSTZGLEVBQUc4dEIsRUFBSzN6QixFQUFHLElBQUkrYixNQUFNeHNCLEtBQUtzYixLQUN2Q3RiLEtBQUs4TSxFQUFJLElBQUl3SixFQUFHOHRCLEVBQUt0M0IsRUFBRyxJQUFJMGYsTUFBTXhzQixLQUFLc2IsS0FDdkN0YixLQUFLNHJFLEtBQU81ckUsS0FBS3NrQyxJQUFJelcsVUFFckI3dEIsS0FBSzZyRSxNQUFxQyxJQUE3QjdyRSxLQUFLeVEsRUFBRW1jLFVBQVU1VSxLQUFLLEdBQ25DaFksS0FBSzhyRSxPQUFtRCxJQUExQzlyRSxLQUFLeVEsRUFBRW1jLFVBQVVsWSxJQUFJMVUsS0FBS2daLEdBQUdoQixNQUFNLEdBR2pEaFksS0FBSytyRSxLQUFPL3JFLEtBQUtnc0UsaUJBQWlCNW5DLEdBQ2xDcGtDLEtBQUtpc0UsWUFBYyxJQUFJcjZELE1BQU0sR0FDN0I1UixLQUFLa3NFLFlBQWMsSUFBSXQ2RCxNQUFNLEdBb08vQixTQUFTdTZELEVBQU1qbkMsRUFBT3gwQixFQUFHQyxFQUFHeTdELEdBQzFCdnNFLEVBQUtvbEMsVUFBVXJqQyxLQUFLNUIsS0FBTWtsQyxFQUFPLFVBQ3ZCLE9BQU54MEIsR0FBb0IsT0FBTkMsR0FDaEIzUSxLQUFLMFEsRUFBSSxLQUNUMVEsS0FBSzJRLEVBQUksS0FDVDNRLEtBQUtxc0UsS0FBTSxJQUVYcnNFLEtBQUswUSxFQUFJLElBQUk0RixFQUFHNUYsRUFBRyxJQUNuQjFRLEtBQUsyUSxFQUFJLElBQUkyRixFQUFHM0YsRUFBRyxJQUVmeTdELElBQ0Zwc0UsS0FBSzBRLEVBQUVvYyxTQUFTOXNCLEtBQUtrbEMsTUFBTTVwQixLQUMzQnRiLEtBQUsyUSxFQUFFbWMsU0FBUzlzQixLQUFLa2xDLE1BQU01cEIsTUFFeEJ0YixLQUFLMFEsRUFBRTRLLE1BQ1Z0YixLQUFLMFEsRUFBSTFRLEtBQUswUSxFQUFFOGIsTUFBTXhzQixLQUFLa2xDLE1BQU01cEIsTUFDOUJ0YixLQUFLMlEsRUFBRTJLLE1BQ1Z0YixLQUFLMlEsRUFBSTNRLEtBQUsyUSxFQUFFNmIsTUFBTXhzQixLQUFLa2xDLE1BQU01cEIsTUFDbkN0YixLQUFLcXNFLEtBQU0sR0E2TmYsU0FBU0MsRUFBT3BuQyxFQUFPeDBCLEVBQUdDLEVBQUd5RyxHQUMzQnZYLEVBQUtvbEMsVUFBVXJqQyxLQUFLNUIsS0FBTWtsQyxFQUFPLFlBQ3ZCLE9BQU54MEIsR0FBb0IsT0FBTkMsR0FBb0IsT0FBTnlHLEdBQzlCcFgsS0FBSzBRLEVBQUkxUSxLQUFLa2xDLE1BQU1yVixJQUNwQjd2QixLQUFLMlEsRUFBSTNRLEtBQUtrbEMsTUFBTXJWLElBQ3BCN3ZCLEtBQUtvWCxFQUFJLElBQUlkLEVBQUcsS0FFaEJ0VyxLQUFLMFEsRUFBSSxJQUFJNEYsRUFBRzVGLEVBQUcsSUFDbkIxUSxLQUFLMlEsRUFBSSxJQUFJMkYsRUFBRzNGLEVBQUcsSUFDbkIzUSxLQUFLb1gsRUFBSSxJQUFJZCxFQUFHYyxFQUFHLEtBRWhCcFgsS0FBSzBRLEVBQUU0SyxNQUNWdGIsS0FBSzBRLEVBQUkxUSxLQUFLMFEsRUFBRThiLE1BQU14c0IsS0FBS2tsQyxNQUFNNXBCLE1BQzlCdGIsS0FBSzJRLEVBQUUySyxNQUNWdGIsS0FBSzJRLEVBQUkzUSxLQUFLMlEsRUFBRTZiLE1BQU14c0IsS0FBS2tsQyxNQUFNNXBCLE1BQzlCdGIsS0FBS29YLEVBQUVrRSxNQUNWdGIsS0FBS29YLEVBQUlwWCxLQUFLb1gsRUFBRW9WLE1BQU14c0IsS0FBS2tsQyxNQUFNNXBCLE1BRW5DdGIsS0FBS3VzRSxLQUFPdnNFLEtBQUtvWCxJQUFNcFgsS0FBS2tsQyxNQUFNclYsSUFuZXBDbFgsRUFBU2d6RCxFQUFZOXJFLEdBQ3JCcEQsRUFBT0MsUUFBVWl2RSxFQUVqQkEsRUFBVzd1RSxVQUFVa3ZFLGlCQUFtQixTQUEwQjVuQyxHQUVoRSxHQUFLcGtDLEtBQUs2ckUsT0FBVTdyRSxLQUFLK3FCLEdBQU0vcUIsS0FBSytNLEdBQXdCLElBQW5CL00sS0FBS2daLEVBQUV1RSxLQUFLLEdBQXJELENBSUEsSUFBSWdxQixFQUNBZ1EsRUFDSixHQUFJblQsRUFBS21ELEtBQ1BBLEVBQU8sSUFBSWp4QixFQUFHOHRCLEVBQUttRCxLQUFNLElBQUkvYSxNQUFNeHNCLEtBQUtzYixTQUNuQyxDQUNMLElBQUlreEQsRUFBUXhzRSxLQUFLeXNFLGNBQWN6c0UsS0FBS2daLEdBR3BDdXVCLEdBREFBLEVBQU9pbEMsRUFBTSxHQUFHM3dELElBQUkyd0QsRUFBTSxJQUFNLEVBQUlBLEVBQU0sR0FBS0EsRUFBTSxJQUN6Q2hnRCxNQUFNeHNCLEtBQUtzYixLQUV6QixHQUFJOG9CLEVBQUttVCxPQUNQQSxFQUFTLElBQUlqaEMsRUFBRzh0QixFQUFLbVQsT0FBUSxRQUN4QixDQUVMLElBQUltMUIsRUFBVTFzRSxLQUFLeXNFLGNBQWN6c0UsS0FBSytNLEdBQ3NCLElBQXhEL00sS0FBSytxQixFQUFFaFksSUFBSTI1RCxFQUFRLElBQUloOEQsRUFBRW1MLElBQUk3YixLQUFLK3FCLEVBQUVyYSxFQUFFMmMsT0FBT2thLElBQy9DZ1EsRUFBU20xQixFQUFRLElBRWpCbjFCLEVBQVNtMUIsRUFBUSxHQUNqQjEyRCxFQUEyRCxJQUFwRGhXLEtBQUsrcUIsRUFBRWhZLElBQUl3a0MsR0FBUTdtQyxFQUFFbUwsSUFBSTdiLEtBQUsrcUIsRUFBRXJhLEVBQUUyYyxPQUFPa2EsTUFpQnBELE1BQU8sQ0FDTEEsS0FBTUEsRUFDTmdRLE9BQVFBLEVBQ1JDLE1BZEVwVCxFQUFLb1QsTUFDQ3BULEVBQUtvVCxNQUFNampCLEtBQUksU0FBU280QyxHQUM5QixNQUFPLENBQ0xsOEQsRUFBRyxJQUFJNkYsRUFBR3EyRCxFQUFJbDhELEVBQUcsSUFDakIzRCxFQUFHLElBQUl3SixFQUFHcTJELEVBQUk3L0QsRUFBRyxRQUliOU0sS0FBSzRzRSxjQUFjcjFCLE1BVS9CbzBCLEVBQVc3dUUsVUFBVTJ2RSxjQUFnQixTQUF1QjUxRCxHQUkxRCxJQUFJeUUsRUFBTXpFLElBQVE3VyxLQUFLZ1osRUFBSWhaLEtBQUtzYixJQUFNaEYsRUFBRzhaLEtBQUt2WixHQUMxQyswRCxFQUFPLElBQUl0MUQsRUFBRyxHQUFHa1csTUFBTWxSLEdBQUt1UyxVQUM1QmcvQyxFQUFRakIsRUFBSzk5QyxTQUVidkgsRUFBSSxJQUFJalEsRUFBRyxHQUFHa1csTUFBTWxSLEdBQUt3UyxTQUFTSCxVQUFVTixPQUFPdStDLEdBSXZELE1BQU8sQ0FGRWlCLEVBQU05L0MsT0FBT3hHLEdBQUdxRyxVQUNoQmlnRCxFQUFNNS9DLE9BQU8xRyxHQUFHcUcsWUFJM0IrK0MsRUFBVzd1RSxVQUFVOHZFLGNBQWdCLFNBQXVCcjFCLEdBMkIxRCxJQXpCQSxJQVlJajNCLEVBQ0E4QixFQUVBM0IsRUFDQThCLEVBRUEzQixFQUNBOEIsRUFFQW9xRCxFQUVBMTJELEVBQ0ExRixFQXhCQXE4RCxFQUFXL3NFLEtBQUsrTSxFQUFFc2MsTUFBTTFxQixLQUFLd1YsTUFBTW5VLEtBQUsrTSxFQUFFa0ssWUFBYyxJQUl4RG9aLEVBQUlrbkIsRUFDSm5sQixFQUFJcHlCLEtBQUsrTSxFQUFFcE0sUUFDWDRxQixFQUFLLElBQUlqVixFQUFHLEdBQ1owMkQsRUFBSyxJQUFJMTJELEVBQUcsR0FDWmtWLEVBQUssSUFBSWxWLEVBQUcsR0FDWjIyRCxFQUFLLElBQUkzMkQsRUFBRyxHQWFaN1UsRUFBSSxFQUdhLElBQWQ0dUIsRUFBRXJZLEtBQUssSUFBVSxDQUN0QixJQUFJOEYsRUFBSXNVLEVBQUVuSSxJQUFJb0csR0FDZGphLEVBQUlnYyxFQUFFMWQsSUFBSW9KLEVBQUUvSyxJQUFJc2QsSUFDaEIzZixFQUFJOGEsRUFBRzlXLElBQUlvSixFQUFFL0ssSUFBSXdZLElBQ2pCLElBQUk1YSxFQUFJczhELEVBQUd2NEQsSUFBSW9KLEVBQUUvSyxJQUFJaTZELElBRXJCLElBQUt2c0QsR0FBTXJLLEVBQUV5RixJQUFJa3hELEdBQVksRUFDM0J6c0QsRUFBS3dzRCxFQUFNaHVELE1BQ1hzRCxFQUFLbUosRUFDTDlLLEVBQUtySyxFQUFFMEksTUFDUHlELEVBQUs3UixPQUNBLEdBQUkrUCxHQUFjLEtBQU5oZixFQUNqQixNQUVGcXJFLEVBQVExMkQsRUFFUmdjLEVBQUkvQixFQUNKQSxFQUFJamEsRUFDSm9WLEVBQUtELEVBQ0xBLEVBQUs3YSxFQUNMdThELEVBQUtELEVBQ0xBLEVBQUtyOEQsRUFFUGlRLEVBQUt4SyxFQUFFMEksTUFDUDRELEVBQUtoUyxFQUVMLElBQUl3OEQsRUFBT3pzRCxFQUFHNEgsTUFBTW5JLElBQUlxQyxFQUFHOEYsT0FpQjNCLE9BaEJXekgsRUFBR3lILE1BQU1uSSxJQUFJd0MsRUFBRzJGLE9BQ2xCeE0sSUFBSXF4RCxJQUFTLElBQ3BCdHNELEVBQUtOLEVBQ0xvQyxFQUFLTixHQUlIM0IsRUFBR3BGLFdBQ0xvRixFQUFLQSxFQUFHM0IsTUFDUnlELEVBQUtBLEVBQUd6RCxPQUVOOEIsRUFBR3ZGLFdBQ0x1RixFQUFLQSxFQUFHOUIsTUFDUjRELEVBQUtBLEVBQUc1RCxPQUdILENBQ0wsQ0FBRXJPLEVBQUdnUSxFQUFJM1QsRUFBR3lWLEdBQ1osQ0FBRTlSLEVBQUdtUSxFQUFJOVQsRUFBRzRWLEtBSWhCaXBELEVBQVc3dUUsVUFBVXF3RSxXQUFhLFNBQW9CaDJELEdBQ3BELElBQUlxZ0MsRUFBUXgzQyxLQUFLK3JFLEtBQUt2MEIsTUFDbEI0MUIsRUFBSzUxQixFQUFNLEdBQ1g2MUIsRUFBSzcxQixFQUFNLEdBRVhwQixFQUFLaTNCLEVBQUd2Z0UsRUFBRWlHLElBQUlvRSxHQUFHbVQsU0FBU3RxQixLQUFLK00sR0FDL0J1cEMsRUFBSzgyQixFQUFHdGdFLEVBQUVnUyxNQUFNL0wsSUFBSW9FLEdBQUdtVCxTQUFTdHFCLEtBQUsrTSxHQUVyQ3VnRSxFQUFLbDNCLEVBQUdyakMsSUFBSXE2RCxFQUFHMzhELEdBQ2Y4OEQsRUFBS2ozQixFQUFHdmpDLElBQUlzNkQsRUFBRzU4RCxHQUNmKzhELEVBQUtwM0IsRUFBR3JqQyxJQUFJcTZELEVBQUd0Z0UsR0FDZjJnRSxFQUFLbjNCLEVBQUd2akMsSUFBSXM2RCxFQUFHdmdFLEdBS25CLE1BQU8sQ0FBRTZLLEdBRkFSLEVBQUV6QyxJQUFJNDRELEdBQUk1NEQsSUFBSTY0RCxHQUVOMzFELEdBRFI0MUQsRUFBR3R0RCxJQUFJdXRELEdBQUkzdUQsUUFJdEI2c0QsRUFBVzd1RSxVQUFVaXFDLFdBQWEsU0FBb0JyMkIsRUFBRzJXLElBQ3ZEM1csRUFBSSxJQUFJNEYsRUFBRzVGLEVBQUcsS0FDUDRLLE1BQ0w1SyxFQUFJQSxFQUFFOGIsTUFBTXhzQixLQUFLc2IsTUFFbkIsSUFBSTJ4RCxFQUFLdjhELEVBQUU4YyxTQUFTSCxPQUFPM2MsR0FBR3NjLFFBQVF0YyxFQUFFMmMsT0FBT3J0QixLQUFLeVEsSUFBSXVjLFFBQVFodEIsS0FBSzhNLEdBQ2pFNkQsRUFBSXM4RCxFQUFHdC9DLFVBQ1gsR0FBNkMsSUFBekNoZCxFQUFFNmMsU0FBU1AsT0FBT2dnRCxHQUFJcHhELElBQUk3YixLQUFLcWtDLE1BQ2pDLE1BQU0sSUFBSS9rQyxNQUFNLGlCQUlsQixJQUFJaVksRUFBUTVHLEVBQUVpYyxVQUFVclYsUUFJeEIsT0FISThQLElBQVE5UCxJQUFVOFAsR0FBTzlQLEtBQzNCNUcsRUFBSUEsRUFBRW1kLFVBRUQ5dEIsS0FBS29sQyxNQUFNMTBCLEVBQUdDLElBR3ZCZzdELEVBQVc3dUUsVUFBVXVvQyxTQUFXLFNBQWtCRCxHQUNoRCxHQUFJQSxFQUFNaW5DLElBQ1IsT0FBTyxFQUVULElBQUkzN0QsRUFBSTAwQixFQUFNMTBCLEVBQ1ZDLEVBQUl5MEIsRUFBTXowQixFQUVWKzhELEVBQUsxdEUsS0FBS3lRLEVBQUU0YyxPQUFPM2MsR0FDbkJpOUQsRUFBTWo5RCxFQUFFOGMsU0FBU0gsT0FBTzNjLEdBQUdzYyxRQUFRMGdELEdBQUkxZ0QsUUFBUWh0QixLQUFLOE0sR0FDeEQsT0FBMkMsSUFBcEM2RCxFQUFFNmMsU0FBU04sUUFBUXlnRCxHQUFLMzFELEtBQUssSUFHdEMyekQsRUFBVzd1RSxVQUFVOHdFLGdCQUNqQixTQUF5QjduQyxFQUFRUSxFQUFRQyxHQUczQyxJQUZBLElBQUlxbkMsRUFBVTd0RSxLQUFLaXNFLFlBQ2Y2QixFQUFVOXRFLEtBQUtrc0UsWUFDVnpxRSxFQUFJLEVBQUdBLEVBQUlza0MsRUFBT2pvQyxPQUFRMkQsSUFBSyxDQUN0QyxJQUFJMnRCLEVBQVFwdkIsS0FBS210RSxXQUFXNW1DLEVBQU85a0MsSUFDL0J1WCxFQUFJK3NCLEVBQU90a0MsR0FDWDhsQyxFQUFPdnVCLEVBQUV3dUIsV0FFVHBZLEVBQU16WCxHQUFHMEQsV0FDWCtULEVBQU16WCxHQUFHaUgsT0FDVDVGLEVBQUlBLEVBQUU4RixLQUFJLElBRVJzUSxFQUFNeFgsR0FBR3lELFdBQ1grVCxFQUFNeFgsR0FBR2dILE9BQ1Qyb0IsRUFBT0EsRUFBS3pvQixLQUFJLElBR2xCK3VELEVBQVksRUFBSnBzRSxHQUFTdVgsRUFDakI2MEQsRUFBWSxFQUFKcHNFLEVBQVEsR0FBSzhsQyxFQUNyQnVtQyxFQUFZLEVBQUpyc0UsR0FBUzJ0QixFQUFNelgsR0FDdkJtMkQsRUFBWSxFQUFKcnNFLEVBQVEsR0FBSzJ0QixFQUFNeFgsR0FLN0IsSUFIQSxJQUFJeEksRUFBTXBQLEtBQUtxbUMsWUFBWSxFQUFHd25DLEVBQVNDLEVBQWEsRUFBSnJzRSxFQUFPK2tDLEdBRzlDejRCLEVBQUksRUFBR0EsRUFBUSxFQUFKdE0sRUFBT3NNLElBQ3pCOC9ELEVBQVE5L0QsR0FBSyxLQUNiKy9ELEVBQVEvL0QsR0FBSyxLQUVmLE9BQU9xQixHQXdCVHVKLEVBQVN3ekQsRUFBT3RzRSxFQUFLb2xDLFdBRXJCMG1DLEVBQVc3dUUsVUFBVXNvQyxNQUFRLFNBQWUxMEIsRUFBR0MsRUFBR3k3RCxHQUNoRCxPQUFPLElBQUlELEVBQU1uc0UsS0FBTTBRLEVBQUdDLEVBQUd5N0QsSUFHL0JULEVBQVc3dUUsVUFBVXluQyxjQUFnQixTQUF1Qi9rQyxFQUFLOGIsR0FDL0QsT0FBTzZ3RCxFQUFNNEIsU0FBUy90RSxLQUFNUixFQUFLOGIsSUFHbkM2d0QsRUFBTXJ2RSxVQUFVMHFDLFNBQVcsV0FDekIsR0FBS3huQyxLQUFLa2xDLE1BQU02bUMsS0FBaEIsQ0FHQSxJQUFJOTBCLEVBQU1qM0MsS0FBS21sQyxZQUNmLEdBQUk4UixHQUFPQSxFQUFJMVAsS0FDYixPQUFPMFAsRUFBSTFQLEtBRWIsSUFBSUEsRUFBT3ZuQyxLQUFLa2xDLE1BQU1FLE1BQU1wbEMsS0FBSzBRLEVBQUUyYyxPQUFPcnRCLEtBQUtrbEMsTUFBTTZtQyxLQUFLeGtDLE1BQU92bkMsS0FBSzJRLEdBQ3RFLEdBQUlzbUMsRUFBSyxDQUNQLElBQUkvUixFQUFRbGxDLEtBQUtrbEMsTUFDYjhvQyxFQUFVLFNBQVNoMUQsR0FDckIsT0FBT2tzQixFQUFNRSxNQUFNcHNCLEVBQUV0SSxFQUFFMmMsT0FBTzZYLEVBQU02bUMsS0FBS3hrQyxNQUFPdnVCLEVBQUVySSxJQUVwRHNtQyxFQUFJMVAsS0FBT0EsRUFDWEEsRUFBS3BDLFlBQWMsQ0FDakJvQyxLQUFNLEtBQ052d0IsSUFBS2lnQyxFQUFJamdDLEtBQU8sQ0FDZGlaLElBQUtnbkIsRUFBSWpnQyxJQUFJaVosSUFDYjhWLE9BQVFrUixFQUFJamdDLElBQUkrdUIsT0FBT3hSLElBQUl5NUMsSUFFN0J6b0MsUUFBUzBSLEVBQUkxUixTQUFXLENBQ3RCRyxLQUFNdVIsRUFBSTFSLFFBQVFHLEtBQ2xCSyxPQUFRa1IsRUFBSTFSLFFBQVFRLE9BQU94UixJQUFJeTVDLEtBSXJDLE9BQU96bUMsSUFHVDRrQyxFQUFNcnZFLFVBQVU2VSxPQUFTLFdBQ3ZCLE9BQUszUixLQUFLbWxDLFlBR0gsQ0FBRW5sQyxLQUFLMFEsRUFBRzFRLEtBQUsyUSxFQUFHM1EsS0FBS21sQyxhQUFlLENBQzNDSSxRQUFTdmxDLEtBQUttbEMsWUFBWUksU0FBVyxDQUNuQ0csS0FBTTFsQyxLQUFLbWxDLFlBQVlJLFFBQVFHLEtBQy9CSyxPQUFRL2xDLEtBQUttbEMsWUFBWUksUUFBUVEsT0FBT2xrQyxNQUFNLElBRWhEbVYsSUFBS2hYLEtBQUttbEMsWUFBWW51QixLQUFPLENBQzNCaVosSUFBS2p3QixLQUFLbWxDLFlBQVludUIsSUFBSWlaLElBQzFCOFYsT0FBUS9sQyxLQUFLbWxDLFlBQVludUIsSUFBSSt1QixPQUFPbGtDLE1BQU0sTUFUckMsQ0FBRTdCLEtBQUswUSxFQUFHMVEsS0FBSzJRLElBYzFCdzdELEVBQU00QixTQUFXLFNBQWtCN29DLEVBQU8xbEMsRUFBSzhiLEdBQzFCLGlCQUFSOWIsSUFDVEEsRUFBTTQ4QyxLQUFLOTVDLE1BQU05QyxJQUNuQixJQUFJNFAsRUFBTTgxQixFQUFNRSxNQUFNNWxDLEVBQUksR0FBSUEsRUFBSSxHQUFJOGIsR0FDdEMsSUFBSzliLEVBQUksR0FDUCxPQUFPNFAsRUFFVCxTQUFTNitELEVBQVV6dUUsR0FDakIsT0FBTzBsQyxFQUFNRSxNQUFNNWxDLEVBQUksR0FBSUEsRUFBSSxHQUFJOGIsR0FHckMsSUFBSTI3QixFQUFNejNDLEVBQUksR0FZZCxPQVhBNFAsRUFBSSsxQixZQUFjLENBQ2hCb0MsS0FBTSxLQUNOaEMsUUFBUzBSLEVBQUkxUixTQUFXLENBQ3RCRyxLQUFNdVIsRUFBSTFSLFFBQVFHLEtBQ2xCSyxPQUFRLENBQUUzMkIsR0FBTWxPLE9BQU8rMUMsRUFBSTFSLFFBQVFRLE9BQU94UixJQUFJMDVDLEtBRWhEajNELElBQUtpZ0MsRUFBSWpnQyxLQUFPLENBQ2RpWixJQUFLZ25CLEVBQUlqZ0MsSUFBSWlaLElBQ2I4VixPQUFRLENBQUUzMkIsR0FBTWxPLE9BQU8rMUMsRUFBSWpnQyxJQUFJK3VCLE9BQU94UixJQUFJMDVDLE1BR3ZDNytELEdBR1QrOEQsRUFBTXJ2RSxVQUFVb1UsUUFBVSxXQUN4QixPQUFJbFIsS0FBS3EzQyxhQUNBLHNCQUNGLGdCQUFrQnIzQyxLQUFLMFEsRUFBRWtjLFVBQVVsc0IsU0FBUyxHQUFJLEdBQ25ELE9BQVNWLEtBQUsyUSxFQUFFaWMsVUFBVWxzQixTQUFTLEdBQUksR0FBSyxLQUdsRHlyRSxFQUFNcnZFLFVBQVV1NkMsV0FBYSxXQUMzQixPQUFPcjNDLEtBQUtxc0UsS0FHZEYsRUFBTXJ2RSxVQUFVb2pCLElBQU0sU0FBYWxILEdBRWpDLEdBQUloWixLQUFLcXNFLElBQ1AsT0FBT3J6RCxFQUdULEdBQUlBLEVBQUVxekQsSUFDSixPQUFPcnNFLEtBR1QsR0FBSUEsS0FBS3NzQixHQUFHdFQsR0FDVixPQUFPaFosS0FBSzBuQyxNQUdkLEdBQUkxbkMsS0FBSzhlLE1BQU13TixHQUFHdFQsR0FDaEIsT0FBT2haLEtBQUtrbEMsTUFBTUUsTUFBTSxLQUFNLE1BR2hDLEdBQXdCLElBQXBCcGxDLEtBQUswUSxFQUFFbUwsSUFBSTdDLEVBQUV0SSxHQUNmLE9BQU8xUSxLQUFLa2xDLE1BQU1FLE1BQU0sS0FBTSxNQUVoQyxJQUFJcjJCLEVBQUkvTyxLQUFLMlEsRUFBRXNjLE9BQU9qVSxFQUFFckksR0FDTixJQUFkNUIsRUFBRWlKLEtBQUssS0FDVGpKLEVBQUlBLEVBQUVzZSxPQUFPcnRCLEtBQUswUSxFQUFFdWMsT0FBT2pVLEVBQUV0SSxHQUFHbWQsWUFDbEMsSUFBSXFnRCxFQUFLbi9ELEVBQUV5ZSxTQUFTTixRQUFRbHRCLEtBQUswUSxHQUFHd2MsUUFBUWxVLEVBQUV0SSxHQUMxQ3k5RCxFQUFLcC9ELEVBQUVzZSxPQUFPcnRCLEtBQUswUSxFQUFFdWMsT0FBT2loRCxJQUFLaGhELFFBQVFsdEIsS0FBSzJRLEdBQ2xELE9BQU8zUSxLQUFLa2xDLE1BQU1FLE1BQU04b0MsRUFBSUMsSUFHOUJoQyxFQUFNcnZFLFVBQVU0cUMsSUFBTSxXQUNwQixHQUFJMW5DLEtBQUtxc0UsSUFDUCxPQUFPcnNFLEtBR1QsSUFBSW91RSxFQUFNcHVFLEtBQUsyUSxFQUFFb2MsT0FBTy9zQixLQUFLMlEsR0FDN0IsR0FBb0IsSUFBaEJ5OUQsRUFBSXAyRCxLQUFLLEdBQ1gsT0FBT2hZLEtBQUtrbEMsTUFBTUUsTUFBTSxLQUFNLE1BRWhDLElBQUkzMEIsRUFBSXpRLEtBQUtrbEMsTUFBTXowQixFQUVmK2EsRUFBS3hyQixLQUFLMFEsRUFBRThjLFNBQ1o2Z0QsRUFBUUQsRUFBSXZnRCxVQUNaOWUsRUFBSXljLEVBQUd1QixPQUFPdkIsR0FBSXdCLFFBQVF4QixHQUFJd0IsUUFBUXZjLEdBQUc0YyxPQUFPZ2hELEdBRWhESCxFQUFLbi9ELEVBQUV5ZSxTQUFTTixRQUFRbHRCLEtBQUswUSxFQUFFcWMsT0FBTy9zQixLQUFLMFEsSUFDM0N5OUQsRUFBS3AvRCxFQUFFc2UsT0FBT3J0QixLQUFLMFEsRUFBRXVjLE9BQU9paEQsSUFBS2hoRCxRQUFRbHRCLEtBQUsyUSxHQUNsRCxPQUFPM1EsS0FBS2tsQyxNQUFNRSxNQUFNOG9DLEVBQUlDLElBRzlCaEMsRUFBTXJ2RSxVQUFVcXFDLEtBQU8sV0FDckIsT0FBT25uQyxLQUFLMFEsRUFBRWtjLFdBR2hCdS9DLEVBQU1ydkUsVUFBVXNxQyxLQUFPLFdBQ3JCLE9BQU9wbkMsS0FBSzJRLEVBQUVpYyxXQUdoQnUvQyxFQUFNcnZFLFVBQVVpVyxJQUFNLFNBQWFvRSxHQUVqQyxPQURBQSxFQUFJLElBQUliLEVBQUdhLEVBQUcsSUFDVm5YLEtBQUtxM0MsYUFDQXIzQyxLQUNBQSxLQUFLeW5DLFlBQVl0d0IsR0FDakJuWCxLQUFLa2xDLE1BQU1JLGFBQWF0bEMsS0FBTW1YLEdBQzlCblgsS0FBS2tsQyxNQUFNNm1DLEtBQ1gvckUsS0FBS2tsQyxNQUFNMG9DLGdCQUFnQixDQUFFNXRFLE1BQVEsQ0FBRW1YLElBRXZDblgsS0FBS2tsQyxNQUFNZSxTQUFTam1DLEtBQU1tWCxJQUdyQ2cxRCxFQUFNcnZFLFVBQVV3eEUsT0FBUyxTQUFnQjMyRCxFQUFJNDFELEVBQUkzMUQsR0FDL0MsSUFBSW11QixFQUFTLENBQUUvbEMsS0FBTXV0RSxHQUNqQmhuQyxFQUFTLENBQUU1dUIsRUFBSUMsR0FDbkIsT0FBSTVYLEtBQUtrbEMsTUFBTTZtQyxLQUNOL3JFLEtBQUtrbEMsTUFBTTBvQyxnQkFBZ0I3bkMsRUFBUVEsR0FFbkN2bUMsS0FBS2tsQyxNQUFNbUIsWUFBWSxFQUFHTixFQUFRUSxFQUFRLElBR3JENGxDLEVBQU1ydkUsVUFBVXl4RSxRQUFVLFNBQWlCNTJELEVBQUk0MUQsRUFBSTMxRCxHQUNqRCxJQUFJbXVCLEVBQVMsQ0FBRS9sQyxLQUFNdXRFLEdBQ2pCaG5DLEVBQVMsQ0FBRTV1QixFQUFJQyxHQUNuQixPQUFJNVgsS0FBS2tsQyxNQUFNNm1DLEtBQ04vckUsS0FBS2tsQyxNQUFNMG9DLGdCQUFnQjduQyxFQUFRUSxHQUFRLEdBRTNDdm1DLEtBQUtrbEMsTUFBTW1CLFlBQVksRUFBR04sRUFBUVEsRUFBUSxHQUFHLElBR3hENGxDLEVBQU1ydkUsVUFBVXd2QixHQUFLLFNBQVl0VCxHQUMvQixPQUFPaFosT0FBU2daLEdBQ1RoWixLQUFLcXNFLE1BQVFyekQsRUFBRXF6RCxNQUNWcnNFLEtBQUtxc0UsS0FBMkIsSUFBcEJyc0UsS0FBSzBRLEVBQUVtTCxJQUFJN0MsRUFBRXRJLElBQWdDLElBQXBCMVEsS0FBSzJRLEVBQUVrTCxJQUFJN0MsRUFBRXJJLEtBR2hFdzdELEVBQU1ydkUsVUFBVWdpQixJQUFNLFNBQWEwdkQsR0FDakMsR0FBSXh1RSxLQUFLcXNFLElBQ1AsT0FBT3JzRSxLQUVULElBQUlvUCxFQUFNcFAsS0FBS2tsQyxNQUFNRSxNQUFNcGxDLEtBQUswUSxFQUFHMVEsS0FBSzJRLEVBQUVtZCxVQUMxQyxHQUFJMGdELEdBQWV4dUUsS0FBS21sQyxZQUFhLENBQ25DLElBQUk4UixFQUFNajNDLEtBQUttbEMsWUFDWHNwQyxFQUFTLFNBQVN6MUQsR0FDcEIsT0FBT0EsRUFBRThGLE9BRVgxUCxFQUFJKzFCLFlBQWMsQ0FDaEJudUIsSUFBS2lnQyxFQUFJamdDLEtBQU8sQ0FDZGlaLElBQUtnbkIsRUFBSWpnQyxJQUFJaVosSUFDYjhWLE9BQVFrUixFQUFJamdDLElBQUkrdUIsT0FBT3hSLElBQUlrNkMsSUFFN0JscEMsUUFBUzBSLEVBQUkxUixTQUFXLENBQ3RCRyxLQUFNdVIsRUFBSTFSLFFBQVFHLEtBQ2xCSyxPQUFRa1IsRUFBSTFSLFFBQVFRLE9BQU94UixJQUFJazZDLEtBSXJDLE9BQU9yL0QsR0FHVCs4RCxFQUFNcnZFLFVBQVU2cEMsSUFBTSxXQUNwQixPQUFJM21DLEtBQUtxc0UsSUFDQXJzRSxLQUFLa2xDLE1BQU1XLE9BQU8sS0FBTSxLQUFNLE1BRTdCN2xDLEtBQUtrbEMsTUFBTVcsT0FBTzdsQyxLQUFLMFEsRUFBRzFRLEtBQUsyUSxFQUFHM1EsS0FBS2tsQyxNQUFNclYsTUF3QnpEbFgsRUFBUzJ6RCxFQUFRenNFLEVBQUtvbEMsV0FFdEIwbUMsRUFBVzd1RSxVQUFVK29DLE9BQVMsU0FBZ0JuMUIsRUFBR0MsRUFBR3lHLEdBQ2xELE9BQU8sSUFBSWsxRCxFQUFPdHNFLEtBQU0wUSxFQUFHQyxFQUFHeUcsSUFHaENrMUQsRUFBT3h2RSxVQUFVa3BDLElBQU0sV0FDckIsR0FBSWhtQyxLQUFLcTNDLGFBQ1AsT0FBT3IzQyxLQUFLa2xDLE1BQU1FLE1BQU0sS0FBTSxNQUVoQyxJQUFJc3BDLEVBQU8xdUUsS0FBS29YLEVBQUV5VyxVQUNkOGdELEVBQVFELEVBQUtsaEQsU0FDYmtnRCxFQUFLMXRFLEtBQUswUSxFQUFFMmMsT0FBT3NoRCxHQUNuQkMsRUFBSzV1RSxLQUFLMlEsRUFBRTBjLE9BQU9zaEQsR0FBT3RoRCxPQUFPcWhELEdBRXJDLE9BQU8xdUUsS0FBS2tsQyxNQUFNRSxNQUFNc29DLEVBQUlrQixJQUc5QnRDLEVBQU94dkUsVUFBVWdpQixJQUFNLFdBQ3JCLE9BQU85ZSxLQUFLa2xDLE1BQU1XLE9BQU83bEMsS0FBSzBRLEVBQUcxUSxLQUFLMlEsRUFBRW1kLFNBQVU5dEIsS0FBS29YLElBR3pEazFELEVBQU94dkUsVUFBVW9qQixJQUFNLFNBQWFsSCxHQUVsQyxHQUFJaFosS0FBS3EzQyxhQUNQLE9BQU9yK0IsRUFHVCxHQUFJQSxFQUFFcStCLGFBQ0osT0FBT3IzQyxLQUdULElBQUk2dUUsRUFBTTcxRCxFQUFFNUIsRUFBRW9XLFNBQ1ZzaEQsRUFBSzl1RSxLQUFLb1gsRUFBRW9XLFNBQ1p2VixFQUFLalksS0FBSzBRLEVBQUUyYyxPQUFPd2hELEdBQ25CMzJELEVBQUtjLEVBQUV0SSxFQUFFMmMsT0FBT3loRCxHQUNoQjNzQyxFQUFLbmlDLEtBQUsyUSxFQUFFMGMsT0FBT3doRCxFQUFJeGhELE9BQU9yVSxFQUFFNUIsSUFDaENnckIsRUFBS3BwQixFQUFFckksRUFBRTBjLE9BQU95aEQsRUFBR3poRCxPQUFPcnRCLEtBQUtvWCxJQUUvQjBSLEVBQUk3USxFQUFHZ1YsT0FBTy9VLEdBQ2Q5QixFQUFJK3JCLEVBQUdsVixPQUFPbVYsR0FDbEIsR0FBa0IsSUFBZHRaLEVBQUU5USxLQUFLLEdBQ1QsT0FBa0IsSUFBZDVCLEVBQUU0QixLQUFLLEdBQ0ZoWSxLQUFLa2xDLE1BQU1XLE9BQU8sS0FBTSxLQUFNLE1BRTlCN2xDLEtBQUswbkMsTUFHaEIsSUFBSXFuQyxFQUFLam1ELEVBQUUwRSxTQUNQd2hELEVBQUtELEVBQUcxaEQsT0FBT3ZFLEdBQ2ZzSixFQUFJbmEsRUFBR29WLE9BQU8waEQsR0FFZGIsRUFBSzkzRCxFQUFFb1gsU0FBU1IsUUFBUWdpRCxHQUFJOWhELFFBQVFrRixHQUFHbEYsUUFBUWtGLEdBQy9DKzdDLEVBQUsvM0QsRUFBRWlYLE9BQU8rRSxFQUFFbEYsUUFBUWdoRCxJQUFLaGhELFFBQVFpVixFQUFHOVUsT0FBTzJoRCxJQUMvQ0MsRUFBS2p2RSxLQUFLb1gsRUFBRWlXLE9BQU9yVSxFQUFFNUIsR0FBR2lXLE9BQU92RSxHQUVuQyxPQUFPOW9CLEtBQUtrbEMsTUFBTVcsT0FBT3FvQyxFQUFJQyxFQUFJYyxJQUduQzNDLEVBQU94dkUsVUFBVWdwQyxTQUFXLFNBQWtCOXNCLEdBRTVDLEdBQUloWixLQUFLcTNDLGFBQ1AsT0FBT3IrQixFQUFFMnRCLE1BR1gsR0FBSTN0QixFQUFFcStCLGFBQ0osT0FBT3IzQyxLQUdULElBQUk4dUUsRUFBSzl1RSxLQUFLb1gsRUFBRW9XLFNBQ1p2VixFQUFLalksS0FBSzBRLEVBQ1Z3SCxFQUFLYyxFQUFFdEksRUFBRTJjLE9BQU95aEQsR0FDaEIzc0MsRUFBS25pQyxLQUFLMlEsRUFDVnl4QixFQUFLcHBCLEVBQUVySSxFQUFFMGMsT0FBT3loRCxHQUFJemhELE9BQU9ydEIsS0FBS29YLEdBRWhDMFIsRUFBSTdRLEVBQUdnVixPQUFPL1UsR0FDZDlCLEVBQUkrckIsRUFBR2xWLE9BQU9tVixHQUNsQixHQUFrQixJQUFkdFosRUFBRTlRLEtBQUssR0FDVCxPQUFrQixJQUFkNUIsRUFBRTRCLEtBQUssR0FDRmhZLEtBQUtrbEMsTUFBTVcsT0FBTyxLQUFNLEtBQU0sTUFFOUI3bEMsS0FBSzBuQyxNQUdoQixJQUFJcW5DLEVBQUtqbUQsRUFBRTBFLFNBQ1B3aEQsRUFBS0QsRUFBRzFoRCxPQUFPdkUsR0FDZnNKLEVBQUluYSxFQUFHb1YsT0FBTzBoRCxHQUVkYixFQUFLOTNELEVBQUVvWCxTQUFTUixRQUFRZ2lELEdBQUk5aEQsUUFBUWtGLEdBQUdsRixRQUFRa0YsR0FDL0MrN0MsRUFBSy8zRCxFQUFFaVgsT0FBTytFLEVBQUVsRixRQUFRZ2hELElBQUtoaEQsUUFBUWlWLEVBQUc5VSxPQUFPMmhELElBQy9DQyxFQUFLanZFLEtBQUtvWCxFQUFFaVcsT0FBT3ZFLEdBRXZCLE9BQU85b0IsS0FBS2tsQyxNQUFNVyxPQUFPcW9DLEVBQUlDLEVBQUljLElBR25DM0MsRUFBT3h2RSxVQUFVc3BDLEtBQU8sU0FBYzl5QixHQUNwQyxHQUFZLElBQVJBLEVBQ0YsT0FBT3RULEtBQ1QsR0FBSUEsS0FBS3EzQyxhQUNQLE9BQU9yM0MsS0FDVCxJQUFLc1QsRUFDSCxPQUFPdFQsS0FBSzBuQyxNQUVkLEdBQUkxbkMsS0FBS2tsQyxNQUFNMm1DLE9BQVM3ckUsS0FBS2tsQyxNQUFNNG1DLE9BQVEsQ0FFekMsSUFEQSxJQUFJMTFELEVBQUlwVyxLQUNDeUIsRUFBSSxFQUFHQSxFQUFJNlIsRUFBSzdSLElBQ3ZCMlUsRUFBSUEsRUFBRXN4QixNQUNSLE9BQU90eEIsRUFLVCxJQUFJM0YsRUFBSXpRLEtBQUtrbEMsTUFBTXowQixFQUNmbTdELEVBQU81ckUsS0FBS2tsQyxNQUFNMG1DLEtBRWxCc0QsRUFBS2x2RSxLQUFLMFEsRUFDVnkrRCxFQUFLbnZFLEtBQUsyUSxFQUNWeStELEVBQUtwdkUsS0FBS29YLEVBQ1ZpNEQsRUFBTUQsRUFBRzVoRCxTQUFTQSxTQUdsQjhoRCxFQUFNSCxFQUFHcGlELE9BQU9vaUQsR0FDcEIsSUFBUzF0RSxFQUFJLEVBQUdBLEVBQUk2UixFQUFLN1IsSUFBSyxDQUM1QixJQUFJOHRFLEVBQU1MLEVBQUcxaEQsU0FDVGdpRCxFQUFPRixFQUFJOWhELFNBQ1hpaUQsRUFBT0QsRUFBS2hpRCxTQUNaemUsRUFBSXdnRSxFQUFJeGlELE9BQU93aUQsR0FBS3ZpRCxRQUFRdWlELEdBQUt2aUQsUUFBUXZjLEVBQUU0YyxPQUFPZ2lELElBRWxEMXRDLEVBQUt1dEMsRUFBRzdoRCxPQUFPbWlELEdBQ2Z0QixFQUFLbi9ELEVBQUV5ZSxTQUFTTixRQUFReVUsRUFBRzVVLE9BQU80VSxJQUNsQ0MsRUFBS0QsRUFBR3pVLFFBQVFnaEQsR0FDaEJ3QixFQUFNM2dFLEVBQUVzZSxPQUFPdVUsR0FDbkI4dEMsRUFBTUEsRUFBSTFpRCxRQUFRMGlELEdBQUt4aUQsUUFBUXVpRCxHQUMvQixJQUFJUixFQUFLSyxFQUFJamlELE9BQU8raEQsR0FDaEIzdEUsRUFBSSxFQUFJNlIsSUFDVis3RCxFQUFNQSxFQUFJaGlELE9BQU9vaUQsSUFFbkJQLEVBQUtoQixFQUNMa0IsRUFBS0gsRUFDTEssRUFBTUksRUFHUixPQUFPMXZFLEtBQUtrbEMsTUFBTVcsT0FBT3FwQyxFQUFJSSxFQUFJamlELE9BQU91K0MsR0FBT3dELElBR2pEOUMsRUFBT3h2RSxVQUFVNHFDLElBQU0sV0FDckIsT0FBSTFuQyxLQUFLcTNDLGFBQ0FyM0MsS0FFTEEsS0FBS2tsQyxNQUFNMm1DLE1BQ043ckUsS0FBSzJ2RSxXQUNMM3ZFLEtBQUtrbEMsTUFBTTRtQyxPQUNYOXJFLEtBQUs0dkUsWUFFTDV2RSxLQUFLNnZFLFFBR2hCdkQsRUFBT3h2RSxVQUFVNnlFLFNBQVcsV0FDMUIsSUFBSXpCLEVBQ0FDLEVBQ0FjLEVBRUosR0FBSWp2RSxLQUFLdXNFLEtBQU0sQ0FNYixJQUFJdUQsRUFBSzl2RSxLQUFLMFEsRUFBRThjLFNBRVp1aUQsRUFBSy92RSxLQUFLMlEsRUFBRTZjLFNBRVp3aUQsRUFBT0QsRUFBR3ZpRCxTQUVWakgsRUFBSXZtQixLQUFLMFEsRUFBRXFjLE9BQU9nakQsR0FBSXZpRCxTQUFTTixRQUFRNGlELEdBQUk1aUQsUUFBUThpRCxHQUN2RHpwRCxFQUFJQSxFQUFFeUcsUUFBUXpHLEdBRWQsSUFBSXZaLEVBQUk4aUUsRUFBRy9pRCxPQUFPK2lELEdBQUk5aUQsUUFBUThpRCxHQUUxQjd4RCxFQUFJalIsRUFBRXdnQixTQUFTTixRQUFRM0csR0FBRzJHLFFBQVEzRyxHQUdsQzBwRCxFQUFRRCxFQUFLaGpELFFBQVFnakQsR0FFekJDLEdBREFBLEVBQVFBLEVBQU1qakQsUUFBUWlqRCxJQUNSampELFFBQVFpakQsR0FHdEIvQixFQUFLandELEVBRUxrd0QsRUFBS25oRSxFQUFFcWdCLE9BQU85RyxFQUFFMkcsUUFBUWpQLElBQUlpUCxRQUFRK2lELEdBRXBDaEIsRUFBS2p2RSxLQUFLMlEsRUFBRW9jLE9BQU8vc0IsS0FBSzJRLE9BQ25CLENBTUwsSUFBSUYsRUFBSXpRLEtBQUswUSxFQUFFOGMsU0FFWDFnQixFQUFJOU0sS0FBSzJRLEVBQUU2YyxTQUVYemUsRUFBSWpDLEVBQUUwZ0IsU0FFTjlULEVBQUkxWixLQUFLMFEsRUFBRXFjLE9BQU9qZ0IsR0FBRzBnQixTQUFTTixRQUFRemMsR0FBR3ljLFFBQVFuZSxHQUNyRDJLLEVBQUlBLEVBQUVzVCxRQUFRdFQsR0FFZCxJQUFJclcsRUFBSW9OLEVBQUVzYyxPQUFPdGMsR0FBR3VjLFFBQVF2YyxHQUV4QisxQyxFQUFJbmpELEVBQUVtcUIsU0FHTjBpRCxFQUFLbmhFLEVBQUVpZSxRQUFRamUsR0FFbkJtaEUsR0FEQUEsRUFBS0EsRUFBR2xqRCxRQUFRa2pELElBQ1JsakQsUUFBUWtqRCxHQUdoQmhDLEVBQUsxbkIsRUFBRXQ1QixRQUFReFQsR0FBR3dULFFBQVF4VCxHQUUxQnkwRCxFQUFLOXFFLEVBQUVncUIsT0FBTzNULEVBQUV3VCxRQUFRZ2hELElBQUtoaEQsUUFBUWdqRCxHQUdyQ2pCLEdBREFBLEVBQUtqdkUsS0FBSzJRLEVBQUUwYyxPQUFPcnRCLEtBQUtvWCxJQUNoQjRWLFFBQVFpaUQsR0FHbEIsT0FBT2p2RSxLQUFLa2xDLE1BQU1XLE9BQU9xb0MsRUFBSUMsRUFBSWMsSUFHbkMzQyxFQUFPeHZFLFVBQVU4eUUsVUFBWSxXQUMzQixJQUFJMUIsRUFDQUMsRUFDQWMsRUFFSixHQUFJanZFLEtBQUt1c0UsS0FBTSxDQU1iLElBQUl1RCxFQUFLOXZFLEtBQUswUSxFQUFFOGMsU0FFWnVpRCxFQUFLL3ZFLEtBQUsyUSxFQUFFNmMsU0FFWndpRCxFQUFPRCxFQUFHdmlELFNBRVZqSCxFQUFJdm1CLEtBQUswUSxFQUFFcWMsT0FBT2dqRCxHQUFJdmlELFNBQVNOLFFBQVE0aUQsR0FBSTVpRCxRQUFROGlELEdBQ3ZEenBELEVBQUlBLEVBQUV5RyxRQUFRekcsR0FFZCxJQUFJdlosRUFBSThpRSxFQUFHL2lELE9BQU8raUQsR0FBSTlpRCxRQUFROGlELEdBQUk5aUQsUUFBUWh0QixLQUFLa2xDLE1BQU16MEIsR0FFakR3TixFQUFJalIsRUFBRXdnQixTQUFTTixRQUFRM0csR0FBRzJHLFFBQVEzRyxHQUV0QzJuRCxFQUFLandELEVBRUwsSUFBSWd5RCxFQUFRRCxFQUFLaGpELFFBQVFnakQsR0FFekJDLEdBREFBLEVBQVFBLEVBQU1qakQsUUFBUWlqRCxJQUNSampELFFBQVFpakQsR0FDdEI5QixFQUFLbmhFLEVBQUVxZ0IsT0FBTzlHLEVBQUUyRyxRQUFRalAsSUFBSWlQLFFBQVEraUQsR0FFcENoQixFQUFLanZFLEtBQUsyUSxFQUFFb2MsT0FBTy9zQixLQUFLMlEsT0FDbkIsQ0FLTCxJQUFJOGEsRUFBUXpyQixLQUFLb1gsRUFBRW9XLFNBRWYyaUQsRUFBUW53RSxLQUFLMlEsRUFBRTZjLFNBRWYrWixFQUFPdm5DLEtBQUswUSxFQUFFMmMsT0FBTzhpRCxHQUVyQkMsRUFBUXB3RSxLQUFLMFEsRUFBRXVjLE9BQU94QixHQUFPNEIsT0FBT3J0QixLQUFLMFEsRUFBRXFjLE9BQU90QixJQUN0RDJrRCxFQUFRQSxFQUFNcmpELE9BQU9xakQsR0FBT3BqRCxRQUFRb2pELEdBRXBDLElBQUlDLEVBQVE5b0MsRUFBS3ZhLFFBQVF1YSxHQUVyQitvQyxHQURKRCxFQUFRQSxFQUFNcmpELFFBQVFxakQsSUFDSnRqRCxPQUFPc2pELEdBQ3pCbkMsRUFBS2tDLEVBQU01aUQsU0FBU04sUUFBUW9qRCxHQUU1QnJCLEVBQUtqdkUsS0FBSzJRLEVBQUVvYyxPQUFPL3NCLEtBQUtvWCxHQUFHb1csU0FBU04sUUFBUWlqRCxHQUFPampELFFBQVF6QixHQUUzRCxJQUFJOGtELEVBQVVKLEVBQU0zaUQsU0FHcEIraUQsR0FEQUEsR0FEQUEsRUFBVUEsRUFBUXZqRCxRQUFRdWpELElBQ1J2akQsUUFBUXVqRCxJQUNSdmpELFFBQVF1akQsR0FDMUJwQyxFQUFLaUMsRUFBTS9pRCxPQUFPZ2pELEVBQU1uakQsUUFBUWdoRCxJQUFLaGhELFFBQVFxakQsR0FHL0MsT0FBT3Z3RSxLQUFLa2xDLE1BQU1XLE9BQU9xb0MsRUFBSUMsRUFBSWMsSUFHbkMzQyxFQUFPeHZFLFVBQVUreUUsS0FBTyxXQUN0QixJQUFJcC9ELEVBQUl6USxLQUFLa2xDLE1BQU16MEIsRUFHZnkrRCxFQUFLbHZFLEtBQUswUSxFQUNWeStELEVBQUtudkUsS0FBSzJRLEVBQ1Z5K0QsRUFBS3B2RSxLQUFLb1gsRUFDVmk0RCxFQUFNRCxFQUFHNWhELFNBQVNBLFNBRWxCK2hELEVBQU1MLEVBQUcxaEQsU0FDVGdqRCxFQUFNckIsRUFBRzNoRCxTQUVUemUsRUFBSXdnRSxFQUFJeGlELE9BQU93aUQsR0FBS3ZpRCxRQUFRdWlELEdBQUt2aUQsUUFBUXZjLEVBQUU0YyxPQUFPZ2lELElBRWxEb0IsRUFBT3ZCLEVBQUduaUQsT0FBT21pRCxHQUVqQnZ0QyxHQURKOHVDLEVBQU9BLEVBQUt6akQsUUFBUXlqRCxJQUNOcGpELE9BQU9takQsR0FDakJ0QyxFQUFLbi9ELEVBQUV5ZSxTQUFTTixRQUFReVUsRUFBRzVVLE9BQU80VSxJQUNsQ0MsRUFBS0QsRUFBR3pVLFFBQVFnaEQsR0FFaEJ3QyxFQUFPRixFQUFJaGpELFNBR2ZrakQsR0FEQUEsR0FEQUEsRUFBT0EsRUFBSzFqRCxRQUFRMGpELElBQ1IxakQsUUFBUTBqRCxJQUNSMWpELFFBQVEwakQsR0FDcEIsSUFBSXZDLEVBQUtwL0QsRUFBRXNlLE9BQU91VSxHQUFJMVUsUUFBUXdqRCxHQUMxQnpCLEVBQUtFLEVBQUdwaUQsT0FBT29pRCxHQUFJOWhELE9BQU8raEQsR0FFOUIsT0FBT3B2RSxLQUFLa2xDLE1BQU1XLE9BQU9xb0MsRUFBSUMsRUFBSWMsSUFHbkMzQyxFQUFPeHZFLFVBQVU2ekUsS0FBTyxXQUN0QixJQUFLM3dFLEtBQUtrbEMsTUFBTTJtQyxNQUNkLE9BQU83ckUsS0FBSzBuQyxNQUFNeG5CLElBQUlsZ0IsTUFNeEIsSUFBSTh2RSxFQUFLOXZFLEtBQUswUSxFQUFFOGMsU0FFWnVpRCxFQUFLL3ZFLEtBQUsyUSxFQUFFNmMsU0FFWm9qRCxFQUFLNXdFLEtBQUtvWCxFQUFFb1csU0FFWndpRCxFQUFPRCxFQUFHdmlELFNBRVZ4Z0IsRUFBSThpRSxFQUFHL2lELE9BQU8raUQsR0FBSTlpRCxRQUFROGlELEdBRTFCZSxFQUFLN2pFLEVBQUV3Z0IsU0FFUG5xQixFQUFJckQsS0FBSzBRLEVBQUVxYyxPQUFPZ2pELEdBQUl2aUQsU0FBU04sUUFBUTRpRCxHQUFJNWlELFFBQVE4aUQsR0FLbkRjLEdBRkp6dEUsR0FEQUEsR0FEQUEsRUFBSUEsRUFBRTJwQixRQUFRM3BCLElBQ1IwcEIsT0FBTzFwQixHQUFHMnBCLFFBQVEzcEIsSUFDbEI2cEIsUUFBUTJqRCxJQUVIcmpELFNBRVB2UCxFQUFJK3hELEVBQUtoakQsUUFBUWdqRCxHQUdyQi94RCxHQURBQSxHQURBQSxFQUFJQSxFQUFFK08sUUFBUS9PLElBQ1IrTyxRQUFRL08sSUFDUitPLFFBQVEvTyxHQUVkLElBQUlvUyxFQUFJcmpCLEVBQUVnZ0IsUUFBUTNwQixHQUFHbXFCLFNBQVNOLFFBQVEyakQsR0FBSTNqRCxRQUFRNGpELEdBQUk1akQsUUFBUWpQLEdBRTFEOHlELEVBQU9oQixFQUFHMWlELE9BQU9nRCxHQUVyQjBnRCxHQURBQSxFQUFPQSxFQUFLL2pELFFBQVErakQsSUFDUi9qRCxRQUFRK2pELEdBQ3BCLElBQUk3QyxFQUFLbHVFLEtBQUswUSxFQUFFMmMsT0FBT3lqRCxHQUFJNWpELFFBQVE2akQsR0FFbkM3QyxHQURBQSxFQUFLQSxFQUFHbGhELFFBQVFraEQsSUFDUmxoRCxRQUFRa2hELEdBRWhCLElBQUlDLEVBQUtudUUsS0FBSzJRLEVBQUUwYyxPQUFPZ0QsRUFBRWhELE9BQU9wUCxFQUFFaVAsUUFBUW1ELElBQUluRCxRQUFRN3BCLEVBQUVncUIsT0FBT3lqRCxLQUcvRDNDLEdBREFBLEdBREFBLEVBQUtBLEVBQUduaEQsUUFBUW1oRCxJQUNSbmhELFFBQVFtaEQsSUFDUm5oRCxRQUFRbWhELEdBRWhCLElBQUljLEVBQUtqdkUsS0FBS29YLEVBQUUyVixPQUFPMXBCLEdBQUdtcUIsU0FBU04sUUFBUTBqRCxHQUFJMWpELFFBQVE0akQsR0FFdkQsT0FBTzl3RSxLQUFLa2xDLE1BQU1XLE9BQU9xb0MsRUFBSUMsRUFBSWMsSUFHbkMzQyxFQUFPeHZFLFVBQVVpVyxJQUFNLFNBQWFvRSxFQUFHNjVELEdBR3JDLE9BRkE3NUQsRUFBSSxJQUFJYixFQUFHYSxFQUFHNjVELEdBRVBoeEUsS0FBS2tsQyxNQUFNZSxTQUFTam1DLEtBQU1tWCxJQUduQ20xRCxFQUFPeHZFLFVBQVV3dkIsR0FBSyxTQUFZdFQsR0FDaEMsR0FBZSxXQUFYQSxFQUFFcE4sS0FDSixPQUFPNUwsS0FBS3NzQixHQUFHdFQsRUFBRTJ0QixPQUVuQixHQUFJM21DLE9BQVNnWixFQUNYLE9BQU8sRUFHVCxJQUFJODFELEVBQUs5dUUsS0FBS29YLEVBQUVvVyxTQUNacWhELEVBQU03MUQsRUFBRTVCLEVBQUVvVyxTQUNkLEdBQTJELElBQXZEeHRCLEtBQUswUSxFQUFFMmMsT0FBT3doRCxHQUFLM2hELFFBQVFsVSxFQUFFdEksRUFBRTJjLE9BQU95aEQsSUFBSzkyRCxLQUFLLEdBQ2xELE9BQU8sRUFHVCxJQUFJaTVELEVBQUtuQyxFQUFHemhELE9BQU9ydEIsS0FBS29YLEdBQ3BCODVELEVBQU1yQyxFQUFJeGhELE9BQU9yVSxFQUFFNUIsR0FDdkIsT0FBOEQsSUFBdkRwWCxLQUFLMlEsRUFBRTBjLE9BQU82akQsR0FBS2hrRCxRQUFRbFUsRUFBRXJJLEVBQUUwYyxPQUFPNGpELElBQUtqNUQsS0FBSyxJQUd6RHMwRCxFQUFPeHZFLFVBQVVxMEUsT0FBUyxTQUFnQnpnRSxHQUN4QyxJQUFJMGdFLEVBQUtweEUsS0FBS29YLEVBQUVvVyxTQUNackcsRUFBS3pXLEVBQUU4YixNQUFNeHNCLEtBQUtrbEMsTUFBTTVwQixLQUFLK1IsT0FBTytqRCxHQUN4QyxHQUF1QixJQUFuQnB4RSxLQUFLMFEsRUFBRW1MLElBQUlzTCxHQUNiLE9BQU8sRUFJVCxJQUZBLElBQUlrcUQsRUFBSzNnRSxFQUFFL1AsUUFDUHNkLEVBQUlqZSxLQUFLa2xDLE1BQU1ILEtBQUsxWCxPQUFPK2pELEtBQ3RCLENBRVAsR0FEQUMsRUFBR3J4RCxLQUFLaGdCLEtBQUtrbEMsTUFBTW40QixHQUNmc2tFLEVBQUd4MUQsSUFBSTdiLEtBQUtrbEMsTUFBTWxzQixJQUFNLEVBQzFCLE9BQU8sRUFHVCxHQURBbU8sRUFBRzZGLFFBQVEvTyxHQUNZLElBQW5CamUsS0FBSzBRLEVBQUVtTCxJQUFJc0wsR0FDYixPQUFPLElBSWJtbEQsRUFBT3h2RSxVQUFVb1UsUUFBVSxXQUN6QixPQUFJbFIsS0FBS3EzQyxhQUNBLHVCQUNGLGlCQUFtQnIzQyxLQUFLMFEsRUFBRWhRLFNBQVMsR0FBSSxHQUMxQyxPQUFTVixLQUFLMlEsRUFBRWpRLFNBQVMsR0FBSSxHQUM3QixPQUFTVixLQUFLb1gsRUFBRTFXLFNBQVMsR0FBSSxHQUFLLEtBR3hDNHJFLEVBQU94dkUsVUFBVXU2QyxXQUFhLFdBRTVCLE9BQTBCLElBQW5CcjNDLEtBQUtvWCxFQUFFWSxLQUFLLEssNkJDcjZCckIsSUFBSTFCLEVBQUssRUFBUSxJQUNicUMsRUFBVyxFQUFRLElBQ25COVksRUFBTyxFQUFRLElBRWZ3VyxFQUFRLEVBQVEsSUFFcEIsU0FBU2k3RCxFQUFVbHRDLEdBQ2pCdmtDLEVBQUsrQixLQUFLNUIsS0FBTSxPQUFRb2tDLEdBRXhCcGtDLEtBQUt5USxFQUFJLElBQUk2RixFQUFHOHRCLEVBQUszekIsRUFBRyxJQUFJK2IsTUFBTXhzQixLQUFLc2IsS0FDdkN0YixLQUFLOE0sRUFBSSxJQUFJd0osRUFBRzh0QixFQUFLdDNCLEVBQUcsSUFBSTBmLE1BQU14c0IsS0FBS3NiLEtBQ3ZDdGIsS0FBS3V4RSxHQUFLLElBQUlqN0QsRUFBRyxHQUFHa1csTUFBTXhzQixLQUFLc2IsS0FBS3VTLFVBQ3BDN3RCLEtBQUtza0MsSUFBTSxJQUFJaHVCLEVBQUcsR0FBR2tXLE1BQU14c0IsS0FBS3NiLEtBQ2hDdGIsS0FBS3d4RSxJQUFNeHhFLEtBQUt1eEUsR0FBR2xrRCxPQUFPcnRCLEtBQUt5USxFQUFFc2MsT0FBTy9zQixLQUFLc2tDLE1BYy9DLFNBQVM2bkMsRUFBTWpuQyxFQUFPeDBCLEVBQUcwRyxHQUN2QnZYLEVBQUtvbEMsVUFBVXJqQyxLQUFLNUIsS0FBTWtsQyxFQUFPLGNBQ3ZCLE9BQU54MEIsR0FBb0IsT0FBTjBHLEdBQ2hCcFgsS0FBSzBRLEVBQUkxUSxLQUFLa2xDLE1BQU1yVixJQUNwQjd2QixLQUFLb1gsRUFBSXBYLEtBQUtrbEMsTUFBTWIsT0FFcEJya0MsS0FBSzBRLEVBQUksSUFBSTRGLEVBQUc1RixFQUFHLElBQ25CMVEsS0FBS29YLEVBQUksSUFBSWQsRUFBR2MsRUFBRyxJQUNkcFgsS0FBSzBRLEVBQUU0SyxNQUNWdGIsS0FBSzBRLEVBQUkxUSxLQUFLMFEsRUFBRThiLE1BQU14c0IsS0FBS2tsQyxNQUFNNXBCLE1BQzlCdGIsS0FBS29YLEVBQUVrRSxNQUNWdGIsS0FBS29YLEVBQUlwWCxLQUFLb1gsRUFBRW9WLE1BQU14c0IsS0FBS2tsQyxNQUFNNXBCLE9BdkJ2QzNDLEVBQVMyNEQsRUFBV3p4RSxHQUNwQnBELEVBQU9DLFFBQVU0MEUsRUFFakJBLEVBQVV4MEUsVUFBVXVvQyxTQUFXLFNBQWtCRCxHQUMvQyxJQUFJMTBCLEVBQUkwMEIsRUFBTXFzQyxZQUFZL2dFLEVBQ3RCOGEsRUFBSzlhLEVBQUU4YyxTQUNQbWdELEVBQU1uaUQsRUFBRzZCLE9BQU8zYyxHQUFHcWMsT0FBT3ZCLEVBQUc2QixPQUFPcnRCLEtBQUt5USxJQUFJc2MsT0FBT3JjLEdBR3hELE9BQStCLElBRnZCaTlELEVBQUloZ0QsVUFFSEgsU0FBUzNSLElBQUk4eEQsSUFpQnhCaDFELEVBQVN3ekQsRUFBT3RzRSxFQUFLb2xDLFdBRXJCcXNDLEVBQVV4MEUsVUFBVWdxQyxZQUFjLFNBQXFCNzBCLEVBQU8vUCxHQUM1RCxPQUFPbEMsS0FBS29sQyxNQUFNL3VCLEVBQU1JLFFBQVF4RSxFQUFPL1AsR0FBTSxJQUcvQ292RSxFQUFVeDBFLFVBQVVzb0MsTUFBUSxTQUFlMTBCLEVBQUcwRyxHQUM1QyxPQUFPLElBQUkrMEQsRUFBTW5zRSxLQUFNMFEsRUFBRzBHLElBRzVCazZELEVBQVV4MEUsVUFBVXluQyxjQUFnQixTQUF1Qi9rQyxHQUN6RCxPQUFPMnNFLEVBQU00QixTQUFTL3RFLEtBQU1SLElBRzlCMnNFLEVBQU1ydkUsVUFBVXVxQyxXQUFhLGFBSTdCOGtDLEVBQU1ydkUsVUFBVW1xQyxRQUFVLFdBQ3hCLE9BQU9qbkMsS0FBS21uQyxPQUFPMXdCLFFBQVEsS0FBTXpXLEtBQUtrbEMsTUFBTWxzQixFQUFFak8sZUFHaERvaEUsRUFBTTRCLFNBQVcsU0FBa0I3b0MsRUFBTzFsQyxHQUN4QyxPQUFPLElBQUkyc0UsRUFBTWpuQyxFQUFPMWxDLEVBQUksR0FBSUEsRUFBSSxJQUFNMGxDLEVBQU1yVixNQUdsRHM4QyxFQUFNcnZFLFVBQVVvVSxRQUFVLFdBQ3hCLE9BQUlsUixLQUFLcTNDLGFBQ0Esc0JBQ0YsZ0JBQWtCcjNDLEtBQUswUSxFQUFFa2MsVUFBVWxzQixTQUFTLEdBQUksR0FDbkQsT0FBU1YsS0FBS29YLEVBQUV3VixVQUFVbHNCLFNBQVMsR0FBSSxHQUFLLEtBR2xEeXJFLEVBQU1ydkUsVUFBVXU2QyxXQUFhLFdBRTNCLE9BQTBCLElBQW5CcjNDLEtBQUtvWCxFQUFFWSxLQUFLLElBR3JCbTBELEVBQU1ydkUsVUFBVTRxQyxJQUFNLFdBS3BCLElBRUlncUMsRUFGSTF4RSxLQUFLMFEsRUFBRXFjLE9BQU8vc0IsS0FBS29YLEdBRWhCb1csU0FJUG1rRCxFQUZJM3hFLEtBQUswUSxFQUFFdWMsT0FBT2p0QixLQUFLb1gsR0FFaEJvVyxTQUVQemUsRUFBSTJpRSxFQUFHemtELE9BQU8wa0QsR0FFZHpELEVBQUt3RCxFQUFHcmtELE9BQU9za0QsR0FFZjFDLEVBQUtsZ0UsRUFBRXNlLE9BQU9za0QsRUFBRzVrRCxPQUFPL3NCLEtBQUtrbEMsTUFBTXNzQyxJQUFJbmtELE9BQU90ZSxLQUNsRCxPQUFPL08sS0FBS2tsQyxNQUFNRSxNQUFNOG9DLEVBQUllLElBRzlCOUMsRUFBTXJ2RSxVQUFVb2pCLElBQU0sV0FDcEIsTUFBTSxJQUFJNWdCLE1BQU0sc0NBR2xCNnNFLEVBQU1ydkUsVUFBVTgwRSxRQUFVLFNBQWlCNTRELEVBQUcrUSxHQUs1QyxJQUFJdFosRUFBSXpRLEtBQUswUSxFQUFFcWMsT0FBTy9zQixLQUFLb1gsR0FFdkJ0SyxFQUFJOU0sS0FBSzBRLEVBQUV1YyxPQUFPanRCLEtBQUtvWCxHQUV2QnJJLEVBQUlpSyxFQUFFdEksRUFBRXFjLE9BQU8vVCxFQUFFNUIsR0FJakJ5NkQsRUFGSTc0RCxFQUFFdEksRUFBRXVjLE9BQU9qVSxFQUFFNUIsR0FFVmlXLE9BQU81YyxHQUVkMmlCLEVBQUtya0IsRUFBRXNlLE9BQU92Z0IsR0FFZG9oRSxFQUFLbmtELEVBQUszUyxFQUFFaVcsT0FBT3drRCxFQUFHOWtELE9BQU9xRyxHQUFJNUYsVUFFakN5aEQsRUFBS2xsRCxFQUFLclosRUFBRTJjLE9BQU93a0QsRUFBRzNrRCxRQUFRa0csR0FBSTVGLFVBQ3RDLE9BQU94dEIsS0FBS2tsQyxNQUFNRSxNQUFNOG9DLEVBQUllLElBRzlCOUMsRUFBTXJ2RSxVQUFVaVcsSUFBTSxTQUFhb0UsR0FNakMsSUFMQSxJQUFJOEcsRUFBSTlHLEVBQUV4VyxRQUNOOFAsRUFBSXpRLEtBQ0o4TSxFQUFJOU0sS0FBS2tsQyxNQUFNRSxNQUFNLEtBQU0sTUFHdEJydUIsRUFBTyxHQUFrQixJQUFka0gsRUFBRWpHLEtBQUssR0FBVWlHLEVBQUV4RyxPQUFPLEdBQzVDVixFQUFLL1UsS0FBS2ljLEVBQUUzRyxNQUFNLElBRXBCLElBQUssSUFBSTdWLEVBQUlzVixFQUFLalosT0FBUyxFQUFHMkQsR0FBSyxFQUFHQSxJQUNwQixJQUFac1YsRUFBS3RWLElBRVBnUCxFQUFJQSxFQUFFbWhFLFFBQVE5a0UsRUFSVjlNLE1BVUo4TSxFQUFJQSxFQUFFNDZCLFFBR041NkIsRUFBSTJELEVBQUVtaEUsUUFBUTlrRSxFQWJWOU0sTUFlSnlRLEVBQUlBLEVBQUVpM0IsT0FHVixPQUFPNTZCLEdBR1RxL0QsRUFBTXJ2RSxVQUFVd3hFLE9BQVMsV0FDdkIsTUFBTSxJQUFJaHZFLE1BQU0sc0NBR2xCNnNFLEVBQU1ydkUsVUFBVWcxRSxRQUFVLFdBQ3hCLE1BQU0sSUFBSXh5RSxNQUFNLHNDQUdsQjZzRSxFQUFNcnZFLFVBQVV3dkIsR0FBSyxTQUFZdzlDLEdBQy9CLE9BQXlDLElBQWxDOXBFLEtBQUttbkMsT0FBT3RyQixJQUFJaXVELEVBQU0zaUMsU0FHL0JnbEMsRUFBTXJ2RSxVQUFVMjBFLFVBQVksV0FHMUIsT0FGQXp4RSxLQUFLMFEsRUFBSTFRLEtBQUswUSxFQUFFMmMsT0FBT3J0QixLQUFLb1gsRUFBRXlXLFdBQzlCN3RCLEtBQUtvWCxFQUFJcFgsS0FBS2tsQyxNQUFNclYsSUFDYjd2QixNQUdUbXNFLEVBQU1ydkUsVUFBVXFxQyxLQUFPLFdBSXJCLE9BRkFubkMsS0FBS3l4RSxZQUVFenhFLEtBQUswUSxFQUFFa2MsWSw2QkM5S2hCLElBQUl2VyxFQUFRLEVBQVEsSUFDaEJDLEVBQUssRUFBUSxJQUNicUMsRUFBVyxFQUFRLElBQ25COVksRUFBTyxFQUFRLElBRWZtVyxFQUFTSyxFQUFNTCxPQUVuQixTQUFTKzdELEVBQWEzdEMsR0FFcEJwa0MsS0FBS2d5RSxRQUEyQixJQUFQLEVBQVQ1dEMsRUFBSzN6QixHQUNyQnpRLEtBQUtpeUUsTUFBUWp5RSxLQUFLZ3lFLFVBQTZCLElBQVIsRUFBVDV0QyxFQUFLM3pCLEdBQ25DelEsS0FBSzZvQixTQUFXN29CLEtBQUtpeUUsTUFFckJweUUsRUFBSytCLEtBQUs1QixLQUFNLFVBQVdva0MsR0FFM0Jwa0MsS0FBS3lRLEVBQUksSUFBSTZGLEVBQUc4dEIsRUFBSzN6QixFQUFHLElBQUk0WixLQUFLcnFCLEtBQUtzYixJQUFJdE8sR0FDMUNoTixLQUFLeVEsRUFBSXpRLEtBQUt5USxFQUFFK2IsTUFBTXhzQixLQUFLc2IsS0FDM0J0YixLQUFLK08sRUFBSSxJQUFJdUgsRUFBRzh0QixFQUFLcjFCLEVBQUcsSUFBSXlkLE1BQU14c0IsS0FBS3NiLEtBQ3ZDdGIsS0FBS3MyQyxHQUFLdDJDLEtBQUsrTyxFQUFFeWUsU0FDakJ4dEIsS0FBSzBaLEVBQUksSUFBSXBELEVBQUc4dEIsRUFBSzFxQixFQUFHLElBQUk4UyxNQUFNeHNCLEtBQUtzYixLQUN2Q3RiLEtBQUtreUUsR0FBS2x5RSxLQUFLMFosRUFBRXFULE9BQU8vc0IsS0FBSzBaLEdBRTdCMUQsR0FBUWhXLEtBQUtneUUsU0FBd0MsSUFBN0JoeUUsS0FBSytPLEVBQUU2ZCxVQUFVNVUsS0FBSyxJQUM5Q2hZLEtBQUtteUUsS0FBd0IsSUFBUCxFQUFUL3RDLEVBQUtyMUIsR0F3RnBCLFNBQVNvOUQsRUFBTWpuQyxFQUFPeDBCLEVBQUdDLEVBQUd5RyxFQUFHNkcsR0FDN0JwZSxFQUFLb2xDLFVBQVVyakMsS0FBSzVCLEtBQU1rbEMsRUFBTyxjQUN2QixPQUFOeDBCLEdBQW9CLE9BQU5DLEdBQW9CLE9BQU55RyxHQUM5QnBYLEtBQUswUSxFQUFJMVEsS0FBS2tsQyxNQUFNYixLQUNwQnJrQyxLQUFLMlEsRUFBSTNRLEtBQUtrbEMsTUFBTXJWLElBQ3BCN3ZCLEtBQUtvWCxFQUFJcFgsS0FBS2tsQyxNQUFNclYsSUFDcEI3dkIsS0FBS2llLEVBQUlqZSxLQUFLa2xDLE1BQU1iLEtBQ3BCcmtDLEtBQUt1c0UsTUFBTyxJQUVadnNFLEtBQUswUSxFQUFJLElBQUk0RixFQUFHNUYsRUFBRyxJQUNuQjFRLEtBQUsyUSxFQUFJLElBQUkyRixFQUFHM0YsRUFBRyxJQUNuQjNRLEtBQUtvWCxFQUFJQSxFQUFJLElBQUlkLEVBQUdjLEVBQUcsSUFBTXBYLEtBQUtrbEMsTUFBTXJWLElBQ3hDN3ZCLEtBQUtpZSxFQUFJQSxHQUFLLElBQUkzSCxFQUFHMkgsRUFBRyxJQUNuQmplLEtBQUswUSxFQUFFNEssTUFDVnRiLEtBQUswUSxFQUFJMVEsS0FBSzBRLEVBQUU4YixNQUFNeHNCLEtBQUtrbEMsTUFBTTVwQixNQUM5QnRiLEtBQUsyUSxFQUFFMkssTUFDVnRiLEtBQUsyUSxFQUFJM1EsS0FBSzJRLEVBQUU2YixNQUFNeHNCLEtBQUtrbEMsTUFBTTVwQixNQUM5QnRiLEtBQUtvWCxFQUFFa0UsTUFDVnRiLEtBQUtvWCxFQUFJcFgsS0FBS29YLEVBQUVvVixNQUFNeHNCLEtBQUtrbEMsTUFBTTVwQixNQUMvQnRiLEtBQUtpZSxJQUFNamUsS0FBS2llLEVBQUUzQyxNQUNwQnRiLEtBQUtpZSxFQUFJamUsS0FBS2llLEVBQUV1TyxNQUFNeHNCLEtBQUtrbEMsTUFBTTVwQixNQUNuQ3RiLEtBQUt1c0UsS0FBT3ZzRSxLQUFLb1gsSUFBTXBYLEtBQUtrbEMsTUFBTXJWLElBRzlCN3ZCLEtBQUtrbEMsTUFBTXJjLFdBQWE3b0IsS0FBS2llLElBQy9CamUsS0FBS2llLEVBQUlqZSxLQUFLMFEsRUFBRTJjLE9BQU9ydEIsS0FBSzJRLEdBQ3ZCM1EsS0FBS3VzRSxPQUNSdnNFLEtBQUtpZSxFQUFJamUsS0FBS2llLEVBQUVvUCxPQUFPcnRCLEtBQUtvWCxFQUFFeVcsY0FqSHRDbFYsRUFBU281RCxFQUFjbHlFLEdBQ3ZCcEQsRUFBT0MsUUFBVXExRSxFQUVqQkEsRUFBYWoxRSxVQUFVczFFLE1BQVEsU0FBZXY3RCxHQUM1QyxPQUFJN1csS0FBS2l5RSxNQUNBcDdELEVBQUlpWCxTQUVKOXRCLEtBQUt5USxFQUFFNGMsT0FBT3hXLElBR3pCazdELEVBQWFqMUUsVUFBVXUxRSxNQUFRLFNBQWV4N0QsR0FDNUMsT0FBSTdXLEtBQUtteUUsS0FDQXQ3RCxFQUVBN1csS0FBSytPLEVBQUVzZSxPQUFPeFcsSUFJekJrN0QsRUFBYWoxRSxVQUFVK29DLE9BQVMsU0FBZ0JuMUIsRUFBR0MsRUFBR3lHLEVBQUc2RyxHQUN2RCxPQUFPamUsS0FBS29sQyxNQUFNMTBCLEVBQUdDLEVBQUd5RyxFQUFHNkcsSUFHN0I4ekQsRUFBYWoxRSxVQUFVaXFDLFdBQWEsU0FBb0JyMkIsRUFBRzJXLElBQ3pEM1csRUFBSSxJQUFJNEYsRUFBRzVGLEVBQUcsS0FDUDRLLE1BQ0w1SyxFQUFJQSxFQUFFOGIsTUFBTXhzQixLQUFLc2IsTUFFbkIsSUFBSWtRLEVBQUs5YSxFQUFFOGMsU0FDUG1nRCxFQUFNM3RFLEtBQUtzMkMsR0FBR3JwQixPQUFPanRCLEtBQUt5USxFQUFFNGMsT0FBTzdCLElBQ25DOG1ELEVBQU10eUUsS0FBSzZ2QixJQUFJNUMsT0FBT2p0QixLQUFLczJDLEdBQUdqcEIsT0FBT3J0QixLQUFLMFosR0FBRzJULE9BQU83QixJQUVwRHloRCxFQUFLVSxFQUFJdGdELE9BQU9pbEQsRUFBSXprRCxXQUNwQmxkLEVBQUlzOEQsRUFBR3QvQyxVQUNYLEdBQTZDLElBQXpDaGQsRUFBRTZjLFNBQVNQLE9BQU9nZ0QsR0FBSXB4RCxJQUFJN2IsS0FBS3FrQyxNQUNqQyxNQUFNLElBQUkva0MsTUFBTSxpQkFFbEIsSUFBSWlZLEVBQVE1RyxFQUFFaWMsVUFBVXJWLFFBSXhCLE9BSEk4UCxJQUFROVAsSUFBVThQLEdBQU85UCxLQUMzQjVHLEVBQUlBLEVBQUVtZCxVQUVEOXRCLEtBQUtvbEMsTUFBTTEwQixFQUFHQyxJQUd2Qm9oRSxFQUFhajFFLFVBQVV5MUUsV0FBYSxTQUFvQjVoRSxFQUFHMFcsSUFDekQxVyxFQUFJLElBQUkyRixFQUFHM0YsRUFBRyxLQUNQMkssTUFDTDNLLEVBQUlBLEVBQUU2YixNQUFNeHNCLEtBQUtzYixNQUduQixJQUFJMnhELEVBQUt0OEQsRUFBRTZjLFNBQ1A4a0QsRUFBTXJGLEVBQUdoZ0QsT0FBT2p0QixLQUFLczJDLElBQ3JCcTNCLEVBQU1WLEVBQUc1L0MsT0FBT3J0QixLQUFLMFosR0FBRzJULE9BQU9ydEIsS0FBS3MyQyxJQUFJcnBCLE9BQU9qdEIsS0FBS3lRLEdBQ3BEK2EsRUFBSzhtRCxFQUFJamxELE9BQU9zZ0QsRUFBSTkvQyxXQUV4QixHQUEwQixJQUF0QnJDLEVBQUczUCxJQUFJN2IsS0FBS3FrQyxNQUFhLENBQzNCLEdBQUloZCxFQUNGLE1BQU0sSUFBSS9uQixNQUFNLGlCQUVoQixPQUFPVSxLQUFLb2xDLE1BQU1wbEMsS0FBS3FrQyxLQUFNMXpCLEdBR2pDLElBQUlELEVBQUk4YSxFQUFHbUMsVUFDWCxHQUE2QyxJQUF6Q2pkLEVBQUU4YyxTQUFTUCxPQUFPekIsR0FBSTNQLElBQUk3YixLQUFLcWtDLE1BQ2pDLE1BQU0sSUFBSS9rQyxNQUFNLGlCQUtsQixPQUhJb1IsRUFBRWtjLFVBQVVyVixVQUFZOFAsSUFDMUIzVyxFQUFJQSxFQUFFb2QsVUFFRDl0QixLQUFLb2xDLE1BQU0xMEIsRUFBR0MsSUFHdkJvaEUsRUFBYWoxRSxVQUFVdW9DLFNBQVcsU0FBa0JELEdBQ2xELEdBQUlBLEVBQU1pUyxhQUNSLE9BQU8sRUFHVGpTLEVBQU1xc0MsWUFFTixJQUFJam1ELEVBQUs0WixFQUFNMTBCLEVBQUU4YyxTQUNieS9DLEVBQUs3bkMsRUFBTXowQixFQUFFNmMsU0FDYjhrRCxFQUFNOW1ELEVBQUc2QixPQUFPcnRCLEtBQUt5USxHQUFHc2MsT0FBT2tnRCxHQUMvQlUsRUFBTTN0RSxLQUFLczJDLEdBQUdqcEIsT0FBT3J0QixLQUFLNnZCLElBQUk5QyxPQUFPL3NCLEtBQUswWixFQUFFMlQsT0FBTzdCLEdBQUk2QixPQUFPNC9DLEtBRWxFLE9BQXdCLElBQWpCcUYsRUFBSXoyRCxJQUFJOHhELElBa0NqQmgxRCxFQUFTd3pELEVBQU90c0UsRUFBS29sQyxXQUVyQjhzQyxFQUFhajFFLFVBQVV5bkMsY0FBZ0IsU0FBdUIva0MsR0FDNUQsT0FBTzJzRSxFQUFNNEIsU0FBUy90RSxLQUFNUixJQUc5QnV5RSxFQUFhajFFLFVBQVVzb0MsTUFBUSxTQUFlMTBCLEVBQUdDLEVBQUd5RyxFQUFHNkcsR0FDckQsT0FBTyxJQUFJa3VELEVBQU1uc0UsS0FBTTBRLEVBQUdDLEVBQUd5RyxFQUFHNkcsSUFHbENrdUQsRUFBTTRCLFNBQVcsU0FBa0I3b0MsRUFBTzFsQyxHQUN4QyxPQUFPLElBQUkyc0UsRUFBTWpuQyxFQUFPMWxDLEVBQUksR0FBSUEsRUFBSSxHQUFJQSxFQUFJLEtBRzlDMnNFLEVBQU1ydkUsVUFBVW9VLFFBQVUsV0FDeEIsT0FBSWxSLEtBQUtxM0MsYUFDQSxzQkFDRixnQkFBa0JyM0MsS0FBSzBRLEVBQUVrYyxVQUFVbHNCLFNBQVMsR0FBSSxHQUNuRCxPQUFTVixLQUFLMlEsRUFBRWljLFVBQVVsc0IsU0FBUyxHQUFJLEdBQ3ZDLE9BQVNWLEtBQUtvWCxFQUFFd1YsVUFBVWxzQixTQUFTLEdBQUksR0FBSyxLQUdsRHlyRSxFQUFNcnZFLFVBQVV1NkMsV0FBYSxXQUUzQixPQUEwQixJQUFuQnIzQyxLQUFLMFEsRUFBRXNILEtBQUssS0FDTyxJQUF2QmhZLEtBQUsyUSxFQUFFa0wsSUFBSTdiLEtBQUtvWCxJQUNoQnBYLEtBQUt1c0UsTUFBcUMsSUFBN0J2c0UsS0FBSzJRLEVBQUVrTCxJQUFJN2IsS0FBS2tsQyxNQUFNbjJCLEtBR3hDbzlELEVBQU1ydkUsVUFBVTAxRSxRQUFVLFdBTXhCLElBQUkvaEUsRUFBSXpRLEtBQUswUSxFQUFFOGMsU0FFWDFnQixFQUFJOU0sS0FBSzJRLEVBQUU2YyxTQUVYemUsRUFBSS9PLEtBQUtvWCxFQUFFb1csU0FDZnplLEVBQUlBLEVBQUVpZSxRQUFRamUsR0FFZCxJQUFJMkssRUFBSTFaLEtBQUtrbEMsTUFBTWt0QyxNQUFNM2hFLEdBRXJCcE4sRUFBSXJELEtBQUswUSxFQUFFcWMsT0FBTy9zQixLQUFLMlEsR0FBRzZjLFNBQVNOLFFBQVF6YyxHQUFHeWMsUUFBUXBnQixHQUV0RGllLEVBQUlyUixFQUFFcVQsT0FBT2pnQixHQUViMDVDLEVBQUl6N0IsRUFBRWtDLE9BQU9sZSxHQUViK1osRUFBSXBQLEVBQUV1VCxPQUFPbmdCLEdBRWJvaEUsRUFBSzdxRSxFQUFFZ3FCLE9BQU9tNUIsR0FFZDJuQixFQUFLcGpELEVBQUVzQyxPQUFPdkUsR0FFZDJwRCxFQUFLcHZFLEVBQUVncUIsT0FBT3ZFLEdBRWRtbUQsRUFBS3pvQixFQUFFbjVCLE9BQU90QyxHQUNsQixPQUFPL3FCLEtBQUtrbEMsTUFBTUUsTUFBTThvQyxFQUFJQyxFQUFJYyxFQUFJd0QsSUFHdEN0RyxFQUFNcnZFLFVBQVU0MUUsU0FBVyxXQVF6QixJQU1JeEUsRUFDQUMsRUFDQWMsRUFSQW5pRSxFQUFJOU0sS0FBSzBRLEVBQUVxYyxPQUFPL3NCLEtBQUsyUSxHQUFHNmMsU0FFMUJ6ZSxFQUFJL08sS0FBSzBRLEVBQUU4YyxTQUVYOVQsRUFBSTFaLEtBQUsyUSxFQUFFNmMsU0FLZixHQUFJeHRCLEtBQUtrbEMsTUFBTThzQyxRQUFTLENBRXRCLElBRUl4ckIsR0FGQW5qRCxFQUFJckQsS0FBS2tsQyxNQUFNa3RDLE1BQU1yakUsSUFFZmdlLE9BQU9yVCxHQUNqQixHQUFJMVosS0FBS3VzRSxLQUVQMkIsRUFBS3BoRSxFQUFFbWdCLE9BQU9sZSxHQUFHa2UsT0FBT3ZULEdBQUcyVCxPQUFPbTVCLEVBQUV2NUIsT0FBT2p0QixLQUFLa2xDLE1BQU1aLE1BRXRENnBDLEVBQUszbkIsRUFBRW41QixPQUFPaHFCLEVBQUU0cEIsT0FBT3ZULElBRXZCdTFELEVBQUt6b0IsRUFBRWg1QixTQUFTUCxPQUFPdTVCLEdBQUd2NUIsT0FBT3U1QixPQUM1QixDQUVMLElBQUkxOUIsRUFBSTlvQixLQUFLb1gsRUFBRW9XLFNBRVh6ZixFQUFJeTRDLEVBQUV2NUIsT0FBT25FLEdBQUdvRSxRQUFRcEUsR0FFNUJvbEQsRUFBS3BoRSxFQUFFbWdCLE9BQU9sZSxHQUFHbWUsUUFBUXhULEdBQUcyVCxPQUFPdGYsR0FFbkNvZ0UsRUFBSzNuQixFQUFFbjVCLE9BQU9ocUIsRUFBRTRwQixPQUFPdlQsSUFFdkJ1MUQsRUFBS3pvQixFQUFFbjVCLE9BQU90ZixRQUVYLENBRUwsSUFBSTFLLEVBQUkwTCxFQUFFZ2UsT0FBT3JULEdBRWJvUCxFQUFJOW9CLEtBQUtrbEMsTUFBTW10QyxNQUFNcnlFLEtBQUtvWCxHQUFHb1csU0FFN0J6ZixFQUFJMUssRUFBRTRwQixPQUFPbkUsR0FBR21FLE9BQU9uRSxHQUUzQm9sRCxFQUFLbHVFLEtBQUtrbEMsTUFBTW10QyxNQUFNdmxFLEVBQUVvZ0IsUUFBUTdwQixJQUFJZ3FCLE9BQU90ZixHQUUzQ29nRSxFQUFLbnVFLEtBQUtrbEMsTUFBTW10QyxNQUFNaHZFLEdBQUdncUIsT0FBT3RlLEVBQUVtZSxRQUFReFQsSUFFMUN1MUQsRUFBSzVyRSxFQUFFZ3FCLE9BQU90ZixHQUVoQixPQUFPL04sS0FBS2tsQyxNQUFNRSxNQUFNOG9DLEVBQUlDLEVBQUljLElBR2xDOUMsRUFBTXJ2RSxVQUFVNHFDLElBQU0sV0FDcEIsT0FBSTFuQyxLQUFLcTNDLGFBQ0FyM0MsS0FHTEEsS0FBS2tsQyxNQUFNcmMsU0FDTjdvQixLQUFLd3lFLFVBRUx4eUUsS0FBSzB5RSxZQUdoQnZHLEVBQU1ydkUsVUFBVTYxRSxRQUFVLFNBQWlCMzVELEdBTXpDLElBQUl2SSxFQUFJelEsS0FBSzJRLEVBQUVzYyxPQUFPanRCLEtBQUswUSxHQUFHMmMsT0FBT3JVLEVBQUVySSxFQUFFc2MsT0FBT2pVLEVBQUV0SSxJQUU5QzVELEVBQUk5TSxLQUFLMlEsRUFBRW9jLE9BQU8vc0IsS0FBSzBRLEdBQUcyYyxPQUFPclUsRUFBRXJJLEVBQUVvYyxPQUFPL1QsRUFBRXRJLElBRTlDM0IsRUFBSS9PLEtBQUtpZSxFQUFFb1AsT0FBT3J0QixLQUFLa2xDLE1BQU1ndEMsSUFBSTdrRCxPQUFPclUsRUFBRWlGLEdBRTFDdkUsRUFBSTFaLEtBQUtvWCxFQUFFaVcsT0FBT3JVLEVBQUU1QixFQUFFMlYsT0FBTy9ULEVBQUU1QixJQUUvQi9ULEVBQUl5SixFQUFFbWdCLE9BQU94YyxHQUViKzFDLEVBQUk5c0MsRUFBRXVULE9BQU9sZSxHQUViZ2MsRUFBSXJSLEVBQUVxVCxPQUFPaGUsR0FFYitaLEVBQUloYyxFQUFFaWdCLE9BQU90YyxHQUVieTlELEVBQUs3cUUsRUFBRWdxQixPQUFPbTVCLEdBRWQybkIsRUFBS3BqRCxFQUFFc0MsT0FBT3ZFLEdBRWQycEQsRUFBS3B2RSxFQUFFZ3FCLE9BQU92RSxHQUVkbW1ELEVBQUt6b0IsRUFBRW41QixPQUFPdEMsR0FDbEIsT0FBTy9xQixLQUFLa2xDLE1BQU1FLE1BQU04b0MsRUFBSUMsRUFBSWMsRUFBSXdELElBR3RDdEcsRUFBTXJ2RSxVQUFVODFFLFNBQVcsU0FBa0I1NUQsR0FPM0MsSUFnQkltMUQsRUFDQWMsRUFqQkF4K0QsRUFBSXpRLEtBQUtvWCxFQUFFaVcsT0FBT3JVLEVBQUU1QixHQUVwQnRLLEVBQUkyRCxFQUFFK2MsU0FFTnplLEVBQUkvTyxLQUFLMFEsRUFBRTJjLE9BQU9yVSxFQUFFdEksR0FFcEJnSixFQUFJMVosS0FBSzJRLEVBQUUwYyxPQUFPclUsRUFBRXJJLEdBRXBCdE4sRUFBSXJELEtBQUtrbEMsTUFBTXhyQixFQUFFMlQsT0FBT3RlLEdBQUdzZSxPQUFPM1QsR0FFbEM4c0MsRUFBSTE1QyxFQUFFbWdCLE9BQU81cEIsR0FFYjBuQixFQUFJamUsRUFBRWlnQixPQUFPMXBCLEdBRWJpckIsRUFBTXR1QixLQUFLMFEsRUFBRXFjLE9BQU8vc0IsS0FBSzJRLEdBQUcwYyxPQUFPclUsRUFBRXRJLEVBQUVxYyxPQUFPL1QsRUFBRXJJLElBQUl1YyxRQUFRbmUsR0FBR21lLFFBQVF4VCxHQUN2RXcwRCxFQUFLejlELEVBQUU0YyxPQUFPbTVCLEdBQUduNUIsT0FBT2lCLEdBYzVCLE9BWEl0dUIsS0FBS2tsQyxNQUFNOHNDLFNBRWI3RCxFQUFLMTlELEVBQUU0YyxPQUFPdEMsR0FBR3NDLE9BQU8zVCxFQUFFdVQsT0FBT2p0QixLQUFLa2xDLE1BQU1rdEMsTUFBTXJqRSxLQUVsRGtnRSxFQUFLem9CLEVBQUVuNUIsT0FBT3RDLEtBR2RvakQsRUFBSzE5RCxFQUFFNGMsT0FBT3RDLEdBQUdzQyxPQUFPM1QsRUFBRXVULE9BQU9sZSxJQUVqQ2tnRSxFQUFLanZFLEtBQUtrbEMsTUFBTW10QyxNQUFNN3JCLEdBQUduNUIsT0FBT3RDLElBRTNCL3FCLEtBQUtrbEMsTUFBTUUsTUFBTThvQyxFQUFJQyxFQUFJYyxJQUdsQzlDLEVBQU1ydkUsVUFBVW9qQixJQUFNLFNBQWFsSCxHQUNqQyxPQUFJaFosS0FBS3EzQyxhQUNBcitCLEVBQ0xBLEVBQUVxK0IsYUFDR3IzQyxLQUVMQSxLQUFLa2xDLE1BQU1yYyxTQUNON29CLEtBQUsyeUUsUUFBUTM1RCxHQUViaFosS0FBSzR5RSxTQUFTNTVELElBR3pCbXpELEVBQU1ydkUsVUFBVWlXLElBQU0sU0FBYW9FLEdBQ2pDLE9BQUluWCxLQUFLeW5DLFlBQVl0d0IsR0FDWm5YLEtBQUtrbEMsTUFBTUksYUFBYXRsQyxLQUFNbVgsR0FFOUJuWCxLQUFLa2xDLE1BQU1lLFNBQVNqbUMsS0FBTW1YLElBR3JDZzFELEVBQU1ydkUsVUFBVXd4RSxPQUFTLFNBQWdCMzJELEVBQUlxQixFQUFHcEIsR0FDOUMsT0FBTzVYLEtBQUtrbEMsTUFBTW1CLFlBQVksRUFBRyxDQUFFcm1DLEtBQU1nWixHQUFLLENBQUVyQixFQUFJQyxHQUFNLEdBQUcsSUFHL0R1MEQsRUFBTXJ2RSxVQUFVeXhFLFFBQVUsU0FBaUI1MkQsRUFBSXFCLEVBQUdwQixHQUNoRCxPQUFPNVgsS0FBS2tsQyxNQUFNbUIsWUFBWSxFQUFHLENBQUVybUMsS0FBTWdaLEdBQUssQ0FBRXJCLEVBQUlDLEdBQU0sR0FBRyxJQUcvRHUwRCxFQUFNcnZFLFVBQVUyMEUsVUFBWSxXQUMxQixHQUFJenhFLEtBQUt1c0UsS0FDUCxPQUFPdnNFLEtBR1QsSUFBSTZ5RSxFQUFLN3lFLEtBQUtvWCxFQUFFeVcsVUFPaEIsT0FOQTd0QixLQUFLMFEsRUFBSTFRLEtBQUswUSxFQUFFMmMsT0FBT3dsRCxHQUN2Qjd5RSxLQUFLMlEsRUFBSTNRLEtBQUsyUSxFQUFFMGMsT0FBT3dsRCxHQUNuQjd5RSxLQUFLaWUsSUFDUGplLEtBQUtpZSxFQUFJamUsS0FBS2llLEVBQUVvUCxPQUFPd2xELElBQ3pCN3lFLEtBQUtvWCxFQUFJcFgsS0FBS2tsQyxNQUFNclYsSUFDcEI3dkIsS0FBS3VzRSxNQUFPLEVBQ0x2c0UsTUFHVG1zRSxFQUFNcnZFLFVBQVVnaUIsSUFBTSxXQUNwQixPQUFPOWUsS0FBS2tsQyxNQUFNRSxNQUFNcGxDLEtBQUswUSxFQUFFb2QsU0FDUDl0QixLQUFLMlEsRUFDTDNRLEtBQUtvWCxFQUNMcFgsS0FBS2llLEdBQUtqZSxLQUFLaWUsRUFBRTZQLFdBRzNDcStDLEVBQU1ydkUsVUFBVXFxQyxLQUFPLFdBRXJCLE9BREFubkMsS0FBS3l4RSxZQUNFenhFLEtBQUswUSxFQUFFa2MsV0FHaEJ1L0MsRUFBTXJ2RSxVQUFVc3FDLEtBQU8sV0FFckIsT0FEQXBuQyxLQUFLeXhFLFlBQ0V6eEUsS0FBSzJRLEVBQUVpYyxXQUdoQnUvQyxFQUFNcnZFLFVBQVV3dkIsR0FBSyxTQUFZdzlDLEdBQy9CLE9BQU85cEUsT0FBUzhwRSxHQUN5QixJQUFsQzlwRSxLQUFLbW5DLE9BQU90ckIsSUFBSWl1RCxFQUFNM2lDLFNBQ1ksSUFBbENubkMsS0FBS29uQyxPQUFPdnJCLElBQUlpdUQsRUFBTTFpQyxTQUcvQitrQyxFQUFNcnZFLFVBQVVxMEUsT0FBUyxTQUFnQnpnRSxHQUN2QyxJQUFJeVcsRUFBS3pXLEVBQUU4YixNQUFNeHNCLEtBQUtrbEMsTUFBTTVwQixLQUFLK1IsT0FBT3J0QixLQUFLb1gsR0FDN0MsR0FBdUIsSUFBbkJwWCxLQUFLMFEsRUFBRW1MLElBQUlzTCxHQUNiLE9BQU8sRUFJVCxJQUZBLElBQUlrcUQsRUFBSzNnRSxFQUFFL1AsUUFDUHNkLEVBQUlqZSxLQUFLa2xDLE1BQU1ILEtBQUsxWCxPQUFPcnRCLEtBQUtvWCxLQUMzQixDQUVQLEdBREFpNkQsRUFBR3J4RCxLQUFLaGdCLEtBQUtrbEMsTUFBTW40QixHQUNmc2tFLEVBQUd4MUQsSUFBSTdiLEtBQUtrbEMsTUFBTWxzQixJQUFNLEVBQzFCLE9BQU8sRUFHVCxHQURBbU8sRUFBRzZGLFFBQVEvTyxHQUNZLElBQW5CamUsS0FBSzBRLEVBQUVtTCxJQUFJc0wsR0FDYixPQUFPLElBS2JnbEQsRUFBTXJ2RSxVQUFVa3BDLElBQU1tbUMsRUFBTXJ2RSxVQUFVMjBFLFVBQ3RDdEYsRUFBTXJ2RSxVQUFVZ3BDLFNBQVdxbUMsRUFBTXJ2RSxVQUFVb2pCLEssNkJDN2EzQ3hqQixFQUFRc3hDLEtBQU8sRUFBUSxLQUN2QnR4QyxFQUFRdXhDLE9BQVMsRUFBUSxLQUN6QnZ4QyxFQUFRd3hDLE9BQVMsRUFBUSxLQUN6Qnh4QyxFQUFReXhDLE9BQVMsRUFBUSxLQUN6Qnp4QyxFQUFRMHhDLE9BQVMsRUFBUSxNLDZCQ0p6QixJQUFJLzNCLEVBQVEsRUFBUSxJQUNoQm9oQyxFQUFTLEVBQVEsSUFDakJpYSxFQUFZLEVBQVEsS0FFcEJwNEMsRUFBU2pELEVBQU1pRCxPQUNmQyxFQUFRbEQsRUFBTWtELE1BQ2RJLEVBQVV0RCxFQUFNc0QsUUFDaEIwM0MsRUFBT0ssRUFBVUwsS0FDakI3eEIsRUFBWWlZLEVBQU9qWSxVQUVuQnN6QyxFQUFTLENBQ1gsV0FBWSxXQUNaLFdBQVksWUFHZCxTQUFTOTBCLElBQ1AsS0FBTWgrQyxnQkFBZ0JnK0MsR0FDcEIsT0FBTyxJQUFJQSxFQUVieGUsRUFBVTU5QixLQUFLNUIsTUFDZkEsS0FBSzhvQixFQUFJLENBQ1AsV0FBWSxXQUFZLFdBQ3hCLFVBQVksWUFDZDlvQixLQUFLKzlDLEVBQUksSUFBSW5zQyxNQUFNLElBR3JCeUUsRUFBTXNDLFNBQVNxbEMsRUFBTXhlLEdBQ3JCL2lDLEVBQU9DLFFBQVVzaEQsRUFFakJBLEVBQUs1NUMsVUFBWSxJQUNqQjQ1QyxFQUFLcmUsUUFBVSxJQUNmcWUsRUFBS3BlLGFBQWUsR0FDcEJvZSxFQUFLbmUsVUFBWSxHQUVqQm1lLEVBQUtsaEQsVUFBVXEwQixRQUFVLFNBQWlCbGIsRUFBSzVKLEdBRzdDLElBRkEsSUFBSTB4QyxFQUFJLzlDLEtBQUsrOUMsRUFFSnQ4QyxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDdEJzOEMsRUFBRXQ4QyxHQUFLd1UsRUFBSTVKLEVBQVE1SyxHQUVyQixLQUFNQSxFQUFJczhDLEVBQUVqZ0QsT0FBUTJELElBQ2xCczhDLEVBQUV0OEMsR0FBSzZYLEVBQU95a0MsRUFBRXQ4QyxFQUFJLEdBQUtzOEMsRUFBRXQ4QyxFQUFJLEdBQUtzOEMsRUFBRXQ4QyxFQUFJLElBQU1zOEMsRUFBRXQ4QyxFQUFJLElBQUssR0FFN0QsSUFBSWdQLEVBQUl6USxLQUFLOG9CLEVBQUUsR0FDWGhjLEVBQUk5TSxLQUFLOG9CLEVBQUUsR0FDWC9aLEVBQUkvTyxLQUFLOG9CLEVBQUUsR0FDWHBQLEVBQUkxWixLQUFLOG9CLEVBQUUsR0FDWHpsQixFQUFJckQsS0FBSzhvQixFQUFFLEdBRWYsSUFBS3JuQixFQUFJLEVBQUdBLEVBQUlzOEMsRUFBRWpnRCxPQUFRMkQsSUFBSyxDQUM3QixJQUFJOGtCLEtBQU85a0IsRUFBSSxJQUNYd2MsRUFBSXRFLEVBQVFMLEVBQU83SSxFQUFHLEdBQUk0Z0QsRUFBSzlxQyxFQUFHelosRUFBR2lDLEVBQUcySyxHQUFJclcsRUFBRzA2QyxFQUFFdDhDLEdBQUlxeEUsRUFBT3ZzRCxJQUNoRWxqQixFQUFJcVcsRUFDSkEsRUFBSTNLLEVBQ0pBLEVBQUl1SyxFQUFPeE0sRUFBRyxJQUNkQSxFQUFJMkQsRUFDSkEsRUFBSXdOLEVBR05qZSxLQUFLOG9CLEVBQUUsR0FBS3ZQLEVBQU12WixLQUFLOG9CLEVBQUUsR0FBSXJZLEdBQzdCelEsS0FBSzhvQixFQUFFLEdBQUt2UCxFQUFNdlosS0FBSzhvQixFQUFFLEdBQUloYyxHQUM3QjlNLEtBQUs4b0IsRUFBRSxHQUFLdlAsRUFBTXZaLEtBQUs4b0IsRUFBRSxHQUFJL1osR0FDN0IvTyxLQUFLOG9CLEVBQUUsR0FBS3ZQLEVBQU12WixLQUFLOG9CLEVBQUUsR0FBSXBQLEdBQzdCMVosS0FBSzhvQixFQUFFLEdBQUt2UCxFQUFNdlosS0FBSzhvQixFQUFFLEdBQUl6bEIsSUFHL0IyNkMsRUFBS2xoRCxVQUFVbWpDLFFBQVUsU0FBZ0IvOUIsR0FDdkMsTUFBWSxRQUFSQSxFQUNLbVUsRUFBTTRDLFFBQVFqWixLQUFLOG9CLEVBQUcsT0FFdEJ6UyxFQUFNK0MsUUFBUXBaLEtBQUs4b0IsRUFBRyxTLDZCQ3RFakMsSUFBSXpTLEVBQVEsRUFBUSxJQUNoQnU3QyxFQUFTLEVBQVEsS0FFckIsU0FBU21oQixJQUNQLEtBQU0veUUsZ0JBQWdCK3lFLEdBQ3BCLE9BQU8sSUFBSUEsRUFFYm5oQixFQUFPaHdELEtBQUs1QixNQUNaQSxLQUFLOG9CLEVBQUksQ0FDUCxXQUFZLFVBQVksVUFBWSxXQUNwQyxXQUFZLFdBQVksV0FBWSxZQUV4Q3pTLEVBQU1zQyxTQUFTbzZELEVBQVFuaEIsR0FDdkJuMUQsRUFBT0MsUUFBVXEyRSxFQUVqQkEsRUFBTzN1RSxVQUFZLElBQ25CMnVFLEVBQU9wekMsUUFBVSxJQUNqQm96QyxFQUFPbnpDLGFBQWUsSUFDdEJtekMsRUFBT2x6QyxVQUFZLEdBRW5Ca3pDLEVBQU9qMkUsVUFBVW1qQyxRQUFVLFNBQWdCLzlCLEdBRXpDLE1BQVksUUFBUkEsRUFDS21VLEVBQU00QyxRQUFRalosS0FBSzhvQixFQUFFam5CLE1BQU0sRUFBRyxHQUFJLE9BRWxDd1UsRUFBTStDLFFBQVFwWixLQUFLOG9CLEVBQUVqbkIsTUFBTSxFQUFHLEdBQUksUyw2QkN6QjdDLElBQUl3VSxFQUFRLEVBQVEsSUFFaEJ5N0MsRUFBUyxFQUFRLEtBRXJCLFNBQVNraEIsSUFDUCxLQUFNaHpFLGdCQUFnQmd6RSxHQUNwQixPQUFPLElBQUlBLEVBRWJsaEIsRUFBT2x3RCxLQUFLNUIsTUFDWkEsS0FBSzhvQixFQUFJLENBQ1AsV0FBWSxXQUNaLFdBQVksVUFDWixXQUFZLFVBQ1osVUFBWSxXQUNaLFdBQVksV0FDWixXQUFZLFdBQ1osV0FBWSxXQUNaLFdBQVksWUFFaEJ6UyxFQUFNc0MsU0FBU3E2RCxFQUFRbGhCLEdBQ3ZCcjFELEVBQU9DLFFBQVVzMkUsRUFFakJBLEVBQU81dUUsVUFBWSxLQUNuQjR1RSxFQUFPcnpDLFFBQVUsSUFDakJxekMsRUFBT3B6QyxhQUFlLElBQ3RCb3pDLEVBQU9uekMsVUFBWSxJQUVuQm16QyxFQUFPbDJFLFVBQVVtakMsUUFBVSxTQUFnQi85QixHQUN6QyxNQUFZLFFBQVJBLEVBQ0ttVSxFQUFNNEMsUUFBUWpaLEtBQUs4b0IsRUFBRWpuQixNQUFNLEVBQUcsSUFBSyxPQUVuQ3dVLEVBQU0rQyxRQUFRcFosS0FBSzhvQixFQUFFam5CLE1BQU0sRUFBRyxJQUFLLFMsNkJDL0I5QyxJQUFJd1UsRUFBUSxFQUFRLElBQ2hCb2hDLEVBQVMsRUFBUSxJQUVqQm4rQixFQUFTakQsRUFBTWlELE9BQ2ZDLEVBQVFsRCxFQUFNa0QsTUFDZEMsRUFBVW5ELEVBQU1tRCxRQUNoQkMsRUFBVXBELEVBQU1vRCxRQUNoQitsQixFQUFZaVksRUFBT2pZLFVBRXZCLFNBQVM5RyxJQUNQLEtBQU0xNEIsZ0JBQWdCMDRCLEdBQ3BCLE9BQU8sSUFBSUEsRUFFYjhHLEVBQVU1OUIsS0FBSzVCLE1BRWZBLEtBQUs4b0IsRUFBSSxDQUFFLFdBQVksV0FBWSxXQUFZLFVBQVksWUFDM0Q5b0IsS0FBS2taLE9BQVMsU0EwRGhCLFNBQVNzdEMsRUFBRXo0QyxFQUFHMkMsRUFBR0MsRUFBR3lHLEdBQ2xCLE9BQUlySixHQUFLLEdBQ0EyQyxFQUFJQyxFQUFJeUcsRUFDUnJKLEdBQUssR0FDSjJDLEVBQUlDLEdBQVFELEVBQUswRyxFQUNsQnJKLEdBQUssSUFDSjJDLEdBQU1DLEdBQU15RyxFQUNickosR0FBSyxHQUNKMkMsRUFBSTBHLEVBQU16RyxHQUFNeUcsRUFFakIxRyxHQUFLQyxHQUFNeUcsR0FHdEIsU0FBUzB1QyxFQUFFLzNDLEdBQ1QsT0FBSUEsR0FBSyxHQUNBLEVBQ0FBLEdBQUssR0FDTCxXQUNBQSxHQUFLLEdBQ0wsV0FDQUEsR0FBSyxHQUNMLFdBRUEsV0FHWCxTQUFTa2xFLEVBQUdsbEUsR0FDVixPQUFJQSxHQUFLLEdBQ0EsV0FDQUEsR0FBSyxHQUNMLFdBQ0FBLEdBQUssR0FDTCxXQUNBQSxHQUFLLEdBQ0wsV0FFQSxFQTVGWHNJLEVBQU1zQyxTQUFTK2YsRUFBVzhHLEdBQzFCOWlDLEVBQVFrN0MsVUFBWWxmLEVBRXBCQSxFQUFVdDBCLFVBQVksSUFDdEJzMEIsRUFBVWlILFFBQVUsSUFDcEJqSCxFQUFVa0gsYUFBZSxJQUN6QmxILEVBQVVtSCxVQUFZLEdBRXRCbkgsRUFBVTU3QixVQUFVcTBCLFFBQVUsU0FBZ0JsYixFQUFLNUosR0FXakQsSUFWQSxJQUFJdWUsRUFBSTVxQixLQUFLOG9CLEVBQUUsR0FDWCtCLEVBQUk3cUIsS0FBSzhvQixFQUFFLEdBQ1hwcEIsRUFBSU0sS0FBSzhvQixFQUFFLEdBQ1hnQyxFQUFJOXFCLEtBQUs4b0IsRUFBRSxHQUNYb3FELEVBQUlsekUsS0FBSzhvQixFQUFFLEdBQ1hxcUQsRUFBS3ZvRCxFQUNMd29ELEVBQUt2b0QsRUFDTCs3QixFQUFLbG5ELEVBQ0wyekUsRUFBS3ZvRCxFQUNMd29ELEVBQUtKLEVBQ0FubEUsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQUssQ0FDM0IsSUFBSTRvQixFQUFJcGQsRUFDTkQsRUFDRUcsRUFBUW1SLEVBQUc0N0IsRUFBRXo0QyxFQUFHOGMsRUFBR25yQixFQUFHb3JCLEdBQUk3VSxFQUFJRyxFQUFFckksR0FBSzFCLEdBQVF5NUMsRUFBRS8zQyxJQUMvQ3dZLEVBQUV4WSxJQUNKbWxFLEdBQ0Z0b0QsRUFBSXNvRCxFQUNKQSxFQUFJcG9ELEVBQ0pBLEVBQUl4UixFQUFPNVosRUFBRyxJQUNkQSxFQUFJbXJCLEVBQ0pBLEVBQUk4TCxFQUNKQSxFQUFJcGQsRUFDRkQsRUFDRUcsRUFBUTA1RCxFQUFJM3NCLEVBQUUsR0FBS3o0QyxFQUFHcWxFLEVBQUl4c0IsRUFBSXlzQixHQUFLcDlELEVBQUlzOUQsRUFBR3hsRSxHQUFLMUIsR0FBUTRtRSxFQUFHbGxFLElBQzFEeWxFLEVBQUd6bEUsSUFDTHVsRSxHQUNGSCxFQUFLRyxFQUNMQSxFQUFLRCxFQUNMQSxFQUFLLzVELEVBQU9zdEMsRUFBSSxJQUNoQkEsRUFBS3dzQixFQUNMQSxFQUFLejhDLEVBRVBBLEVBQUluZCxFQUFReFosS0FBSzhvQixFQUFFLEdBQUlwcEIsRUFBRzJ6RSxHQUMxQnJ6RSxLQUFLOG9CLEVBQUUsR0FBS3RQLEVBQVF4WixLQUFLOG9CLEVBQUUsR0FBSWdDLEVBQUd3b0QsR0FDbEN0ekUsS0FBSzhvQixFQUFFLEdBQUt0UCxFQUFReFosS0FBSzhvQixFQUFFLEdBQUlvcUQsRUFBR0MsR0FDbENuekUsS0FBSzhvQixFQUFFLEdBQUt0UCxFQUFReFosS0FBSzhvQixFQUFFLEdBQUk4QixFQUFHd29ELEdBQ2xDcHpFLEtBQUs4b0IsRUFBRSxHQUFLdFAsRUFBUXhaLEtBQUs4b0IsRUFBRSxHQUFJK0IsRUFBRys3QixHQUNsQzVtRCxLQUFLOG9CLEVBQUUsR0FBSzZOLEdBR2QrQixFQUFVNTdCLFVBQVVtakMsUUFBVSxTQUFnQi85QixHQUM1QyxNQUFZLFFBQVJBLEVBQ0ttVSxFQUFNNEMsUUFBUWpaLEtBQUs4b0IsRUFBRyxVQUV0QnpTLEVBQU0rQyxRQUFRcFosS0FBSzhvQixFQUFHLFdBMENqQyxJQUFJMVMsRUFBSSxDQUNOLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQ2xELEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQ25ELEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQ2xELEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQ25ELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLElBR2hEbTlELEVBQUssQ0FDUCxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUNsRCxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUNuRCxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUNsRCxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUNsRCxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxJQUdoRGh0RCxFQUFJLENBQ04sR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFDckQsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FDcEQsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFDckQsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDcEQsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FHbkRpdEQsRUFBSyxDQUNQ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RixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esa0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0Usa0VBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLHNFQUlOL3VCLElBQUssQ0FDSGlaLElBQUssRUFDTDhWLE9BQVEsQ0FDTixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0Usa0VBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG1FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxrRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGlFQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLGtFQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxtRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0Esb0VBRUYsQ0FDRSxtRUFDQSxvRUFFRixDQUNFLG1FQUNBLG9FQUVGLENBQ0UsbUVBQ0EsbUVBRUYsQ0FDRSxtRUFD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QUFHLEdBQzNELEVBQUksRUFBRyxHQUFJLEdBQUssRUFBSSxFQUFHLEdBQUssRUFBRyxHQUFLLEVBQUksRUFBRyxHQUFJLEdBQUssRUFBSSxFQUFJLEVBQzVELEVBQUksRUFBSSxFQUFJLEVBQUksRUFBRyxHQUFLLEVBQUcsR0FBSSxHQUFLLEVBQUksRUFBSSxFQUFHLEdBQUssRUFBRyxHQUFJLEtBQzNEd21GLEVBQU1waUYsRUFBVXBFLE9BQU8sQ0FDdkIsRUFBRyxHQUFLLEVBQUksRUFBSSxFQUFJLEVBQUcsR0FBSyxFQUFHLEdBQUssRUFBRyxHQUFLLEVBQUksRUFBRyxHQUFLLEVBQUcsR0FDM0QsRUFBRyxHQUFLLEVBQUksRUFBSSxFQUFHLEdBQUssRUFBRyxHQUFJLEdBQUksR0FBSyxFQUFHLEdBQUssRUFBSSxFQUFJLEVBQUksRUFDNUQsR0FBSyxFQUFJLEVBQUksRUFBSSxFQUFHLEdBQUssRUFBSSxFQUFHLEdBQUssRUFBRyxHQUFLLEVBQUcsR0FBSyxFQUFJLEVBQUcsR0FDNUQsRUFBSSxFQUFJLEVBQUksRUFBSSxFQUFHLEdBQUksR0FBSyxFQUFJLEVBQUcsR0FBSyxFQUFHLEdBQUssRUFBSSxFQUFHLEdBQUksR0FDM0QsR0FBSSxHQUFJLEdBQUssRUFBSSxFQUFJLEVBQUksRUFBSSxFQUFJLEVBQUksRUFBRyxHQUFJLEdBQUssRUFBSSxFQUFJLEVBQUcsS0FDNUR5bUYsRUFBTXJpRixFQUFVcEUsT0FBTyxDQUN0QixHQUFJLEdBQUksR0FBSSxHQUFLLEVBQUksRUFBSSxFQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSyxFQUFJLEVBQUksRUFBSSxFQUM5RCxFQUFHLEVBQUssRUFBRyxHQUFJLEdBQUssRUFBSSxFQUFHLEdBQUssRUFBRyxHQUFJLEdBQUssRUFBRyxHQUFLLEVBQUcsR0FBSSxHQUMzRCxHQUFJLEdBQUssRUFBSSxFQUFHLEdBQUssRUFBRyxHQUFJLEdBQUksR0FBSyxFQUFHLEdBQUssRUFBSSxFQUFHLEdBQUssRUFBSSxFQUMzRCxHQUFJLEdBQUksR0FBSSxHQUFJLEdB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QUFJLEdBQ3BCLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUNwQixHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFJcEJDLEVBQWEsQ0FBQyxFQUFJLEVBQUksRUFBSSxFQUFJLEVBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUcxRUMsRUFBUyxDQUNULENBQ0lyb0MsRUFBSyxRQUNMLFVBQVksTUFDWixVQUFZLFFBQ1osVUFBWSxFQUNaLFdBQVksSUFDWixXQUFZLFFBQ1osV0FBWSxRQUNaLFdBQVksUUFDWixXQUFZLElBQ1osV0FBWSxRQUNaLFdBQVksTUFDWixXQUFZLFFBQ1osV0FBWSxNQUNaLFdBQVksUUFDWixXQUFZLEVBQ1osV0FBWSxNQUNaLFVBQVcsRUFDWCxVQUFZLFFBQ1osVUFBWSxNQUNaLFVBQVksTUFDWixXQUFZLFFBQ1osV0FBWSxJQUNaLFdBQVksUUFDWixXQUFZLEVBQ1osV0FBWSxRQUNaLFdBQVksTUFDWixXQUFZLFFBQ1osV0FBWSxRQUNaLFdBQVksUUFDWixXQUFZLE1BQ1osV0FBWSxJQUNaLFdBQVksUUFDWixFQUFLLE1BQ0wsVUFBWSxFQUNaLFVBQVksUUFDWixVQUFZLFFBQ1osV0FBWSxRQUNaLFdBQVksTUFDWixXQUFZLElBQ1osV0FBWSxRQUNaLFdBQVksUUFDWixXQUFZLFFBQ1osV0FBWSxRQUNaLFdBQVksTUFDWixXQUFZLElBQ1osV0FBWSxRQUNaLFdBQVksTUFDWixXQUFZLEVBQ1osVUFBVyxRQUNYLFVBQVksUUFDWixVQUFZLFFBQ1osVUFBWSxJQUNaLFdBQVksTUFDWixXQUFZLFFBQ1osV0FBWSxFQUNaLFdBQVksTUFDWixXQUFZLE1BQ1osV0FBWSxRQUNaLFdBQVksSUFDWixXQUFZLFFBQ1osV0FBWSxRQUNaLFdBQVksRUFDWixXQUFZLE1BQ1osV0FBWSxTQUVoQixDQUNJQSxFQUFLLFdBQ0wsU0FBVyxNQUNYLFNBQVcsT0FDWCxTQUFXLFdBQ1gsU0FBVyxXQUNYLFNBQVcsV0FDWCxVQUFXLFdBQ1gsVUFBVyxHQUNYLFVBQVcsT0FDWCxVQUFXLFdBQ1gsVUFBVyxXQUNYLFVBQVcsT0FDWCxVQUFXLE9BQ1gsVUFBVyxFQUNYLFVBQVcsTUFDWCxVQUFXLFdBQ1gsUUFBVSxXQUNWLFNBQVcsT0FDWCxTQUFXLEdBQ1gsU0FBVyxXQUNYLFNBQVcsV0FDWCxTQUFXLFdBQ1gsVUFBVyxPQUNYLFVBQVcsV0FDWCxVQUFXLE9BQ1gsVUFBVyxFQUNYLFVBQVcsTUFDWCxVQUFXLFdBQ1gsVUFBVyxXQUNYLFVBQVcsT0FDWCxVQUFXLFdBQ1gsVUFBVyxNQUNYLFVBQVksRUFDWixVQUFZLFdBQ1osVUFBWSxXQUNaLFVBQVksV0FDWixVQUFZLFdBQ1osVUFBWSxHQUNaLFVBQVksT0FDWixVQUFZLE1BQ1osVUFBWSxNQUNaLFVBQVksT0FDWixVQUFZLE9BQ1osVUFBWSxXQUNaLFVBQVksT0FDWixVQUFZLFdBQ1osVUFBWSxXQUNaLFVBQVksV0FDWixVQUFZLE9BQ1osVUFBWSxPQUNaLFVBQVksV0FDWixVQUFZLE1BQ1osVUFBWSxXQUNaLFVBQVksV0FDWixVQUFZLEdBQ1osVUFBWSxXQUNaLFVBQVksV0FDWixVQUFZLFdBQ1osVUFBWSxXQUNaLFVBQVksT0FDWixVQUFZLEVBQ1osVUFBWSxNQUNaLFVBQVksV0FDWixVQUFZLFFBRWhCLENBQ0lBLEVBQUssSUFDTCxRQUFVLEVBQ1YsUUFBVSxTQUNWLFFBQVUsTUFDVixRQUFVLE1BQ1YsUUFBVSxTQUNWLFFBQVUsU0FDVixRQUFVLFNBQ1YsUUFBVSxTQUNWLFFBQVUsU0FDVixTQUFVLE1BQ1YsU0FBVSxTQUNWLFNBQVUsU0FDVixTQUFVLE1BQ1YsU0FBVSxFQUNWLFNBQVUsSUFDVixPQUFTLFNBQ1QsUUFBVSxTQUNWLFFBQVUsRUFDVixRQUFVLFNBQ1YsUUFBVSxTQUNWLFFBQVUsTUFDVixRQUFVLE1BQ1YsUUFBVSxJQUNWLFFBQVUsRUFDVixRQUFVLElBQ1YsU0FBVSxTQUNWLFNBQVUsTUFDVixTQUFVLE1BQ1YsU0FBVSxTQUNWLFNBQVUsU0FDVixTQUFVLFNBQ1YsU0FBVyxTQUNYLFNBQVcsTUFDWCxTQUFXLE1BQ1gsU0FBVyxTQUNYLFNBQVcsSUFDWCxTQUFXLFNBQ1gsU0FBVyxTQUNYLFNBQVcsRUFDWCxTQUFXLFNBQ1gsU0FBVyxTQUNYLFNBQVcsRUFDWCxTQUFXLE1BQ1gsU0FBVyxTQUNYLFNBQVcsSUFDWCxTQUFXLE1BQ1gsU0FBVyxTQUNYLFNBQVcsU0FDWCxTQUFXLElBQ1gsU0FBVyxTQUNYLFNBQVcsRUFDWCxTQUFXLE1BQ1gsU0FBVyxTQUNYLFNBQVcsSUFDWCxTQUFXLFNBQ1gsU0FBVyxNQUNYLFNBQVcsU0FDWCxTQUFXLE1BQ1gsU0FBVyxTQUNYLFNBQVcsU0FDWCxTQUFXLFNBQ1gsU0FBVyxFQUNYLFNBQVcsT0FFZixDQUNJQSxFQUFLLFdBQ0wsTUFBUyxXQUNULE9BQVMsUUFDVCxPQUFTLFdBQ1QsT0FBUyxFQUNULE9BQVMsUUFDVCxPQUFTLFdBQ1QsT0FBUyxRQUNULE9BQVMsV0FDVCxPQUFTLFFBQ1QsT0FBUyxHQUNULE9BQVMsV0FDVCxPQUFTLFdBQ1QsT0FBUyxLQUNULE9BQVMsS0FDVCxPQUFTLFdBQ1QsTUFBUSxXQUNSLE1BQVMsR0FDVCxPQUFTLFdBQ1QsT0FBUyxXQUNULE9BQVMsUUFDVCxPQUFTLFdBQ1QsT0FBUyxFQUNULE9BQVMsV0FDVCxPQUFTLEtBQ1QsT0FBUyxXQUNULE9BQVMsUUFDVCxPQUFTLEtBQ1QsT0FBUyxXQUNULE9BQVMsUUFDVCxPQUFTLFFBQ1QsUUFBUyxXQUNULFFBQVUsUUFDVixRQUFVLFFBQ1YsUUFBVSxXQUNWLFFBQVUsRUFDVixRQUFVLEtBQ1YsUUFBVSxXQUNWLFFBQVUsV0FDVixRQUFVLFdBQ1YsUUFBVSxXQUNWLFFBQVUsV0FDVixRQUFVLFdBQ1YsUUFBVSxRQUNWLFFBQVUsV0FDVixRQUFVLFFBQ1YsUUFBVSxHQUNWLFFBQVUsS0FDVixRQUFVLFdBQ1YsUUFBVSxXQUNWLFFBQVUsRUFDVixRQUFVLFFBQ1YsUUFBVSxRQUNWLFFBQVUsV0FDVixRQUFVLFdBQ1YsUUFBVSxHQUNWLFFBQVUsV0FDVixRQUFVLEtBQ1YsUUFBVSxXQUNWLFFBQVUsV0FDVixRQUFVLEtBQ1YsUUFBVSxXQUNWLFFBQVUsUUFDVixRQUFVLFNBRWQsQ0FDSUEsRUFBSyxJQUNMLEtBQVEsU0FDUixLQUFRLE9BQ1IsTUFBUSxVQUNSLE1BQVEsVUFDUixNQUFRLFNBQ1IsTUFBUSxVQUNSLE1BQVEsT0FDUixNQUFRLFNBQ1IsTUFBUSxVQUNSLE1BQVEsVUFDUixNQUFRLFVBQ1IsTUFBUSxVQUNSLE1BQVEsRUFDUixNQUFRLFNBQ1IsTUFBUSxVQUNSLEtBQU8sU0FDUCxLQUFRLFVBQ1IsTUFBUSxJQUNSLE1BQVEsU0FDUixNQUFRLE9BQ1IsTUFBUSxVQUNSLE1BQVEsVUFDUixNQUFRLFVBQ1IsTUFBUSxVQUNSLE1BQVEsRUFDUixNQUFRLFVBQ1IsTUFBUSxTQUNSLE1BQVEsVUFDUixNQUFRLFVBQ1IsTUFBUSxTQUNSLE1BQVEsT0FDUixNQUFTLE9BQ1QsTUFBUyxJQUNULE1BQVMsVUFDVCxNQUFTLFVBQ1QsTUFBUyxTQUNULE1BQVMsVUFDVCxNQUFTLFVBQ1QsTUFBUyxTQUNULE1BQVMsVUFDVCxPQUFTLFVBQ1QsT0FBUyxTQUNULE9BQVMsVUFDVCxPQUFTLE9BQ1QsT0FBUyxVQUNULE9BQVMsRUFDVCxPQUFTLFNBQ1QsTUFBUyxVQUNULE1BQVMsU0FDVCxNQUFTLFNBQ1QsTUFBUyxVQUNULE1BQVMsVUFDVCxNQUFTLFNBQ1QsTUFBUyxJQUNULE1BQVMsVUFDVCxPQUFTLE9BQ1QsT0FBUyxVQUNULE9BQVMsRUFDVCxPQUFTLFVBQ1QsT0FBUyxTQUNULE9BQVMsT0FDVCxPQUFTLFVBQ1QsT0FBUyxXQUViLENBQ0lBLEVBQUssVUFDTCxJQUFPLEtBQ1AsSUFBTyxVQUNQLElBQU8sVUFDUCxLQUFPLFVBQ1AsS0FBTyxRQUNQLEtBQU8sUUFDUCxLQUFPLFVBQ1AsS0FBTyxFQUNQLEtBQU8sVUFDUCxLQUFPLFFBQ1AsS0FBTyxFQUNQLEtBQU8sVUFDUCxLQUFPLFFBQ1AsS0FBTyxLQUNQLEtBQU8sVUFDUCxJQUFNLFVBQ04sSUFBTyxVQUNQLElBQU8sRUFDUCxJQUFPLFFBQ1AsS0FBTyxRQUNQLEtBQU8sVUFDUCxLQUFPLFVBQ1AsS0FBTyxLQUNQLEtBQU8sUUFDUCxLQUFPLEtBQ1AsS0FBTyxVQUNQLEtBQU8sVUFDUCxLQUFPLEVBQ1AsS0FBTyxVQUNQLEtBQU8sUUFDUCxLQUFPLFVBQ1AsS0FBUSxVQUNSLEtBQVEsVUFDUixLQUFRLFVBQ1IsS0FBUSxLQUNSLEtBQVEsUUFDUixLQUFRLFVBQ1IsS0FBUSxVQUNSLEtBQVEsUUFDUixLQUFRLFFBQ1IsS0FBUSxFQUNSLEtBQVEsRUFDUixLQUFRLFVBQ1IsS0FBUSxLQUNSLEtBQVEsVUFDUixLQUFRLFVBQ1IsS0FBUSxRQUNSLEtBQVEsRUFDUixLQUFRLFFBQ1IsS0FBUSxRQUNSLEtBQVEsVUFDUixLQUFRLFVBQ1IsS0FBUSxLQUNSLEtBQVEsVUFDUixLQUFRLFVBQ1IsS0FBUSxVQUNSLEtBQVEsVUFDUixLQUFRLEtBQ1IsS0FBUSxRQUNSLEtBQVEsUUFDUixLQUFRLEVBQ1IsS0FBUSxVQUNSLEtBQVEsV0FFWixDQUNJQSxFQUFLLFFBQ0wsR0FBTSxTQUNOLEdBQU0sS0FDTixHQUFNLFFBQ04sR0FBTSxTQUNOLEdBQU0sRUFDTixHQUFNLEVBQ04sSUFBTSxTQUNOLElBQU0sU0FDTixJQUFNLFFBQ04sSUFBTSxTQUNOLElBQU0sU0FDTixJQUFNLFNBQ04sSUFBTSxLQUNOLElBQU0sUUFDTixJQUFNLFNBQ04sRUFBSyxTQUNMLEdBQU0sRUFDTixHQUFNLFNBQ04sR0FBTSxTQUNOLEdBQU0sUUFDTixHQUFNLFNBQ04sSUFBTSxTQUNOLElBQU0sS0FDTixJQUFNLFFBQ04sSUFBTSxTQUNOLElBQU0sU0FDTixJQUFNLFFBQ04sSUFBTSxLQUNOLElBQU0sU0FDTixJQUFNLEVBQ04sSUFBTSxRQUNOLElBQU8sU0FDUCxJQUFPLFFBQ1AsSUFBTyxTQUNQLElBQU8sU0FDUCxJQUFPLFFBQ1AsSUFBTyxTQUNQLElBQU8sU0FDUCxJQUFPLFFBQ1AsSUFBTyxLQUNQLElBQU8sU0FDUCxJQUFPLFFBQ1AsSUFBTyxFQUNQ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Q3BEdmdDLElBQWEsV0FBTHFnQyxHQUFtQkEsRUFBTSxLQUFhLE1BQUxBLEdBQW1CQSxFQUFNLEdBR3RFcG1ELEVBQUUvZ0MsR0FBSzJtRCxFQUFLRyxFQUloQjAvQixFQUFFLEdBQU16bEQsRUFBRSxJQUFPQSxFQUFFLElBQU0sR0FBT0EsRUFBRSxLQUFPLEtBQVNBLEVBQUUsSUFBTSxHQUFPQSxFQUFFLEtBQU8sSUFBUSxFQUNsRnlsRCxFQUFFLEdBQU16bEQsRUFBRSxJQUFPQSxFQUFFLElBQU0sRUFBT0EsRUFBRSxLQUFPLElBQU9BLEVBQUUsR0FBTSxFQUN4RHlsRCxFQUFFLEdBQU16bEQsRUFBRSxJQUFPQSxFQUFFLElBQU0sR0FBT0EsRUFBRSxLQUFPLEtBQVNBLEVBQUUsSUFBTSxHQUFPQSxFQUFFLEtBQU8sSUFBUSxFQUNsRnlsRCxFQUFFLEdBQU16bEQsRUFBRSxJQUFPQSxFQUFFLElBQU0sRUFBT0EsRUFBRSxLQUFPLElBQU9BLEVBQUUsR0FBTSxFQUN4RHlsRCxFQUFFLEdBQU16bEQsRUFBRSxJQUFPQSxFQUFFLElBQU0sR0FBT0EsRUFBRSxLQUFPLEtBQVNBLEVBQUUsSUFBTSxHQUFPQSxFQUFFLEtBQU8sSUFBUSxFQUNsRnlsRCxFQUFFLEdBQU16bEQsRUFBRSxJQUFPQSxFQUFFLElBQU0sRUFBT0EsRUFBRSxLQUFPLElBQU9BLEVBQUUsR0FBTSxFQUN4RHlsRCxFQUFFLEdBQU16bEQsRUFBRSxJQUFPQSxFQUFFLElBQU0sR0FBT0EsRUFBRSxLQUFPLEtBQVNBLEVBQUUsSUFBTSxHQUFPQSxFQUFFLEtBQU8sSUFBUSxFQUNsRnlsRCxFQUFFLEdBQU16bEQsRUFBRSxJQUFPQSxFQUFFLElBQU0sRUFBT0EsRUFBRSxLQUFPLElBQU9BLEVBQUUsR0FBTSxFQVc1RDlpQyxFQUFFcXBGLGFBQWV2aEYsRUFBYWxDLGNBQWN5akYsR0F4S2hELEdBNEtPcnFGLEVBQVNxcUYiLCJmaWxlIjoidmVuZG9yc35CeVVzZXJ+VXNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsIi8qISBzYWZlLWJ1ZmZlci4gTUlUIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyLnByb3RvdHlwZSlcblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0cm9vdC5DcnlwdG9KUyA9IGZhY3RvcnkoKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG5cblx0LypnbG9iYWxzIHdpbmRvdywgZ2xvYmFsLCByZXF1aXJlKi9cblxuXHQvKipcblx0ICogQ3J5cHRvSlMgY29yZSBjb21wb25lbnRzLlxuXHQgKi9cblx0dmFyIENyeXB0b0pTID0gQ3J5cHRvSlMgfHwgKGZ1bmN0aW9uIChNYXRoLCB1bmRlZmluZWQpIHtcblxuXHQgICAgdmFyIGNyeXB0bztcblxuXHQgICAgLy8gTmF0aXZlIGNyeXB0byBmcm9tIHdpbmRvdyAoQnJvd3Nlcilcblx0ICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY3J5cHRvKSB7XG5cdCAgICAgICAgY3J5cHRvID0gd2luZG93LmNyeXB0bztcblx0ICAgIH1cblxuXHQgICAgLy8gTmF0aXZlIChleHBlcmltZW50YWwgSUUgMTEpIGNyeXB0byBmcm9tIHdpbmRvdyAoQnJvd3Nlcilcblx0ICAgIGlmICghY3J5cHRvICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5tc0NyeXB0bykge1xuXHQgICAgICAgIGNyeXB0byA9IHdpbmRvdy5tc0NyeXB0bztcblx0ICAgIH1cblxuXHQgICAgLy8gTmF0aXZlIGNyeXB0byBmcm9tIGdsb2JhbCAoTm9kZUpTKVxuXHQgICAgaWYgKCFjcnlwdG8gJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsLmNyeXB0bykge1xuXHQgICAgICAgIGNyeXB0byA9IGdsb2JhbC5jcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gaW1wb3J0IHZpYSByZXF1aXJlIChOb2RlSlMpXG5cdCAgICBpZiAoIWNyeXB0byAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGVycikge31cblx0ICAgIH1cblxuXHQgICAgLypcblx0ICAgICAqIENyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZSBwc2V1ZG9yYW5kb20gbnVtYmVyIGdlbmVyYXRvclxuXHQgICAgICpcblx0ICAgICAqIEFzIE1hdGgucmFuZG9tKCkgaXMgY3J5cHRvZ3JhcGhpY2FsbHkgbm90IHNhZmUgdG8gdXNlXG5cdCAgICAgKi9cblx0ICAgIHZhciBjcnlwdG9TZWN1cmVSYW5kb21JbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKGNyeXB0bykge1xuXHQgICAgICAgICAgICAvLyBVc2UgZ2V0UmFuZG9tVmFsdWVzIG1ldGhvZCAoQnJvd3Nlcilcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF07XG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBVc2UgcmFuZG9tQnl0ZXMgbWV0aG9kIChOb2RlSlMpXG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY3J5cHRvLnJhbmRvbUJ5dGVzID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoNCkucmVhZEludDMyTEUoKTtcblx0ICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignTmF0aXZlIGNyeXB0byBtb2R1bGUgY291bGQgbm90IGJlIHVzZWQgdG8gZ2V0IHNlY3VyZSByYW5kb20gbnVtYmVyLicpO1xuXHQgICAgfTtcblxuXHQgICAgLypcblx0ICAgICAqIExvY2FsIHBvbHlmaWxsIG9mIE9iamVjdC5jcmVhdGVcblxuXHQgICAgICovXG5cdCAgICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZ1bmN0aW9uIEYoKSB7fVxuXG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcblx0ICAgICAgICAgICAgdmFyIHN1YnR5cGU7XG5cblx0ICAgICAgICAgICAgRi5wcm90b3R5cGUgPSBvYmo7XG5cblx0ICAgICAgICAgICAgc3VidHlwZSA9IG5ldyBGKCk7XG5cblx0ICAgICAgICAgICAgRi5wcm90b3R5cGUgPSBudWxsO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBzdWJ0eXBlO1xuXHQgICAgICAgIH07XG5cdCAgICB9KCkpXG5cblx0ICAgIC8qKlxuXHQgICAgICogQ3J5cHRvSlMgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQyA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIExpYnJhcnkgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYiA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEJhc2Ugb2JqZWN0IGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2UgPSAoZnVuY3Rpb24gKCkge1xuXG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3ZlcnJpZGVzIFByb3BlcnRpZXMgdG8gY29weSBpbnRvIHRoZSBuZXcgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgTXlUeXBlID0gQ3J5cHRvSlMubGliLkJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJyxcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgICAgICBtZXRob2Q6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICogICAgICAgICB9XG5cdCAgICAgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGV4dGVuZDogZnVuY3Rpb24gKG92ZXJyaWRlcykge1xuXHQgICAgICAgICAgICAgICAgLy8gU3Bhd25cblx0ICAgICAgICAgICAgICAgIHZhciBzdWJ0eXBlID0gY3JlYXRlKHRoaXMpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBBdWdtZW50XG5cdCAgICAgICAgICAgICAgICBpZiAob3ZlcnJpZGVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3VidHlwZS5taXhJbihvdmVycmlkZXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBDcmVhdGUgZGVmYXVsdCBpbml0aWFsaXplclxuXHQgICAgICAgICAgICAgICAgaWYgKCFzdWJ0eXBlLmhhc093blByb3BlcnR5KCdpbml0JykgfHwgdGhpcy5pbml0ID09PSBzdWJ0eXBlLmluaXQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUuJHN1cGVyLmluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBJbml0aWFsaXplcidzIHByb3RvdHlwZSBpcyB0aGUgc3VidHlwZSBvYmplY3Rcblx0ICAgICAgICAgICAgICAgIHN1YnR5cGUuaW5pdC5wcm90b3R5cGUgPSBzdWJ0eXBlO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZWZlcmVuY2Ugc3VwZXJ0eXBlXG5cdCAgICAgICAgICAgICAgICBzdWJ0eXBlLiRzdXBlciA9IHRoaXM7XG5cblx0ICAgICAgICAgICAgICAgIHJldHVybiBzdWJ0eXBlO1xuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBFeHRlbmRzIHRoaXMgb2JqZWN0IGFuZCBydW5zIHRoZSBpbml0IG1ldGhvZC5cblx0ICAgICAgICAgICAgICogQXJndW1lbnRzIHRvIGNyZWF0ZSgpIHdpbGwgYmUgcGFzc2VkIHRvIGluaXQoKS5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgbmV3IG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIGluc3RhbmNlID0gTXlUeXBlLmNyZWF0ZSgpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmV4dGVuZCgpO1xuXHQgICAgICAgICAgICAgICAgaW5zdGFuY2UuaW5pdC5hcHBseShpbnN0YW5jZSwgYXJndW1lbnRzKTtcblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBhZGQgc29tZSBsb2dpYyB3aGVuIHlvdXIgb2JqZWN0cyBhcmUgY3JlYXRlZC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICogICAgICAgICAgICAgLy8gLi4uXG5cdCAgICAgICAgICAgICAqICAgICAgICAgfVxuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIGludG8gdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIFRoZSBwcm9wZXJ0aWVzIHRvIG1peCBpbi5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIE15VHlwZS5taXhJbih7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgZmllbGQ6ICd2YWx1ZSdcblx0ICAgICAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgbWl4SW46IGZ1bmN0aW9uIChwcm9wZXJ0aWVzKSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eU5hbWUgaW4gcHJvcGVydGllcykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1twcm9wZXJ0eU5hbWVdID0gcHJvcGVydGllc1twcm9wZXJ0eU5hbWVdO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gSUUgd29uJ3QgY29weSB0b1N0cmluZyB1c2luZyB0aGUgbG9vcCBhYm92ZVxuXHQgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoJ3RvU3RyaW5nJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRvU3RyaW5nID0gcHJvcGVydGllcy50b1N0cmluZztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGNsb25lLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gaW5zdGFuY2UuY2xvbmUoKTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9O1xuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBbiBhcnJheSBvZiAzMi1iaXQgd29yZHMuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtBcnJheX0gd29yZHMgVGhlIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaWdCeXRlcyBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheSA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIChPcHRpb25hbCkgQW4gYXJyYXkgb2YgMzItYml0IHdvcmRzLlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaWdCeXRlcyAoT3B0aW9uYWwpIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhlIHdvcmRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDAwMDEwMjAzLCAweDA0MDUwNjA3XSk7XG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHgwMDAxMDIwMywgMHgwNDA1MDYwN10sIDYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uICh3b3Jkcywgc2lnQnl0ZXMpIHtcblx0ICAgICAgICAgICAgd29yZHMgPSB0aGlzLndvcmRzID0gd29yZHMgfHwgW107XG5cblx0ICAgICAgICAgICAgaWYgKHNpZ0J5dGVzICE9IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHdvcmRzLmxlbmd0aCAqIDQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgdGhpcyB3b3JkIGFycmF5IHRvIGEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyIChPcHRpb25hbCkgVGhlIGVuY29kaW5nIHN0cmF0ZWd5IHRvIHVzZS4gRGVmYXVsdDogQ3J5cHRvSlMuZW5jLkhleFxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3RyaW5naWZpZWQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheSArICcnO1xuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5LnRvU3RyaW5nKCk7XG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoZW5jb2Rlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gKGVuY29kZXIgfHwgSGV4KS5zdHJpbmdpZnkodGhpcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmNhdGVuYXRlcyBhIHdvcmQgYXJyYXkgdG8gdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheSB0byBhcHBlbmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoaXMgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgd29yZEFycmF5MS5jb25jYXQod29yZEFycmF5Mik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY29uY2F0OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgdGhpc1dvcmRzID0gdGhpcy53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHRoYXRXb3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHRoaXNTaWdCeXRlcyA9IHRoaXMuc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIHZhciB0aGF0U2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHNcblx0ICAgICAgICAgICAgdGhpcy5jbGFtcCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbmNhdFxuXHQgICAgICAgICAgICBpZiAodGhpc1NpZ0J5dGVzICUgNCkge1xuXHQgICAgICAgICAgICAgICAgLy8gQ29weSBvbmUgYnl0ZSBhdCBhIHRpbWVcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhhdFNpZ0J5dGVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdGhhdEJ5dGUgPSAodGhhdFdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzV29yZHNbKHRoaXNTaWdCeXRlcyArIGkpID4+PiAyXSB8PSB0aGF0Qnl0ZSA8PCAoMjQgLSAoKHRoaXNTaWdCeXRlcyArIGkpICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIENvcHkgb25lIHdvcmQgYXQgYSB0aW1lXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoYXRTaWdCeXRlczsgaSArPSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpc1dvcmRzWyh0aGlzU2lnQnl0ZXMgKyBpKSA+Pj4gMl0gPSB0aGF0V29yZHNbaSA+Pj4gMl07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyArPSB0aGF0U2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ2hhaW5hYmxlXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZW1vdmVzIGluc2lnbmlmaWNhbnQgYml0cy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgd29yZEFycmF5LmNsYW1wKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2xhbXA6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHRoaXMud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHRoaXMuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ2xhbXBcblx0ICAgICAgICAgICAgd29yZHNbc2lnQnl0ZXMgPj4+IDJdICY9IDB4ZmZmZmZmZmYgPDwgKDMyIC0gKHNpZ0J5dGVzICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgd29yZHMubGVuZ3RoID0gTWF0aC5jZWlsKHNpZ0J5dGVzIC8gNCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGNsb25lLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSB3b3JkQXJyYXkuY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLndvcmRzID0gdGhpcy53b3Jkcy5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSB3b3JkIGFycmF5IGZpbGxlZCB3aXRoIHJhbmRvbSBieXRlcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuQnl0ZXMgVGhlIG51bWJlciBvZiByYW5kb20gYnl0ZXMgdG8gZ2VuZXJhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSByYW5kb20gd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKDE2KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByYW5kb206IGZ1bmN0aW9uIChuQnl0ZXMpIHtcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuQnl0ZXM7IGkgKz0gNCkge1xuXHQgICAgICAgICAgICAgICAgd29yZHMucHVzaChjcnlwdG9TZWN1cmVSYW5kb21JbnQoKSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBuQnl0ZXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEVuY29kZXIgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYyA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEhleCBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEhleCA9IENfZW5jLkhleCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBoZXggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBoZXhTdHJpbmcgPSBDcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgaGV4Q2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICBoZXhDaGFycy5wdXNoKChiaXRlID4+PiA0KS50b1N0cmluZygxNikpO1xuXHQgICAgICAgICAgICAgICAgaGV4Q2hhcnMucHVzaCgoYml0ZSAmIDB4MGYpLnRvU3RyaW5nKDE2KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gaGV4Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgaGV4IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaGV4U3RyIFRoZSBoZXggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5IZXgucGFyc2UoaGV4U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGhleFN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgaGV4U3RyTGVuZ3RoID0gaGV4U3RyLmxlbmd0aDtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhleFN0ckxlbmd0aDsgaSArPSAyKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAzXSB8PSBwYXJzZUludChoZXhTdHIuc3Vic3RyKGksIDIpLCAxNikgPDwgKDI0IC0gKGkgJSA4KSAqIDQpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgaGV4U3RyTGVuZ3RoIC8gMik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBMYXRpbjEgZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBMYXRpbjEgPSBDX2VuYy5MYXRpbjEgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgTGF0aW4xIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBMYXRpbjEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbGF0aW4xU3RyaW5nID0gQ3J5cHRvSlMuZW5jLkxhdGluMS5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIGxhdGluMUNoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJpdGUgPSAod29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgbGF0aW4xQ2hhcnMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJpdGUpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBsYXRpbjFDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBMYXRpbjEgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXRpbjFTdHIgVGhlIExhdGluMSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkxhdGluMS5wYXJzZShsYXRpbjFTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAobGF0aW4xU3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBsYXRpbjFTdHJMZW5ndGggPSBsYXRpbjFTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGF0aW4xU3RyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDJdIHw9IChsYXRpbjFTdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYpIDw8ICgyNCAtIChpICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIGxhdGluMVN0ckxlbmd0aCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBVVEYtOCBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFV0ZjggPSBDX2VuYy5VdGY4ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtOCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB1dGY4U3RyaW5nID0gQ3J5cHRvSlMuZW5jLlV0Zjguc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShMYXRpbjEuc3RyaW5naWZ5KHdvcmRBcnJheSkpKTtcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYWxmb3JtZWQgVVRGLTggZGF0YScpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgVVRGLTggc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGY4U3RyIFRoZSBVVEYtOCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UodXRmOFN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICh1dGY4U3RyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBMYXRpbjEucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHV0ZjhTdHIpKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBidWZmZXJlZCBibG9jayBhbGdvcml0aG0gdGVtcGxhdGUuXG5cdCAgICAgKlxuXHQgICAgICogVGhlIHByb3BlcnR5IGJsb2NrU2l6ZSBtdXN0IGJlIGltcGxlbWVudGVkIGluIGEgY29uY3JldGUgc3VidHlwZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gX21pbkJ1ZmZlclNpemUgVGhlIG51bWJlciBvZiBibG9ja3MgdGhhdCBzaG91bGQgYmUga2VwdCB1bnByb2Nlc3NlZCBpbiB0aGUgYnVmZmVyLiBEZWZhdWx0OiAwXG5cdCAgICAgKi9cblx0ICAgIHZhciBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQ19saWIuQnVmZmVyZWRCbG9ja0FsZ29yaXRobSA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZXNldHMgdGhpcyBibG9jayBhbGdvcml0aG0ncyBkYXRhIGJ1ZmZlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIEluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgV29yZEFycmF5LmluaXQoKTtcblx0ICAgICAgICAgICAgdGhpcy5fbkRhdGFCeXRlcyA9IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEFkZHMgbmV3IGRhdGEgdG8gdGhpcyBibG9jayBhbGdvcml0aG0ncyBidWZmZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYXBwZW5kLiBTdHJpbmdzIGFyZSBjb252ZXJ0ZWQgdG8gYSBXb3JkQXJyYXkgdXNpbmcgVVRGLTguXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCgnZGF0YScpO1xuXHQgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9hcHBlbmQod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfYXBwZW5kOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBXb3JkQXJyYXksIGVsc2UgYXNzdW1lIFdvcmRBcnJheSBhbHJlYWR5XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICAgICAgZGF0YSA9IFV0ZjgucGFyc2UoZGF0YSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBBcHBlbmRcblx0ICAgICAgICAgICAgdGhpcy5fZGF0YS5jb25jYXQoZGF0YSk7XG5cdCAgICAgICAgICAgIHRoaXMuX25EYXRhQnl0ZXMgKz0gZGF0YS5zaWdCeXRlcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUHJvY2Vzc2VzIGF2YWlsYWJsZSBkYXRhIGJsb2Nrcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgX2RvUHJvY2Vzc0Jsb2NrKG9mZnNldCksIHdoaWNoIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgYSBjb25jcmV0ZSBzdWJ0eXBlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBkb0ZsdXNoIFdoZXRoZXIgYWxsIGJsb2NrcyBhbmQgcGFydGlhbCBibG9ja3Mgc2hvdWxkIGJlIHByb2Nlc3NlZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHByb2Nlc3NlZCBkYXRhLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgcHJvY2Vzc2VkRGF0YSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX3Byb2Nlc3MoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHByb2Nlc3NlZERhdGEgPSBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX3Byb2Nlc3M6IGZ1bmN0aW9uIChkb0ZsdXNoKSB7XG5cdCAgICAgICAgICAgIHZhciBwcm9jZXNzZWRXb3JkcztcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGRhdGFTaWdCeXRlcyA9IGRhdGEuc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSB0aGlzLmJsb2NrU2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgICAgICAvLyBDb3VudCBibG9ja3MgcmVhZHlcblx0ICAgICAgICAgICAgdmFyIG5CbG9ja3NSZWFkeSA9IGRhdGFTaWdCeXRlcyAvIGJsb2NrU2l6ZUJ5dGVzO1xuXHQgICAgICAgICAgICBpZiAoZG9GbHVzaCkge1xuXHQgICAgICAgICAgICAgICAgLy8gUm91bmQgdXAgdG8gaW5jbHVkZSBwYXJ0aWFsIGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgbkJsb2Nrc1JlYWR5ID0gTWF0aC5jZWlsKG5CbG9ja3NSZWFkeSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyBSb3VuZCBkb3duIHRvIGluY2x1ZGUgb25seSBmdWxsIGJsb2Nrcyxcblx0ICAgICAgICAgICAgICAgIC8vIGxlc3MgdGhlIG51bWJlciBvZiBibG9ja3MgdGhhdCBtdXN0IHJlbWFpbiBpbiB0aGUgYnVmZmVyXG5cdCAgICAgICAgICAgICAgICBuQmxvY2tzUmVhZHkgPSBNYXRoLm1heCgobkJsb2Nrc1JlYWR5IHwgMCkgLSB0aGlzLl9taW5CdWZmZXJTaXplLCAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvdW50IHdvcmRzIHJlYWR5XG5cdCAgICAgICAgICAgIHZhciBuV29yZHNSZWFkeSA9IG5CbG9ja3NSZWFkeSAqIGJsb2NrU2l6ZTtcblxuXHQgICAgICAgICAgICAvLyBDb3VudCBieXRlcyByZWFkeVxuXHQgICAgICAgICAgICB2YXIgbkJ5dGVzUmVhZHkgPSBNYXRoLm1pbihuV29yZHNSZWFkeSAqIDQsIGRhdGFTaWdCeXRlcyk7XG5cblx0ICAgICAgICAgICAgLy8gUHJvY2VzcyBibG9ja3Ncblx0ICAgICAgICAgICAgaWYgKG5Xb3Jkc1JlYWR5KSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBuV29yZHNSZWFkeTsgb2Zmc2V0ICs9IGJsb2NrU2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtYWxnb3JpdGhtIGxvZ2ljXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9Qcm9jZXNzQmxvY2soZGF0YVdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1vdmUgcHJvY2Vzc2VkIHdvcmRzXG5cdCAgICAgICAgICAgICAgICBwcm9jZXNzZWRXb3JkcyA9IGRhdGFXb3Jkcy5zcGxpY2UoMCwgbldvcmRzUmVhZHkpO1xuXHQgICAgICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyAtPSBuQnl0ZXNSZWFkeTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBwcm9jZXNzZWQgd29yZHNcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdChwcm9jZXNzZWRXb3JkcywgbkJ5dGVzUmVhZHkpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGNsb25lLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLmNsb25lKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5fZGF0YSA9IHRoaXMuX2RhdGEuY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9taW5CdWZmZXJTaXplOiAwXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBoYXNoZXIgdGVtcGxhdGUuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbnVtYmVyIG9mIDMyLWJpdCB3b3JkcyB0aGlzIGhhc2hlciBvcGVyYXRlcyBvbi4gRGVmYXVsdDogMTYgKDUxMiBiaXRzKVxuXHQgICAgICovXG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyID0gQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEJhc2UuZXh0ZW5kKCksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgaGFzaGVyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIGhhc2ggY29tcHV0YXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBoYXNoZXIgPSBDcnlwdG9KUy5hbGdvLlNIQTI1Ni5jcmVhdGUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2ZnKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0c1xuXHQgICAgICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGhhc2hlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgaGFzaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gUmVzZXQgZGF0YSBidWZmZXJcblx0ICAgICAgICAgICAgQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldC5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtaGFzaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHRoaXMuX2RvUmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogVXBkYXRlcyB0aGlzIGhhc2hlciB3aXRoIGEgbWVzc2FnZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSBUaGUgbWVzc2FnZSB0byBhcHBlbmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtIYXNoZXJ9IFRoaXMgaGFzaGVyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBoYXNoZXIudXBkYXRlKCdtZXNzYWdlJyk7XG5cdCAgICAgICAgICogICAgIGhhc2hlci51cGRhdGUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGVuZFxuXHQgICAgICAgICAgICB0aGlzLl9hcHBlbmQobWVzc2FnZVVwZGF0ZSk7XG5cblx0ICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBoYXNoXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBDaGFpbmFibGVcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEZpbmFsaXplcyB0aGUgaGFzaCBjb21wdXRhdGlvbi5cblx0ICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIChPcHRpb25hbCkgQSBmaW5hbCBtZXNzYWdlIHVwZGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBoYXNoID0gaGFzaGVyLmZpbmFsaXplKCk7XG5cdCAgICAgICAgICogICAgIHZhciBoYXNoID0gaGFzaGVyLmZpbmFsaXplKCdtZXNzYWdlJyk7XG5cdCAgICAgICAgICogICAgIHZhciBoYXNoID0gaGFzaGVyLmZpbmFsaXplKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIC8vIEZpbmFsIG1lc3NhZ2UgdXBkYXRlXG5cdCAgICAgICAgICAgIGlmIChtZXNzYWdlVXBkYXRlKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9hcHBlbmQobWVzc2FnZVVwZGF0ZSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWhhc2hlciBsb2dpY1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2RvRmluYWxpemUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiA1MTIvMzIsXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgc2hvcnRjdXQgZnVuY3Rpb24gdG8gYSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaGVyIHRvIGNyZWF0ZSBhIGhlbHBlciBmb3IuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIHNob3J0Y3V0IGZ1bmN0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgU0hBMjU2ID0gQ3J5cHRvSlMubGliLkhhc2hlci5fY3JlYXRlSGVscGVyKENyeXB0b0pTLmFsZ28uU0hBMjU2KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfY3JlYXRlSGVscGVyOiBmdW5jdGlvbiAoaGFzaGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSwgY2ZnKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGhhc2hlci5pbml0KGNmZykuZmluYWxpemUobWVzc2FnZSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gdXNlIGluIHRoaXMgSE1BQyBoZWxwZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIHNob3J0Y3V0IGZ1bmN0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgSG1hY1NIQTI1NiA9IENyeXB0b0pTLmxpYi5IYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoQ3J5cHRvSlMuYWxnby5TSEEyNTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIbWFjSGVscGVyOiBmdW5jdGlvbiAoaGFzaGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSwga2V5KSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENfYWxnby5ITUFDLmluaXQoaGFzaGVyLCBrZXkpLmZpbmFsaXplKG1lc3NhZ2UpO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFsZ29yaXRobSBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ28gPSB7fTtcblxuXHQgICAgcmV0dXJuIEM7XG5cdH0oTWF0aCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9ldnBrZGZcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBDaXBoZXIgY29yZSBjb21wb25lbnRzLlxuXHQgKi9cblx0Q3J5cHRvSlMubGliLkNpcGhlciB8fCAoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtO1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0Zjg7XG5cdCAgICB2YXIgQmFzZTY0ID0gQ19lbmMuQmFzZTY0O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblx0ICAgIHZhciBFdnBLREYgPSBDX2FsZ28uRXZwS0RGO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2UgY2lwaGVyIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBrZXlTaXplIFRoaXMgY2lwaGVyJ3Mga2V5IHNpemUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGl2U2l6ZSBUaGlzIGNpcGhlcidzIElWIHNpemUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9FTkNfWEZPUk1fTU9ERSBBIGNvbnN0YW50IHJlcHJlc2VudGluZyBlbmNyeXB0aW9uIG1vZGUuXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gX0RFQ19YRk9STV9NT0RFIEEgY29uc3RhbnQgcmVwcmVzZW50aW5nIGRlY3J5cHRpb24gbW9kZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENpcGhlciA9IENfbGliLkNpcGhlciA9IEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gaXYgVGhlIElWIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCgpLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBlbmNyeXB0aW9uIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlcn0gQSBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXIgPSBDcnlwdG9KUy5hbGdvLkFFUy5jcmVhdGVFbmNyeXB0b3Ioa2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVFbmNyeXB0b3I6IGZ1bmN0aW9uIChrZXksIGNmZykge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fRU5DX1hGT1JNX01PREUsIGtleSwgY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBkZWNyeXB0aW9uIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlcn0gQSBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXIgPSBDcnlwdG9KUy5hbGdvLkFFUy5jcmVhdGVEZWNyeXB0b3Ioa2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVEZWNyeXB0b3I6IGZ1bmN0aW9uIChrZXksIGNmZykge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fREVDX1hGT1JNX01PREUsIGtleSwgY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGNpcGhlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4Zm9ybU1vZGUgRWl0aGVyIHRoZSBlbmNyeXB0aW9uIG9yIGRlY3J5cHRpb24gdHJhbnNvcm1hdGlvbiBtb2RlIGNvbnN0YW50LlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlKENyeXB0b0pTLmFsZ28uQUVTLl9FTkNfWEZPUk1fTU9ERSwga2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoeGZvcm1Nb2RlLCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBTdG9yZSB0cmFuc2Zvcm0gbW9kZSBhbmQga2V5XG5cdCAgICAgICAgICAgIHRoaXMuX3hmb3JtTW9kZSA9IHhmb3JtTW9kZTtcblx0ICAgICAgICAgICAgdGhpcy5fa2V5ID0ga2V5O1xuXG5cdCAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGNpcGhlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgY2lwaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gUmVzZXQgZGF0YSBidWZmZXJcblx0ICAgICAgICAgICAgQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldC5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHRoaXMuX2RvUmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyBkYXRhIHRvIGJlIGVuY3J5cHRlZCBvciBkZWNyeXB0ZWQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGRhdGFVcGRhdGUgVGhlIGRhdGEgdG8gZW5jcnlwdCBvciBkZWNyeXB0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGF0YSBhZnRlciBwcm9jZXNzaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLnByb2Nlc3MoJ2RhdGEnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5wcm9jZXNzKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcHJvY2VzczogZnVuY3Rpb24gKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2FwcGVuZChkYXRhVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBQcm9jZXNzIGF2YWlsYWJsZSBibG9ja3Ncblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3MoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBlbmNyeXB0aW9uIG9yIGRlY3J5cHRpb24gcHJvY2Vzcy5cblx0ICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhVXBkYXRlIFRoZSBmaW5hbCBkYXRhIHRvIGVuY3J5cHQgb3IgZGVjcnlwdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRhdGEgYWZ0ZXIgZmluYWwgcHJvY2Vzc2luZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5maW5hbGl6ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gRmluYWwgZGF0YSB1cGRhdGVcblx0ICAgICAgICAgICAgaWYgKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZChkYXRhVXBkYXRlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZERhdGEgPSB0aGlzLl9kb0ZpbmFsaXplKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkRGF0YTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiAxMjgvMzIsXG5cblx0ICAgICAgICBfRU5DX1hGT1JNX01PREU6IDEsXG5cblx0ICAgICAgICBfREVDX1hGT1JNX01PREU6IDIsXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHNob3J0Y3V0IGZ1bmN0aW9ucyB0byBhIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IHdpdGggZW5jcnlwdCBhbmQgZGVjcnlwdCBzaG9ydGN1dCBmdW5jdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBBRVMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5BRVMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIZWxwZXI6IChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGFzc3dvcmRCYXNlZENpcGhlcjtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNlcmlhbGl6YWJsZUNpcGhlcjtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2lwaGVyKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChtZXNzYWdlLCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0Q2lwaGVyU3RyYXRlZ3koa2V5KS5lbmNyeXB0KGNpcGhlciwgbWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVydGV4dCwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkuZGVjcnlwdChjaXBoZXIsIGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH0oKSlcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2Ugc3RyZWFtIGNpcGhlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgY2lwaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiAxICgzMiBiaXRzKVxuXHQgICAgICovXG5cdCAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyID0gQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gUHJvY2VzcyBwYXJ0aWFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkQmxvY2tzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDFcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIE1vZGUgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19tb2RlID0gQy5tb2RlID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgYmFzZSBibG9jayBjaXBoZXIgbW9kZSB0ZW1wbGF0ZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEJsb2NrQ2lwaGVyTW9kZSA9IENfbGliLkJsb2NrQ2lwaGVyTW9kZSA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHRoaXMgbW9kZSBmb3IgZW5jcnlwdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgQSBibG9jayBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gaXYgVGhlIElWIHdvcmRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbW9kZSA9IENyeXB0b0pTLm1vZGUuQ0JDLmNyZWF0ZUVuY3J5cHRvcihjaXBoZXIsIGl2LndvcmRzKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVFbmNyeXB0b3I6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLkVuY3J5cHRvci5jcmVhdGUoY2lwaGVyLCBpdik7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgdGhpcyBtb2RlIGZvciBkZWNyeXB0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBBIGJsb2NrIGNpcGhlciBpbnN0YW5jZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBpdiBUaGUgSVYgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBtb2RlID0gQ3J5cHRvSlMubW9kZS5DQkMuY3JlYXRlRGVjcnlwdG9yKGNpcGhlciwgaXYud29yZHMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNyZWF0ZURlY3J5cHRvcjogZnVuY3Rpb24gKGNpcGhlciwgaXYpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuRGVjcnlwdG9yLmNyZWF0ZShjaXBoZXIsIGl2KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIEEgYmxvY2sgY2lwaGVyIGluc3RhbmNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGl2IFRoZSBJViB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5FbmNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYud29yZHMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NpcGhlciA9IGNpcGhlcjtcblx0ICAgICAgICAgICAgdGhpcy5faXYgPSBpdjtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDaXBoZXIgQmxvY2sgQ2hhaW5pbmcgbW9kZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENCQyA9IENfbW9kZS5DQkMgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEFic3RyYWN0IGJhc2UgQ0JDIG1vZGUuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdmFyIENCQyA9IEJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENCQyBlbmNyeXB0b3IuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgQ0JDLkVuY3J5cHRvciA9IENCQy5leHRlbmQoe1xuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogUHJvY2Vzc2VzIHRoZSBkYXRhIGJsb2NrIGF0IG9mZnNldC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgVGhlIGRhdGEgd29yZHMgdG8gb3BlcmF0ZSBvbi5cblx0ICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IHdoZXJlIHRoZSBibG9jayBzdGFydHMuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICBtb2RlLnByb2Nlc3NCbG9jayhkYXRhLndvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFhPUiBhbmQgZW5jcnlwdFxuXHQgICAgICAgICAgICAgICAgeG9yQmxvY2suY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpO1xuXHQgICAgICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENCQyBkZWNyeXB0b3IuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgQ0JDLkRlY3J5cHRvciA9IENCQy5leHRlbmQoe1xuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogUHJvY2Vzc2VzIHRoZSBkYXRhIGJsb2NrIGF0IG9mZnNldC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgVGhlIGRhdGEgd29yZHMgdG8gb3BlcmF0ZSBvbi5cblx0ICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IHdoZXJlIHRoZSBibG9jayBzdGFydHMuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICBtb2RlLnByb2Nlc3NCbG9jayhkYXRhLndvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoaXMgYmxvY2sgdG8gdXNlIHdpdGggbmV4dCBibG9ja1xuXHQgICAgICAgICAgICAgICAgdmFyIHRoaXNCbG9jayA9IHdvcmRzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgYmxvY2tTaXplKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRGVjcnlwdCBhbmQgWE9SXG5cdCAgICAgICAgICAgICAgICBjaXBoZXIuZGVjcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgICAgeG9yQmxvY2suY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBUaGlzIGJsb2NrIGJlY29tZXMgdGhlIHByZXZpb3VzIGJsb2NrXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB0aGlzQmxvY2s7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIGZ1bmN0aW9uIHhvckJsb2NrKHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgICAgICB2YXIgYmxvY2s7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7XG5cblx0ICAgICAgICAgICAgLy8gQ2hvb3NlIG1peGluZyBibG9ja1xuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIGJsb2NrID0gaXY7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYmxvY2sgPSB0aGlzLl9wcmV2QmxvY2s7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBYT1IgYmxvY2tzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGJsb2NrW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIENCQztcblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogUGFkZGluZyBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX3BhZCA9IEMucGFkID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogUEtDUyAjNS83IHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBQa2NzNyA9IENfcGFkLlBrY3M3ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFBhZHMgZGF0YSB1c2luZyB0aGUgYWxnb3JpdGhtIGRlZmluZWQgaW4gUEtDUyAjNS83LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGRhdGEgVGhlIGRhdGEgdG8gcGFkLlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG11bHRpcGxlIHRoYXQgdGhlIGRhdGEgc2hvdWxkIGJlIHBhZGRlZCB0by5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgQ3J5cHRvSlMucGFkLlBrY3M3LnBhZCh3b3JkQXJyYXksIDQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXNcblx0ICAgICAgICAgICAgdmFyIG5QYWRkaW5nQnl0ZXMgPSBibG9ja1NpemVCeXRlcyAtIGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDcmVhdGUgcGFkZGluZyB3b3JkXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nV29yZCA9IChuUGFkZGluZ0J5dGVzIDw8IDI0KSB8IChuUGFkZGluZ0J5dGVzIDw8IDE2KSB8IChuUGFkZGluZ0J5dGVzIDw8IDgpIHwgblBhZGRpbmdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDcmVhdGUgcGFkZGluZ1xuXHQgICAgICAgICAgICB2YXIgcGFkZGluZ1dvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgblBhZGRpbmdCeXRlczsgaSArPSA0KSB7XG5cdCAgICAgICAgICAgICAgICBwYWRkaW5nV29yZHMucHVzaChwYWRkaW5nV29yZCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSBXb3JkQXJyYXkuY3JlYXRlKHBhZGRpbmdXb3JkcywgblBhZGRpbmdCeXRlcyk7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YS5jb25jYXQocGFkZGluZyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFVucGFkcyBkYXRhIHRoYXQgaGFkIGJlZW4gcGFkZGVkIHVzaW5nIHRoZSBhbGdvcml0aG0gZGVmaW5lZCBpbiBQS0NTICM1LzcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gZGF0YSBUaGUgZGF0YSB0byB1bnBhZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgQ3J5cHRvSlMucGFkLlBrY3M3LnVucGFkKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgICAgIC8vIEdldCBudW1iZXIgb2YgcGFkZGluZyBieXRlcyBmcm9tIGxhc3QgYnl0ZVxuXHQgICAgICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmO1xuXG5cdCAgICAgICAgICAgIC8vIFJlbW92ZSBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlcztcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2UgYmxvY2sgY2lwaGVyIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBjaXBoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICovXG5cdCAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlciA9IENpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7TW9kZX0gbW9kZSBUaGUgYmxvY2sgbW9kZSB0byB1c2UuIERlZmF1bHQ6IENCQ1xuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7UGFkZGluZ30gcGFkZGluZyBUaGUgcGFkZGluZyBzdHJhdGVneSB0byB1c2UuIERlZmF1bHQ6IFBrY3M3XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBDaXBoZXIuY2ZnLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIG1vZGU6IENCQyxcblx0ICAgICAgICAgICAgcGFkZGluZzogUGtjczdcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBtb2RlQ3JlYXRvcjtcblxuXHQgICAgICAgICAgICAvLyBSZXNldCBjaXBoZXJcblx0ICAgICAgICAgICAgQ2lwaGVyLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZztcblx0ICAgICAgICAgICAgdmFyIGl2ID0gY2ZnLml2O1xuXHQgICAgICAgICAgICB2YXIgbW9kZSA9IGNmZy5tb2RlO1xuXG5cdCAgICAgICAgICAgIC8vIFJlc2V0IGJsb2NrIG1vZGVcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9FTkNfWEZPUk1fTU9ERSkge1xuXHQgICAgICAgICAgICAgICAgbW9kZUNyZWF0b3IgPSBtb2RlLmNyZWF0ZUVuY3J5cHRvcjtcblx0ICAgICAgICAgICAgfSBlbHNlIC8qIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fREVDX1hGT1JNX01PREUpICovIHtcblx0ICAgICAgICAgICAgICAgIG1vZGVDcmVhdG9yID0gbW9kZS5jcmVhdGVEZWNyeXB0b3I7XG5cdCAgICAgICAgICAgICAgICAvLyBLZWVwIGF0IGxlYXN0IG9uZSBibG9jayBpbiB0aGUgYnVmZmVyIGZvciB1bnBhZGRpbmdcblx0ICAgICAgICAgICAgICAgIHRoaXMuX21pbkJ1ZmZlclNpemUgPSAxO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKHRoaXMuX21vZGUgJiYgdGhpcy5fbW9kZS5fX2NyZWF0b3IgPT0gbW9kZUNyZWF0b3IpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX21vZGUuaW5pdCh0aGlzLCBpdiAmJiBpdi53b3Jkcyk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9tb2RlID0gbW9kZUNyZWF0b3IuY2FsbChtb2RlLCB0aGlzLCBpdiAmJiBpdi53b3Jkcyk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9tb2RlLl9fY3JlYXRvciA9IG1vZGVDcmVhdG9yO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbW9kZS5wcm9jZXNzQmxvY2sod29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZEJsb2NrcztcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgcGFkZGluZyA9IHRoaXMuY2ZnLnBhZGRpbmc7XG5cblx0ICAgICAgICAgICAgLy8gRmluYWxpemVcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9FTkNfWEZPUk1fTU9ERSkge1xuXHQgICAgICAgICAgICAgICAgLy8gUGFkIGRhdGFcblx0ICAgICAgICAgICAgICAgIHBhZGRpbmcucGFkKHRoaXMuX2RhdGEsIHRoaXMuYmxvY2tTaXplKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpO1xuXHQgICAgICAgICAgICB9IGVsc2UgLyogaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9ERUNfWEZPUk1fTU9ERSkgKi8ge1xuXHQgICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBVbnBhZCBkYXRhXG5cdCAgICAgICAgICAgICAgICBwYWRkaW5nLnVucGFkKGZpbmFsUHJvY2Vzc2VkQmxvY2tzKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBmaW5hbFByb2Nlc3NlZEJsb2Nrcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiAxMjgvMzJcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEEgY29sbGVjdGlvbiBvZiBjaXBoZXIgcGFyYW1ldGVycy5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gY2lwaGVydGV4dCBUaGUgcmF3IGNpcGhlcnRleHQuXG5cdCAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkgdG8gdGhpcyBjaXBoZXJ0ZXh0LlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGl2IFRoZSBJViB1c2VkIGluIHRoZSBjaXBoZXJpbmcgb3BlcmF0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IHNhbHQgVGhlIHNhbHQgdXNlZCB3aXRoIGEga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uXG5cdCAgICAgKiBAcHJvcGVydHkge0NpcGhlcn0gYWxnb3JpdGhtIFRoZSBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICogQHByb3BlcnR5IHtNb2RlfSBtb2RlIFRoZSBibG9jayBtb2RlIHVzZWQgaW4gdGhlIGNpcGhlcmluZyBvcGVyYXRpb24uXG5cdCAgICAgKiBAcHJvcGVydHkge1BhZGRpbmd9IHBhZGRpbmcgVGhlIHBhZGRpbmcgc2NoZW1lIHVzZWQgaW4gdGhlIGNpcGhlcmluZyBvcGVyYXRpb24uXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBibG9jayBzaXplIG9mIHRoZSBjaXBoZXIuXG5cdCAgICAgKiBAcHJvcGVydHkge0Zvcm1hdH0gZm9ybWF0dGVyIFRoZSBkZWZhdWx0IGZvcm1hdHRpbmcgc3RyYXRlZ3kgdG8gY29udmVydCB0aGlzIGNpcGhlciBwYXJhbXMgb2JqZWN0IHRvIGEgc3RyaW5nLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ2lwaGVyUGFyYW1zID0gQ19saWIuQ2lwaGVyUGFyYW1zID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjaXBoZXJQYXJhbXMgQW4gb2JqZWN0IHdpdGggYW55IG9mIHRoZSBwb3NzaWJsZSBjaXBoZXIgcGFyYW1ldGVycy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlclBhcmFtcyA9IENyeXB0b0pTLmxpYi5DaXBoZXJQYXJhbXMuY3JlYXRlKHtcblx0ICAgICAgICAgKiAgICAgICAgIGNpcGhlcnRleHQ6IGNpcGhlcnRleHRXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBrZXk6IGtleVdvcmRBcnJheSxcblx0ICAgICAgICAgKiAgICAgICAgIGl2OiBpdldvcmRBcnJheSxcblx0ICAgICAgICAgKiAgICAgICAgIHNhbHQ6IHNhbHRXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBhbGdvcml0aG06IENyeXB0b0pTLmFsZ28uQUVTLFxuXHQgICAgICAgICAqICAgICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsXG5cdCAgICAgICAgICogICAgICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUEtDUzcsXG5cdCAgICAgICAgICogICAgICAgICBibG9ja1NpemU6IDQsXG5cdCAgICAgICAgICogICAgICAgICBmb3JtYXR0ZXI6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMXG5cdCAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjaXBoZXJQYXJhbXMpIHtcblx0ICAgICAgICAgICAgdGhpcy5taXhJbihjaXBoZXJQYXJhbXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIGNpcGhlciBwYXJhbXMgb2JqZWN0IHRvIGEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtGb3JtYXR9IGZvcm1hdHRlciAoT3B0aW9uYWwpIFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIHVzZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZ2lmaWVkIGNpcGhlciBwYXJhbXMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAdGhyb3dzIEVycm9yIElmIG5laXRoZXIgdGhlIGZvcm1hdHRlciBub3IgdGhlIGRlZmF1bHQgZm9ybWF0dGVyIGlzIHNldC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IGNpcGhlclBhcmFtcyArICcnO1xuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSBjaXBoZXJQYXJhbXMudG9TdHJpbmcoQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoZm9ybWF0dGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoZm9ybWF0dGVyIHx8IHRoaXMuZm9ybWF0dGVyKS5zdHJpbmdpZnkodGhpcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogRm9ybWF0IG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfZm9ybWF0ID0gQy5mb3JtYXQgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBPcGVuU1NMIGZvcm1hdHRpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBPcGVuU1NMRm9ybWF0dGVyID0gQ19mb3JtYXQuT3BlblNTTCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIGNpcGhlciBwYXJhbXMgb2JqZWN0IHRvIGFuIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc30gY2lwaGVyUGFyYW1zIFRoZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBvcGVuU1NMU3RyaW5nID0gQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wuc3RyaW5naWZ5KGNpcGhlclBhcmFtcyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7XG5cdCAgICAgICAgICAgIHZhciB3b3JkQXJyYXk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gY2lwaGVyUGFyYW1zLmNpcGhlcnRleHQ7XG5cdCAgICAgICAgICAgIHZhciBzYWx0ID0gY2lwaGVyUGFyYW1zLnNhbHQ7XG5cblx0ICAgICAgICAgICAgLy8gRm9ybWF0XG5cdCAgICAgICAgICAgIGlmIChzYWx0KSB7XG5cdCAgICAgICAgICAgICAgICB3b3JkQXJyYXkgPSBXb3JkQXJyYXkuY3JlYXRlKFsweDUzNjE2Yzc0LCAweDY1NjQ1ZjVmXSkuY29uY2F0KHNhbHQpLmNvbmNhdChjaXBoZXJ0ZXh0KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRBcnJheSA9IGNpcGhlcnRleHQ7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gd29yZEFycmF5LnRvU3RyaW5nKEJhc2U2NCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGFuIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcgdG8gYSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvcGVuU1NMU3RyIFRoZSBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJQYXJhbXMgPSBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTC5wYXJzZShvcGVuU1NMU3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKG9wZW5TU0xTdHIpIHtcblx0ICAgICAgICAgICAgdmFyIHNhbHQ7XG5cblx0ICAgICAgICAgICAgLy8gUGFyc2UgYmFzZTY0XG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gQmFzZTY0LnBhcnNlKG9wZW5TU0xTdHIpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0V29yZHMgPSBjaXBoZXJ0ZXh0LndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFRlc3QgZm9yIHNhbHRcblx0ICAgICAgICAgICAgaWYgKGNpcGhlcnRleHRXb3Jkc1swXSA9PSAweDUzNjE2Yzc0ICYmIGNpcGhlcnRleHRXb3Jkc1sxXSA9PSAweDY1NjQ1ZjVmKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHNhbHRcblx0ICAgICAgICAgICAgICAgIHNhbHQgPSBXb3JkQXJyYXkuY3JlYXRlKGNpcGhlcnRleHRXb3Jkcy5zbGljZSgyLCA0KSk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBzYWx0IGZyb20gY2lwaGVydGV4dFxuXHQgICAgICAgICAgICAgICAgY2lwaGVydGV4dFdvcmRzLnNwbGljZSgwLCA0KTtcblx0ICAgICAgICAgICAgICAgIGNpcGhlcnRleHQuc2lnQnl0ZXMgLT0gMTY7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7IGNpcGhlcnRleHQ6IGNpcGhlcnRleHQsIHNhbHQ6IHNhbHQgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBIGNpcGhlciB3cmFwcGVyIHRoYXQgcmV0dXJucyBjaXBoZXJ0ZXh0IGFzIGEgc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICovXG5cdCAgICB2YXIgU2VyaWFsaXphYmxlQ2lwaGVyID0gQ19saWIuU2VyaWFsaXphYmxlQ2lwaGVyID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7Rm9ybWF0dGVyfSBmb3JtYXQgVGhlIGZvcm1hdHRpbmcgc3RyYXRlZ3kgdG8gY29udmVydCBjaXBoZXIgcGFyYW0gb2JqZWN0cyB0byBhbmQgZnJvbSBhIHN0cmluZy4gRGVmYXVsdDogT3BlblNTTFxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICBmb3JtYXQ6IE9wZW5TU0xGb3JtYXR0ZXJcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEVuY3J5cHRzIGEgbWVzc2FnZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBlbmNyeXB0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5KTtcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsIGtleSwgeyBpdjogaXYgfSk7XG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCBrZXksIHsgaXY6IGl2LCBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIG1lc3NhZ2UsIGtleSwgY2ZnKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0c1xuXHQgICAgICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgIHZhciBlbmNyeXB0b3IgPSBjaXBoZXIuY3JlYXRlRW5jcnlwdG9yKGtleSwgY2ZnKTtcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBlbmNyeXB0b3IuZmluYWxpemUobWVzc2FnZSk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGNpcGhlckNmZyA9IGVuY3J5cHRvci5jZmc7XG5cblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIGFuZCByZXR1cm4gc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXNcblx0ICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoe1xuXHQgICAgICAgICAgICAgICAgY2lwaGVydGV4dDogY2lwaGVydGV4dCxcblx0ICAgICAgICAgICAgICAgIGtleToga2V5LFxuXHQgICAgICAgICAgICAgICAgaXY6IGNpcGhlckNmZy5pdixcblx0ICAgICAgICAgICAgICAgIGFsZ29yaXRobTogY2lwaGVyLFxuXHQgICAgICAgICAgICAgICAgbW9kZTogY2lwaGVyQ2ZnLm1vZGUsXG5cdCAgICAgICAgICAgICAgICBwYWRkaW5nOiBjaXBoZXJDZmcucGFkZGluZyxcblx0ICAgICAgICAgICAgICAgIGJsb2NrU2l6ZTogY2lwaGVyLmJsb2NrU2l6ZSxcblx0ICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogY2ZnLmZvcm1hdFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRGVjcnlwdHMgc2VyaWFsaXplZCBjaXBoZXJ0ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN8c3RyaW5nfSBjaXBoZXJ0ZXh0IFRoZSBjaXBoZXJ0ZXh0IHRvIGRlY3J5cHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBwbGFpbnRleHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBwbGFpbnRleHQgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGZvcm1hdHRlZENpcGhlcnRleHQsIGtleSwgeyBpdjogaXYsIGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICogICAgIHZhciBwbGFpbnRleHQgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGNpcGhlcnRleHRQYXJhbXMsIGtleSwgeyBpdjogaXYsIGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZGVjcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgY2lwaGVydGV4dCwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIENpcGhlclBhcmFtc1xuXHQgICAgICAgICAgICBjaXBoZXJ0ZXh0ID0gdGhpcy5fcGFyc2UoY2lwaGVydGV4dCwgY2ZnLmZvcm1hdCk7XG5cblx0ICAgICAgICAgICAgLy8gRGVjcnlwdFxuXHQgICAgICAgICAgICB2YXIgcGxhaW50ZXh0ID0gY2lwaGVyLmNyZWF0ZURlY3J5cHRvcihrZXksIGNmZykuZmluYWxpemUoY2lwaGVydGV4dC5jaXBoZXJ0ZXh0KTtcblxuXHQgICAgICAgICAgICByZXR1cm4gcGxhaW50ZXh0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQgdG8gQ2lwaGVyUGFyYW1zLFxuXHQgICAgICAgICAqIGVsc2UgYXNzdW1lZCBDaXBoZXJQYXJhbXMgYWxyZWFkeSBhbmQgcmV0dXJucyBjaXBoZXJ0ZXh0IHVuY2hhbmdlZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfHN0cmluZ30gY2lwaGVydGV4dCBUaGUgY2lwaGVydGV4dC5cblx0ICAgICAgICAgKiBAcGFyYW0ge0Zvcm1hdHRlcn0gZm9ybWF0IFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIHVzZSB0byBwYXJzZSBzZXJpYWxpemVkIGNpcGhlcnRleHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IFRoZSB1bnNlcmlhbGl6ZWQgY2lwaGVydGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLl9wYXJzZShjaXBoZXJ0ZXh0U3RyaW5nT3JQYXJhbXMsIGZvcm1hdCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX3BhcnNlOiBmdW5jdGlvbiAoY2lwaGVydGV4dCwgZm9ybWF0KSB7XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY2lwaGVydGV4dCA9PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdC5wYXJzZShjaXBoZXJ0ZXh0LCB0aGlzKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBjaXBoZXJ0ZXh0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogS2V5IGRlcml2YXRpb24gZnVuY3Rpb24gbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19rZGYgPSBDLmtkZiA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIE9wZW5TU0wga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uXG5cdCAgICAgKi9cblx0ICAgIHZhciBPcGVuU1NMS2RmID0gQ19rZGYuT3BlblNTTCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEZXJpdmVzIGEga2V5IGFuZCBJViBmcm9tIGEgcGFzc3dvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkIHRvIGRlcml2ZSBmcm9tLlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBrZXlTaXplIFRoZSBzaXplIGluIHdvcmRzIG9mIHRoZSBrZXkgdG8gZ2VuZXJhdGUuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGl2U2l6ZSBUaGUgc2l6ZSBpbiB3b3JkcyBvZiB0aGUgSVYgdG8gZ2VuZXJhdGUuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IChPcHRpb25hbCkgQSA2NC1iaXQgc2FsdCB0byB1c2UuIElmIG9taXR0ZWQsIGEgc2FsdCB3aWxsIGJlIGdlbmVyYXRlZCByYW5kb21seS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gQSBjaXBoZXIgcGFyYW1zIG9iamVjdCB3aXRoIHRoZSBrZXksIElWLCBhbmQgc2FsdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGRlcml2ZWRQYXJhbXMgPSBDcnlwdG9KUy5rZGYuT3BlblNTTC5leGVjdXRlKCdQYXNzd29yZCcsIDI1Ni8zMiwgMTI4LzMyKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGRlcml2ZWRQYXJhbXMgPSBDcnlwdG9KUy5rZGYuT3BlblNTTC5leGVjdXRlKCdQYXNzd29yZCcsIDI1Ni8zMiwgMTI4LzMyLCAnc2FsdHNhbHQnKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBleGVjdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIGtleVNpemUsIGl2U2l6ZSwgc2FsdCkge1xuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSByYW5kb20gc2FsdFxuXHQgICAgICAgICAgICBpZiAoIXNhbHQpIHtcblx0ICAgICAgICAgICAgICAgIHNhbHQgPSBXb3JkQXJyYXkucmFuZG9tKDY0LzgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgSVZcblx0ICAgICAgICAgICAgdmFyIGtleSA9IEV2cEtERi5jcmVhdGUoeyBrZXlTaXplOiBrZXlTaXplICsgaXZTaXplIH0pLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpO1xuXG5cdCAgICAgICAgICAgIC8vIFNlcGFyYXRlIGtleSBhbmQgSVZcblx0ICAgICAgICAgICAgdmFyIGl2ID0gV29yZEFycmF5LmNyZWF0ZShrZXkud29yZHMuc2xpY2Uoa2V5U2l6ZSksIGl2U2l6ZSAqIDQpO1xuXHQgICAgICAgICAgICBrZXkuc2lnQnl0ZXMgPSBrZXlTaXplICogNDtcblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gcGFyYW1zXG5cdCAgICAgICAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHsga2V5OiBrZXksIGl2OiBpdiwgc2FsdDogc2FsdCB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEEgc2VyaWFsaXphYmxlIGNpcGhlciB3cmFwcGVyIHRoYXQgZGVyaXZlcyB0aGUga2V5IGZyb20gYSBwYXNzd29yZCxcblx0ICAgICAqIGFuZCByZXR1cm5zIGNpcGhlcnRleHQgYXMgYSBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgKi9cblx0ICAgIHZhciBQYXNzd29yZEJhc2VkQ2lwaGVyID0gQ19saWIuUGFzc3dvcmRCYXNlZENpcGhlciA9IFNlcmlhbGl6YWJsZUNpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7S0RGfSBrZGYgVGhlIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uIHRvIHVzZSB0byBnZW5lcmF0ZSBhIGtleSBhbmQgSVYgZnJvbSBhIHBhc3N3b3JkLiBEZWZhdWx0OiBPcGVuU1NMXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBTZXJpYWxpemFibGVDaXBoZXIuY2ZnLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGtkZjogT3BlblNTTEtkZlxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRW5jcnlwdHMgYSBtZXNzYWdlIHVzaW5nIGEgcGFzc3dvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZW5jcnlwdC5cblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwgJ3Bhc3N3b3JkJyk7XG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIG1lc3NhZ2UsIHBhc3N3b3JkLCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIERlcml2ZSBrZXkgYW5kIG90aGVyIHBhcmFtc1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IGNmZy5rZGYuZXhlY3V0ZShwYXNzd29yZCwgY2lwaGVyLmtleVNpemUsIGNpcGhlci5pdlNpemUpO1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBJViB0byBjb25maWdcblx0ICAgICAgICAgICAgY2ZnLml2ID0gZGVyaXZlZFBhcmFtcy5pdjtcblxuXHQgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQuY2FsbCh0aGlzLCBjaXBoZXIsIG1lc3NhZ2UsIGRlcml2ZWRQYXJhbXMua2V5LCBjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIE1peCBpbiBkZXJpdmVkIHBhcmFtc1xuXHQgICAgICAgICAgICBjaXBoZXJ0ZXh0Lm1peEluKGRlcml2ZWRQYXJhbXMpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjaXBoZXJ0ZXh0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEZWNyeXB0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQgdXNpbmcgYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfHN0cmluZ30gY2lwaGVydGV4dCBUaGUgY2lwaGVydGV4dCB0byBkZWNyeXB0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHBsYWludGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGZvcm1hdHRlZENpcGhlcnRleHQsICdwYXNzd29yZCcsIHsgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGNpcGhlcnRleHRQYXJhbXMsICdwYXNzd29yZCcsIHsgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBwYXNzd29yZCwgY2ZnKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0c1xuXHQgICAgICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBDaXBoZXJQYXJhbXNcblx0ICAgICAgICAgICAgY2lwaGVydGV4dCA9IHRoaXMuX3BhcnNlKGNpcGhlcnRleHQsIGNmZy5mb3JtYXQpO1xuXG5cdCAgICAgICAgICAgIC8vIERlcml2ZSBrZXkgYW5kIG90aGVyIHBhcmFtc1xuXHQgICAgICAgICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IGNmZy5rZGYuZXhlY3V0ZShwYXNzd29yZCwgY2lwaGVyLmtleVNpemUsIGNpcGhlci5pdlNpemUsIGNpcGhlcnRleHQuc2FsdCk7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIElWIHRvIGNvbmZpZ1xuXHQgICAgICAgICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2O1xuXG5cdCAgICAgICAgICAgIC8vIERlY3J5cHRcblx0ICAgICAgICAgICAgdmFyIHBsYWludGV4dCA9IFNlcmlhbGl6YWJsZUNpcGhlci5kZWNyeXB0LmNhbGwodGhpcywgY2lwaGVyLCBjaXBoZXJ0ZXh0LCBkZXJpdmVkUGFyYW1zLmtleSwgY2ZnKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gcGxhaW50ZXh0O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHR9KCkpO1xuXG5cbn0pKTsiLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBhc3NlcnQ7XG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGFzc2VydEVxdWFsKGwsIHIsIG1zZykge1xuICBpZiAobCAhPSByKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgKCdBc3NlcnRpb24gZmFpbGVkOiAnICsgbCArICcgIT0gJyArIHIpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IGV4cG9ydHM7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIG1pbkFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBtaW5VdGlscyA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMnKTtcblxudXRpbHMuYXNzZXJ0ID0gbWluQXNzZXJ0O1xudXRpbHMudG9BcnJheSA9IG1pblV0aWxzLnRvQXJyYXk7XG51dGlscy56ZXJvMiA9IG1pblV0aWxzLnplcm8yO1xudXRpbHMudG9IZXggPSBtaW5VdGlscy50b0hleDtcbnV0aWxzLmVuY29kZSA9IG1pblV0aWxzLmVuY29kZTtcblxuLy8gUmVwcmVzZW50IG51bSBpbiBhIHctTkFGIGZvcm1cbmZ1bmN0aW9uIGdldE5BRihudW0sIHcsIGJpdHMpIHtcbiAgdmFyIG5hZiA9IG5ldyBBcnJheShNYXRoLm1heChudW0uYml0TGVuZ3RoKCksIGJpdHMpICsgMSk7XG4gIG5hZi5maWxsKDApO1xuXG4gIHZhciB3cyA9IDEgPDwgKHcgKyAxKTtcbiAgdmFyIGsgPSBudW0uY2xvbmUoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5hZi5sZW5ndGg7IGkrKykge1xuICAgIHZhciB6O1xuICAgIHZhciBtb2QgPSBrLmFuZGxuKHdzIC0gMSk7XG4gICAgaWYgKGsuaXNPZGQoKSkge1xuICAgICAgaWYgKG1vZCA+ICh3cyA+PiAxKSAtIDEpXG4gICAgICAgIHogPSAod3MgPj4gMSkgLSBtb2Q7XG4gICAgICBlbHNlXG4gICAgICAgIHogPSBtb2Q7XG4gICAgICBrLmlzdWJuKHopO1xuICAgIH0gZWxzZSB7XG4gICAgICB6ID0gMDtcbiAgICB9XG5cbiAgICBuYWZbaV0gPSB6O1xuICAgIGsuaXVzaHJuKDEpO1xuICB9XG5cbiAgcmV0dXJuIG5hZjtcbn1cbnV0aWxzLmdldE5BRiA9IGdldE5BRjtcblxuLy8gUmVwcmVzZW50IGsxLCBrMiBpbiBhIEpvaW50IFNwYXJzZSBGb3JtXG5mdW5jdGlvbiBnZXRKU0YoazEsIGsyKSB7XG4gIHZhciBqc2YgPSBbXG4gICAgW10sXG4gICAgW11cbiAgXTtcblxuICBrMSA9IGsxLmNsb25lKCk7XG4gIGsyID0gazIuY2xvbmUoKTtcbiAgdmFyIGQxID0gMDtcbiAgdmFyIGQyID0gMDtcbiAgd2hpbGUgKGsxLmNtcG4oLWQxKSA+IDAgfHwgazIuY21wbigtZDIpID4gMCkge1xuXG4gICAgLy8gRmlyc3QgcGhhc2VcbiAgICB2YXIgbTE0ID0gKGsxLmFuZGxuKDMpICsgZDEpICYgMztcbiAgICB2YXIgbTI0ID0gKGsyLmFuZGxuKDMpICsgZDIpICYgMztcbiAgICBpZiAobTE0ID09PSAzKVxuICAgICAgbTE0ID0gLTE7XG4gICAgaWYgKG0yNCA9PT0gMylcbiAgICAgIG0yNCA9IC0xO1xuICAgIHZhciB1MTtcbiAgICBpZiAoKG0xNCAmIDEpID09PSAwKSB7XG4gICAgICB1MSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtOCA9IChrMS5hbmRsbig3KSArIGQxKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMjQgPT09IDIpXG4gICAgICAgIHUxID0gLW0xNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTEgPSBtMTQ7XG4gICAgfVxuICAgIGpzZlswXS5wdXNoKHUxKTtcblxuICAgIHZhciB1MjtcbiAgICBpZiAoKG0yNCAmIDEpID09PSAwKSB7XG4gICAgICB1MiA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtOCA9IChrMi5hbmRsbig3KSArIGQyKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMTQgPT09IDIpXG4gICAgICAgIHUyID0gLW0yNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTIgPSBtMjQ7XG4gICAgfVxuICAgIGpzZlsxXS5wdXNoKHUyKTtcblxuICAgIC8vIFNlY29uZCBwaGFzZVxuICAgIGlmICgyICogZDEgPT09IHUxICsgMSlcbiAgICAgIGQxID0gMSAtIGQxO1xuICAgIGlmICgyICogZDIgPT09IHUyICsgMSlcbiAgICAgIGQyID0gMSAtIGQyO1xuICAgIGsxLml1c2hybigxKTtcbiAgICBrMi5pdXNocm4oMSk7XG4gIH1cblxuICByZXR1cm4ganNmO1xufVxudXRpbHMuZ2V0SlNGID0gZ2V0SlNGO1xuXG5mdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eShvYmosIG5hbWUsIGNvbXB1dGVyKSB7XG4gIHZhciBrZXkgPSAnXycgKyBuYW1lO1xuICBvYmoucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkoKSB7XG4gICAgcmV0dXJuIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkID8gdGhpc1trZXldIDpcbiAgICAgICAgICAgdGhpc1trZXldID0gY29tcHV0ZXIuY2FsbCh0aGlzKTtcbiAgfTtcbn1cbnV0aWxzLmNhY2hlZFByb3BlcnR5ID0gY2FjaGVkUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHBhcnNlQnl0ZXMoYnl0ZXMpIHtcbiAgcmV0dXJuIHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycgPyB1dGlscy50b0FycmF5KGJ5dGVzLCAnaGV4JykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzO1xufVxudXRpbHMucGFyc2VCeXRlcyA9IHBhcnNlQnl0ZXM7XG5cbmZ1bmN0aW9uIGludEZyb21MRShieXRlcykge1xuICByZXR1cm4gbmV3IEJOKGJ5dGVzLCAnaGV4JywgJ2xlJyk7XG59XG51dGlscy5pbnRGcm9tTEUgPSBpbnRGcm9tTEU7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuaW5oZXJpdHMgPSBpbmhlcml0cztcblxuZnVuY3Rpb24gaXNTdXJyb2dhdGVQYWlyKG1zZywgaSkge1xuICBpZiAoKG1zZy5jaGFyQ29kZUF0KGkpICYgMHhGQzAwKSAhPT0gMHhEODAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChpIDwgMCB8fCBpICsgMSA+PSBtc2cubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAobXNnLmNoYXJDb2RlQXQoaSArIDEpICYgMHhGQzAwKSA9PT0gMHhEQzAwO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCFlbmMpIHtcbiAgICAgIC8vIEluc3BpcmVkIGJ5IHN0cmluZ1RvVXRmOEJ5dGVBcnJheSgpIGluIGNsb3N1cmUtbGlicmFyeSBieSBHb29nbGVcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvODU5OGQ4NzI0MmFmNTlhYWMyMzMyNzA3NDJjODk4NGUyYjJiZGJlMC9jbG9zdXJlL2dvb2cvY3J5cHQvY3J5cHQuanMjTDExNy1MMTQzXG4gICAgICAvLyBBcGFjaGUgTGljZW5zZSAyLjBcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICAgICAgcmVzW3ArK10gPSBjO1xuICAgICAgICB9IGVsc2UgaWYgKGMgPCAyMDQ4KSB7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcbiAgICAgICAgICByZXNbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICB9IGVsc2UgaWYgKGlzU3Vycm9nYXRlUGFpcihtc2csIGkpKSB7XG4gICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzRkYpIDw8IDEwKSArIChtc2cuY2hhckNvZGVBdCgrK2kpICYgMHgwM0ZGKTtcbiAgICAgICAgICByZXNbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcbiAgICAgICAgICByZXNbcCsrXSA9ICgoYyA+PiAxMikgJiA2MykgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcbiAgICAgICAgICByZXNbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcbiAgICAgICAgICByZXNbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmMgPT09ICdoZXgnKSB7XG4gICAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgICBtc2cgPSAnMCcgKyBtc2c7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgICByZXMucHVzaChwYXJzZUludChtc2dbaV0gKyBtc2dbaSArIDFdLCAxNikpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgICAgcmVzW2ldID0gbXNnW2ldIHwgMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0hleCA9IHRvSGV4O1xuXG5mdW5jdGlvbiBodG9ubCh3KSB7XG4gIHZhciByZXMgPSAodyA+Pj4gMjQpIHxcbiAgICAgICAgICAgICgodyA+Pj4gOCkgJiAweGZmMDApIHxcbiAgICAgICAgICAgICgodyA8PCA4KSAmIDB4ZmYwMDAwKSB8XG4gICAgICAgICAgICAoKHcgJiAweGZmKSA8PCAyNCk7XG4gIHJldHVybiByZXMgPj4+IDA7XG59XG5leHBvcnRzLmh0b25sID0gaHRvbmw7XG5cbmZ1bmN0aW9uIHRvSGV4MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB3ID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09ICdsaXR0bGUnKVxuICAgICAgdyA9IGh0b25sKHcpO1xuICAgIHJlcyArPSB6ZXJvOCh3LnRvU3RyaW5nKDE2KSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMudG9IZXgzMiA9IHRvSGV4MzI7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG5leHBvcnRzLnplcm8yID0gemVybzI7XG5cbmZ1bmN0aW9uIHplcm84KHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSA3KVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNilcbiAgICByZXR1cm4gJzAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA1KVxuICAgIHJldHVybiAnMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA0KVxuICAgIHJldHVybiAnMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMylcbiAgICByZXR1cm4gJzAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAyKVxuICAgIHJldHVybiAnMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMDAwMDAwMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG5leHBvcnRzLnplcm84ID0gemVybzg7XG5cbmZ1bmN0aW9uIGpvaW4zMihtc2csIHN0YXJ0LCBlbmQsIGVuZGlhbikge1xuICB2YXIgbGVuID0gZW5kIC0gc3RhcnQ7XG4gIGFzc2VydChsZW4gJSA0ID09PSAwKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShsZW4gLyA0KTtcbiAgZm9yICh2YXIgaSA9IDAsIGsgPSBzdGFydDsgaSA8IHJlcy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIHc7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpXG4gICAgICB3ID0gKG1zZ1trXSA8PCAyNCkgfCAobXNnW2sgKyAxXSA8PCAxNikgfCAobXNnW2sgKyAyXSA8PCA4KSB8IG1zZ1trICsgM107XG4gICAgZWxzZVxuICAgICAgdyA9IChtc2dbayArIDNdIDw8IDI0KSB8IChtc2dbayArIDJdIDw8IDE2KSB8IChtc2dbayArIDFdIDw8IDgpIHwgbXNnW2tdO1xuICAgIHJlc1tpXSA9IHcgPj4+IDA7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuam9pbjMyID0gam9pbjMyO1xuXG5mdW5jdGlvbiBzcGxpdDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobXNnLmxlbmd0aCAqIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciBtID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgICByZXNba10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2sgKyAzXSA9IG0gJiAweGZmO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbayArIDNdID0gbSA+Pj4gMjQ7XG4gICAgICByZXNbayArIDJdID0gKG0gPj4+IDE2KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDFdID0gKG0gPj4+IDgpICYgMHhmZjtcbiAgICAgIHJlc1trXSA9IG0gJiAweGZmO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5zcGxpdDMyID0gc3BsaXQzMjtcblxuZnVuY3Rpb24gcm90cjMyKHcsIGIpIHtcbiAgcmV0dXJuICh3ID4+PiBiKSB8ICh3IDw8ICgzMiAtIGIpKTtcbn1cbmV4cG9ydHMucm90cjMyID0gcm90cjMyO1xuXG5mdW5jdGlvbiByb3RsMzIodywgYikge1xuICByZXR1cm4gKHcgPDwgYikgfCAodyA+Pj4gKDMyIC0gYikpO1xufVxuZXhwb3J0cy5yb3RsMzIgPSByb3RsMzI7XG5cbmZ1bmN0aW9uIHN1bTMyKGEsIGIpIHtcbiAgcmV0dXJuIChhICsgYikgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyID0gc3VtMzI7XG5cbmZ1bmN0aW9uIHN1bTMyXzMoYSwgYiwgYykge1xuICByZXR1cm4gKGEgKyBiICsgYykgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyXzMgPSBzdW0zMl8zO1xuXG5mdW5jdGlvbiBzdW0zMl80KGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIChhICsgYiArIGMgKyBkKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfNCA9IHN1bTMyXzQ7XG5cbmZ1bmN0aW9uIHN1bTMyXzUoYSwgYiwgYywgZCwgZSkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQgKyBlKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfNSA9IHN1bTMyXzU7XG5cbmZ1bmN0aW9uIHN1bTY0KGJ1ZiwgcG9zLCBhaCwgYWwpIHtcbiAgdmFyIGJoID0gYnVmW3Bvc107XG4gIHZhciBibCA9IGJ1Zltwb3MgKyAxXTtcblxuICB2YXIgbG8gPSAoYWwgKyBibCkgPj4+IDA7XG4gIHZhciBoaSA9IChsbyA8IGFsID8gMSA6IDApICsgYWggKyBiaDtcbiAgYnVmW3Bvc10gPSBoaSA+Pj4gMDtcbiAgYnVmW3BvcyArIDFdID0gbG87XG59XG5leHBvcnRzLnN1bTY0ID0gc3VtNjQ7XG5cbmZ1bmN0aW9uIHN1bTY0X2hpKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0X2hpID0gc3VtNjRfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0X2xvKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IGFsICsgYmw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfbG8gPSBzdW02NF9sbztcblxuZnVuY3Rpb24gc3VtNjRfNF9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBjYXJyeTtcbiAgcmV0dXJuIGhpID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF80X2hpID0gc3VtNjRfNF9oaTtcblxuZnVuY3Rpb24gc3VtNjRfNF9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNF9sbyA9IHN1bTY0XzRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzVfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZWwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGVsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBlaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzVfaGkgPSBzdW02NF81X2hpO1xuXG5mdW5jdGlvbiBzdW02NF81X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCwgZWgsIGVsKSB7XG4gIHZhciBsbyA9IGFsICsgYmwgKyBjbCArIGRsICsgZWw7XG5cbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF81X2xvID0gc3VtNjRfNV9sbztcblxuZnVuY3Rpb24gcm90cjY0X2hpKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFsIDw8ICgzMiAtIG51bSkpIHwgKGFoID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMucm90cjY0X2hpID0gcm90cjY0X2hpO1xuXG5mdW5jdGlvbiByb3RyNjRfbG8oYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWggPDwgKDMyIC0gbnVtKSkgfCAoYWwgPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5yb3RyNjRfbG8gPSByb3RyNjRfbG87XG5cbmZ1bmN0aW9uIHNocjY0X2hpKGFoLCBhbCwgbnVtKSB7XG4gIHJldHVybiBhaCA+Pj4gbnVtO1xufVxuZXhwb3J0cy5zaHI2NF9oaSA9IHNocjY0X2hpO1xuXG5mdW5jdGlvbiBzaHI2NF9sbyhhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhaCA8PCAoMzIgLSBudW0pKSB8IChhbCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnNocjY0X2xvID0gc2hyNjRfbG87XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgPDw9IDQ7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICByIHw9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnIC0gJ0YnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcgJiYgYyA8PSAyMikge1xuICAgICAgICByIHw9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByIHw9IGMgJiAweGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHIuc3RyaXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyByIGlzIEJOIHY0IGluc3RhbmNlXG4gICAgICAgIHIuc3RyaXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHIgaXMgQk4gdjUgaW5zdGFuY2VcbiAgICAgICAgci5fc3RyaXAoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBDaXBoZXJCYXNlIChoYXNoTW9kZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLmhhc2hNb2RlID0gdHlwZW9mIGhhc2hNb2RlID09PSAnc3RyaW5nJ1xuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHRoaXNbaGFzaE1vZGVdID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9IGVsc2Uge1xuICAgIHRoaXMuZmluYWwgPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH1cbiAgaWYgKHRoaXMuX2ZpbmFsKSB7XG4gICAgdGhpcy5fX2ZpbmFsID0gdGhpcy5fZmluYWxcbiAgICB0aGlzLl9maW5hbCA9IG51bGxcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBpbnB1dEVuYylcbiAgfVxuXG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSByZXR1cm4gdGhpc1xuXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jKVxuICB9XG5cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYWFkIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChkYXRhLCBfLCBuZXh0KSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgICAgdGhpcy5fdXBkYXRlKGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLl91cGRhdGUoZGF0YSkpXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIG5leHQoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuX19maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9XG5cbiAgZG9uZShlcnIpXG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9fZmluYWwoKSB8fCBCdWZmZXIuYWxsb2MoMClcbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RvU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlLCBlbmMsIGZpbikge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cblxuICBpZiAodGhpcy5fZW5jb2RpbmcgIT09IGVuYykgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuXG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluKSB7XG4gICAgb3V0ICs9IHRoaXMuX2RlY29kZXIuZW5kKClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaXBoZXJCYXNlXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfXJldHVybiBrZXlzO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG57XG4gIC8vIGF2b2lkIHNjb3BlIGNyZWVwLCB0aGUga2V5cyBhcnJheSBjYW4gdGhlbiBiZSBjb2xsZWN0ZWRcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG4gIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHBuYS5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbkR1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIHRoaXMuZW5kKCk7XG5cbiAgcG5hLm5leHRUaWNrKGNiLCBlcnIpO1xufTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vc2hhMVwiKSwgcmVxdWlyZShcIi4vaG1hY1wiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9zaGExXCIsIFwiLi9obWFjXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblx0ICAgIHZhciBNRDUgPSBDX2FsZ28uTUQ1O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFRoaXMga2V5IGRlcml2YXRpb24gZnVuY3Rpb24gaXMgbWVhbnQgdG8gY29uZm9ybSB3aXRoIEVWUF9CeXRlc1RvS2V5LlxuXHQgICAgICogd3d3Lm9wZW5zc2wub3JnL2RvY3MvY3J5cHRvL0VWUF9CeXRlc1RvS2V5Lmh0bWxcblx0ICAgICAqL1xuXHQgICAgdmFyIEV2cEtERiA9IENfYWxnby5FdnBLREYgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGtleVNpemUgVGhlIGtleSBzaXplIGluIHdvcmRzIHRvIGdlbmVyYXRlLiBEZWZhdWx0OiA0ICgxMjggYml0cylcblx0ICAgICAgICAgKiBAcHJvcGVydHkge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoIGFsZ29yaXRobSB0byB1c2UuIERlZmF1bHQ6IE1ENVxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpdGVyYXRpb25zIFRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0byBwZXJmb3JtLiBEZWZhdWx0OiAxXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGtleVNpemU6IDEyOC8zMixcblx0ICAgICAgICAgICAgaGFzaGVyOiBNRDUsXG5cdCAgICAgICAgICAgIGl0ZXJhdGlvbnM6IDFcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhlIGRlcml2YXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLkV2cEtERi5jcmVhdGUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IDggfSk7XG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLkV2cEtERi5jcmVhdGUoeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHtcblx0ICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRGVyaXZlcyBhIGtleSBmcm9tIGEgcGFzc3dvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBrZXkgPSBrZGYuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY29tcHV0ZTogZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0KSB7XG5cdCAgICAgICAgICAgIHZhciBibG9jaztcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2ZnID0gdGhpcy5jZmc7XG5cblx0ICAgICAgICAgICAgLy8gSW5pdCBoYXNoZXJcblx0ICAgICAgICAgICAgdmFyIGhhc2hlciA9IGNmZy5oYXNoZXIuY3JlYXRlKCk7XG5cblx0ICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIGRlcml2ZWRLZXkgPSBXb3JkQXJyYXkuY3JlYXRlKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkS2V5V29yZHMgPSBkZXJpdmVkS2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIga2V5U2l6ZSA9IGNmZy5rZXlTaXplO1xuXHQgICAgICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IGNmZy5pdGVyYXRpb25zO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleVxuXHQgICAgICAgICAgICB3aGlsZSAoZGVyaXZlZEtleVdvcmRzLmxlbmd0aCA8IGtleVNpemUpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChibG9jaykge1xuXHQgICAgICAgICAgICAgICAgICAgIGhhc2hlci51cGRhdGUoYmxvY2spO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgYmxvY2sgPSBoYXNoZXIudXBkYXRlKHBhc3N3b3JkKS5maW5hbGl6ZShzYWx0KTtcblx0ICAgICAgICAgICAgICAgIGhhc2hlci5yZXNldCgpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBJdGVyYXRpb25zXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGJsb2NrID0gaGFzaGVyLmZpbmFsaXplKGJsb2NrKTtcblx0ICAgICAgICAgICAgICAgICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgZGVyaXZlZEtleS5jb25jYXQoYmxvY2spO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGRlcml2ZWRLZXkuc2lnQnl0ZXMgPSBrZXlTaXplICogNDtcblxuXHQgICAgICAgICAgICByZXR1cm4gZGVyaXZlZEtleTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBEZXJpdmVzIGEga2V5IGZyb20gYSBwYXNzd29yZC5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuXG5cdCAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgY29tcHV0YXRpb24uXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5FdnBLREYocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5FdnBLREYocGFzc3dvcmQsIHNhbHQsIHsga2V5U2l6ZTogOCB9KTtcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuRXZwS0RGKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7XG5cdCAgICAgKi9cblx0ICAgIEMuRXZwS0RGID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0LCBjZmcpIHtcblx0ICAgICAgICByZXR1cm4gRXZwS0RGLmNyZWF0ZShjZmcpLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgfTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5FdnBLREY7XG5cbn0pKTsiLCIndXNlIHN0cmljdCdcblxuLy8gbGltaXQgb2YgQ3J5cHRvLmdldFJhbmRvbVZhbHVlcygpXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3J5cHRvL2dldFJhbmRvbVZhbHVlc1xudmFyIE1BWF9CWVRFUyA9IDY1NTM2XG5cbi8vIE5vZGUgc3VwcG9ydHMgcmVxdWVzdGluZyB1cCB0byB0aGlzIG51bWJlciBvZiBieXRlc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvbWFzdGVyL2xpYi9pbnRlcm5hbC9jcnlwdG8vcmFuZG9tLmpzI0w0OFxudmFyIE1BWF9VSU5UMzIgPSA0Mjk0OTY3Mjk1XG5cbmZ1bmN0aW9uIG9sZEJyb3dzZXIgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuXFxuVXNlIENocm9tZSwgRmlyZWZveCBvciBJbnRlcm5ldCBFeHBsb3JlciAxMScpXG59XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGNyeXB0byA9IGdsb2JhbC5jcnlwdG8gfHwgZ2xvYmFsLm1zQ3J5cHRvXG5cbmlmIChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJhbmRvbUJ5dGVzXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IG9sZEJyb3dzZXJcbn1cblxuZnVuY3Rpb24gcmFuZG9tQnl0ZXMgKHNpemUsIGNiKSB7XG4gIC8vIHBoYW50b21qcyBuZWVkcyB0byB0aHJvd1xuICBpZiAoc2l6ZSA+IE1BWF9VSU5UMzIpIHRocm93IG5ldyBSYW5nZUVycm9yKCdyZXF1ZXN0ZWQgdG9vIG1hbnkgcmFuZG9tIGJ5dGVzJylcblxuICB2YXIgYnl0ZXMgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSlcblxuICBpZiAoc2l6ZSA+IDApIHsgIC8vIGdldFJhbmRvbVZhbHVlcyBmYWlscyBvbiBJRSBpZiBzaXplID09IDBcbiAgICBpZiAoc2l6ZSA+IE1BWF9CWVRFUykgeyAvLyB0aGlzIGlzIHRoZSBtYXggYnl0ZXMgY3J5cHRvLmdldFJhbmRvbVZhbHVlc1xuICAgICAgLy8gY2FuIGRvIGF0IG9uY2Ugc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS93aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlc1xuICAgICAgZm9yICh2YXIgZ2VuZXJhdGVkID0gMDsgZ2VuZXJhdGVkIDwgc2l6ZTsgZ2VuZXJhdGVkICs9IE1BWF9CWVRFUykge1xuICAgICAgICAvLyBidWZmZXIuc2xpY2UgYXV0b21hdGljYWxseSBjaGVja3MgaWYgdGhlIGVuZCBpcyBwYXN0IHRoZSBlbmQgb2ZcbiAgICAgICAgLy8gdGhlIGJ1ZmZlciBzbyB3ZSBkb24ndCBoYXZlIHRvIGhlcmVcbiAgICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcy5zbGljZShnZW5lcmF0ZWQsIGdlbmVyYXRlZCArIE1BWF9CWVRFUykpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMpXG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNiKG51bGwsIGJ5dGVzKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBjb2RlcyA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVFcnJvclR5cGUoY29kZSwgbWVzc2FnZSwgQmFzZSkge1xuICBpZiAoIUJhc2UpIHtcbiAgICBCYXNlID0gRXJyb3I7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIE5vZGVFcnJvciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9CYXNlKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoTm9kZUVycm9yLCBfQmFzZSk7XG5cbiAgICBmdW5jdGlvbiBOb2RlRXJyb3IoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgcmV0dXJuIF9CYXNlLmNhbGwodGhpcywgZ2V0TWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKSkgfHwgdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gTm9kZUVycm9yO1xuICB9KEJhc2UpO1xuXG4gIE5vZGVFcnJvci5wcm90b3R5cGUubmFtZSA9IEJhc2UubmFtZTtcbiAgTm9kZUVycm9yLnByb3RvdHlwZS5jb2RlID0gY29kZTtcbiAgY29kZXNbY29kZV0gPSBOb2RlRXJyb3I7XG59IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL3YxMC44LjAvbGliL2ludGVybmFsL2Vycm9ycy5qc1xuXG5cbmZ1bmN0aW9uIG9uZU9mKGV4cGVjdGVkLCB0aGluZykge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3RlZCkpIHtcbiAgICB2YXIgbGVuID0gZXhwZWN0ZWQubGVuZ3RoO1xuICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGkpO1xuICAgIH0pO1xuXG4gICAgaWYgKGxlbiA+IDIpIHtcbiAgICAgIHJldHVybiBcIm9uZSBvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWQuc2xpY2UoMCwgbGVuIC0gMSkuam9pbignLCAnKSwgXCIsIG9yIFwiKSArIGV4cGVjdGVkW2xlbiAtIDFdO1xuICAgIH0gZWxzZSBpZiAobGVuID09PSAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkWzBdLCBcIiBvciBcIikuY29uY2F0KGV4cGVjdGVkWzFdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwib2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkWzBdKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwib2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KFN0cmluZyhleHBlY3RlZCkpO1xuICB9XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zdGFydHNXaXRoXG5cblxuZnVuY3Rpb24gc3RhcnRzV2l0aChzdHIsIHNlYXJjaCwgcG9zKSB7XG4gIHJldHVybiBzdHIuc3Vic3RyKCFwb3MgfHwgcG9zIDwgMCA/IDAgOiArcG9zLCBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvZW5kc1dpdGhcblxuXG5mdW5jdGlvbiBlbmRzV2l0aChzdHIsIHNlYXJjaCwgdGhpc19sZW4pIHtcbiAgaWYgKHRoaXNfbGVuID09PSB1bmRlZmluZWQgfHwgdGhpc19sZW4gPiBzdHIubGVuZ3RoKSB7XG4gICAgdGhpc19sZW4gPSBzdHIubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIHN0ci5zdWJzdHJpbmcodGhpc19sZW4gLSBzZWFyY2gubGVuZ3RoLCB0aGlzX2xlbikgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2luY2x1ZGVzXG5cblxuZnVuY3Rpb24gaW5jbHVkZXMoc3RyLCBzZWFyY2gsIHN0YXJ0KSB7XG4gIGlmICh0eXBlb2Ygc3RhcnQgIT09ICdudW1iZXInKSB7XG4gICAgc3RhcnQgPSAwO1xuICB9XG5cbiAgaWYgKHN0YXJ0ICsgc2VhcmNoLmxlbmd0aCA+IHN0ci5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0ci5pbmRleE9mKHNlYXJjaCwgc3RhcnQpICE9PSAtMTtcbiAgfVxufVxuXG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9JTlZBTElEX09QVF9WQUxVRScsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gJ1RoZSB2YWx1ZSBcIicgKyB2YWx1ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCInICsgbmFtZSArICdcIic7XG59LCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9BUkdfVFlQRScsIGZ1bmN0aW9uIChuYW1lLCBleHBlY3RlZCwgYWN0dWFsKSB7XG4gIC8vIGRldGVybWluZXI6ICdtdXN0IGJlJyBvciAnbXVzdCBub3QgYmUnXG4gIHZhciBkZXRlcm1pbmVyO1xuXG4gIGlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnICYmIHN0YXJ0c1dpdGgoZXhwZWN0ZWQsICdub3QgJykpIHtcbiAgICBkZXRlcm1pbmVyID0gJ211c3Qgbm90IGJlJztcbiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLnJlcGxhY2UoL15ub3QgLywgJycpO1xuICB9IGVsc2Uge1xuICAgIGRldGVybWluZXIgPSAnbXVzdCBiZSc7XG4gIH1cblxuICB2YXIgbXNnO1xuXG4gIGlmIChlbmRzV2l0aChuYW1lLCAnIGFyZ3VtZW50JykpIHtcbiAgICAvLyBGb3IgY2FzZXMgbGlrZSAnZmlyc3QgYXJndW1lbnQnXG4gICAgbXNnID0gXCJUaGUgXCIuY29uY2F0KG5hbWUsIFwiIFwiKS5jb25jYXQoZGV0ZXJtaW5lciwgXCIgXCIpLmNvbmNhdChvbmVPZihleHBlY3RlZCwgJ3R5cGUnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHR5cGUgPSBpbmNsdWRlcyhuYW1lLCAnLicpID8gJ3Byb3BlcnR5JyA6ICdhcmd1bWVudCc7XG4gICAgbXNnID0gXCJUaGUgXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIgXCIpLmNvbmNhdCh0eXBlLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9XG5cbiAgbXNnICs9IFwiLiBSZWNlaXZlZCB0eXBlIFwiLmNvbmNhdCh0eXBlb2YgYWN0dWFsKTtcbiAgcmV0dXJuIG1zZztcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YnLCAnc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQnLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gJ1RoZSAnICsgbmFtZSArICcgbWV0aG9kIGlzIG5vdCBpbXBsZW1lbnRlZCc7XG59KTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UnLCAnUHJlbWF0dXJlIGNsb3NlJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fREVTVFJPWUVEJywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuICdDYW5ub3QgY2FsbCAnICsgbmFtZSArICcgYWZ0ZXIgYSBzdHJlYW0gd2FzIGRlc3Ryb3llZCc7XG59KTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX01VTFRJUExFX0NBTExCQUNLJywgJ0NhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX0NBTk5PVF9QSVBFJywgJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQnLCAnd3JpdGUgYWZ0ZXIgZW5kJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fTlVMTF9WQUxVRVMnLCAnTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nLCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfVU5LTk9XTl9FTkNPRElORycsIGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuICdVbmtub3duIGVuY29kaW5nOiAnICsgYXJnO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCcsICdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpO1xubW9kdWxlLmV4cG9ydHMuY29kZXMgPSBjb2RlcztcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cbid1c2Ugc3RyaWN0Jztcbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcblxudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnJlcXVpcmUoJ2luaGVyaXRzJykoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbntcbiAgLy8gQWxsb3cgdGhlIGtleXMgYXJyYXkgdG8gYmUgR0MnZWQuXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuXG4gIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcbiAgICBpZiAob3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICAgIGlmIChvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xuICAgIH1cbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlQnVmZmVyJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVMZW5ndGgnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmxlbmd0aDtcbiAgfVxufSk7IC8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcblxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIElmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLCB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuOyAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuXG4gIHByb2Nlc3MubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG5cblxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7IiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbi8vIHByb3RvdHlwZSBjbGFzcyBmb3IgaGFzaCBmdW5jdGlvbnNcbmZ1bmN0aW9uIEhhc2ggKGJsb2NrU2l6ZSwgZmluYWxTaXplKSB7XG4gIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jKGJsb2NrU2l6ZSlcbiAgdGhpcy5fZmluYWxTaXplID0gZmluYWxTaXplXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9sZW4gPSAwXG59XG5cbkhhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jKVxuICB9XG5cbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuX2Jsb2NrU2l6ZVxuICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGhcbiAgdmFyIGFjY3VtID0gdGhpcy5fbGVuXG5cbiAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbGVuZ3RoOykge1xuICAgIHZhciBhc3NpZ25lZCA9IGFjY3VtICUgYmxvY2tTaXplXG4gICAgdmFyIHJlbWFpbmRlciA9IE1hdGgubWluKGxlbmd0aCAtIG9mZnNldCwgYmxvY2tTaXplIC0gYXNzaWduZWQpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbWFpbmRlcjsgaSsrKSB7XG4gICAgICBibG9ja1thc3NpZ25lZCArIGldID0gZGF0YVtvZmZzZXQgKyBpXVxuICAgIH1cblxuICAgIGFjY3VtICs9IHJlbWFpbmRlclxuICAgIG9mZnNldCArPSByZW1haW5kZXJcblxuICAgIGlmICgoYWNjdW0gJSBibG9ja1NpemUpID09PSAwKSB7XG4gICAgICB0aGlzLl91cGRhdGUoYmxvY2spXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fbGVuICs9IGxlbmd0aFxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHZhciByZW0gPSB0aGlzLl9sZW4gJSB0aGlzLl9ibG9ja1NpemVcblxuICB0aGlzLl9ibG9ja1tyZW1dID0gMHg4MFxuXG4gIC8vIHplcm8gKHJlbSArIDEpIHRyYWlsaW5nIGJpdHMsIHdoZXJlIChyZW0gKyAxKSBpcyB0aGUgc21hbGxlc3RcbiAgLy8gbm9uLW5lZ2F0aXZlIHNvbHV0aW9uIHRvIHRoZSBlcXVhdGlvbiAobGVuZ3RoICsgMSArIChyZW0gKyAxKSkgPT09IGZpbmFsU2l6ZSBtb2QgYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgcmVtICsgMSlcblxuICBpZiAocmVtID49IHRoaXMuX2ZpbmFsU2l6ZSkge1xuICAgIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgICB0aGlzLl9ibG9jay5maWxsKDApXG4gIH1cblxuICB2YXIgYml0cyA9IHRoaXMuX2xlbiAqIDhcblxuICAvLyB1aW50MzJcbiAgaWYgKGJpdHMgPD0gMHhmZmZmZmZmZikge1xuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoYml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcblxuICAvLyB1aW50NjRcbiAgfSBlbHNlIHtcbiAgICB2YXIgbG93Qml0cyA9IChiaXRzICYgMHhmZmZmZmZmZikgPj4+IDBcbiAgICB2YXIgaGlnaEJpdHMgPSAoYml0cyAtIGxvd0JpdHMpIC8gMHgxMDAwMDAwMDBcblxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoaGlnaEJpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDgpXG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShsb3dCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuICB9XG5cbiAgdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2goKVxuXG4gIHJldHVybiBlbmMgPyBoYXNoLnRvU3RyaW5nKGVuYykgOiBoYXNoXG59XG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IHN1YmNsYXNzJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoXG4iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYztcblxuXHQgICAgLyoqXG5cdCAgICAgKiBCYXNlNjQgZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBCYXNlNjQgPSBDX2VuYy5CYXNlNjQgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgQmFzZTY0IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBCYXNlNjQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgYmFzZTY0U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgbWFwID0gdGhpcy5fbWFwO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIHdvcmRBcnJheS5jbGFtcCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIGJhc2U2NENoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJ5dGUxID0gKHdvcmRzW2kgPj4+IDJdICAgICAgID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICAgICAgICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIHZhciBieXRlMiA9ICh3b3Jkc1soaSArIDEpID4+PiAyXSA+Pj4gKDI0IC0gKChpICsgMSkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICB2YXIgYnl0ZTMgPSAod29yZHNbKGkgKyAyKSA+Pj4gMl0gPj4+ICgyNCAtICgoaSArIDIpICUgNCkgKiA4KSkgJiAweGZmO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgdHJpcGxldCA9IChieXRlMSA8PCAxNikgfCAoYnl0ZTIgPDwgOCkgfCBieXRlMztcblxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IChqIDwgNCkgJiYgKGkgKyBqICogMC43NSA8IHNpZ0J5dGVzKTsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChtYXAuY2hhckF0KCh0cmlwbGV0ID4+PiAoNiAqICgzIC0gaikpKSAmIDB4M2YpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpO1xuXHQgICAgICAgICAgICBpZiAocGFkZGluZ0NoYXIpIHtcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChiYXNlNjRDaGFycy5sZW5ndGggJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChwYWRkaW5nQ2hhcik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gYmFzZTY0Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgQmFzZTY0IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0U3RyIFRoZSBCYXNlNjQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5CYXNlNjQucGFyc2UoYmFzZTY0U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGJhc2U2NFN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGJhc2U2NFN0ckxlbmd0aCA9IGJhc2U2NFN0ci5sZW5ndGg7XG5cdCAgICAgICAgICAgIHZhciBtYXAgPSB0aGlzLl9tYXA7XG5cdCAgICAgICAgICAgIHZhciByZXZlcnNlTWFwID0gdGhpcy5fcmV2ZXJzZU1hcDtcblxuXHQgICAgICAgICAgICBpZiAoIXJldmVyc2VNYXApIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXZlcnNlTWFwID0gdGhpcy5fcmV2ZXJzZU1hcCA9IFtdO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWFwLmxlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2VNYXBbbWFwLmNoYXJDb2RlQXQoaildID0gajtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJZ25vcmUgcGFkZGluZ1xuXHQgICAgICAgICAgICB2YXIgcGFkZGluZ0NoYXIgPSBtYXAuY2hhckF0KDY0KTtcblx0ICAgICAgICAgICAgaWYgKHBhZGRpbmdDaGFyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcGFkZGluZ0luZGV4ID0gYmFzZTY0U3RyLmluZGV4T2YocGFkZGluZ0NoYXIpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHBhZGRpbmdJbmRleCAhPT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgICAgICBiYXNlNjRTdHJMZW5ndGggPSBwYWRkaW5nSW5kZXg7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHJldHVybiBwYXJzZUxvb3AoYmFzZTY0U3RyLCBiYXNlNjRTdHJMZW5ndGgsIHJldmVyc2VNYXApO1xuXG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9tYXA6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSdcblx0ICAgIH07XG5cblx0ICAgIGZ1bmN0aW9uIHBhcnNlTG9vcChiYXNlNjRTdHIsIGJhc2U2NFN0ckxlbmd0aCwgcmV2ZXJzZU1hcCkge1xuXHQgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgdmFyIG5CeXRlcyA9IDA7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmFzZTY0U3RyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIGlmIChpICUgNCkge1xuXHQgICAgICAgICAgICAgIHZhciBiaXRzMSA9IHJldmVyc2VNYXBbYmFzZTY0U3RyLmNoYXJDb2RlQXQoaSAtIDEpXSA8PCAoKGkgJSA0KSAqIDIpO1xuXHQgICAgICAgICAgICAgIHZhciBiaXRzMiA9IHJldmVyc2VNYXBbYmFzZTY0U3RyLmNoYXJDb2RlQXQoaSldID4+PiAoNiAtIChpICUgNCkgKiAyKTtcblx0ICAgICAgICAgICAgICB2YXIgYml0c0NvbWJpbmVkID0gYml0czEgfCBiaXRzMjtcblx0ICAgICAgICAgICAgICB3b3Jkc1tuQnl0ZXMgPj4+IDJdIHw9IGJpdHNDb21iaW5lZCA8PCAoMjQgLSAobkJ5dGVzICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgICBuQnl0ZXMrKztcblx0ICAgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgbkJ5dGVzKTtcblx0ICAgIH1cblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5lbmMuQmFzZTY0O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKE1hdGgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBDb25zdGFudHMgdGFibGVcblx0ICAgIHZhciBUID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgY29uc3RhbnRzXG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuXHQgICAgICAgICAgICBUW2ldID0gKE1hdGguYWJzKE1hdGguc2luKGkgKyAxKSkgKiAweDEwMDAwMDAwMCkgfCAwO1xuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogTUQ1IGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgTUQ1ID0gQ19hbGdvLk1ENSA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSxcblx0ICAgICAgICAgICAgICAgIDB4OThiYWRjZmUsIDB4MTAzMjU0NzZcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIG9mZnNldF9pID0gb2Zmc2V0ICsgaTtcblx0ICAgICAgICAgICAgICAgIHZhciBNX29mZnNldF9pID0gTVtvZmZzZXRfaV07XG5cblx0ICAgICAgICAgICAgICAgIE1bb2Zmc2V0X2ldID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgOCkgIHwgKE1fb2Zmc2V0X2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCAyNCkgfCAoTV9vZmZzZXRfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMCAgPSBNW29mZnNldCArIDBdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMSAgPSBNW29mZnNldCArIDFdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMiAgPSBNW29mZnNldCArIDJdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMyAgPSBNW29mZnNldCArIDNdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNCAgPSBNW29mZnNldCArIDRdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNSAgPSBNW29mZnNldCArIDVdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNiAgPSBNW29mZnNldCArIDZdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNyAgPSBNW29mZnNldCArIDddO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfOCAgPSBNW29mZnNldCArIDhdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfOSAgPSBNW29mZnNldCArIDldO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTAgPSBNW29mZnNldCArIDEwXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzExID0gTVtvZmZzZXQgKyAxMV07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMiA9IE1bb2Zmc2V0ICsgMTJdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTMgPSBNW29mZnNldCArIDEzXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzE0ID0gTVtvZmZzZXQgKyAxNF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xNSA9IE1bb2Zmc2V0ICsgMTVdO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFsYmVzXG5cdCAgICAgICAgICAgIHZhciBhID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIGIgPSBIWzFdO1xuXHQgICAgICAgICAgICB2YXIgYyA9IEhbMl07XG5cdCAgICAgICAgICAgIHZhciBkID0gSFszXTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfMCwgIDcsICBUWzBdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEsICAxMiwgVFsxXSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8yLCAgMTcsIFRbMl0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMywgIDIyLCBUWzNdKTtcblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzQsICA3LCAgVFs0XSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF81LCAgMTIsIFRbNV0pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgIDE3LCBUWzZdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzcsICAyMiwgVFs3XSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF84LCAgNywgIFRbOF0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfOSwgIDEyLCBUWzldKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzEwLCAxNywgVFsxMF0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTEsIDIyLCBUWzExXSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF8xMiwgNywgIFRbMTJdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEzLCAxMiwgVFsxM10pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTQsIDE3LCBUWzE0XSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8xNSwgMjIsIFRbMTVdKTtcblxuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDUsICBUWzE2XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF82LCAgOSwgIFRbMTddKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzExLCAxNCwgVFsxOF0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfMCwgIDIwLCBUWzE5XSk7XG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF81LCAgNSwgIFRbMjBdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEwLCA5LCAgVFsyMV0pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMTUsIDE0LCBUWzIyXSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF80LCAgMjAsIFRbMjNdKTtcblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA1LCAgVFsyNF0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMTQsIDksICBUWzI1XSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8zLCAgMTQsIFRbMjZdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzgsICAyMCwgVFsyN10pO1xuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfMTMsIDUsICBUWzI4XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8yLCAgOSwgIFRbMjldKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNCwgVFszMF0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfMTIsIDIwLCBUWzMxXSk7XG5cblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzUsICA0LCAgVFszMl0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfOCwgIDExLCBUWzMzXSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTYsIFRbMzRdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE0LCAyMywgVFszNV0pO1xuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDQsICBUWzM2XSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF80LCAgMTEsIFRbMzddKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNiwgVFszOF0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTAsIDIzLCBUWzM5XSk7XG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF8xMywgNCwgIFRbNDBdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzAsICAxMSwgVFs0MV0pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE2LCBUWzQyXSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF82LCAgMjMsIFRbNDNdKTtcblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA0LCAgVFs0NF0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTIsIDExLCBUWzQ1XSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xNSwgMTYsIFRbNDZdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzIsICAyMywgVFs0N10pO1xuXG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF8wLCAgNiwgIFRbNDhdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzcsICAxMCwgVFs0OV0pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTQsIDE1LCBUWzUwXSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF81LCAgMjEsIFRbNTFdKTtcblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEyLCA2LCAgVFs1Ml0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMywgIDEwLCBUWzUzXSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8xMCwgMTUsIFRbNTRdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEsICAyMSwgVFs1NV0pO1xuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfOCwgIDYsICBUWzU2XSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8xNSwgMTAsIFRbNTddKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzYsICAxNSwgVFs1OF0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTMsIDIxLCBUWzU5XSk7XG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF80LCAgNiwgIFRbNjBdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzExLCAxMCwgVFs2MV0pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMiwgIDE1LCBUWzYyXSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF85LCAgMjEsIFRbNjNdKTtcblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbEggPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7XG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsTCA9IG5CaXRzVG90YWw7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgOCkgIHwgKG5CaXRzVG90YWxIID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgMjQpIHwgKG5CaXRzVG90YWxIID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSAoXG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCA4KSAgfCAobkJpdHNUb3RhbEwgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCAyNCkgfCAobkJpdHNUb3RhbEwgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICApO1xuXG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSAoZGF0YVdvcmRzLmxlbmd0aCArIDEpICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5faGFzaDtcblx0ICAgICAgICAgICAgdmFyIEggPSBoYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIEhfaSA9IEhbaV07XG5cblx0ICAgICAgICAgICAgICAgIEhbaV0gPSAoKChIX2kgPDwgOCkgIHwgKEhfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChIX2kgPDwgMjQpIHwgKEhfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIEZGKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoKGIgJiBjKSB8ICh+YiAmIGQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIEdHKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoKGIgJiBkKSB8IChjICYgfmQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIEhIKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoYiBeIGMgXiBkKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIElJKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoYyBeIChiIHwgfmQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5NRDUoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLk1ENSh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLk1ENSA9IEhhc2hlci5fY3JlYXRlSGVscGVyKE1ENSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjTUQ1KG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY01ENSA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihNRDUpO1xuXHR9KE1hdGgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5NRDU7XG5cbn0pKTsiLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG5mdW5jdGlvbiBIYXNoIChoYXNoKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gaGFzaFxufVxuXG5pbmhlcml0cyhIYXNoLCBCYXNlKVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbn1cblxuSGFzaC5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faGFzaC5kaWdlc3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2ggKGFsZykge1xuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG5ldyBNRDUoKVxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSByZXR1cm4gbmV3IFJJUEVNRDE2MCgpXG5cbiAgcmV0dXJuIG5ldyBIYXNoKHNoYShhbGcpKVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFIgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgPyBSZWZsZWN0IDogbnVsbFxudmFyIFJlZmxlY3RBcHBseSA9IFIgJiYgdHlwZW9mIFIuYXBwbHkgPT09ICdmdW5jdGlvbidcbiAgPyBSLmFwcGx5XG4gIDogZnVuY3Rpb24gUmVmbGVjdEFwcGx5KHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpIHtcbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodGFyZ2V0LCByZWNlaXZlciwgYXJncyk7XG4gIH1cblxudmFyIFJlZmxlY3RPd25LZXlzXG5pZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gUi5vd25LZXlzXG59IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KVxuICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpO1xuICB9O1xufSBlbHNlIHtcbiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gUHJvY2Vzc0VtaXRXYXJuaW5nKHdhcm5pbmcpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSBjb25zb2xlLndhcm4od2FybmluZyk7XG59XG5cbnZhciBOdW1iZXJJc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBOdW1iZXJJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIEV2ZW50RW1pdHRlci5pbml0LmNhbGwodGhpcyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbm1vZHVsZS5leHBvcnRzLm9uY2UgPSBvbmNlO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gX2dldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9IF9nZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJndW1lbnRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgc3RhdGUgPSB7IGZpcmVkOiBmYWxzZSwgd3JhcEZuOiB1bmRlZmluZWQsIHRhcmdldDogdGFyZ2V0LCB0eXBlOiB0eXBlLCBsaXN0ZW5lcjogbGlzdGVuZXIgfTtcbiAgdmFyIHdyYXBwZWQgPSBvbmNlV3JhcHBlci5iaW5kKHN0YXRlKTtcbiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICBzdGF0ZS53cmFwRm4gPSB3cmFwcGVkO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgdGhpcy5vbih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb25jZShlbWl0dGVyLCBuYW1lKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZnVuY3Rpb24gZXZlbnRMaXN0ZW5lcigpIHtcbiAgICAgIGlmIChlcnJvckxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBlcnJvckxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9O1xuICAgIHZhciBlcnJvckxpc3RlbmVyO1xuXG4gICAgLy8gQWRkaW5nIGFuIGVycm9yIGxpc3RlbmVyIGlzIG5vdCBvcHRpb25hbCBiZWNhdXNlXG4gICAgLy8gaWYgYW4gZXJyb3IgaXMgdGhyb3duIG9uIGFuIGV2ZW50IGVtaXR0ZXIgd2UgY2Fubm90XG4gICAgLy8gZ3VhcmFudGVlIHRoYXQgdGhlIGFjdHVhbCBldmVudCB3ZSBhcmUgd2FpdGluZyB3aWxsXG4gICAgLy8gYmUgZmlyZWQuIFRoZSByZXN1bHQgY291bGQgYmUgYSBzaWxlbnQgd2F5IHRvIGNyZWF0ZVxuICAgIC8vIG1lbW9yeSBvciBmaWxlIGRlc2NyaXB0b3IgbGVha3MsIHdoaWNoIGlzIHNvbWV0aGluZ1xuICAgIC8vIHdlIHNob3VsZCBhdm9pZC5cbiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykge1xuICAgICAgZXJyb3JMaXN0ZW5lciA9IGZ1bmN0aW9uIGVycm9yTGlzdGVuZXIoZXJyKSB7XG4gICAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobmFtZSwgZXZlbnRMaXN0ZW5lcik7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfTtcblxuICAgICAgZW1pdHRlci5vbmNlKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIGVtaXR0ZXIub25jZShuYW1lLCBldmVudExpc3RlbmVyKTtcbiAgfSk7XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZyB8fCBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgZW5jb2RpbmcgPSAnJyArIGVuY29kaW5nO1xuICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOmNhc2UgJ3V0ZjgnOmNhc2UgJ3V0Zi04JzpjYXNlICdhc2NpaSc6Y2FzZSAnYmluYXJ5JzpjYXNlICdiYXNlNjQnOmNhc2UgJ3VjczInOmNhc2UgJ3Vjcy0yJzpjYXNlICd1dGYxNmxlJzpjYXNlICd1dGYtMTZsZSc6Y2FzZSAncmF3JzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgaWYgKCFlbmMpIHJldHVybiAndXRmOCc7XG4gIHZhciByZXRyaWVkO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuICd1dGY4JztcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiAndXRmMTZsZSc7XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuICdsYXRpbjEnO1xuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBlbmM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAocmV0cmllZCkgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgICAgZW5jID0gKCcnICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXRyaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZVxuLy8gbW9kdWxlcyBtb25rZXktcGF0Y2ggaXQgdG8gc3VwcG9ydCBhZGRpdGlvbmFsIGVuY29kaW5nc1xuZnVuY3Rpb24gbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XG4gIGlmICh0eXBlb2YgbmVuYyAhPT0gJ3N0cmluZycgJiYgKEJ1ZmZlci5pc0VuY29kaW5nID09PSBpc0VuY29kaW5nIHx8ICFpc0VuY29kaW5nKGVuYykpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmMpO1xuICByZXR1cm4gbmVuYyB8fCBlbmM7XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy5cbmV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IFN0cmluZ0RlY29kZXI7XG5mdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSBub3JtYWxpemVFbmNvZGluZyhlbmNvZGluZyk7XG4gIHZhciBuYjtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICB0aGlzLmVuZCA9IHV0ZjE2RW5kO1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHRoaXMudGV4dCA9IGJhc2U2NFRleHQ7XG4gICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgIG5iID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gc2ltcGxlV3JpdGU7XG4gICAgICB0aGlzLmVuZCA9IHNpbXBsZUVuZDtcbiAgICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICB0aGlzLmxhc3RDaGFyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5iKTtcbn1cblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gIHZhciByO1xuICB2YXIgaTtcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICByID0gdGhpcy5maWxsTGFzdChidWYpO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcbiAgICBpID0gdGhpcy5sYXN0TmVlZDtcbiAgICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpID0gMDtcbiAgfVxuICBpZiAoaSA8IGJ1Zi5sZW5ndGgpIHJldHVybiByID8gciArIHRoaXMudGV4dChidWYsIGkpIDogdGhpcy50ZXh0KGJ1ZiwgaSk7XG4gIHJldHVybiByIHx8ICcnO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gdXRmOEVuZDtcblxuLy8gUmV0dXJucyBvbmx5IGNvbXBsZXRlIGNoYXJhY3RlcnMgaW4gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDtcblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBwYXJ0aWFsIG5vbi1VVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59O1xuXG4vLyBDaGVja3MgdGhlIHR5cGUgb2YgYSBVVEYtOCBieXRlLCB3aGV0aGVyIGl0J3MgQVNDSUksIGEgbGVhZGluZyBieXRlLCBvciBhXG4vLyBjb250aW51YXRpb24gYnl0ZS4gSWYgYW4gaW52YWxpZCBieXRlIGlzIGRldGVjdGVkLCAtMiBpcyByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkge1xuICBpZiAoYnl0ZSA8PSAweDdGKSByZXR1cm4gMDtlbHNlIGlmIChieXRlID4+IDUgPT09IDB4MDYpIHJldHVybiAyO2Vsc2UgaWYgKGJ5dGUgPj4gNCA9PT0gMHgwRSkgcmV0dXJuIDM7ZWxzZSBpZiAoYnl0ZSA+PiAzID09PSAweDFFKSByZXR1cm4gNDtcbiAgcmV0dXJuIGJ5dGUgPj4gNiA9PT0gMHgwMiA/IC0xIDogLTI7XG59XG5cbi8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW5cbi8vIGluY29tcGxldGUgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIuIFRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgKDIsIDMsIG9yIDQpXG4vLyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIFVURi04IGNoYXJhY3RlciAoaWYgYXBwbGljYWJsZSkgYXJlIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrSW5jb21wbGV0ZShzZWxmLCBidWYsIGkpIHtcbiAgdmFyIGogPSBidWYubGVuZ3RoIC0gMTtcbiAgaWYgKGogPCBpKSByZXR1cm4gMDtcbiAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDE7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDI7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHtcbiAgICAgIGlmIChuYiA9PT0gMikgbmIgPSAwO2Vsc2Ugc2VsZi5sYXN0TmVlZCA9IG5iIC0gMztcbiAgICB9XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG4vLyBWYWxpZGF0ZXMgYXMgbWFueSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgYXNcbi8vIG5lZWRlZCBvciBhcmUgYXZhaWxhYmxlLiBJZiB3ZSBzZWUgYSBub24tY29udGludWF0aW9uIGJ5dGUgd2hlcmUgd2UgZXhwZWN0XG4vLyBvbmUsIHdlIFwicmVwbGFjZVwiIHRoZSB2YWxpZGF0ZWQgY29udGludWF0aW9uIGJ5dGVzIHdlJ3ZlIHNlZW4gc28gZmFyIHdpdGhcbi8vIGEgc2luZ2xlIFVURi04IHJlcGxhY2VtZW50IGNoYXJhY3RlciAoJ1xcdWZmZmQnKSwgdG8gbWF0Y2ggdjgncyBVVEYtOCBkZWNvZGluZ1xuLy8gYmVoYXZpb3IuIFRoZSBjb250aW51YXRpb24gYnl0ZSBjaGVjayBpcyBpbmNsdWRlZCB0aHJlZSB0aW1lcyBpbiB0aGUgY2FzZVxuLy8gd2hlcmUgYWxsIG9mIHRoZSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgY2hhcmFjdGVyIGV4aXN0IGluIHRoZSBzYW1lIGJ1ZmZlci5cbi8vIEl0IGlzIGFsc28gZG9uZSB0aGlzIHdheSBhcyBhIHNsaWdodCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIGxvb3AuXG5mdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYsIGJ1ZiwgcCkge1xuICBpZiAoKGJ1ZlswXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgc2VsZi5sYXN0TmVlZCA9IDA7XG4gICAgcmV0dXJuICdcXHVmZmZkJztcbiAgfVxuICBpZiAoc2VsZi5sYXN0TmVlZCA+IDEgJiYgYnVmLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoKGJ1ZlsxXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICBzZWxmLmxhc3ROZWVkID0gMTtcbiAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgfVxuICAgIGlmIChzZWxmLmxhc3ROZWVkID4gMiAmJiBidWYubGVuZ3RoID4gMikge1xuICAgICAgaWYgKChidWZbMl0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICBzZWxmLmxhc3ROZWVkID0gMjtcbiAgICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyLlxuZnVuY3Rpb24gdXRmOEZpbGxMYXN0KGJ1Zikge1xuICB2YXIgcCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgdmFyIHIgPSB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHRoaXMsIGJ1ZiwgcCk7XG4gIGlmIChyICE9PSB1bmRlZmluZWQpIHJldHVybiByO1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59XG5cbi8vIFJldHVybnMgYWxsIGNvbXBsZXRlIFVURi04IGNoYXJhY3RlcnMgaW4gYSBCdWZmZXIuIElmIHRoZSBCdWZmZXIgZW5kZWQgb24gYVxuLy8gcGFydGlhbCBjaGFyYWN0ZXIsIHRoZSBjaGFyYWN0ZXIncyBieXRlcyBhcmUgYnVmZmVyZWQgdW50aWwgdGhlIHJlcXVpcmVkXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXJlIGF2YWlsYWJsZS5cbmZ1bmN0aW9uIHV0ZjhUZXh0KGJ1ZiwgaSkge1xuICB2YXIgdG90YWwgPSB1dGY4Q2hlY2tJbmNvbXBsZXRlKHRoaXMsIGJ1ZiwgaSk7XG4gIGlmICghdGhpcy5sYXN0TmVlZCkgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGkpO1xuICB0aGlzLmxhc3RUb3RhbCA9IHRvdGFsO1xuICB2YXIgZW5kID0gYnVmLmxlbmd0aCAtICh0b3RhbCAtIHRoaXMubGFzdE5lZWQpO1xuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCAwLCBlbmQpO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSwgZW5kKTtcbn1cblxuLy8gRm9yIFVURi04LCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlciBpcyBhZGRlZCB3aGVuIGVuZGluZyBvbiBhIHBhcnRpYWxcbi8vIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHV0ZjhFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgJ1xcdWZmZmQnO1xuICByZXR1cm4gcjtcbn1cblxuLy8gVVRGLTE2TEUgdHlwaWNhbGx5IG5lZWRzIHR3byBieXRlcyBwZXIgY2hhcmFjdGVyLCBidXQgZXZlbiBpZiB3ZSBoYXZlIGFuIGV2ZW5cbi8vIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUsIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2UgZW5kIG9uIGEgbGVhZGluZy9oaWdoXG4vLyBzdXJyb2dhdGUuIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgbmV4dCB0d28gYnl0ZXMgaW4gb3JkZXIgdG9cbi8vIGRlY29kZSB0aGUgbGFzdCBjaGFyYWN0ZXIgcHJvcGVybHkuXG5mdW5jdGlvbiB1dGYxNlRleHQoYnVmLCBpKSB7XG4gIGlmICgoYnVmLmxlbmd0aCAtIGkpICUgMiA9PT0gMCkge1xuICAgIHZhciByID0gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHZhciBjID0gci5jaGFyQ29kZUF0KHIubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAoYyA+PSAweEQ4MDAgJiYgYyA8PSAweERCRkYpIHtcbiAgICAgICAgdGhpcy5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHRoaXMubGFzdFRvdGFsID0gNDtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gci5zbGljZSgwLCAtMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAxO1xuICB0aGlzLmxhc3RUb3RhbCA9IDI7XG4gIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSwgYnVmLmxlbmd0aCAtIDEpO1xufVxuXG4vLyBGb3IgVVRGLTE2TEUgd2UgZG8gbm90IGV4cGxpY2l0bHkgYXBwZW5kIHNwZWNpYWwgcmVwbGFjZW1lbnQgY2hhcmFjdGVycyBpZiB3ZVxuLy8gZW5kIG9uIGEgcGFydGlhbCBjaGFyYWN0ZXIsIHdlIHNpbXBseSBsZXQgdjggaGFuZGxlIHRoYXQuXG5mdW5jdGlvbiB1dGYxNkVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHZhciBlbmQgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gICAgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCd1dGYxNmxlJywgMCwgZW5kKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gYmFzZTY0VGV4dChidWYsIGkpIHtcbiAgdmFyIG4gPSAoYnVmLmxlbmd0aCAtIGkpICUgMztcbiAgaWYgKG4gPT09IDApIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGkpO1xuICB0aGlzLmxhc3ROZWVkID0gMyAtIG47XG4gIHRoaXMubGFzdFRvdGFsID0gMztcbiAgaWYgKG4gPT09IDEpIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfVxuICByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpLCBidWYubGVuZ3RoIC0gbik7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCdiYXNlNjQnLCAwLCAzIC0gdGhpcy5sYXN0TmVlZCk7XG4gIHJldHVybiByO1xufVxuXG4vLyBQYXNzIGJ5dGVzIG9uIHRocm91Z2ggZm9yIHNpbmdsZS1ieXRlIGVuY29kaW5ncyAoZS5nLiBhc2NpaSwgbGF0aW4xLCBoZXgpXG5mdW5jdGlvbiBzaW1wbGVXcml0ZShidWYpIHtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRW5kKGJ1Zikge1xuICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oYS5sZW5ndGgsIGIubGVuZ3RoKVxuICB2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGJ1ZmZlcltpXSA9IGFbaV0gXiBiW2ldXG4gIH1cblxuICByZXR1cm4gYnVmZmVyXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEJsb2NrSGFzaCgpIHtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nVG90YWwgPSAwO1xuICB0aGlzLmJsb2NrU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuYmxvY2tTaXplO1xuICB0aGlzLm91dFNpemUgPSB0aGlzLmNvbnN0cnVjdG9yLm91dFNpemU7XG4gIHRoaXMuaG1hY1N0cmVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5obWFjU3RyZW5ndGg7XG4gIHRoaXMucGFkTGVuZ3RoID0gdGhpcy5jb25zdHJ1Y3Rvci5wYWRMZW5ndGggLyA4O1xuICB0aGlzLmVuZGlhbiA9ICdiaWcnO1xuXG4gIHRoaXMuX2RlbHRhOCA9IHRoaXMuYmxvY2tTaXplIC8gODtcbiAgdGhpcy5fZGVsdGEzMiA9IHRoaXMuYmxvY2tTaXplIC8gMzI7XG59XG5leHBvcnRzLkJsb2NrSGFzaCA9IEJsb2NrSGFzaDtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgLy8gQ29udmVydCBtZXNzYWdlIHRvIGFycmF5LCBwYWQgaXQsIGFuZCBqb2luIGludG8gMzJiaXQgYmxvY2tzXG4gIG1zZyA9IHV0aWxzLnRvQXJyYXkobXNnLCBlbmMpO1xuICBpZiAoIXRoaXMucGVuZGluZylcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2c7XG4gIGVsc2VcbiAgICB0aGlzLnBlbmRpbmcgPSB0aGlzLnBlbmRpbmcuY29uY2F0KG1zZyk7XG4gIHRoaXMucGVuZGluZ1RvdGFsICs9IG1zZy5sZW5ndGg7XG5cbiAgLy8gRW5vdWdoIGRhdGEsIHRyeSB1cGRhdGluZ1xuICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA+PSB0aGlzLl9kZWx0YTgpIHtcbiAgICBtc2cgPSB0aGlzLnBlbmRpbmc7XG5cbiAgICAvLyBQcm9jZXNzIHBlbmRpbmcgZGF0YSBpbiBibG9ja3NcbiAgICB2YXIgciA9IG1zZy5sZW5ndGggJSB0aGlzLl9kZWx0YTg7XG4gICAgdGhpcy5wZW5kaW5nID0gbXNnLnNsaWNlKG1zZy5sZW5ndGggLSByLCBtc2cubGVuZ3RoKTtcbiAgICBpZiAodGhpcy5wZW5kaW5nLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMucGVuZGluZyA9IG51bGw7XG5cbiAgICBtc2cgPSB1dGlscy5qb2luMzIobXNnLCAwLCBtc2cubGVuZ3RoIC0gciwgdGhpcy5lbmRpYW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSB0aGlzLl9kZWx0YTMyKVxuICAgICAgdGhpcy5fdXBkYXRlKG1zZywgaSwgaSArIHRoaXMuX2RlbHRhMzIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy51cGRhdGUodGhpcy5fcGFkKCkpO1xuICBhc3NlcnQodGhpcy5wZW5kaW5nID09PSBudWxsKTtcblxuICByZXR1cm4gdGhpcy5fZGlnZXN0KGVuYyk7XG59O1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlvbiBwYWQoKSB7XG4gIHZhciBsZW4gPSB0aGlzLnBlbmRpbmdUb3RhbDtcbiAgdmFyIGJ5dGVzID0gdGhpcy5fZGVsdGE4O1xuICB2YXIgayA9IGJ5dGVzIC0gKChsZW4gKyB0aGlzLnBhZExlbmd0aCkgJSBieXRlcyk7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkoayArIHRoaXMucGFkTGVuZ3RoKTtcbiAgcmVzWzBdID0gMHg4MDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBrOyBpKyspXG4gICAgcmVzW2ldID0gMDtcblxuICAvLyBBcHBlbmQgbGVuZ3RoXG4gIGxlbiA8PD0gMztcbiAgaWYgKHRoaXMuZW5kaWFuID09PSAnYmlnJykge1xuICAgIGZvciAodmFyIHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcblxuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDI0KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gOCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgfSBlbHNlIHtcbiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAxNikgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG5cbiAgICBmb3IgKHQgPSA4OyB0IDwgdGhpcy5wYWRMZW5ndGg7IHQrKylcbiAgICAgIHJlc1tpKytdID0gMDtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5jb25zdCBSZXBvcnRlciA9IHJlcXVpcmUoJy4uL2Jhc2UvcmVwb3J0ZXInKS5SZXBvcnRlcjtcbmNvbnN0IEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmVyLWJ1ZmZlcicpLkJ1ZmZlcjtcblxuZnVuY3Rpb24gRGVjb2RlckJ1ZmZlcihiYXNlLCBvcHRpb25zKSB7XG4gIFJlcG9ydGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJhc2UpKSB7XG4gICAgdGhpcy5lcnJvcignSW5wdXQgbm90IEJ1ZmZlcicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuYmFzZSA9IGJhc2U7XG4gIHRoaXMub2Zmc2V0ID0gMDtcbiAgdGhpcy5sZW5ndGggPSBiYXNlLmxlbmd0aDtcbn1cbmluaGVyaXRzKERlY29kZXJCdWZmZXIsIFJlcG9ydGVyKTtcbmV4cG9ydHMuRGVjb2RlckJ1ZmZlciA9IERlY29kZXJCdWZmZXI7XG5cbkRlY29kZXJCdWZmZXIuaXNEZWNvZGVyQnVmZmVyID0gZnVuY3Rpb24gaXNEZWNvZGVyQnVmZmVyKGRhdGEpIHtcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBEZWNvZGVyQnVmZmVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBPciBhY2NlcHQgY29tcGF0aWJsZSBBUElcbiAgY29uc3QgaXNDb21wYXRpYmxlID0gdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmXG4gICAgQnVmZmVyLmlzQnVmZmVyKGRhdGEuYmFzZSkgJiZcbiAgICBkYXRhLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdEZWNvZGVyQnVmZmVyJyAmJlxuICAgIHR5cGVvZiBkYXRhLm9mZnNldCA9PT0gJ251bWJlcicgJiZcbiAgICB0eXBlb2YgZGF0YS5sZW5ndGggPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIGRhdGEuc2F2ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBkYXRhLnJlc3RvcmUgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgZGF0YS5pc0VtcHR5ID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIGRhdGEucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIGRhdGEuc2tpcCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiBkYXRhLnJhdyA9PT0gJ2Z1bmN0aW9uJztcblxuICByZXR1cm4gaXNDb21wYXRpYmxlO1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIHNhdmUoKSB7XG4gIHJldHVybiB7IG9mZnNldDogdGhpcy5vZmZzZXQsIHJlcG9ydGVyOiBSZXBvcnRlci5wcm90b3R5cGUuc2F2ZS5jYWxsKHRoaXMpIH07XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZShzYXZlKSB7XG4gIC8vIFJldHVybiBza2lwcGVkIGRhdGFcbiAgY29uc3QgcmVzID0gbmV3IERlY29kZXJCdWZmZXIodGhpcy5iYXNlKTtcbiAgcmVzLm9mZnNldCA9IHNhdmUub2Zmc2V0O1xuICByZXMubGVuZ3RoID0gdGhpcy5vZmZzZXQ7XG5cbiAgdGhpcy5vZmZzZXQgPSBzYXZlLm9mZnNldDtcbiAgUmVwb3J0ZXIucHJvdG90eXBlLnJlc3RvcmUuY2FsbCh0aGlzLCBzYXZlLnJlcG9ydGVyKTtcblxuICByZXR1cm4gcmVzO1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gIHJldHVybiB0aGlzLm9mZnNldCA9PT0gdGhpcy5sZW5ndGg7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDgoZmFpbCkge1xuICBpZiAodGhpcy5vZmZzZXQgKyAxIDw9IHRoaXMubGVuZ3RoKVxuICAgIHJldHVybiB0aGlzLmJhc2UucmVhZFVJbnQ4KHRoaXMub2Zmc2V0KyssIHRydWUpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoZmFpbCB8fCAnRGVjb2RlckJ1ZmZlciBvdmVycnVuJyk7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5za2lwID0gZnVuY3Rpb24gc2tpcChieXRlcywgZmFpbCkge1xuICBpZiAoISh0aGlzLm9mZnNldCArIGJ5dGVzIDw9IHRoaXMubGVuZ3RoKSlcbiAgICByZXR1cm4gdGhpcy5lcnJvcihmYWlsIHx8ICdEZWNvZGVyQnVmZmVyIG92ZXJydW4nKTtcblxuICBjb25zdCByZXMgPSBuZXcgRGVjb2RlckJ1ZmZlcih0aGlzLmJhc2UpO1xuXG4gIC8vIFNoYXJlIHJlcG9ydGVyIHN0YXRlXG4gIHJlcy5fcmVwb3J0ZXJTdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgcmVzLm9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICByZXMubGVuZ3RoID0gdGhpcy5vZmZzZXQgKyBieXRlcztcbiAgdGhpcy5vZmZzZXQgKz0gYnl0ZXM7XG4gIHJldHVybiByZXM7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5yYXcgPSBmdW5jdGlvbiByYXcoc2F2ZSkge1xuICByZXR1cm4gdGhpcy5iYXNlLnNsaWNlKHNhdmUgPyBzYXZlLm9mZnNldCA6IHRoaXMub2Zmc2V0LCB0aGlzLmxlbmd0aCk7XG59O1xuXG5mdW5jdGlvbiBFbmNvZGVyQnVmZmVyKHZhbHVlLCByZXBvcnRlcikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAoIUVuY29kZXJCdWZmZXIuaXNFbmNvZGVyQnVmZmVyKGl0ZW0pKVxuICAgICAgICBpdGVtID0gbmV3IEVuY29kZXJCdWZmZXIoaXRlbSwgcmVwb3J0ZXIpO1xuICAgICAgdGhpcy5sZW5ndGggKz0gaXRlbS5sZW5ndGg7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9LCB0aGlzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKCEoMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAweGZmKSlcbiAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignbm9uLWJ5dGUgRW5jb2RlckJ1ZmZlciB2YWx1ZScpO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVW5zdXBwb3J0ZWQgdHlwZTogJyArIHR5cGVvZiB2YWx1ZSk7XG4gIH1cbn1cbmV4cG9ydHMuRW5jb2RlckJ1ZmZlciA9IEVuY29kZXJCdWZmZXI7XG5cbkVuY29kZXJCdWZmZXIuaXNFbmNvZGVyQnVmZmVyID0gZnVuY3Rpb24gaXNFbmNvZGVyQnVmZmVyKGRhdGEpIHtcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBFbmNvZGVyQnVmZmVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBPciBhY2NlcHQgY29tcGF0aWJsZSBBUElcbiAgY29uc3QgaXNDb21wYXRpYmxlID0gdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmXG4gICAgZGF0YS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnRW5jb2RlckJ1ZmZlcicgJiZcbiAgICB0eXBlb2YgZGF0YS5sZW5ndGggPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIGRhdGEuam9pbiA9PT0gJ2Z1bmN0aW9uJztcblxuICByZXR1cm4gaXNDb21wYXRpYmxlO1xufTtcblxuRW5jb2RlckJ1ZmZlci5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ob3V0LCBvZmZzZXQpIHtcbiAgaWYgKCFvdXQpXG4gICAgb3V0ID0gQnVmZmVyLmFsbG9jKHRoaXMubGVuZ3RoKTtcbiAgaWYgKCFvZmZzZXQpXG4gICAgb2Zmc2V0ID0gMDtcblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIG91dDtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgIHRoaXMudmFsdWUuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpdGVtLmpvaW4ob3V0LCBvZmZzZXQpO1xuICAgICAgb2Zmc2V0ICs9IGl0ZW0ubGVuZ3RoO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ251bWJlcicpXG4gICAgICBvdXRbb2Zmc2V0XSA9IHRoaXMudmFsdWU7XG4gICAgZWxzZSBpZiAodHlwZW9mIHRoaXMudmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgb3V0LndyaXRlKHRoaXMudmFsdWUsIG9mZnNldCk7XG4gICAgZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKHRoaXMudmFsdWUpKVxuICAgICAgdGhpcy52YWx1ZS5jb3B5KG91dCwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gdGhpcy5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fFxuICAgICFwcm9jZXNzLnZlcnNpb24gfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjAuJykgPT09IDAgfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuJykgPT09IDAgJiYgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLjguJykgIT09IDApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7IG5leHRUaWNrOiBuZXh0VGljayB9O1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzXG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGZuLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNhbGxiYWNrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBhcmdzLCBpO1xuICBzd2l0Y2ggKGxlbikge1xuICBjYXNlIDA6XG4gIGNhc2UgMTpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbik7XG4gIGNhc2UgMjpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tPbmUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEpO1xuICAgIH0pO1xuICBjYXNlIDM6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVHdvKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyKTtcbiAgICB9KTtcbiAgY2FzZSA0OlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1RocmVlKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9KTtcbiAgZGVmYXVsdDpcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgIGFyZ3NbaSsrXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrKCkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSk7XG4gIH1cbn1cblxuIiwiLy8gYmFzZWQgb24gdGhlIGFlcyBpbXBsaW1lbnRhdGlvbiBpbiB0cmlwbGUgc2VjXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2V5YmFzZS90cmlwbGVzZWNcbi8vIHdoaWNoIGlzIGluIHR1cm4gYmFzZWQgb24gdGhlIG9uZSBmcm9tIGNyeXB0by1qc1xuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBhc1VJbnQzMkFycmF5IChidWYpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuXG4gIHZhciBsZW4gPSAoYnVmLmxlbmd0aCAvIDQpIHwgMFxuICB2YXIgb3V0ID0gbmV3IEFycmF5KGxlbilcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0W2ldID0gYnVmLnJlYWRVSW50MzJCRShpICogNClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gc2NydWJWZWMgKHYpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgdisrKSB7XG4gICAgdltpXSA9IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBjcnlwdEJsb2NrIChNLCBrZXlTY2hlZHVsZSwgU1VCX01JWCwgU0JPWCwgblJvdW5kcykge1xuICB2YXIgU1VCX01JWDAgPSBTVUJfTUlYWzBdXG4gIHZhciBTVUJfTUlYMSA9IFNVQl9NSVhbMV1cbiAgdmFyIFNVQl9NSVgyID0gU1VCX01JWFsyXVxuICB2YXIgU1VCX01JWDMgPSBTVUJfTUlYWzNdXG5cbiAgdmFyIHMwID0gTVswXSBeIGtleVNjaGVkdWxlWzBdXG4gIHZhciBzMSA9IE1bMV0gXiBrZXlTY2hlZHVsZVsxXVxuICB2YXIgczIgPSBNWzJdIF4ga2V5U2NoZWR1bGVbMl1cbiAgdmFyIHMzID0gTVszXSBeIGtleVNjaGVkdWxlWzNdXG4gIHZhciB0MCwgdDEsIHQyLCB0M1xuICB2YXIga3NSb3cgPSA0XG5cbiAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IG5Sb3VuZHM7IHJvdW5kKyspIHtcbiAgICB0MCA9IFNVQl9NSVgwW3MwID4+PiAyNF0gXiBTVUJfTUlYMVsoczEgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDEgPSBTVUJfTUlYMFtzMSA+Pj4gMjRdIF4gU1VCX01JWDFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MwICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQyID0gU1VCX01JWDBbczIgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MyA9IFNVQl9NSVgwW3MzID4+PiAyNF0gXiBTVUJfTUlYMVsoczAgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgczAgPSB0MFxuICAgIHMxID0gdDFcbiAgICBzMiA9IHQyXG4gICAgczMgPSB0M1xuICB9XG5cbiAgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MCA9IHQwID4+PiAwXG4gIHQxID0gdDEgPj4+IDBcbiAgdDIgPSB0MiA+Pj4gMFxuICB0MyA9IHQzID4+PiAwXG5cbiAgcmV0dXJuIFt0MCwgdDEsIHQyLCB0M11cbn1cblxuLy8gQUVTIGNvbnN0YW50c1xudmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cbnZhciBHID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ29tcHV0ZSBkb3VibGUgdGFibGVcbiAgdmFyIGQgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKHZhciBqID0gMDsgaiA8IDI1NjsgaisrKSB7XG4gICAgaWYgKGogPCAxMjgpIHtcbiAgICAgIGRbal0gPSBqIDw8IDFcbiAgICB9IGVsc2Uge1xuICAgICAgZFtqXSA9IChqIDw8IDEpIF4gMHgxMWJcbiAgICB9XG4gIH1cblxuICB2YXIgU0JPWCA9IFtdXG4gIHZhciBJTlZfU0JPWCA9IFtdXG4gIHZhciBTVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB2YXIgSU5WX1NVQl9NSVggPSBbW10sIFtdLCBbXSwgW11dXG5cbiAgLy8gV2FsayBHRigyXjgpXG4gIHZhciB4ID0gMFxuICB2YXIgeGkgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAvLyBDb21wdXRlIHNib3hcbiAgICB2YXIgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxuICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xuICAgIFNCT1hbeF0gPSBzeFxuICAgIElOVl9TQk9YW3N4XSA9IHhcblxuICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cbiAgICB2YXIgeDIgPSBkW3hdXG4gICAgdmFyIHg0ID0gZFt4Ml1cbiAgICB2YXIgeDggPSBkW3g0XVxuXG4gICAgLy8gQ29tcHV0ZSBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zIHRhYmxlc1xuICAgIHZhciB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKVxuICAgIFNVQl9NSVhbMF1beF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICBTVUJfTUlYWzFdW3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIFNVQl9NSVhbMl1beF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBTVUJfTUlYWzNdW3hdID0gdFxuXG4gICAgLy8gQ29tcHV0ZSBpbnYgc3ViIGJ5dGVzLCBpbnYgbWl4IGNvbHVtbnMgdGFibGVzXG4gICAgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxuICAgIElOVl9TVUJfTUlYWzBdW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIElOVl9TVUJfTUlYWzFdW3N4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICBJTlZfU1VCX01JWFsyXVtzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBJTlZfU1VCX01JWFszXVtzeF0gPSB0XG5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgeCA9IHhpID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dXG4gICAgICB4aSBePSBkW2RbeGldXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgU0JPWDogU0JPWCxcbiAgICBJTlZfU0JPWDogSU5WX1NCT1gsXG4gICAgU1VCX01JWDogU1VCX01JWCxcbiAgICBJTlZfU1VCX01JWDogSU5WX1NVQl9NSVhcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBBRVMgKGtleSkge1xuICB0aGlzLl9rZXkgPSBhc1VJbnQzMkFycmF5KGtleSlcbiAgdGhpcy5fcmVzZXQoKVxufVxuXG5BRVMuYmxvY2tTaXplID0gNCAqIDRcbkFFUy5rZXlTaXplID0gMjU2IC8gOFxuQUVTLnByb3RvdHlwZS5ibG9ja1NpemUgPSBBRVMuYmxvY2tTaXplXG5BRVMucHJvdG90eXBlLmtleVNpemUgPSBBRVMua2V5U2l6ZVxuQUVTLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBrZXlXb3JkcyA9IHRoaXMuX2tleVxuICB2YXIga2V5U2l6ZSA9IGtleVdvcmRzLmxlbmd0aFxuICB2YXIgblJvdW5kcyA9IGtleVNpemUgKyA2XG4gIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNFxuXG4gIHZhciBrZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAodmFyIGsgPSAwOyBrIDwga2V5U2l6ZTsgaysrKSB7XG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlXb3Jkc1trXVxuICB9XG5cbiAgZm9yIChrID0ga2V5U2l6ZTsgayA8IGtzUm93czsgaysrKSB7XG4gICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrIC0gMV1cblxuICAgIGlmIChrICUga2V5U2l6ZSA9PT0gMCkge1xuICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgICAgdCA9XG4gICAgICAgIChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfFxuICAgICAgICAoRy5TQk9YW3QgJiAweGZmXSlcblxuICAgICAgdCBePSBSQ09OWyhrIC8ga2V5U2l6ZSkgfCAwXSA8PCAyNFxuICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYgayAlIGtleVNpemUgPT09IDQpIHtcbiAgICAgIHQgPVxuICAgICAgICAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHxcbiAgICAgICAgKEcuU0JPWFt0ICYgMHhmZl0pXG4gICAgfVxuXG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlTY2hlZHVsZVtrIC0ga2V5U2l6ZV0gXiB0XG4gIH1cblxuICB2YXIgaW52S2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKHZhciBpayA9IDA7IGlrIDwga3NSb3dzOyBpaysrKSB7XG4gICAgdmFyIGtzUiA9IGtzUm93cyAtIGlrXG4gICAgdmFyIHR0ID0ga2V5U2NoZWR1bGVba3NSIC0gKGlrICUgNCA/IDAgOiA0KV1cblxuICAgIGlmIChpayA8IDQgfHwga3NSIDw9IDQpIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9IHR0XG4gICAgfSBlbHNlIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9XG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMF1bRy5TQk9YW3R0ID4+PiAyNF1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbKHR0ID4+PiAxNikgJiAweGZmXV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzJdW0cuU0JPWFsodHQgPj4+IDgpICYgMHhmZl1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFszXVtHLlNCT1hbdHQgJiAweGZmXV1cbiAgICB9XG4gIH1cblxuICB0aGlzLl9uUm91bmRzID0gblJvdW5kc1xuICB0aGlzLl9rZXlTY2hlZHVsZSA9IGtleVNjaGVkdWxlXG4gIHRoaXMuX2ludktleVNjaGVkdWxlID0gaW52S2V5U2NoZWR1bGVcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2tSYXcgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuICByZXR1cm4gY3J5cHRCbG9jayhNLCB0aGlzLl9rZXlTY2hlZHVsZSwgRy5TVUJfTUlYLCBHLlNCT1gsIHRoaXMuX25Sb3VuZHMpXG59XG5cbkFFUy5wcm90b3R5cGUuZW5jcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIG91dCA9IHRoaXMuZW5jcnlwdEJsb2NrUmF3KE0pXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5kZWNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuXG4gIC8vIHN3YXBcbiAgdmFyIG0xID0gTVsxXVxuICBNWzFdID0gTVszXVxuICBNWzNdID0gbTFcblxuICB2YXIgb3V0ID0gY3J5cHRCbG9jayhNLCB0aGlzLl9pbnZLZXlTY2hlZHVsZSwgRy5JTlZfU1VCX01JWCwgRy5JTlZfU0JPWCwgdGhpcy5fblJvdW5kcylcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLnNjcnViID0gZnVuY3Rpb24gKCkge1xuICBzY3J1YlZlYyh0aGlzLl9rZXlTY2hlZHVsZSlcbiAgc2NydWJWZWModGhpcy5faW52S2V5U2NoZWR1bGUpXG4gIHNjcnViVmVjKHRoaXMuX2tleSlcbn1cblxubW9kdWxlLmV4cG9ydHMuQUVTID0gQUVTXG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbmZ1bmN0aW9uIEVWUF9CeXRlc1RvS2V5IChwYXNzd29yZCwgc2FsdCwga2V5Qml0cywgaXZMZW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkLCAnYmluYXJ5JylcbiAgaWYgKHNhbHQpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsICdiaW5hcnknKVxuICAgIGlmIChzYWx0Lmxlbmd0aCAhPT0gOCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NhbHQgc2hvdWxkIGJlIEJ1ZmZlciB3aXRoIDggYnl0ZSBsZW5ndGgnKVxuICB9XG5cbiAgdmFyIGtleUxlbiA9IGtleUJpdHMgLyA4XG4gIHZhciBrZXkgPSBCdWZmZXIuYWxsb2Moa2V5TGVuKVxuICB2YXIgaXYgPSBCdWZmZXIuYWxsb2MoaXZMZW4gfHwgMClcbiAgdmFyIHRtcCA9IEJ1ZmZlci5hbGxvYygwKVxuXG4gIHdoaWxlIChrZXlMZW4gPiAwIHx8IGl2TGVuID4gMCkge1xuICAgIHZhciBoYXNoID0gbmV3IE1ENSgpXG4gICAgaGFzaC51cGRhdGUodG1wKVxuICAgIGhhc2gudXBkYXRlKHBhc3N3b3JkKVxuICAgIGlmIChzYWx0KSBoYXNoLnVwZGF0ZShzYWx0KVxuICAgIHRtcCA9IGhhc2guZGlnZXN0KClcblxuICAgIHZhciB1c2VkID0gMFxuXG4gICAgaWYgKGtleUxlbiA+IDApIHtcbiAgICAgIHZhciBrZXlTdGFydCA9IGtleS5sZW5ndGggLSBrZXlMZW5cbiAgICAgIHVzZWQgPSBNYXRoLm1pbihrZXlMZW4sIHRtcC5sZW5ndGgpXG4gICAgICB0bXAuY29weShrZXksIGtleVN0YXJ0LCAwLCB1c2VkKVxuICAgICAga2V5TGVuIC09IHVzZWRcbiAgICB9XG5cbiAgICBpZiAodXNlZCA8IHRtcC5sZW5ndGggJiYgaXZMZW4gPiAwKSB7XG4gICAgICB2YXIgaXZTdGFydCA9IGl2Lmxlbmd0aCAtIGl2TGVuXG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oaXZMZW4sIHRtcC5sZW5ndGggLSB1c2VkKVxuICAgICAgdG1wLmNvcHkoaXYsIGl2U3RhcnQsIHVzZWQsIHVzZWQgKyBsZW5ndGgpXG4gICAgICBpdkxlbiAtPSBsZW5ndGhcbiAgICB9XG4gIH1cblxuICB0bXAuZmlsbCgwKVxuICByZXR1cm4geyBrZXk6IGtleSwgaXY6IGl2IH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFVlBfQnl0ZXNUb0tleVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBnZXROQUYgPSB1dGlscy5nZXROQUY7XG52YXIgZ2V0SlNGID0gdXRpbHMuZ2V0SlNGO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gQmFzZUN1cnZlKHR5cGUsIGNvbmYpIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5wID0gbmV3IEJOKGNvbmYucCwgMTYpO1xuXG4gIC8vIFVzZSBNb250Z29tZXJ5LCB3aGVuIHRoZXJlIGlzIG5vIGZhc3QgcmVkdWN0aW9uIGZvciB0aGUgcHJpbWVcbiAgdGhpcy5yZWQgPSBjb25mLnByaW1lID8gQk4ucmVkKGNvbmYucHJpbWUpIDogQk4ubW9udCh0aGlzLnApO1xuXG4gIC8vIFVzZWZ1bCBmb3IgbWFueSBjdXJ2ZXNcbiAgdGhpcy56ZXJvID0gbmV3IEJOKDApLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5vbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLnR3byA9IG5ldyBCTigyKS50b1JlZCh0aGlzLnJlZCk7XG5cbiAgLy8gQ3VydmUgY29uZmlndXJhdGlvbiwgb3B0aW9uYWxcbiAgdGhpcy5uID0gY29uZi5uICYmIG5ldyBCTihjb25mLm4sIDE2KTtcbiAgdGhpcy5nID0gY29uZi5nICYmIHRoaXMucG9pbnRGcm9tSlNPTihjb25mLmcsIGNvbmYuZ1JlZCk7XG5cbiAgLy8gVGVtcG9yYXJ5IGFycmF5c1xuICB0aGlzLl93bmFmVDEgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUMiA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQzID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDQgPSBuZXcgQXJyYXkoNCk7XG5cbiAgdGhpcy5fYml0TGVuZ3RoID0gdGhpcy5uID8gdGhpcy5uLmJpdExlbmd0aCgpIDogMDtcblxuICAvLyBHZW5lcmFsaXplZCBHcmVnIE1heHdlbGwncyB0cmlja1xuICB2YXIgYWRqdXN0Q291bnQgPSB0aGlzLm4gJiYgdGhpcy5wLmRpdih0aGlzLm4pO1xuICBpZiAoIWFkanVzdENvdW50IHx8IGFkanVzdENvdW50LmNtcG4oMTAwKSA+IDApIHtcbiAgICB0aGlzLnJlZE4gPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX21heHdlbGxUcmljayA9IHRydWU7XG4gICAgdGhpcy5yZWROID0gdGhpcy5uLnRvUmVkKHRoaXMucmVkKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ3VydmU7XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX2ZpeGVkTmFmTXVsID0gZnVuY3Rpb24gX2ZpeGVkTmFmTXVsKHAsIGspIHtcbiAgYXNzZXJ0KHAucHJlY29tcHV0ZWQpO1xuICB2YXIgZG91YmxlcyA9IHAuX2dldERvdWJsZXMoKTtcblxuICB2YXIgbmFmID0gZ2V0TkFGKGssIDEsIHRoaXMuX2JpdExlbmd0aCk7XG4gIHZhciBJID0gKDEgPDwgKGRvdWJsZXMuc3RlcCArIDEpKSAtIChkb3VibGVzLnN0ZXAgJSAyID09PSAwID8gMiA6IDEpO1xuICBJIC89IDM7XG5cbiAgLy8gVHJhbnNsYXRlIGludG8gbW9yZSB3aW5kb3dlZCBmb3JtXG4gIHZhciByZXByID0gW107XG4gIGZvciAodmFyIGogPSAwOyBqIDwgbmFmLmxlbmd0aDsgaiArPSBkb3VibGVzLnN0ZXApIHtcbiAgICB2YXIgbmFmVyA9IDA7XG4gICAgZm9yICh2YXIgayA9IGogKyBkb3VibGVzLnN0ZXAgLSAxOyBrID49IGo7IGstLSlcbiAgICAgIG5hZlcgPSAobmFmVyA8PCAxKSArIG5hZltrXTtcbiAgICByZXByLnB1c2gobmFmVyk7XG4gIH1cblxuICB2YXIgYSA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICB2YXIgYiA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICBmb3IgKHZhciBpID0gSTsgaSA+IDA7IGktLSkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmVwci5sZW5ndGg7IGorKykge1xuICAgICAgdmFyIG5hZlcgPSByZXByW2pdO1xuICAgICAgaWYgKG5hZlcgPT09IGkpXG4gICAgICAgIGIgPSBiLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdKTtcbiAgICAgIGVsc2UgaWYgKG5hZlcgPT09IC1pKVxuICAgICAgICBiID0gYi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXS5uZWcoKSk7XG4gICAgfVxuICAgIGEgPSBhLmFkZChiKTtcbiAgfVxuICByZXR1cm4gYS50b1AoKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX3duYWZNdWwgPSBmdW5jdGlvbiBfd25hZk11bChwLCBrKSB7XG4gIHZhciB3ID0gNDtcblxuICAvLyBQcmVjb21wdXRlIHdpbmRvd1xuICB2YXIgbmFmUG9pbnRzID0gcC5fZ2V0TkFGUG9pbnRzKHcpO1xuICB3ID0gbmFmUG9pbnRzLnduZDtcbiAgdmFyIHduZCA9IG5hZlBvaW50cy5wb2ludHM7XG5cbiAgLy8gR2V0IE5BRiBmb3JtXG4gIHZhciBuYWYgPSBnZXROQUYoaywgdywgdGhpcy5fYml0TGVuZ3RoKTtcblxuICAvLyBBZGQgYHRoaXNgKihOKzEpIGZvciBldmVyeSB3LU5BRiBpbmRleFxuICB2YXIgYWNjID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBuYWYubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAvLyBDb3VudCB6ZXJvZXNcbiAgICBmb3IgKHZhciBrID0gMDsgaSA+PSAwICYmIG5hZltpXSA9PT0gMDsgaS0tKVxuICAgICAgaysrO1xuICAgIGlmIChpID49IDApXG4gICAgICBrKys7XG4gICAgYWNjID0gYWNjLmRibHAoayk7XG5cbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcbiAgICB2YXIgeiA9IG5hZltpXTtcbiAgICBhc3NlcnQoeiAhPT0gMCk7XG4gICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpIHtcbiAgICAgIC8vIEogKy0gUFxuICAgICAgaWYgKHogPiAwKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSiArLSBKXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHduZFsoLXogLSAxKSA+PiAxXS5uZWcoKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwLnR5cGUgPT09ICdhZmZpbmUnID8gYWNjLnRvUCgpIDogYWNjO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bEFkZCA9IGZ1bmN0aW9uIF93bmFmTXVsQWRkKGRlZlcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZWZmcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgamFjb2JpYW5SZXN1bHQpIHtcbiAgdmFyIHduZFdpZHRoID0gdGhpcy5fd25hZlQxO1xuICB2YXIgd25kID0gdGhpcy5fd25hZlQyO1xuICB2YXIgbmFmID0gdGhpcy5fd25hZlQzO1xuXG4gIC8vIEZpbGwgYWxsIGFycmF5c1xuICB2YXIgbWF4ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBuYWZQb2ludHMgPSBwLl9nZXROQUZQb2ludHMoZGVmVyk7XG4gICAgd25kV2lkdGhbaV0gPSBuYWZQb2ludHMud25kO1xuICAgIHduZFtpXSA9IG5hZlBvaW50cy5wb2ludHM7XG4gIH1cblxuICAvLyBDb21iIHNtYWxsIHdpbmRvdyBOQUZzXG4gIGZvciAodmFyIGkgPSBsZW4gLSAxOyBpID49IDE7IGkgLT0gMikge1xuICAgIHZhciBhID0gaSAtIDE7XG4gICAgdmFyIGIgPSBpO1xuICAgIGlmICh3bmRXaWR0aFthXSAhPT0gMSB8fCB3bmRXaWR0aFtiXSAhPT0gMSkge1xuICAgICAgbmFmW2FdID0gZ2V0TkFGKGNvZWZmc1thXSwgd25kV2lkdGhbYV0sIHRoaXMuX2JpdExlbmd0aCk7XG4gICAgICBuYWZbYl0gPSBnZXROQUYoY29lZmZzW2JdLCB3bmRXaWR0aFtiXSwgdGhpcy5fYml0TGVuZ3RoKTtcbiAgICAgIG1heCA9IE1hdGgubWF4KG5hZlthXS5sZW5ndGgsIG1heCk7XG4gICAgICBtYXggPSBNYXRoLm1heChuYWZbYl0ubGVuZ3RoLCBtYXgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGNvbWIgPSBbXG4gICAgICBwb2ludHNbYV0sIC8qIDEgKi9cbiAgICAgIG51bGwsIC8qIDMgKi9cbiAgICAgIG51bGwsIC8qIDUgKi9cbiAgICAgIHBvaW50c1tiXSAvKiA3ICovXG4gICAgXTtcblxuICAgIC8vIFRyeSB0byBhdm9pZCBQcm9qZWN0aXZlIHBvaW50cywgaWYgcG9zc2libGVcbiAgICBpZiAocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55KSA9PT0gMCkge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS5hZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9IGVsc2UgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueS5yZWROZWcoKSkgPT09IDApIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0uYWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdKTtcbiAgICAgIGNvbWJbMl0gPSBwb2ludHNbYV0udG9KKCkubWl4ZWRBZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBbXG4gICAgICAtMywgLyogLTEgLTEgKi9cbiAgICAgIC0xLCAvKiAtMSAwICovXG4gICAgICAtNSwgLyogLTEgMSAqL1xuICAgICAgLTcsIC8qIDAgLTEgKi9cbiAgICAgIDAsIC8qIDAgMCAqL1xuICAgICAgNywgLyogMCAxICovXG4gICAgICA1LCAvKiAxIC0xICovXG4gICAgICAxLCAvKiAxIDAgKi9cbiAgICAgIDMgIC8qIDEgMSAqL1xuICAgIF07XG5cbiAgICB2YXIganNmID0gZ2V0SlNGKGNvZWZmc1thXSwgY29lZmZzW2JdKTtcbiAgICBtYXggPSBNYXRoLm1heChqc2ZbMF0ubGVuZ3RoLCBtYXgpO1xuICAgIG5hZlthXSA9IG5ldyBBcnJheShtYXgpO1xuICAgIG5hZltiXSA9IG5ldyBBcnJheShtYXgpO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWF4OyBqKyspIHtcbiAgICAgIHZhciBqYSA9IGpzZlswXVtqXSB8IDA7XG4gICAgICB2YXIgamIgPSBqc2ZbMV1bal0gfCAwO1xuXG4gICAgICBuYWZbYV1bal0gPSBpbmRleFsoamEgKyAxKSAqIDMgKyAoamIgKyAxKV07XG4gICAgICBuYWZbYl1bal0gPSAwO1xuICAgICAgd25kW2FdID0gY29tYjtcbiAgICB9XG4gIH1cblxuICB2YXIgYWNjID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIHZhciB0bXAgPSB0aGlzLl93bmFmVDQ7XG4gIGZvciAodmFyIGkgPSBtYXg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGsgPSAwO1xuXG4gICAgd2hpbGUgKGkgPj0gMCkge1xuICAgICAgdmFyIHplcm8gPSB0cnVlO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKykge1xuICAgICAgICB0bXBbal0gPSBuYWZbal1baV0gfCAwO1xuICAgICAgICBpZiAodG1wW2pdICE9PSAwKVxuICAgICAgICAgIHplcm8gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghemVybylcbiAgICAgICAgYnJlYWs7XG4gICAgICBrKys7XG4gICAgICBpLS07XG4gICAgfVxuICAgIGlmIChpID49IDApXG4gICAgICBrKys7XG4gICAgYWNjID0gYWNjLmRibHAoayk7XG4gICAgaWYgKGkgPCAwKVxuICAgICAgYnJlYWs7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICB2YXIgeiA9IHRtcFtqXTtcbiAgICAgIHZhciBwO1xuICAgICAgaWYgKHogPT09IDApXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgZWxzZSBpZiAoeiA+IDApXG4gICAgICAgIHAgPSB3bmRbal1bKHogLSAxKSA+PiAxXTtcbiAgICAgIGVsc2UgaWYgKHogPCAwKVxuICAgICAgICBwID0gd25kW2pdWygteiAtIDEpID4+IDFdLm5lZygpO1xuXG4gICAgICBpZiAocC50eXBlID09PSAnYWZmaW5lJylcbiAgICAgICAgYWNjID0gYWNjLm1peGVkQWRkKHApO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHApO1xuICAgIH1cbiAgfVxuICAvLyBaZXJvaWZ5IHJlZmVyZW5jZXNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICB3bmRbaV0gPSBudWxsO1xuXG4gIGlmIChqYWNvYmlhblJlc3VsdClcbiAgICByZXR1cm4gYWNjO1xuICBlbHNlXG4gICAgcmV0dXJuIGFjYy50b1AoKTtcbn07XG5cbmZ1bmN0aW9uIEJhc2VQb2ludChjdXJ2ZSwgdHlwZSkge1xuICB0aGlzLmN1cnZlID0gY3VydmU7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMucHJlY29tcHV0ZWQgPSBudWxsO1xufVxuQmFzZUN1cnZlLkJhc2VQb2ludCA9IEJhc2VQb2ludDtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKC8qb3RoZXIqLykge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS52YWxpZGF0ZSh0aGlzKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuZGVjb2RlUG9pbnQgPSBmdW5jdGlvbiBkZWNvZGVQb2ludChieXRlcywgZW5jKSB7XG4gIGJ5dGVzID0gdXRpbHMudG9BcnJheShieXRlcywgZW5jKTtcblxuICB2YXIgbGVuID0gdGhpcy5wLmJ5dGVMZW5ndGgoKTtcblxuICAvLyB1bmNvbXByZXNzZWQsIGh5YnJpZC1vZGQsIGh5YnJpZC1ldmVuXG4gIGlmICgoYnl0ZXNbMF0gPT09IDB4MDQgfHwgYnl0ZXNbMF0gPT09IDB4MDYgfHwgYnl0ZXNbMF0gPT09IDB4MDcpICYmXG4gICAgICBieXRlcy5sZW5ndGggLSAxID09PSAyICogbGVuKSB7XG4gICAgaWYgKGJ5dGVzWzBdID09PSAweDA2KVxuICAgICAgYXNzZXJ0KGJ5dGVzW2J5dGVzLmxlbmd0aCAtIDFdICUgMiA9PT0gMCk7XG4gICAgZWxzZSBpZiAoYnl0ZXNbMF0gPT09IDB4MDcpXG4gICAgICBhc3NlcnQoYnl0ZXNbYnl0ZXMubGVuZ3RoIC0gMV0gJSAyID09PSAxKTtcblxuICAgIHZhciByZXMgPSAgdGhpcy5wb2ludChieXRlcy5zbGljZSgxLCAxICsgbGVuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXMuc2xpY2UoMSArIGxlbiwgMSArIDIgKiBsZW4pKTtcblxuICAgIHJldHVybiByZXM7XG4gIH0gZWxzZSBpZiAoKGJ5dGVzWzBdID09PSAweDAyIHx8IGJ5dGVzWzBdID09PSAweDAzKSAmJlxuICAgICAgICAgICAgICBieXRlcy5sZW5ndGggLSAxID09PSBsZW4pIHtcbiAgICByZXR1cm4gdGhpcy5wb2ludEZyb21YKGJ5dGVzLnNsaWNlKDEsIDEgKyBsZW4pLCBieXRlc1swXSA9PT0gMHgwMyk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHBvaW50IGZvcm1hdCcpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5lbmNvZGVDb21wcmVzc2VkID0gZnVuY3Rpb24gZW5jb2RlQ29tcHJlc3NlZChlbmMpIHtcbiAgcmV0dXJuIHRoaXMuZW5jb2RlKGVuYywgdHJ1ZSk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9lbmNvZGUgPSBmdW5jdGlvbiBfZW5jb2RlKGNvbXBhY3QpIHtcbiAgdmFyIGxlbiA9IHRoaXMuY3VydmUucC5ieXRlTGVuZ3RoKCk7XG4gIHZhciB4ID0gdGhpcy5nZXRYKCkudG9BcnJheSgnYmUnLCBsZW4pO1xuXG4gIGlmIChjb21wYWN0KVxuICAgIHJldHVybiBbIHRoaXMuZ2V0WSgpLmlzRXZlbigpID8gMHgwMiA6IDB4MDMgXS5jb25jYXQoeCk7XG5cbiAgcmV0dXJuIFsgMHgwNCBdLmNvbmNhdCh4LCB0aGlzLmdldFkoKS50b0FycmF5KCdiZScsIGxlbikpIDtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGVuYywgY29tcGFjdCkge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMuX2VuY29kZShjb21wYWN0KSwgZW5jKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUucHJlY29tcHV0ZSA9IGZ1bmN0aW9uIHByZWNvbXB1dGUocG93ZXIpIHtcbiAgaWYgKHRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHByZWNvbXB1dGVkID0ge1xuICAgIGRvdWJsZXM6IG51bGwsXG4gICAgbmFmOiBudWxsLFxuICAgIGJldGE6IG51bGxcbiAgfTtcbiAgcHJlY29tcHV0ZWQubmFmID0gdGhpcy5fZ2V0TkFGUG9pbnRzKDgpO1xuICBwcmVjb21wdXRlZC5kb3VibGVzID0gdGhpcy5fZ2V0RG91Ymxlcyg0LCBwb3dlcik7XG4gIHByZWNvbXB1dGVkLmJldGEgPSB0aGlzLl9nZXRCZXRhKCk7XG4gIHRoaXMucHJlY29tcHV0ZWQgPSBwcmVjb21wdXRlZDtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2hhc0RvdWJsZXMgPSBmdW5jdGlvbiBfaGFzRG91YmxlcyhrKSB7XG4gIGlmICghdGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGRvdWJsZXMgPSB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXM7XG4gIGlmICghZG91YmxlcylcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIGRvdWJsZXMucG9pbnRzLmxlbmd0aCA+PSBNYXRoLmNlaWwoKGsuYml0TGVuZ3RoKCkgKyAxKSAvIGRvdWJsZXMuc3RlcCk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXREb3VibGVzID0gZnVuY3Rpb24gX2dldERvdWJsZXMoc3RlcCwgcG93ZXIpIHtcbiAgaWYgKHRoaXMucHJlY29tcHV0ZWQgJiYgdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzKVxuICAgIHJldHVybiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXM7XG5cbiAgdmFyIGRvdWJsZXMgPSBbIHRoaXMgXTtcbiAgdmFyIGFjYyA9IHRoaXM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG93ZXI7IGkgKz0gc3RlcCkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3RlcDsgaisrKVxuICAgICAgYWNjID0gYWNjLmRibCgpO1xuICAgIGRvdWJsZXMucHVzaChhY2MpO1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RlcDogc3RlcCxcbiAgICBwb2ludHM6IGRvdWJsZXNcbiAgfTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldE5BRlBvaW50cyA9IGZ1bmN0aW9uIF9nZXROQUZQb2ludHMod25kKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQubmFmKVxuICAgIHJldHVybiB0aGlzLnByZWNvbXB1dGVkLm5hZjtcblxuICB2YXIgcmVzID0gWyB0aGlzIF07XG4gIHZhciBtYXggPSAoMSA8PCB3bmQpIC0gMTtcbiAgdmFyIGRibCA9IG1heCA9PT0gMSA/IG51bGwgOiB0aGlzLmRibCgpO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IG1heDsgaSsrKVxuICAgIHJlc1tpXSA9IHJlc1tpIC0gMV0uYWRkKGRibCk7XG4gIHJldHVybiB7XG4gICAgd25kOiB3bmQsXG4gICAgcG9pbnRzOiByZXNcbiAgfTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldEJldGEgPSBmdW5jdGlvbiBfZ2V0QmV0YSgpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmRibHAgPSBmdW5jdGlvbiBkYmxwKGspIHtcbiAgdmFyIHIgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGs7IGkrKylcbiAgICByID0gci5kYmwoKTtcbiAgcmV0dXJuIHI7XG59O1xuIiwidmFyIGFzbjEgPSByZXF1aXJlKCcuL2FzbjEnKVxudmFyIGFlc2lkID0gcmVxdWlyZSgnLi9hZXNpZC5qc29uJylcbnZhciBmaXhQcm9jID0gcmVxdWlyZSgnLi9maXhQcm9jJylcbnZhciBjaXBoZXJzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMnKVxudmFyIGNvbXBhdCA9IHJlcXVpcmUoJ3Bia2RmMicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbm1vZHVsZS5leHBvcnRzID0gcGFyc2VLZXlzXG5cbmZ1bmN0aW9uIHBhcnNlS2V5cyAoYnVmZmVyKSB7XG4gIHZhciBwYXNzd29yZFxuICBpZiAodHlwZW9mIGJ1ZmZlciA9PT0gJ29iamVjdCcgJiYgIUJ1ZmZlci5pc0J1ZmZlcihidWZmZXIpKSB7XG4gICAgcGFzc3dvcmQgPSBidWZmZXIucGFzc3BocmFzZVxuICAgIGJ1ZmZlciA9IGJ1ZmZlci5rZXlcbiAgfVxuICBpZiAodHlwZW9mIGJ1ZmZlciA9PT0gJ3N0cmluZycpIHtcbiAgICBidWZmZXIgPSBCdWZmZXIuZnJvbShidWZmZXIpXG4gIH1cblxuICB2YXIgc3RyaXBwZWQgPSBmaXhQcm9jKGJ1ZmZlciwgcGFzc3dvcmQpXG5cbiAgdmFyIHR5cGUgPSBzdHJpcHBlZC50YWdcbiAgdmFyIGRhdGEgPSBzdHJpcHBlZC5kYXRhXG4gIHZhciBzdWJ0eXBlLCBuZGF0YVxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdDRVJUSUZJQ0FURSc6XG4gICAgICBuZGF0YSA9IGFzbjEuY2VydGlmaWNhdGUuZGVjb2RlKGRhdGEsICdkZXInKS50YnNDZXJ0aWZpY2F0ZS5zdWJqZWN0UHVibGljS2V5SW5mb1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgIGNhc2UgJ1BVQkxJQyBLRVknOlxuICAgICAgaWYgKCFuZGF0YSkge1xuICAgICAgICBuZGF0YSA9IGFzbjEuUHVibGljS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIH1cbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICBuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSA9IG5kYXRhLnN1YmplY3RQdWJsaWNLZXlcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2VjJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhXG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQwLjQuMSc6XG4gICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wdWJfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgICAgICBkYXRhOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ0VOQ1JZUFRFRCBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FbmNyeXB0ZWRQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIGRhdGEgPSBkZWNyeXB0KGRhdGEsIHBhc3N3b3JkKVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgIGNhc2UgJ1BSSVZBVEUgS0VZJzpcbiAgICAgIG5kYXRhID0gYXNuMS5Qcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHN1YnR5cGUgPSBuZGF0YS5hbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKVxuICAgICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTEzNTQ5LjEuMS4xJzpcbiAgICAgICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDUuMi4xJzpcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3VydmU6IG5kYXRhLmFsZ29yaXRobS5jdXJ2ZSxcbiAgICAgICAgICAgIHByaXZhdGVLZXk6IGFzbjEuRUNQcml2YXRlS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpLnByaXZhdGVLZXlcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnByaXZfa2V5ID0gYXNuMS5EU0FwYXJhbS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIHBhcmFtczogbmRhdGEuYWxnb3JpdGhtLnBhcmFtc1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSlcbiAgICAgIH1cbiAgICAgIC8vIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgICBjYXNlICdSU0EgUFVCTElDIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ1JTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4gYXNuMS5SU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICBjYXNlICdEU0EgUFJJVkFURSBLRVknOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgIHBhcmFtczogYXNuMS5EU0FQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIH1cbiAgICBjYXNlICdFQyBQUklWQVRFIEtFWSc6XG4gICAgICBkYXRhID0gYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3VydmU6IGRhdGEucGFyYW1ldGVycy52YWx1ZSxcbiAgICAgICAgcHJpdmF0ZUtleTogZGF0YS5wcml2YXRlS2V5XG4gICAgICB9XG4gICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICB9XG59XG5wYXJzZUtleXMuc2lnbmF0dXJlID0gYXNuMS5zaWduYXR1cmVcbmZ1bmN0aW9uIGRlY3J5cHQgKGRhdGEsIHBhc3N3b3JkKSB7XG4gIHZhciBzYWx0ID0gZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLnNhbHRcbiAgdmFyIGl0ZXJzID0gcGFyc2VJbnQoZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5rZGUua2RlcGFyYW1zLml0ZXJzLnRvU3RyaW5nKCksIDEwKVxuICB2YXIgYWxnbyA9IGFlc2lkW2RhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLmFsZ28uam9pbignLicpXVxuICB2YXIgaXYgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5pdlxuICB2YXIgY2lwaGVyVGV4dCA9IGRhdGEuc3ViamVjdFByaXZhdGVLZXlcbiAgdmFyIGtleWxlbiA9IHBhcnNlSW50KGFsZ28uc3BsaXQoJy0nKVsxXSwgMTApIC8gOFxuICB2YXIga2V5ID0gY29tcGF0LnBia2RmMlN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJzLCBrZXlsZW4sICdzaGExJylcbiAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihhbGdvLCBrZXksIGl2KVxuICB2YXIgb3V0ID0gW11cbiAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgb3V0LnB1c2goY2lwaGVyLmZpbmFsKCkpXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbiIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlO1xuXHQgICAgdmFyIFgzMldvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiB4NjQgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ194NjQgPSBDLng2NCA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEEgNjQtYml0IHdvcmQuXG5cdCAgICAgKi9cblx0ICAgIHZhciBYNjRXb3JkID0gQ194NjQuV29yZCA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgNjQtYml0IHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaGlnaCBUaGUgaGlnaCAzMiBiaXRzLlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgVGhlIGxvdyAzMiBiaXRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgeDY0V29yZCA9IENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDAwMDEwMjAzLCAweDA0MDUwNjA3KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoaGlnaCwgbG93KSB7XG5cdCAgICAgICAgICAgIHRoaXMuaGlnaCA9IGhpZ2g7XG5cdCAgICAgICAgICAgIHRoaXMubG93ID0gbG93O1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEJpdHdpc2UgTk9UcyB0aGlzIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgbmVnYXRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBuZWdhdGVkID0geDY0V29yZC5ub3QoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBub3Q6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB+dGhpcy5oaWdoO1xuXHQgICAgICAgICAgICAvLyB2YXIgbG93ID0gfnRoaXMubG93O1xuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBCaXR3aXNlIEFORHMgdGhpcyB3b3JkIHdpdGggdGhlIHBhc3NlZCB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBBTkQgd2l0aCB0aGlzIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgQU5EaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgYW5kZWQgPSB4NjRXb3JkLmFuZChhbm90aGVyWDY0V29yZCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gYW5kOiBmdW5jdGlvbiAod29yZCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCAmIHdvcmQuaGlnaDtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93ICYgd29yZC5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEJpdHdpc2UgT1JzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7WDY0V29yZH0gd29yZCBUaGUgeDY0LVdvcmQgdG8gT1Igd2l0aCB0aGlzIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgT1JpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBvcmVkID0geDY0V29yZC5vcihhbm90aGVyWDY0V29yZCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gb3I6IGZ1bmN0aW9uICh3b3JkKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoIHwgd29yZC5oaWdoO1xuXHQgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgfCB3b3JkLmxvdztcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQml0d2lzZSBYT1JzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7WDY0V29yZH0gd29yZCBUaGUgeDY0LVdvcmQgdG8gWE9SIHdpdGggdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIFhPUmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHhvcmVkID0geDY0V29yZC54b3IoYW5vdGhlclg2NFdvcmQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHhvcjogZnVuY3Rpb24gKHdvcmQpIHtcblx0ICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggXiB3b3JkLmhpZ2g7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyBeIHdvcmQubG93O1xuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBTaGlmdHMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgbGVmdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYml0cyB0byBzaGlmdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBzaGlmdGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHNoaWZ0ZWQgPSB4NjRXb3JkLnNoaWZ0TCgyNSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gc2hpZnRMOiBmdW5jdGlvbiAobikge1xuXHQgICAgICAgICAgICAvLyBpZiAobiA8IDMyKSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgaGlnaCA9ICh0aGlzLmhpZ2ggPDwgbikgfCAodGhpcy5sb3cgPj4+ICgzMiAtIG4pKTtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyA8PCBuO1xuXHQgICAgICAgICAgICAvLyB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmxvdyA8PCAobiAtIDMyKTtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBsb3cgPSAwO1xuXHQgICAgICAgICAgICAvLyB9XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFNoaWZ0cyB0aGlzIHdvcmQgbiBiaXRzIHRvIHRoZSByaWdodC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYml0cyB0byBzaGlmdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBzaGlmdGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHNoaWZ0ZWQgPSB4NjRXb3JkLnNoaWZ0Uig3KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyBzaGlmdFI6IGZ1bmN0aW9uIChuKSB7XG5cdCAgICAgICAgICAgIC8vIGlmIChuIDwgMzIpIHtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBsb3cgPSAodGhpcy5sb3cgPj4+IG4pIHwgKHRoaXMuaGlnaCA8PCAoMzIgLSBuKSk7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCA+Pj4gbjtcblx0ICAgICAgICAgICAgLy8gfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmhpZ2ggPj4+IChuIC0gMzIpO1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSAwO1xuXHQgICAgICAgICAgICAvLyB9XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJvdGF0ZXMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgbGVmdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYml0cyB0byByb3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgcm90YXRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciByb3RhdGVkID0geDY0V29yZC5yb3RMKDI1KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyByb3RMOiBmdW5jdGlvbiAobikge1xuXHQgICAgICAgICAgICAvLyByZXR1cm4gdGhpcy5zaGlmdEwobikub3IodGhpcy5zaGlmdFIoNjQgLSBuKSk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJvdGF0ZXMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgcmlnaHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gcm90YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHJvdGF0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgcm90YXRlZCA9IHg2NFdvcmQucm90Uig3KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyByb3RSOiBmdW5jdGlvbiAobikge1xuXHQgICAgICAgICAgICAvLyByZXR1cm4gdGhpcy5zaGlmdFIobikub3IodGhpcy5zaGlmdEwoNjQgLSBuKSk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEFkZHMgdGhpcyB3b3JkIHdpdGggdGhlIHBhc3NlZCB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBhZGQgd2l0aCB0aGlzIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgYWRkaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgYWRkZWQgPSB4NjRXb3JkLmFkZChhbm90aGVyWDY0V29yZCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gYWRkOiBmdW5jdGlvbiAod29yZCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgbG93ID0gKHRoaXMubG93ICsgd29yZC5sb3cpIHwgMDtcblx0ICAgICAgICAgICAgLy8gdmFyIGNhcnJ5ID0gKGxvdyA+Pj4gMCkgPCAodGhpcy5sb3cgPj4+IDApID8gMSA6IDA7XG5cdCAgICAgICAgICAgIC8vIHZhciBoaWdoID0gKHRoaXMuaGlnaCArIHdvcmQuaGlnaCArIGNhcnJ5KSB8IDA7XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQW4gYXJyYXkgb2YgNjQtYml0IHdvcmRzLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IHdvcmRzIFRoZSBhcnJheSBvZiBDcnlwdG9KUy54NjQuV29yZCBvYmplY3RzLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHNpZ0J5dGVzIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICovXG5cdCAgICB2YXIgWDY0V29yZEFycmF5ID0gQ194NjQuV29yZEFycmF5ID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgKE9wdGlvbmFsKSBBbiBhcnJheSBvZiBDcnlwdG9KUy54NjQuV29yZCBvYmplY3RzLlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaWdCeXRlcyAoT3B0aW9uYWwpIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhlIHdvcmRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMueDY0LldvcmRBcnJheS5jcmVhdGUoKTtcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMueDY0LldvcmRBcnJheS5jcmVhdGUoW1xuXHQgICAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpLFxuXHQgICAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MTgxOTFhMWIsIDB4MWMxZDFlMWYpXG5cdCAgICAgICAgICogICAgIF0pO1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy54NjQuV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyksXG5cdCAgICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgxODE5MWExYiwgMHgxYzFkMWUxZilcblx0ICAgICAgICAgKiAgICAgXSwgMTApO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uICh3b3Jkcywgc2lnQnl0ZXMpIHtcblx0ICAgICAgICAgICAgd29yZHMgPSB0aGlzLndvcmRzID0gd29yZHMgfHwgW107XG5cblx0ICAgICAgICAgICAgaWYgKHNpZ0J5dGVzICE9IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHdvcmRzLmxlbmd0aCAqIDg7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgdGhpcyA2NC1iaXQgd29yZCBhcnJheSB0byBhIDMyLWJpdCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q3J5cHRvSlMubGliLldvcmRBcnJheX0gVGhpcyB3b3JkIGFycmF5J3MgZGF0YSBhcyBhIDMyLWJpdCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgeDMyV29yZEFycmF5ID0geDY0V29yZEFycmF5LnRvWDMyKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdG9YMzI6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB4NjRXb3JkcyA9IHRoaXMud29yZHM7XG5cdCAgICAgICAgICAgIHZhciB4NjRXb3Jkc0xlbmd0aCA9IHg2NFdvcmRzLmxlbmd0aDtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB4MzJXb3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHg2NFdvcmRzTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciB4NjRXb3JkID0geDY0V29yZHNbaV07XG5cdCAgICAgICAgICAgICAgICB4MzJXb3Jkcy5wdXNoKHg2NFdvcmQuaGlnaCk7XG5cdCAgICAgICAgICAgICAgICB4MzJXb3Jkcy5wdXNoKHg2NFdvcmQubG93KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBYMzJXb3JkQXJyYXkuY3JlYXRlKHgzMldvcmRzLCB0aGlzLnNpZ0J5dGVzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZEFycmF5fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IHg2NFdvcmRBcnJheS5jbG9uZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICAvLyBDbG9uZSBcIndvcmRzXCIgYXJyYXlcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gY2xvbmUud29yZHMgPSB0aGlzLndvcmRzLnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgIC8vIENsb25lIGVhY2ggWDY0V29yZCBvYmplY3Rcblx0ICAgICAgICAgICAgdmFyIHdvcmRzTGVuZ3RoID0gd29yZHMubGVuZ3RoO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2ldID0gd29yZHNbaV0uY2xvbmUoKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUztcblxufSkpOyIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2hCYXNlID0gcmVxdWlyZSgnaGFzaC1iYXNlJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgQVJSQVkxNiA9IG5ldyBBcnJheSgxNilcblxuZnVuY3Rpb24gTUQ1ICgpIHtcbiAgSGFzaEJhc2UuY2FsbCh0aGlzLCA2NClcblxuICAvLyBzdGF0ZVxuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxufVxuXG5pbmhlcml0cyhNRDUsIEhhc2hCYXNlKVxuXG5NRDUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBNID0gQVJSQVkxNlxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIE1baV0gPSB0aGlzLl9ibG9jay5yZWFkSW50MzJMRShpICogNClcblxuICB2YXIgYSA9IHRoaXMuX2FcbiAgdmFyIGIgPSB0aGlzLl9iXG4gIHZhciBjID0gdGhpcy5fY1xuICB2YXIgZCA9IHRoaXMuX2RcblxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bMF0sIDB4ZDc2YWE0NzgsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxXSwgMHhlOGM3Yjc1NiwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsyXSwgMHgyNDIwNzBkYiwgMTcpXG4gIGIgPSBmbkYoYiwgYywgZCwgYSwgTVszXSwgMHhjMWJkY2VlZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVs0XSwgMHhmNTdjMGZhZiwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzVdLCAweDQ3ODdjNjJhLCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzZdLCAweGE4MzA0NjEzLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzddLCAweGZkNDY5NTAxLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzhdLCAweDY5ODA5OGQ4LCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bOV0sIDB4OGI0NGY3YWYsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTBdLCAweGZmZmY1YmIxLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzExXSwgMHg4OTVjZDdiZSwgMjIpXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVsxMl0sIDB4NmI5MDExMjIsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVsxM10sIDB4ZmQ5ODcxOTMsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bMTRdLCAweGE2Nzk0MzhlLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzE1XSwgMHg0OWI0MDgyMSwgMjIpXG5cbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzFdLCAweGY2MWUyNTYyLCA1KVxuICBkID0gZm5HKGQsIGEsIGIsIGMsIE1bNl0sIDB4YzA0MGIzNDAsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxMV0sIDB4MjY1ZTVhNTEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bMF0sIDB4ZTliNmM3YWEsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bNV0sIDB4ZDYyZjEwNWQsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxMF0sIDB4MDI0NDE0NTMsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVsxNV0sIDB4ZDhhMWU2ODEsIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bNF0sIDB4ZTdkM2ZiYzgsIDIwKVxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bOV0sIDB4MjFlMWNkZTYsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsxNF0sIDB4YzMzNzA3ZDYsIDkpXG4gIGMgPSBmbkcoYywgZCwgYSwgYiwgTVszXSwgMHhmNGQ1MGQ4NywgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVs4XSwgMHg0NTVhMTRlZCwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVsxM10sIDB4YTllM2U5MDUsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVsyXSwgMHhmY2VmYTNmOCwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzddLCAweDY3NmYwMmQ5LCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzEyXSwgMHg4ZDJhNGM4YSwgMjApXG5cbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzVdLCAweGZmZmEzOTQyLCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bOF0sIDB4ODc3MWY2ODEsIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bMTFdLCAweDZkOWQ2MTIyLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzE0XSwgMHhmZGU1MzgwYywgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxXSwgMHhhNGJlZWE0NCwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzRdLCAweDRiZGVjZmE5LCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzddLCAweGY2YmI0YjYwLCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzEwXSwgMHhiZWJmYmM3MCwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVsxM10sIDB4Mjg5YjdlYzYsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVswXSwgMHhlYWExMjdmYSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVszXSwgMHhkNGVmMzA4NSwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVs2XSwgMHgwNDg4MWQwNSwgMjMpXG4gIGEgPSBmbkgoYSwgYiwgYywgZCwgTVs5XSwgMHhkOWQ0ZDAzOSwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzEyXSwgMHhlNmRiOTllNSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVsxNV0sIDB4MWZhMjdjZjgsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMl0sIDB4YzRhYzU2NjUsIDIzKVxuXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVswXSwgMHhmNDI5MjI0NCwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzddLCAweDQzMmFmZjk3LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzE0XSwgMHhhYjk0MjNhNywgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVs1XSwgMHhmYzkzYTAzOSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVsxMl0sIDB4NjU1YjU5YzMsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVszXSwgMHg4ZjBjY2M5MiwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVsxMF0sIDB4ZmZlZmY0N2QsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMV0sIDB4ODU4NDVkZDEsIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bOF0sIDB4NmZhODdlNGYsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVsxNV0sIDB4ZmUyY2U2ZTAsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bNl0sIDB4YTMwMTQzMTQsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bMTNdLCAweDRlMDgxMWExLCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzRdLCAweGY3NTM3ZTgyLCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bMTFdLCAweGJkM2FmMjM1LCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzJdLCAweDJhZDdkMmJiLCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzldLCAweGViODZkMzkxLCAyMSlcblxuICB0aGlzLl9hID0gKHRoaXMuX2EgKyBhKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9iICsgYikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fYyArIGMpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2QgKyBkKSB8IDBcbn1cblxuTUQ1LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuRiAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5HIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGQpIHwgKGMgJiAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkggKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiBjIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkkgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChjIF4gKGIgfCAofmQpKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNRDVcbiIsIi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYWZpbnRvc2gvZW5kLW9mLXN0cmVhbSB3aXRoXG4vLyBwZXJtaXNzaW9uIGZyb20gdGhlIGF1dGhvciwgTWF0aGlhcyBCdXVzIChAbWFmaW50b3NoKS5cbid1c2Ugc3RyaWN0JztcblxudmFyIEVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFID0gcmVxdWlyZSgnLi4vLi4vLi4vZXJyb3JzJykuY29kZXMuRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0U7XG5cbmZ1bmN0aW9uIG9uY2UoY2FsbGJhY2spIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICBjYWxsZWQgPSB0cnVlO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gaXNSZXF1ZXN0KHN0cmVhbSkge1xuICByZXR1cm4gc3RyZWFtLnNldEhlYWRlciAmJiB0eXBlb2Ygc3RyZWFtLmFib3J0ID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBlb3Moc3RyZWFtLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHJldHVybiBlb3Moc3RyZWFtLCBudWxsLCBvcHRzKTtcbiAgaWYgKCFvcHRzKSBvcHRzID0ge307XG4gIGNhbGxiYWNrID0gb25jZShjYWxsYmFjayB8fCBub29wKTtcbiAgdmFyIHJlYWRhYmxlID0gb3B0cy5yZWFkYWJsZSB8fCBvcHRzLnJlYWRhYmxlICE9PSBmYWxzZSAmJiBzdHJlYW0ucmVhZGFibGU7XG4gIHZhciB3cml0YWJsZSA9IG9wdHMud3JpdGFibGUgfHwgb3B0cy53cml0YWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLndyaXRhYmxlO1xuXG4gIHZhciBvbmxlZ2FjeWZpbmlzaCA9IGZ1bmN0aW9uIG9ubGVnYWN5ZmluaXNoKCkge1xuICAgIGlmICghc3RyZWFtLndyaXRhYmxlKSBvbmZpbmlzaCgpO1xuICB9O1xuXG4gIHZhciB3cml0YWJsZUVuZGVkID0gc3RyZWFtLl93cml0YWJsZVN0YXRlICYmIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZDtcblxuICB2YXIgb25maW5pc2ggPSBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICB3cml0YWJsZSA9IGZhbHNlO1xuICAgIHdyaXRhYmxlRW5kZWQgPSB0cnVlO1xuICAgIGlmICghcmVhZGFibGUpIGNhbGxiYWNrLmNhbGwoc3RyZWFtKTtcbiAgfTtcblxuICB2YXIgcmVhZGFibGVFbmRlZCA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZSAmJiBzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZDtcblxuICB2YXIgb25lbmQgPSBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICByZWFkYWJsZSA9IGZhbHNlO1xuICAgIHJlYWRhYmxlRW5kZWQgPSB0cnVlO1xuICAgIGlmICghd3JpdGFibGUpIGNhbGxiYWNrLmNhbGwoc3RyZWFtKTtcbiAgfTtcblxuICB2YXIgb25lcnJvciA9IGZ1bmN0aW9uIG9uZXJyb3IoZXJyKSB7XG4gICAgY2FsbGJhY2suY2FsbChzdHJlYW0sIGVycik7XG4gIH07XG5cbiAgdmFyIG9uY2xvc2UgPSBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIHZhciBlcnI7XG5cbiAgICBpZiAocmVhZGFibGUgJiYgIXJlYWRhYmxlRW5kZWQpIHtcbiAgICAgIGlmICghc3RyZWFtLl9yZWFkYWJsZVN0YXRlIHx8ICFzdHJlYW0uX3JlYWRhYmxlU3RhdGUuZW5kZWQpIGVyciA9IG5ldyBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSgpO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc3RyZWFtLCBlcnIpO1xuICAgIH1cblxuICAgIGlmICh3cml0YWJsZSAmJiAhd3JpdGFibGVFbmRlZCkge1xuICAgICAgaWYgKCFzdHJlYW0uX3dyaXRhYmxlU3RhdGUgfHwgIXN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgZXJyID0gbmV3IEVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFKCk7XG4gICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChzdHJlYW0sIGVycik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBvbnJlcXVlc3QgPSBmdW5jdGlvbiBvbnJlcXVlc3QoKSB7XG4gICAgc3RyZWFtLnJlcS5vbignZmluaXNoJywgb25maW5pc2gpO1xuICB9O1xuXG4gIGlmIChpc1JlcXVlc3Qoc3RyZWFtKSkge1xuICAgIHN0cmVhbS5vbignY29tcGxldGUnLCBvbmZpbmlzaCk7XG4gICAgc3RyZWFtLm9uKCdhYm9ydCcsIG9uY2xvc2UpO1xuICAgIGlmIChzdHJlYW0ucmVxKSBvbnJlcXVlc3QoKTtlbHNlIHN0cmVhbS5vbigncmVxdWVzdCcsIG9ucmVxdWVzdCk7XG4gIH0gZWxzZSBpZiAod3JpdGFibGUgJiYgIXN0cmVhbS5fd3JpdGFibGVTdGF0ZSkge1xuICAgIC8vIGxlZ2FjeSBzdHJlYW1zXG4gICAgc3RyZWFtLm9uKCdlbmQnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLm9uKCdjbG9zZScsIG9ubGVnYWN5ZmluaXNoKTtcbiAgfVxuXG4gIHN0cmVhbS5vbignZW5kJywgb25lbmQpO1xuICBzdHJlYW0ub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgaWYgKG9wdHMuZXJyb3IgIT09IGZhbHNlKSBzdHJlYW0ub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIHN0cmVhbS5vbignY2xvc2UnLCBvbmNsb3NlKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2NvbXBsZXRlJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignYWJvcnQnLCBvbmNsb3NlKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ3JlcXVlc3QnLCBvbnJlcXVlc3QpO1xuICAgIGlmIChzdHJlYW0ucmVxKSBzdHJlYW0ucmVxLnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9ubGVnYWN5ZmluaXNoKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVvczsiLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG5cbnZhciBBUlJBWTE2ID0gbmV3IEFycmF5KDE2KVxuXG52YXIgemwgPSBbXG4gIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsXG4gIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsXG4gIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsXG4gIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbl1cblxudmFyIHpyID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dXG5cbnZhciBzbCA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl1cblxudmFyIHNyID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXVxuXG52YXIgaGwgPSBbMHgwMDAwMDAwMCwgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYywgMHhhOTUzZmQ0ZV1cbnZhciBociA9IFsweDUwYTI4YmU2LCAweDVjNGRkMTI0LCAweDZkNzAzZWYzLCAweDdhNmQ3NmU5LCAweDAwMDAwMDAwXVxuXG5mdW5jdGlvbiBSSVBFTUQxNjAgKCkge1xuICBIYXNoQmFzZS5jYWxsKHRoaXMsIDY0KVxuXG4gIC8vIHN0YXRlXG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG59XG5cbmluaGVyaXRzKFJJUEVNRDE2MCwgSGFzaEJhc2UpXG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHdvcmRzID0gQVJSQVkxNlxuICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyArK2opIHdvcmRzW2pdID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaiAqIDQpXG5cbiAgdmFyIGFsID0gdGhpcy5fYSB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYiB8IDBcbiAgdmFyIGNsID0gdGhpcy5fYyB8IDBcbiAgdmFyIGRsID0gdGhpcy5fZCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZSB8IDBcblxuICB2YXIgYXIgPSB0aGlzLl9hIHwgMFxuICB2YXIgYnIgPSB0aGlzLl9iIHwgMFxuICB2YXIgY3IgPSB0aGlzLl9jIHwgMFxuICB2YXIgZHIgPSB0aGlzLl9kIHwgMFxuICB2YXIgZXIgPSB0aGlzLl9lIHwgMFxuXG4gIC8vIGNvbXB1dGF0aW9uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkgKz0gMSkge1xuICAgIHZhciB0bFxuICAgIHZhciB0clxuICAgIGlmIChpIDwgMTYpIHtcbiAgICAgIHRsID0gZm4xKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFswXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuNShhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMF0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDMyKSB7XG4gICAgICB0bCA9IGZuMihhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMV0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjQoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzFdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCA0OCkge1xuICAgICAgdGwgPSBmbjMoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzJdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4zKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclsyXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgNjQpIHtcbiAgICAgIHRsID0gZm40KGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFszXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMihhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbM10sIHNyW2ldKVxuICAgIH0gZWxzZSB7IC8vIGlmIChpPDgwKSB7XG4gICAgICB0bCA9IGZuNShhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbNF0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjEoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzRdLCBzcltpXSlcbiAgICB9XG5cbiAgICBhbCA9IGVsXG4gICAgZWwgPSBkbFxuICAgIGRsID0gcm90bChjbCwgMTApXG4gICAgY2wgPSBibFxuICAgIGJsID0gdGxcblxuICAgIGFyID0gZXJcbiAgICBlciA9IGRyXG4gICAgZHIgPSByb3RsKGNyLCAxMClcbiAgICBjciA9IGJyXG4gICAgYnIgPSB0clxuICB9XG5cbiAgLy8gdXBkYXRlIHN0YXRlXG4gIHZhciB0ID0gKHRoaXMuX2IgKyBjbCArIGRyKSB8IDBcbiAgdGhpcy5fYiA9ICh0aGlzLl9jICsgZGwgKyBlcikgfCAwXG4gIHRoaXMuX2MgPSAodGhpcy5fZCArIGVsICsgYXIpIHwgMFxuICB0aGlzLl9kID0gKHRoaXMuX2UgKyBhbCArIGJyKSB8IDBcbiAgdGhpcy5fZSA9ICh0aGlzLl9hICsgYmwgKyBjcikgfCAwXG4gIHRoaXMuX2EgPSB0XG59XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gY3JlYXRlIHBhZGRpbmcgYW5kIGhhbmRsZSBibG9ja3NcbiAgdGhpcy5fYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSAweDgwXG4gIGlmICh0aGlzLl9ibG9ja09mZnNldCA+IDU2KSB7XG4gICAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNjQpXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFswXSwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzFdLCA2MClcbiAgdGhpcy5fdXBkYXRlKClcblxuICAvLyBwcm9kdWNlIHJlc3VsdFxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jID8gQnVmZmVyLmFsbG9jKDIwKSA6IG5ldyBCdWZmZXIoMjApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZSwgMTYpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuMSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIGMgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuMiAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm4zIChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiB8ICh+YykpIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjQgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgZCkgfCAoYyAmICh+ZCkpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuNSAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIChjIHwgKH5kKSkpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSSVBFTUQxNjBcbiIsInZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTSEEgKGFsZ29yaXRobSkge1xuICBhbGdvcml0aG0gPSBhbGdvcml0aG0udG9Mb3dlckNhc2UoKVxuXG4gIHZhciBBbGdvcml0aG0gPSBleHBvcnRzW2FsZ29yaXRobV1cbiAgaWYgKCFBbGdvcml0aG0pIHRocm93IG5ldyBFcnJvcihhbGdvcml0aG0gKyAnIGlzIG5vdCBzdXBwb3J0ZWQgKHdlIGFjY2VwdCBwdWxsIHJlcXVlc3RzKScpXG5cbiAgcmV0dXJuIG5ldyBBbGdvcml0aG0oKVxufVxuXG5leHBvcnRzLnNoYSA9IHJlcXVpcmUoJy4vc2hhJylcbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhMScpXG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhMjI0JylcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYTM4NCcpXG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhNTEyJylcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGFzeW5jV3JpdGUgPSAhcHJvY2Vzcy5icm93c2VyICYmIFsndjAuMTAnLCAndjAuOS4nXS5pbmRleE9mKHByb2Nlc3MudmVyc2lvbi5zbGljZSgwLCA1KSkgPiAtMSA/IHNldEltbWVkaWF0ZSA6IHBuYS5uZXh0VGljaztcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGludGVybmFsVXRpbCA9IHtcbiAgZGVwcmVjYXRlOiByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpXG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHdyaXRhYmxlSHdtID0gb3B0aW9ucy53cml0YWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG5cbiAgLy8gZHJhaW4gZXZlbnQgZmxhZy5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicsICdERVAwMDAzJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7XG5cbi8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxudmFyIHJlYWxIYXNJbnN0YW5jZTtcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RhdGU7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdG9vLlxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcbiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLlxuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICBpZiAoIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSB7XG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3kuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5IGZvciB0aGUgcGFydGljdWxhclxuLy8gbW9kZSB0aGUgc3RyZWFtIGlzIGluLiBDdXJyZW50bHkgdGhpcyBtZWFucyB0aGF0IGBudWxsYCBpcyBuZXZlciBhY2NlcHRlZFxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgdmFyIGVyID0gZmFsc2U7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcblxuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG5cbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBpZiAoIWlzQnVmKSB7XG4gICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuXG4gIGlmIChzeW5jKSB7XG4gICAgLy8gZGVmZXIgdGhlIGNhbGxiYWNrIGlmIHdlIGFyZSBiZWluZyBjYWxsZWQgc3luY2hyb25vdXNseVxuICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrXG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuICAgIHBuYS5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYnV0IGZpbmlzaCBtdXN0XG4gICAgLy8gYWx3YXlzIGZvbGxvdyBlcnJvclxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG5cbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkge1xuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8qPHJlcGxhY2VtZW50PiovXG4gICAgICBhc3luY1dyaXRlKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICAvKjwvcmVwbGFjZW1lbnQ+Ki9cbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cbi8vIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGluIHRoZSBidWZmZXIgd2FpdGluZywgdGhlbiBwcm9jZXNzIGl0XG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcblxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcblxuICAgIC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTtcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignX3dyaXRlKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcblxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH1cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQgJiYgIXN0YXRlLmZpbmFsQ2FsbGVkKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICAgIHN0YXRlLmZpbmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHBuYS5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgcG5hLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUsIGVycikge1xuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcbiAgd2hpbGUgKGVudHJ5KSB7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXJyKTtcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gIH1cbiAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBjb3JrUmVxO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5lbmQoKTtcbiAgY2IoZXJyKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBDaXBoZXIob3B0aW9ucykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gIHRoaXMudHlwZSA9IHRoaXMub3B0aW9ucy50eXBlO1xuICB0aGlzLmJsb2NrU2l6ZSA9IDg7XG4gIHRoaXMuX2luaXQoKTtcblxuICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbn1cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyO1xuXG5DaXBoZXIucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gX2luaXQoKSB7XG4gIC8vIE1pZ2h0IGJlIG92ZXJyaWRlZFxufTtcblxuQ2lwaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZGF0YSkge1xuICBpZiAoZGF0YS5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0aGlzLnR5cGUgPT09ICdkZWNyeXB0JylcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRGVjcnlwdChkYXRhKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl91cGRhdGVFbmNyeXB0KGRhdGEpO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fYnVmZmVyID0gZnVuY3Rpb24gX2J1ZmZlcihkYXRhLCBvZmYpIHtcbiAgLy8gQXBwZW5kIGRhdGEgdG8gYnVmZmVyXG4gIHZhciBtaW4gPSBNYXRoLm1pbih0aGlzLmJ1ZmZlci5sZW5ndGggLSB0aGlzLmJ1ZmZlck9mZiwgZGF0YS5sZW5ndGggLSBvZmYpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbjsgaSsrKVxuICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyT2ZmICsgaV0gPSBkYXRhW29mZiArIGldO1xuICB0aGlzLmJ1ZmZlck9mZiArPSBtaW47XG5cbiAgLy8gU2hpZnQgbmV4dFxuICByZXR1cm4gbWluO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmx1c2hCdWZmZXIgPSBmdW5jdGlvbiBfZmx1c2hCdWZmZXIob3V0LCBvZmYpIHtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIG9mZik7XG4gIHRoaXMuYnVmZmVyT2ZmID0gMDtcbiAgcmV0dXJuIHRoaXMuYmxvY2tTaXplO1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRW5jcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVFbmNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSB8IDA7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgaWYgKHRoaXMuYnVmZmVyT2ZmICE9PSAwKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcblxuICAgIGlmICh0aGlzLmJ1ZmZlck9mZiA9PT0gdGhpcy5idWZmZXIubGVuZ3RoKVxuICAgICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIFdyaXRlIGJsb2Nrc1xuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGggLSAoKGRhdGEubGVuZ3RoIC0gaW5wdXRPZmYpICUgdGhpcy5ibG9ja1NpemUpO1xuICBmb3IgKDsgaW5wdXRPZmYgPCBtYXg7IGlucHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgdGhpcy5fdXBkYXRlKGRhdGEsIGlucHV0T2ZmLCBvdXQsIG91dHB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuYmxvY2tTaXplO1xuICB9XG5cbiAgLy8gUXVldWUgcmVzdFxuICBmb3IgKDsgaW5wdXRPZmYgPCBkYXRhLmxlbmd0aDsgaW5wdXRPZmYrKywgdGhpcy5idWZmZXJPZmYrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZl0gPSBkYXRhW2lucHV0T2ZmXTtcblxuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlRGVjcnlwdCA9IGZ1bmN0aW9uIF91cGRhdGVEZWNyeXB0KGRhdGEpIHtcbiAgdmFyIGlucHV0T2ZmID0gMDtcbiAgdmFyIG91dHB1dE9mZiA9IDA7XG5cbiAgdmFyIGNvdW50ID0gTWF0aC5jZWlsKCh0aGlzLmJ1ZmZlck9mZiArIGRhdGEubGVuZ3RoKSAvIHRoaXMuYmxvY2tTaXplKSAtIDE7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoY291bnQgKiB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogb3B0aW1pemUgaXQsIHRoaXMgaXMgZmFyIGZyb20gb3B0aW1hbFxuICBmb3IgKDsgY291bnQgPiAwOyBjb3VudC0tKSB7XG4gICAgaW5wdXRPZmYgKz0gdGhpcy5fYnVmZmVyKGRhdGEsIGlucHV0T2ZmKTtcbiAgICBvdXRwdXRPZmYgKz0gdGhpcy5fZmx1c2hCdWZmZXIob3V0LCBvdXRwdXRPZmYpO1xuICB9XG5cbiAgLy8gQnVmZmVyIHJlc3Qgb2YgdGhlIGlucHV0XG4gIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuZmluYWwgPSBmdW5jdGlvbiBmaW5hbChidWZmZXIpIHtcbiAgdmFyIGZpcnN0O1xuICBpZiAoYnVmZmVyKVxuICAgIGZpcnN0ID0gdGhpcy51cGRhdGUoYnVmZmVyKTtcblxuICB2YXIgbGFzdDtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbEVuY3J5cHQoKTtcbiAgZWxzZVxuICAgIGxhc3QgPSB0aGlzLl9maW5hbERlY3J5cHQoKTtcblxuICBpZiAoZmlyc3QpXG4gICAgcmV0dXJuIGZpcnN0LmNvbmNhdChsYXN0KTtcbiAgZWxzZVxuICAgIHJldHVybiBsYXN0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gX3BhZChidWZmZXIsIG9mZikge1xuICBpZiAob2ZmID09PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB3aGlsZSAob2ZmIDwgYnVmZmVyLmxlbmd0aClcbiAgICBidWZmZXJbb2ZmKytdID0gMDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRW5jcnlwdCA9IGZ1bmN0aW9uIF9maW5hbEVuY3J5cHQoKSB7XG4gIGlmICghdGhpcy5fcGFkKHRoaXMuYnVmZmVyLCB0aGlzLmJ1ZmZlck9mZikpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBvdXQgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLl91cGRhdGUodGhpcy5idWZmZXIsIDAsIG91dCwgMCk7XG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl91bnBhZCA9IGZ1bmN0aW9uIF91bnBhZChidWZmZXIpIHtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZpbmFsRGVjcnlwdCA9IGZ1bmN0aW9uIF9maW5hbERlY3J5cHQoKSB7XG4gIGFzc2VydC5lcXVhbCh0aGlzLmJ1ZmZlck9mZiwgdGhpcy5ibG9ja1NpemUsICdOb3QgZW5vdWdoIGRhdGEgdG8gZGVjcnlwdCcpO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fZmx1c2hCdWZmZXIob3V0LCAwKTtcblxuICByZXR1cm4gdGhpcy5fdW5wYWQob3V0KTtcbn07XG4iLCJ2YXIgY2lwaGVycyA9IHJlcXVpcmUoJy4vZW5jcnlwdGVyJylcbnZhciBkZWNpcGhlcnMgPSByZXF1aXJlKCcuL2RlY3J5cHRlcicpXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL21vZGVzL2xpc3QuanNvbicpXG5cbmZ1bmN0aW9uIGdldENpcGhlcnMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMobW9kZXMpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyID0gZXhwb3J0cy5DaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGV4cG9ydHMuQ2lwaGVyaXYgPSBjaXBoZXJzLmNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gZXhwb3J0cy5EZWNpcGhlciA9IGRlY2lwaGVycy5jcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gZXhwb3J0cy5EZWNpcGhlcml2ID0gZGVjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXZcbmV4cG9ydHMubGlzdENpcGhlcnMgPSBleHBvcnRzLmdldENpcGhlcnMgPSBnZXRDaXBoZXJzXG4iLCJ2YXIgbW9kZU1vZHVsZXMgPSB7XG4gIEVDQjogcmVxdWlyZSgnLi9lY2InKSxcbiAgQ0JDOiByZXF1aXJlKCcuL2NiYycpLFxuICBDRkI6IHJlcXVpcmUoJy4vY2ZiJyksXG4gIENGQjg6IHJlcXVpcmUoJy4vY2ZiOCcpLFxuICBDRkIxOiByZXF1aXJlKCcuL2NmYjEnKSxcbiAgT0ZCOiByZXF1aXJlKCcuL29mYicpLFxuICBDVFI6IHJlcXVpcmUoJy4vY3RyJyksXG4gIEdDTTogcmVxdWlyZSgnLi9jdHInKVxufVxuXG52YXIgbW9kZXMgPSByZXF1aXJlKCcuL2xpc3QuanNvbicpXG5cbmZvciAodmFyIGtleSBpbiBtb2Rlcykge1xuICBtb2Rlc1trZXldLm1vZHVsZSA9IG1vZGVNb2R1bGVzW21vZGVzW2tleV0ubW9kZV1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb2Rlc1xuIiwidmFyIHI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmFuZChsZW4pIHtcbiAgaWYgKCFyKVxuICAgIHIgPSBuZXcgUmFuZChudWxsKTtcblxuICByZXR1cm4gci5nZW5lcmF0ZShsZW4pO1xufTtcblxuZnVuY3Rpb24gUmFuZChyYW5kKSB7XG4gIHRoaXMucmFuZCA9IHJhbmQ7XG59XG5tb2R1bGUuZXhwb3J0cy5SYW5kID0gUmFuZDtcblxuUmFuZC5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShsZW4pIHtcbiAgcmV0dXJuIHRoaXMuX3JhbmQobGVuKTtcbn07XG5cbi8vIEVtdWxhdGUgY3J5cHRvIEFQSSB1c2luZyByYW5keVxuUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gIGlmICh0aGlzLnJhbmQuZ2V0Qnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMucmFuZC5nZXRCeXRlcyhuKTtcblxuICB2YXIgcmVzID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKVxuICAgIHJlc1tpXSA9IHRoaXMucmFuZC5nZXRCeXRlKCk7XG4gIHJldHVybiByZXM7XG59O1xuXG5pZiAodHlwZW9mIHNlbGYgPT09ICdvYmplY3QnKSB7XG4gIGlmIChzZWxmLmNyeXB0byAmJiBzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBNb2Rlcm4gYnJvd3NlcnNcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHNlbGYuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHNlbGYubXNDcnlwdG8gJiYgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBJRVxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcblxuICAvLyBTYWZhcmkncyBXZWJXb3JrZXJzIGRvIG5vdCBoYXZlIGBjcnlwdG9gXG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBPbGQganVua1xuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICB9O1xuICB9XG59IGVsc2Uge1xuICAvLyBOb2RlLmpzIG9yIFdlYiB3b3JrZXIgd2l0aCBubyBjcnlwdG8gc3VwcG9ydFxuICB0cnkge1xuICAgIHZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCcpO1xuXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKG4pO1xuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxufVxuIiwidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGNydDtcbmZ1bmN0aW9uIGJsaW5kKHByaXYpIHtcbiAgdmFyIHIgPSBnZXRyKHByaXYpO1xuICB2YXIgYmxpbmRlciA9IHIudG9SZWQoYm4ubW9udChwcml2Lm1vZHVsdXMpKVxuICAucmVkUG93KG5ldyBibihwcml2LnB1YmxpY0V4cG9uZW50KSkuZnJvbVJlZCgpO1xuICByZXR1cm4ge1xuICAgIGJsaW5kZXI6IGJsaW5kZXIsXG4gICAgdW5ibGluZGVyOnIuaW52bShwcml2Lm1vZHVsdXMpXG4gIH07XG59XG5mdW5jdGlvbiBjcnQobXNnLCBwcml2KSB7XG4gIHZhciBibGluZHMgPSBibGluZChwcml2KTtcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciBtb2QgPSBibi5tb250KHByaXYubW9kdWx1cyk7XG4gIHZhciBibGluZGVkID0gbmV3IGJuKG1zZykubXVsKGJsaW5kcy5ibGluZGVyKS51bW9kKHByaXYubW9kdWx1cyk7XG4gIHZhciBjMSA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMSkpO1xuICB2YXIgYzIgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTIpKTtcbiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50O1xuICB2YXIgcCA9IHByaXYucHJpbWUxO1xuICB2YXIgcSA9IHByaXYucHJpbWUyO1xuICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpO1xuICB2YXIgbTIgPSBjMi5yZWRQb3cocHJpdi5leHBvbmVudDIpO1xuICBtMSA9IG0xLmZyb21SZWQoKTtcbiAgbTIgPSBtMi5mcm9tUmVkKCk7XG4gIHZhciBoID0gbTEuaXN1YihtMikuaW11bChxaW52KS51bW9kKHApO1xuICBoLmltdWwocSk7XG4gIG0yLmlhZGQoaCk7XG4gIHJldHVybiBuZXcgQnVmZmVyKG0yLmltdWwoYmxpbmRzLnVuYmxpbmRlcikudW1vZChwcml2Lm1vZHVsdXMpLnRvQXJyYXkoZmFsc2UsIGxlbikpO1xufVxuY3J0LmdldHIgPSBnZXRyO1xuZnVuY3Rpb24gZ2V0cihwcml2KSB7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgd2hpbGUgKHIuY21wKHByaXYubW9kdWx1cykgPj0gIDAgfHwgIXIudW1vZChwcml2LnByaW1lMSkgfHwgIXIudW1vZChwcml2LnByaW1lMikpIHtcbiAgICByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpO1xuICB9XG4gIHJldHVybiByO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSBleHBvcnRzO1xuXG5lbGxpcHRpYy52ZXJzaW9uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbmVsbGlwdGljLnV0aWxzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy91dGlscycpO1xuZWxsaXB0aWMucmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcbmVsbGlwdGljLmN1cnZlID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZScpO1xuZWxsaXB0aWMuY3VydmVzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZXMnKTtcblxuLy8gUHJvdG9jb2xzXG5lbGxpcHRpYy5lYyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWMnKTtcbmVsbGlwdGljLmVkZHNhID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9lZGRzYScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmVzID0gZXhwb3J0cztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgY3VydmUgPSByZXF1aXJlKCcuL2N1cnZlJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFByZXNldEN1cnZlKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ3Nob3J0JylcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLnNob3J0KG9wdGlvbnMpO1xuICBlbHNlIGlmIChvcHRpb25zLnR5cGUgPT09ICdlZHdhcmRzJylcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLmVkd2FyZHMob3B0aW9ucyk7XG4gIGVsc2VcbiAgICB0aGlzLmN1cnZlID0gbmV3IGN1cnZlLm1vbnQob3B0aW9ucyk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcbiAgdGhpcy5uID0gdGhpcy5jdXJ2ZS5uO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG5cbiAgYXNzZXJ0KHRoaXMuZy52YWxpZGF0ZSgpLCAnSW52YWxpZCBjdXJ2ZScpO1xuICBhc3NlcnQodGhpcy5nLm11bCh0aGlzLm4pLmlzSW5maW5pdHkoKSwgJ0ludmFsaWQgY3VydmUsIEcqTiAhPSBPJyk7XG59XG5jdXJ2ZXMuUHJlc2V0Q3VydmUgPSBQcmVzZXRDdXJ2ZTtcblxuZnVuY3Rpb24gZGVmaW5lQ3VydmUobmFtZSwgb3B0aW9ucykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJ2ZSA9IG5ldyBQcmVzZXRDdXJ2ZShvcHRpb25zKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdXJ2ZXMsIG5hbWUsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogY3VydmVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGN1cnZlO1xuICAgIH1cbiAgfSk7XG59XG5cbmRlZmluZUN1cnZlKCdwMTkyJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ3AxOTInLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnNjQyMTA1MTkgZTU5YzgwZTcgMGZhN2U5YWIgNzIyNDMwNDkgZmViOGRlZWMgYzE0NmI5YjEnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgOTlkZWY4MzYgMTQ2YmM5YjEgYjRkMjI4MzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMTg4ZGE4MGUgYjAzMDkwZjYgN2NiZjIwZWIgNDNhMTg4MDAgZjRmZjBhZmQgODJmZjEwMTInLFxuICAgICcwNzE5MmI5NSBmZmM4ZGE3OCA2MzEwMTFlZCA2YjI0Y2RkNSA3M2Y5NzdhMSAxZTc5NDgxMSdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwMjI0Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ3AyMjQnLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUnLFxuICBiOiAnYjQwNTBhODUgMGMwNGIzYWIgZjU0MTMyNTYgNTA0NGIwYjcgZDdiZmQ4YmEgMjcwYjM5NDMgMjM1NWZmYjQnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZjE2YTIgZTBiOGYwM2UgMTNkZDI5NDUgNWM1YzJhM2QnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnYjcwZTBjYmQgNmJiNGJmN2YgMzIxMzkwYjkgNGEwM2MxZDMgNTZjMjExMjIgMzQzMjgwZDYgMTE1YzFkMjEnLFxuICAgICdiZDM3NjM4OCBiNWY3MjNmYiA0YzIyZGZlNiBjZDQzNzVhMCA1YTA3NDc2NCA0NGQ1ODE5OSA4NTAwN2UzNCdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwMjU2Jywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIDAwMDAwMDAxIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzVhYzYzNWQ4IGFhM2E5M2U3IGIzZWJiZDU1IDc2OTg4NmJjIDY1MWQwNmIwIGNjNTNiMGY2IDNiY2UzYzNlIDI3ZDI2MDRiJyxcbiAgbjogJ2ZmZmZmZmZmIDAwMDAwMDAwIGZmZmZmZmZmIGZmZmZmZmZmIGJjZTZmYWFkIGE3MTc5ZTg0IGYzYjljYWMyIGZjNjMyNTUxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzZiMTdkMWYyIGUxMmM0MjQ3IGY4YmNlNmU1IDYzYTQ0MGYyIDc3MDM3ZDgxIDJkZWIzM2EwIGY0YTEzOTQ1IGQ4OThjMjk2JyxcbiAgICAnNGZlMzQyZTIgZmUxYTdmOWIgOGVlN2ViNGEgN2MwZjllMTYgMmJjZTMzNTcgNmIzMTVlY2UgY2JiNjQwNjggMzdiZjUxZjUnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDM4NCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmUgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmMnLFxuICBiOiAnYjMzMTJmYTcgZTIzZWU3ZTQgOTg4ZTA1NmIgZTNmODJkMTkgMTgxZDljNmUgZmU4MTQxMTIgMDMxNDA4OGYgJyArXG4gICAgICc1MDEzODc1YSBjNjU2Mzk4ZCA4YTJlZDE5ZCAyYTg1YzhlZCBkM2VjMmFlZicsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBjNzYzNGQ4MSAnICtcbiAgICAgJ2Y0MzcyZGRmIDU4MWEwZGIyIDQ4YjBhNzdhIGVjZWMxOTZhIGNjYzUyOTczJyxcbiAgaGFzaDogaGFzaC5zaGEzODQsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2FhODdjYTIyIGJlOGIwNTM3IDhlYjFjNzFlIGYzMjBhZDc0IDZlMWQzYjYyIDhiYTc5Yjk4IDU5Zjc0MWUwIDgyNTQyYTM4ICcgK1xuICAgICc1NTAyZjI1ZCBiZjU1Mjk2YyAzYTU0NWUzOCA3Mjc2MGFiNycsXG4gICAgJzM2MTdkZTRhIDk2MjYyYzZmIDVkOWU5OGJmIDkyOTJkYzI5IGY4ZjQxZGJkIDI4OWExNDdjIGU5ZGEzMTEzIGI1ZjBiOGMwICcgK1xuICAgICcwYTYwYjFjZSAxZDdlODE5ZCA3YTQzMWQ3YyA5MGVhMGU1ZidcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdwNTIxJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogbnVsbCxcbiAgcDogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnMDAwMDAwNTEgOTUzZWI5NjEgOGUxYzlhMWYgOTI5YTIxYTAgYjY4NTQwZWUgYTJkYTcyNWIgJyArXG4gICAgICc5OWIzMTVmMyBiOGI0ODk5MSA4ZWYxMDllMSA1NjE5Mzk1MSBlYzdlOTM3YiAxNjUyYzBiZCAnICtcbiAgICAgJzNiYjFiZjA3IDM1NzNkZjg4IDNkMmMzNGYxIGVmNDUxZmQ0IDZiNTAzZjAwJyxcbiAgbjogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmEgNTE4Njg3ODMgYmYyZjk2NmIgN2ZjYzAxNDggJyArXG4gICAgICdmNzA5YTVkMCAzYmI1YzliOCA4OTljNDdhZSBiYjZmYjcxZSA5MTM4NjQwOScsXG4gIGhhc2g6IGhhc2guc2hhNTEyLFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICcwMDAwMDBjNiA4NThlMDZiNyAwNDA0ZTljZCA5ZTNlY2I2NiAyMzk1YjQ0MiA5YzY0ODEzOSAnICtcbiAgICAnMDUzZmI1MjEgZjgyOGFmNjAgNmI0ZDNkYmEgYTE0YjVlNzcgZWZlNzU5MjggZmUxZGMxMjcgJyArXG4gICAgJ2EyZmZhOGRlIDMzNDhiM2MxIDg1NmE0MjliIGY5N2U3ZTMxIGMyZTViZDY2JyxcbiAgICAnMDAwMDAxMTggMzkyOTZhNzggOWEzYmMwMDQgNWM4YTVmYjQgMmM3ZDFiZDkgOThmNTQ0NDkgJyArXG4gICAgJzU3OWI0NDY4IDE3YWZiZDE3IDI3M2U2NjJjIDk3ZWU3Mjk5IDVlZjQyNjQwIGM1NTBiOTAxICcgK1xuICAgICczZmFkMDc2MSAzNTNjNzA4NiBhMjcyYzI0MCA4OGJlOTQ3NiA5ZmQxNjY1MCdcbiAgXVxufSk7XG5cbmRlZmluZUN1cnZlKCdjdXJ2ZTI1NTE5Jywge1xuICB0eXBlOiAnbW9udCcsXG4gIHByaW1lOiAncDI1NTE5JyxcbiAgcDogJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnLFxuICBhOiAnNzZkMDYnLFxuICBiOiAnMScsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzknXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnZWQyNTUxOScsIHtcbiAgdHlwZTogJ2Vkd2FyZHMnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJy0xJyxcbiAgYzogJzEnLFxuICAvLyAtMTIxNjY1ICogKDEyMTY2Nl4oLTEpKSAobW9kIFApXG4gIGQ6ICc1MjAzNmNlZTJiNmZmZTczIDhjYzc0MDc5Nzc3OWU4OTggMDA3MDBhNGQ0MTQxZDhhYiA3NWViNGRjYTEzNTk3OGEzJyxcbiAgbjogJzEwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMCAxNGRlZjlkZWEyZjc5Y2Q2IDU4MTI2MzFhNWNmNWQzZWQnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMjE2OTM2ZDNjZDZlNTNmZWMwYTRlMjMxZmRkNmRjNWM2OTJjYzc2MDk1MjVhN2IyYzk1NjJkNjA4ZjI1ZDUxYScsXG5cbiAgICAvLyA0LzVcbiAgICAnNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY1OCdcbiAgXVxufSk7XG5cbnZhciBwcmU7XG50cnkge1xuICBwcmUgPSByZXF1aXJlKCcuL3ByZWNvbXB1dGVkL3NlY3AyNTZrMScpO1xufSBjYXRjaCAoZSkge1xuICBwcmUgPSB1bmRlZmluZWQ7XG59XG5cbmRlZmluZUN1cnZlKCdzZWNwMjU2azEnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAnazI1NicsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicsXG4gIGE6ICcwJyxcbiAgYjogJzcnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgYmFhZWRjZTYgYWY0OGEwM2IgYmZkMjVlOGMgZDAzNjQxNDEnLFxuICBoOiAnMScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuXG4gIC8vIFByZWNvbXB1dGVkIGVuZG9tb3JwaGlzbVxuICBiZXRhOiAnN2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZScsXG4gIGxhbWJkYTogJzUzNjNhZDRjYzA1YzMwZTBhNTI2MWMwMjg4MTI2NDVhMTIyZTIyZWEyMDgxNjY3OGRmMDI5NjdjMWIyM2JkNzInLFxuICBiYXNpczogW1xuICAgIHtcbiAgICAgIGE6ICczMDg2ZDIyMWE3ZDQ2YmNkZTg2YzkwZTQ5Mjg0ZWIxNScsXG4gICAgICBiOiAnLWU0NDM3ZWQ2MDEwZTg4Mjg2ZjU0N2ZhOTBhYmZlNGMzJ1xuICAgIH0sXG4gICAge1xuICAgICAgYTogJzExNGNhNTBmN2E4ZTJmM2Y2NTdjMTEwOGQ5ZDQ0Y2ZkOCcsXG4gICAgICBiOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnXG4gICAgfVxuICBdLFxuXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzc5YmU2NjdlZjlkY2JiYWM1NWEwNjI5NWNlODcwYjA3MDI5YmZjZGIyZGNlMjhkOTU5ZjI4MTViMTZmODE3OTgnLFxuICAgICc0ODNhZGE3NzI2YTNjNDY1NWRhNGZiZmMwZTExMDhhOGZkMTdiNDQ4YTY4NTU0MTk5YzQ3ZDA4ZmZiMTBkNGI4JyxcbiAgICBwcmVcbiAgXVxufSk7XG4iLCJ2YXIgaGFzaCA9IGV4cG9ydHM7XG5cbmhhc2gudXRpbHMgPSByZXF1aXJlKCcuL2hhc2gvdXRpbHMnKTtcbmhhc2guY29tbW9uID0gcmVxdWlyZSgnLi9oYXNoL2NvbW1vbicpO1xuaGFzaC5zaGEgPSByZXF1aXJlKCcuL2hhc2gvc2hhJyk7XG5oYXNoLnJpcGVtZCA9IHJlcXVpcmUoJy4vaGFzaC9yaXBlbWQnKTtcbmhhc2guaG1hYyA9IHJlcXVpcmUoJy4vaGFzaC9obWFjJyk7XG5cbi8vIFByb3h5IGhhc2ggZnVuY3Rpb25zIHRvIHRoZSBtYWluIG9iamVjdFxuaGFzaC5zaGExID0gaGFzaC5zaGEuc2hhMTtcbmhhc2guc2hhMjU2ID0gaGFzaC5zaGEuc2hhMjU2O1xuaGFzaC5zaGEyMjQgPSBoYXNoLnNoYS5zaGEyMjQ7XG5oYXNoLnNoYTM4NCA9IGhhc2guc2hhLnNoYTM4NDtcbmhhc2guc2hhNTEyID0gaGFzaC5zaGEuc2hhNTEyO1xuaGFzaC5yaXBlbWQxNjAgPSBoYXNoLnJpcGVtZC5yaXBlbWQxNjA7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbnZhciBzYWZlciA9IHt9XG5cbnZhciBrZXlcblxuZm9yIChrZXkgaW4gYnVmZmVyKSB7XG4gIGlmICghYnVmZmVyLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlXG4gIGlmIChrZXkgPT09ICdTbG93QnVmZmVyJyB8fCBrZXkgPT09ICdCdWZmZXInKSBjb250aW51ZVxuICBzYWZlcltrZXldID0gYnVmZmVyW2tleV1cbn1cblxudmFyIFNhZmVyID0gc2FmZXIuQnVmZmVyID0ge31cbmZvciAoa2V5IGluIEJ1ZmZlcikge1xuICBpZiAoIUJ1ZmZlci5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZVxuICBpZiAoa2V5ID09PSAnYWxsb2NVbnNhZmUnIHx8IGtleSA9PT0gJ2FsbG9jVW5zYWZlU2xvdycpIGNvbnRpbnVlXG4gIFNhZmVyW2tleV0gPSBCdWZmZXJba2V5XVxufVxuXG5zYWZlci5CdWZmZXIucHJvdG90eXBlID0gQnVmZmVyLnByb3RvdHlwZVxuXG5pZiAoIVNhZmVyLmZyb20gfHwgU2FmZXIuZnJvbSA9PT0gVWludDhBcnJheS5mcm9tKSB7XG4gIFNhZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgdmFsdWUpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiB2YWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIEJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG59XG5cbmlmICghU2FmZXIuYWxsb2MpIHtcbiAgU2FmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHNpemUpXG4gICAgfVxuICAgIGlmIChzaXplIDwgMCB8fCBzaXplID49IDIgKiAoMSA8PCAzMCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICAgIH1cbiAgICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gICAgaWYgKCFmaWxsIHx8IGZpbGwubGVuZ3RoID09PSAwKSB7XG4gICAgICBidWYuZmlsbCgwKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICAgIHJldHVybiBidWZcbiAgfVxufVxuXG5pZiAoIXNhZmVyLmtTdHJpbmdNYXhMZW5ndGgpIHtcbiAgdHJ5IHtcbiAgICBzYWZlci5rU3RyaW5nTWF4TGVuZ3RoID0gcHJvY2Vzcy5iaW5kaW5nKCdidWZmZXInKS5rU3RyaW5nTWF4TGVuZ3RoXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyB3ZSBjYW4ndCBkZXRlcm1pbmUga1N0cmluZ01heExlbmd0aCBpbiBlbnZpcm9ubWVudHMgd2hlcmUgcHJvY2Vzcy5iaW5kaW5nXG4gICAgLy8gaXMgdW5zdXBwb3J0ZWQsIHNvIGxldCdzIG5vdCBzZXQgaXRcbiAgfVxufVxuXG5pZiAoIXNhZmVyLmNvbnN0YW50cykge1xuICBzYWZlci5jb25zdGFudHMgPSB7XG4gICAgTUFYX0xFTkdUSDogc2FmZXIua01heExlbmd0aFxuICB9XG4gIGlmIChzYWZlci5rU3RyaW5nTWF4TGVuZ3RoKSB7XG4gICAgc2FmZXIuY29uc3RhbnRzLk1BWF9TVFJJTkdfTEVOR1RIID0gc2FmZXIua1N0cmluZ01heExlbmd0aFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FmZXJcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVwb3J0ZXIgPSByZXF1aXJlKCcuLi9iYXNlL3JlcG9ydGVyJykuUmVwb3J0ZXI7XG5jb25zdCBFbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi4vYmFzZS9idWZmZXInKS5FbmNvZGVyQnVmZmVyO1xuY29uc3QgRGVjb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UvYnVmZmVyJykuRGVjb2RlckJ1ZmZlcjtcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuLy8gU3VwcG9ydGVkIHRhZ3NcbmNvbnN0IHRhZ3MgPSBbXG4gICdzZXEnLCAnc2Vxb2YnLCAnc2V0JywgJ3NldG9mJywgJ29iamlkJywgJ2Jvb2wnLFxuICAnZ2VudGltZScsICd1dGN0aW1lJywgJ251bGxfJywgJ2VudW0nLCAnaW50JywgJ29iakRlc2MnLFxuICAnYml0c3RyJywgJ2JtcHN0cicsICdjaGFyc3RyJywgJ2dlbnN0cicsICdncmFwaHN0cicsICdpYTVzdHInLCAnaXNvNjQ2c3RyJyxcbiAgJ251bXN0cicsICdvY3RzdHInLCAncHJpbnRzdHInLCAndDYxc3RyJywgJ3VuaXN0cicsICd1dGY4c3RyJywgJ3ZpZGVvc3RyJ1xuXTtcblxuLy8gUHVibGljIG1ldGhvZHMgbGlzdFxuY29uc3QgbWV0aG9kcyA9IFtcbiAgJ2tleScsICdvYmonLCAndXNlJywgJ29wdGlvbmFsJywgJ2V4cGxpY2l0JywgJ2ltcGxpY2l0JywgJ2RlZicsICdjaG9pY2UnLFxuICAnYW55JywgJ2NvbnRhaW5zJ1xuXS5jb25jYXQodGFncyk7XG5cbi8vIE92ZXJyaWRlZCBtZXRob2RzIGxpc3RcbmNvbnN0IG92ZXJyaWRlZCA9IFtcbiAgJ19wZWVrVGFnJywgJ19kZWNvZGVUYWcnLCAnX3VzZScsXG4gICdfZGVjb2RlU3RyJywgJ19kZWNvZGVPYmppZCcsICdfZGVjb2RlVGltZScsXG4gICdfZGVjb2RlTnVsbCcsICdfZGVjb2RlSW50JywgJ19kZWNvZGVCb29sJywgJ19kZWNvZGVMaXN0JyxcblxuICAnX2VuY29kZUNvbXBvc2l0ZScsICdfZW5jb2RlU3RyJywgJ19lbmNvZGVPYmppZCcsICdfZW5jb2RlVGltZScsXG4gICdfZW5jb2RlTnVsbCcsICdfZW5jb2RlSW50JywgJ19lbmNvZGVCb29sJ1xuXTtcblxuZnVuY3Rpb24gTm9kZShlbmMsIHBhcmVudCwgbmFtZSkge1xuICBjb25zdCBzdGF0ZSA9IHt9O1xuICB0aGlzLl9iYXNlU3RhdGUgPSBzdGF0ZTtcblxuICBzdGF0ZS5uYW1lID0gbmFtZTtcbiAgc3RhdGUuZW5jID0gZW5jO1xuXG4gIHN0YXRlLnBhcmVudCA9IHBhcmVudCB8fCBudWxsO1xuICBzdGF0ZS5jaGlsZHJlbiA9IG51bGw7XG5cbiAgLy8gU3RhdGVcbiAgc3RhdGUudGFnID0gbnVsbDtcbiAgc3RhdGUuYXJncyA9IG51bGw7XG4gIHN0YXRlLnJldmVyc2VBcmdzID0gbnVsbDtcbiAgc3RhdGUuY2hvaWNlID0gbnVsbDtcbiAgc3RhdGUub3B0aW9uYWwgPSBmYWxzZTtcbiAgc3RhdGUuYW55ID0gZmFsc2U7XG4gIHN0YXRlLm9iaiA9IGZhbHNlO1xuICBzdGF0ZS51c2UgPSBudWxsO1xuICBzdGF0ZS51c2VEZWNvZGVyID0gbnVsbDtcbiAgc3RhdGUua2V5ID0gbnVsbDtcbiAgc3RhdGVbJ2RlZmF1bHQnXSA9IG51bGw7XG4gIHN0YXRlLmV4cGxpY2l0ID0gbnVsbDtcbiAgc3RhdGUuaW1wbGljaXQgPSBudWxsO1xuICBzdGF0ZS5jb250YWlucyA9IG51bGw7XG5cbiAgLy8gU2hvdWxkIGNyZWF0ZSBuZXcgaW5zdGFuY2Ugb24gZWFjaCBtZXRob2RcbiAgaWYgKCFzdGF0ZS5wYXJlbnQpIHtcbiAgICBzdGF0ZS5jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMuX3dyYXAoKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBOb2RlO1xuXG5jb25zdCBzdGF0ZVByb3BzID0gW1xuICAnZW5jJywgJ3BhcmVudCcsICdjaGlsZHJlbicsICd0YWcnLCAnYXJncycsICdyZXZlcnNlQXJncycsICdjaG9pY2UnLFxuICAnb3B0aW9uYWwnLCAnYW55JywgJ29iaicsICd1c2UnLCAnYWx0ZXJlZFVzZScsICdrZXknLCAnZGVmYXVsdCcsICdleHBsaWNpdCcsXG4gICdpbXBsaWNpdCcsICdjb250YWlucydcbl07XG5cbk5vZGUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUoKSB7XG4gIGNvbnN0IHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICBjb25zdCBjc3RhdGUgPSB7fTtcbiAgc3RhdGVQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICBjc3RhdGVbcHJvcF0gPSBzdGF0ZVtwcm9wXTtcbiAgfSk7XG4gIGNvbnN0IHJlcyA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGNzdGF0ZS5wYXJlbnQpO1xuICByZXMuX2Jhc2VTdGF0ZSA9IGNzdGF0ZTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbk5vZGUucHJvdG90eXBlLl93cmFwID0gZnVuY3Rpb24gd3JhcCgpIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICB0aGlzW21ldGhvZF0gPSBmdW5jdGlvbiBfd3JhcHBlZE1ldGhvZCgpIHtcbiAgICAgIGNvbnN0IGNsb25lID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcyk7XG4gICAgICBzdGF0ZS5jaGlsZHJlbi5wdXNoKGNsb25lKTtcbiAgICAgIHJldHVybiBjbG9uZVttZXRob2RdLmFwcGx5KGNsb25lLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0sIHRoaXMpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGJvZHkpIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLnBhcmVudCA9PT0gbnVsbCk7XG4gIGJvZHkuY2FsbCh0aGlzKTtcblxuICAvLyBGaWx0ZXIgY2hpbGRyZW5cbiAgc3RhdGUuY2hpbGRyZW4gPSBzdGF0ZS5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQuX2Jhc2VTdGF0ZS5wYXJlbnQgPT09IHRoaXM7XG4gIH0sIHRoaXMpO1xuICBhc3NlcnQuZXF1YWwoc3RhdGUuY2hpbGRyZW4ubGVuZ3RoLCAxLCAnUm9vdCBub2RlIGNhbiBoYXZlIG9ubHkgb25lIGNoaWxkJyk7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fdXNlQXJncyA9IGZ1bmN0aW9uIHVzZUFyZ3MoYXJncykge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBGaWx0ZXIgY2hpbGRyZW4gYW5kIGFyZ3NcbiAgY29uc3QgY2hpbGRyZW4gPSBhcmdzLmZpbHRlcihmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvcjtcbiAgfSwgdGhpcyk7XG4gIGFyZ3MgPSBhcmdzLmZpbHRlcihmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gIShhcmcgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSwgdGhpcyk7XG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzc2VydChzdGF0ZS5jaGlsZHJlbiA9PT0gbnVsbCk7XG4gICAgc3RhdGUuY2hpbGRyZW4gPSBjaGlsZHJlbjtcblxuICAgIC8vIFJlcGxhY2UgcGFyZW50IHRvIG1haW50YWluIGJhY2t3YXJkIGxpbmtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBjaGlsZC5fYmFzZVN0YXRlLnBhcmVudCA9IHRoaXM7XG4gICAgfSwgdGhpcyk7XG4gIH1cbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgYXNzZXJ0KHN0YXRlLmFyZ3MgPT09IG51bGwpO1xuICAgIHN0YXRlLmFyZ3MgPSBhcmdzO1xuICAgIHN0YXRlLnJldmVyc2VBcmdzID0gYXJncy5tYXAoZnVuY3Rpb24oYXJnKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ29iamVjdCcgfHwgYXJnLmNvbnN0cnVjdG9yICE9PSBPYmplY3QpXG4gICAgICAgIHJldHVybiBhcmc7XG5cbiAgICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoYXJnKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoa2V5ID09IChrZXkgfCAwKSlcbiAgICAgICAgICBrZXkgfD0gMDtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhcmdba2V5XTtcbiAgICAgICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbiAgfVxufTtcblxuLy9cbi8vIE92ZXJyaWRlZCBtZXRob2RzXG4vL1xuXG5vdmVycmlkZWQuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgTm9kZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIF9vdmVycmlkZWQoKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArICcgbm90IGltcGxlbWVudGVkIGZvciBlbmNvZGluZzogJyArIHN0YXRlLmVuYyk7XG4gIH07XG59KTtcblxuLy9cbi8vIFB1YmxpYyBtZXRob2RzXG4vL1xuXG50YWdzLmZvckVhY2goZnVuY3Rpb24odGFnKSB7XG4gIE5vZGUucHJvdG90eXBlW3RhZ10gPSBmdW5jdGlvbiBfdGFnTWV0aG9kKCkge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgYXNzZXJ0KHN0YXRlLnRhZyA9PT0gbnVsbCk7XG4gICAgc3RhdGUudGFnID0gdGFnO1xuXG4gICAgdGhpcy5fdXNlQXJncyhhcmdzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufSk7XG5cbk5vZGUucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShpdGVtKSB7XG4gIGFzc2VydChpdGVtKTtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLnVzZSA9PT0gbnVsbCk7XG4gIHN0YXRlLnVzZSA9IGl0ZW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5vcHRpb25hbCA9IGZ1bmN0aW9uIG9wdGlvbmFsKCkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBzdGF0ZS5vcHRpb25hbCA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5kZWYgPSBmdW5jdGlvbiBkZWYodmFsKSB7XG4gIGNvbnN0IHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZVsnZGVmYXVsdCddID09PSBudWxsKTtcbiAgc3RhdGVbJ2RlZmF1bHQnXSA9IHZhbDtcbiAgc3RhdGUub3B0aW9uYWwgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuZXhwbGljaXQgPSBmdW5jdGlvbiBleHBsaWNpdChudW0pIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmV4cGxpY2l0ID09PSBudWxsICYmIHN0YXRlLmltcGxpY2l0ID09PSBudWxsKTtcbiAgc3RhdGUuZXhwbGljaXQgPSBudW07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5pbXBsaWNpdCA9IGZ1bmN0aW9uIGltcGxpY2l0KG51bSkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUuZXhwbGljaXQgPT09IG51bGwgJiYgc3RhdGUuaW1wbGljaXQgPT09IG51bGwpO1xuICBzdGF0ZS5pbXBsaWNpdCA9IG51bTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLm9iaiA9IGZ1bmN0aW9uIG9iaigpIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gIHN0YXRlLm9iaiA9IHRydWU7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoICE9PSAwKVxuICAgIHRoaXMuX3VzZUFyZ3MoYXJncyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5rZXkgPSBmdW5jdGlvbiBrZXkobmV3S2V5KSB7XG4gIGNvbnN0IHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5rZXkgPT09IG51bGwpO1xuICBzdGF0ZS5rZXkgPSBuZXdLZXk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5hbnkgPSBmdW5jdGlvbiBhbnkoKSB7XG4gIGNvbnN0IHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHN0YXRlLmFueSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5jaG9pY2UgPSBmdW5jdGlvbiBjaG9pY2Uob2JqKSB7XG4gIGNvbnN0IHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5jaG9pY2UgPT09IG51bGwpO1xuICBzdGF0ZS5jaG9pY2UgPSBvYmo7XG4gIHRoaXMuX3VzZUFyZ3MoT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9KSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGl0ZW0pIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLnVzZSA9PT0gbnVsbCk7XG4gIHN0YXRlLmNvbnRhaW5zID0gaXRlbTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBEZWNvZGluZ1xuLy9cblxuTm9kZS5wcm90b3R5cGUuX2RlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgb3B0aW9ucykge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBEZWNvZGUgcm9vdCBub2RlXG4gIGlmIChzdGF0ZS5wYXJlbnQgPT09IG51bGwpXG4gICAgcmV0dXJuIGlucHV0LndyYXBSZXN1bHQoc3RhdGUuY2hpbGRyZW5bMF0uX2RlY29kZShpbnB1dCwgb3B0aW9ucykpO1xuXG4gIGxldCByZXN1bHQgPSBzdGF0ZVsnZGVmYXVsdCddO1xuICBsZXQgcHJlc2VudCA9IHRydWU7XG5cbiAgbGV0IHByZXZLZXkgPSBudWxsO1xuICBpZiAoc3RhdGUua2V5ICE9PSBudWxsKVxuICAgIHByZXZLZXkgPSBpbnB1dC5lbnRlcktleShzdGF0ZS5rZXkpO1xuXG4gIC8vIENoZWNrIGlmIHRhZyBpcyB0aGVyZVxuICBpZiAoc3RhdGUub3B0aW9uYWwpIHtcbiAgICBsZXQgdGFnID0gbnVsbDtcbiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpXG4gICAgICB0YWcgPSBzdGF0ZS5leHBsaWNpdDtcbiAgICBlbHNlIGlmIChzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLmltcGxpY2l0O1xuICAgIGVsc2UgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLnRhZztcblxuICAgIGlmICh0YWcgPT09IG51bGwgJiYgIXN0YXRlLmFueSkge1xuICAgICAgLy8gVHJpYWwgYW5kIEVycm9yXG4gICAgICBjb25zdCBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHN0YXRlLmNob2ljZSA9PT0gbnVsbClcbiAgICAgICAgICB0aGlzLl9kZWNvZGVHZW5lcmljKHN0YXRlLnRhZywgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhpcy5fZGVjb2RlQ2hvaWNlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgcHJlc2VudCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHByZXNlbnQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlucHV0LnJlc3RvcmUoc2F2ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXNlbnQgPSB0aGlzLl9wZWVrVGFnKGlucHV0LCB0YWcsIHN0YXRlLmFueSk7XG5cbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKHByZXNlbnQpKVxuICAgICAgICByZXR1cm4gcHJlc2VudDtcbiAgICB9XG4gIH1cblxuICAvLyBQdXNoIG9iamVjdCBvbiBzdGFja1xuICBsZXQgcHJldk9iajtcbiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KVxuICAgIHByZXZPYmogPSBpbnB1dC5lbnRlck9iamVjdCgpO1xuXG4gIGlmIChwcmVzZW50KSB7XG4gICAgLy8gVW53cmFwIGV4cGxpY2l0IHZhbHVlc1xuICAgIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgZXhwbGljaXQgPSB0aGlzLl9kZWNvZGVUYWcoaW5wdXQsIHN0YXRlLmV4cGxpY2l0KTtcbiAgICAgIGlmIChpbnB1dC5pc0Vycm9yKGV4cGxpY2l0KSlcbiAgICAgICAgcmV0dXJuIGV4cGxpY2l0O1xuICAgICAgaW5wdXQgPSBleHBsaWNpdDtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFydCA9IGlucHV0Lm9mZnNldDtcblxuICAgIC8vIFVud3JhcCBpbXBsaWNpdCBhbmQgbm9ybWFsIHZhbHVlc1xuICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7XG4gICAgICBsZXQgc2F2ZTtcbiAgICAgIGlmIChzdGF0ZS5hbnkpXG4gICAgICAgIHNhdmUgPSBpbnB1dC5zYXZlKCk7XG4gICAgICBjb25zdCBib2R5ID0gdGhpcy5fZGVjb2RlVGFnKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZyxcbiAgICAgICAgc3RhdGUuYW55XG4gICAgICApO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IoYm9keSkpXG4gICAgICAgIHJldHVybiBib2R5O1xuXG4gICAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgICByZXN1bHQgPSBpbnB1dC5yYXcoc2F2ZSk7XG4gICAgICBlbHNlXG4gICAgICAgIGlucHV0ID0gYm9keTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYWNrICYmIHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIG9wdGlvbnMudHJhY2soaW5wdXQucGF0aCgpLCBzdGFydCwgaW5wdXQubGVuZ3RoLCAndGFnZ2VkJyk7XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYWNrICYmIHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIG9wdGlvbnMudHJhY2soaW5wdXQucGF0aCgpLCBpbnB1dC5vZmZzZXQsIGlucHV0Lmxlbmd0aCwgJ2NvbnRlbnQnKTtcblxuICAgIC8vIFNlbGVjdCBwcm9wZXIgbWV0aG9kIGZvciB0YWdcbiAgICBpZiAoc3RhdGUuYW55KSB7XG4gICAgICAvLyBuby1vcFxuICAgIH0gZWxzZSBpZiAoc3RhdGUuY2hvaWNlID09PSBudWxsKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLl9kZWNvZGVHZW5lcmljKHN0YXRlLnRhZywgaW5wdXQsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB0aGlzLl9kZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChpbnB1dC5pc0Vycm9yKHJlc3VsdCkpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgLy8gRGVjb2RlIGNoaWxkcmVuXG4gICAgaWYgKCFzdGF0ZS5hbnkgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsICYmIHN0YXRlLmNoaWxkcmVuICE9PSBudWxsKSB7XG4gICAgICBzdGF0ZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIGRlY29kZUNoaWxkcmVuKGNoaWxkKSB7XG4gICAgICAgIC8vIE5PVEU6IFdlIGFyZSBpZ25vcmluZyBlcnJvcnMgaGVyZSwgdG8gbGV0IHBhcnNlciBjb250aW51ZSB3aXRoIG90aGVyXG4gICAgICAgIC8vIHBhcnRzIG9mIGVuY29kZWQgZGF0YVxuICAgICAgICBjaGlsZC5fZGVjb2RlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERlY29kZSBjb250YWluZWQvZW5jb2RlZCBieSBzY2hlbWEsIG9ubHkgaW4gYml0IG9yIG9jdGV0IHN0cmluZ3NcbiAgICBpZiAoc3RhdGUuY29udGFpbnMgJiYgKHN0YXRlLnRhZyA9PT0gJ29jdHN0cicgfHwgc3RhdGUudGFnID09PSAnYml0c3RyJykpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBuZXcgRGVjb2RlckJ1ZmZlcihyZXN1bHQpO1xuICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLmNvbnRhaW5zLCBpbnB1dC5fcmVwb3J0ZXJTdGF0ZS5vYmopXG4gICAgICAgIC5fZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFBvcCBvYmplY3RcbiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KVxuICAgIHJlc3VsdCA9IGlucHV0LmxlYXZlT2JqZWN0KHByZXZPYmopO1xuXG4gIC8vIFNldCBrZXlcbiAgaWYgKHN0YXRlLmtleSAhPT0gbnVsbCAmJiAocmVzdWx0ICE9PSBudWxsIHx8IHByZXNlbnQgPT09IHRydWUpKVxuICAgIGlucHV0LmxlYXZlS2V5KHByZXZLZXksIHN0YXRlLmtleSwgcmVzdWx0KTtcbiAgZWxzZSBpZiAocHJldktleSAhPT0gbnVsbClcbiAgICBpbnB1dC5leGl0S2V5KHByZXZLZXkpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlR2VuZXJpYyA9IGZ1bmN0aW9uIGRlY29kZUdlbmVyaWModGFnLCBpbnB1dCwgb3B0aW9ucykge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBpZiAodGFnID09PSAnc2VxJyB8fCB0YWcgPT09ICdzZXQnKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAodGFnID09PSAnc2Vxb2YnIHx8IHRhZyA9PT0gJ3NldG9mJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlTGlzdChpbnB1dCwgdGFnLCBzdGF0ZS5hcmdzWzBdLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSlcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlU3RyKGlucHV0LCB0YWcsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcgJiYgc3RhdGUuYXJncylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlT2JqaWQoaW5wdXQsIHN0YXRlLmFyZ3NbMF0sIHN0YXRlLmFyZ3NbMV0sIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmppZCcpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU9iamlkKGlucHV0LCBudWxsLCBudWxsLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVRpbWUoaW5wdXQsIHRhZywgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ251bGxfJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlTnVsbChpbnB1dCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2Jvb2wnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVCb29sKGlucHV0LCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVN0cihpbnB1dCwgdGFnLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnaW50JyB8fCB0YWcgPT09ICdlbnVtJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlSW50KGlucHV0LCBzdGF0ZS5hcmdzICYmIHN0YXRlLmFyZ3NbMF0sIG9wdGlvbnMpO1xuXG4gIGlmIChzdGF0ZS51c2UgIT09IG51bGwpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0VXNlKHN0YXRlLnVzZSwgaW5wdXQuX3JlcG9ydGVyU3RhdGUub2JqKVxuICAgICAgLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnB1dC5lcnJvcigndW5rbm93biB0YWc6ICcgKyB0YWcpO1xuICB9XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZ2V0VXNlID0gZnVuY3Rpb24gX2dldFVzZShlbnRpdHksIG9iaikge1xuXG4gIGNvbnN0IHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAvLyBDcmVhdGUgYWx0ZXJlZCB1c2UgZGVjb2RlciBpZiBpbXBsaWNpdCBpcyBzZXRcbiAgc3RhdGUudXNlRGVjb2RlciA9IHRoaXMuX3VzZShlbnRpdHksIG9iaik7XG4gIGFzc2VydChzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUucGFyZW50ID09PSBudWxsKTtcbiAgc3RhdGUudXNlRGVjb2RlciA9IHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5jaGlsZHJlblswXTtcbiAgaWYgKHN0YXRlLmltcGxpY2l0ICE9PSBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuaW1wbGljaXQpIHtcbiAgICBzdGF0ZS51c2VEZWNvZGVyID0gc3RhdGUudXNlRGVjb2Rlci5jbG9uZSgpO1xuICAgIHN0YXRlLnVzZURlY29kZXIuX2Jhc2VTdGF0ZS5pbXBsaWNpdCA9IHN0YXRlLmltcGxpY2l0O1xuICB9XG4gIHJldHVybiBzdGF0ZS51c2VEZWNvZGVyO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2RlY29kZUNob2ljZSA9IGZ1bmN0aW9uIGRlY29kZUNob2ljZShpbnB1dCwgb3B0aW9ucykge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgbGV0IHJlc3VsdCA9IG51bGw7XG4gIGxldCBtYXRjaCA9IGZhbHNlO1xuXG4gIE9iamVjdC5rZXlzKHN0YXRlLmNob2ljZSkuc29tZShmdW5jdGlvbihrZXkpIHtcbiAgICBjb25zdCBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgIGNvbnN0IG5vZGUgPSBzdGF0ZS5jaG9pY2Vba2V5XTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdmFsdWUgPSBub2RlLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IodmFsdWUpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJlc3VsdCA9IHsgdHlwZToga2V5LCB2YWx1ZTogdmFsdWUgfTtcbiAgICAgIG1hdGNoID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpbnB1dC5yZXN0b3JlKHNhdmUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSwgdGhpcyk7XG5cbiAgaWYgKCFtYXRjaClcbiAgICByZXR1cm4gaW5wdXQuZXJyb3IoJ0Nob2ljZSBub3QgbWF0Y2hlZCcpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vL1xuLy8gRW5jb2Rpbmdcbi8vXG5cbk5vZGUucHJvdG90eXBlLl9jcmVhdGVFbmNvZGVyQnVmZmVyID0gZnVuY3Rpb24gY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhKSB7XG4gIHJldHVybiBuZXcgRW5jb2RlckJ1ZmZlcihkYXRhLCB0aGlzLnJlcG9ydGVyKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgaWYgKHN0YXRlWydkZWZhdWx0J10gIT09IG51bGwgJiYgc3RhdGVbJ2RlZmF1bHQnXSA9PT0gZGF0YSlcbiAgICByZXR1cm47XG5cbiAgY29uc3QgcmVzdWx0ID0gdGhpcy5fZW5jb2RlVmFsdWUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCk7XG4gIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm47XG5cbiAgaWYgKHRoaXMuX3NraXBEZWZhdWx0KHJlc3VsdCwgcmVwb3J0ZXIsIHBhcmVudCkpXG4gICAgcmV0dXJuO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlVmFsdWUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBEZWNvZGUgcm9vdCBub2RlXG4gIGlmIChzdGF0ZS5wYXJlbnQgPT09IG51bGwpXG4gICAgcmV0dXJuIHN0YXRlLmNoaWxkcmVuWzBdLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIgfHwgbmV3IFJlcG9ydGVyKCkpO1xuXG4gIGxldCByZXN1bHQgPSBudWxsO1xuXG4gIC8vIFNldCByZXBvcnRlciB0byBzaGFyZSBpdCB3aXRoIGEgY2hpbGQgY2xhc3NcbiAgdGhpcy5yZXBvcnRlciA9IHJlcG9ydGVyO1xuXG4gIC8vIENoZWNrIGlmIGRhdGEgaXMgdGhlcmVcbiAgaWYgKHN0YXRlLm9wdGlvbmFsICYmIGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChzdGF0ZVsnZGVmYXVsdCddICE9PSBudWxsKVxuICAgICAgZGF0YSA9IHN0YXRlWydkZWZhdWx0J107XG4gICAgZWxzZVxuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRW5jb2RlIGNoaWxkcmVuIGZpcnN0XG4gIGxldCBjb250ZW50ID0gbnVsbDtcbiAgbGV0IHByaW1pdGl2ZSA9IGZhbHNlO1xuICBpZiAoc3RhdGUuYW55KSB7XG4gICAgLy8gQW55dGhpbmcgdGhhdCB3YXMgZ2l2ZW4gaXMgdHJhbnNsYXRlZCB0byBidWZmZXJcbiAgICByZXN1bHQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEpO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNob2ljZSkge1xuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcik7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY29udGFpbnMpIHtcbiAgICBjb250ZW50ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLmNvbnRhaW5zLCBwYXJlbnQpLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpO1xuICAgIHByaW1pdGl2ZSA9IHRydWU7XG4gIH0gZWxzZSBpZiAoc3RhdGUuY2hpbGRyZW4pIHtcbiAgICBjb250ZW50ID0gc3RhdGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX2Jhc2VTdGF0ZS50YWcgPT09ICdudWxsXycpXG4gICAgICAgIHJldHVybiBjaGlsZC5fZW5jb2RlKG51bGwsIHJlcG9ydGVyLCBkYXRhKTtcblxuICAgICAgaWYgKGNoaWxkLl9iYXNlU3RhdGUua2V5ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ0NoaWxkIHNob3VsZCBoYXZlIGEga2V5Jyk7XG4gICAgICBjb25zdCBwcmV2S2V5ID0gcmVwb3J0ZXIuZW50ZXJLZXkoY2hpbGQuX2Jhc2VTdGF0ZS5rZXkpO1xuXG4gICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ0NoaWxkIGV4cGVjdGVkLCBidXQgaW5wdXQgaXMgbm90IG9iamVjdCcpO1xuXG4gICAgICBjb25zdCByZXMgPSBjaGlsZC5fZW5jb2RlKGRhdGFbY2hpbGQuX2Jhc2VTdGF0ZS5rZXldLCByZXBvcnRlciwgZGF0YSk7XG4gICAgICByZXBvcnRlci5sZWF2ZUtleShwcmV2S2V5KTtcblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LCB0aGlzKS5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9KTtcbiAgICBjb250ZW50ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihjb250ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3RhdGUudGFnID09PSAnc2Vxb2YnIHx8IHN0YXRlLnRhZyA9PT0gJ3NldG9mJykge1xuICAgICAgLy8gVE9ETyhpbmR1dG55KTogdGhpcyBzaG91bGQgYmUgdGhyb3duIG9uIERTTCBsZXZlbFxuICAgICAgaWYgKCEoc3RhdGUuYXJncyAmJiBzdGF0ZS5hcmdzLmxlbmd0aCA9PT0gMSkpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVG9vIG1hbnkgYXJncyBmb3IgOiAnICsgc3RhdGUudGFnKTtcblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ3NlcW9mL3NldG9mLCBidXQgZGF0YSBpcyBub3QgQXJyYXknKTtcblxuICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjaGlsZC5fYmFzZVN0YXRlLmltcGxpY2l0ID0gbnVsbDtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFVzZShzdGF0ZS5hcmdzWzBdLCBkYXRhKS5fZW5jb2RlKGl0ZW0sIHJlcG9ydGVyKTtcbiAgICAgIH0sIGNoaWxkKSk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS51c2UgIT09IG51bGwpIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2dldFVzZShzdGF0ZS51c2UsIHBhcmVudCkuX2VuY29kZShkYXRhLCByZXBvcnRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLl9lbmNvZGVQcmltaXRpdmUoc3RhdGUudGFnLCBkYXRhKTtcbiAgICAgIHByaW1pdGl2ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLy8gRW5jb2RlIGRhdGEgaXRzZWxmXG4gIGlmICghc3RhdGUuYW55ICYmIHN0YXRlLmNob2ljZSA9PT0gbnVsbCkge1xuICAgIGNvbnN0IHRhZyA9IHN0YXRlLmltcGxpY2l0ICE9PSBudWxsID8gc3RhdGUuaW1wbGljaXQgOiBzdGF0ZS50YWc7XG4gICAgY29uc3QgY2xzID0gc3RhdGUuaW1wbGljaXQgPT09IG51bGwgPyAndW5pdmVyc2FsJyA6ICdjb250ZXh0JztcblxuICAgIGlmICh0YWcgPT09IG51bGwpIHtcbiAgICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwpXG4gICAgICAgIHJlcG9ydGVyLmVycm9yKCdUYWcgY291bGQgYmUgb21pdHRlZCBvbmx5IGZvciAudXNlKCknKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlLnVzZSA9PT0gbnVsbClcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5fZW5jb2RlQ29tcG9zaXRlKHRhZywgcHJpbWl0aXZlLCBjbHMsIGNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFdyYXAgaW4gZXhwbGljaXRcbiAgaWYgKHN0YXRlLmV4cGxpY2l0ICE9PSBudWxsKVxuICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNvbXBvc2l0ZShzdGF0ZS5leHBsaWNpdCwgZmFsc2UsICdjb250ZXh0JywgcmVzdWx0KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZUNob2ljZSA9IGZ1bmN0aW9uIGVuY29kZUNob2ljZShkYXRhLCByZXBvcnRlcikge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBjb25zdCBub2RlID0gc3RhdGUuY2hvaWNlW2RhdGEudHlwZV07XG4gIGlmICghbm9kZSkge1xuICAgIGFzc2VydChcbiAgICAgIGZhbHNlLFxuICAgICAgZGF0YS50eXBlICsgJyBub3QgZm91bmQgaW4gJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzdGF0ZS5jaG9pY2UpKSk7XG4gIH1cbiAgcmV0dXJuIG5vZGUuX2VuY29kZShkYXRhLnZhbHVlLCByZXBvcnRlcik7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZW5jb2RlUHJpbWl0aXZlID0gZnVuY3Rpb24gZW5jb2RlUHJpbWl0aXZlKHRhZywgZGF0YSkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBpZiAoL3N0ciQvLnRlc3QodGFnKSlcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKGRhdGEsIHRhZyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iamlkJyAmJiBzdGF0ZS5hcmdzKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVPYmppZChkYXRhLCBzdGF0ZS5yZXZlcnNlQXJnc1swXSwgc3RhdGUuYXJnc1sxXSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iamlkJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlT2JqaWQoZGF0YSwgbnVsbCwgbnVsbCk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnIHx8IHRhZyA9PT0gJ3V0Y3RpbWUnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVUaW1lKGRhdGEsIHRhZyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ251bGxfJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlTnVsbCgpO1xuICBlbHNlIGlmICh0YWcgPT09ICdpbnQnIHx8IHRhZyA9PT0gJ2VudW0nKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVJbnQoZGF0YSwgc3RhdGUuYXJncyAmJiBzdGF0ZS5yZXZlcnNlQXJnc1swXSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2Jvb2wnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVCb29sKGRhdGEpO1xuICBlbHNlIGlmICh0YWcgPT09ICdvYmpEZXNjJylcbiAgICByZXR1cm4gdGhpcy5fZW5jb2RlU3RyKGRhdGEsIHRhZyk7XG4gIGVsc2VcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHRhZzogJyArIHRhZyk7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5faXNOdW1zdHIgPSBmdW5jdGlvbiBpc051bXN0cihzdHIpIHtcbiAgcmV0dXJuIC9eWzAtOSBdKiQvLnRlc3Qoc3RyKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9pc1ByaW50c3RyID0gZnVuY3Rpb24gaXNQcmludHN0cihzdHIpIHtcbiAgcmV0dXJuIC9eW0EtWmEtejAtOSAnKCkrLC0uLzo9P10qJC8udGVzdChzdHIpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5mdW5jdGlvbiBSZXBvcnRlcihvcHRpb25zKSB7XG4gIHRoaXMuX3JlcG9ydGVyU3RhdGUgPSB7XG4gICAgb2JqOiBudWxsLFxuICAgIHBhdGg6IFtdLFxuICAgIG9wdGlvbnM6IG9wdGlvbnMgfHwge30sXG4gICAgZXJyb3JzOiBbXVxuICB9O1xufVxuZXhwb3J0cy5SZXBvcnRlciA9IFJlcG9ydGVyO1xuXG5SZXBvcnRlci5wcm90b3R5cGUuaXNFcnJvciA9IGZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiBSZXBvcnRlckVycm9yO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiBzYXZlKCkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgcmV0dXJuIHsgb2JqOiBzdGF0ZS5vYmosIHBhdGhMZW46IHN0YXRlLnBhdGgubGVuZ3RoIH07XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUoZGF0YSkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgc3RhdGUub2JqID0gZGF0YS5vYmo7XG4gIHN0YXRlLnBhdGggPSBzdGF0ZS5wYXRoLnNsaWNlKDAsIGRhdGEucGF0aExlbik7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZW50ZXJLZXkgPSBmdW5jdGlvbiBlbnRlcktleShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX3JlcG9ydGVyU3RhdGUucGF0aC5wdXNoKGtleSk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZXhpdEtleSA9IGZ1bmN0aW9uIGV4aXRLZXkoaW5kZXgpIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHN0YXRlLnBhdGggPSBzdGF0ZS5wYXRoLnNsaWNlKDAsIGluZGV4IC0gMSk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUubGVhdmVLZXkgPSBmdW5jdGlvbiBsZWF2ZUtleShpbmRleCwga2V5LCB2YWx1ZSkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdGhpcy5leGl0S2V5KGluZGV4KTtcbiAgaWYgKHN0YXRlLm9iaiAhPT0gbnVsbClcbiAgICBzdGF0ZS5vYmpba2V5XSA9IHZhbHVlO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnBhdGggPSBmdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gdGhpcy5fcmVwb3J0ZXJTdGF0ZS5wYXRoLmpvaW4oJy8nKTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lbnRlck9iamVjdCA9IGZ1bmN0aW9uIGVudGVyT2JqZWN0KCkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgY29uc3QgcHJldiA9IHN0YXRlLm9iajtcbiAgc3RhdGUub2JqID0ge307XG4gIHJldHVybiBwcmV2O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmxlYXZlT2JqZWN0ID0gZnVuY3Rpb24gbGVhdmVPYmplY3QocHJldikge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgY29uc3Qgbm93ID0gc3RhdGUub2JqO1xuICBzdGF0ZS5vYmogPSBwcmV2O1xuICByZXR1cm4gbm93O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gIGxldCBlcnI7XG4gIGNvbnN0IHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICBjb25zdCBpbmhlcml0ZWQgPSBtc2cgaW5zdGFuY2VvZiBSZXBvcnRlckVycm9yO1xuICBpZiAoaW5oZXJpdGVkKSB7XG4gICAgZXJyID0gbXNnO1xuICB9IGVsc2Uge1xuICAgIGVyciA9IG5ldyBSZXBvcnRlckVycm9yKHN0YXRlLnBhdGgubWFwKGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgIHJldHVybiAnWycgKyBKU09OLnN0cmluZ2lmeShlbGVtKSArICddJztcbiAgICB9KS5qb2luKCcnKSwgbXNnLm1lc3NhZ2UgfHwgbXNnLCBtc2cuc3RhY2spO1xuICB9XG5cbiAgaWYgKCFzdGF0ZS5vcHRpb25zLnBhcnRpYWwpXG4gICAgdGhyb3cgZXJyO1xuXG4gIGlmICghaW5oZXJpdGVkKVxuICAgIHN0YXRlLmVycm9ycy5wdXNoKGVycik7XG5cbiAgcmV0dXJuIGVycjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS53cmFwUmVzdWx0ID0gZnVuY3Rpb24gd3JhcFJlc3VsdChyZXN1bHQpIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuICBpZiAoIXN0YXRlLm9wdGlvbnMucGFydGlhbClcbiAgICByZXR1cm4gcmVzdWx0O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdWx0OiB0aGlzLmlzRXJyb3IocmVzdWx0KSA/IG51bGwgOiByZXN1bHQsXG4gICAgZXJyb3JzOiBzdGF0ZS5lcnJvcnNcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIFJlcG9ydGVyRXJyb3IocGF0aCwgbXNnKSB7XG4gIHRoaXMucGF0aCA9IHBhdGg7XG4gIHRoaXMucmV0aHJvdyhtc2cpO1xufVxuaW5oZXJpdHMoUmVwb3J0ZXJFcnJvciwgRXJyb3IpO1xuXG5SZXBvcnRlckVycm9yLnByb3RvdHlwZS5yZXRocm93ID0gZnVuY3Rpb24gcmV0aHJvdyhtc2cpIHtcbiAgdGhpcy5tZXNzYWdlID0gbXNnICsgJyBhdDogJyArICh0aGlzLnBhdGggfHwgJyhzaGFsbG93KScpO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgUmVwb3J0ZXJFcnJvcik7XG5cbiAgaWYgKCF0aGlzLnN0YWNrKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIElFIG9ubHkgYWRkcyBzdGFjayB3aGVuIHRocm93blxuICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMubWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5zdGFjayA9IGUuc3RhY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gSGVscGVyXG5mdW5jdGlvbiByZXZlcnNlKG1hcCkge1xuICBjb25zdCByZXMgPSB7fTtcblxuICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgLy8gQ29udmVydCBrZXkgdG8gaW50ZWdlciBpZiBpdCBpcyBzdHJpbmdpZmllZFxuICAgIGlmICgoa2V5IHwgMCkgPT0ga2V5KVxuICAgICAga2V5ID0ga2V5IHwgMDtcblxuICAgIGNvbnN0IHZhbHVlID0gbWFwW2tleV07XG4gICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0cy50YWdDbGFzcyA9IHtcbiAgMDogJ3VuaXZlcnNhbCcsXG4gIDE6ICdhcHBsaWNhdGlvbicsXG4gIDI6ICdjb250ZXh0JyxcbiAgMzogJ3ByaXZhdGUnXG59O1xuZXhwb3J0cy50YWdDbGFzc0J5TmFtZSA9IHJldmVyc2UoZXhwb3J0cy50YWdDbGFzcyk7XG5cbmV4cG9ydHMudGFnID0ge1xuICAweDAwOiAnZW5kJyxcbiAgMHgwMTogJ2Jvb2wnLFxuICAweDAyOiAnaW50JyxcbiAgMHgwMzogJ2JpdHN0cicsXG4gIDB4MDQ6ICdvY3RzdHInLFxuICAweDA1OiAnbnVsbF8nLFxuICAweDA2OiAnb2JqaWQnLFxuICAweDA3OiAnb2JqRGVzYycsXG4gIDB4MDg6ICdleHRlcm5hbCcsXG4gIDB4MDk6ICdyZWFsJyxcbiAgMHgwYTogJ2VudW0nLFxuICAweDBiOiAnZW1iZWQnLFxuICAweDBjOiAndXRmOHN0cicsXG4gIDB4MGQ6ICdyZWxhdGl2ZU9pZCcsXG4gIDB4MTA6ICdzZXEnLFxuICAweDExOiAnc2V0JyxcbiAgMHgxMjogJ251bXN0cicsXG4gIDB4MTM6ICdwcmludHN0cicsXG4gIDB4MTQ6ICd0NjFzdHInLFxuICAweDE1OiAndmlkZW9zdHInLFxuICAweDE2OiAnaWE1c3RyJyxcbiAgMHgxNzogJ3V0Y3RpbWUnLFxuICAweDE4OiAnZ2VudGltZScsXG4gIDB4MTk6ICdncmFwaHN0cicsXG4gIDB4MWE6ICdpc282NDZzdHInLFxuICAweDFiOiAnZ2Vuc3RyJyxcbiAgMHgxYzogJ3VuaXN0cicsXG4gIDB4MWQ6ICdjaGFyc3RyJyxcbiAgMHgxZTogJ2JtcHN0cidcbn07XG5leHBvcnRzLnRhZ0J5TmFtZSA9IHJldmVyc2UoZXhwb3J0cy50YWcpO1xuIiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICAvLyAnYScgLSAnZidcbiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHtcbiAgICAgICAgciB8PSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciB8PSBjICYgMHhmO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyLnN0cmlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gciBpcyBCTiB2NCBpbnN0YW5jZVxuICAgICAgICByLnN0cmlwKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByIGlzIEJOIHY1IGluc3RhbmNlXG4gICAgICAgIHIuX3N0cmlwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gICAgcmV0dXJuIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbW9kdWxlLCB0aGlzKTtcbiIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3Rcblx0ICAgIHZhciBXID0gW107XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTEgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEExID0gQ19hbGdvLlNIQTEgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksXG5cdCAgICAgICAgICAgICAgICAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LFxuXHQgICAgICAgICAgICAgICAgMHhjM2QyZTFmMFxuXHQgICAgICAgICAgICBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYSA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBiID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIGMgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgZCA9IEhbM107XG5cdCAgICAgICAgICAgIHZhciBlID0gSFs0XTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gTVtvZmZzZXQgKyBpXSB8IDA7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBuID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gKG4gPDwgMSkgfCAobiA+Pj4gMzEpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICB2YXIgdCA9ICgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZSArIFdbaV07XG5cdCAgICAgICAgICAgICAgICBpZiAoaSA8IDIwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdCArPSAoKGIgJiBjKSB8ICh+YiAmIGQpKSArIDB4NWE4Mjc5OTk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPCA0MCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHQgKz0gKGIgXiBjIF4gZCkgKyAweDZlZDllYmExO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIDwgNjApIHtcblx0ICAgICAgICAgICAgICAgICAgICB0ICs9ICgoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZCkpIC0gMHg3MGU0NDMyNDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAoaSA8IDgwKSAqLyB7XG5cdCAgICAgICAgICAgICAgICAgICAgdCArPSAoYiBeIGMgXiBkKSAtIDB4MzU5ZDNlMmE7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGUgPSBkO1xuXHQgICAgICAgICAgICAgICAgZCA9IGM7XG5cdCAgICAgICAgICAgICAgICBjID0gKGIgPDwgMzApIHwgKGIgPj4+IDIpO1xuXHQgICAgICAgICAgICAgICAgYiA9IGE7XG5cdCAgICAgICAgICAgICAgICBhID0gdDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG5cdCAgICAgICAgICAgIEhbMF0gPSAoSFswXSArIGEpIHwgMDtcblx0ICAgICAgICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwO1xuXHQgICAgICAgICAgICBIWzJdID0gKEhbMl0gKyBjKSB8IDA7XG5cdCAgICAgICAgICAgIEhbM10gPSAoSFszXSArIGQpIHwgMDtcblx0ICAgICAgICAgICAgSFs0XSA9IChIWzRdICsgZSkgfCAwO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE1XSA9IG5CaXRzVG90YWw7XG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEExKCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEExKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBMSA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTEpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTEobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBMSA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihTSEExKTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5TSEExO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYztcblx0ICAgIHZhciBVdGY4ID0gQ19lbmMuVXRmODtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8qKlxuXHQgICAgICogSE1BQyBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBITUFDID0gQ19hbGdvLkhNQUMgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIEhNQUMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBobWFjSGFzaGVyID0gQ3J5cHRvSlMuYWxnby5ITUFDLmNyZWF0ZShDcnlwdG9KUy5hbGdvLlNIQTI1Niwga2V5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoaGFzaGVyLCBrZXkpIHtcblx0ICAgICAgICAgICAgLy8gSW5pdCBoYXNoZXJcblx0ICAgICAgICAgICAgaGFzaGVyID0gdGhpcy5faGFzaGVyID0gbmV3IGhhc2hlci5pbml0KCk7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gV29yZEFycmF5LCBlbHNlIGFzc3VtZSBXb3JkQXJyYXkgYWxyZWFkeVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICAgICAga2V5ID0gVXRmOC5wYXJzZShrZXkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBoYXNoZXJCbG9ja1NpemUgPSBoYXNoZXIuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgaGFzaGVyQmxvY2tTaXplQnl0ZXMgPSBoYXNoZXJCbG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEFsbG93IGFyYml0cmFyeSBsZW5ndGgga2V5c1xuXHQgICAgICAgICAgICBpZiAoa2V5LnNpZ0J5dGVzID4gaGFzaGVyQmxvY2tTaXplQnl0ZXMpIHtcblx0ICAgICAgICAgICAgICAgIGtleSA9IGhhc2hlci5maW5hbGl6ZShrZXkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHNcblx0ICAgICAgICAgICAga2V5LmNsYW1wKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ2xvbmUga2V5IGZvciBpbm5lciBhbmQgb3V0ZXIgcGFkc1xuXHQgICAgICAgICAgICB2YXIgb0tleSA9IHRoaXMuX29LZXkgPSBrZXkuY2xvbmUoKTtcblx0ICAgICAgICAgICAgdmFyIGlLZXkgPSB0aGlzLl9pS2V5ID0ga2V5LmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBvS2V5V29yZHMgPSBvS2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgaUtleVdvcmRzID0gaUtleS53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBYT1Iga2V5cyB3aXRoIHBhZCBjb25zdGFudHNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYXNoZXJCbG9ja1NpemU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgb0tleVdvcmRzW2ldIF49IDB4NWM1YzVjNWM7XG5cdCAgICAgICAgICAgICAgICBpS2V5V29yZHNbaV0gXj0gMHgzNjM2MzYzNjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBvS2V5LnNpZ0J5dGVzID0gaUtleS5zaWdCeXRlcyA9IGhhc2hlckJsb2NrU2l6ZUJ5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIEhNQUMgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhtYWNIYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgaGFzaGVyID0gdGhpcy5faGFzaGVyO1xuXG5cdCAgICAgICAgICAgIC8vIFJlc2V0XG5cdCAgICAgICAgICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAgICBoYXNoZXIudXBkYXRlKHRoaXMuX2lLZXkpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVcGRhdGVzIHRoaXMgSE1BQyB3aXRoIGEgbWVzc2FnZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSBUaGUgbWVzc2FnZSB0byBhcHBlbmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtITUFDfSBUaGlzIEhNQUMgaW5zdGFuY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhtYWNIYXNoZXIudXBkYXRlKCdtZXNzYWdlJyk7XG5cdCAgICAgICAgICogICAgIGhtYWNIYXNoZXIudXBkYXRlKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoZXIudXBkYXRlKG1lc3NhZ2VVcGRhdGUpO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBITUFDIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhtYWMgPSBobWFjSGFzaGVyLmZpbmFsaXplKCk7XG5cdCAgICAgICAgICogICAgIHZhciBobWFjID0gaG1hY0hhc2hlci5maW5hbGl6ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGhhc2hlciA9IHRoaXMuX2hhc2hlcjtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIEhNQUNcblx0ICAgICAgICAgICAgdmFyIGlubmVySGFzaCA9IGhhc2hlci5maW5hbGl6ZShtZXNzYWdlVXBkYXRlKTtcblx0ICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICAgIHZhciBobWFjID0gaGFzaGVyLmZpbmFsaXplKHRoaXMuX29LZXkuY2xvbmUoKS5jb25jYXQoaW5uZXJIYXNoKSk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGhtYWM7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH0oKSk7XG5cblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi94NjQtY29yZVwiKSwgcmVxdWlyZShcIi4vbGliLXR5cGVkYXJyYXlzXCIpLCByZXF1aXJlKFwiLi9lbmMtdXRmMTZcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vc2hhMVwiKSwgcmVxdWlyZShcIi4vc2hhMjU2XCIpLCByZXF1aXJlKFwiLi9zaGEyMjRcIiksIHJlcXVpcmUoXCIuL3NoYTUxMlwiKSwgcmVxdWlyZShcIi4vc2hhMzg0XCIpLCByZXF1aXJlKFwiLi9zaGEzXCIpLCByZXF1aXJlKFwiLi9yaXBlbWQxNjBcIiksIHJlcXVpcmUoXCIuL2htYWNcIiksIHJlcXVpcmUoXCIuL3Bia2RmMlwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSwgcmVxdWlyZShcIi4vbW9kZS1jZmJcIiksIHJlcXVpcmUoXCIuL21vZGUtY3RyXCIpLCByZXF1aXJlKFwiLi9tb2RlLWN0ci1nbGFkbWFuXCIpLCByZXF1aXJlKFwiLi9tb2RlLW9mYlwiKSwgcmVxdWlyZShcIi4vbW9kZS1lY2JcIiksIHJlcXVpcmUoXCIuL3BhZC1hbnNpeDkyM1wiKSwgcmVxdWlyZShcIi4vcGFkLWlzbzEwMTI2XCIpLCByZXF1aXJlKFwiLi9wYWQtaXNvOTc5NzFcIiksIHJlcXVpcmUoXCIuL3BhZC16ZXJvcGFkZGluZ1wiKSwgcmVxdWlyZShcIi4vcGFkLW5vcGFkZGluZ1wiKSwgcmVxdWlyZShcIi4vZm9ybWF0LWhleFwiKSwgcmVxdWlyZShcIi4vYWVzXCIpLCByZXF1aXJlKFwiLi90cmlwbGVkZXNcIiksIHJlcXVpcmUoXCIuL3JjNFwiKSwgcmVxdWlyZShcIi4vcmFiYml0XCIpLCByZXF1aXJlKFwiLi9yYWJiaXQtbGVnYWN5XCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3g2NC1jb3JlXCIsIFwiLi9saWItdHlwZWRhcnJheXNcIiwgXCIuL2VuYy11dGYxNlwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9zaGExXCIsIFwiLi9zaGEyNTZcIiwgXCIuL3NoYTIyNFwiLCBcIi4vc2hhNTEyXCIsIFwiLi9zaGEzODRcIiwgXCIuL3NoYTNcIiwgXCIuL3JpcGVtZDE2MFwiLCBcIi4vaG1hY1wiLCBcIi4vcGJrZGYyXCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCIsIFwiLi9tb2RlLWNmYlwiLCBcIi4vbW9kZS1jdHJcIiwgXCIuL21vZGUtY3RyLWdsYWRtYW5cIiwgXCIuL21vZGUtb2ZiXCIsIFwiLi9tb2RlLWVjYlwiLCBcIi4vcGFkLWFuc2l4OTIzXCIsIFwiLi9wYWQtaXNvMTAxMjZcIiwgXCIuL3BhZC1pc285Nzk3MVwiLCBcIi4vcGFkLXplcm9wYWRkaW5nXCIsIFwiLi9wYWQtbm9wYWRkaW5nXCIsIFwiLi9mb3JtYXQtaGV4XCIsIFwiLi9hZXNcIiwgXCIuL3RyaXBsZWRlc1wiLCBcIi4vcmM0XCIsIFwiLi9yYWJiaXRcIiwgXCIuL3JhYmJpdC1sZWdhY3lcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRyb290LkNyeXB0b0pTID0gZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTsiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlciAodmFsLCBwcmVmaXgpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodmFsKSAmJiB0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocHJlZml4ICsgJyBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgYnVmZmVyJylcbiAgfVxufVxuXG5mdW5jdGlvbiBIYXNoQmFzZSAoYmxvY2tTaXplKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fYmxvY2sgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tTaXplKVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIHRoaXMuX2xlbmd0aCA9IFswLCAwLCAwLCAwXVxuXG4gIHRoaXMuX2ZpbmFsaXplZCA9IGZhbHNlXG59XG5cbmluaGVyaXRzKEhhc2hCYXNlLCBUcmFuc2Zvcm0pXG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgdmFyIGVycm9yID0gbnVsbFxuICB0cnkge1xuICAgIHRoaXMudXBkYXRlKGNodW5rLCBlbmNvZGluZylcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5kaWdlc3QoKSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nKSB7XG4gIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlcihkYXRhLCAnRGF0YScpXG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZylcblxuICAvLyBjb25zdW1lIGRhdGFcbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIG9mZnNldCA9IDBcbiAgd2hpbGUgKHRoaXMuX2Jsb2NrT2Zmc2V0ICsgZGF0YS5sZW5ndGggLSBvZmZzZXQgPj0gdGhpcy5fYmxvY2tTaXplKSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuX2Jsb2NrT2Zmc2V0OyBpIDwgdGhpcy5fYmxvY2tTaXplOykgYmxvY2tbaSsrXSA9IGRhdGFbb2Zmc2V0KytdXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuICB3aGlsZSAob2Zmc2V0IDwgZGF0YS5sZW5ndGgpIGJsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gZGF0YVtvZmZzZXQrK11cblxuICAvLyB1cGRhdGUgbGVuZ3RoXG4gIGZvciAodmFyIGogPSAwLCBjYXJyeSA9IGRhdGEubGVuZ3RoICogODsgY2FycnkgPiAwOyArK2opIHtcbiAgICB0aGlzLl9sZW5ndGhbal0gKz0gY2FycnlcbiAgICBjYXJyeSA9ICh0aGlzLl9sZW5ndGhbal0gLyAweDAxMDAwMDAwMDApIHwgMFxuICAgIGlmIChjYXJyeSA+IDApIHRoaXMuX2xlbmd0aFtqXSAtPSAweDAxMDAwMDAwMDAgKiBjYXJyeVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgdGhpcy5fZmluYWxpemVkID0gdHJ1ZVxuXG4gIHZhciBkaWdlc3QgPSB0aGlzLl9kaWdlc3QoKVxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkgZGlnZXN0ID0gZGlnZXN0LnRvU3RyaW5nKGVuY29kaW5nKVxuXG4gIC8vIHJlc2V0IHN0YXRlXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB0aGlzLl9sZW5ndGhbaV0gPSAwXG5cbiAgcmV0dXJuIGRpZ2VzdFxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfZGlnZXN0IGlzIG5vdCBpbXBsZW1lbnRlZCcpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaEJhc2VcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG5leHBvcnRzLmZpbmlzaGVkID0gcmVxdWlyZSgnLi9saWIvaW50ZXJuYWwvc3RyZWFtcy9lbmQtb2Ytc3RyZWFtLmpzJyk7XG5leHBvcnRzLnBpcGVsaW5lID0gcmVxdWlyZSgnLi9saWIvaW50ZXJuYWwvc3RyZWFtcy9waXBlbGluZS5qcycpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gRUVsaXN0ZW5lckNvdW50KGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxuXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuXG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cbi8qPHJlcGxhY2VtZW50PiovXG5cblxudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIGRlYnVnO1xuXG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uIGRlYnVnKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG52YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9idWZmZXJfbGlzdCcpO1xuXG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RhdGUnKSxcbiAgICBnZXRIaWdoV2F0ZXJNYXJrID0gX3JlcXVpcmUuZ2V0SGlnaFdhdGVyTWFyaztcblxudmFyIF9yZXF1aXJlJGNvZGVzID0gcmVxdWlyZSgnLi4vZXJyb3JzJykuY29kZXMsXG4gICAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSxcbiAgICBFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRixcbiAgICBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELFxuICAgIEVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UOyAvLyBMYXp5IGxvYWRlZCB0byBpbXByb3ZlIHRoZSBzdGFydHVwIHBlcmZvcm1hbmNlLlxuXG5cbnZhciBTdHJpbmdEZWNvZGVyO1xudmFyIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcjtcbnZhciBmcm9tO1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG52YXIgZXJyb3JPckRlc3Ryb3kgPSBkZXN0cm95SW1wbC5lcnJvck9yRGVzdHJveTtcbnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pOyAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55XG4gIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIoKSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay5cblxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkoZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkpIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7ZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0sIGlzRHVwbGV4KSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG5cbiAgaWYgKHR5cGVvZiBpc0R1cGxleCAhPT0gJ2Jvb2xlYW4nKSBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDsgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcblxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTsgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGdldEhpZ2hXYXRlck1hcmsodGhpcywgb3B0aW9ucywgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIGlzRHVwbGV4KTsgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7IC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cblxuICB0aGlzLnN5bmMgPSB0cnVlOyAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cblxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHRoaXMucGF1c2VkID0gdHJ1ZTsgLy8gU2hvdWxkIGNsb3NlIGJlIGVtaXR0ZWQgb24gZGVzdHJveS4gRGVmYXVsdHMgdG8gdHJ1ZS5cblxuICB0aGlzLmVtaXRDbG9zZSA9IG9wdGlvbnMuZW1pdENsb3NlICE9PSBmYWxzZTsgLy8gU2hvdWxkIC5kZXN0cm95KCkgYmUgY2FsbGVkIGFmdGVyICdlbmQnIChhbmQgcG90ZW50aWFsbHkgJ2ZpbmlzaCcpXG5cbiAgdGhpcy5hdXRvRGVzdHJveSA9ICEhb3B0aW9ucy5hdXRvRGVzdHJveTsgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG5cbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTsgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cblxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcblxuICB0aGlzLmF3YWl0RHJhaW4gPSAwOyAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG5cbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcblxuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpOyAvLyBDaGVja2luZyBmb3IgYSBTdHJlYW0uRHVwbGV4IGluc3RhbmNlIGlzIGZhc3RlciBoZXJlIGluc3RlYWQgb2YgaW5zaWRlXG4gIC8vIHRoZSBSZWFkYWJsZVN0YXRlIGNvbnN0cnVjdG9yLCBhdCBsZWFzdCB3aXRoIFY4IDYuNVxuXG4gIHZhciBpc0R1cGxleCA9IHRoaXMgaW5zdGFuY2VvZiBEdXBsZXg7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzLCBpc0R1cGxleCk7IC8vIGxlZ2FjeVxuXG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG5cblxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIGNiKGVycik7XG59OyAvLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuXG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTtcbn07IC8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIGRlYnVnKCdyZWFkYWJsZUFkZENodW5rJywgY2h1bmspO1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG5cbiAgICBpZiAoZXIpIHtcbiAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBlcnJvck9yRGVzdHJveShzdHJlYW0sIG5ldyBFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UKCkpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBlcnJvck9yRGVzdHJveShzdHJlYW0sIG5ldyBFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GKCkpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5kZXN0cm95ZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gIH0gLy8gV2UgY2FuIHB1c2ggbW9yZSBkYXRhIGlmIHdlIGFyZSBiZWxvdyB0aGUgaGlnaFdhdGVyTWFyay5cbiAgLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWUgbW9yZSBieXRlcy5cbiAgLy8gVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCwgc3VjaCBhcyB0aGUgcmVwbC5cblxuXG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfVxuXG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuXG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2NodW5rJywgWydzdHJpbmcnLCAnQnVmZmVyJywgJ1VpbnQ4QXJyYXknXSwgY2h1bmspO1xuICB9XG5cbiAgcmV0dXJuIGVyO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTsgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB2YXIgZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IGRlY29kZXI7IC8vIElmIHNldEVuY29kaW5nKG51bGwpLCBkZWNvZGVyLmVuY29kaW5nIGVxdWFscyB1dGY4XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2Rlci5lbmNvZGluZzsgLy8gSXRlcmF0ZSBvdmVyIGN1cnJlbnQgYnVmZmVyIHRvIGNvbnZlcnQgYWxyZWFkeSBzdG9yZWQgQnVmZmVyczpcblxuICB2YXIgcCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLmhlYWQ7XG4gIHZhciBjb250ZW50ID0gJyc7XG5cbiAgd2hpbGUgKHAgIT09IG51bGwpIHtcbiAgICBjb250ZW50ICs9IGRlY29kZXIud3JpdGUocC5kYXRhKTtcbiAgICBwID0gcC5uZXh0O1xuICB9XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXIuY2xlYXIoKTtcblxuICBpZiAoY29udGVudCAhPT0gJycpIHRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyLnB1c2goY29udGVudCk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoID0gY29udGVudC5sZW5ndGg7XG4gIHJldHVybiB0aGlzO1xufTsgLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDFHQlxuXG5cbnZhciBNQVhfSFdNID0gMHg0MDAwMDAwMDtcblxuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgLy8gVE9ETyhyb25hZyk6IFRocm93IEVSUl9WQUxVRV9PVVRfT0ZfUkFOR0UuXG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuXG4gIHJldHVybiBuO1xufSAvLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cblxuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuXG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9IC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuXG5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47IC8vIERvbid0IGhhdmUgZW5vdWdoXG5cbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufSAvLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlOyAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmICgoc3RhdGUuaGlnaFdhdGVyTWFyayAhPT0gMCA/IHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIDogc3RhdGUubGVuZ3RoID4gMCkgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpOyAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG5cblxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7IC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH0gLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuXG5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTsgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cblxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcblxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG5cbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7IC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBzdGF0ZS5sZW5ndGggPD0gc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgZGVidWcoJ29uRW9mQ2h1bmsnKTtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG5cbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuXG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUuc3luYykge1xuICAgIC8vIGlmIHdlIGFyZSBzeW5jLCB3YWl0IHVudGlsIG5leHQgdGljayB0byBlbWl0IHRoZSBkYXRhLlxuICAgIC8vIE90aGVyd2lzZSB3ZSByaXNrIGVtaXR0aW5nIGRhdGEgaW4gdGhlIGZsb3coKVxuICAgIC8vIHRoZSByZWFkYWJsZSBjb2RlIHRyaWdnZXJzIGR1cmluZyBhIHJlYWQoKSBjYWxsXG4gICAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgICB9XG4gIH1cbn0gLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cblxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLm5lZWRSZWFkYWJsZSwgc3RhdGUuZW1pdHRlZFJlYWRhYmxlKTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZW1pdFJlYWRhYmxlXycsIHN0YXRlLmRlc3Ryb3llZCwgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG5cbiAgaWYgKCFzdGF0ZS5kZXN0cm95ZWQgJiYgKHN0YXRlLmxlbmd0aCB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgfSAvLyBUaGUgc3RyZWFtIG5lZWRzIGFub3RoZXIgcmVhZGFibGUgZXZlbnQgaWZcbiAgLy8gMS4gSXQgaXMgbm90IGZsb3dpbmcsIGFzIHRoZSBmbG93IG1lY2hhbmlzbSB3aWxsIHRha2VcbiAgLy8gICAgY2FyZSBvZiBpdC5cbiAgLy8gMi4gSXQgaXMgbm90IGVuZGVkLlxuICAvLyAzLiBJdCBpcyBiZWxvdyB0aGUgaGlnaFdhdGVyTWFyaywgc28gd2UgY2FuIHNjaGVkdWxlXG4gIC8vICAgIGFub3RoZXIgcmVhZGFibGUgbGF0ZXIuXG5cblxuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDw9IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIGZsb3coc3RyZWFtKTtcbn0gLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICAvLyBBdHRlbXB0IHRvIHJlYWQgbW9yZSBkYXRhIGlmIHdlIHNob3VsZC5cbiAgLy9cbiAgLy8gVGhlIGNvbmRpdGlvbnMgZm9yIHJlYWRpbmcgbW9yZSBkYXRhIGFyZSAob25lIG9mKTpcbiAgLy8gLSBOb3QgZW5vdWdoIGRhdGEgYnVmZmVyZWQgKHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspLiBUaGUgbG9vcFxuICAvLyAgIGlzIHJlc3BvbnNpYmxlIGZvciBmaWxsaW5nIHRoZSBidWZmZXIgd2l0aCBlbm91Z2ggZGF0YSBpZiBzdWNoIGRhdGFcbiAgLy8gICBpcyBhdmFpbGFibGUuIElmIGhpZ2hXYXRlck1hcmsgaXMgMCBhbmQgd2UgYXJlIG5vdCBpbiB0aGUgZmxvd2luZyBtb2RlXG4gIC8vICAgd2Ugc2hvdWxkIF9ub3RfIGF0dGVtcHQgdG8gYnVmZmVyIGFueSBleHRyYSBkYXRhLiBXZSdsbCBnZXQgbW9yZSBkYXRhXG4gIC8vICAgd2hlbiB0aGUgc3RyZWFtIGNvbnN1bWVyIGNhbGxzIHJlYWQoKSBpbnN0ZWFkLlxuICAvLyAtIE5vIGRhdGEgaW4gdGhlIGJ1ZmZlciwgYW5kIHRoZSBzdHJlYW0gaXMgaW4gZmxvd2luZyBtb2RlLiBJbiB0aGlzIG1vZGVcbiAgLy8gICB0aGUgbG9vcCBiZWxvdyBpcyByZXNwb25zaWJsZSBmb3IgZW5zdXJpbmcgcmVhZCgpIGlzIGNhbGxlZC4gRmFpbGluZyB0b1xuICAvLyAgIGNhbGwgcmVhZCBoZXJlIHdvdWxkIGFib3J0IHRoZSBmbG93IGFuZCB0aGVyZSdzIG5vIG90aGVyIG1lY2hhbmlzbSBmb3JcbiAgLy8gICBjb250aW51aW5nIHRoZSBmbG93IGlmIHRoZSBzdHJlYW0gY29uc3VtZXIgaGFzIGp1c3Qgc3Vic2NyaWJlZCB0byB0aGVcbiAgLy8gICAnZGF0YScgZXZlbnQuXG4gIC8vXG4gIC8vIEluIGFkZGl0aW9uIHRvIHRoZSBhYm92ZSBjb25kaXRpb25zIHRvIGtlZXAgcmVhZGluZyBkYXRhLCB0aGUgZm9sbG93aW5nXG4gIC8vIGNvbmRpdGlvbnMgcHJldmVudCB0aGUgZGF0YSBmcm9tIGJlaW5nIHJlYWQ6XG4gIC8vIC0gVGhlIHN0cmVhbSBoYXMgZW5kZWQgKHN0YXRlLmVuZGVkKS5cbiAgLy8gLSBUaGVyZSBpcyBhbHJlYWR5IGEgcGVuZGluZyAncmVhZCcgb3BlcmF0aW9uIChzdGF0ZS5yZWFkaW5nKS4gVGhpcyBpcyBhXG4gIC8vICAgY2FzZSB3aGVyZSB0aGUgdGhlIHN0cmVhbSBoYXMgY2FsbGVkIHRoZSBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIF9yZWFkKClcbiAgLy8gICBtZXRob2QsIGJ1dCB0aGV5IGFyZSBwcm9jZXNzaW5nIHRoZSBjYWxsIGFzeW5jaHJvbm91c2x5IGFuZCBoYXZlIF9ub3RfXG4gIC8vICAgY2FsbGVkIHB1c2goKSB3aXRoIG5ldyBkYXRhLiBJbiB0aGlzIGNhc2Ugd2Ugc2tpcCBwZXJmb3JtaW5nIG1vcmVcbiAgLy8gICByZWFkKClzLiBUaGUgZXhlY3V0aW9uIGVuZHMgaW4gdGhpcyBtZXRob2QgYWdhaW4gYWZ0ZXIgdGhlIF9yZWFkKCkgZW5kc1xuICAvLyAgIHVwIGNhbGxpbmcgcHVzaCgpIHdpdGggbW9yZSBkYXRhLlxuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwKSkge1xuICAgIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKSAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7XG4gIH1cblxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufSAvLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICBlcnJvck9yRGVzdHJveSh0aGlzLCBuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ19yZWFkKCknKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHByb2Nlc3MubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuXG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG5cbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfSAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cblxuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTsgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBjbGVhbmVkVXAgPSB0cnVlOyAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGRlYnVnKCdkZXN0LndyaXRlJywgcmV0KTtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgfVxuXG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH0gLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cblxuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGVycm9yT3JEZXN0cm95KGRlc3QsIGVyKTtcbiAgfSAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG5cblxuICBwcmVwZW5kTGlzdGVuZXIoZGVzdCwgJ2Vycm9yJywgb25lcnJvcik7IC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cblxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG5cbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuXG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfSAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuXG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTsgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwaXBlT25EcmFpbkZ1bmN0aW9uUmVzdWx0KCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7XG4gICAgaGFzVW5waXBlZDogZmFsc2VcbiAgfTsgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpczsgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzOyAvLyBnb3QgYSBtYXRjaC5cblxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHtcbiAgICAgICAgaGFzVW5waXBlZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG5cblxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gIHJldHVybiB0aGlzO1xufTsgLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblxuXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIHVwZGF0ZSByZWFkYWJsZUxpc3RlbmluZyBzbyB0aGF0IHJlc3VtZSgpIG1heSBiZSBhIG5vLW9wXG4gICAgLy8gYSBmZXcgbGluZXMgZG93bi4gVGhpcyBpcyBuZWVkZWQgdG8gc3VwcG9ydCBvbmNlKCdyZWFkYWJsZScpLlxuICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gdGhpcy5saXN0ZW5lckNvdW50KCdyZWFkYWJsZScpID4gMDsgLy8gVHJ5IHN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBkZWJ1Zygnb24gcmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLnJlYWRpbmcpO1xuXG4gICAgICBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIHRoZXJlIGlzIHNvbWVvbmUgc3RpbGwgbGlzdGVuaW5nIHRvXG4gICAgLy8gcmVhZGFibGUgYW5kIHJlc2V0IHRoZSBzdGF0ZS4gSG93ZXZlciB0aGlzIG5lZWRzIHRvIGhhcHBlblxuICAgIC8vIGFmdGVyIHJlYWRhYmxlIGhhcyBiZWVuIGVtaXR0ZWQgYnV0IGJlZm9yZSBJL08gKG5leHRUaWNrKSB0b1xuICAgIC8vIHN1cHBvcnQgb25jZSgncmVhZGFibGUnLCBmbikgY3ljbGVzLiBUaGlzIG1lYW5zIHRoYXQgY2FsbGluZ1xuICAgIC8vIHJlc3VtZSB3aXRoaW4gdGhlIHNhbWUgdGljayB3aWxsIGhhdmUgbm9cbiAgICAvLyBlZmZlY3QuXG4gICAgcHJvY2Vzcy5uZXh0VGljayh1cGRhdGVSZWFkYWJsZUxpc3RlbmluZywgdGhpcyk7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIChldikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBpZiAoZXYgPT09ICdyZWFkYWJsZScgfHwgZXYgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlcmUgaXMgc29tZW9uZSBzdGlsbCBsaXN0ZW5pbmcgdG9cbiAgICAvLyByZWFkYWJsZSBhbmQgcmVzZXQgdGhlIHN0YXRlLiBIb3dldmVyIHRoaXMgbmVlZHMgdG8gaGFwcGVuXG4gICAgLy8gYWZ0ZXIgcmVhZGFibGUgaGFzIGJlZW4gZW1pdHRlZCBidXQgYmVmb3JlIEkvTyAobmV4dFRpY2spIHRvXG4gICAgLy8gc3VwcG9ydCBvbmNlKCdyZWFkYWJsZScsIGZuKSBjeWNsZXMuIFRoaXMgbWVhbnMgdGhhdCBjYWxsaW5nXG4gICAgLy8gcmVzdW1lIHdpdGhpbiB0aGUgc2FtZSB0aWNrIHdpbGwgaGF2ZSBub1xuICAgIC8vIGVmZmVjdC5cbiAgICBwcm9jZXNzLm5leHRUaWNrKHVwZGF0ZVJlYWRhYmxlTGlzdGVuaW5nLCB0aGlzKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVSZWFkYWJsZUxpc3RlbmluZyhzZWxmKSB7XG4gIHZhciBzdGF0ZSA9IHNlbGYuX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc2VsZi5saXN0ZW5lckNvdW50KCdyZWFkYWJsZScpID4gMDtcblxuICBpZiAoc3RhdGUucmVzdW1lU2NoZWR1bGVkICYmICFzdGF0ZS5wYXVzZWQpIHtcbiAgICAvLyBmbG93aW5nIG5lZWRzIHRvIGJlIHNldCB0byB0cnVlIG5vdywgb3RoZXJ3aXNlXG4gICAgLy8gdGhlIHVwY29taW5nIHJlc3VtZSB3aWxsIG5vdCBmbG93LlxuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlOyAvLyBjcnVkZSB3YXkgdG8gY2hlY2sgaWYgd2Ugc2hvdWxkIHJlc3VtZVxuICB9IGVsc2UgaWYgKHNlbGYubGlzdGVuZXJDb3VudCgnZGF0YScpID4gMCkge1xuICAgIHNlbGYucmVzdW1lKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufSAvLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7IC8vIHdlIGZsb3cgb25seSBpZiB0aGVyZSBpcyBubyBvbmUgbGlzdGVuaW5nXG4gICAgLy8gZm9yIHJlYWRhYmxlLCBidXQgd2Ugc3RpbGwgaGF2ZSB0byBjYWxsXG4gICAgLy8gcmVzdW1lKClcblxuICAgIHN0YXRlLmZsb3dpbmcgPSAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmc7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuXG4gIHN0YXRlLnBhdXNlZCA9IGZhbHNlO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBkZWJ1ZygncmVzdW1lJywgc3RhdGUucmVhZGluZyk7XG5cbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUucGF1c2VkID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG5cbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge1xuICAgIDtcbiAgfVxufSAvLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcblxuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7IC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pOyAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gbWV0aG9kV3JhcChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG1ldGhvZFdyYXBSZXR1cm5GdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH0gLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuXG5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfSAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuXG5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcblxuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG4gIFJlYWRhYmxlLnByb3RvdHlwZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjcmVhdGVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvYXN5bmNfaXRlcmF0b3InKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHRoaXMpO1xuICB9O1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUJ1ZmZlcicsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlRmxvd2luZycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gc3RhdGU7XG4gICAgfVxuICB9XG59KTsgLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUxlbmd0aCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoO1xuICB9XG59KTsgLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5maXJzdCgpO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbnN1bWUobiwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2VuZFJlYWRhYmxlJywgc3RhdGUuZW5kRW1pdHRlZCk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIGRlYnVnKCdlbmRSZWFkYWJsZU5UJywgc3RhdGUuZW5kRW1pdHRlZCwgc3RhdGUubGVuZ3RoKTsgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcblxuICAgIGlmIChzdGF0ZS5hdXRvRGVzdHJveSkge1xuICAgICAgLy8gSW4gY2FzZSBvZiBkdXBsZXggc3RyZWFtcyB3ZSBuZWVkIGEgd2F5IHRvIGRldGVjdFxuICAgICAgLy8gaWYgdGhlIHdyaXRhYmxlIHNpZGUgaXMgcmVhZHkgZm9yIGF1dG9EZXN0cm95IGFzIHdlbGxcbiAgICAgIHZhciB3U3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG5cbiAgICAgIGlmICghd1N0YXRlIHx8IHdTdGF0ZS5hdXRvRGVzdHJveSAmJiB3U3RhdGUuZmluaXNoZWQpIHtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVhZGFibGUuZnJvbSA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgb3B0cykge1xuICAgIGlmIChmcm9tID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZyb20gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZnJvbScpO1xuICAgIH1cblxuICAgIHJldHVybiBmcm9tKFJlYWRhYmxlLCBpdGVyYWJsZSwgb3B0cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG5cbiAgcmV0dXJuIC0xO1xufSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuIiwiJ3VzZSBzdHJpY3QnOyAvLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5cbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyKSB7XG4gICAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSB7XG4gICAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfSAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG5cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgaWYgKCFfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRFcnJvckFuZENsb3NlTlQsIF90aGlzLCBlcnIpO1xuICAgICAgfSBlbHNlIGlmICghX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yQW5kQ2xvc2VOVCwgX3RoaXMsIGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZU5ULCBfdGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpO1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0Q2xvc2VOVCwgX3RoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvckFuZENsb3NlTlQoc2VsZiwgZXJyKSB7XG4gIGVtaXRFcnJvck5UKHNlbGYsIGVycik7XG4gIGVtaXRDbG9zZU5UKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBlbWl0Q2xvc2VOVChzZWxmKSB7XG4gIGlmIChzZWxmLl93cml0YWJsZVN0YXRlICYmICFzZWxmLl93cml0YWJsZVN0YXRlLmVtaXRDbG9zZSkgcmV0dXJuO1xuICBpZiAoc2VsZi5fcmVhZGFibGVTdGF0ZSAmJiAhc2VsZi5fcmVhZGFibGVTdGF0ZS5lbWl0Q2xvc2UpIHJldHVybjtcbiAgc2VsZi5lbWl0KCdjbG9zZScpO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5hbENhbGxlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUucHJlZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbmZ1bmN0aW9uIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXJyKSB7XG4gIC8vIFdlIGhhdmUgdGVzdHMgdGhhdCByZWx5IG9uIGVycm9ycyBiZWluZyBlbWl0dGVkXG4gIC8vIGluIHRoZSBzYW1lIHRpY2ssIHNvIGNoYW5naW5nIHRoaXMgaXMgc2VtdmVyIG1ham9yLlxuICAvLyBGb3Igbm93IHdoZW4geW91IG9wdC1pbiB0byBhdXRvRGVzdHJveSB3ZSBhbGxvd1xuICAvLyB0aGUgZXJyb3IgdG8gYmUgZW1pdHRlZCBuZXh0VGljay4gSW4gYSBmdXR1cmVcbiAgLy8gc2VtdmVyIG1ham9yIHVwZGF0ZSB3ZSBzaG91bGQgY2hhbmdlIHRoZSBkZWZhdWx0IHRvIHRoaXMuXG4gIHZhciByU3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB3U3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIGlmIChyU3RhdGUgJiYgclN0YXRlLmF1dG9EZXN0cm95IHx8IHdTdGF0ZSAmJiB3U3RhdGUuYXV0b0Rlc3Ryb3kpIHN0cmVhbS5kZXN0cm95KGVycik7ZWxzZSBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3ksXG4gIGVycm9yT3JEZXN0cm95OiBlcnJvck9yRGVzdHJveVxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUlJfSU5WQUxJRF9PUFRfVkFMVUUgPSByZXF1aXJlKCcuLi8uLi8uLi9lcnJvcnMnKS5jb2Rlcy5FUlJfSU5WQUxJRF9PUFRfVkFMVUU7XG5cbmZ1bmN0aW9uIGhpZ2hXYXRlck1hcmtGcm9tKG9wdGlvbnMsIGlzRHVwbGV4LCBkdXBsZXhLZXkpIHtcbiAgcmV0dXJuIG9wdGlvbnMuaGlnaFdhdGVyTWFyayAhPSBudWxsID8gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrIDogaXNEdXBsZXggPyBvcHRpb25zW2R1cGxleEtleV0gOiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRIaWdoV2F0ZXJNYXJrKHN0YXRlLCBvcHRpb25zLCBkdXBsZXhLZXksIGlzRHVwbGV4KSB7XG4gIHZhciBod20gPSBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zLCBpc0R1cGxleCwgZHVwbGV4S2V5KTtcblxuICBpZiAoaHdtICE9IG51bGwpIHtcbiAgICBpZiAoIShpc0Zpbml0ZShod20pICYmIE1hdGguZmxvb3IoaHdtKSA9PT0gaHdtKSB8fCBod20gPCAwKSB7XG4gICAgICB2YXIgbmFtZSA9IGlzRHVwbGV4ID8gZHVwbGV4S2V5IDogJ2hpZ2hXYXRlck1hcmsnO1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX09QVF9WQUxVRShuYW1lLCBod20pO1xuICAgIH1cblxuICAgIHJldHVybiBNYXRoLmZsb29yKGh3bSk7XG4gIH0gLy8gRGVmYXVsdCB2YWx1ZVxuXG5cbiAgcmV0dXJuIHN0YXRlLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEhpZ2hXYXRlck1hcms6IGdldEhpZ2hXYXRlck1hcmtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn0gLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cblxuXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG5cbiAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTtcbiAgfTtcbn1cbi8qIDwvcmVwbGFjZW1lbnQ+ICovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cblxudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuXG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlJyksXG4gICAgZ2V0SGlnaFdhdGVyTWFyayA9IF9yZXF1aXJlLmdldEhpZ2hXYXRlck1hcms7XG5cbnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpLmNvZGVzLFxuICAgIEVSUl9JTlZBTElEX0FSR19UWVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEUsXG4gICAgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCxcbiAgICBFUlJfTVVMVElQTEVfQ0FMTEJBQ0sgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTVVMVElQTEVfQ0FMTEJBQ0ssXG4gICAgRVJSX1NUUkVBTV9DQU5OT1RfUElQRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUsXG4gICAgRVJSX1NUUkVBTV9ERVNUUk9ZRUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX0RFU1RST1lFRCxcbiAgICBFUlJfU1RSRUFNX05VTExfVkFMVUVTID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUyxcbiAgICBFUlJfU1RSRUFNX1dSSVRFX0FGVEVSX0VORCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5ELFxuICAgIEVSUl9VTktOT1dOX0VOQ09ESU5HID0gX3JlcXVpcmUkY29kZXMuRVJSX1VOS05PV05fRU5DT0RJTkc7XG5cbnZhciBlcnJvck9yRGVzdHJveSA9IGRlc3Ryb3lJbXBsLmVycm9yT3JEZXN0cm95O1xuXG5yZXF1aXJlKCdpbmhlcml0cycpKFdyaXRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSwgaXNEdXBsZXgpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLFxuICAvLyBlLmcuIG9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlIHZzLiBvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZSwgZXRjLlxuXG4gIGlmICh0eXBlb2YgaXNEdXBsZXggIT09ICdib29sZWFuJykgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7IC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7IC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGdldEhpZ2hXYXRlck1hcmsodGhpcywgb3B0aW9ucywgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIGlzRHVwbGV4KTsgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuXG4gIHRoaXMuZmluYWxDYWxsZWQgPSBmYWxzZTsgLy8gZHJhaW4gZXZlbnQgZmxhZy5cblxuICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlOyAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxuXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7IC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcblxuICB0aGlzLmVuZGVkID0gZmFsc2U7IC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuXG4gIHRoaXMuZmluaXNoZWQgPSBmYWxzZTsgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG5cbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTsgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuXG4gIHZhciBub0RlY29kZSA9IG9wdGlvbnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTsgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cblxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cblxuICB0aGlzLmxlbmd0aCA9IDA7IC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG5cbiAgdGhpcy53cml0aW5nID0gZmFsc2U7IC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcblxuICB0aGlzLmNvcmtlZCA9IDA7IC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuXG4gIHRoaXMuc3luYyA9IHRydWU7IC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG5cbiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7IC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcblxuICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9OyAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcblxuXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7IC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cblxuICB0aGlzLndyaXRlbGVuID0gMDtcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsOyAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcblxuICB0aGlzLnBlbmRpbmdjYiA9IDA7IC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcblxuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7IC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTsgLy8gU2hvdWxkIGNsb3NlIGJlIGVtaXR0ZWQgb24gZGVzdHJveS4gRGVmYXVsdHMgdG8gdHJ1ZS5cblxuICB0aGlzLmVtaXRDbG9zZSA9IG9wdGlvbnMuZW1pdENsb3NlICE9PSBmYWxzZTsgLy8gU2hvdWxkIC5kZXN0cm95KCkgYmUgY2FsbGVkIGFmdGVyICdmaW5pc2gnIChhbmQgcG90ZW50aWFsbHkgJ2VuZCcpXG5cbiAgdGhpcy5hdXRvRGVzdHJveSA9ICEhb3B0aW9ucy5hdXRvRGVzdHJveTsgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDsgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG5cbiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbn1cblxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0O1xuICB2YXIgb3V0ID0gW107XG5cbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uIHdyaXRhYmxlU3RhdGVCdWZmZXJHZXR0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpOyAvLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cblxuXG52YXIgcmVhbEhhc0luc3RhbmNlO1xuXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QuX3dyaXRhYmxlU3RhdGUgaW5zdGFuY2VvZiBXcml0YWJsZVN0YXRlO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICByZWFsSGFzSW5zdGFuY2UgPSBmdW5jdGlvbiByZWFsSGFzSW5zdGFuY2Uob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIHRoaXM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTsgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAvLyBDaGVja2luZyBmb3IgYSBTdHJlYW0uRHVwbGV4IGluc3RhbmNlIGlzIGZhc3RlciBoZXJlIGluc3RlYWQgb2YgaW5zaWRlXG4gIC8vIHRoZSBXcml0YWJsZVN0YXRlIGNvbnN0cnVjdG9yLCBhdCBsZWFzdCB3aXRoIFY4IDYuNVxuXG4gIHZhciBpc0R1cGxleCA9IHRoaXMgaW5zdGFuY2VvZiBEdXBsZXg7XG4gIGlmICghaXNEdXBsZXggJiYgIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSkgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMsIGlzRHVwbGV4KTsgLy8gbGVnYWN5LlxuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn0gLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuXG5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICBlcnJvck9yRGVzdHJveSh0aGlzLCBuZXcgRVJSX1NUUkVBTV9DQU5OT1RfUElQRSgpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQoKTsgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcblxuICBlcnJvck9yRGVzdHJveShzdHJlYW0sIGVyKTtcbiAgcHJvY2Vzcy5uZXh0VGljayhjYiwgZXIpO1xufSAvLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5cblxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIGVyO1xuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IEVSUl9TVFJFQU1fTlVMTF9WQUxVRVMoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2NodW5rJywgWydzdHJpbmcnLCAnQnVmZmVyJ10sIGNodW5rKTtcbiAgfVxuXG4gIGlmIChlcikge1xuICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXIpO1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2IsIGVyKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuXG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG4gIGlmIChzdGF0ZS5lbmRpbmcpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBFUlJfVU5LTk9XTl9FTkNPRElORyhlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlQnVmZmVyJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpO1xuICB9XG59KTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuXG4gIHJldHVybiBjaHVuaztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7IC8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuXG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyazsgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcblxuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cblxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAoc3RhdGUuZGVzdHJveWVkKSBzdGF0ZS5vbndyaXRlKG5ldyBFUlJfU1RSRUFNX0RFU1RST1lFRCgnd3JpdGUnKSk7ZWxzZSBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2IsIGVyKTsgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuXG4gICAgcHJvY2Vzcy5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNhbGxlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVmb3JlIGlmXG4gICAgLy8gaXQgaXMgYXN5bmNcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgZXJyb3JPckRlc3Ryb3koc3RyZWFtLCBlcik7IC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG5cbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVSUl9NVUxUSVBMRV9DQUxMQkFDSygpO1xuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSkgfHwgc3RyZWFtLmRlc3Ryb3llZDtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59IC8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuXG5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn0gLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcblxuXG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG5cbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuXG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTsgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcblxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cblxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTsgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cblxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ193cml0ZSgpJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTsgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9IC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cblxuXG4gIGlmICghc3RhdGUuZW5kaW5nKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUxlbmd0aCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUubGVuZ3RoO1xuICB9XG59KTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuXG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcblxuICAgIGlmIChlcnIpIHtcbiAgICAgIGVycm9yT3JEZXN0cm95KHN0cmVhbSwgZXJyKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicgJiYgIXN0YXRlLmRlc3Ryb3llZCkge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuXG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuXG4gICAgICBpZiAoc3RhdGUuYXV0b0Rlc3Ryb3kpIHtcbiAgICAgICAgLy8gSW4gY2FzZSBvZiBkdXBsZXggc3RyZWFtcyB3ZSBuZWVkIGEgd2F5IHRvIGRldGVjdFxuICAgICAgICAvLyBpZiB0aGUgcmVhZGFibGUgc2lkZSBpcyByZWFkeSBmb3IgYXV0b0Rlc3Ryb3kgYXMgd2VsbFxuICAgICAgICB2YXIgclN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gICAgICAgIGlmICghclN0YXRlIHx8IHJTdGF0ZS5hdXRvRGVzdHJveSAmJiByU3RhdGUuZW5kRW1pdHRlZCkge1xuICAgICAgICAgIHN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG5cbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwcm9jZXNzLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cblxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuXG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9IC8vIHJldXNlIHRoZSBmcmVlIGNvcmtSZXEuXG5cblxuICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuXG5cbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICBjYihlcnIpO1xufTsiLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGU7XG5cbi8qKlxuICogTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS5ub0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIHRocm93IGFuIEVycm9yIHdoZW4gaW52b2tlZC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgaW52b2tlIGBjb25zb2xlLnRyYWNlKClgIGluc3RlYWQgb2YgYGNvbnNvbGUuZXJyb3IoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gdGhlIHN0cmluZyB0byBwcmludCB0byB0aGUgY29uc29sZSB3aGVuIGBmbmAgaXMgaW52b2tlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVwcmVjYXRlIChmbiwgbXNnKSB7XG4gIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGBsb2NhbFN0b3JhZ2VgIGZvciBib29sZWFuIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb25maWcgKG5hbWUpIHtcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcbiAgdHJ5IHtcbiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbi8vIGEgdHJhbnNmb3JtIHN0cmVhbSBpcyBhIHJlYWRhYmxlL3dyaXRhYmxlIHN0cmVhbSB3aGVyZSB5b3UgZG9cbi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcbi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlXG4vLyBzb21lIGJpdHMgcGFzcyB0aHJvdWdoLCBhbmQgb3RoZXJzIGFyZSBzaW1wbHkgaWdub3JlZC4gIChUaGF0IHdvdWxkXG4vLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXG4vL1xuLy8gV2hpbGUgdGhlIG91dHB1dCBpcyBjYXVzYWxseSByZWxhdGVkIHRvIHRoZSBpbnB1dCwgaXQncyBub3QgYVxuLy8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXG4vLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW5cbi8vIGVtaXQgYSBzaW5nbGUgY29tcHJlc3NlZCBjaHVuayBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS5cbi8vXG4vLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6XG4vL1xuLy8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXG4vLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpXG4vLyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBmYWxzZSBpZiB0aGVyZSdzIGEgbG90IG9mIHBlbmRpbmcgd3JpdGVzXG4vLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXG4vLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuXG4vL1xuLy8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cbi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlXG4vLyBidWZmZXJlZCBfd3JpdGUgY2IncyBhcyBpdCBjb25zdW1lcyBjaHVua3MuICBJZiBjb25zdW1pbmcgYSBzaW5nbGVcbi8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XG4vLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG9cbi8vIHRoZSByZWFkIGJ1ZmZlciwgYW5kIHdpbGwgY2F1c2UgaXQgdG8gZW1pdCAncmVhZGFibGUnIGlmIG5lY2Vzc2FyeS5cbi8vXG4vLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsXG4vLyBzaW5jZSBfcmVhZCBoYXMgdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgY2h1bmsuICBIb3dldmVyLFxuLy8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xuLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXNcbi8vIGludGVycHJldGVkIGFzIGFuIGludGVnZXIgZnJvbSAwLTI1NSwgYW5kIHRoZW4gcmVzdWx0cyBpbiB0aGF0IG1hbnlcbi8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cbi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbFxuLy8gYW1vdW50IG9mIGlucHV0LCBhbmQgZW5kIHVwIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBvdXRwdXQuICBJblxuLy8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXG4vLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0ZSBjb3VsZFxuLy8gY2F1c2UgdGhlIHN5c3RlbSB0byBydW4gb3V0IG9mIG1lbW9yeS5cbi8vXG4vLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rXG4vLyB3b3VsZCBiZSBjb25zdW1lZCwgYW5kIHRoZW4gdGhlIHJlc3Qgd291bGQgd2FpdCAodW4tdHJhbnNmb3JtZWQpIHVudGlsXG4vLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm07XG5cbnZhciBfcmVxdWlyZSRjb2RlcyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpLmNvZGVzLFxuICAgIEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEID0gX3JlcXVpcmUkY29kZXMuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsXG4gICAgRVJSX01VTFRJUExFX0NBTExCQUNLID0gX3JlcXVpcmUkY29kZXMuRVJSX01VTFRJUExFX0NBTExCQUNLLFxuICAgIEVSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkcgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HLFxuICAgIEVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMDtcblxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxucmVxdWlyZSgnaW5oZXJpdHMnKShUcmFuc2Zvcm0sIER1cGxleCk7XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoY2IgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFUlJfTVVMVElQTEVfQ0FMTEJBQ0soKSk7XG4gIH1cblxuICB0cy53cml0ZWNodW5rID0gbnVsbDtcbiAgdHMud3JpdGVjYiA9IG51bGw7XG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHRoaXMucHVzaChkYXRhKTtcbiAgY2IoZXIpO1xuICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBycy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG4gIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IHtcbiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1pbmc6IGZhbHNlLFxuICAgIHdyaXRlY2I6IG51bGwsXG4gICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICB3cml0ZWVuY29kaW5nOiBudWxsXG4gIH07IC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH0gLy8gV2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuXG5cbiAgdGhpcy5vbigncHJlZmluaXNoJywgcHJlZmluaXNoKTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicgJiYgIXRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59OyAvLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuXG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCgnX3RyYW5zZm9ybSgpJykpO1xufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMud3JpdGVjYiA9IGNiO1xuICB0cy53cml0ZWNodW5rID0gY2h1bms7XG4gIHRzLndyaXRlZW5jb2RpbmcgPSBlbmNvZGluZztcblxuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07IC8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG5cbiAgaWYgKHRzLndyaXRlY2h1bmsgIT09IG51bGwgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG5cbiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW5cbiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC5cbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgfVxufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIER1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLCBlcnIsIGZ1bmN0aW9uIChlcnIyKSB7XG4gICAgY2IoZXJyMik7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyLCBkYXRhKSB7XG4gIGlmIChlcikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7IC8vIFRPRE8oQnJpZGdlQVIpOiBXcml0ZSBhIHRlc3QgZm9yIHRoZXNlIHR3byBlcnJvciBjYXNlc1xuICAvLyBpZiB0aGVyZSdzIG5vdGhpbmcgaW4gdGhlIHdyaXRlIGJ1ZmZlciwgdGhlbiB0aGF0IG1lYW5zXG4gIC8vIHRoYXQgbm90aGluZyBtb3JlIHdpbGwgZXZlciBiZSBwcm92aWRlZFxuXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wKCk7XG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkcoKTtcbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4QTJGOTgsIDB4NzEzNzQ0OTEsIDB4QjVDMEZCQ0YsIDB4RTlCNURCQTUsXG4gIDB4Mzk1NkMyNUIsIDB4NTlGMTExRjEsIDB4OTIzRjgyQTQsIDB4QUIxQzVFRDUsXG4gIDB4RDgwN0FBOTgsIDB4MTI4MzVCMDEsIDB4MjQzMTg1QkUsIDB4NTUwQzdEQzMsXG4gIDB4NzJCRTVENzQsIDB4ODBERUIxRkUsIDB4OUJEQzA2QTcsIDB4QzE5QkYxNzQsXG4gIDB4RTQ5QjY5QzEsIDB4RUZCRTQ3ODYsIDB4MEZDMTlEQzYsIDB4MjQwQ0ExQ0MsXG4gIDB4MkRFOTJDNkYsIDB4NEE3NDg0QUEsIDB4NUNCMEE5REMsIDB4NzZGOTg4REEsXG4gIDB4OTgzRTUxNTIsIDB4QTgzMUM2NkQsIDB4QjAwMzI3QzgsIDB4QkY1OTdGQzcsXG4gIDB4QzZFMDBCRjMsIDB4RDVBNzkxNDcsIDB4MDZDQTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdCNzBBODUsIDB4MkUxQjIxMzgsIDB4NEQyQzZERkMsIDB4NTMzODBEMTMsXG4gIDB4NjUwQTczNTQsIDB4NzY2QTBBQkIsIDB4ODFDMkM5MkUsIDB4OTI3MjJDODUsXG4gIDB4QTJCRkU4QTEsIDB4QTgxQTY2NEIsIDB4QzI0QjhCNzAsIDB4Qzc2QzUxQTMsXG4gIDB4RDE5MkU4MTksIDB4RDY5OTA2MjQsIDB4RjQwRTM1ODUsIDB4MTA2QUEwNzAsXG4gIDB4MTlBNEMxMTYsIDB4MUUzNzZDMDgsIDB4Mjc0ODc3NEMsIDB4MzRCMEJDQjUsXG4gIDB4MzkxQzBDQjMsIDB4NEVEOEFBNEEsIDB4NUI5Q0NBNEYsIDB4NjgyRTZGRjMsXG4gIDB4NzQ4RjgyRUUsIDB4NzhBNTYzNkYsIDB4ODRDODc4MTQsIDB4OENDNzAyMDgsXG4gIDB4OTBCRUZGRkEsIDB4QTQ1MDZDRUIsIDB4QkVGOUEzRjcsIDB4QzY3MTc4RjJcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTI1NiAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTI1NiwgSGFzaClcblxuU2hhMjU2LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iID0gMHhiYjY3YWU4NVxuICB0aGlzLl9jID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kID0gMHhhNTRmZjUzYVxuICB0aGlzLl9lID0gMHg1MTBlNTI3ZlxuICB0aGlzLl9mID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9nID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oID0gMHg1YmUwY2QxOVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIGNoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDIgfCB4IDw8IDMwKSBeICh4ID4+PiAxMyB8IHggPDwgMTkpIF4gKHggPj4+IDIyIHwgeCA8PCAxMClcbn1cblxuZnVuY3Rpb24gc2lnbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNiB8IHggPDwgMjYpIF4gKHggPj4+IDExIHwgeCA8PCAyMSkgXiAoeCA+Pj4gMjUgfCB4IDw8IDcpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDcgfCB4IDw8IDI1KSBeICh4ID4+PiAxOCB8IHggPDwgMTQpIF4gKHggPj4+IDMpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDE3IHwgeCA8PCAxNSkgXiAoeCA+Pj4gMTkgfCB4IDw8IDEzKSBeICh4ID4+PiAxMClcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG4gIHZhciBmID0gdGhpcy5fZiB8IDBcbiAgdmFyIGcgPSB0aGlzLl9nIHwgMFxuICB2YXIgaCA9IHRoaXMuX2ggfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA2NDsgKytpKSBXW2ldID0gKGdhbW1hMShXW2kgLSAyXSkgKyBXW2kgLSA3XSArIGdhbW1hMChXW2kgLSAxNV0pICsgV1tpIC0gMTZdKSB8IDBcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDY0OyArK2opIHtcbiAgICB2YXIgVDEgPSAoaCArIHNpZ21hMShlKSArIGNoKGUsIGYsIGcpICsgS1tqXSArIFdbal0pIHwgMFxuICAgIHZhciBUMiA9IChzaWdtYTAoYSkgKyBtYWooYSwgYiwgYykpIHwgMFxuXG4gICAgaCA9IGdcbiAgICBnID0gZlxuICAgIGYgPSBlXG4gICAgZSA9IChkICsgVDEpIHwgMFxuICAgIGQgPSBjXG4gICAgYyA9IGJcbiAgICBiID0gYVxuICAgIGEgPSAoVDEgKyBUMikgfCAwXG4gIH1cblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG4gIHRoaXMuX2YgPSAoZiArIHRoaXMuX2YpIHwgMFxuICB0aGlzLl9nID0gKGcgKyB0aGlzLl9nKSB8IDBcbiAgdGhpcy5faCA9IChoICsgdGhpcy5faCkgfCAwXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDMyKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lLCAxNilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZiwgMjApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2csIDI0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9oLCAyOClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTI1NlxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLFxuICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLFxuICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LFxuICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLFxuICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LFxuICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LFxuICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLFxuICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLFxuICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LFxuICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLFxuICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLFxuICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LFxuICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLFxuICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDE2MClcblxuZnVuY3Rpb24gU2hhNTEyICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpXG59XG5cbmluaGVyaXRzKFNoYTUxMiwgSGFzaClcblxuU2hhNTEyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4NmEwOWU2NjdcbiAgdGhpcy5fYmggPSAweGJiNjdhZTg1XG4gIHRoaXMuX2NoID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kaCA9IDB4YTU0ZmY1M2FcbiAgdGhpcy5fZWggPSAweDUxMGU1MjdmXG4gIHRoaXMuX2ZoID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9naCA9IDB4MWY4M2Q5YWJcbiAgdGhpcy5faGggPSAweDViZTBjZDE5XG5cbiAgdGhpcy5fYWwgPSAweGYzYmNjOTA4XG4gIHRoaXMuX2JsID0gMHg4NGNhYTczYlxuICB0aGlzLl9jbCA9IDB4ZmU5NGY4MmJcbiAgdGhpcy5fZGwgPSAweDVmMWQzNmYxXG4gIHRoaXMuX2VsID0gMHhhZGU2ODJkMVxuICB0aGlzLl9mbCA9IDB4MmIzZTZjMWZcbiAgdGhpcy5fZ2wgPSAweGZiNDFiZDZiXG4gIHRoaXMuX2hsID0gMHgxMzdlMjE3OVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIENoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAyOCB8IHhsIDw8IDQpIF4gKHhsID4+PiAyIHwgeCA8PCAzMCkgXiAoeGwgPj4+IDcgfCB4IDw8IDI1KVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTQgfCB4bCA8PCAxOCkgXiAoeCA+Pj4gMTggfCB4bCA8PCAxNCkgXiAoeGwgPj4+IDkgfCB4IDw8IDIzKVxufVxuXG5mdW5jdGlvbiBHYW1tYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMGwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcgfCB4bCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gR2FtbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNilcbn1cblxuZnVuY3Rpb24gR2FtbWExbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYgfCB4bCA8PCAyNilcbn1cblxuZnVuY3Rpb24gZ2V0Q2FycnkgKGEsIGIpIHtcbiAgcmV0dXJuIChhID4+PiAwKSA8IChiID4+PiAwKSA/IDEgOiAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhaCA9IHRoaXMuX2FoIHwgMFxuICB2YXIgYmggPSB0aGlzLl9iaCB8IDBcbiAgdmFyIGNoID0gdGhpcy5fY2ggfCAwXG4gIHZhciBkaCA9IHRoaXMuX2RoIHwgMFxuICB2YXIgZWggPSB0aGlzLl9laCB8IDBcbiAgdmFyIGZoID0gdGhpcy5fZmggfCAwXG4gIHZhciBnaCA9IHRoaXMuX2doIHwgMFxuICB2YXIgaGggPSB0aGlzLl9oaCB8IDBcblxuICB2YXIgYWwgPSB0aGlzLl9hbCB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYmwgfCAwXG4gIHZhciBjbCA9IHRoaXMuX2NsIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kbCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZWwgfCAwXG4gIHZhciBmbCA9IHRoaXMuX2ZsIHwgMFxuICB2YXIgZ2wgPSB0aGlzLl9nbCB8IDBcbiAgdmFyIGhsID0gdGhpcy5faGwgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSArPSAyKSB7XG4gICAgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gICAgV1tpICsgMV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0ICsgNClcbiAgfVxuICBmb3IgKDsgaSA8IDE2MDsgaSArPSAyKSB7XG4gICAgdmFyIHhoID0gV1tpIC0gMTUgKiAyXVxuICAgIHZhciB4bCA9IFdbaSAtIDE1ICogMiArIDFdXG4gICAgdmFyIGdhbW1hMCA9IEdhbW1hMCh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMGwgPSBHYW1tYTBsKHhsLCB4aClcblxuICAgIHhoID0gV1tpIC0gMiAqIDJdXG4gICAgeGwgPSBXW2kgLSAyICogMiArIDFdXG4gICAgdmFyIGdhbW1hMSA9IEdhbW1hMSh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMWwgPSBHYW1tYTFsKHhsLCB4aClcblxuICAgIC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XVxuICAgIHZhciBXaTdoID0gV1tpIC0gNyAqIDJdXG4gICAgdmFyIFdpN2wgPSBXW2kgLSA3ICogMiArIDFdXG5cbiAgICB2YXIgV2kxNmggPSBXW2kgLSAxNiAqIDJdXG4gICAgdmFyIFdpMTZsID0gV1tpIC0gMTYgKiAyICsgMV1cblxuICAgIHZhciBXaWwgPSAoZ2FtbWEwbCArIFdpN2wpIHwgMFxuICAgIHZhciBXaWggPSAoZ2FtbWEwICsgV2k3aCArIGdldENhcnJ5KFdpbCwgZ2FtbWEwbCkpIHwgMFxuICAgIFdpbCA9IChXaWwgKyBnYW1tYTFsKSB8IDBcbiAgICBXaWggPSAoV2loICsgZ2FtbWExICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTFsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIFdpMTZsKSB8IDBcbiAgICBXaWggPSAoV2loICsgV2kxNmggKyBnZXRDYXJyeShXaWwsIFdpMTZsKSkgfCAwXG5cbiAgICBXW2ldID0gV2loXG4gICAgV1tpICsgMV0gPSBXaWxcbiAgfVxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTYwOyBqICs9IDIpIHtcbiAgICBXaWggPSBXW2pdXG4gICAgV2lsID0gV1tqICsgMV1cblxuICAgIHZhciBtYWpoID0gbWFqKGFoLCBiaCwgY2gpXG4gICAgdmFyIG1hamwgPSBtYWooYWwsIGJsLCBjbClcblxuICAgIHZhciBzaWdtYTBoID0gc2lnbWEwKGFoLCBhbClcbiAgICB2YXIgc2lnbWEwbCA9IHNpZ21hMChhbCwgYWgpXG4gICAgdmFyIHNpZ21hMWggPSBzaWdtYTEoZWgsIGVsKVxuICAgIHZhciBzaWdtYTFsID0gc2lnbWExKGVsLCBlaClcblxuICAgIC8vIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tqXSArIFdbal1cbiAgICB2YXIgS2loID0gS1tqXVxuICAgIHZhciBLaWwgPSBLW2ogKyAxXVxuXG4gICAgdmFyIGNoaCA9IENoKGVoLCBmaCwgZ2gpXG4gICAgdmFyIGNobCA9IENoKGVsLCBmbCwgZ2wpXG5cbiAgICB2YXIgdDFsID0gKGhsICsgc2lnbWExbCkgfCAwXG4gICAgdmFyIHQxaCA9IChoaCArIHNpZ21hMWggKyBnZXRDYXJyeSh0MWwsIGhsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIGNobCkgfCAwXG4gICAgdDFoID0gKHQxaCArIGNoaCArIGdldENhcnJ5KHQxbCwgY2hsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIEtpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIEtpaCArIGdldENhcnJ5KHQxbCwgS2lsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIFdpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIFdpaCArIGdldENhcnJ5KHQxbCwgV2lsKSkgfCAwXG5cbiAgICAvLyB0MiA9IHNpZ21hMCArIG1halxuICAgIHZhciB0MmwgPSAoc2lnbWEwbCArIG1hamwpIHwgMFxuICAgIHZhciB0MmggPSAoc2lnbWEwaCArIG1hamggKyBnZXRDYXJyeSh0MmwsIHNpZ21hMGwpKSB8IDBcblxuICAgIGhoID0gZ2hcbiAgICBobCA9IGdsXG4gICAgZ2ggPSBmaFxuICAgIGdsID0gZmxcbiAgICBmaCA9IGVoXG4gICAgZmwgPSBlbFxuICAgIGVsID0gKGRsICsgdDFsKSB8IDBcbiAgICBlaCA9IChkaCArIHQxaCArIGdldENhcnJ5KGVsLCBkbCkpIHwgMFxuICAgIGRoID0gY2hcbiAgICBkbCA9IGNsXG4gICAgY2ggPSBiaFxuICAgIGNsID0gYmxcbiAgICBiaCA9IGFoXG4gICAgYmwgPSBhbFxuICAgIGFsID0gKHQxbCArIHQybCkgfCAwXG4gICAgYWggPSAodDFoICsgdDJoICsgZ2V0Q2FycnkoYWwsIHQxbCkpIHwgMFxuICB9XG5cbiAgdGhpcy5fYWwgPSAodGhpcy5fYWwgKyBhbCkgfCAwXG4gIHRoaXMuX2JsID0gKHRoaXMuX2JsICsgYmwpIHwgMFxuICB0aGlzLl9jbCA9ICh0aGlzLl9jbCArIGNsKSB8IDBcbiAgdGhpcy5fZGwgPSAodGhpcy5fZGwgKyBkbCkgfCAwXG4gIHRoaXMuX2VsID0gKHRoaXMuX2VsICsgZWwpIHwgMFxuICB0aGlzLl9mbCA9ICh0aGlzLl9mbCArIGZsKSB8IDBcbiAgdGhpcy5fZ2wgPSAodGhpcy5fZ2wgKyBnbCkgfCAwXG4gIHRoaXMuX2hsID0gKHRoaXMuX2hsICsgaGwpIHwgMFxuXG4gIHRoaXMuX2FoID0gKHRoaXMuX2FoICsgYWggKyBnZXRDYXJyeSh0aGlzLl9hbCwgYWwpKSB8IDBcbiAgdGhpcy5fYmggPSAodGhpcy5fYmggKyBiaCArIGdldENhcnJ5KHRoaXMuX2JsLCBibCkpIHwgMFxuICB0aGlzLl9jaCA9ICh0aGlzLl9jaCArIGNoICsgZ2V0Q2FycnkodGhpcy5fY2wsIGNsKSkgfCAwXG4gIHRoaXMuX2RoID0gKHRoaXMuX2RoICsgZGggKyBnZXRDYXJyeSh0aGlzLl9kbCwgZGwpKSB8IDBcbiAgdGhpcy5fZWggPSAodGhpcy5fZWggKyBlaCArIGdldENhcnJ5KHRoaXMuX2VsLCBlbCkpIHwgMFxuICB0aGlzLl9maCA9ICh0aGlzLl9maCArIGZoICsgZ2V0Q2FycnkodGhpcy5fZmwsIGZsKSkgfCAwXG4gIHRoaXMuX2doID0gKHRoaXMuX2doICsgZ2ggKyBnZXRDYXJyeSh0aGlzLl9nbCwgZ2wpKSB8IDBcbiAgdGhpcy5faGggPSAodGhpcy5faGggKyBoaCArIGdldENhcnJ5KHRoaXMuX2hsLCBobCkpIHwgMFxufVxuXG5TaGE1MTIucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg2NClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9naCwgdGhpcy5fZ2wsIDQ4KVxuICB3cml0ZUludDY0QkUodGhpcy5faGgsIHRoaXMuX2hsLCA1NilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTUxMlxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBkZWJ1ZyA9IHZvaWQgMDtcbmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7XG4gIGRlYnVnID0gZGVidWdVdGlsLmRlYnVnbG9nKCdzdHJlYW0nKTtcbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlckxpc3QgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdCcpO1xudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcbnZhciBTdHJpbmdEZWNvZGVyO1xuXG51dGlsLmluaGVyaXRzKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG52YXIga1Byb3h5RXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuXG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTtcblxuICAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55XG4gIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIoKSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtlbHNlIGlmIChpc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO2Vsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciByZWFkYWJsZUh3bSA9IG9wdGlvbnMucmVhZGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHJlYWRhYmxlSHdtIHx8IHJlYWRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gcmVhZGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIEEgbGlua2VkIGxpc3QgaXMgdXNlZCB0byBzdG9yZSBkYXRhIGNodW5rcyBpbnN0ZWFkIG9mIGFuIGFycmF5IGJlY2F1c2UgdGhlXG4gIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuXG4gIC8vIGFycmF5LnNoaWZ0KClcbiAgdGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBldmVudCAncmVhZGFibGUnLydkYXRhJyBpcyBlbWl0dGVkXG4gIC8vIGltbWVkaWF0ZWx5LCBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlXG4gIC8vIGFueSBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCByZWFkIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcbiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGVMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIGNiKGVycik7XG59O1xuXG4vLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHNraXBDaHVua0NoZWNrO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuICAgICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gICAgaWYgKGVyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHtcbiAgICAgICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZFRvRnJvbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKSk7ZWxzZSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgYWRkVG9Gcm9udCkge1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH1cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXI7XG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG4vLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLlxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcbi8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGFcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxuLy8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcbi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubmVlZFJlYWRhYmxlIHx8IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbn07XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW5cbiAgICAvLyB0aW55IGFtb3VudHNcbiAgICBuLS07XG4gICAgbiB8PSBuID4+PiAxO1xuICAgIG4gfD0gbiA+Pj4gMjtcbiAgICBuIHw9IG4gPj4+IDQ7XG4gICAgbiB8PSBuID4+PiA4O1xuICAgIG4gfD0gbiA+Pj4gMTY7XG4gICAgbisrO1xuICB9XG4gIHJldHVybiBuO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwO1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjtcbiAgLy8gRG9uJ3QgaGF2ZSBlbm91Z2hcbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbn1cblxuLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcblxuICBpZiAobiAhPT0gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTtcblxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gICAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxlbmd0aCAtPSBuO1xuICB9XG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vd1xuICAgIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgICBpZiAoIXN0YXRlLmVuZGVkKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gICAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG4gIGlmIChzdGF0ZS5kZWNvZGVyKSB7XG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgfVxuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC5cbiAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG59XG5cbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgaWYgKHN0YXRlLnN5bmMpIHBuYS5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO2Vsc2UgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIGRlYnVnKCdlbWl0IHJlYWRhYmxlJyk7XG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xuICBmbG93KHN0cmVhbSk7XG59XG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIHdoaWxlICghc3RhdGUucmVhZGluZyAmJiAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ19yZWFkKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogdW5waXBlO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgcG5hLm5leHRUaWNrKGVuZEZuKTtlbHNlIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG5cbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSwgdW5waXBlSW5mbykge1xuICAgIGRlYnVnKCdvbnVucGlwZScpO1xuICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XG4gICAgICBpZiAodW5waXBlSW5mbyAmJiB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHVucGlwZUluZm8uaGFzVW5waXBlZCA9IHRydWU7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cbiAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKClcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcbiAgLy8gdG9vIHNsb3cuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblxuICAgIGNsZWFuZWRVcCA9IHRydWU7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTtcbiAgfVxuXG4gIC8vIElmIHRoZSB1c2VyIHB1c2hlcyBtb3JlIGRhdGEgd2hpbGUgd2UncmUgd3JpdGluZyB0byBkZXN0IHRoZW4gd2UnbGwgZW5kIHVwXG4gIC8vIGluIG9uZGF0YSBhZ2Fpbi4gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIGluY3JlYXNlIGF3YWl0RHJhaW4gb25jZSBiZWNhdXNlXG4gIC8vIGRlc3Qgd2lsbCBvbmx5IGVtaXQgb25lICdkcmFpbicgZXZlbnQgZm9yIHRoZSBtdWx0aXBsZSB3cml0ZXMuXG4gIC8vID0+IEludHJvZHVjZSBhIGd1YXJkIG9uIGluY3JlYXNpbmcgYXdhaXREcmFpbi5cbiAgdmFyIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgZGVidWcoJ29uZGF0YScpO1xuICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cbiAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IHRydWU7XG4gICAgICB9XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUVsaXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKSBkZXN0LmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSB1c2VybGFuZCBvbmVzLlxuICBwcmVwZW5kTGlzdGVuZXIoZGVzdCwgJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuICBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICBkZWJ1Zygnb25maW5pc2gnKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfVxuXG4gIC8vIHRlbGwgdGhlIGRlc3QgdGhhdCBpdCdzIGJlaW5nIHBpcGVkIHRvXG4gIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7XG5cbiAgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcbiAgICBzcmMucmVzdW1lKCk7XG4gIH1cblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmZ1bmN0aW9uIHBpcGVPbkRyYWluKHNyYykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB1bnBpcGVJbmZvID0geyBoYXNVbnBpcGVkOiBmYWxzZSB9O1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIH1yZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuXG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScpIHtcbiAgICAvLyBTdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcG5hLm5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHtcbiAgICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG4gIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHt9XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBwYXVzZWQgPSBmYWxzZTtcblxuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBfdGhpcy5wdXNoKG51bGwpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG5cbiAgICAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGVcbiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gX3RoaXMucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfVxuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHRoaXMuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuXG4vLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcbiAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxuICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gRXh0cmFjdHMgb25seSBlbm91Z2ggYnVmZmVyZWQgZGF0YSB0byBzYXRpc2Z5IHRoZSBhbW91bnQgcmVxdWVzdGVkLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdFBhcnRpYWwobiwgbGlzdCwgaGFzU3RyaW5ncykge1xuICB2YXIgcmV0O1xuICBpZiAobiA8IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzXG4gICAgcmV0ID0gbGlzdC5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgbGlzdC5oZWFkLmRhdGEgPSBsaXN0LmhlYWQuZGF0YS5zbGljZShuKTtcbiAgfSBlbHNlIGlmIChuID09PSBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBmaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyXG4gICAgcmV0ID0gaGFzU3RyaW5ncyA/IGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIDogY29weUZyb21CdWZmZXIobiwgbGlzdCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YVxuLy8gY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHZhciByZXQgPSBwLmRhdGE7XG4gIG4gLT0gcmV0Lmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGEgY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KSB7XG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHAuZGF0YS5jb3B5KHJldCk7XG4gIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIgJiYgKCF0aGlzLl93cml0YWJsZVN0YXRlIHx8ICF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgdHJhbnNmb3JtIHN0cmVhbSBpcyBhIHJlYWRhYmxlL3dyaXRhYmxlIHN0cmVhbSB3aGVyZSB5b3UgZG9cbi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcbi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlXG4vLyBzb21lIGJpdHMgcGFzcyB0aHJvdWdoLCBhbmQgb3RoZXJzIGFyZSBzaW1wbHkgaWdub3JlZC4gIChUaGF0IHdvdWxkXG4vLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXG4vL1xuLy8gV2hpbGUgdGhlIG91dHB1dCBpcyBjYXVzYWxseSByZWxhdGVkIHRvIHRoZSBpbnB1dCwgaXQncyBub3QgYVxuLy8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXG4vLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW5cbi8vIGVtaXQgYSBzaW5nbGUgY29tcHJlc3NlZCBjaHVuayBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS5cbi8vXG4vLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6XG4vL1xuLy8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXG4vLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpXG4vLyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBmYWxzZSBpZiB0aGVyZSdzIGEgbG90IG9mIHBlbmRpbmcgd3JpdGVzXG4vLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXG4vLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuXG4vL1xuLy8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cbi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlXG4vLyBidWZmZXJlZCBfd3JpdGUgY2IncyBhcyBpdCBjb25zdW1lcyBjaHVua3MuICBJZiBjb25zdW1pbmcgYSBzaW5nbGVcbi8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XG4vLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG9cbi8vIHRoZSByZWFkIGJ1ZmZlciwgYW5kIHdpbGwgY2F1c2UgaXQgdG8gZW1pdCAncmVhZGFibGUnIGlmIG5lY2Vzc2FyeS5cbi8vXG4vLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsXG4vLyBzaW5jZSBfcmVhZCBoYXMgdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgY2h1bmsuICBIb3dldmVyLFxuLy8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xuLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXNcbi8vIGludGVycHJldGVkIGFzIGFuIGludGVnZXIgZnJvbSAwLTI1NSwgYW5kIHRoZW4gcmVzdWx0cyBpbiB0aGF0IG1hbnlcbi8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cbi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbFxuLy8gYW1vdW50IG9mIGlucHV0LCBhbmQgZW5kIHVwIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBvdXRwdXQuICBJblxuLy8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXG4vLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0ZSBjb3VsZFxuLy8gY2F1c2UgdGhlIHN5c3RlbSB0byBydW4gb3V0IG9mIG1lbW9yeS5cbi8vXG4vLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rXG4vLyB3b3VsZCBiZSBjb25zdW1lZCwgYW5kIHRoZW4gdGhlIHJlc3Qgd291bGQgd2FpdCAodW4tdHJhbnNmb3JtZWQpIHVudGlsXG4vLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuXG4gIHZhciBjYiA9IHRzLndyaXRlY2I7XG5cbiAgaWYgKCFjYikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCd3cml0ZSBjYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKSk7XG4gIH1cblxuICB0cy53cml0ZWNodW5rID0gbnVsbDtcbiAgdHMud3JpdGVjYiA9IG51bGw7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgdGhpcy5wdXNoKGRhdGEpO1xuXG4gIGNiKGVyKTtcblxuICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBycy5yZWFkaW5nID0gZmFsc2U7XG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuXG4gIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0ge1xuICAgIGFmdGVyVHJhbnNmb3JtOiBhZnRlclRyYW5zZm9ybS5iaW5kKHRoaXMpLFxuICAgIG5lZWRUcmFuc2Zvcm06IGZhbHNlLFxuICAgIHRyYW5zZm9ybWluZzogZmFsc2UsXG4gICAgd3JpdGVjYjogbnVsbCxcbiAgICB3cml0ZWNodW5rOiBudWxsLFxuICAgIHdyaXRlZW5jb2Rpbmc6IG51bGxcbiAgfTtcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB0aGlzLm9uKCdwcmVmaW5pc2gnLCBwcmVmaW5pc2gpO1xufVxuXG5mdW5jdGlvbiBwcmVmaW5pc2goKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShfdGhpcywgZXIsIGRhdGEpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7XG4gIH1cbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTtcblxuLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3RyYW5zZm9ybSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMud3JpdGVjYiA9IGNiO1xuICB0cy53cml0ZWNodW5rID0gY2h1bms7XG4gIHRzLndyaXRlZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59O1xuXG4vLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoZSBhcmdzIGFyZSBoZXJlLlxuLy8gX3RyYW5zZm9ybSBkb2VzIGFsbCB0aGUgd29yay5cbi8vIFRoYXQgd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGUgcmVhZGFibGUgc2lkZSB3YW50cyBtb3JlIGRhdGEuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG5cbiAgaWYgKHRzLndyaXRlY2h1bmsgIT09IG51bGwgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW5cbiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC5cbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgfVxufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIER1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLCBlcnIsIGZ1bmN0aW9uIChlcnIyKSB7XG4gICAgY2IoZXJyMik7XG4gICAgX3RoaXMyLmVtaXQoJ2Nsb3NlJyk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyLCBkYXRhKSB7XG4gIGlmIChlcikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBzdHJlYW0ucHVzaChkYXRhKTtcblxuICAvLyBpZiB0aGVyZSdzIG5vdGhpbmcgaW4gdGhlIHdyaXRlIGJ1ZmZlciwgdGhlbiB0aGF0IG1lYW5zXG4gIC8vIHRoYXQgbm90aGluZyBtb3JlIHdpbGwgZXZlciBiZSBwcm92aWRlZFxuICBpZiAoc3RyZWFtLl93cml0YWJsZVN0YXRlLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcblxuICBpZiAoc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn0iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBMZWdhY3kgPSByZXF1aXJlKCcuL2xlZ2FjeScpXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIG1kNSA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL21kNScpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcblxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5KSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KVxuICB9XG5cbiAgdmFyIGJsb2Nrc2l6ZSA9IChhbGcgPT09ICdzaGE1MTInIHx8IGFsZyA9PT0gJ3NoYTM4NCcpID8gMTI4IDogNjRcblxuICB0aGlzLl9hbGcgPSBhbGdcbiAgdGhpcy5fa2V5ID0ga2V5XG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAgdmFyIGhhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKGFsZylcbiAgICBrZXkgPSBoYXNoLnVwZGF0ZShrZXkpLmRpZ2VzdCgpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cbiAgdGhpcy5faGFzaCA9IGFsZyA9PT0gJ3JtZDE2MCcgPyBuZXcgUklQRU1EMTYwKCkgOiBzaGEoYWxnKVxuICB0aGlzLl9oYXNoLnVwZGF0ZShpcGFkKVxufVxuXG5pbmhlcml0cyhIbWFjLCBCYXNlKVxuXG5IbWFjLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgdmFyIGhhc2ggPSB0aGlzLl9hbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKHRoaXMuX2FsZylcbiAgcmV0dXJuIGhhc2gudXBkYXRlKHRoaXMuX29wYWQpLnVwZGF0ZShoKS5kaWdlc3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhtYWMgKGFsZywga2V5KSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHtcbiAgICByZXR1cm4gbmV3IEhtYWMoJ3JtZDE2MCcsIGtleSlcbiAgfVxuICBpZiAoYWxnID09PSAnbWQ1Jykge1xuICAgIHJldHVybiBuZXcgTGVnYWN5KG1kNSwga2V5KVxuICB9XG4gIHJldHVybiBuZXcgSG1hYyhhbGcsIGtleSlcbn1cbiIsInZhciBNRDUgPSByZXF1aXJlKCdtZDUuanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgcmV0dXJuIG5ldyBNRDUoKS51cGRhdGUoYnVmZmVyKS5kaWdlc3QoKVxufVxuIiwiZXhwb3J0cy5wYmtkZjIgPSByZXF1aXJlKCcuL2xpYi9hc3luYycpXG5leHBvcnRzLnBia2RmMlN5bmMgPSByZXF1aXJlKCcuL2xpYi9zeW5jJylcbiIsInZhciBNQVhfQUxMT0MgPSBNYXRoLnBvdygyLCAzMCkgLSAxIC8vIGRlZmF1bHQgaW4gaW9qc1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRpb25zLCBrZXlsZW4pIHtcbiAgaWYgKHR5cGVvZiBpdGVyYXRpb25zICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0l0ZXJhdGlvbnMgbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpdGVyYXRpb25zIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBpdGVyYXRpb25zJylcbiAgfVxuXG4gIGlmICh0eXBlb2Yga2V5bGVuICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0tleSBsZW5ndGggbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChrZXlsZW4gPCAwIHx8IGtleWxlbiA+IE1BWF9BTExPQyB8fCBrZXlsZW4gIT09IGtleWxlbikgeyAvKiBlc2xpbnQgbm8tc2VsZi1jb21wYXJlOiAwICovXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGtleSBsZW5ndGgnKVxuICB9XG59XG4iLCJ2YXIgZGVmYXVsdEVuY29kaW5nXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICBkZWZhdWx0RW5jb2RpbmcgPSAndXRmLTgnXG59IGVsc2UgaWYgKHByb2Nlc3MudmVyc2lvbikge1xuICB2YXIgcFZlcnNpb25NYWpvciA9IHBhcnNlSW50KHByb2Nlc3MudmVyc2lvbi5zcGxpdCgnLicpWzBdLnNsaWNlKDEpLCAxMClcblxuICBkZWZhdWx0RW5jb2RpbmcgPSBwVmVyc2lvbk1ham9yID49IDYgPyAndXRmLTgnIDogJ2JpbmFyeSdcbn0gZWxzZSB7XG4gIGRlZmF1bHRFbmNvZGluZyA9ICd1dGYtOCdcbn1cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdEVuY29kaW5nXG4iLCJ2YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1JylcbnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIGNoZWNrUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vcHJlY29uZGl0aW9uJylcbnZhciBkZWZhdWx0RW5jb2RpbmcgPSByZXF1aXJlKCcuL2RlZmF1bHQtZW5jb2RpbmcnKVxudmFyIHRvQnVmZmVyID0gcmVxdWlyZSgnLi90by1idWZmZXInKVxuXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxudmFyIHNpemVzID0ge1xuICBtZDU6IDE2LFxuICBzaGExOiAyMCxcbiAgc2hhMjI0OiAyOCxcbiAgc2hhMjU2OiAzMixcbiAgc2hhMzg0OiA0OCxcbiAgc2hhNTEyOiA2NCxcbiAgcm1kMTYwOiAyMCxcbiAgcmlwZW1kMTYwOiAyMFxufVxuXG5mdW5jdGlvbiBIbWFjIChhbGcsIGtleSwgc2FsdExlbikge1xuICB2YXIgaGFzaCA9IGdldERpZ2VzdChhbGcpXG4gIHZhciBibG9ja3NpemUgPSAoYWxnID09PSAnc2hhNTEyJyB8fCBhbGcgPT09ICdzaGEzODQnKSA/IDEyOCA6IDY0XG5cbiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBoYXNoKGtleSlcbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSArIHNpemVzW2FsZ10pXG4gIHZhciBvcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSArIHNpemVzW2FsZ10pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cblxuICB2YXIgaXBhZDEgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplICsgc2FsdExlbiArIDQpXG4gIGlwYWQuY29weShpcGFkMSwgMCwgMCwgYmxvY2tzaXplKVxuICB0aGlzLmlwYWQxID0gaXBhZDFcbiAgdGhpcy5pcGFkMiA9IGlwYWRcbiAgdGhpcy5vcGFkID0gb3BhZFxuICB0aGlzLmFsZyA9IGFsZ1xuICB0aGlzLmJsb2Nrc2l6ZSA9IGJsb2Nrc2l6ZVxuICB0aGlzLmhhc2ggPSBoYXNoXG4gIHRoaXMuc2l6ZSA9IHNpemVzW2FsZ11cbn1cblxuSG1hYy5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKGRhdGEsIGlwYWQpIHtcbiAgZGF0YS5jb3B5KGlwYWQsIHRoaXMuYmxvY2tzaXplKVxuICB2YXIgaCA9IHRoaXMuaGFzaChpcGFkKVxuICBoLmNvcHkodGhpcy5vcGFkLCB0aGlzLmJsb2Nrc2l6ZSlcbiAgcmV0dXJuIHRoaXMuaGFzaCh0aGlzLm9wYWQpXG59XG5cbmZ1bmN0aW9uIGdldERpZ2VzdCAoYWxnKSB7XG4gIGZ1bmN0aW9uIHNoYUZ1bmMgKGRhdGEpIHtcbiAgICByZXR1cm4gc2hhKGFsZykudXBkYXRlKGRhdGEpLmRpZ2VzdCgpXG4gIH1cbiAgZnVuY3Rpb24gcm1kMTYwRnVuYyAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgUklQRU1EMTYwKCkudXBkYXRlKGRhdGEpLmRpZ2VzdCgpXG4gIH1cblxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSByZXR1cm4gcm1kMTYwRnVuY1xuICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG1kNVxuICByZXR1cm4gc2hhRnVuY1xufVxuXG5mdW5jdGlvbiBwYmtkZjIgKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCkge1xuICBjaGVja1BhcmFtZXRlcnMoaXRlcmF0aW9ucywga2V5bGVuKVxuICBwYXNzd29yZCA9IHRvQnVmZmVyKHBhc3N3b3JkLCBkZWZhdWx0RW5jb2RpbmcsICdQYXNzd29yZCcpXG4gIHNhbHQgPSB0b0J1ZmZlcihzYWx0LCBkZWZhdWx0RW5jb2RpbmcsICdTYWx0JylcblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG5cbiAgdmFyIGhtYWMgPSBuZXcgSG1hYyhkaWdlc3QsIHBhc3N3b3JkLCBzYWx0Lmxlbmd0aClcblxuICB2YXIgREsgPSBCdWZmZXIuYWxsb2NVbnNhZmUoa2V5bGVuKVxuICB2YXIgYmxvY2sxID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNhbHQubGVuZ3RoICsgNClcbiAgc2FsdC5jb3B5KGJsb2NrMSwgMCwgMCwgc2FsdC5sZW5ndGgpXG5cbiAgdmFyIGRlc3RQb3MgPSAwXG4gIHZhciBoTGVuID0gc2l6ZXNbZGlnZXN0XVxuICB2YXIgbCA9IE1hdGguY2VpbChrZXlsZW4gLyBoTGVuKVxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IGw7IGkrKykge1xuICAgIGJsb2NrMS53cml0ZVVJbnQzMkJFKGksIHNhbHQubGVuZ3RoKVxuXG4gICAgdmFyIFQgPSBobWFjLnJ1bihibG9jazEsIGhtYWMuaXBhZDEpXG4gICAgdmFyIFUgPSBUXG5cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8IGl0ZXJhdGlvbnM7IGorKykge1xuICAgICAgVSA9IGhtYWMucnVuKFUsIGhtYWMuaXBhZDIpXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGhMZW47IGsrKykgVFtrXSBePSBVW2tdXG4gICAgfVxuXG4gICAgVC5jb3B5KERLLCBkZXN0UG9zKVxuICAgIGRlc3RQb3MgKz0gaExlblxuICB9XG5cbiAgcmV0dXJuIERLXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGJrZGYyXG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhpbmcsIGVuY29kaW5nLCBuYW1lKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodGhpbmcpKSB7XG4gICAgcmV0dXJuIHRoaW5nXG4gIH0gZWxzZSBpZiAodHlwZW9mIHRoaW5nID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHRoaW5nKSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh0aGluZy5idWZmZXIpXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihuYW1lICsgJyBtdXN0IGJlIGEgc3RyaW5nLCBhIEJ1ZmZlciwgYSB0eXBlZCBhcnJheSBvciBhIERhdGFWaWV3JylcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRShieXRlcywgb2ZmKSB7XG4gIHZhciByZXMgPSAgKGJ5dGVzWzAgKyBvZmZdIDw8IDI0KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzEgKyBvZmZdIDw8IDE2KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzIgKyBvZmZdIDw8IDgpIHxcbiAgICAgICAgICAgICBieXRlc1szICsgb2ZmXTtcbiAgcmV0dXJuIHJlcyA+Pj4gMDtcbn07XG5cbmV4cG9ydHMud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUoYnl0ZXMsIHZhbHVlLCBvZmYpIHtcbiAgYnl0ZXNbMCArIG9mZl0gPSB2YWx1ZSA+Pj4gMjQ7XG4gIGJ5dGVzWzEgKyBvZmZdID0gKHZhbHVlID4+PiAxNikgJiAweGZmO1xuICBieXRlc1syICsgb2ZmXSA9ICh2YWx1ZSA+Pj4gOCkgJiAweGZmO1xuICBieXRlc1szICsgb2ZmXSA9IHZhbHVlICYgMHhmZjtcbn07XG5cbmV4cG9ydHMuaXAgPSBmdW5jdGlvbiBpcChpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gMjU7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSAyNTsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucmlwID0gZnVuY3Rpb24gcmlwKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaSA9IDQ7IGkgPCA4OyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMjQ7IGogPj0gMDsgaiAtPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucGMxID0gZnVuY3Rpb24gcGMxKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICAvLyA3LCAxNSwgMjMsIDMxLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA2LCAxNCwgMjIsIDMwLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA1LCAxMywgMjEsIDI5LCAzOSwgNDcsIDU1LCA2M1xuICAvLyA0LCAxMiwgMjAsIDI4XG4gIGZvciAodmFyIGkgPSA3OyBpID49IDU7IGktLSkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgfVxuXG4gIC8vIDEsIDksIDE3LCAyNSwgMzMsIDQxLCA0OSwgNTdcbiAgLy8gMiwgMTAsIDE4LCAyNiwgMzQsIDQyLCA1MCwgNThcbiAgLy8gMywgMTEsIDE5LCAyNywgMzUsIDQzLCA1MSwgNTlcbiAgLy8gMzYsIDQ0LCA1MiwgNjBcbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMzsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucjI4c2hsID0gZnVuY3Rpb24gcjI4c2hsKG51bSwgc2hpZnQpIHtcbiAgcmV0dXJuICgobnVtIDw8IHNoaWZ0KSAmIDB4ZmZmZmZmZikgfCAobnVtID4+PiAoMjggLSBzaGlmdCkpO1xufTtcblxudmFyIHBjMnRhYmxlID0gW1xuICAvLyBpbkwgPT4gb3V0TFxuICAxNCwgMTEsIDE3LCA0LCAyNywgMjMsIDI1LCAwLFxuICAxMywgMjIsIDcsIDE4LCA1LCA5LCAxNiwgMjQsXG4gIDIsIDIwLCAxMiwgMjEsIDEsIDgsIDE1LCAyNixcblxuICAvLyBpblIgPT4gb3V0UlxuICAxNSwgNCwgMjUsIDE5LCA5LCAxLCAyNiwgMTYsXG4gIDUsIDExLCAyMywgOCwgMTIsIDcsIDE3LCAwLFxuICAyMiwgMywgMTAsIDE0LCA2LCAyMCwgMjcsIDI0XG5dO1xuXG5leHBvcnRzLnBjMiA9IGZ1bmN0aW9uIHBjMihpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgdmFyIGxlbiA9IHBjMnRhYmxlLmxlbmd0aCA+Pj4gMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5MID4+PiBwYzJ0YWJsZVtpXSkgJiAweDE7XG4gIH1cbiAgZm9yICh2YXIgaSA9IGxlbjsgaSA8IHBjMnRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpblIgPj4+IHBjMnRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLmV4cGFuZCA9IGZ1bmN0aW9uIGV4cGFuZChyLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBvdXRMID0gKChyICYgMSkgPDwgNSkgfCAociA+Pj4gMjcpO1xuICBmb3IgKHZhciBpID0gMjM7IGkgPj0gMTU7IGkgLT0gNCkge1xuICAgIG91dEwgPDw9IDY7XG4gICAgb3V0TCB8PSAociA+Pj4gaSkgJiAweDNmO1xuICB9XG4gIGZvciAodmFyIGkgPSAxMTsgaSA+PSAzOyBpIC09IDQpIHtcbiAgICBvdXRSIHw9IChyID4+PiBpKSAmIDB4M2Y7XG4gICAgb3V0UiA8PD0gNjtcbiAgfVxuICBvdXRSIHw9ICgociAmIDB4MWYpIDw8IDEpIHwgKHIgPj4+IDMxKTtcblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxudmFyIHNUYWJsZSA9IFtcbiAgMTQsIDAsIDQsIDE1LCAxMywgNywgMSwgNCwgMiwgMTQsIDE1LCAyLCAxMSwgMTMsIDgsIDEsXG4gIDMsIDEwLCAxMCwgNiwgNiwgMTIsIDEyLCAxMSwgNSwgOSwgOSwgNSwgMCwgMywgNywgOCxcbiAgNCwgMTUsIDEsIDEyLCAxNCwgOCwgOCwgMiwgMTMsIDQsIDYsIDksIDIsIDEsIDExLCA3LFxuICAxNSwgNSwgMTIsIDExLCA5LCAzLCA3LCAxNCwgMywgMTAsIDEwLCAwLCA1LCA2LCAwLCAxMyxcblxuICAxNSwgMywgMSwgMTMsIDgsIDQsIDE0LCA3LCA2LCAxNSwgMTEsIDIsIDMsIDgsIDQsIDE0LFxuICA5LCAxMiwgNywgMCwgMiwgMSwgMTMsIDEwLCAxMiwgNiwgMCwgOSwgNSwgMTEsIDEwLCA1LFxuICAwLCAxMywgMTQsIDgsIDcsIDEwLCAxMSwgMSwgMTAsIDMsIDQsIDE1LCAxMywgNCwgMSwgMixcbiAgNSwgMTEsIDgsIDYsIDEyLCA3LCA2LCAxMiwgOSwgMCwgMywgNSwgMiwgMTQsIDE1LCA5LFxuXG4gIDEwLCAxMywgMCwgNywgOSwgMCwgMTQsIDksIDYsIDMsIDMsIDQsIDE1LCA2LCA1LCAxMCxcbiAgMSwgMiwgMTMsIDgsIDEyLCA1LCA3LCAxNCwgMTEsIDEyLCA0LCAxMSwgMiwgMTUsIDgsIDEsXG4gIDEzLCAxLCA2LCAxMCwgNCwgMTMsIDksIDAsIDgsIDYsIDE1LCA5LCAzLCA4LCAwLCA3LFxuICAxMSwgNCwgMSwgMTUsIDIsIDE0LCAxMiwgMywgNSwgMTEsIDEwLCA1LCAxNCwgMiwgNywgMTIsXG5cbiAgNywgMTMsIDEzLCA4LCAxNCwgMTEsIDMsIDUsIDAsIDYsIDYsIDE1LCA5LCAwLCAxMCwgMyxcbiAgMSwgNCwgMiwgNywgOCwgMiwgNSwgMTIsIDExLCAxLCAxMiwgMTAsIDQsIDE0LCAxNSwgOSxcbiAgMTAsIDMsIDYsIDE1LCA5LCAwLCAwLCA2LCAxMiwgMTAsIDExLCAxLCA3LCAxMywgMTMsIDgsXG4gIDE1LCA5LCAxLCA0LCAzLCA1LCAxNCwgMTEsIDUsIDEyLCAyLCA3LCA4LCAyLCA0LCAxNCxcblxuICAyLCAxNCwgMTIsIDExLCA0LCAyLCAxLCAxMiwgNywgNCwgMTAsIDcsIDExLCAxMywgNiwgMSxcbiAgOCwgNSwgNSwgMCwgMywgMTUsIDE1LCAxMCwgMTMsIDMsIDAsIDksIDE0LCA4LCA5LCA2LFxuICA0LCAxMSwgMiwgOCwgMSwgMTIsIDExLCA3LCAxMCwgMSwgMTMsIDE0LCA3LCAyLCA4LCAxMyxcbiAgMTUsIDYsIDksIDE1LCAxMiwgMCwgNSwgOSwgNiwgMTAsIDMsIDQsIDAsIDUsIDE0LCAzLFxuXG4gIDEyLCAxMCwgMSwgMTUsIDEwLCA0LCAxNSwgMiwgOSwgNywgMiwgMTIsIDYsIDksIDgsIDUsXG4gIDAsIDYsIDEzLCAxLCAzLCAxMywgNCwgMTQsIDE0LCAwLCA3LCAxMSwgNSwgMywgMTEsIDgsXG4gIDksIDQsIDE0LCAzLCAxNSwgMiwgNSwgMTIsIDIsIDksIDgsIDUsIDEyLCAxNSwgMywgMTAsXG4gIDcsIDExLCAwLCAxNCwgNCwgMSwgMTAsIDcsIDEsIDYsIDEzLCAwLCAxMSwgOCwgNiwgMTMsXG5cbiAgNCwgMTMsIDExLCAwLCAyLCAxMSwgMTQsIDcsIDE1LCA0LCAwLCA5LCA4LCAxLCAxMywgMTAsXG4gIDMsIDE0LCAxMiwgMywgOSwgNSwgNywgMTIsIDUsIDIsIDEwLCAxNSwgNiwgOCwgMSwgNixcbiAgMSwgNiwgNCwgMTEsIDExLCAxMywgMTMsIDgsIDEyLCAxLCAzLCA0LCA3LCAxMCwgMTQsIDcsXG4gIDEwLCA5LCAxNSwgNSwgNiwgMCwgOCwgMTUsIDAsIDE0LCA1LCAyLCA5LCAzLCAyLCAxMixcblxuICAxMywgMSwgMiwgMTUsIDgsIDEzLCA0LCA4LCA2LCAxMCwgMTUsIDMsIDExLCA3LCAxLCA0LFxuICAxMCwgMTIsIDksIDUsIDMsIDYsIDE0LCAxMSwgNSwgMCwgMCwgMTQsIDEyLCA5LCA3LCAyLFxuICA3LCAyLCAxMSwgMSwgNCwgMTQsIDEsIDcsIDksIDQsIDEyLCAxMCwgMTQsIDgsIDIsIDEzLFxuICAwLCAxNSwgNiwgMTIsIDEwLCA5LCAxMywgMCwgMTUsIDMsIDMsIDUsIDUsIDYsIDgsIDExXG5dO1xuXG5leHBvcnRzLnN1YnN0aXR1dGUgPSBmdW5jdGlvbiBzdWJzdGl0dXRlKGluTCwgaW5SKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBiID0gKGluTCA+Pj4gKDE4IC0gaSAqIDYpKSAmIDB4M2Y7XG4gICAgdmFyIHNiID0gc1RhYmxlW2kgKiAweDQwICsgYl07XG5cbiAgICBvdXQgPDw9IDQ7XG4gICAgb3V0IHw9IHNiO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIGIgPSAoaW5SID4+PiAoMTggLSBpICogNikpICYgMHgzZjtcbiAgICB2YXIgc2IgPSBzVGFibGVbNCAqIDB4NDAgKyBpICogMHg0MCArIGJdO1xuXG4gICAgb3V0IDw8PSA0O1xuICAgIG91dCB8PSBzYjtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxudmFyIHBlcm11dGVUYWJsZSA9IFtcbiAgMTYsIDI1LCAxMiwgMTEsIDMsIDIwLCA0LCAxNSwgMzEsIDE3LCA5LCA2LCAyNywgMTQsIDEsIDIyLFxuICAzMCwgMjQsIDgsIDE4LCAwLCA1LCAyOSwgMjMsIDEzLCAxOSwgMiwgMjYsIDEwLCAyMSwgMjgsIDdcbl07XG5cbmV4cG9ydHMucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUobnVtKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBlcm11dGVUYWJsZS5sZW5ndGg7IGkrKykge1xuICAgIG91dCA8PD0gMTtcbiAgICBvdXQgfD0gKG51bSA+Pj4gcGVybXV0ZVRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxuZXhwb3J0cy5wYWRTcGxpdCA9IGZ1bmN0aW9uIHBhZFNwbGl0KG51bSwgc2l6ZSwgZ3JvdXApIHtcbiAgdmFyIHN0ciA9IG51bS50b1N0cmluZygyKTtcbiAgd2hpbGUgKHN0ci5sZW5ndGggPCBzaXplKVxuICAgIHN0ciA9ICcwJyArIHN0cjtcblxuICB2YXIgb3V0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArPSBncm91cClcbiAgICBvdXQucHVzaChzdHIuc2xpY2UoaSwgaSArIGdyb3VwKSk7XG4gIHJldHVybiBvdXQuam9pbignICcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBDaXBoZXIgPSByZXF1aXJlKCcuL2NpcGhlcicpO1xuXG5mdW5jdGlvbiBERVNTdGF0ZSgpIHtcbiAgdGhpcy50bXAgPSBuZXcgQXJyYXkoMik7XG4gIHRoaXMua2V5cyA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIERFUyhvcHRpb25zKSB7XG4gIENpcGhlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHZhciBzdGF0ZSA9IG5ldyBERVNTdGF0ZSgpO1xuICB0aGlzLl9kZXNTdGF0ZSA9IHN0YXRlO1xuXG4gIHRoaXMuZGVyaXZlS2V5cyhzdGF0ZSwgb3B0aW9ucy5rZXkpO1xufVxuaW5oZXJpdHMoREVTLCBDaXBoZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBERVM7XG5cbkRFUy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICByZXR1cm4gbmV3IERFUyhvcHRpb25zKTtcbn07XG5cbnZhciBzaGlmdFRhYmxlID0gW1xuICAxLCAxLCAyLCAyLCAyLCAyLCAyLCAyLFxuICAxLCAyLCAyLCAyLCAyLCAyLCAyLCAxXG5dO1xuXG5ERVMucHJvdG90eXBlLmRlcml2ZUtleXMgPSBmdW5jdGlvbiBkZXJpdmVLZXlzKHN0YXRlLCBrZXkpIHtcbiAgc3RhdGUua2V5cyA9IG5ldyBBcnJheSgxNiAqIDIpO1xuXG4gIGFzc2VydC5lcXVhbChrZXkubGVuZ3RoLCB0aGlzLmJsb2NrU2l6ZSwgJ0ludmFsaWQga2V5IGxlbmd0aCcpO1xuXG4gIHZhciBrTCA9IHV0aWxzLnJlYWRVSW50MzJCRShrZXksIDApO1xuICB2YXIga1IgPSB1dGlscy5yZWFkVUludDMyQkUoa2V5LCA0KTtcblxuICB1dGlscy5wYzEoa0wsIGtSLCBzdGF0ZS50bXAsIDApO1xuICBrTCA9IHN0YXRlLnRtcFswXTtcbiAga1IgPSBzdGF0ZS50bXBbMV07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUua2V5cy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBzaGlmdCA9IHNoaWZ0VGFibGVbaSA+Pj4gMV07XG4gICAga0wgPSB1dGlscy5yMjhzaGwoa0wsIHNoaWZ0KTtcbiAgICBrUiA9IHV0aWxzLnIyOHNobChrUiwgc2hpZnQpO1xuICAgIHV0aWxzLnBjMihrTCwga1IsIHN0YXRlLmtleXMsIGkpO1xuICB9XG59O1xuXG5ERVMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Rlc1N0YXRlO1xuXG4gIHZhciBsID0gdXRpbHMucmVhZFVJbnQzMkJFKGlucCwgaW5PZmYpO1xuICB2YXIgciA9IHV0aWxzLnJlYWRVSW50MzJCRShpbnAsIGluT2ZmICsgNCk7XG5cbiAgLy8gSW5pdGlhbCBQZXJtdXRhdGlvblxuICB1dGlscy5pcChsLCByLCBzdGF0ZS50bXAsIDApO1xuICBsID0gc3RhdGUudG1wWzBdO1xuICByID0gc3RhdGUudG1wWzFdO1xuXG4gIGlmICh0aGlzLnR5cGUgPT09ICdlbmNyeXB0JylcbiAgICB0aGlzLl9lbmNyeXB0KHN0YXRlLCBsLCByLCBzdGF0ZS50bXAsIDApO1xuICBlbHNlXG4gICAgdGhpcy5fZGVjcnlwdChzdGF0ZSwgbCwgciwgc3RhdGUudG1wLCAwKTtcblxuICBsID0gc3RhdGUudG1wWzBdO1xuICByID0gc3RhdGUudG1wWzFdO1xuXG4gIHV0aWxzLndyaXRlVUludDMyQkUob3V0LCBsLCBvdXRPZmYpO1xuICB1dGlscy53cml0ZVVJbnQzMkJFKG91dCwgciwgb3V0T2ZmICsgNCk7XG59O1xuXG5ERVMucHJvdG90eXBlLl9wYWQgPSBmdW5jdGlvbiBfcGFkKGJ1ZmZlciwgb2ZmKSB7XG4gIHZhciB2YWx1ZSA9IGJ1ZmZlci5sZW5ndGggLSBvZmY7XG4gIGZvciAodmFyIGkgPSBvZmY7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspXG4gICAgYnVmZmVyW2ldID0gdmFsdWU7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5ERVMucHJvdG90eXBlLl91bnBhZCA9IGZ1bmN0aW9uIF91bnBhZChidWZmZXIpIHtcbiAgdmFyIHBhZCA9IGJ1ZmZlcltidWZmZXIubGVuZ3RoIC0gMV07XG4gIGZvciAodmFyIGkgPSBidWZmZXIubGVuZ3RoIC0gcGFkOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKVxuICAgIGFzc2VydC5lcXVhbChidWZmZXJbaV0sIHBhZCk7XG5cbiAgcmV0dXJuIGJ1ZmZlci5zbGljZSgwLCBidWZmZXIubGVuZ3RoIC0gcGFkKTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX2VuY3J5cHQgPSBmdW5jdGlvbiBfZW5jcnlwdChzdGF0ZSwgbFN0YXJ0LCByU3RhcnQsIG91dCwgb2ZmKSB7XG4gIHZhciBsID0gbFN0YXJ0O1xuICB2YXIgciA9IHJTdGFydDtcblxuICAvLyBBcHBseSBmKCkgeDE2IHRpbWVzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUua2V5cy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXlMID0gc3RhdGUua2V5c1tpXTtcbiAgICB2YXIga2V5UiA9IHN0YXRlLmtleXNbaSArIDFdO1xuXG4gICAgLy8gZihyLCBrKVxuICAgIHV0aWxzLmV4cGFuZChyLCBzdGF0ZS50bXAsIDApO1xuXG4gICAga2V5TCBePSBzdGF0ZS50bXBbMF07XG4gICAga2V5UiBePSBzdGF0ZS50bXBbMV07XG4gICAgdmFyIHMgPSB1dGlscy5zdWJzdGl0dXRlKGtleUwsIGtleVIpO1xuICAgIHZhciBmID0gdXRpbHMucGVybXV0ZShzKTtcblxuICAgIHZhciB0ID0gcjtcbiAgICByID0gKGwgXiBmKSA+Pj4gMDtcbiAgICBsID0gdDtcbiAgfVxuXG4gIC8vIFJldmVyc2UgSW5pdGlhbCBQZXJtdXRhdGlvblxuICB1dGlscy5yaXAociwgbCwgb3V0LCBvZmYpO1xufTtcblxuREVTLnByb3RvdHlwZS5fZGVjcnlwdCA9IGZ1bmN0aW9uIF9kZWNyeXB0KHN0YXRlLCBsU3RhcnQsIHJTdGFydCwgb3V0LCBvZmYpIHtcbiAgdmFyIGwgPSByU3RhcnQ7XG4gIHZhciByID0gbFN0YXJ0O1xuXG4gIC8vIEFwcGx5IGYoKSB4MTYgdGltZXNcbiAgZm9yICh2YXIgaSA9IHN0YXRlLmtleXMubGVuZ3RoIC0gMjsgaSA+PSAwOyBpIC09IDIpIHtcbiAgICB2YXIga2V5TCA9IHN0YXRlLmtleXNbaV07XG4gICAgdmFyIGtleVIgPSBzdGF0ZS5rZXlzW2kgKyAxXTtcblxuICAgIC8vIGYociwgaylcbiAgICB1dGlscy5leHBhbmQobCwgc3RhdGUudG1wLCAwKTtcblxuICAgIGtleUwgXj0gc3RhdGUudG1wWzBdO1xuICAgIGtleVIgXj0gc3RhdGUudG1wWzFdO1xuICAgIHZhciBzID0gdXRpbHMuc3Vic3RpdHV0ZShrZXlMLCBrZXlSKTtcbiAgICB2YXIgZiA9IHV0aWxzLnBlcm11dGUocyk7XG5cbiAgICB2YXIgdCA9IGw7XG4gICAgbCA9IChyIF4gZikgPj4+IDA7XG4gICAgciA9IHQ7XG4gIH1cblxuICAvLyBSZXZlcnNlIEluaXRpYWwgUGVybXV0YXRpb25cbiAgdXRpbHMucmlwKGwsIHIsIG91dCwgb2ZmKTtcbn07XG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBpbmNyMzIgPSByZXF1aXJlKCcuLi9pbmNyMzInKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9ja1JhdyhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG52YXIgYmxvY2tTaXplID0gMTZcbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaykge1xuICB2YXIgY2h1bmtOdW0gPSBNYXRoLmNlaWwoY2h1bmsubGVuZ3RoIC8gYmxvY2tTaXplKVxuICB2YXIgc3RhcnQgPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgc2VsZi5fY2FjaGUgPSBCdWZmZXIuY29uY2F0KFtcbiAgICBzZWxmLl9jYWNoZSxcbiAgICBCdWZmZXIuYWxsb2NVbnNhZmUoY2h1bmtOdW0gKiBibG9ja1NpemUpXG4gIF0pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2h1bmtOdW07IGkrKykge1xuICAgIHZhciBvdXQgPSBnZXRCbG9jayhzZWxmKVxuICAgIHZhciBvZmZzZXQgPSBzdGFydCArIGkgKiBibG9ja1NpemVcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFswXSwgb2Zmc2V0ICsgMClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsxXSwgb2Zmc2V0ICsgNClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsyXSwgb2Zmc2V0ICsgOClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFszXSwgb2Zmc2V0ICsgMTIpXG4gIH1cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cbiIsImZ1bmN0aW9uIGluY3IzMiAoaXYpIHtcbiAgdmFyIGxlbiA9IGl2Lmxlbmd0aFxuICB2YXIgaXRlbVxuICB3aGlsZSAobGVuLS0pIHtcbiAgICBpdGVtID0gaXYucmVhZFVJbnQ4KGxlbilcbiAgICBpZiAoaXRlbSA9PT0gMjU1KSB7XG4gICAgICBpdi53cml0ZVVJbnQ4KDAsIGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbSsrXG4gICAgICBpdi53cml0ZVVJbnQ4KGl0ZW0sIGxlbilcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluY3IzMlxuIiwidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBHSEFTSCA9IHJlcXVpcmUoJy4vZ2hhc2gnKVxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxudmFyIGluY3IzMiA9IHJlcXVpcmUoJy4vaW5jcjMyJylcblxuZnVuY3Rpb24geG9yVGVzdCAoYSwgYikge1xuICB2YXIgb3V0ID0gMFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSBvdXQrK1xuXG4gIHZhciBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBvdXQgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBjYWxjSXYgKHNlbGYsIGl2LCBjaykge1xuICBpZiAoaXYubGVuZ3RoID09PSAxMikge1xuICAgIHNlbGYuX2ZpbklEID0gQnVmZmVyLmNvbmNhdChbaXYsIEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAxXSldKVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtpdiwgQnVmZmVyLmZyb20oWzAsIDAsIDAsIDJdKV0pXG4gIH1cbiAgdmFyIGdoYXNoID0gbmV3IEdIQVNIKGNrKVxuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciB0b1BhZCA9IGxlbiAlIDE2XG4gIGdoYXNoLnVwZGF0ZShpdilcbiAgaWYgKHRvUGFkKSB7XG4gICAgdG9QYWQgPSAxNiAtIHRvUGFkXG4gICAgZ2hhc2gudXBkYXRlKEJ1ZmZlci5hbGxvYyh0b1BhZCwgMCkpXG4gIH1cbiAgZ2hhc2gudXBkYXRlKEJ1ZmZlci5hbGxvYyg4LCAwKSlcbiAgdmFyIGl2Qml0cyA9IGxlbiAqIDhcbiAgdmFyIHRhaWwgPSBCdWZmZXIuYWxsb2MoOClcbiAgdGFpbC53cml0ZVVJbnRCRShpdkJpdHMsIDAsIDgpXG4gIGdoYXNoLnVwZGF0ZSh0YWlsKVxuICBzZWxmLl9maW5JRCA9IGdoYXNoLnN0YXRlXG4gIHZhciBvdXQgPSBCdWZmZXIuZnJvbShzZWxmLl9maW5JRClcbiAgaW5jcjMyKG91dClcbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdmFyIGggPSBCdWZmZXIuYWxsb2MoNCwgMClcblxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHZhciBjayA9IHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2soaClcbiAgdGhpcy5fZ2hhc2ggPSBuZXcgR0hBU0goY2spXG4gIGl2ID0gY2FsY0l2KHRoaXMsIGl2LCBjaylcblxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX2FsZW4gPSAwXG4gIHRoaXMuX2xlbiA9IDBcbiAgdGhpcy5fbW9kZSA9IG1vZGVcblxuICB0aGlzLl9hdXRoVGFnID0gbnVsbFxuICB0aGlzLl9jYWxsZWQgPSBmYWxzZVxufVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkICYmIHRoaXMuX2FsZW4pIHtcbiAgICB2YXIgcnVtcCA9IDE2IC0gKHRoaXMuX2FsZW4gJSAxNilcbiAgICBpZiAocnVtcCA8IDE2KSB7XG4gICAgICBydW1wID0gQnVmZmVyLmFsbG9jKHJ1bXAsIDApXG4gICAgICB0aGlzLl9naGFzaC51cGRhdGUocnVtcClcbiAgICB9XG4gIH1cblxuICB0aGlzLl9jYWxsZWQgPSB0cnVlXG4gIHZhciBvdXQgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGNodW5rKVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShvdXQpXG4gIH1cbiAgdGhpcy5fbGVuICs9IGNodW5rLmxlbmd0aFxuICByZXR1cm4gb3V0XG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCAmJiAhdGhpcy5fYXV0aFRhZykgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuXG4gIHZhciB0YWcgPSB4b3IodGhpcy5fZ2hhc2guZmluYWwodGhpcy5fYWxlbiAqIDgsIHRoaXMuX2xlbiAqIDgpLCB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHRoaXMuX2ZpbklEKSlcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgeG9yVGVzdCh0YWcsIHRoaXMuX2F1dGhUYWcpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG5cbiAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiBnZXRBdXRoVGFnICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgfHwgIUJ1ZmZlci5pc0J1ZmZlcih0aGlzLl9hdXRoVGFnKSkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgcmV0dXJuIHRoaXMuX2F1dGhUYWdcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gc2V0QXV0aFRhZyAodGFnKSB7XG4gIGlmICghdGhpcy5fZGVjcnlwdCkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uIHNldEFBRCAoYnVmKSB7XG4gIGlmICh0aGlzLl9jYWxsZWQpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgQUFEIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICB0aGlzLl9naGFzaC51cGRhdGUoYnVmKVxuICB0aGlzLl9hbGVuICs9IGJ1Zi5sZW5ndGhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbiIsInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9zZWNDYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9tb2RlID0gbW9kZVxufVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmssIHRoaXMuX2RlY3J5cHQpXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuIiwidmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZmluZFByaW1lO1xuZmluZFByaW1lLnNpbXBsZVNpZXZlID0gc2ltcGxlU2lldmU7XG5maW5kUHJpbWUuZmVybWF0VGVzdCA9IGZlcm1hdFRlc3Q7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIFRXRU5UWUZPVVIgPSBuZXcgQk4oMjQpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBPTkUgPSBuZXcgQk4oMSk7XG52YXIgVFdPID0gbmV3IEJOKDIpO1xudmFyIEZJVkUgPSBuZXcgQk4oNSk7XG52YXIgU0lYVEVFTiA9IG5ldyBCTigxNik7XG52YXIgRUlHSFQgPSBuZXcgQk4oOCk7XG52YXIgVEVOID0gbmV3IEJOKDEwKTtcbnZhciBUSFJFRSA9IG5ldyBCTigzKTtcbnZhciBTRVZFTiA9IG5ldyBCTig3KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIEZPVVIgPSBuZXcgQk4oNCk7XG52YXIgVFdFTFZFID0gbmV3IEJOKDEyKTtcbnZhciBwcmltZXMgPSBudWxsO1xuXG5mdW5jdGlvbiBfZ2V0UHJpbWVzKCkge1xuICBpZiAocHJpbWVzICE9PSBudWxsKVxuICAgIHJldHVybiBwcmltZXM7XG5cbiAgdmFyIGxpbWl0ID0gMHgxMDAwMDA7XG4gIHZhciByZXMgPSBbXTtcbiAgcmVzWzBdID0gMjtcbiAgZm9yICh2YXIgaSA9IDEsIGsgPSAzOyBrIDwgbGltaXQ7IGsgKz0gMikge1xuICAgIHZhciBzcXJ0ID0gTWF0aC5jZWlsKE1hdGguc3FydChrKSk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBpICYmIHJlc1tqXSA8PSBzcXJ0OyBqKyspXG4gICAgICBpZiAoayAlIHJlc1tqXSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG5cbiAgICBpZiAoaSAhPT0gaiAmJiByZXNbal0gPD0gc3FydClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcmVzW2krK10gPSBrO1xuICB9XG4gIHByaW1lcyA9IHJlcztcbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gc2ltcGxlU2lldmUocCkge1xuICB2YXIgcHJpbWVzID0gX2dldFByaW1lcygpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbWVzLmxlbmd0aDsgaSsrKVxuICAgIGlmIChwLm1vZG4ocHJpbWVzW2ldKSA9PT0gMCkge1xuICAgICAgaWYgKHAuY21wbihwcmltZXNbaV0pID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZmVybWF0VGVzdChwKSB7XG4gIHZhciByZWQgPSBCTi5tb250KHApO1xuICByZXR1cm4gVFdPLnRvUmVkKHJlZCkucmVkUG93KHAuc3VibigxKSkuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmltZShiaXRzLCBnZW4pIHtcbiAgaWYgKGJpdHMgPCAxNikge1xuICAgIC8vIHRoaXMgaXMgd2hhdCBvcGVuc3NsIGRvZXNcbiAgICBpZiAoZ2VuID09PSAyIHx8IGdlbiA9PT0gNSkge1xuICAgICAgcmV0dXJuIG5ldyBCTihbMHg4YywgMHg3Yl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IEJOKFsweDhjLCAweDI3XSk7XG4gICAgfVxuICB9XG4gIGdlbiA9IG5ldyBCTihnZW4pO1xuXG4gIHZhciBudW0sIG4yO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgbnVtID0gbmV3IEJOKHJhbmRvbUJ5dGVzKE1hdGguY2VpbChiaXRzIC8gOCkpKTtcbiAgICB3aGlsZSAobnVtLmJpdExlbmd0aCgpID4gYml0cykge1xuICAgICAgbnVtLmlzaHJuKDEpO1xuICAgIH1cbiAgICBpZiAobnVtLmlzRXZlbigpKSB7XG4gICAgICBudW0uaWFkZChPTkUpO1xuICAgIH1cbiAgICBpZiAoIW51bS50ZXN0bigxKSkge1xuICAgICAgbnVtLmlhZGQoVFdPKTtcbiAgICB9XG4gICAgaWYgKCFnZW4uY21wKFRXTykpIHtcbiAgICAgIHdoaWxlIChudW0ubW9kKFRXRU5UWUZPVVIpLmNtcChFTEVWRU4pKSB7XG4gICAgICAgIG51bS5pYWRkKEZPVVIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWdlbi5jbXAoRklWRSkpIHtcbiAgICAgIHdoaWxlIChudW0ubW9kKFRFTikuY21wKFRIUkVFKSkge1xuICAgICAgICBudW0uaWFkZChGT1VSKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbjIgPSBudW0uc2hybigxKTtcbiAgICBpZiAoc2ltcGxlU2lldmUobjIpICYmIHNpbXBsZVNpZXZlKG51bSkgJiZcbiAgICAgIGZlcm1hdFRlc3QobjIpICYmIGZlcm1hdFRlc3QobnVtKSAmJlxuICAgICAgbWlsbGVyUmFiaW4udGVzdChuMikgJiYgbWlsbGVyUmFiaW4udGVzdChudW0pKSB7XG4gICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgfVxuXG59XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgPDw9IDQ7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICByIHw9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnIC0gJ0YnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcgJiYgYyA8PSAyMikge1xuICAgICAgICByIHw9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByIHw9IGMgJiAweGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHIuc3RyaXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyByIGlzIEJOIHY0IGluc3RhbmNlXG4gICAgICAgIHIuc3RyaXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHIgaXMgQk4gdjUgaW5zdGFuY2VcbiAgICAgICAgci5fc3RyaXAoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBicm9yYW5kID0gcmVxdWlyZSgnYnJvcmFuZCcpO1xuXG5mdW5jdGlvbiBNaWxsZXJSYWJpbihyYW5kKSB7XG4gIHRoaXMucmFuZCA9IHJhbmQgfHwgbmV3IGJyb3JhbmQuUmFuZCgpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBNaWxsZXJSYWJpbjtcblxuTWlsbGVyUmFiaW4uY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHJhbmQpIHtcbiAgcmV0dXJuIG5ldyBNaWxsZXJSYWJpbihyYW5kKTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS5fcmFuZGJlbG93ID0gZnVuY3Rpb24gX3JhbmRiZWxvdyhuKSB7XG4gIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpO1xuICB2YXIgbWluX2J5dGVzID0gTWF0aC5jZWlsKGxlbiAvIDgpO1xuXG4gIC8vIEdlbmVyYWdlIHJhbmRvbSBieXRlcyB1bnRpbCBhIG51bWJlciBsZXNzIHRoYW4gbiBpcyBmb3VuZC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgMC4ubi0xIGhhdmUgYW4gZXF1YWwgcHJvYmFiaWxpdHkgb2YgYmVpbmcgc2VsZWN0ZWQuXG4gIGRvXG4gICAgdmFyIGEgPSBuZXcgYm4odGhpcy5yYW5kLmdlbmVyYXRlKG1pbl9ieXRlcykpO1xuICB3aGlsZSAoYS5jbXAobikgPj0gMCk7XG5cbiAgcmV0dXJuIGE7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuX3JhbmRyYW5nZSA9IGZ1bmN0aW9uIF9yYW5kcmFuZ2Uoc3RhcnQsIHN0b3ApIHtcbiAgLy8gR2VuZXJhdGUgYSByYW5kb20gbnVtYmVyIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBzdGFydCBhbmQgbGVzcyB0aGFuIHN0b3AuXG4gIHZhciBzaXplID0gc3RvcC5zdWIoc3RhcnQpO1xuICByZXR1cm4gc3RhcnQuYWRkKHRoaXMuX3JhbmRiZWxvdyhzaXplKSk7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUudGVzdCA9IGZ1bmN0aW9uIHRlc3QobiwgaywgY2IpIHtcbiAgdmFyIGxlbiA9IG4uYml0TGVuZ3RoKCk7XG4gIHZhciByZWQgPSBibi5tb250KG4pO1xuICB2YXIgcm9uZSA9IG5ldyBibigxKS50b1JlZChyZWQpO1xuXG4gIGlmICghaylcbiAgICBrID0gTWF0aC5tYXgoMSwgKGxlbiAvIDQ4KSB8IDApO1xuXG4gIC8vIEZpbmQgZCBhbmQgcywgKG4gLSAxKSA9ICgyIF4gcykgKiBkO1xuICB2YXIgbjEgPSBuLnN1Ym4oMSk7XG4gIGZvciAodmFyIHMgPSAwOyAhbjEudGVzdG4ocyk7IHMrKykge31cbiAgdmFyIGQgPSBuLnNocm4ocyk7XG5cbiAgdmFyIHJuMSA9IG4xLnRvUmVkKHJlZCk7XG5cbiAgdmFyIHByaW1lID0gdHJ1ZTtcbiAgZm9yICg7IGsgPiAwOyBrLS0pIHtcbiAgICB2YXIgYSA9IHRoaXMuX3JhbmRyYW5nZShuZXcgYm4oMiksIG4xKTtcbiAgICBpZiAoY2IpXG4gICAgICBjYihhKTtcblxuICAgIHZhciB4ID0gYS50b1JlZChyZWQpLnJlZFBvdyhkKTtcbiAgICBpZiAoeC5jbXAocm9uZSkgPT09IDAgfHwgeC5jbXAocm4xKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzOyBpKyspIHtcbiAgICAgIHggPSB4LnJlZFNxcigpO1xuXG4gICAgICBpZiAoeC5jbXAocm9uZSkgPT09IDApXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICh4LmNtcChybjEpID09PSAwKVxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gcylcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBwcmltZTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS5nZXREaXZpc29yID0gZnVuY3Rpb24gZ2V0RGl2aXNvcihuLCBrKSB7XG4gIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpO1xuICB2YXIgcmVkID0gYm4ubW9udChuKTtcbiAgdmFyIHJvbmUgPSBuZXcgYm4oMSkudG9SZWQocmVkKTtcblxuICBpZiAoIWspXG4gICAgayA9IE1hdGgubWF4KDEsIChsZW4gLyA0OCkgfCAwKTtcblxuICAvLyBGaW5kIGQgYW5kIHMsIChuIC0gMSkgPSAoMiBeIHMpICogZDtcbiAgdmFyIG4xID0gbi5zdWJuKDEpO1xuICBmb3IgKHZhciBzID0gMDsgIW4xLnRlc3RuKHMpOyBzKyspIHt9XG4gIHZhciBkID0gbi5zaHJuKHMpO1xuXG4gIHZhciBybjEgPSBuMS50b1JlZChyZWQpO1xuXG4gIGZvciAoOyBrID4gMDsgay0tKSB7XG4gICAgdmFyIGEgPSB0aGlzLl9yYW5kcmFuZ2UobmV3IGJuKDIpLCBuMSk7XG5cbiAgICB2YXIgZyA9IG4uZ2NkKGEpO1xuICAgIGlmIChnLmNtcG4oMSkgIT09IDApXG4gICAgICByZXR1cm4gZztcblxuICAgIHZhciB4ID0gYS50b1JlZChyZWQpLnJlZFBvdyhkKTtcbiAgICBpZiAoeC5jbXAocm9uZSkgPT09IDAgfHwgeC5jbXAocm4xKSA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzOyBpKyspIHtcbiAgICAgIHggPSB4LnJlZFNxcigpO1xuXG4gICAgICBpZiAoeC5jbXAocm9uZSkgPT09IDApXG4gICAgICAgIHJldHVybiB4LmZyb21SZWQoKS5zdWJuKDEpLmdjZChuKTtcbiAgICAgIGlmICh4LmNtcChybjEpID09PSAwKVxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gcykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG4gICAgICByZXR1cm4geC5mcm9tUmVkKCkuc3VibigxKS5nY2Qobik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gZXhwb3J0cztcblxuZnVuY3Rpb24gdG9BcnJheShtc2csIGVuYykge1xuICBpZiAoQXJyYXkuaXNBcnJheShtc2cpKVxuICAgIHJldHVybiBtc2cuc2xpY2UoKTtcbiAgaWYgKCFtc2cpXG4gICAgcmV0dXJuIFtdO1xuICB2YXIgcmVzID0gW107XG4gIGlmICh0eXBlb2YgbXNnICE9PSAnc3RyaW5nJykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgICAgcmVzW2ldID0gbXNnW2ldIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGlmIChlbmMgPT09ICdoZXgnKSB7XG4gICAgbXNnID0gbXNnLnJlcGxhY2UoL1teYS16MC05XSsvaWcsICcnKTtcbiAgICBpZiAobXNnLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICBtc2cgPSAnMCcgKyBtc2c7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IDIpXG4gICAgICByZXMucHVzaChwYXJzZUludChtc2dbaV0gKyBtc2dbaSArIDFdLCAxNikpO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgdmFyIGhpID0gYyA+PiA4O1xuICAgICAgdmFyIGxvID0gYyAmIDB4ZmY7XG4gICAgICBpZiAoaGkpXG4gICAgICAgIHJlcy5wdXNoKGhpLCBsbyk7XG4gICAgICBlbHNlXG4gICAgICAgIHJlcy5wdXNoKGxvKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB6ZXJvMih3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxudXRpbHMuemVybzIgPSB6ZXJvMjtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9IZXggPSB0b0hleDtcblxudXRpbHMuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGFyciwgZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB0b0hleChhcnIpO1xuICBlbHNlXG4gICAgcmV0dXJuIGFycjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZSA9IGV4cG9ydHM7XG5cbmN1cnZlLmJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcbmN1cnZlLnNob3J0ID0gcmVxdWlyZSgnLi9zaG9ydCcpO1xuY3VydmUubW9udCA9IHJlcXVpcmUoJy4vbW9udCcpO1xuY3VydmUuZWR3YXJkcyA9IHJlcXVpcmUoJy4vZWR3YXJkcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIHJvdHIzMiA9IHV0aWxzLnJvdHIzMjtcblxuZnVuY3Rpb24gZnRfMShzLCB4LCB5LCB6KSB7XG4gIGlmIChzID09PSAwKVxuICAgIHJldHVybiBjaDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMSB8fCBzID09PSAzKVxuICAgIHJldHVybiBwMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAyKVxuICAgIHJldHVybiBtYWozMih4LCB5LCB6KTtcbn1cbmV4cG9ydHMuZnRfMSA9IGZ0XzE7XG5cbmZ1bmN0aW9uIGNoMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICgofngpICYgeik7XG59XG5leHBvcnRzLmNoMzIgPSBjaDMyO1xuXG5mdW5jdGlvbiBtYWozMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKHggJiB6KSBeICh5ICYgeik7XG59XG5leHBvcnRzLm1hajMyID0gbWFqMzI7XG5cbmZ1bmN0aW9uIHAzMih4LCB5LCB6KSB7XG4gIHJldHVybiB4IF4geSBeIHo7XG59XG5leHBvcnRzLnAzMiA9IHAzMjtcblxuZnVuY3Rpb24gczBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAyKSBeIHJvdHIzMih4LCAxMykgXiByb3RyMzIoeCwgMjIpO1xufVxuZXhwb3J0cy5zMF8yNTYgPSBzMF8yNTY7XG5cbmZ1bmN0aW9uIHMxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNikgXiByb3RyMzIoeCwgMTEpIF4gcm90cjMyKHgsIDI1KTtcbn1cbmV4cG9ydHMuczFfMjU2ID0gczFfMjU2O1xuXG5mdW5jdGlvbiBnMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDcpIF4gcm90cjMyKHgsIDE4KSBeICh4ID4+PiAzKTtcbn1cbmV4cG9ydHMuZzBfMjU2ID0gZzBfMjU2O1xuXG5mdW5jdGlvbiBnMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDE3KSBeIHJvdHIzMih4LCAxOSkgXiAoeCA+Pj4gMTApO1xufVxuZXhwb3J0cy5nMV8yNTYgPSBnMV8yNTY7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgc2hhQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIHN1bTMyXzUgPSB1dGlscy5zdW0zMl81O1xudmFyIGNoMzIgPSBzaGFDb21tb24uY2gzMjtcbnZhciBtYWozMiA9IHNoYUNvbW1vbi5tYWozMjtcbnZhciBzMF8yNTYgPSBzaGFDb21tb24uczBfMjU2O1xudmFyIHMxXzI1NiA9IHNoYUNvbW1vbi5zMV8yNTY7XG52YXIgZzBfMjU2ID0gc2hhQ29tbW9uLmcwXzI1NjtcbnZhciBnMV8yNTYgPSBzaGFDb21tb24uZzFfMjU2O1xuXG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTI1Nl9LID0gW1xuICAweDQyOGEyZjk4LCAweDcxMzc0NDkxLCAweGI1YzBmYmNmLCAweGU5YjVkYmE1LFxuICAweDM5NTZjMjViLCAweDU5ZjExMWYxLCAweDkyM2Y4MmE0LCAweGFiMWM1ZWQ1LFxuICAweGQ4MDdhYTk4LCAweDEyODM1YjAxLCAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLFxuICAweDcyYmU1ZDc0LCAweDgwZGViMWZlLCAweDliZGMwNmE3LCAweGMxOWJmMTc0LFxuICAweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLFxuICAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuICAweDk4M2U1MTUyLCAweGE4MzFjNjZkLCAweGIwMDMyN2M4LCAweGJmNTk3ZmM3LFxuICAweGM2ZTAwYmYzLCAweGQ1YTc5MTQ3LCAweDA2Y2E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLCAweDUzMzgwZDEzLFxuICAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuICAweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLFxuICAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuICAweDE5YTRjMTE2LCAweDFlMzc2YzA4LCAweDI3NDg3NzRjLCAweDM0YjBiY2I1LFxuICAweDM5MWMwY2IzLCAweDRlZDhhYTRhLCAweDViOWNjYTRmLCAweDY4MmU2ZmYzLFxuICAweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LFxuICAweDkwYmVmZmZhLCAweGE0NTA2Y2ViLCAweGJlZjlhM2Y3LCAweGM2NzE3OGYyXG5dO1xuXG5mdW5jdGlvbiBTSEEyNTYoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyNTYpKVxuICAgIHJldHVybiBuZXcgU0hBMjU2KCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDZhMDllNjY3LCAweGJiNjdhZTg1LCAweDNjNmVmMzcyLCAweGE1NGZmNTNhLFxuICAgIDB4NTEwZTUyN2YsIDB4OWIwNTY4OGMsIDB4MWY4M2Q5YWIsIDB4NWJlMGNkMTlcbiAgXTtcbiAgdGhpcy5rID0gc2hhMjU2X0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg2NCk7XG59XG51dGlscy5pbmhlcml0cyhTSEEyNTYsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTI1NjtcblxuU0hBMjU2LmJsb2NrU2l6ZSA9IDUxMjtcblNIQTI1Ni5vdXRTaXplID0gMjU2O1xuU0hBMjU2LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTI1Ni5wYWRMZW5ndGggPSA2NDtcblxuU0hBMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gc3VtMzJfNChnMV8yNTYoV1tpIC0gMl0pLCBXW2kgLSA3XSwgZzBfMjU2KFdbaSAtIDE1XSksIFdbaSAtIDE2XSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuICB2YXIgZiA9IHRoaXMuaFs1XTtcbiAgdmFyIGcgPSB0aGlzLmhbNl07XG4gIHZhciBoID0gdGhpcy5oWzddO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIFQxID0gc3VtMzJfNShoLCBzMV8yNTYoZSksIGNoMzIoZSwgZiwgZyksIHRoaXMua1tpXSwgV1tpXSk7XG4gICAgdmFyIFQyID0gc3VtMzIoczBfMjU2KGEpLCBtYWozMihhLCBiLCBjKSk7XG4gICAgaCA9IGc7XG4gICAgZyA9IGY7XG4gICAgZiA9IGU7XG4gICAgZSA9IHN1bTMyKGQsIFQxKTtcbiAgICBkID0gYztcbiAgICBjID0gYjtcbiAgICBiID0gYTtcbiAgICBhID0gc3VtMzIoVDEsIFQyKTtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG4gIHRoaXMuaFs1XSA9IHN1bTMyKHRoaXMuaFs1XSwgZik7XG4gIHRoaXMuaFs2XSA9IHN1bTMyKHRoaXMuaFs2XSwgZyk7XG4gIHRoaXMuaFs3XSA9IHN1bTMyKHRoaXMuaFs3XSwgaCk7XG59O1xuXG5TSEEyNTYucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxudmFyIHJvdHI2NF9oaSA9IHV0aWxzLnJvdHI2NF9oaTtcbnZhciByb3RyNjRfbG8gPSB1dGlscy5yb3RyNjRfbG87XG52YXIgc2hyNjRfaGkgPSB1dGlscy5zaHI2NF9oaTtcbnZhciBzaHI2NF9sbyA9IHV0aWxzLnNocjY0X2xvO1xudmFyIHN1bTY0ID0gdXRpbHMuc3VtNjQ7XG52YXIgc3VtNjRfaGkgPSB1dGlscy5zdW02NF9oaTtcbnZhciBzdW02NF9sbyA9IHV0aWxzLnN1bTY0X2xvO1xudmFyIHN1bTY0XzRfaGkgPSB1dGlscy5zdW02NF80X2hpO1xudmFyIHN1bTY0XzRfbG8gPSB1dGlscy5zdW02NF80X2xvO1xudmFyIHN1bTY0XzVfaGkgPSB1dGlscy5zdW02NF81X2hpO1xudmFyIHN1bTY0XzVfbG8gPSB1dGlscy5zdW02NF81X2xvO1xuXG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTUxMl9LID0gW1xuICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLFxuICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLFxuICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LFxuICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLFxuICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LFxuICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LFxuICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLFxuICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLFxuICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LFxuICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLFxuICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLFxuICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LFxuICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLFxuICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG5dO1xuXG5mdW5jdGlvbiBTSEE1MTIoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEE1MTIpKVxuICAgIHJldHVybiBuZXcgU0hBNTEyKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDZhMDllNjY3LCAweGYzYmNjOTA4LFxuICAgIDB4YmI2N2FlODUsIDB4ODRjYWE3M2IsXG4gICAgMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYixcbiAgICAweGE1NGZmNTNhLCAweDVmMWQzNmYxLFxuICAgIDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEsXG4gICAgMHg5YjA1Njg4YywgMHgyYjNlNmMxZixcbiAgICAweDFmODNkOWFiLCAweGZiNDFiZDZiLFxuICAgIDB4NWJlMGNkMTksIDB4MTM3ZTIxNzkgXTtcbiAgdGhpcy5rID0gc2hhNTEyX0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSgxNjApO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBNTEyLCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEE1MTI7XG5cblNIQTUxMi5ibG9ja1NpemUgPSAxMDI0O1xuU0hBNTEyLm91dFNpemUgPSA1MTI7XG5TSEE1MTIuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBNTEyLnBhZExlbmd0aCA9IDEyODtcblxuU0hBNTEyLnByb3RvdHlwZS5fcHJlcGFyZUJsb2NrID0gZnVuY3Rpb24gX3ByZXBhcmVCbG9jayhtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIC8vIDMyIHggMzJiaXQgd29yZHNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcbiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGMwX2hpID0gZzFfNTEyX2hpKFdbaSAtIDRdLCBXW2kgLSAzXSk7ICAvLyBpIC0gMlxuICAgIHZhciBjMF9sbyA9IGcxXzUxMl9sbyhXW2kgLSA0XSwgV1tpIC0gM10pO1xuICAgIHZhciBjMV9oaSA9IFdbaSAtIDE0XTsgIC8vIGkgLSA3XG4gICAgdmFyIGMxX2xvID0gV1tpIC0gMTNdO1xuICAgIHZhciBjMl9oaSA9IGcwXzUxMl9oaShXW2kgLSAzMF0sIFdbaSAtIDI5XSk7ICAvLyBpIC0gMTVcbiAgICB2YXIgYzJfbG8gPSBnMF81MTJfbG8oV1tpIC0gMzBdLCBXW2kgLSAyOV0pO1xuICAgIHZhciBjM19oaSA9IFdbaSAtIDMyXTsgIC8vIGkgLSAxNlxuICAgIHZhciBjM19sbyA9IFdbaSAtIDMxXTtcblxuICAgIFdbaV0gPSBzdW02NF80X2hpKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvKTtcbiAgICBXW2kgKyAxXSA9IHN1bTY0XzRfbG8oXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8pO1xuICB9XG59O1xuXG5TSEE1MTIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdGhpcy5fcHJlcGFyZUJsb2NrKG1zZywgc3RhcnQpO1xuXG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIHZhciBhaCA9IHRoaXMuaFswXTtcbiAgdmFyIGFsID0gdGhpcy5oWzFdO1xuICB2YXIgYmggPSB0aGlzLmhbMl07XG4gIHZhciBibCA9IHRoaXMuaFszXTtcbiAgdmFyIGNoID0gdGhpcy5oWzRdO1xuICB2YXIgY2wgPSB0aGlzLmhbNV07XG4gIHZhciBkaCA9IHRoaXMuaFs2XTtcbiAgdmFyIGRsID0gdGhpcy5oWzddO1xuICB2YXIgZWggPSB0aGlzLmhbOF07XG4gIHZhciBlbCA9IHRoaXMuaFs5XTtcbiAgdmFyIGZoID0gdGhpcy5oWzEwXTtcbiAgdmFyIGZsID0gdGhpcy5oWzExXTtcbiAgdmFyIGdoID0gdGhpcy5oWzEyXTtcbiAgdmFyIGdsID0gdGhpcy5oWzEzXTtcbiAgdmFyIGhoID0gdGhpcy5oWzE0XTtcbiAgdmFyIGhsID0gdGhpcy5oWzE1XTtcblxuICBhc3NlcnQodGhpcy5rLmxlbmd0aCA9PT0gVy5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IFcubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgYzBfaGkgPSBoaDtcbiAgICB2YXIgYzBfbG8gPSBobDtcbiAgICB2YXIgYzFfaGkgPSBzMV81MTJfaGkoZWgsIGVsKTtcbiAgICB2YXIgYzFfbG8gPSBzMV81MTJfbG8oZWgsIGVsKTtcbiAgICB2YXIgYzJfaGkgPSBjaDY0X2hpKGVoLCBlbCwgZmgsIGZsLCBnaCwgZ2wpO1xuICAgIHZhciBjMl9sbyA9IGNoNjRfbG8oZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7XG4gICAgdmFyIGMzX2hpID0gdGhpcy5rW2ldO1xuICAgIHZhciBjM19sbyA9IHRoaXMua1tpICsgMV07XG4gICAgdmFyIGM0X2hpID0gV1tpXTtcbiAgICB2YXIgYzRfbG8gPSBXW2kgKyAxXTtcblxuICAgIHZhciBUMV9oaSA9IHN1bTY0XzVfaGkoXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8sXG4gICAgICBjNF9oaSwgYzRfbG8pO1xuICAgIHZhciBUMV9sbyA9IHN1bTY0XzVfbG8oXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8sXG4gICAgICBjNF9oaSwgYzRfbG8pO1xuXG4gICAgYzBfaGkgPSBzMF81MTJfaGkoYWgsIGFsKTtcbiAgICBjMF9sbyA9IHMwXzUxMl9sbyhhaCwgYWwpO1xuICAgIGMxX2hpID0gbWFqNjRfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCk7XG4gICAgYzFfbG8gPSBtYWo2NF9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsKTtcblxuICAgIHZhciBUMl9oaSA9IHN1bTY0X2hpKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcbiAgICB2YXIgVDJfbG8gPSBzdW02NF9sbyhjMF9oaSwgYzBfbG8sIGMxX2hpLCBjMV9sbyk7XG5cbiAgICBoaCA9IGdoO1xuICAgIGhsID0gZ2w7XG5cbiAgICBnaCA9IGZoO1xuICAgIGdsID0gZmw7XG5cbiAgICBmaCA9IGVoO1xuICAgIGZsID0gZWw7XG5cbiAgICBlaCA9IHN1bTY0X2hpKGRoLCBkbCwgVDFfaGksIFQxX2xvKTtcbiAgICBlbCA9IHN1bTY0X2xvKGRsLCBkbCwgVDFfaGksIFQxX2xvKTtcblxuICAgIGRoID0gY2g7XG4gICAgZGwgPSBjbDtcblxuICAgIGNoID0gYmg7XG4gICAgY2wgPSBibDtcblxuICAgIGJoID0gYWg7XG4gICAgYmwgPSBhbDtcblxuICAgIGFoID0gc3VtNjRfaGkoVDFfaGksIFQxX2xvLCBUMl9oaSwgVDJfbG8pO1xuICAgIGFsID0gc3VtNjRfbG8oVDFfaGksIFQxX2xvLCBUMl9oaSwgVDJfbG8pO1xuICB9XG5cbiAgc3VtNjQodGhpcy5oLCAwLCBhaCwgYWwpO1xuICBzdW02NCh0aGlzLmgsIDIsIGJoLCBibCk7XG4gIHN1bTY0KHRoaXMuaCwgNCwgY2gsIGNsKTtcbiAgc3VtNjQodGhpcy5oLCA2LCBkaCwgZGwpO1xuICBzdW02NCh0aGlzLmgsIDgsIGVoLCBlbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTAsIGZoLCBmbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTIsIGdoLCBnbCk7XG4gIHN1bTY0KHRoaXMuaCwgMTQsIGhoLCBobCk7XG59O1xuXG5TSEE1MTIucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuXG5mdW5jdGlvbiBjaDY0X2hpKHhoLCB4bCwgeWgsIHlsLCB6aCkge1xuICB2YXIgciA9ICh4aCAmIHloKSBeICgofnhoKSAmIHpoKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBjaDY0X2xvKHhoLCB4bCwgeWgsIHlsLCB6aCwgemwpIHtcbiAgdmFyIHIgPSAoeGwgJiB5bCkgXiAoKH54bCkgJiB6bCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFqNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKHhoICYgemgpIF4gKHloICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIG1hajY0X2xvKHhoLCB4bCwgeWgsIHlsLCB6aCwgemwpIHtcbiAgdmFyIHIgPSAoeGwgJiB5bCkgXiAoeGwgJiB6bCkgXiAoeWwgJiB6bCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAyOCk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDIpOyAgLy8gMzRcbiAgdmFyIGMyX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgNyk7ICAvLyAzOVxuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMwXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMjgpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCAyKTsgIC8vIDM0XG4gIHZhciBjMl9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDcpOyAgLy8gMzlcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMV81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE0KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTgpO1xuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA5KTsgIC8vIDQxXG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczFfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxNCk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE4KTtcbiAgdmFyIGMyX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgOSk7ICAvLyA0MVxuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcwXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMSk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDgpO1xuICB2YXIgYzJfaGkgPSBzaHI2NF9oaSh4aCwgeGwsIDcpO1xuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcwXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMSk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDgpO1xuICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDcpO1xuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcxXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTkpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCAyOSk7ICAvLyA2MVxuICB2YXIgYzJfaGkgPSBzaHI2NF9oaSh4aCwgeGwsIDYpO1xuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGcxXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTkpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCAyOSk7ICAvLyA2MVxuICB2YXIgYzJfbG8gPSBzaHI2NF9sbyh4aCwgeGwsIDYpO1xuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbbnVtYmVyICYgMHgzZmZmZmZmXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA8IDB4MTAwMDAwMDAwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmZcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpXG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmLFxuICAgICAgICAxXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAzO1xuICAgIH1cblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIC8vIFJldmVyc2UgdGhlIGJ5dGVzXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdEFycmF5ID0gZnVuY3Rpb24gX2luaXRBcnJheSAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICAvLyBQZXJoYXBzIGEgVWludDhBcnJheVxuICAgIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIGlmIChudW1iZXIubGVuZ3RoIDw9IDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbMF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICB2YXIgeiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciA8PD0gNDtcblxuICAgICAgdmFyIGI7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICBiID0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQScgLSAnRidcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNyAmJiBjIDw9IDIyKSB7XG4gICAgICAgIGIgPSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYiA9IGM7XG4gICAgICB9XG5cbiAgICAgIHIgfD0gYjtcbiAgICAgIHogfD0gYjtcbiAgICB9XG5cbiAgICBhc3NlcnQoISh6ICYgMHhmMCksICdJbnZhbGlkIGNoYXJhY3RlciBpbiAnICsgc3RyKTtcbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VCYXNlIChzdHIsIHN0YXJ0LCBlbmQsIG11bCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgYiA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgYiA9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcpIHtcbiAgICAgICAgYiA9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiID0gYztcbiAgICAgIH1cbiAgICAgIGFzc2VydChjID49IDAgJiYgYiA8IG11bCwgJ0ludmFsaWQgY2hhcmFjdGVyJyk7XG4gICAgICByICs9IGI7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFswXTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG5cbiAgICAvLyBGaW5kIGxlbmd0aCBvZiBsaW1iIGluIGJhc2VcbiAgICBmb3IgKHZhciBsaW1iTGVuID0gMCwgbGltYlBvdyA9IDE7IGxpbWJQb3cgPD0gMHgzZmZmZmZmOyBsaW1iUG93ICo9IGJhc2UpIHtcbiAgICAgIGxpbWJMZW4rKztcbiAgICB9XG4gICAgbGltYkxlbi0tO1xuICAgIGxpbWJQb3cgPSAobGltYlBvdyAvIGJhc2UpIHwgMDtcblxuICAgIHZhciB0b3RhbCA9IG51bWJlci5sZW5ndGggLSBzdGFydDtcbiAgICB2YXIgbW9kID0gdG90YWwgJSBsaW1iTGVuO1xuICAgIHZhciBlbmQgPSBNYXRoLm1pbih0b3RhbCwgdG90YWwgLSBtb2QpICsgc3RhcnQ7XG5cbiAgICB2YXIgd29yZCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGxpbWJMZW4pIHtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBpICsgbGltYkxlbiwgYmFzZSk7XG5cbiAgICAgIHRoaXMuaW11bG4obGltYlBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vZCAhPT0gMCkge1xuICAgICAgdmFyIHBvdyA9IDE7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgbnVtYmVyLmxlbmd0aCwgYmFzZSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtb2Q7IGkrKykge1xuICAgICAgICBwb3cgKj0gYmFzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbXVsbihwb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKGRlc3QpIHtcbiAgICBkZXN0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlc3Qud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgIH1cbiAgICBkZXN0Lmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIGRlc3QubmVnYXRpdmUgPSB0aGlzLm5lZ2F0aXZlO1xuICAgIGRlc3QucmVkID0gdGhpcy5yZWQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gbW92ZSAoZGVzdCwgc3JjKSB7XG4gICAgZGVzdC53b3JkcyA9IHNyYy53b3JkcztcbiAgICBkZXN0Lmxlbmd0aCA9IHNyYy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHNyYy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHNyYy5yZWQ7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX21vdmUgPSBmdW5jdGlvbiBfbW92ZSAoZGVzdCkge1xuICAgIG1vdmUoZGVzdCwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHZhciByID0gbmV3IEJOKG51bGwpO1xuICAgIHRoaXMuY29weShyKTtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2V4cGFuZCA9IGZ1bmN0aW9uIF9leHBhbmQgKHNpemUpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBzaXplKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gUmVtb3ZlIGxlYWRpbmcgYDBgIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5fc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gQ2hlY2sgU3ltYm9sLmZvciBiZWNhdXNlIG5vdCBldmVyeXdoZXJlIHdoZXJlIFN5bWJvbCBkZWZpbmVkXG4gIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TeW1ib2wjQnJvd3Nlcl9jb21wYXRpYmlsaXR5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgU3ltYm9sLmZvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIEJOLnByb3RvdHlwZVtTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IGluc3BlY3Q7XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBpbnNwZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH1cblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2Rybihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNiwgMik7XG4gIH07XG5cbiAgaWYgKEJ1ZmZlcikge1xuICAgIEJOLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uIHRvQnVmZmVyIChlbmRpYW4sIGxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQnVmZmVyLCBlbmRpYW4sIGxlbmd0aCk7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIGFsbG9jYXRlIChBcnJheVR5cGUsIHNpemUpIHtcbiAgICBpZiAoQXJyYXlUeXBlLmFsbG9jVW5zYWZlKSB7XG4gICAgICByZXR1cm4gQXJyYXlUeXBlLmFsbG9jVW5zYWZlKHNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEFycmF5VHlwZShzaXplKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHRoaXMuX3N0cmlwKCk7XG5cbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCgpO1xuICAgIHZhciByZXFMZW5ndGggPSBsZW5ndGggfHwgTWF0aC5tYXgoMSwgYnl0ZUxlbmd0aCk7XG4gICAgYXNzZXJ0KGJ5dGVMZW5ndGggPD0gcmVxTGVuZ3RoLCAnYnl0ZSBhcnJheSBsb25nZXIgdGhhbiBkZXNpcmVkIGxlbmd0aCcpO1xuICAgIGFzc2VydChyZXFMZW5ndGggPiAwLCAnUmVxdWVzdGVkIGFycmF5IGxlbmd0aCA8PSAwJyk7XG5cbiAgICB2YXIgcmVzID0gYWxsb2NhdGUoQXJyYXlUeXBlLCByZXFMZW5ndGgpO1xuICAgIHZhciBwb3N0Zml4ID0gZW5kaWFuID09PSAnbGUnID8gJ0xFJyA6ICdCRSc7XG4gICAgdGhpc1snX3RvQXJyYXlMaWtlJyArIHBvc3RmaXhdKHJlcywgYnl0ZUxlbmd0aCk7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3RvQXJyYXlMaWtlTEUgPSBmdW5jdGlvbiBfdG9BcnJheUxpa2VMRSAocmVzLCBieXRlTGVuZ3RoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIHNoaWZ0ID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3b3JkID0gKHRoaXMud29yZHNbaV0gPDwgc2hpZnQpIHwgY2Fycnk7XG5cbiAgICAgIHJlc1twb3NpdGlvbisrXSA9IHdvcmQgJiAweGZmO1xuICAgICAgaWYgKHBvc2l0aW9uIDwgcmVzLmxlbmd0aCkge1xuICAgICAgICByZXNbcG9zaXRpb24rK10gPSAod29yZCA+PiA4KSAmIDB4ZmY7XG4gICAgICB9XG4gICAgICBpZiAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbisrXSA9ICh3b3JkID4+IDE2KSAmIDB4ZmY7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGlmdCA9PT0gNikge1xuICAgICAgICBpZiAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmVzW3Bvc2l0aW9uKytdID0gKHdvcmQgPj4gMjQpICYgMHhmZjtcbiAgICAgICAgfVxuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICAgIHNoaWZ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcnJ5ID0gd29yZCA+Pj4gMjQ7XG4gICAgICAgIHNoaWZ0ICs9IDI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgcmVzLmxlbmd0aCkge1xuICAgICAgcmVzW3Bvc2l0aW9uKytdID0gY2Fycnk7XG5cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVzW3Bvc2l0aW9uKytdID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl90b0FycmF5TGlrZUJFID0gZnVuY3Rpb24gX3RvQXJyYXlMaWtlQkUgKHJlcywgYnl0ZUxlbmd0aCkge1xuICAgIHZhciBwb3NpdGlvbiA9IHJlcy5sZW5ndGggLSAxO1xuICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgc2hpZnQgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHdvcmQgPSAodGhpcy53b3Jkc1tpXSA8PCBzaGlmdCkgfCBjYXJyeTtcblxuICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gd29yZCAmIDB4ZmY7XG4gICAgICBpZiAocG9zaXRpb24gPj0gMCkge1xuICAgICAgICByZXNbcG9zaXRpb24tLV0gPSAod29yZCA+PiA4KSAmIDB4ZmY7XG4gICAgICB9XG4gICAgICBpZiAocG9zaXRpb24gPj0gMCkge1xuICAgICAgICByZXNbcG9zaXRpb24tLV0gPSAod29yZCA+PiAxNikgJiAweGZmO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hpZnQgPT09IDYpIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uID49IDApIHtcbiAgICAgICAgICByZXNbcG9zaXRpb24tLV0gPSAod29yZCA+PiAyNCkgJiAweGZmO1xuICAgICAgICB9XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgICAgc2hpZnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3b3JkID4+PiAyNDtcbiAgICAgICAgc2hpZnQgKz0gMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPj0gMCkge1xuICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gY2Fycnk7XG5cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbi0tXSA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSA+Pj4gd2JpdCkgJiAweDAxO1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYW5kID0gZnVuY3Rpb24gaWFuZCAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVhbmQobnVtKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhbmQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVhbmQgPSBmdW5jdGlvbiB1YW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1YW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1YW5kKHRoaXMpO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXV4b3IgPSBmdW5jdGlvbiBpdXhvciAobnVtKSB7XG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhO1xuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV0gXiBiLndvcmRzW2ldO1xuICAgIH1cblxuICAgIGlmICh0aGlzICE9PSBhKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChudW0pIHtcbiAgICB2YXIgcjtcblxuICAgIC8vIG5lZ2F0aXZlICsgcG9zaXRpdmVcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG5cbiAgICAvLyBwb3NpdGl2ZSArIG5lZ2F0aXZlXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGhdID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIC8vIENvcHkgdGhlIHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgfSBlbHNlIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChudW0pIHtcbiAgICB2YXIgcmVzO1xuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDAgJiYgdGhpcy5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IHRoaXMuc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIGlmIChudW0ubmVnYXRpdmUgPT09IDAgJiYgdGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSBudW0uc3ViKHRoaXMpO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZChudW0pO1xuXG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhZGQodGhpcyk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChudW0pIHtcbiAgICAvLyB0aGlzIC0gKC1udW0pID0gdGhpcyArIG51bVxuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICB2YXIgciA9IHRoaXMuaWFkZChudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gLXRoaXMgLSBudW0gPSAtKHRoaXMgKyBudW0pXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZChudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmVcbiAgICB2YXIgY21wID0gdGhpcy5jbXAobnVtKTtcblxuICAgIC8vIE9wdGltaXphdGlvbiAtIHplcm9pZnlcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gYSA+IGJcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoY21wID4gMCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApIC0gKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIENvcHkgcmVzdCBvZiB0aGUgd29yZHNcbiAgICBpZiAoY2FycnkgPT09IDAgJiYgaSA8IGEubGVuZ3RoICYmIGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpKTtcblxuICAgIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0Ll9zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuX3N0cmlwKCk7XG4gIH1cblxuICBmdW5jdGlvbiBqdW1ib011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIC8vIFRlbXBvcmFyeSBkaXNhYmxlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvYm4uanMvaXNzdWVzLzIxMVxuICAgIC8vIHZhciBmZnRtID0gbmV3IEZGVE0oKTtcbiAgICAvLyByZXR1cm4gZmZ0bS5tdWxwKHNlbGYsIG51bSwgb3V0KTtcbiAgICByZXR1cm4gYmlnTXVsVG8oc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuX3N0cmlwKCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgYHRoaXNgIGJ5IGBudW1gXG4gIEJOLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMubXVsVG8obnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGVtcGxveWluZyBGRlRcbiAgQk4ucHJvdG90eXBlLm11bGYgPSBmdW5jdGlvbiBtdWxmIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBNdWx0aXBsaWNhdGlvblxuICBCTi5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubXVsVG8obnVtLCB0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW11bG4gPSBmdW5jdGlvbiBpbXVsbiAobnVtKSB7XG4gICAgdmFyIGlzTmVnTnVtID0gbnVtIDwgMDtcbiAgICBpZiAoaXNOZWdOdW0pIG51bSA9IC1udW07XG5cbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiBpc05lZ051bSA/IHRoaXMuaW5lZygpIDogdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubXVsbiA9IGZ1bmN0aW9uIG11bG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW11bG4obnVtKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKHRoaXMpO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLmltdWwodGhpcy5jbG9uZSgpKTtcbiAgfTtcblxuICAvLyBNYXRoLnBvdyhgdGhpc2AsIGBudW1gKVxuICBCTi5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChudW0pIHtcbiAgICB2YXIgdyA9IHRvQml0QXJyYXkobnVtKTtcbiAgICBpZiAody5sZW5ndGggPT09IDApIHJldHVybiBuZXcgQk4oMSk7XG5cbiAgICAvLyBTa2lwIGxlYWRpbmcgemVyb2VzXG4gICAgdmFyIHJlcyA9IHRoaXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3Lmxlbmd0aDsgaSsrLCByZXMgPSByZXMuc3FyKCkpIHtcbiAgICAgIGlmICh3W2ldICE9PSAwKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoKytpIDwgdy5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIHEgPSByZXMuc3FyKCk7IGkgPCB3Lmxlbmd0aDsgaSsrLCBxID0gcS5zcXIoKSkge1xuICAgICAgICBpZiAod1tpXSA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gcmVzLm11bChxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnQgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1c2hsbiA9IGZ1bmN0aW9uIGl1c2hsbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcbiAgICB2YXIgY2FycnlNYXNrID0gKDB4M2ZmZmZmZiA+Pj4gKDI2IC0gcikpIDw8ICgyNiAtIHIpO1xuICAgIHZhciBpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXdDYXJyeSA9IHRoaXMud29yZHNbaV0gJiBjYXJyeU1hc2s7XG4gICAgICAgIHZhciBjID0gKCh0aGlzLndvcmRzW2ldIHwgMCkgLSBuZXdDYXJyeSkgPDwgcjtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGMgfCBjYXJyeTtcbiAgICAgICAgY2FycnkgPSBuZXdDYXJyeSA+Pj4gKDI2IC0gcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYXJyeSkge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHMgIT09IDApIHtcbiAgICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgc10gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlbmd0aCArPSBzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5tYXNrbiA9IGZ1bmN0aW9uIG1hc2tuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbWFza24oYml0cyk7XG4gIH07XG5cbiAgLy8gQWRkIHBsYWluIG51bWJlciBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlhZGRuID0gZnVuY3Rpb24gaWFkZG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlzdWJuKC1udW0pO1xuXG4gICAgLy8gUG9zc2libGUgc2lnbiBjaGFuZ2VcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmICh0aGlzLndvcmRzWzBdIHwgMCkgPD0gbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuXG4gICAgLy8gU3VidHJhY3Rpb24gb3ZlcmZsb3dcbiAgICBhc3NlcnQoY2FycnkgPT09IC0xKTtcbiAgICBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAtKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5fc3RyaXAoKTtcbiAgICB9XG4gICAgYS5fc3RyaXAoKTtcblxuICAgIC8vIERlbm9ybWFsaXplXG4gICAgaWYgKG1vZGUgIT09ICdkaXYnICYmIHNoaWZ0ICE9PSAwKSB7XG4gICAgICBhLml1c2hybihzaGlmdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpdjogcSB8fCBudWxsLFxuICAgICAgbW9kOiBhXG4gICAgfTtcbiAgfTtcblxuICAvLyBOT1RFOiAxKSBgbW9kZWAgY2FuIGJlIHNldCB0byBgbW9kYCB0byByZXF1ZXN0IG1vZCBvbmx5LFxuICAvLyAgICAgICB0byBgZGl2YCB0byByZXF1ZXN0IGRpdiBvbmx5LCBvciBiZSBhYnNlbnQgdG9cbiAgLy8gICAgICAgcmVxdWVzdCBib3RoIGRpdiAmIG1vZFxuICAvLyAgICAgICAyKSBgcG9zaXRpdmVgIGlzIHRydWUgaWYgdW5zaWduZWQgbW9kIGlzIHJlcXVlc3RlZFxuICBCTi5wcm90b3R5cGUuZGl2bW9kID0gZnVuY3Rpb24gZGl2bW9kIChudW0sIG1vZGUsIHBvc2l0aXZlKSB7XG4gICAgYXNzZXJ0KCFudW0uaXNaZXJvKCkpO1xuXG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IG5ldyBCTigwKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGl2LCBtb2QsIHJlcztcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pYWRkKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IHJlcy5tb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLm5lZ2F0aXZlICYgbnVtLm5lZ2F0aXZlKSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaXN1YihudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogcmVzLmRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZSBhdCB0aGlzIHBvaW50XG5cbiAgICAvLyBTdHJpcCBib3RoIG51bWJlcnMgdG8gYXBwcm94aW1hdGUgc2hpZnQgdmFsdWVcbiAgICBpZiAobnVtLmxlbmd0aCA+IHRoaXMubGVuZ3RoIHx8IHRoaXMuY21wKG51bSkgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiB0aGlzXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFZlcnkgc2hvcnQgcmVkdWN0aW9uXG4gICAgaWYgKG51bS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChtb2RlID09PSAnZGl2Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgICAgbW9kOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlID09PSAnbW9kJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogbnVsbCxcbiAgICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZHJuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kcm4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgKHIyID09PSAxICYmIGNtcCA9PT0gMCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZHJuID0gZnVuY3Rpb24gbW9kcm4gKG51bSkge1xuICAgIHZhciBpc05lZ051bSA9IG51bSA8IDA7XG4gICAgaWYgKGlzTmVnTnVtKSBudW0gPSAtbnVtO1xuXG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzTmVnTnVtID8gLWFjYyA6IGFjYztcbiAgfTtcblxuICAvLyBXQVJOSU5HOiBERVBSRUNBVEVEXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kcm4obnVtKTtcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIHZhciBpc05lZ051bSA9IG51bSA8IDA7XG4gICAgaWYgKGlzTmVnTnVtKSBudW0gPSAtbnVtO1xuXG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdHJpcCgpO1xuICAgIHJldHVybiBpc05lZ051bSA/IHRoaXMuaW5lZygpIDogdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLl9zdHJpcCgpO1xuXG4gICAgdmFyIHJlcztcbiAgICBpZiAodGhpcy5sZW5ndGggPiAxKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmVnYXRpdmUpIHtcbiAgICAgICAgbnVtID0gLW51bTtcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYsICdOdW1iZXIgaXMgdG9vIGJpZycpO1xuXG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbMF0gfCAwO1xuICAgICAgcmVzID0gdyA9PT0gbnVtID8gMCA6IHcgPCBudW0gPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb21wYXJlIHR3byBudW1iZXJzIGFuZCByZXR1cm46XG4gIC8vIDEgLSBpZiBgdGhpc2AgPiBgbnVtYFxuICAvLyAwIC0gaWYgYHRoaXNgID09IGBudW1gXG4gIC8vIC0xIC0gaWYgYHRoaXNgIDwgYG51bWBcbiAgQk4ucHJvdG90eXBlLmNtcCA9IGZ1bmN0aW9uIGNtcCAobnVtKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gMTtcblxuICAgIHZhciByZXMgPSB0aGlzLnVjbXAobnVtKTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gVW5zaWduZWQgY29tcGFyaXNvblxuICBCTi5wcm90b3R5cGUudWNtcCA9IGZ1bmN0aW9uIHVjbXAgKG51bSkge1xuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGhhdmUgdGhlIHNhbWUgc2lnblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiAxO1xuICAgIGlmICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHJldHVybiAtMTtcblxuICAgIHZhciByZXMgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgYSA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdmFyIGIgPSBudW0ud29yZHNbaV0gfCAwO1xuXG4gICAgICBpZiAoYSA9PT0gYikgY29udGludWU7XG4gICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmVzID0gLTE7XG4gICAgICB9IGVsc2UgaWYgKGEgPiBiKSB7XG4gICAgICAgIHJlcyA9IDE7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RuID0gZnVuY3Rpb24gZ3RuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ID0gZnVuY3Rpb24gZ3QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGVuID0gZnVuY3Rpb24gZ3RlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZSA9IGZ1bmN0aW9uIGd0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRuID0gZnVuY3Rpb24gbHRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdCA9IGZ1bmN0aW9uIGx0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZW4gPSBmdW5jdGlvbiBsdGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlID0gZnVuY3Rpb24gbHRlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcW4gPSBmdW5jdGlvbiBlcW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDA7XG4gIH07XG5cbiAgLy9cbiAgLy8gQSByZWR1Y2UgY29udGV4dCwgY291bGQgYmUgdXNpbmcgbW9udGdvbWVyeSBvciBzb21ldGhpbmcgYmV0dGVyLCBkZXBlbmRpbmdcbiAgLy8gb24gdGhlIGBtYCBpdHNlbGYuXG4gIC8vXG4gIEJOLnJlZCA9IGZ1bmN0aW9uIHJlZCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBSZWQobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9SZWQgPSBmdW5jdGlvbiB0b1JlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgcmV0dXJuIGN0eC5jb252ZXJ0VG8odGhpcykuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21SZWQgPSBmdW5jdGlvbiBmcm9tUmVkICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdmcm9tUmVkIHdvcmtzIG9ubHkgd2l0aCBudW1iZXJzIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmNvbnZlcnRGcm9tKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZm9yY2VSZWQgPSBmdW5jdGlvbiBfZm9yY2VSZWQgKGN0eCkge1xuICAgIHRoaXMucmVkID0gY3R4O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mb3JjZVJlZCA9IGZ1bmN0aW9uIGZvcmNlUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRBZGQgPSBmdW5jdGlvbiByZWRBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElBZGQgPSBmdW5jdGlvbiByZWRJQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFN1YiA9IGZ1bmN0aW9uIHJlZFN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVN1YiA9IGZ1bmN0aW9uIHJlZElTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU2hsID0gZnVuY3Rpb24gcmVkU2hsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNobCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRNdWwgPSBmdW5jdGlvbiByZWRNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5tdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSU11bCA9IGZ1bmN0aW9uIHJlZElNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNxciA9IGZ1bmN0aW9uIHJlZFNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXIodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTcXIgPSBmdW5jdGlvbiByZWRJU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3FyKHRoaXMpO1xuICB9O1xuXG4gIC8vIFNxdWFyZSByb290IG92ZXIgcFxuICBCTi5wcm90b3R5cGUucmVkU3FydCA9IGZ1bmN0aW9uIHJlZFNxcnQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxcnQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcnQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEludm0gPSBmdW5jdGlvbiByZWRJbnZtICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJbnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbnZtKHRoaXMpO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2AgJSBgcmVkIG1vZHVsb2BcbiAgQk4ucHJvdG90eXBlLnJlZE5lZyA9IGZ1bmN0aW9uIHJlZE5lZyAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTmVnIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5uZWcodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFBvdyA9IGZ1bmN0aW9uIHJlZFBvdyAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkICYmICFudW0ucmVkLCAncmVkUG93KG5vcm1hbE51bSknKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQucG93KHRoaXMsIG51bSk7XG4gIH07XG5cbiAgLy8gUHJpbWUgbnVtYmVycyB3aXRoIGVmZmljaWVudCByZWR1Y3Rpb25cbiAgdmFyIHByaW1lcyA9IHtcbiAgICBrMjU2OiBudWxsLFxuICAgIHAyMjQ6IG51bGwsXG4gICAgcDE5MjogbnVsbCxcbiAgICBwMjU1MTk6IG51bGxcbiAgfTtcblxuICAvLyBQc2V1ZG8tTWVyc2VubmUgcHJpbWVcbiAgZnVuY3Rpb24gTVByaW1lIChuYW1lLCBwKSB7XG4gICAgLy8gUCA9IDIgXiBOIC0gS1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5wID0gbmV3IEJOKHAsIDE2KTtcbiAgICB0aGlzLm4gPSB0aGlzLnAuYml0TGVuZ3RoKCk7XG4gICAgdGhpcy5rID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLm4pLmlzdWIodGhpcy5wKTtcblxuICAgIHRoaXMudG1wID0gdGhpcy5fdG1wKCk7XG4gIH1cblxuICBNUHJpbWUucHJvdG90eXBlLl90bXAgPSBmdW5jdGlvbiBfdG1wICgpIHtcbiAgICB2YXIgdG1wID0gbmV3IEJOKG51bGwpO1xuICAgIHRtcC53b3JkcyA9IG5ldyBBcnJheShNYXRoLmNlaWwodGhpcy5uIC8gMTMpKTtcbiAgICByZXR1cm4gdG1wO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaXJlZHVjZSA9IGZ1bmN0aW9uIGlyZWR1Y2UgKG51bSkge1xuICAgIC8vIEFzc3VtZXMgdGhhdCBgbnVtYCBpcyBsZXNzIHRoYW4gYFBeMmBcbiAgICAvLyBudW0gPSBISSAqICgyIF4gTiAtIEspICsgSEkgKiBLICsgTE8gPSBISSAqIEsgKyBMTyAobW9kIFApXG4gICAgdmFyIHIgPSBudW07XG4gICAgdmFyIHJsZW47XG5cbiAgICBkbyB7XG4gICAgICB0aGlzLnNwbGl0KHIsIHRoaXMudG1wKTtcbiAgICAgIHIgPSB0aGlzLmltdWxLKHIpO1xuICAgICAgciA9IHIuaWFkZCh0aGlzLnRtcCk7XG4gICAgICBybGVuID0gci5iaXRMZW5ndGgoKTtcbiAgICB9IHdoaWxlIChybGVuID4gdGhpcy5uKTtcblxuICAgIHZhciBjbXAgPSBybGVuIDwgdGhpcy5uID8gLTEgOiByLnVjbXAodGhpcy5wKTtcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICByLndvcmRzWzBdID0gMDtcbiAgICAgIHIubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAgIHIuaXN1Yih0aGlzLnApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoci5zdHJpcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIHIgaXMgYSBCTiB2NCBpbnN0YW5jZVxuICAgICAgICByLnN0cmlwKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByIGlzIGEgQk4gdjUgaW5zdGFuY2VcbiAgICAgICAgci5fc3RyaXAoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIG1vdmUoYSwgYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpKTtcbiAgICByZXR1cm4gYTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbW9kdWxlLCB0aGlzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYXNuMSA9IGV4cG9ydHM7XG5cbmFzbjEuYmlnbnVtID0gcmVxdWlyZSgnYm4uanMnKTtcblxuYXNuMS5kZWZpbmUgPSByZXF1aXJlKCcuL2FzbjEvYXBpJykuZGVmaW5lO1xuYXNuMS5iYXNlID0gcmVxdWlyZSgnLi9hc24xL2Jhc2UnKTtcbmFzbjEuY29uc3RhbnRzID0gcmVxdWlyZSgnLi9hc24xL2NvbnN0YW50cycpO1xuYXNuMS5kZWNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9kZWNvZGVycycpO1xuYXNuMS5lbmNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9lbmNvZGVycycpO1xuIiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICAvLyAnYScgLSAnZidcbiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHtcbiAgICAgICAgciB8PSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciB8PSBjICYgMHhmO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyLnN0cmlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gciBpcyBCTiB2NCBpbnN0YW5jZVxuICAgICAgICByLnN0cmlwKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByIGlzIEJOIHY1IGluc3RhbmNlXG4gICAgICAgIHIuX3N0cmlwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gICAgcmV0dXJuIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbW9kdWxlLCB0aGlzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZW5jb2RlcnMgPSBleHBvcnRzO1xuXG5lbmNvZGVycy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuZW5jb2RlcnMucGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuY29uc3QgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xuY29uc3QgTm9kZSA9IHJlcXVpcmUoJy4uL2Jhc2Uvbm9kZScpO1xuXG4vLyBJbXBvcnQgREVSIGNvbnN0YW50c1xuY29uc3QgZGVyID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzL2RlcicpO1xuXG5mdW5jdGlvbiBERVJFbmNvZGVyKGVudGl0eSkge1xuICB0aGlzLmVuYyA9ICdkZXInO1xuICB0aGlzLm5hbWUgPSBlbnRpdHkubmFtZTtcbiAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XG5cbiAgLy8gQ29uc3RydWN0IGJhc2UgdHJlZVxuICB0aGlzLnRyZWUgPSBuZXcgREVSTm9kZSgpO1xuICB0aGlzLnRyZWUuX2luaXQoZW50aXR5LmJvZHkpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBERVJFbmNvZGVyO1xuXG5ERVJFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgcmVwb3J0ZXIpIHtcbiAgcmV0dXJuIHRoaXMudHJlZS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKS5qb2luKCk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgTm9kZS5jYWxsKHRoaXMsICdkZXInLCBwYXJlbnQpO1xufVxuaW5oZXJpdHMoREVSTm9kZSwgTm9kZSk7XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVDb21wb3NpdGUgPSBmdW5jdGlvbiBlbmNvZGVDb21wb3NpdGUodGFnLFxuICBwcmltaXRpdmUsXG4gIGNscyxcbiAgY29udGVudCkge1xuICBjb25zdCBlbmNvZGVkVGFnID0gZW5jb2RlVGFnKHRhZywgcHJpbWl0aXZlLCBjbHMsIHRoaXMucmVwb3J0ZXIpO1xuXG4gIC8vIFNob3J0IGZvcm1cbiAgaWYgKGNvbnRlbnQubGVuZ3RoIDwgMHg4MCkge1xuICAgIGNvbnN0IGhlYWRlciA9IEJ1ZmZlci5hbGxvYygyKTtcbiAgICBoZWFkZXJbMF0gPSBlbmNvZGVkVGFnO1xuICAgIGhlYWRlclsxXSA9IGNvbnRlbnQubGVuZ3RoO1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgaGVhZGVyLCBjb250ZW50IF0pO1xuICB9XG5cbiAgLy8gTG9uZyBmb3JtXG4gIC8vIENvdW50IG9jdGV0cyByZXF1aXJlZCB0byBzdG9yZSBsZW5ndGhcbiAgbGV0IGxlbk9jdGV0cyA9IDE7XG4gIGZvciAobGV0IGkgPSBjb250ZW50Lmxlbmd0aDsgaSA+PSAweDEwMDsgaSA+Pj0gOClcbiAgICBsZW5PY3RldHMrKztcblxuICBjb25zdCBoZWFkZXIgPSBCdWZmZXIuYWxsb2MoMSArIDEgKyBsZW5PY3RldHMpO1xuICBoZWFkZXJbMF0gPSBlbmNvZGVkVGFnO1xuICBoZWFkZXJbMV0gPSAweDgwIHwgbGVuT2N0ZXRzO1xuXG4gIGZvciAobGV0IGkgPSAxICsgbGVuT2N0ZXRzLCBqID0gY29udGVudC5sZW5ndGg7IGogPiAwOyBpLS0sIGogPj49IDgpXG4gICAgaGVhZGVyW2ldID0gaiAmIDB4ZmY7XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBoZWFkZXIsIGNvbnRlbnQgXSk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlU3RyID0gZnVuY3Rpb24gZW5jb2RlU3RyKHN0ciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdiaXRzdHInKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBzdHIudW51c2VkIHwgMCwgc3RyLmRhdGEgXSk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnYm1wc3RyJykge1xuICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5hbGxvYyhzdHIubGVuZ3RoICogMik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ1Zi53cml0ZVVJbnQxNkJFKHN0ci5jaGFyQ29kZUF0KGkpLCBpICogMik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGJ1Zik7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnbnVtc3RyJykge1xuICAgIGlmICghdGhpcy5faXNOdW1zdHIoc3RyKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiBudW1zdHIgc3VwcG9ydHMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25seSBkaWdpdHMgYW5kIHNwYWNlJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSBpZiAodGFnID09PSAncHJpbnRzdHInKSB7XG4gICAgaWYgKCF0aGlzLl9pc1ByaW50c3RyKHN0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogcHJpbnRzdHIgc3VwcG9ydHMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25seSBsYXRpbiB1cHBlciBhbmQgbG93ZXIgY2FzZSBsZXR0ZXJzLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaWdpdHMsIHNwYWNlLCBhcG9zdHJvcGhlLCBsZWZ0IGFuZCByaWd0aCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXJlbnRoZXNpcywgcGx1cyBzaWduLCBjb21tYSwgaHlwaGVuLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkb3QsIHNsYXNoLCBjb2xvbiwgZXF1YWwgc2lnbiwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncXVlc3Rpb24gbWFyaycpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgKyB0YWcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgdW5zdXBwb3J0ZWQnKTtcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZU9iamlkID0gZnVuY3Rpb24gZW5jb2RlT2JqaWQoaWQsIHZhbHVlcywgcmVsYXRpdmUpIHtcbiAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIXZhbHVlcylcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdzdHJpbmcgb2JqaWQgZ2l2ZW4sIGJ1dCBubyB2YWx1ZXMgbWFwIGZvdW5kJyk7XG4gICAgaWYgKCF2YWx1ZXMuaGFzT3duUHJvcGVydHkoaWQpKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ29iamlkIG5vdCBmb3VuZCBpbiB2YWx1ZXMgbWFwJyk7XG4gICAgaWQgPSB2YWx1ZXNbaWRdLnNwbGl0KC9bXFxzLl0rL2cpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspXG4gICAgICBpZFtpXSB8PSAwO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaWQpKSB7XG4gICAgaWQgPSBpZC5zbGljZSgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspXG4gICAgICBpZFtpXSB8PSAwO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGlkKSkge1xuICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdvYmppZCgpIHNob3VsZCBiZSBlaXRoZXIgYXJyYXkgb3Igc3RyaW5nLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ290OiAnICsgSlNPTi5zdHJpbmdpZnkoaWQpKTtcbiAgfVxuXG4gIGlmICghcmVsYXRpdmUpIHtcbiAgICBpZiAoaWRbMV0gPj0gNDApXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignU2Vjb25kIG9iamlkIGlkZW50aWZpZXIgT09CJyk7XG4gICAgaWQuc3BsaWNlKDAsIDIsIGlkWzBdICogNDAgKyBpZFsxXSk7XG4gIH1cblxuICAvLyBDb3VudCBudW1iZXIgb2Ygb2N0ZXRzXG4gIGxldCBzaXplID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZC5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpZGVudCA9IGlkW2ldO1xuICAgIGZvciAoc2l6ZSsrOyBpZGVudCA+PSAweDgwOyBpZGVudCA+Pj0gNylcbiAgICAgIHNpemUrKztcbiAgfVxuXG4gIGNvbnN0IG9iamlkID0gQnVmZmVyLmFsbG9jKHNpemUpO1xuICBsZXQgb2Zmc2V0ID0gb2JqaWQubGVuZ3RoIC0gMTtcbiAgZm9yIChsZXQgaSA9IGlkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IGlkZW50ID0gaWRbaV07XG4gICAgb2JqaWRbb2Zmc2V0LS1dID0gaWRlbnQgJiAweDdmO1xuICAgIHdoaWxlICgoaWRlbnQgPj49IDcpID4gMClcbiAgICAgIG9iamlkW29mZnNldC0tXSA9IDB4ODAgfCAoaWRlbnQgJiAweDdmKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG9iamlkKTtcbn07XG5cbmZ1bmN0aW9uIHR3byhudW0pIHtcbiAgaWYgKG51bSA8IDEwKVxuICAgIHJldHVybiAnMCcgKyBudW07XG4gIGVsc2VcbiAgICByZXR1cm4gbnVtO1xufVxuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlVGltZSA9IGZ1bmN0aW9uIGVuY29kZVRpbWUodGltZSwgdGFnKSB7XG4gIGxldCBzdHI7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lKTtcblxuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICBzdHIgPSBbXG4gICAgICB0d28oZGF0ZS5nZXRVVENGdWxsWWVhcigpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0RhdGUoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENIb3VycygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01pbnV0ZXMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENTZWNvbmRzKCkpLFxuICAgICAgJ1onXG4gICAgXS5qb2luKCcnKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICd1dGN0aW1lJykge1xuICAgIHN0ciA9IFtcbiAgICAgIHR3byhkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDApLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDRGF0ZSgpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0hvdXJzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTWludXRlcygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ1NlY29uZHMoKSksXG4gICAgICAnWidcbiAgICBdLmpvaW4oJycpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nICcgKyB0YWcgKyAnIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoc3RyLCAnb2N0c3RyJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlTnVsbCA9IGZ1bmN0aW9uIGVuY29kZU51bGwoKSB7XG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKCcnKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVJbnQgPSBmdW5jdGlvbiBlbmNvZGVJbnQobnVtLCB2YWx1ZXMpIHtcbiAgaWYgKHR5cGVvZiBudW0gPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCF2YWx1ZXMpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignU3RyaW5nIGludCBvciBlbnVtIGdpdmVuLCBidXQgbm8gdmFsdWVzIG1hcCcpO1xuICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KG51bSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdWYWx1ZXMgbWFwIGRvZXNuXFwndCBjb250YWluOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG51bSkpO1xuICAgIH1cbiAgICBudW0gPSB2YWx1ZXNbbnVtXTtcbiAgfVxuXG4gIC8vIEJpZ251bSwgYXNzdW1lIGJpZyBlbmRpYW5cbiAgaWYgKHR5cGVvZiBudW0gIT09ICdudW1iZXInICYmICFCdWZmZXIuaXNCdWZmZXIobnVtKSkge1xuICAgIGNvbnN0IG51bUFycmF5ID0gbnVtLnRvQXJyYXkoKTtcbiAgICBpZiAoIW51bS5zaWduICYmIG51bUFycmF5WzBdICYgMHg4MCkge1xuICAgICAgbnVtQXJyYXkudW5zaGlmdCgwKTtcbiAgICB9XG4gICAgbnVtID0gQnVmZmVyLmZyb20obnVtQXJyYXkpO1xuICB9XG5cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihudW0pKSB7XG4gICAgbGV0IHNpemUgPSBudW0ubGVuZ3RoO1xuICAgIGlmIChudW0ubGVuZ3RoID09PSAwKVxuICAgICAgc2l6ZSsrO1xuXG4gICAgY29uc3Qgb3V0ID0gQnVmZmVyLmFsbG9jKHNpemUpO1xuICAgIG51bS5jb3B5KG91dCk7XG4gICAgaWYgKG51bS5sZW5ndGggPT09IDApXG4gICAgICBvdXRbMF0gPSAwO1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG91dCk7XG4gIH1cblxuICBpZiAobnVtIDwgMHg4MClcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihudW0pO1xuXG4gIGlmIChudW0gPCAweDEwMClcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbMCwgbnVtXSk7XG5cbiAgbGV0IHNpemUgPSAxO1xuICBmb3IgKGxldCBpID0gbnVtOyBpID49IDB4MTAwOyBpID4+PSA4KVxuICAgIHNpemUrKztcblxuICBjb25zdCBvdXQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIGZvciAobGV0IGkgPSBvdXQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBvdXRbaV0gPSBudW0gJiAweGZmO1xuICAgIG51bSA+Pj0gODtcbiAgfVxuICBpZihvdXRbMF0gJiAweDgwKSB7XG4gICAgb3V0LnVuc2hpZnQoMCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihCdWZmZXIuZnJvbShvdXQpKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVCb29sID0gZnVuY3Rpb24gZW5jb2RlQm9vbCh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcih2YWx1ZSA/IDB4ZmYgOiAwKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl91c2UgPSBmdW5jdGlvbiB1c2UoZW50aXR5LCBvYmopIHtcbiAgaWYgKHR5cGVvZiBlbnRpdHkgPT09ICdmdW5jdGlvbicpXG4gICAgZW50aXR5ID0gZW50aXR5KG9iaik7XG4gIHJldHVybiBlbnRpdHkuX2dldEVuY29kZXIoJ2RlcicpLnRyZWU7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fc2tpcERlZmF1bHQgPSBmdW5jdGlvbiBza2lwRGVmYXVsdChkYXRhQnVmZmVyLCByZXBvcnRlciwgcGFyZW50KSB7XG4gIGNvbnN0IHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICBsZXQgaTtcbiAgaWYgKHN0YXRlWydkZWZhdWx0J10gPT09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGNvbnN0IGRhdGEgPSBkYXRhQnVmZmVyLmpvaW4oKTtcbiAgaWYgKHN0YXRlLmRlZmF1bHRCdWZmZXIgPT09IHVuZGVmaW5lZClcbiAgICBzdGF0ZS5kZWZhdWx0QnVmZmVyID0gdGhpcy5fZW5jb2RlVmFsdWUoc3RhdGVbJ2RlZmF1bHQnXSwgcmVwb3J0ZXIsIHBhcmVudCkuam9pbigpO1xuXG4gIGlmIChkYXRhLmxlbmd0aCAhPT0gc3RhdGUuZGVmYXVsdEJ1ZmZlci5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAoaT0wOyBpIDwgZGF0YS5sZW5ndGg7IGkrKylcbiAgICBpZiAoZGF0YVtpXSAhPT0gc3RhdGUuZGVmYXVsdEJ1ZmZlcltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIFV0aWxpdHkgbWV0aG9kc1xuXG5mdW5jdGlvbiBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgcmVwb3J0ZXIpIHtcbiAgbGV0IHJlcztcblxuICBpZiAodGFnID09PSAnc2Vxb2YnKVxuICAgIHRhZyA9ICdzZXEnO1xuICBlbHNlIGlmICh0YWcgPT09ICdzZXRvZicpXG4gICAgdGFnID0gJ3NldCc7XG5cbiAgaWYgKGRlci50YWdCeU5hbWUuaGFzT3duUHJvcGVydHkodGFnKSlcbiAgICByZXMgPSBkZXIudGFnQnlOYW1lW3RhZ107XG4gIGVsc2UgaWYgKHR5cGVvZiB0YWcgPT09ICdudW1iZXInICYmICh0YWcgfCAwKSA9PT0gdGFnKVxuICAgIHJlcyA9IHRhZztcbiAgZWxzZVxuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVW5rbm93biB0YWc6ICcgKyB0YWcpO1xuXG4gIGlmIChyZXMgPj0gMHgxZilcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ011bHRpLW9jdGV0IHRhZyBlbmNvZGluZyB1bnN1cHBvcnRlZCcpO1xuXG4gIGlmICghcHJpbWl0aXZlKVxuICAgIHJlcyB8PSAweDIwO1xuXG4gIHJlcyB8PSAoZGVyLnRhZ0NsYXNzQnlOYW1lW2NscyB8fCAndW5pdmVyc2FsJ10gPDwgNik7XG5cbiAgcmV0dXJuIHJlcztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVjb2RlcnMgPSBleHBvcnRzO1xuXG5kZWNvZGVycy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuZGVjb2RlcnMucGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5jb25zdCBiaWdudW0gPSByZXF1aXJlKCdibi5qcycpO1xuY29uc3QgRGVjb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UvYnVmZmVyJykuRGVjb2RlckJ1ZmZlcjtcbmNvbnN0IE5vZGUgPSByZXF1aXJlKCcuLi9iYXNlL25vZGUnKTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbmNvbnN0IGRlciA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cy9kZXInKTtcblxuZnVuY3Rpb24gREVSRGVjb2RlcihlbnRpdHkpIHtcbiAgdGhpcy5lbmMgPSAnZGVyJztcbiAgdGhpcy5uYW1lID0gZW50aXR5Lm5hbWU7XG4gIHRoaXMuZW50aXR5ID0gZW50aXR5O1xuXG4gIC8vIENvbnN0cnVjdCBiYXNlIHRyZWVcbiAgdGhpcy50cmVlID0gbmV3IERFUk5vZGUoKTtcbiAgdGhpcy50cmVlLl9pbml0KGVudGl0eS5ib2R5KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gREVSRGVjb2RlcjtcblxuREVSRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCFEZWNvZGVyQnVmZmVyLmlzRGVjb2RlckJ1ZmZlcihkYXRhKSkge1xuICAgIGRhdGEgPSBuZXcgRGVjb2RlckJ1ZmZlcihkYXRhLCBvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLnRyZWUuX2RlY29kZShkYXRhLCBvcHRpb25zKTtcbn07XG5cbi8vIFRyZWUgbWV0aG9kc1xuXG5mdW5jdGlvbiBERVJOb2RlKHBhcmVudCkge1xuICBOb2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBOb2RlKTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3BlZWtUYWcgPSBmdW5jdGlvbiBwZWVrVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHtcbiAgaWYgKGJ1ZmZlci5pc0VtcHR5KCkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGNvbnN0IHN0YXRlID0gYnVmZmVyLnNhdmUoKTtcbiAgY29uc3QgZGVjb2RlZFRhZyA9IGRlckRlY29kZVRhZyhidWZmZXIsICdGYWlsZWQgdG8gcGVlayB0YWc6IFwiJyArIHRhZyArICdcIicpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IoZGVjb2RlZFRhZykpXG4gICAgcmV0dXJuIGRlY29kZWRUYWc7XG5cbiAgYnVmZmVyLnJlc3RvcmUoc3RhdGUpO1xuXG4gIHJldHVybiBkZWNvZGVkVGFnLnRhZyA9PT0gdGFnIHx8IGRlY29kZWRUYWcudGFnU3RyID09PSB0YWcgfHxcbiAgICAoZGVjb2RlZFRhZy50YWdTdHIgKyAnb2YnKSA9PT0gdGFnIHx8IGFueTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVUYWcgPSBmdW5jdGlvbiBkZWNvZGVUYWcoYnVmZmVyLCB0YWcsIGFueSkge1xuICBjb25zdCBkZWNvZGVkVGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlcixcbiAgICAnRmFpbGVkIHRvIGRlY29kZSB0YWcgb2YgXCInICsgdGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihkZWNvZGVkVGFnKSlcbiAgICByZXR1cm4gZGVjb2RlZFRhZztcblxuICBsZXQgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlcixcbiAgICBkZWNvZGVkVGFnLnByaW1pdGl2ZSxcbiAgICAnRmFpbGVkIHRvIGdldCBsZW5ndGggb2YgXCInICsgdGFnICsgJ1wiJyk7XG5cbiAgLy8gRmFpbHVyZVxuICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIGlmICghYW55ICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZyAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicgIT09IHRhZykge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0ZhaWxlZCB0byBtYXRjaCB0YWc6IFwiJyArIHRhZyArICdcIicpO1xuICB9XG5cbiAgaWYgKGRlY29kZWRUYWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xuXG4gIC8vIEluZGVmaW5pdGUgbGVuZ3RoLi4uIGZpbmQgRU5EIHRhZ1xuICBjb25zdCBzdGF0ZSA9IGJ1ZmZlci5zYXZlKCk7XG4gIGNvbnN0IHJlcyA9IHRoaXMuX3NraXBVbnRpbEVuZChcbiAgICBidWZmZXIsXG4gICAgJ0ZhaWxlZCB0byBza2lwIGluZGVmaW5pdGUgbGVuZ3RoIGJvZHk6IFwiJyArIHRoaXMudGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG5cbiAgbGVuID0gYnVmZmVyLm9mZnNldCAtIHN0YXRlLm9mZnNldDtcbiAgYnVmZmVyLnJlc3RvcmUoc3RhdGUpO1xuICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBVbnRpbEVuZCA9IGZ1bmN0aW9uIHNraXBVbnRpbEVuZChidWZmZXIsIGZhaWwpIHtcbiAgZm9yICg7Oykge1xuICAgIGNvbnN0IHRhZyA9IGRlckRlY29kZVRhZyhidWZmZXIsIGZhaWwpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcih0YWcpKVxuICAgICAgcmV0dXJuIHRhZztcbiAgICBjb25zdCBsZW4gPSBkZXJEZWNvZGVMZW4oYnVmZmVyLCB0YWcucHJpbWl0aXZlLCBmYWlsKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICAgIHJldHVybiBsZW47XG5cbiAgICBsZXQgcmVzO1xuICAgIGlmICh0YWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICAgIHJlcyA9IGJ1ZmZlci5za2lwKGxlbik7XG4gICAgZWxzZVxuICAgICAgcmVzID0gdGhpcy5fc2tpcFVudGlsRW5kKGJ1ZmZlciwgZmFpbCk7XG5cbiAgICAvLyBGYWlsdXJlXG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykpXG4gICAgICByZXR1cm4gcmVzO1xuXG4gICAgaWYgKHRhZy50YWdTdHIgPT09ICdlbmQnKVxuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVMaXN0ID0gZnVuY3Rpb24gZGVjb2RlTGlzdChidWZmZXIsIHRhZywgZGVjb2RlcixcbiAgb3B0aW9ucykge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgY29uc3QgcG9zc2libGVFbmQgPSB0aGlzLl9wZWVrVGFnKGJ1ZmZlciwgJ2VuZCcpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihwb3NzaWJsZUVuZCkpXG4gICAgICByZXR1cm4gcG9zc2libGVFbmQ7XG5cbiAgICBjb25zdCByZXMgPSBkZWNvZGVyLmRlY29kZShidWZmZXIsICdkZXInLCBvcHRpb25zKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSAmJiBwb3NzaWJsZUVuZClcbiAgICAgIGJyZWFrO1xuICAgIHJlc3VsdC5wdXNoKHJlcyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVTdHIgPSBmdW5jdGlvbiBkZWNvZGVTdHIoYnVmZmVyLCB0YWcpIHtcbiAgaWYgKHRhZyA9PT0gJ2JpdHN0cicpIHtcbiAgICBjb25zdCB1bnVzZWQgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHVudXNlZCkpXG4gICAgICByZXR1cm4gdW51c2VkO1xuICAgIHJldHVybiB7IHVudXNlZDogdW51c2VkLCBkYXRhOiBidWZmZXIucmF3KCkgfTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdibXBzdHInKSB7XG4gICAgY29uc3QgcmF3ID0gYnVmZmVyLnJhdygpO1xuICAgIGlmIChyYXcubGVuZ3RoICUgMiA9PT0gMSlcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiBibXBzdHIgbGVuZ3RoIG1pc21hdGNoJyk7XG5cbiAgICBsZXQgc3RyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoIC8gMjsgaSsrKSB7XG4gICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShyYXcucmVhZFVJbnQxNkJFKGkgKiAyKSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnbnVtc3RyJykge1xuICAgIGNvbnN0IG51bXN0ciA9IGJ1ZmZlci5yYXcoKS50b1N0cmluZygnYXNjaWknKTtcbiAgICBpZiAoIXRoaXMuX2lzTnVtc3RyKG51bXN0cikpIHtcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ251bXN0ciB1bnN1cHBvcnRlZCBjaGFyYWN0ZXJzJyk7XG4gICAgfVxuICAgIHJldHVybiBudW1zdHI7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnb2N0c3RyJykge1xuICAgIHJldHVybiBidWZmZXIucmF3KCk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnb2JqRGVzYycpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3ByaW50c3RyJykge1xuICAgIGNvbnN0IHByaW50c3RyID0gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCdhc2NpaScpO1xuICAgIGlmICghdGhpcy5faXNQcmludHN0cihwcmludHN0cikpIHtcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ByaW50c3RyIHVuc3VwcG9ydGVkIGNoYXJhY3RlcnMnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByaW50c3RyO1xuICB9IGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgKyB0YWcgKyAnIHVuc3VwcG9ydGVkJyk7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVPYmppZCA9IGZ1bmN0aW9uIGRlY29kZU9iamlkKGJ1ZmZlciwgdmFsdWVzLCByZWxhdGl2ZSkge1xuICBsZXQgcmVzdWx0O1xuICBjb25zdCBpZGVudGlmaWVycyA9IFtdO1xuICBsZXQgaWRlbnQgPSAwO1xuICBsZXQgc3ViaWRlbnQgPSAwO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICBzdWJpZGVudCA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgICBpZGVudCA8PD0gNztcbiAgICBpZGVudCB8PSBzdWJpZGVudCAmIDB4N2Y7XG4gICAgaWYgKChzdWJpZGVudCAmIDB4ODApID09PSAwKSB7XG4gICAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50KTtcbiAgICAgIGlkZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgaWYgKHN1YmlkZW50ICYgMHg4MClcbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50KTtcblxuICBjb25zdCBmaXJzdCA9IChpZGVudGlmaWVyc1swXSAvIDQwKSB8IDA7XG4gIGNvbnN0IHNlY29uZCA9IGlkZW50aWZpZXJzWzBdICUgNDA7XG5cbiAgaWYgKHJlbGF0aXZlKVxuICAgIHJlc3VsdCA9IGlkZW50aWZpZXJzO1xuICBlbHNlXG4gICAgcmVzdWx0ID0gW2ZpcnN0LCBzZWNvbmRdLmNvbmNhdChpZGVudGlmaWVycy5zbGljZSgxKSk7XG5cbiAgaWYgKHZhbHVlcykge1xuICAgIGxldCB0bXAgPSB2YWx1ZXNbcmVzdWx0LmpvaW4oJyAnKV07XG4gICAgaWYgKHRtcCA9PT0gdW5kZWZpbmVkKVxuICAgICAgdG1wID0gdmFsdWVzW3Jlc3VsdC5qb2luKCcuJyldO1xuICAgIGlmICh0bXAgIT09IHVuZGVmaW5lZClcbiAgICAgIHJlc3VsdCA9IHRtcDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGltZSA9IGZ1bmN0aW9uIGRlY29kZVRpbWUoYnVmZmVyLCB0YWcpIHtcbiAgY29uc3Qgc3RyID0gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCk7XG5cbiAgbGV0IHllYXI7XG4gIGxldCBtb247XG4gIGxldCBkYXk7XG4gIGxldCBob3VyO1xuICBsZXQgbWluO1xuICBsZXQgc2VjO1xuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICB5ZWFyID0gc3RyLnNsaWNlKDAsIDQpIHwgMDtcbiAgICBtb24gPSBzdHIuc2xpY2UoNCwgNikgfCAwO1xuICAgIGRheSA9IHN0ci5zbGljZSg2LCA4KSB8IDA7XG4gICAgaG91ciA9IHN0ci5zbGljZSg4LCAxMCkgfCAwO1xuICAgIG1pbiA9IHN0ci5zbGljZSgxMCwgMTIpIHwgMDtcbiAgICBzZWMgPSBzdHIuc2xpY2UoMTIsIDE0KSB8IDA7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICB5ZWFyID0gc3RyLnNsaWNlKDAsIDIpIHwgMDtcbiAgICBtb24gPSBzdHIuc2xpY2UoMiwgNCkgfCAwO1xuICAgIGRheSA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgaG91ciA9IHN0ci5zbGljZSg2LCA4KSB8IDA7XG4gICAgbWluID0gc3RyLnNsaWNlKDgsIDEwKSB8IDA7XG4gICAgc2VjID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIGlmICh5ZWFyIDwgNzApXG4gICAgICB5ZWFyID0gMjAwMCArIHllYXI7XG4gICAgZWxzZVxuICAgICAgeWVhciA9IDE5MDAgKyB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nICcgKyB0YWcgKyAnIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIHJldHVybiBEYXRlLlVUQyh5ZWFyLCBtb24gLSAxLCBkYXksIGhvdXIsIG1pbiwgc2VjLCAwKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVOdWxsID0gZnVuY3Rpb24gZGVjb2RlTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlQm9vbCA9IGZ1bmN0aW9uIGRlY29kZUJvb2woYnVmZmVyKSB7XG4gIGNvbnN0IHJlcyA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykpXG4gICAgcmV0dXJuIHJlcztcbiAgZWxzZVxuICAgIHJldHVybiByZXMgIT09IDA7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlSW50ID0gZnVuY3Rpb24gZGVjb2RlSW50KGJ1ZmZlciwgdmFsdWVzKSB7XG4gIC8vIEJpZ2ludCwgcmV0dXJuIGFzIGl0IGlzIChhc3N1bWUgYmlnIGVuZGlhbilcbiAgY29uc3QgcmF3ID0gYnVmZmVyLnJhdygpO1xuICBsZXQgcmVzID0gbmV3IGJpZ251bShyYXcpO1xuXG4gIGlmICh2YWx1ZXMpXG4gICAgcmVzID0gdmFsdWVzW3Jlcy50b1N0cmluZygxMCldIHx8IHJlcztcblxuICByZXR1cm4gcmVzO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3VzZSA9IGZ1bmN0aW9uIHVzZShlbnRpdHksIG9iaikge1xuICBpZiAodHlwZW9mIGVudGl0eSA9PT0gJ2Z1bmN0aW9uJylcbiAgICBlbnRpdHkgPSBlbnRpdHkob2JqKTtcbiAgcmV0dXJuIGVudGl0eS5fZ2V0RGVjb2RlcignZGVyJykudHJlZTtcbn07XG5cbi8vIFV0aWxpdHkgbWV0aG9kc1xuXG5mdW5jdGlvbiBkZXJEZWNvZGVUYWcoYnVmLCBmYWlsKSB7XG4gIGxldCB0YWcgPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICBpZiAoYnVmLmlzRXJyb3IodGFnKSlcbiAgICByZXR1cm4gdGFnO1xuXG4gIGNvbnN0IGNscyA9IGRlci50YWdDbGFzc1t0YWcgPj4gNl07XG4gIGNvbnN0IHByaW1pdGl2ZSA9ICh0YWcgJiAweDIwKSA9PT0gMDtcblxuICAvLyBNdWx0aS1vY3RldCB0YWcgLSBsb2FkXG4gIGlmICgodGFnICYgMHgxZikgPT09IDB4MWYpIHtcbiAgICBsZXQgb2N0ID0gdGFnO1xuICAgIHRhZyA9IDA7XG4gICAgd2hpbGUgKChvY3QgJiAweDgwKSA9PT0gMHg4MCkge1xuICAgICAgb2N0ID0gYnVmLnJlYWRVSW50OChmYWlsKTtcbiAgICAgIGlmIChidWYuaXNFcnJvcihvY3QpKVxuICAgICAgICByZXR1cm4gb2N0O1xuXG4gICAgICB0YWcgPDw9IDc7XG4gICAgICB0YWcgfD0gb2N0ICYgMHg3ZjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGFnICY9IDB4MWY7XG4gIH1cbiAgY29uc3QgdGFnU3RyID0gZGVyLnRhZ1t0YWddO1xuXG4gIHJldHVybiB7XG4gICAgY2xzOiBjbHMsXG4gICAgcHJpbWl0aXZlOiBwcmltaXRpdmUsXG4gICAgdGFnOiB0YWcsXG4gICAgdGFnU3RyOiB0YWdTdHJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVyRGVjb2RlTGVuKGJ1ZiwgcHJpbWl0aXZlLCBmYWlsKSB7XG4gIGxldCBsZW4gPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICBpZiAoYnVmLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIC8vIEluZGVmaW5pdGUgZm9ybVxuICBpZiAoIXByaW1pdGl2ZSAmJiBsZW4gPT09IDB4ODApXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgLy8gRGVmaW5pdGUgZm9ybVxuICBpZiAoKGxlbiAmIDB4ODApID09PSAwKSB7XG4gICAgLy8gU2hvcnQgZm9ybVxuICAgIHJldHVybiBsZW47XG4gIH1cblxuICAvLyBMb25nIGZvcm1cbiAgY29uc3QgbnVtID0gbGVuICYgMHg3ZjtcbiAgaWYgKG51bSA+IDQpXG4gICAgcmV0dXJuIGJ1Zi5lcnJvcignbGVuZ3RoIG9jdGVjdCBpcyB0b28gbG9uZycpO1xuXG4gIGxlbiA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICBsZW4gPDw9IDg7XG4gICAgY29uc3QgaiA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gICAgaWYgKGJ1Zi5pc0Vycm9yKGopKVxuICAgICAgcmV0dXJuIGo7XG4gICAgbGVuIHw9IGo7XG4gIH1cblxuICByZXR1cm4gbGVuO1xufVxuIiwidmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2VlZCwgbGVuKSB7XG4gIHZhciB0ID0gQnVmZmVyLmFsbG9jKDApXG4gIHZhciBpID0gMFxuICB2YXIgY1xuICB3aGlsZSAodC5sZW5ndGggPCBsZW4pIHtcbiAgICBjID0gaTJvcHMoaSsrKVxuICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKHNlZWQpLnVwZGF0ZShjKS5kaWdlc3QoKV0pXG4gIH1cbiAgcmV0dXJuIHQuc2xpY2UoMCwgbGVuKVxufVxuXG5mdW5jdGlvbiBpMm9wcyAoYykge1xuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDQpXG4gIG91dC53cml0ZVVJbnQzMkJFKGMsIDApXG4gIHJldHVybiBvdXRcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHZhciBsZW4gPSBhLmxlbmd0aFxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBhW2ldIF49IGJbaV1cbiAgfVxuICByZXR1cm4gYVxufVxuIiwidmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIHdpdGhQdWJsaWMgKHBhZGRlZE1zZywga2V5KSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShwYWRkZWRNc2dcbiAgICAudG9SZWQoQk4ubW9udChrZXkubW9kdWx1cykpXG4gICAgLnJlZFBvdyhuZXcgQk4oa2V5LnB1YmxpY0V4cG9uZW50KSlcbiAgICAuZnJvbVJlZCgpXG4gICAgLnRvQXJyYXkoKSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aXRoUHVibGljXG4iLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoTWF0aCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIEluaXRpYWxpemF0aW9uIGFuZCByb3VuZCBjb25zdGFudHMgdGFibGVzXG5cdCAgICB2YXIgSCA9IFtdO1xuXHQgICAgdmFyIEsgPSBbXTtcblxuXHQgICAgLy8gQ29tcHV0ZSBjb25zdGFudHNcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZnVuY3Rpb24gaXNQcmltZShuKSB7XG5cdCAgICAgICAgICAgIHZhciBzcXJ0TiA9IE1hdGguc3FydChuKTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgZmFjdG9yID0gMjsgZmFjdG9yIDw9IHNxcnROOyBmYWN0b3IrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKCEobiAlIGZhY3RvcikpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBmdW5jdGlvbiBnZXRGcmFjdGlvbmFsQml0cyhuKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoKG4gLSAobiB8IDApKSAqIDB4MTAwMDAwMDAwKSB8IDA7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIG4gPSAyO1xuXHQgICAgICAgIHZhciBuUHJpbWUgPSAwO1xuXHQgICAgICAgIHdoaWxlIChuUHJpbWUgPCA2NCkge1xuXHQgICAgICAgICAgICBpZiAoaXNQcmltZShuKSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKG5QcmltZSA8IDgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBIW25QcmltZV0gPSBnZXRGcmFjdGlvbmFsQml0cyhNYXRoLnBvdyhuLCAxIC8gMikpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgS1tuUHJpbWVdID0gZ2V0RnJhY3Rpb25hbEJpdHMoTWF0aC5wb3cobiwgMSAvIDMpKTtcblxuXHQgICAgICAgICAgICAgICAgblByaW1lKys7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBuKys7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0XG5cdCAgICB2YXIgVyA9IFtdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS0yNTYgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEEyNTYgPSBDX2FsZ28uU0hBMjU2ID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChILnNsaWNlKDApKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYSA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBiID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIGMgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgZCA9IEhbM107XG5cdCAgICAgICAgICAgIHZhciBlID0gSFs0XTtcblx0ICAgICAgICAgICAgdmFyIGYgPSBIWzVdO1xuXHQgICAgICAgICAgICB2YXIgZyA9IEhbNl07XG5cdCAgICAgICAgICAgIHZhciBoID0gSFs3XTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gTVtvZmZzZXQgKyBpXSB8IDA7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4ID0gV1tpIC0gMTVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTAgID0gKChnYW1tYTB4IDw8IDI1KSB8IChnYW1tYTB4ID4+PiA3KSkgIF5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZ2FtbWEweCA8PCAxNCkgfCAoZ2FtbWEweCA+Pj4gMTgpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGdhbW1hMHggPj4+IDMpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXggPSBXW2kgLSAyXTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWExICA9ICgoZ2FtbWExeCA8PCAxNSkgfCAoZ2FtbWExeCA+Pj4gMTcpKSBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGdhbW1hMXggPDwgMTMpIHwgKGdhbW1hMXggPj4+IDE5KSkgXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnYW1tYTF4ID4+PiAxMCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIHZhciBjaCAgPSAoZSAmIGYpIF4gKH5lICYgZyk7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFqID0gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWEwID0gKChhIDw8IDMwKSB8IChhID4+PiAyKSkgXiAoKGEgPDwgMTkpIHwgKGEgPj4+IDEzKSkgXiAoKGEgPDwgMTApIHwgKGEgPj4+IDIyKSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWExID0gKChlIDw8IDI2KSB8IChlID4+PiA2KSkgXiAoKGUgPDwgMjEpIHwgKGUgPj4+IDExKSkgXiAoKGUgPDwgNykgIHwgKGUgPj4+IDI1KSk7XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyID0gc2lnbWEwICsgbWFqO1xuXG5cdCAgICAgICAgICAgICAgICBoID0gZztcblx0ICAgICAgICAgICAgICAgIGcgPSBmO1xuXHQgICAgICAgICAgICAgICAgZiA9IGU7XG5cdCAgICAgICAgICAgICAgICBlID0gKGQgKyB0MSkgfCAwO1xuXHQgICAgICAgICAgICAgICAgZCA9IGM7XG5cdCAgICAgICAgICAgICAgICBjID0gYjtcblx0ICAgICAgICAgICAgICAgIGIgPSBhO1xuXHQgICAgICAgICAgICAgICAgYSA9ICh0MSArIHQyKSB8IDA7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgICAgIEhbNF0gPSAoSFs0XSArIGUpIHwgMDtcblx0ICAgICAgICAgICAgSFs1XSA9IChIWzVdICsgZikgfCAwO1xuXHQgICAgICAgICAgICBIWzZdID0gKEhbNl0gKyBnKSB8IDA7XG5cdCAgICAgICAgICAgIEhbN10gPSAoSFs3XSArIGgpIHwgMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjU2KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyNTYod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEEyNTYpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTI1NihtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEyNTYgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMjU2KTtcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBMjU2O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3g2NC1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3g2NC1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQ7XG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7XG5cdCAgICB2YXIgWDY0V29yZEFycmF5ID0gQ194NjQuV29yZEFycmF5O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgZnVuY3Rpb24gWDY0V29yZF9jcmVhdGUoKSB7XG5cdCAgICAgICAgcmV0dXJuIFg2NFdvcmQuY3JlYXRlLmFwcGx5KFg2NFdvcmQsIGFyZ3VtZW50cyk7XG5cdCAgICB9XG5cblx0ICAgIC8vIENvbnN0YW50c1xuXHQgICAgdmFyIEsgPSBbXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiksIFg2NFdvcmRfY3JlYXRlKDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYpLCBYNjRXb3JkX2NyZWF0ZSgweGU5YjVkYmE1LCAweDgxODlkYmJjKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDM5NTZjMjViLCAweGYzNDhiNTM4KSwgWDY0V29yZF9jcmVhdGUoMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5MjNmODJhNCwgMHhhZjE5NGY5YiksIFg2NFdvcmRfY3JlYXRlKDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIpLCBYNjRXb3JkX2NyZWF0ZSgweDEyODM1YjAxLCAweDQ1NzA2ZmJlKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDI0MzE4NWJlLCAweDRlZTRiMjhjKSwgWDY0V29yZF9jcmVhdGUoMHg1NTBjN2RjMywgMHhkNWZmYjRlMiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiksIFg2NFdvcmRfY3JlYXRlKDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUpLCBYNjRXb3JkX2NyZWF0ZSgweGMxOWJmMTc0LCAweGNmNjkyNjk0KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGU0OWI2OWMxLCAweDllZjE0YWQyKSwgWDY0V29yZF9jcmVhdGUoMHhlZmJlNDc4NiwgMHgzODRmMjVlMyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgwZmMxOWRjNiwgMHg4YjhjZDViNSksIFg2NFdvcmRfY3JlYXRlKDB4MjQwY2ExY2MsIDB4NzdhYzljNjUpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUpLCBYNjRXb3JkX2NyZWF0ZSgweDRhNzQ4NGFhLCAweDZlYTZlNDgzKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDVjYjBhOWRjLCAweGJkNDFmYmQ0KSwgWDY0V29yZF9jcmVhdGUoMHg3NmY5ODhkYSwgMHg4MzExNTNiNSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiksIFg2NFdvcmRfY3JlYXRlKDB4YTgzMWM2NmQsIDB4MmRiNDMyMTApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjAwMzI3YzgsIDB4OThmYjIxM2YpLCBYNjRXb3JkX2NyZWF0ZSgweGJmNTk3ZmM3LCAweGJlZWYwZWU0KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGM2ZTAwYmYzLCAweDNkYTg4ZmMyKSwgWDY0V29yZF9jcmVhdGUoMHhkNWE3OTE0NywgMHg5MzBhYTcyNSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiksIFg2NFdvcmRfY3JlYXRlKDB4MTQyOTI5NjcsIDB4MGEwZTZlNzApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjdiNzBhODUsIDB4NDZkMjJmZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDJlMWIyMTM4LCAweDVjMjZjOTI2KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDRkMmM2ZGZjLCAweDVhYzQyYWVkKSwgWDY0V29yZF9jcmVhdGUoMHg1MzM4MGQxMywgMHg5ZDk1YjNkZiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSksIFg2NFdvcmRfY3JlYXRlKDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYpLCBYNjRXb3JkX2NyZWF0ZSgweDkyNzIyYzg1LCAweDE0ODIzNTNiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGEyYmZlOGExLCAweDRjZjEwMzY0KSwgWDY0V29yZF9jcmVhdGUoMHhhODFhNjY0YiwgMHhiYzQyMzAwMSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSksIFg2NFdvcmRfY3JlYXRlKDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgpLCBYNjRXb3JkX2NyZWF0ZSgweGQ2OTkwNjI0LCAweDU1NjVhOTEwKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGY0MGUzNTg1LCAweDU3NzEyMDJhKSwgWDY0V29yZF9jcmVhdGUoMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgxOWE0YzExNiwgMHhiOGQyZDBjOCksIFg2NFdvcmRfY3JlYXRlKDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTkpLCBYNjRXb3JkX2NyZWF0ZSgweDM0YjBiY2I1LCAweGUxOWI0OGE4KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDM5MWMwY2IzLCAweGM1Yzk1YTYzKSwgWDY0V29yZF9jcmVhdGUoMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg1YjljY2E0ZiwgMHg3NzYzZTM3MyksIFg2NFdvcmRfY3JlYXRlKDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDc4YTU2MzZmLCAweDQzMTcyZjYwKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDg0Yzg3ODE0LCAweGExZjBhYjcyKSwgWDY0V29yZF9jcmVhdGUoMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCksIFg2NFdvcmRfY3JlYXRlKDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTkpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUpLCBYNjRXb3JkX2NyZWF0ZSgweGM2NzE3OGYyLCAweGUzNzI1MzJiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGNhMjczZWNlLCAweGVhMjY2MTljKSwgWDY0V29yZF9jcmVhdGUoMHhkMTg2YjhjNywgMHgyMWMwYzIwNyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSksIFg2NFdvcmRfY3JlYXRlKDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEpLCBYNjRXb3JkX2NyZWF0ZSgweDBhNjM3ZGM1LCAweGEyYzg5OGE2KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDExM2Y5ODA0LCAweGJlZjkwZGFlKSwgWDY0V29yZF9jcmVhdGUoMHgxYjcxMGIzNSwgMHgxMzFjNDcxYiksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCksIFg2NFdvcmRfY3JlYXRlKDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMpLCBYNjRXb3JkX2NyZWF0ZSgweDQzMWQ2N2M0LCAweDljMTAwZDRjKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDRjYzVkNGJlLCAweGNiM2U0MmI2KSwgWDY0V29yZF9jcmVhdGUoMHg1OTdmMjk5YywgMHhmYzY1N2UyYSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYyksIFg2NFdvcmRfY3JlYXRlKDB4NmM0NDE5OGMsIDB4NGE0NzU4MTcpXG5cdCAgICBdO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzXG5cdCAgICB2YXIgVyA9IFtdO1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcblx0ICAgICAgICAgICAgV1tpXSA9IFg2NFdvcmRfY3JlYXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtNTEyIGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBNTEyID0gQ19hbGdvLlNIQTUxMiA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgWDY0V29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDZhMDllNjY3LCAweGYzYmNjOTA4KSwgbmV3IFg2NFdvcmQuaW5pdCgweGJiNjdhZTg1LCAweDg0Y2FhNzNiKSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHgzYzZlZjM3MiwgMHhmZTk0ZjgyYiksIG5ldyBYNjRXb3JkLmluaXQoMHhhNTRmZjUzYSwgMHg1ZjFkMzZmMSksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NTEwZTUyN2YsIDB4YWRlNjgyZDEpLCBuZXcgWDY0V29yZC5pbml0KDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDFmODNkOWFiLCAweGZiNDFiZDZiKSwgbmV3IFg2NFdvcmQuaW5pdCgweDViZTBjZDE5LCAweDEzN2UyMTc5KVxuXHQgICAgICAgICAgICBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIEgwID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIEgxID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIEgyID0gSFsyXTtcblx0ICAgICAgICAgICAgdmFyIEgzID0gSFszXTtcblx0ICAgICAgICAgICAgdmFyIEg0ID0gSFs0XTtcblx0ICAgICAgICAgICAgdmFyIEg1ID0gSFs1XTtcblx0ICAgICAgICAgICAgdmFyIEg2ID0gSFs2XTtcblx0ICAgICAgICAgICAgdmFyIEg3ID0gSFs3XTtcblxuXHQgICAgICAgICAgICB2YXIgSDBoID0gSDAuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEgwbCA9IEgwLmxvdztcblx0ICAgICAgICAgICAgdmFyIEgxaCA9IEgxLmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIMWwgPSBIMS5sb3c7XG5cdCAgICAgICAgICAgIHZhciBIMmggPSBIMi5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDJsID0gSDIubG93O1xuXHQgICAgICAgICAgICB2YXIgSDNoID0gSDMuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEgzbCA9IEgzLmxvdztcblx0ICAgICAgICAgICAgdmFyIEg0aCA9IEg0LmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBINGwgPSBINC5sb3c7XG5cdCAgICAgICAgICAgIHZhciBINWggPSBINS5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDVsID0gSDUubG93O1xuXHQgICAgICAgICAgICB2YXIgSDZoID0gSDYuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEg2bCA9IEg2Lmxvdztcblx0ICAgICAgICAgICAgdmFyIEg3aCA9IEg3LmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIN2wgPSBINy5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gV29ya2luZyB2YXJpYWJsZXNcblx0ICAgICAgICAgICAgdmFyIGFoID0gSDBoO1xuXHQgICAgICAgICAgICB2YXIgYWwgPSBIMGw7XG5cdCAgICAgICAgICAgIHZhciBiaCA9IEgxaDtcblx0ICAgICAgICAgICAgdmFyIGJsID0gSDFsO1xuXHQgICAgICAgICAgICB2YXIgY2ggPSBIMmg7XG5cdCAgICAgICAgICAgIHZhciBjbCA9IEgybDtcblx0ICAgICAgICAgICAgdmFyIGRoID0gSDNoO1xuXHQgICAgICAgICAgICB2YXIgZGwgPSBIM2w7XG5cdCAgICAgICAgICAgIHZhciBlaCA9IEg0aDtcblx0ICAgICAgICAgICAgdmFyIGVsID0gSDRsO1xuXHQgICAgICAgICAgICB2YXIgZmggPSBINWg7XG5cdCAgICAgICAgICAgIHZhciBmbCA9IEg1bDtcblx0ICAgICAgICAgICAgdmFyIGdoID0gSDZoO1xuXHQgICAgICAgICAgICB2YXIgZ2wgPSBINmw7XG5cdCAgICAgICAgICAgIHZhciBoaCA9IEg3aDtcblx0ICAgICAgICAgICAgdmFyIGhsID0gSDdsO1xuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBXaWw7XG5cdCAgICAgICAgICAgICAgICB2YXIgV2loO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIFdpID0gV1tpXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRXh0ZW5kIG1lc3NhZ2Vcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBXaWggPSBXaS5oaWdoID0gTVtvZmZzZXQgKyBpICogMl0gICAgIHwgMDtcblx0ICAgICAgICAgICAgICAgICAgICBXaWwgPSBXaS5sb3cgID0gTVtvZmZzZXQgKyBpICogMiArIDFdIHwgMDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gR2FtbWEwXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHggID0gV1tpIC0gMTVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4aCA9IGdhbW1hMHguaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEweGwgPSBnYW1tYTB4Lmxvdztcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEwaCAgPSAoKGdhbW1hMHhoID4+PiAxKSB8IChnYW1tYTB4bCA8PCAzMSkpIF4gKChnYW1tYTB4aCA+Pj4gOCkgfCAoZ2FtbWEweGwgPDwgMjQpKSBeIChnYW1tYTB4aCA+Pj4gNyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMGwgID0gKChnYW1tYTB4bCA+Pj4gMSkgfCAoZ2FtbWEweGggPDwgMzEpKSBeICgoZ2FtbWEweGwgPj4+IDgpIHwgKGdhbW1hMHhoIDw8IDI0KSkgXiAoKGdhbW1hMHhsID4+PiA3KSB8IChnYW1tYTB4aCA8PCAyNSkpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gR2FtbWExXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXggID0gV1tpIC0gMl07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXhoID0gZ2FtbWExeC5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTF4bCA9IGdhbW1hMXgubG93O1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTFoICA9ICgoZ2FtbWExeGggPj4+IDE5KSB8IChnYW1tYTF4bCA8PCAxMykpIF4gKChnYW1tYTF4aCA8PCAzKSB8IChnYW1tYTF4bCA+Pj4gMjkpKSBeIChnYW1tYTF4aCA+Pj4gNik7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMWwgID0gKChnYW1tYTF4bCA+Pj4gMTkpIHwgKGdhbW1hMXhoIDw8IDEzKSkgXiAoKGdhbW1hMXhsIDw8IDMpIHwgKGdhbW1hMXhoID4+PiAyOSkpIF4gKChnYW1tYTF4bCA+Pj4gNikgfCAoZ2FtbWExeGggPDwgMjYpKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XVxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTcgID0gV1tpIC0gN107XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpN2ggPSBXaTcuaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2k3bCA9IFdpNy5sb3c7XG5cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2kxNiAgPSBXW2kgLSAxNl07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpMTZoID0gV2kxNi5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTE2bCA9IFdpMTYubG93O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgV2lsID0gZ2FtbWEwbCArIFdpN2w7XG5cdCAgICAgICAgICAgICAgICAgICAgV2loID0gZ2FtbWEwaCArIFdpN2ggKyAoKFdpbCA+Pj4gMCkgPCAoZ2FtbWEwbCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICAgICAgV2lsID0gV2lsICsgZ2FtbWExbDtcblx0ICAgICAgICAgICAgICAgICAgICBXaWggPSBXaWggKyBnYW1tYTFoICsgKChXaWwgPj4+IDApIDwgKGdhbW1hMWwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgICAgIFdpbCA9IFdpbCArIFdpMTZsO1xuXHQgICAgICAgICAgICAgICAgICAgIFdpaCA9IFdpaCArIFdpMTZoICsgKChXaWwgPj4+IDApIDwgKFdpMTZsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIFdpLmhpZ2ggPSBXaWg7XG5cdCAgICAgICAgICAgICAgICAgICAgV2kubG93ICA9IFdpbDtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgdmFyIGNoaCAgPSAoZWggJiBmaCkgXiAofmVoICYgZ2gpO1xuXHQgICAgICAgICAgICAgICAgdmFyIGNobCAgPSAoZWwgJiBmbCkgXiAofmVsICYgZ2wpO1xuXHQgICAgICAgICAgICAgICAgdmFyIG1hamggPSAoYWggJiBiaCkgXiAoYWggJiBjaCkgXiAoYmggJiBjaCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFqbCA9IChhbCAmIGJsKSBeIChhbCAmIGNsKSBeIChibCAmIGNsKTtcblxuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMGggPSAoKGFoID4+PiAyOCkgfCAoYWwgPDwgNCkpICBeICgoYWggPDwgMzApICB8IChhbCA+Pj4gMikpIF4gKChhaCA8PCAyNSkgfCAoYWwgPj4+IDcpKTtcblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTBsID0gKChhbCA+Pj4gMjgpIHwgKGFoIDw8IDQpKSAgXiAoKGFsIDw8IDMwKSAgfCAoYWggPj4+IDIpKSBeICgoYWwgPDwgMjUpIHwgKGFoID4+PiA3KSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWExaCA9ICgoZWggPj4+IDE0KSB8IChlbCA8PCAxOCkpIF4gKChlaCA+Pj4gMTgpIHwgKGVsIDw8IDE0KSkgXiAoKGVoIDw8IDIzKSB8IChlbCA+Pj4gOSkpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMWwgPSAoKGVsID4+PiAxNCkgfCAoZWggPDwgMTgpKSBeICgoZWwgPj4+IDE4KSB8IChlaCA8PCAxNCkpIF4gKChlbCA8PCAyMykgfCAoZWggPj4+IDkpKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2ldICsgV1tpXVxuXHQgICAgICAgICAgICAgICAgdmFyIEtpICA9IEtbaV07XG5cdCAgICAgICAgICAgICAgICB2YXIgS2loID0gS2kuaGlnaDtcblx0ICAgICAgICAgICAgICAgIHZhciBLaWwgPSBLaS5sb3c7XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0MWwgPSBobCArIHNpZ21hMWw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFoID0gaGggKyBzaWdtYTFoICsgKCh0MWwgPj4+IDApIDwgKGhsID4+PiAwKSA/IDEgOiAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWwgPSB0MWwgKyBjaGw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFoID0gdDFoICsgY2hoICsgKCh0MWwgPj4+IDApIDwgKGNobCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFsID0gdDFsICsgS2lsO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxaCA9IHQxaCArIEtpaCArICgodDFsID4+PiAwKSA8IChLaWwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxbCA9IHQxbCArIFdpbDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWggPSB0MWggKyBXaWggKyAoKHQxbCA+Pj4gMCkgPCAoV2lsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gdDIgPSBzaWdtYTAgKyBtYWpcblx0ICAgICAgICAgICAgICAgIHZhciB0MmwgPSBzaWdtYTBsICsgbWFqbDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MmggPSBzaWdtYTBoICsgbWFqaCArICgodDJsID4+PiAwKSA8IChzaWdtYTBsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgICAgICBoaCA9IGdoO1xuXHQgICAgICAgICAgICAgICAgaGwgPSBnbDtcblx0ICAgICAgICAgICAgICAgIGdoID0gZmg7XG5cdCAgICAgICAgICAgICAgICBnbCA9IGZsO1xuXHQgICAgICAgICAgICAgICAgZmggPSBlaDtcblx0ICAgICAgICAgICAgICAgIGZsID0gZWw7XG5cdCAgICAgICAgICAgICAgICBlbCA9IChkbCArIHQxbCkgfCAwO1xuXHQgICAgICAgICAgICAgICAgZWggPSAoZGggKyB0MWggKyAoKGVsID4+PiAwKSA8IChkbCA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICAgICAgICAgIGRoID0gY2g7XG5cdCAgICAgICAgICAgICAgICBkbCA9IGNsO1xuXHQgICAgICAgICAgICAgICAgY2ggPSBiaDtcblx0ICAgICAgICAgICAgICAgIGNsID0gYmw7XG5cdCAgICAgICAgICAgICAgICBiaCA9IGFoO1xuXHQgICAgICAgICAgICAgICAgYmwgPSBhbDtcblx0ICAgICAgICAgICAgICAgIGFsID0gKHQxbCArIHQybCkgfCAwO1xuXHQgICAgICAgICAgICAgICAgYWggPSAodDFoICsgdDJoICsgKChhbCA+Pj4gMCkgPCAodDFsID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgSDBsID0gSDAubG93ICA9IChIMGwgKyBhbCk7XG5cdCAgICAgICAgICAgIEgwLmhpZ2ggPSAoSDBoICsgYWggKyAoKEgwbCA+Pj4gMCkgPCAoYWwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDFsID0gSDEubG93ICA9IChIMWwgKyBibCk7XG5cdCAgICAgICAgICAgIEgxLmhpZ2ggPSAoSDFoICsgYmggKyAoKEgxbCA+Pj4gMCkgPCAoYmwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDJsID0gSDIubG93ICA9IChIMmwgKyBjbCk7XG5cdCAgICAgICAgICAgIEgyLmhpZ2ggPSAoSDJoICsgY2ggKyAoKEgybCA+Pj4gMCkgPCAoY2wgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDNsID0gSDMubG93ICA9IChIM2wgKyBkbCk7XG5cdCAgICAgICAgICAgIEgzLmhpZ2ggPSAoSDNoICsgZGggKyAoKEgzbCA+Pj4gMCkgPCAoZGwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDRsID0gSDQubG93ICA9IChINGwgKyBlbCk7XG5cdCAgICAgICAgICAgIEg0LmhpZ2ggPSAoSDRoICsgZWggKyAoKEg0bCA+Pj4gMCkgPCAoZWwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDVsID0gSDUubG93ICA9IChINWwgKyBmbCk7XG5cdCAgICAgICAgICAgIEg1LmhpZ2ggPSAoSDVoICsgZmggKyAoKEg1bCA+Pj4gMCkgPCAoZmwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDZsID0gSDYubG93ICA9IChINmwgKyBnbCk7XG5cdCAgICAgICAgICAgIEg2LmhpZ2ggPSAoSDZoICsgZ2ggKyAoKEg2bCA+Pj4gMCkgPCAoZ2wgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDdsID0gSDcubG93ICA9IChIN2wgKyBobCk7XG5cdCAgICAgICAgICAgIEg3LmhpZ2ggPSAoSDdoICsgaGggKyAoKEg3bCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgMTI4KSA+Pj4gMTApIDw8IDUpICsgMzBdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgMTI4KSA+Pj4gMTApIDw8IDUpICsgMzFdID0gbkJpdHNUb3RhbDtcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0IGhhc2ggdG8gMzItYml0IHdvcmQgYXJyYXkgYmVmb3JlIHJldHVybmluZ1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2gudG9YMzIoKTtcblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiAxMDI0LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTUxMignbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBNTEyKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBNTEyID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBNTEyKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEE1MTIobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBNTEyID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTUxMik7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBNTEyO1xuXG59KSk7IiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMucmFuZG9tQnl0ZXMgPSBleHBvcnRzLnJuZyA9IGV4cG9ydHMucHNldWRvUmFuZG9tQnl0ZXMgPSBleHBvcnRzLnBybmcgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpXG5leHBvcnRzLmNyZWF0ZUhhc2ggPSBleHBvcnRzLkhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpXG5leHBvcnRzLmNyZWF0ZUhtYWMgPSBleHBvcnRzLkhtYWMgPSByZXF1aXJlKCdjcmVhdGUtaG1hYycpXG5cbnZhciBhbGdvcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktc2lnbi9hbGdvcycpXG52YXIgYWxnb0tleXMgPSBPYmplY3Qua2V5cyhhbGdvcylcbnZhciBoYXNoZXMgPSBbJ3NoYTEnLCAnc2hhMjI0JywgJ3NoYTI1NicsICdzaGEzODQnLCAnc2hhNTEyJywgJ21kNScsICdybWQxNjAnXS5jb25jYXQoYWxnb0tleXMpXG5leHBvcnRzLmdldEhhc2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGhhc2hlc1xufVxuXG52YXIgcCA9IHJlcXVpcmUoJ3Bia2RmMicpXG5leHBvcnRzLnBia2RmMiA9IHAucGJrZGYyXG5leHBvcnRzLnBia2RmMlN5bmMgPSBwLnBia2RmMlN5bmNcblxudmFyIGFlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktY2lwaGVyJylcblxuZXhwb3J0cy5DaXBoZXIgPSBhZXMuQ2lwaGVyXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGFlcy5jcmVhdGVDaXBoZXJcbmV4cG9ydHMuQ2lwaGVyaXYgPSBhZXMuQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBhZXMuY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuRGVjaXBoZXIgPSBhZXMuRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBhZXMuY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuRGVjaXBoZXJpdiA9IGFlcy5EZWNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBhZXMuY3JlYXRlRGVjaXBoZXJpdlxuZXhwb3J0cy5nZXRDaXBoZXJzID0gYWVzLmdldENpcGhlcnNcbmV4cG9ydHMubGlzdENpcGhlcnMgPSBhZXMubGlzdENpcGhlcnNcblxudmFyIGRoID0gcmVxdWlyZSgnZGlmZmllLWhlbGxtYW4nKVxuXG5leHBvcnRzLkRpZmZpZUhlbGxtYW5Hcm91cCA9IGRoLkRpZmZpZUhlbGxtYW5Hcm91cFxuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAgPSBkaC5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXBcbmV4cG9ydHMuZ2V0RGlmZmllSGVsbG1hbiA9IGRoLmdldERpZmZpZUhlbGxtYW5cbmV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbiA9IGRoLmNyZWF0ZURpZmZpZUhlbGxtYW5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbiA9IGRoLkRpZmZpZUhlbGxtYW5cblxudmFyIHNpZ24gPSByZXF1aXJlKCdicm93c2VyaWZ5LXNpZ24nKVxuXG5leHBvcnRzLmNyZWF0ZVNpZ24gPSBzaWduLmNyZWF0ZVNpZ25cbmV4cG9ydHMuU2lnbiA9IHNpZ24uU2lnblxuZXhwb3J0cy5jcmVhdGVWZXJpZnkgPSBzaWduLmNyZWF0ZVZlcmlmeVxuZXhwb3J0cy5WZXJpZnkgPSBzaWduLlZlcmlmeVxuXG5leHBvcnRzLmNyZWF0ZUVDREggPSByZXF1aXJlKCdjcmVhdGUtZWNkaCcpXG5cbnZhciBwdWJsaWNFbmNyeXB0ID0gcmVxdWlyZSgncHVibGljLWVuY3J5cHQnKVxuXG5leHBvcnRzLnB1YmxpY0VuY3J5cHQgPSBwdWJsaWNFbmNyeXB0LnB1YmxpY0VuY3J5cHRcbmV4cG9ydHMucHJpdmF0ZUVuY3J5cHQgPSBwdWJsaWNFbmNyeXB0LnByaXZhdGVFbmNyeXB0XG5leHBvcnRzLnB1YmxpY0RlY3J5cHQgPSBwdWJsaWNFbmNyeXB0LnB1YmxpY0RlY3J5cHRcbmV4cG9ydHMucHJpdmF0ZURlY3J5cHQgPSBwdWJsaWNFbmNyeXB0LnByaXZhdGVEZWNyeXB0XG5cbi8vIHRoZSBsZWFzdCBJIGNhbiBkbyBpcyBtYWtlIGVycm9yIG1lc3NhZ2VzIGZvciB0aGUgcmVzdCBvZiB0aGUgbm9kZS5qcy9jcnlwdG8gYXBpLlxuLy8gO1tcbi8vICAgJ2NyZWF0ZUNyZWRlbnRpYWxzJ1xuLy8gXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4vLyAgIGV4cG9ydHNbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4vLyAgICAgdGhyb3cgbmV3IEVycm9yKFtcbi8vICAgICAgICdzb3JyeSwgJyArIG5hbWUgKyAnIGlzIG5vdCBpbXBsZW1lbnRlZCB5ZXQnLFxuLy8gICAgICAgJ3dlIGFjY2VwdCBwdWxsIHJlcXVlc3RzJyxcbi8vICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvLWJyb3dzZXJpZnkvY3J5cHRvLWJyb3dzZXJpZnknXG4vLyAgICAgXS5qb2luKCdcXG4nKSlcbi8vICAgfVxuLy8gfSlcblxudmFyIHJmID0gcmVxdWlyZSgncmFuZG9tZmlsbCcpXG5cbmV4cG9ydHMucmFuZG9tRmlsbCA9IHJmLnJhbmRvbUZpbGxcbmV4cG9ydHMucmFuZG9tRmlsbFN5bmMgPSByZi5yYW5kb21GaWxsU3luY1xuXG5leHBvcnRzLmNyZWF0ZUNyZWRlbnRpYWxzID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoW1xuICAgICdzb3JyeSwgY3JlYXRlQ3JlZGVudGlhbHMgaXMgbm90IGltcGxlbWVudGVkIHlldCcsXG4gICAgJ3dlIGFjY2VwdCBwdWxsIHJlcXVlc3RzJyxcbiAgICAnaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0by1icm93c2VyaWZ5L2NyeXB0by1icm93c2VyaWZ5J1xuICBdLmpvaW4oJ1xcbicpKVxufVxuXG5leHBvcnRzLmNvbnN0YW50cyA9IHtcbiAgJ0RIX0NIRUNLX1BfTk9UX1NBRkVfUFJJTUUnOiAyLFxuICAnREhfQ0hFQ0tfUF9OT1RfUFJJTUUnOiAxLFxuICAnREhfVU5BQkxFX1RPX0NIRUNLX0dFTkVSQVRPUic6IDQsXG4gICdESF9OT1RfU1VJVEFCTEVfR0VORVJBVE9SJzogOCxcbiAgJ05QTl9FTkFCTEVEJzogMSxcbiAgJ0FMUE5fRU5BQkxFRCc6IDEsXG4gICdSU0FfUEtDUzFfUEFERElORyc6IDEsXG4gICdSU0FfU1NMVjIzX1BBRERJTkcnOiAyLFxuICAnUlNBX05PX1BBRERJTkcnOiAzLFxuICAnUlNBX1BLQ1MxX09BRVBfUEFERElORyc6IDQsXG4gICdSU0FfWDkzMV9QQURESU5HJzogNSxcbiAgJ1JTQV9QS0NTMV9QU1NfUEFERElORyc6IDYsXG4gICdQT0lOVF9DT05WRVJTSU9OX0NPTVBSRVNTRUQnOiAyLFxuICAnUE9JTlRfQ09OVkVSU0lPTl9VTkNPTVBSRVNTRUQnOiA0LFxuICAnUE9JTlRfQ09OVkVSU0lPTl9IWUJSSUQnOiA2XG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCdidWZmZXInKSxcbiAgICBCdWZmZXIgPSBfcmVxdWlyZS5CdWZmZXI7XG5cbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCd1dGlsJyksXG4gICAgaW5zcGVjdCA9IF9yZXF1aXJlMi5pbnNwZWN0O1xuXG52YXIgY3VzdG9tID0gaW5zcGVjdCAmJiBpbnNwZWN0LmN1c3RvbSB8fCAnaW5zcGVjdCc7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBCdWZmZXIucHJvdG90eXBlLmNvcHkuY2FsbChzcmMsIHRhcmdldCwgb2Zmc2V0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQnVmZmVyTGlzdCwgW3tcbiAgICBrZXk6IFwicHVzaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwdXNoKHYpIHtcbiAgICAgIHZhciBlbnRyeSA9IHtcbiAgICAgICAgZGF0YTogdixcbiAgICAgICAgbmV4dDogbnVsbFxuICAgICAgfTtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICAgKyt0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidW5zaGlmdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnNoaWZ0KHYpIHtcbiAgICAgIHZhciBlbnRyeSA9IHtcbiAgICAgICAgZGF0YTogdixcbiAgICAgICAgbmV4dDogdGhpcy5oZWFkXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICAgIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICAgKyt0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2hpZnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgICAgLS10aGlzLmxlbmd0aDtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiam9pblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICAgICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG5cbiAgICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb25jYXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29uY2F0KG4pIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgd2hpbGUgKHApIHtcbiAgICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7XG4gICAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9IC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBvciBjaGFyYWN0ZXJzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG5cbiAgfSwge1xuICAgIGtleTogXCJjb25zdW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnN1bWUobiwgaGFzU3RyaW5ncykge1xuICAgICAgdmFyIHJldDtcblxuICAgICAgaWYgKG4gPCB0aGlzLmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgLy8gYHNsaWNlYCBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5ncy5cbiAgICAgICAgcmV0ID0gdGhpcy5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgICAgIHRoaXMuaGVhZC5kYXRhID0gdGhpcy5oZWFkLmRhdGEuc2xpY2Uobik7XG4gICAgICB9IGVsc2UgaWYgKG4gPT09IHRoaXMuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgICAgICAvLyBGaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2guXG4gICAgICAgIHJldCA9IHRoaXMuc2hpZnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlci5cbiAgICAgICAgcmV0ID0gaGFzU3RyaW5ncyA/IHRoaXMuX2dldFN0cmluZyhuKSA6IHRoaXMuX2dldEJ1ZmZlcihuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZmlyc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmlyc3QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5oZWFkLmRhdGE7XG4gICAgfSAvLyBDb25zdW1lcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBidWZmZXJlZCBkYXRhLlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2dldFN0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0U3RyaW5nKG4pIHtcbiAgICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgICAgdmFyIGMgPSAxO1xuICAgICAgdmFyIHJldCA9IHAuZGF0YTtcbiAgICAgIG4gLT0gcmV0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICAgICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICAgICAgbiAtPSBuYjtcblxuICAgICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgKytjO1xuICAgICAgICAgICAgaWYgKHAubmV4dCkgdGhpcy5oZWFkID0gcC5uZXh0O2Vsc2UgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gcDtcbiAgICAgICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICArK2M7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoIC09IGM7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0gLy8gQ29uc3VtZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG5cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0QnVmZmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRCdWZmZXIobikge1xuICAgICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTtcbiAgICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgICAgdmFyIGMgPSAxO1xuICAgICAgcC5kYXRhLmNvcHkocmV0KTtcbiAgICAgIG4gLT0gcC5kYXRhLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICAgICAgdmFyIG5iID0gbiA+IGJ1Zi5sZW5ndGggPyBidWYubGVuZ3RoIDogbjtcbiAgICAgICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgICAgICBuIC09IG5iO1xuXG4gICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAocC5uZXh0KSB0aGlzLmhlYWQgPSBwLm5leHQ7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhlYWQgPSBwO1xuICAgICAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgICsrYztcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggLT0gYztcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSAvLyBNYWtlIHN1cmUgdGhlIGxpbmtlZCBsaXN0IG9ubHkgc2hvd3MgdGhlIG1pbmltYWwgbmVjZXNzYXJ5IGluZm9ybWF0aW9uLlxuXG4gIH0sIHtcbiAgICBrZXk6IGN1c3RvbSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoXywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIGluc3BlY3QodGhpcywgX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucywge1xuICAgICAgICAvLyBPbmx5IGluc3BlY3Qgb25lIGxldmVsLlxuICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgLy8gSXQgc2hvdWxkIG5vdCByZWN1cnNlLlxuICAgICAgICBjdXN0b21JbnNwZWN0OiBmYWxzZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCdWZmZXJMaXN0O1xufSgpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9PYmplY3Qkc2V0UHJvdG90eXBlTztcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGZpbmlzaGVkID0gcmVxdWlyZSgnLi9lbmQtb2Ytc3RyZWFtJyk7XG5cbnZhciBrTGFzdFJlc29sdmUgPSBTeW1ib2woJ2xhc3RSZXNvbHZlJyk7XG52YXIga0xhc3RSZWplY3QgPSBTeW1ib2woJ2xhc3RSZWplY3QnKTtcbnZhciBrRXJyb3IgPSBTeW1ib2woJ2Vycm9yJyk7XG52YXIga0VuZGVkID0gU3ltYm9sKCdlbmRlZCcpO1xudmFyIGtMYXN0UHJvbWlzZSA9IFN5bWJvbCgnbGFzdFByb21pc2UnKTtcbnZhciBrSGFuZGxlUHJvbWlzZSA9IFN5bWJvbCgnaGFuZGxlUHJvbWlzZScpO1xudmFyIGtTdHJlYW0gPSBTeW1ib2woJ3N0cmVhbScpO1xuXG5mdW5jdGlvbiBjcmVhdGVJdGVyUmVzdWx0KHZhbHVlLCBkb25lKSB7XG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGRvbmU6IGRvbmVcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVhZEFuZFJlc29sdmUoaXRlcikge1xuICB2YXIgcmVzb2x2ZSA9IGl0ZXJba0xhc3RSZXNvbHZlXTtcblxuICBpZiAocmVzb2x2ZSAhPT0gbnVsbCkge1xuICAgIHZhciBkYXRhID0gaXRlcltrU3RyZWFtXS5yZWFkKCk7IC8vIHdlIGRlZmVyIGlmIGRhdGEgaXMgbnVsbFxuICAgIC8vIHdlIGNhbiBiZSBleHBlY3RpbmcgZWl0aGVyICdlbmQnIG9yXG4gICAgLy8gJ2Vycm9yJ1xuXG4gICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgIGl0ZXJba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICBpdGVyW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgaXRlcltrTGFzdFJlamVjdF0gPSBudWxsO1xuICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uUmVhZGFibGUoaXRlcikge1xuICAvLyB3ZSB3YWl0IGZvciB0aGUgbmV4dCB0aWNrLCBiZWNhdXNlIGl0IG1pZ2h0XG4gIC8vIGVtaXQgYW4gZXJyb3Igd2l0aCBwcm9jZXNzLm5leHRUaWNrXG4gIHByb2Nlc3MubmV4dFRpY2socmVhZEFuZFJlc29sdmUsIGl0ZXIpO1xufVxuXG5mdW5jdGlvbiB3cmFwRm9yTmV4dChsYXN0UHJvbWlzZSwgaXRlcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxhc3RQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGl0ZXJba0VuZGVkXSkge1xuICAgICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaXRlcltrSGFuZGxlUHJvbWlzZV0ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9LCByZWplY3QpO1xuICB9O1xufVxuXG52YXIgQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihmdW5jdGlvbiAoKSB7fSk7XG52YXIgUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlID0gT2JqZWN0LnNldFByb3RvdHlwZU9mKChfT2JqZWN0JHNldFByb3RvdHlwZU8gPSB7XG4gIGdldCBzdHJlYW0oKSB7XG4gICAgcmV0dXJuIHRoaXNba1N0cmVhbV07XG4gIH0sXG5cbiAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gaWYgd2UgaGF2ZSBkZXRlY3RlZCBhbiBlcnJvciBpbiB0aGUgbWVhbndoaWxlXG4gICAgLy8gcmVqZWN0IHN0cmFpZ2h0IGF3YXlcbiAgICB2YXIgZXJyb3IgPSB0aGlzW2tFcnJvcl07XG5cbiAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXNba0VuZGVkXSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzW2tTdHJlYW1dLmRlc3Ryb3llZCkge1xuICAgICAgLy8gV2UgbmVlZCB0byBkZWZlciB2aWEgbmV4dFRpY2sgYmVjYXVzZSBpZiAuZGVzdHJveShlcnIpIGlzXG4gICAgICAvLyBjYWxsZWQsIHRoZSBlcnJvciB3aWxsIGJlIGVtaXR0ZWQgdmlhIG5leHRUaWNrLCBhbmRcbiAgICAgIC8vIHdlIGNhbm5vdCBndWFyYW50ZWUgdGhhdCB0aGVyZSBpcyBubyBlcnJvciBsaW5nZXJpbmcgYXJvdW5kXG4gICAgICAvLyB3YWl0aW5nIHRvIGJlIGVtaXR0ZWQuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXNba0Vycm9yXSkge1xuICAgICAgICAgICAgcmVqZWN0KF90aGlzW2tFcnJvcl0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gLy8gaWYgd2UgaGF2ZSBtdWx0aXBsZSBuZXh0KCkgY2FsbHNcbiAgICAvLyB3ZSB3aWxsIHdhaXQgZm9yIHRoZSBwcmV2aW91cyBQcm9taXNlIHRvIGZpbmlzaFxuICAgIC8vIHRoaXMgbG9naWMgaXMgb3B0aW1pemVkIHRvIHN1cHBvcnQgZm9yIGF3YWl0IGxvb3BzLFxuICAgIC8vIHdoZXJlIG5leHQoKSBpcyBvbmx5IGNhbGxlZCBvbmNlIGF0IGEgdGltZVxuXG5cbiAgICB2YXIgbGFzdFByb21pc2UgPSB0aGlzW2tMYXN0UHJvbWlzZV07XG4gICAgdmFyIHByb21pc2U7XG5cbiAgICBpZiAobGFzdFByb21pc2UpIHtcbiAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSh3cmFwRm9yTmV4dChsYXN0UHJvbWlzZSwgdGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmYXN0IHBhdGggbmVlZGVkIHRvIHN1cHBvcnQgbXVsdGlwbGUgdGhpcy5wdXNoKClcbiAgICAgIC8vIHdpdGhvdXQgdHJpZ2dlcmluZyB0aGUgbmV4dCgpIHF1ZXVlXG4gICAgICB2YXIgZGF0YSA9IHRoaXNba1N0cmVhbV0ucmVhZCgpO1xuXG4gICAgICBpZiAoZGF0YSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQoZGF0YSwgZmFsc2UpKTtcbiAgICAgIH1cblxuICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHRoaXNba0hhbmRsZVByb21pc2VdKTtcbiAgICB9XG5cbiAgICB0aGlzW2tMYXN0UHJvbWlzZV0gPSBwcm9taXNlO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG59LCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRzZXRQcm90b3R5cGVPLCBTeW1ib2wuYXN5bmNJdGVyYXRvciwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRzZXRQcm90b3R5cGVPLCBcInJldHVyblwiLCBmdW5jdGlvbiBfcmV0dXJuKCkge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAvLyBkZXN0cm95KGVyciwgY2IpIGlzIGEgcHJpdmF0ZSBBUElcbiAgLy8gd2UgY2FuIGd1YXJhbnRlZSB3ZSBoYXZlIHRoYXQgaGVyZSwgYmVjYXVzZSB3ZSBjb250cm9sIHRoZVxuICAvLyBSZWFkYWJsZSBjbGFzcyB0aGlzIGlzIGF0dGFjaGVkIHRvXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgX3RoaXMyW2tTdHJlYW1dLmRlc3Ryb3kobnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgfSk7XG4gIH0pO1xufSksIF9PYmplY3Qkc2V0UHJvdG90eXBlTyksIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUpO1xuXG52YXIgY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yID0gZnVuY3Rpb24gY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHN0cmVhbSkge1xuICB2YXIgX09iamVjdCRjcmVhdGU7XG5cbiAgdmFyIGl0ZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JQcm90b3R5cGUsIChfT2JqZWN0JGNyZWF0ZSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtTdHJlYW0sIHtcbiAgICB2YWx1ZTogc3RyZWFtLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtMYXN0UmVzb2x2ZSwge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtMYXN0UmVqZWN0LCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0Vycm9yLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0VuZGVkLCB7XG4gICAgdmFsdWU6IHN0cmVhbS5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtIYW5kbGVQcm9taXNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGRhdGEgPSBpdGVyYXRvcltrU3RyZWFtXS5yZWFkKCk7XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gcmVzb2x2ZTtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gcmVqZWN0O1xuICAgICAgfVxuICAgIH0sXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9PYmplY3QkY3JlYXRlKSk7XG4gIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICBmaW5pc2hlZChzdHJlYW0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyICYmIGVyci5jb2RlICE9PSAnRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UnKSB7XG4gICAgICB2YXIgcmVqZWN0ID0gaXRlcmF0b3Jba0xhc3RSZWplY3RdOyAvLyByZWplY3QgaWYgd2UgYXJlIHdhaXRpbmcgZm9yIGRhdGEgaW4gdGhlIFByb21pc2VcbiAgICAgIC8vIHJldHVybmVkIGJ5IG5leHQoKSBhbmQgc3RvcmUgdGhlIGVycm9yXG5cbiAgICAgIGlmIChyZWplY3QgIT09IG51bGwpIHtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlamVjdF0gPSBudWxsO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cblxuICAgICAgaXRlcmF0b3Jba0Vycm9yXSA9IGVycjtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVzb2x2ZSA9IGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV07XG5cbiAgICBpZiAocmVzb2x2ZSAhPT0gbnVsbCkge1xuICAgICAgaXRlcmF0b3Jba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICByZXNvbHZlKGNyZWF0ZUl0ZXJSZXN1bHQodW5kZWZpbmVkLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgaXRlcmF0b3Jba0VuZGVkXSA9IHRydWU7XG4gIH0pO1xuICBzdHJlYW0ub24oJ3JlYWRhYmxlJywgb25SZWFkYWJsZS5iaW5kKG51bGwsIGl0ZXJhdG9yKSk7XG4gIHJldHVybiBpdGVyYXRvcjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWRhYmxlLmZyb20gaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnJvd3NlcicpXG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxucmVxdWlyZSgnaW5oZXJpdHMnKShQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59OyIsIi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYWZpbnRvc2gvcHVtcCB3aXRoXG4vLyBwZXJtaXNzaW9uIGZyb20gdGhlIGF1dGhvciwgTWF0aGlhcyBCdXVzIChAbWFmaW50b3NoKS5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVvcztcblxuZnVuY3Rpb24gb25jZShjYWxsYmFjaykge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkgcmV0dXJuO1xuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgY2FsbGJhY2suYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG52YXIgX3JlcXVpcmUkY29kZXMgPSByZXF1aXJlKCcuLi8uLi8uLi9lcnJvcnMnKS5jb2RlcyxcbiAgICBFUlJfTUlTU0lOR19BUkdTID0gX3JlcXVpcmUkY29kZXMuRVJSX01JU1NJTkdfQVJHUyxcbiAgICBFUlJfU1RSRUFNX0RFU1RST1lFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fREVTVFJPWUVEO1xuXG5mdW5jdGlvbiBub29wKGVycikge1xuICAvLyBSZXRocm93IHRoZSBlcnJvciBpZiBpdCBleGlzdHMgdG8gYXZvaWQgc3dhbGxvd2luZyBpdFxuICBpZiAoZXJyKSB0aHJvdyBlcnI7XG59XG5cbmZ1bmN0aW9uIGlzUmVxdWVzdChzdHJlYW0pIHtcbiAgcmV0dXJuIHN0cmVhbS5zZXRIZWFkZXIgJiYgdHlwZW9mIHN0cmVhbS5hYm9ydCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gZGVzdHJveWVyKHN0cmVhbSwgcmVhZGluZywgd3JpdGluZywgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sgPSBvbmNlKGNhbGxiYWNrKTtcbiAgdmFyIGNsb3NlZCA9IGZhbHNlO1xuICBzdHJlYW0ub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIGNsb3NlZCA9IHRydWU7XG4gIH0pO1xuICBpZiAoZW9zID09PSB1bmRlZmluZWQpIGVvcyA9IHJlcXVpcmUoJy4vZW5kLW9mLXN0cmVhbScpO1xuICBlb3Moc3RyZWFtLCB7XG4gICAgcmVhZGFibGU6IHJlYWRpbmcsXG4gICAgd3JpdGFibGU6IHdyaXRpbmdcbiAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgIGNsb3NlZCA9IHRydWU7XG4gICAgY2FsbGJhY2soKTtcbiAgfSk7XG4gIHZhciBkZXN0cm95ZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoY2xvc2VkKSByZXR1cm47XG4gICAgaWYgKGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGRlc3Ryb3llZCA9IHRydWU7IC8vIHJlcXVlc3QuZGVzdHJveSBqdXN0IGRvIC5lbmQgLSAuYWJvcnQgaXMgd2hhdCB3ZSB3YW50XG5cbiAgICBpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHJldHVybiBzdHJlYW0uYWJvcnQoKTtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gc3RyZWFtLmRlc3Ryb3koKTtcbiAgICBjYWxsYmFjayhlcnIgfHwgbmV3IEVSUl9TVFJFQU1fREVTVFJPWUVEKCdwaXBlJykpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjYWxsKGZuKSB7XG4gIGZuKCk7XG59XG5cbmZ1bmN0aW9uIHBpcGUoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGZyb20ucGlwZSh0byk7XG59XG5cbmZ1bmN0aW9uIHBvcENhbGxiYWNrKHN0cmVhbXMpIHtcbiAgaWYgKCFzdHJlYW1zLmxlbmd0aCkgcmV0dXJuIG5vb3A7XG4gIGlmICh0eXBlb2Ygc3RyZWFtc1tzdHJlYW1zLmxlbmd0aCAtIDFdICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbm9vcDtcbiAgcmV0dXJuIHN0cmVhbXMucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHBpcGVsaW5lKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc3RyZWFtcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBzdHJlYW1zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGNhbGxiYWNrID0gcG9wQ2FsbGJhY2soc3RyZWFtcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0cmVhbXNbMF0pKSBzdHJlYW1zID0gc3RyZWFtc1swXTtcblxuICBpZiAoc3RyZWFtcy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ3N0cmVhbXMnKTtcbiAgfVxuXG4gIHZhciBlcnJvcjtcbiAgdmFyIGRlc3Ryb3lzID0gc3RyZWFtcy5tYXAoZnVuY3Rpb24gKHN0cmVhbSwgaSkge1xuICAgIHZhciByZWFkaW5nID0gaSA8IHN0cmVhbXMubGVuZ3RoIC0gMTtcbiAgICB2YXIgd3JpdGluZyA9IGkgPiAwO1xuICAgIHJldHVybiBkZXN0cm95ZXIoc3RyZWFtLCByZWFkaW5nLCB3cml0aW5nLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiAgICAgIGlmIChlcnIpIGRlc3Ryb3lzLmZvckVhY2goY2FsbCk7XG4gICAgICBpZiAocmVhZGluZykgcmV0dXJuO1xuICAgICAgZGVzdHJveXMuZm9yRWFjaChjYWxsKTtcbiAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBzdHJlYW1zLnJlZHVjZShwaXBlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwaXBlbGluZTsiLCIvKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0wLCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIFBVQiAxODAtMVxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBkZXJpdmVkIGZyb20gc2hhMS5qcyBvZiB0aGUgc2FtZSByZXBvc2l0b3J5LlxuICogVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBTSEEtMCBhbmQgU0hBLTEgaXMganVzdCBhIGJpdHdpc2Ugcm90YXRlIGxlZnRcbiAqIG9wZXJhdGlvbiB3YXMgYWRkZWQuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjIHwgMCwgMHhjYTYyYzFkNiB8IDBcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoODApXG5cbmZ1bmN0aW9uIFNoYSAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhLCBIYXNoKVxuXG5TaGEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA4MDsgKytpKSBXW2ldID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XVxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7ICsraikge1xuICAgIHZhciBzID0gfn4oaiAvIDIwKVxuICAgIHZhciB0ID0gKHJvdGw1KGEpICsgZnQocywgYiwgYywgZCkgKyBlICsgV1tqXSArIEtbc10pIHwgMFxuXG4gICAgZSA9IGRcbiAgICBkID0gY1xuICAgIGMgPSByb3RsMzAoYilcbiAgICBiID0gYVxuICAgIGEgPSB0XG4gIH1cblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG59XG5cblNoYS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhXG4iLCIvKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0xLCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIFBVQiAxODAtMVxuICogVmVyc2lvbiAyLjFhIENvcHlyaWdodCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDAyLlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBMaWNlbnNlXG4gKiBTZWUgaHR0cDovL3BhamhvbWUub3JnLnVrL2NyeXB0L21kNSBmb3IgZGV0YWlscy5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMgfCAwLCAweGNhNjJjMWQ2IHwgMFxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhMSAoKSB7XG4gIHRoaXMuaW5pdCgpXG4gIHRoaXMuX3cgPSBXXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMSwgSGFzaClcblxuU2hhMS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiByb3RsMSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDEpIHwgKG51bSA+Pj4gMzEpXG59XG5cbmZ1bmN0aW9uIHJvdGw1IChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgNSkgfCAobnVtID4+PiAyNylcbn1cblxuZnVuY3Rpb24gcm90bDMwIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMzApIHwgKG51bSA+Pj4gMilcbn1cblxuZnVuY3Rpb24gZnQgKHMsIGIsIGMsIGQpIHtcbiAgaWYgKHMgPT09IDApIHJldHVybiAoYiAmIGMpIHwgKCh+YikgJiBkKVxuICBpZiAocyA9PT0gMikgcmV0dXJuIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKVxuICByZXR1cm4gYiBeIGMgXiBkXG59XG5cblNoYTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDgwOyArK2kpIFdbaV0gPSByb3RsMShXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdKVxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7ICsraikge1xuICAgIHZhciBzID0gfn4oaiAvIDIwKVxuICAgIHZhciB0ID0gKHJvdGw1KGEpICsgZnQocywgYiwgYywgZCkgKyBlICsgV1tqXSArIEtbc10pIHwgMFxuXG4gICAgZSA9IGRcbiAgICBkID0gY1xuICAgIGMgPSByb3RsMzAoYilcbiAgICBiID0gYVxuICAgIGEgPSB0XG4gIH1cblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG59XG5cblNoYTEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hIHwgMCwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiB8IDAsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MgfCAwLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kIHwgMCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UgfCAwLCAxNilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTFcbiIsIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEyNTYnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBXID0gbmV3IEFycmF5KDY0KVxuXG5mdW5jdGlvbiBTaGEyMjQgKCkge1xuICB0aGlzLmluaXQoKVxuXG4gIHRoaXMuX3cgPSBXIC8vIG5ldyBBcnJheSg2NClcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEyMjQsIFNoYTI1NilcblxuU2hhMjI0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHhjMTA1OWVkOFxuICB0aGlzLl9iID0gMHgzNjdjZDUwN1xuICB0aGlzLl9jID0gMHgzMDcwZGQxN1xuICB0aGlzLl9kID0gMHhmNzBlNTkzOVxuICB0aGlzLl9lID0gMHhmZmMwMGIzMVxuICB0aGlzLl9mID0gMHg2ODU4MTUxMVxuICB0aGlzLl9nID0gMHg2NGY5OGZhN1xuICB0aGlzLl9oID0gMHhiZWZhNGZhNFxuXG4gIHJldHVybiB0aGlzXG59XG5cblNoYTIyNC5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDI4KVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lLCAxNilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZiwgMjApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2csIDI0KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMjI0XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBXID0gbmV3IEFycmF5KDE2MClcblxuZnVuY3Rpb24gU2hhMzg0ICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpXG59XG5cbmluaGVyaXRzKFNoYTM4NCwgU0hBNTEyKVxuXG5TaGEzODQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2FoID0gMHhjYmJiOWQ1ZFxuICB0aGlzLl9iaCA9IDB4NjI5YTI5MmFcbiAgdGhpcy5fY2ggPSAweDkxNTkwMTVhXG4gIHRoaXMuX2RoID0gMHgxNTJmZWNkOFxuICB0aGlzLl9laCA9IDB4NjczMzI2NjdcbiAgdGhpcy5fZmggPSAweDhlYjQ0YTg3XG4gIHRoaXMuX2doID0gMHhkYjBjMmUwZFxuICB0aGlzLl9oaCA9IDB4NDdiNTQ4MWRcblxuICB0aGlzLl9hbCA9IDB4YzEwNTllZDhcbiAgdGhpcy5fYmwgPSAweDM2N2NkNTA3XG4gIHRoaXMuX2NsID0gMHgzMDcwZGQxN1xuICB0aGlzLl9kbCA9IDB4ZjcwZTU5MzlcbiAgdGhpcy5fZWwgPSAweGZmYzAwYjMxXG4gIHRoaXMuX2ZsID0gMHg2ODU4MTUxMVxuICB0aGlzLl9nbCA9IDB4NjRmOThmYTdcbiAgdGhpcy5faGwgPSAweGJlZmE0ZmE0XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMzg0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoNDgpXG5cbiAgZnVuY3Rpb24gd3JpdGVJbnQ2NEJFIChoLCBsLCBvZmZzZXQpIHtcbiAgICBILndyaXRlSW50MzJCRShoLCBvZmZzZXQpXG4gICAgSC53cml0ZUludDMyQkUobCwgb2Zmc2V0ICsgNClcbiAgfVxuXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9haCwgdGhpcy5fYWwsIDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9iaCwgdGhpcy5fYmwsIDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9jaCwgdGhpcy5fY2wsIDE2KVxuICB3cml0ZUludDY0QkUodGhpcy5fZGgsIHRoaXMuX2RsLCAyNClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2VoLCB0aGlzLl9lbCwgMzIpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9maCwgdGhpcy5fZmwsIDQwKVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMzg0XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XG5TdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTtcblN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7XG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5cblxuLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cblxuZnVuY3Rpb24gU3RyZWFtKCkge1xuICBFRS5jYWxsKHRoaXMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufSIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5UcmFuc2Zvcm1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlBhc3NUaHJvdWdoXG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcblxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcbnZhciBibG9ja3NpemUgPSA2NFxuXG5mdW5jdGlvbiBIbWFjIChhbGcsIGtleSkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuXG4gIHRoaXMuX2FsZyA9IGFsZ1xuICB0aGlzLl9rZXkgPSBrZXlcblxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IGFsZyhrZXkpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IHRoaXMuX2lwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuICB2YXIgb3BhZCA9IHRoaXMuX29wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tzaXplOyBpKyspIHtcbiAgICBpcGFkW2ldID0ga2V5W2ldIF4gMHgzNlxuICAgIG9wYWRbaV0gPSBrZXlbaV0gXiAweDVDXG4gIH1cblxuICB0aGlzLl9oYXNoID0gW2lwYWRdXG59XG5cbmluaGVyaXRzKEhtYWMsIEJhc2UpXG5cbkhtYWMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnB1c2goZGF0YSlcbn1cblxuSG1hYy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaCA9IHRoaXMuX2FsZyhCdWZmZXIuY29uY2F0KHRoaXMuX2hhc2gpKVxuICByZXR1cm4gdGhpcy5fYWxnKEJ1ZmZlci5jb25jYXQoW3RoaXMuX29wYWQsIGhdKSlcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hY1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Jyb3dzZXIvYWxnb3JpdGhtcy5qc29uJylcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgY2hlY2tQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9wcmVjb25kaXRpb24nKVxudmFyIGRlZmF1bHRFbmNvZGluZyA9IHJlcXVpcmUoJy4vZGVmYXVsdC1lbmNvZGluZycpXG52YXIgc3luYyA9IHJlcXVpcmUoJy4vc3luYycpXG52YXIgdG9CdWZmZXIgPSByZXF1aXJlKCcuL3RvLWJ1ZmZlcicpXG5cbnZhciBaRVJPX0JVRlxudmFyIHN1YnRsZSA9IGdsb2JhbC5jcnlwdG8gJiYgZ2xvYmFsLmNyeXB0by5zdWJ0bGVcbnZhciB0b0Jyb3dzZXIgPSB7XG4gIHNoYTogJ1NIQS0xJyxcbiAgJ3NoYS0xJzogJ1NIQS0xJyxcbiAgc2hhMTogJ1NIQS0xJyxcbiAgc2hhMjU2OiAnU0hBLTI1NicsXG4gICdzaGEtMjU2JzogJ1NIQS0yNTYnLFxuICBzaGEzODQ6ICdTSEEtMzg0JyxcbiAgJ3NoYS0zODQnOiAnU0hBLTM4NCcsXG4gICdzaGEtNTEyJzogJ1NIQS01MTInLFxuICBzaGE1MTI6ICdTSEEtNTEyJ1xufVxudmFyIGNoZWNrcyA9IFtdXG5mdW5jdGlvbiBjaGVja05hdGl2ZSAoYWxnbykge1xuICBpZiAoZ2xvYmFsLnByb2Nlc3MgJiYgIWdsb2JhbC5wcm9jZXNzLmJyb3dzZXIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKVxuICB9XG4gIGlmICghc3VidGxlIHx8ICFzdWJ0bGUuaW1wb3J0S2V5IHx8ICFzdWJ0bGUuZGVyaXZlQml0cykge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpXG4gIH1cbiAgaWYgKGNoZWNrc1thbGdvXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNoZWNrc1thbGdvXVxuICB9XG4gIFpFUk9fQlVGID0gWkVST19CVUYgfHwgQnVmZmVyLmFsbG9jKDgpXG4gIHZhciBwcm9tID0gYnJvd3NlclBia2RmMihaRVJPX0JVRiwgWkVST19CVUYsIDEwLCAxMjgsIGFsZ28pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KVxuICBjaGVja3NbYWxnb10gPSBwcm9tXG4gIHJldHVybiBwcm9tXG59XG5cbmZ1bmN0aW9uIGJyb3dzZXJQYmtkZjIgKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBsZW5ndGgsIGFsZ28pIHtcbiAgcmV0dXJuIHN1YnRsZS5pbXBvcnRLZXkoXG4gICAgJ3JhdycsIHBhc3N3b3JkLCB7IG5hbWU6ICdQQktERjInIH0sIGZhbHNlLCBbJ2Rlcml2ZUJpdHMnXVxuICApLnRoZW4oZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzdWJ0bGUuZGVyaXZlQml0cyh7XG4gICAgICBuYW1lOiAnUEJLREYyJyxcbiAgICAgIHNhbHQ6IHNhbHQsXG4gICAgICBpdGVyYXRpb25zOiBpdGVyYXRpb25zLFxuICAgICAgaGFzaDoge1xuICAgICAgICBuYW1lOiBhbGdvXG4gICAgICB9XG4gICAgfSwga2V5LCBsZW5ndGggPDwgMylcbiAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHJlcylcbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UgKHByb21pc2UsIGNhbGxiYWNrKSB7XG4gIHByb21pc2UudGhlbihmdW5jdGlvbiAob3V0KSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCBvdXQpXG4gICAgfSlcbiAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKGUpXG4gICAgfSlcbiAgfSlcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBkaWdlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGRpZ2VzdFxuICAgIGRpZ2VzdCA9IHVuZGVmaW5lZFxuICB9XG5cbiAgZGlnZXN0ID0gZGlnZXN0IHx8ICdzaGExJ1xuICB2YXIgYWxnbyA9IHRvQnJvd3NlcltkaWdlc3QudG9Mb3dlckNhc2UoKV1cblxuICBpZiAoIWFsZ28gfHwgdHlwZW9mIGdsb2JhbC5Qcm9taXNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG91dFxuICAgICAgdHJ5IHtcbiAgICAgICAgb3V0ID0gc3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlKVxuICAgICAgfVxuICAgICAgY2FsbGJhY2sobnVsbCwgb3V0KVxuICAgIH0pXG4gIH1cblxuICBjaGVja1BhcmFtZXRlcnMoaXRlcmF0aW9ucywga2V5bGVuKVxuICBwYXNzd29yZCA9IHRvQnVmZmVyKHBhc3N3b3JkLCBkZWZhdWx0RW5jb2RpbmcsICdQYXNzd29yZCcpXG4gIHNhbHQgPSB0b0J1ZmZlcihzYWx0LCBkZWZhdWx0RW5jb2RpbmcsICdTYWx0JylcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IEVycm9yKCdObyBjYWxsYmFjayBwcm92aWRlZCB0byBwYmtkZjInKVxuXG4gIHJlc29sdmVQcm9taXNlKGNoZWNrTmF0aXZlKGFsZ28pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcbiAgICBpZiAocmVzcCkgcmV0dXJuIGJyb3dzZXJQYmtkZjIocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgYWxnbylcblxuICAgIHJldHVybiBzeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdClcbiAgfSksIGNhbGxiYWNrKVxufVxuIiwidmFyIERFUyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktZGVzJylcbnZhciBhZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcy9icm93c2VyJylcbnZhciBhZXNNb2RlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzL21vZGVzJylcbnZhciBkZXNNb2RlcyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktZGVzL21vZGVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcblxuICB2YXIga2V5TGVuLCBpdkxlblxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gYWVzTW9kZXNbc3VpdGVdLmtleVxuICAgIGl2TGVuID0gYWVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gZGVzTW9kZXNbc3VpdGVdLmtleSAqIDhcbiAgICBpdkxlbiA9IGRlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBrZXlMZW4sIGl2TGVuKVxuICByZXR1cm4gY3JlYXRlQ2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuXG4gIHZhciBrZXlMZW4sIGl2TGVuXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0ua2V5XG4gICAgaXZMZW4gPSBhZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICBrZXlMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0ua2V5ICogOFxuICAgIGl2TGVuID0gZGVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbiAgfVxuXG4gIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGtleUxlbiwgaXZMZW4pXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyaXYgKHN1aXRlLCBrZXksIGl2KSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSByZXR1cm4gYWVzLmNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXksIGl2KVxuICBpZiAoZGVzTW9kZXNbc3VpdGVdKSByZXR1cm4gbmV3IERFUyh7IGtleToga2V5LCBpdjogaXYsIG1vZGU6IHN1aXRlIH0pXG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXJpdiAoc3VpdGUsIGtleSwgaXYpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHJldHVybiBhZXMuY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5LCBpdilcbiAgaWYgKGRlc01vZGVzW3N1aXRlXSkgcmV0dXJuIG5ldyBERVMoeyBrZXk6IGtleSwgaXY6IGl2LCBtb2RlOiBzdWl0ZSwgZGVjcnlwdDogdHJ1ZSB9KVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG59XG5cbmZ1bmN0aW9uIGdldENpcGhlcnMgKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoZGVzTW9kZXMpLmNvbmNhdChhZXMuZ2V0Q2lwaGVycygpKVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY3JlYXRlQ2lwaGVyXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gZXhwb3J0cy5DaXBoZXJpdiA9IGNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gZXhwb3J0cy5EZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBleHBvcnRzLkRlY2lwaGVyaXYgPSBjcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmxpc3RDaXBoZXJzID0gZXhwb3J0cy5nZXRDaXBoZXJzID0gZ2V0Q2lwaGVyc1xuIiwidmFyIENpcGhlckJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgZGVzID0gcmVxdWlyZSgnZGVzLmpzJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgbW9kZXMgPSB7XG4gICdkZXMtZWRlMy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZTMnOiBkZXMuRURFLFxuICAnZGVzLWVkZS1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZSc6IGRlcy5FREUsXG4gICdkZXMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuREVTKSxcbiAgJ2Rlcy1lY2InOiBkZXMuREVTXG59XG5tb2Rlcy5kZXMgPSBtb2Rlc1snZGVzLWNiYyddXG5tb2Rlcy5kZXMzID0gbW9kZXNbJ2Rlcy1lZGUzLWNiYyddXG5tb2R1bGUuZXhwb3J0cyA9IERFU1xuaW5oZXJpdHMoREVTLCBDaXBoZXJCYXNlKVxuZnVuY3Rpb24gREVTIChvcHRzKSB7XG4gIENpcGhlckJhc2UuY2FsbCh0aGlzKVxuICB2YXIgbW9kZU5hbWUgPSBvcHRzLm1vZGUudG9Mb3dlckNhc2UoKVxuICB2YXIgbW9kZSA9IG1vZGVzW21vZGVOYW1lXVxuICB2YXIgdHlwZVxuICBpZiAob3B0cy5kZWNyeXB0KSB7XG4gICAgdHlwZSA9ICdkZWNyeXB0J1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSAnZW5jcnlwdCdcbiAgfVxuICB2YXIga2V5ID0gb3B0cy5rZXlcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoa2V5KSkge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuICBpZiAobW9kZU5hbWUgPT09ICdkZXMtZWRlJyB8fCBtb2RlTmFtZSA9PT0gJ2Rlcy1lZGUtY2JjJykge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwga2V5LnNsaWNlKDAsIDgpXSlcbiAgfVxuICB2YXIgaXYgPSBvcHRzLml2XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGl2KSkge1xuICAgIGl2ID0gQnVmZmVyLmZyb20oaXYpXG4gIH1cbiAgdGhpcy5fZGVzID0gbW9kZS5jcmVhdGUoe1xuICAgIGtleToga2V5LFxuICAgIGl2OiBpdixcbiAgICB0eXBlOiB0eXBlXG4gIH0pXG59XG5ERVMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy5fZGVzLnVwZGF0ZShkYXRhKSlcbn1cbkRFUy5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gQnVmZmVyLmZyb20odGhpcy5fZGVzLmZpbmFsKCkpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMudXRpbHMgPSByZXF1aXJlKCcuL2Rlcy91dGlscycpO1xuZXhwb3J0cy5DaXBoZXIgPSByZXF1aXJlKCcuL2Rlcy9jaXBoZXInKTtcbmV4cG9ydHMuREVTID0gcmVxdWlyZSgnLi9kZXMvZGVzJyk7XG5leHBvcnRzLkNCQyA9IHJlcXVpcmUoJy4vZGVzL2NiYycpO1xuZXhwb3J0cy5FREUgPSByZXF1aXJlKCcuL2Rlcy9lZGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBwcm90byA9IHt9O1xuXG5mdW5jdGlvbiBDQkNTdGF0ZShpdikge1xuICBhc3NlcnQuZXF1YWwoaXYubGVuZ3RoLCA4LCAnSW52YWxpZCBJViBsZW5ndGgnKTtcblxuICB0aGlzLml2ID0gbmV3IEFycmF5KDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXYubGVuZ3RoOyBpKyspXG4gICAgdGhpcy5pdltpXSA9IGl2W2ldO1xufVxuXG5mdW5jdGlvbiBpbnN0YW50aWF0ZShCYXNlKSB7XG4gIGZ1bmN0aW9uIENCQyhvcHRpb25zKSB7XG4gICAgQmFzZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuX2NiY0luaXQoKTtcbiAgfVxuICBpbmhlcml0cyhDQkMsIEJhc2UpO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvdG8pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBDQkMucHJvdG90eXBlW2tleV0gPSBwcm90b1trZXldO1xuICB9XG5cbiAgQ0JDLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBDQkMob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIENCQztcbn1cblxuZXhwb3J0cy5pbnN0YW50aWF0ZSA9IGluc3RhbnRpYXRlO1xuXG5wcm90by5fY2JjSW5pdCA9IGZ1bmN0aW9uIF9jYmNJbml0KCkge1xuICB2YXIgc3RhdGUgPSBuZXcgQ0JDU3RhdGUodGhpcy5vcHRpb25zLml2KTtcbiAgdGhpcy5fY2JjU3RhdGUgPSBzdGF0ZTtcbn07XG5cbnByb3RvLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2NiY1N0YXRlO1xuICB2YXIgc3VwZXJQcm90byA9IHRoaXMuY29uc3RydWN0b3Iuc3VwZXJfLnByb3RvdHlwZTtcblxuICB2YXIgaXYgPSBzdGF0ZS5pdjtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gXj0gaW5wW2luT2ZmICsgaV07XG5cbiAgICBzdXBlclByb3RvLl91cGRhdGUuY2FsbCh0aGlzLCBpdiwgMCwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBvdXRbb3V0T2ZmICsgaV07XG4gIH0gZWxzZSB7XG4gICAgc3VwZXJQcm90by5fdXBkYXRlLmNhbGwodGhpcywgaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgb3V0W291dE9mZiArIGldIF49IGl2W2ldO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBpbnBbaW5PZmYgKyBpXTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBDaXBoZXIgPSByZXF1aXJlKCcuL2NpcGhlcicpO1xudmFyIERFUyA9IHJlcXVpcmUoJy4vZGVzJyk7XG5cbmZ1bmN0aW9uIEVERVN0YXRlKHR5cGUsIGtleSkge1xuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgMjQsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIgazEgPSBrZXkuc2xpY2UoMCwgOCk7XG4gIHZhciBrMiA9IGtleS5zbGljZSg4LCAxNik7XG4gIHZhciBrMyA9IGtleS5zbGljZSgxNiwgMjQpO1xuXG4gIGlmICh0eXBlID09PSAnZW5jcnlwdCcpIHtcbiAgICB0aGlzLmNpcGhlcnMgPSBbXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsxIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMiB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazMgfSlcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY2lwaGVycyA9IFtcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZGVjcnlwdCcsIGtleTogazMgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsyIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMSB9KVxuICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRURFKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IEVERVN0YXRlKHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLmtleSk7XG4gIHRoaXMuX2VkZVN0YXRlID0gc3RhdGU7XG59XG5pbmhlcml0cyhFREUsIENpcGhlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gRURFO1xuXG5FREUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBFREUob3B0aW9ucyk7XG59O1xuXG5FREUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2VkZVN0YXRlO1xuXG4gIHN0YXRlLmNpcGhlcnNbMF0uX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7XG4gIHN0YXRlLmNpcGhlcnNbMV0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpO1xuICBzdGF0ZS5jaXBoZXJzWzJdLl91cGRhdGUob3V0LCBvdXRPZmYsIG91dCwgb3V0T2ZmKTtcbn07XG5cbkVERS5wcm90b3R5cGUuX3BhZCA9IERFUy5wcm90b3R5cGUuX3BhZDtcbkVERS5wcm90b3R5cGUuX3VucGFkID0gREVTLnByb3RvdHlwZS5fdW5wYWQ7XG4iLCJ2YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIENpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuXG5pbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSlcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG5cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCgpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuXG52YXIgUEFERElORyA9IEJ1ZmZlci5hbGxvYygxNiwgMHgxMClcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgY2h1bmsgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICByZXR1cm4gY2h1bmtcbiAgfVxuXG4gIGlmICghY2h1bmsuZXF1YWxzKFBBRERJTkcpKSB7XG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cblxuQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbiA9IDE2IC0gdGhpcy5jYWNoZS5sZW5ndGhcbiAgdmFyIHBhZEJ1ZmYgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZEJ1ZmYud3JpdGVVSW50OChsZW4sIGkpXG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH1cblxuICByZXR1cm4gbmV3IENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcbiIsImV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICByZXR1cm4gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhibG9jaylcbn1cblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxufVxuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgdmFyIGRhdGEgPSB4b3IoYmxvY2ssIHNlbGYuX3ByZXYpXG5cbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soZGF0YSlcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHZhciBwYWQgPSBzZWxmLl9wcmV2XG5cbiAgc2VsZi5fcHJldiA9IGJsb2NrXG4gIHZhciBvdXQgPSBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxuXG4gIHJldHVybiB4b3Iob3V0LCBwYWQpXG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZW5jcnlwdFN0YXJ0IChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBkYXRhLmxlbmd0aFxuICB2YXIgb3V0ID0geG9yKGRhdGEsIHNlbGYuX2NhY2hlKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGxlbilcbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYsIGRlY3J5cHQgPyBkYXRhIDogb3V0XSlcbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHZhciBsZW5cblxuICB3aGlsZSAoZGF0YS5sZW5ndGgpIHtcbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICAgIHNlbGYuX3ByZXYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoIDw9IGRhdGEubGVuZ3RoKSB7XG4gICAgICBsZW4gPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEuc2xpY2UoMCwgbGVuKSwgZGVjcnlwdCldKVxuICAgICAgZGF0YSA9IGRhdGEuc2xpY2UobGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLCBkZWNyeXB0KV0pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHZhciBvdXQgPSBwYWRbMF0gXiBieXRlUGFyYW1cblxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbXG4gICAgc2VsZi5fcHJldi5zbGljZSgxKSxcbiAgICBCdWZmZXIuZnJvbShbZGVjcnlwdCA/IGJ5dGVQYXJhbSA6IG91dF0pXG4gIF0pXG5cbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAtMVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWRcbiAgdmFyIGkgPSAtMVxuICB2YXIgbGVuID0gOFxuICB2YXIgb3V0ID0gMFxuICB2YXIgYml0LCB2YWx1ZVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgIGJpdCA9IChieXRlUGFyYW0gJiAoMSA8PCAoNyAtIGkpKSkgPyAweDgwIDogMFxuICAgIHZhbHVlID0gcGFkWzBdIF4gYml0XG4gICAgb3V0ICs9ICgodmFsdWUgJiAweDgwKSA+PiAoaSAlIDgpKVxuICAgIHNlbGYuX3ByZXYgPSBzaGlmdEluKHNlbGYuX3ByZXYsIGRlY3J5cHQgPyBiaXQgOiB2YWx1ZSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHNoaWZ0SW4gKGJ1ZmZlciwgdmFsdWUpIHtcbiAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJ1ZmZlci5sZW5ndGgpXG4gIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgQnVmZmVyLmZyb20oW3ZhbHVlXSldKVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWZmZXJbaV0gPDwgMSB8IGJ1ZmZlcltpICsgMV0gPj4gKDcpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuICB2YXIgaSA9IC0xXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuXG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBaRVJPRVMgPSBCdWZmZXIuYWxsb2MoMTYsIDApXG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5IChvdXQpIHtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdID4+PiAwLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0gPj4+IDAsIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSA+Pj4gMCwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdID4+PiAwLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gQnVmZmVyLmFsbG9jKDE2LCAwKVxuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSAoaSAlIDgpKSkpICE9PSAwXG4gICAgaWYgKHhpKSB7XG4gICAgICAvLyBaX2krMSA9IFpfaSBeIFZfaVxuICAgICAgWmlbMF0gXj0gVmlbMF1cbiAgICAgIFppWzFdIF49IFZpWzFdXG4gICAgICBaaVsyXSBePSBWaVsyXVxuICAgICAgWmlbM10gXj0gVmlbM11cbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JWaSA9IChWaVszXSAmIDEpICE9PSAwXG5cbiAgICAvLyBWX2krMSA9IFZfaSA+PiAxXG4gICAgZm9yIChqID0gMzsgaiA+IDA7IGotLSkge1xuICAgICAgVmlbal0gPSAoVmlbal0gPj4+IDEpIHwgKChWaVtqIC0gMV0gJiAxKSA8PCAzMSlcbiAgICB9XG4gICAgVmlbMF0gPSBWaVswXSA+Pj4gMVxuXG4gICAgLy8gSWYgTFNCKFZfaSkgaXMgMSwgVl9pKzEgPSAoVl9pID4+IDEpIF4gUlxuICAgIGlmIChsc2JWaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuXG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5cbkdIQVNILnByb3RvdHlwZS5maW5hbCA9IGZ1bmN0aW9uIChhYmwsIGJsKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkge1xuICAgIHRoaXMuZ2hhc2goQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgWkVST0VTXSwgMTYpKVxuICB9XG5cbiAgdGhpcy5naGFzaChmcm9tQXJyYXkoWzAsIGFibCwgMCwgYmxdKSlcbiAgcmV0dXJuIHRoaXMuc3RhdGVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuIiwidmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlXG59XG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxuRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICByZXR1cm4gdW5wYWQodGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKSlcbiAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuXG5EZWNpcGhlci5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoc2V0VG8pIHtcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSAhIXNldFRvXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7XG4gIHZhciBvdXRcbiAgaWYgKGF1dG9QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHJldHVybiB0aGlzLmNhY2hlXG59XG5cbmZ1bmN0aW9uIHVucGFkIChsYXN0KSB7XG4gIHZhciBwYWRkZWQgPSBsYXN0WzE1XVxuICBpZiAocGFkZGVkIDwgMSB8fCBwYWRkZWQgPiAxNikge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGRlY3J5cHQgZGF0YScpXG4gIH1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHJldHVyblxuXG4gIHJldHVybiBsYXN0LnNsaWNlKDAsIDE2IC0gcGFkZGVkKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIGl2ID09PSAnc3RyaW5nJykgaXYgPSBCdWZmZXIuZnJvbShpdilcbiAgaWYgKGNvbmZpZy5tb2RlICE9PSAnR0NNJyAmJiBpdi5sZW5ndGggIT09IGNvbmZpZy5pdikgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH1cblxuICByZXR1cm4gbmV3IERlY2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuIiwiZXhwb3J0c1snZGVzLWVjYiddID0ge1xuICBrZXk6IDgsXG4gIGl2OiAwXG59XG5leHBvcnRzWydkZXMtY2JjJ10gPSBleHBvcnRzLmRlcyA9IHtcbiAga2V5OiA4LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZTMtY2JjJ10gPSBleHBvcnRzLmRlczMgPSB7XG4gIGtleTogMjQsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlMyddID0ge1xuICBrZXk6IDI0LFxuICBpdjogMFxufVxuZXhwb3J0c1snZGVzLWVkZS1jYmMnXSA9IHtcbiAga2V5OiAxNixcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUnXSA9IHtcbiAga2V5OiAxNixcbiAgaXY6IDBcbn1cbiIsInZhciBnZW5lcmF0ZVByaW1lID0gcmVxdWlyZSgnLi9saWIvZ2VuZXJhdGVQcmltZScpXG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9saWIvcHJpbWVzLmpzb24nKVxuXG52YXIgREggPSByZXF1aXJlKCcuL2xpYi9kaCcpXG5cbmZ1bmN0aW9uIGdldERpZmZpZUhlbGxtYW4gKG1vZCkge1xuICB2YXIgcHJpbWUgPSBuZXcgQnVmZmVyKHByaW1lc1ttb2RdLnByaW1lLCAnaGV4JylcbiAgdmFyIGdlbiA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0uZ2VuLCAnaGV4JylcblxuICByZXR1cm4gbmV3IERIKHByaW1lLCBnZW4pXG59XG5cbnZhciBFTkNPRElOR1MgPSB7XG4gICdiaW5hcnknOiB0cnVlLCAnaGV4JzogdHJ1ZSwgJ2Jhc2U2NCc6IHRydWVcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGlmZmllSGVsbG1hbiAocHJpbWUsIGVuYywgZ2VuZXJhdG9yLCBnZW5jKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoZW5jKSB8fCBFTkNPRElOR1NbZW5jXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNyZWF0ZURpZmZpZUhlbGxtYW4ocHJpbWUsICdiaW5hcnknLCBlbmMsIGdlbmVyYXRvcilcbiAgfVxuXG4gIGVuYyA9IGVuYyB8fCAnYmluYXJ5J1xuICBnZW5jID0gZ2VuYyB8fCAnYmluYXJ5J1xuICBnZW5lcmF0b3IgPSBnZW5lcmF0b3IgfHwgbmV3IEJ1ZmZlcihbMl0pXG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZ2VuZXJhdG9yKSkge1xuICAgIGdlbmVyYXRvciA9IG5ldyBCdWZmZXIoZ2VuZXJhdG9yLCBnZW5jKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmltZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbmV3IERIKGdlbmVyYXRlUHJpbWUocHJpbWUsIGdlbmVyYXRvciksIGdlbmVyYXRvciwgdHJ1ZSlcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaW1lKSkge1xuICAgIHByaW1lID0gbmV3IEJ1ZmZlcihwcmltZSwgZW5jKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBESChwcmltZSwgZ2VuZXJhdG9yLCB0cnVlKVxufVxuXG5leHBvcnRzLkRpZmZpZUhlbGxtYW5Hcm91cCA9IGV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5nZXREaWZmaWVIZWxsbWFuID0gZ2V0RGlmZmllSGVsbG1hblxuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gY3JlYXRlRGlmZmllSGVsbG1hblxuIiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICAvLyAnYScgLSAnZidcbiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHtcbiAgICAgICAgciB8PSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciB8PSBjICYgMHhmO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyLnN0cmlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gciBpcyBCTiB2NCBpbnN0YW5jZVxuICAgICAgICByLnN0cmlwKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByIGlzIEJOIHY1IGluc3RhbmNlXG4gICAgICAgIHIuX3N0cmlwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gICAgcmV0dXJuIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbW9kdWxlLCB0aGlzKTtcbiIsInZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgTWlsbGVyUmFiaW4gPSByZXF1aXJlKCdtaWxsZXItcmFiaW4nKTtcbnZhciBtaWxsZXJSYWJpbiA9IG5ldyBNaWxsZXJSYWJpbigpO1xudmFyIFRXRU5UWUZPVVIgPSBuZXcgQk4oMjQpO1xudmFyIEVMRVZFTiA9IG5ldyBCTigxMSk7XG52YXIgVEVOID0gbmV3IEJOKDEwKTtcbnZhciBUSFJFRSA9IG5ldyBCTigzKTtcbnZhciBTRVZFTiA9IG5ldyBCTig3KTtcbnZhciBwcmltZXMgPSByZXF1aXJlKCcuL2dlbmVyYXRlUHJpbWUnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IERIO1xuXG5mdW5jdGlvbiBzZXRQdWJsaWNLZXkocHViLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHViKSkge1xuICAgIHB1YiA9IG5ldyBCdWZmZXIocHViLCBlbmMpO1xuICB9XG4gIHRoaXMuX3B1YiA9IG5ldyBCTihwdWIpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2V0UHJpdmF0ZUtleShwcml2LCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHtcbiAgICBwcml2ID0gbmV3IEJ1ZmZlcihwcml2LCBlbmMpO1xuICB9XG4gIHRoaXMuX3ByaXYgPSBuZXcgQk4ocHJpdik7XG4gIHJldHVybiB0aGlzO1xufVxuXG52YXIgcHJpbWVDYWNoZSA9IHt9O1xuZnVuY3Rpb24gY2hlY2tQcmltZShwcmltZSwgZ2VuZXJhdG9yKSB7XG4gIHZhciBnZW4gPSBnZW5lcmF0b3IudG9TdHJpbmcoJ2hleCcpO1xuICB2YXIgaGV4ID0gW2dlbiwgcHJpbWUudG9TdHJpbmcoMTYpXS5qb2luKCdfJyk7XG4gIGlmIChoZXggaW4gcHJpbWVDYWNoZSkge1xuICAgIHJldHVybiBwcmltZUNhY2hlW2hleF07XG4gIH1cbiAgdmFyIGVycm9yID0gMDtcblxuICBpZiAocHJpbWUuaXNFdmVuKCkgfHxcbiAgICAhcHJpbWVzLnNpbXBsZVNpZXZlIHx8XG4gICAgIXByaW1lcy5mZXJtYXRUZXN0KHByaW1lKSB8fFxuICAgICFtaWxsZXJSYWJpbi50ZXN0KHByaW1lKSkge1xuICAgIC8vbm90IGEgcHJpbWUgc28gKzFcbiAgICBlcnJvciArPSAxO1xuXG4gICAgaWYgKGdlbiA9PT0gJzAyJyB8fCBnZW4gPT09ICcwNScpIHtcbiAgICAgIC8vIHdlJ2QgYmUgYWJsZSB0byBjaGVjayB0aGUgZ2VuZXJhdG9yXG4gICAgICAvLyBpdCB3b3VsZCBmYWlsIHNvICs4XG4gICAgICBlcnJvciArPSA4O1xuICAgIH0gZWxzZSB7XG4gICAgICAvL3dlIHdvdWxkbid0IGJlIGFibGUgdG8gdGVzdCB0aGUgZ2VuZXJhdG9yXG4gICAgICAvLyBzbyArNFxuICAgICAgZXJyb3IgKz0gNDtcbiAgICB9XG4gICAgcHJpbWVDYWNoZVtoZXhdID0gZXJyb3I7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG4gIGlmICghbWlsbGVyUmFiaW4udGVzdChwcmltZS5zaHJuKDEpKSkge1xuICAgIC8vbm90IGEgc2FmZSBwcmltZVxuICAgIGVycm9yICs9IDI7XG4gIH1cbiAgdmFyIHJlbTtcbiAgc3dpdGNoIChnZW4pIHtcbiAgICBjYXNlICcwMic6XG4gICAgICBpZiAocHJpbWUubW9kKFRXRU5UWUZPVVIpLmNtcChFTEVWRU4pKSB7XG4gICAgICAgIC8vIHVuc3VpZGFibGUgZ2VuZXJhdG9yXG4gICAgICAgIGVycm9yICs9IDg7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICcwNSc6XG4gICAgICByZW0gPSBwcmltZS5tb2QoVEVOKTtcbiAgICAgIGlmIChyZW0uY21wKFRIUkVFKSAmJiByZW0uY21wKFNFVkVOKSkge1xuICAgICAgICAvLyBwcmltZSBtb2QgMTAgbmVlZHMgdG8gZXF1YWwgMyBvciA3XG4gICAgICAgIGVycm9yICs9IDg7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZXJyb3IgKz0gNDtcbiAgfVxuICBwcmltZUNhY2hlW2hleF0gPSBlcnJvcjtcbiAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBESChwcmltZSwgZ2VuZXJhdG9yLCBtYWxsZWFibGUpIHtcbiAgdGhpcy5zZXRHZW5lcmF0b3IoZ2VuZXJhdG9yKTtcbiAgdGhpcy5fX3ByaW1lID0gbmV3IEJOKHByaW1lKTtcbiAgdGhpcy5fcHJpbWUgPSBCTi5tb250KHRoaXMuX19wcmltZSk7XG4gIHRoaXMuX3ByaW1lTGVuID0gcHJpbWUubGVuZ3RoO1xuICB0aGlzLl9wdWIgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3ByaXYgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX3ByaW1lQ29kZSA9IHVuZGVmaW5lZDtcbiAgaWYgKG1hbGxlYWJsZSkge1xuICAgIHRoaXMuc2V0UHVibGljS2V5ID0gc2V0UHVibGljS2V5O1xuICAgIHRoaXMuc2V0UHJpdmF0ZUtleSA9IHNldFByaXZhdGVLZXk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fcHJpbWVDb2RlID0gODtcbiAgfVxufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KERILnByb3RvdHlwZSwgJ3ZlcmlmeUVycm9yJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3ByaW1lQ29kZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMuX3ByaW1lQ29kZSA9IGNoZWNrUHJpbWUodGhpcy5fX3ByaW1lLCB0aGlzLl9fZ2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3ByaW1lQ29kZTtcbiAgfVxufSk7XG5ESC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuX3ByaXYpIHtcbiAgICB0aGlzLl9wcml2ID0gbmV3IEJOKHJhbmRvbUJ5dGVzKHRoaXMuX3ByaW1lTGVuKSk7XG4gIH1cbiAgdGhpcy5fcHViID0gdGhpcy5fZ2VuLnRvUmVkKHRoaXMuX3ByaW1lKS5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICByZXR1cm4gdGhpcy5nZXRQdWJsaWNLZXkoKTtcbn07XG5cbkRILnByb3RvdHlwZS5jb21wdXRlU2VjcmV0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIG90aGVyID0gbmV3IEJOKG90aGVyKTtcbiAgb3RoZXIgPSBvdGhlci50b1JlZCh0aGlzLl9wcmltZSk7XG4gIHZhciBzZWNyZXQgPSBvdGhlci5yZWRQb3codGhpcy5fcHJpdikuZnJvbVJlZCgpO1xuICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihzZWNyZXQudG9BcnJheSgpKTtcbiAgdmFyIHByaW1lID0gdGhpcy5nZXRQcmltZSgpO1xuICBpZiAob3V0Lmxlbmd0aCA8IHByaW1lLmxlbmd0aCkge1xuICAgIHZhciBmcm9udCA9IG5ldyBCdWZmZXIocHJpbWUubGVuZ3RoIC0gb3V0Lmxlbmd0aCk7XG4gICAgZnJvbnQuZmlsbCgwKTtcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtmcm9udCwgb3V0XSk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiBnZXRQdWJsaWNLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wdWIsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIGdldFByaXZhdGVLZXkoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9wcml2LCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldFByaW1lID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fX3ByaW1lLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldEdlbmVyYXRvciA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX2dlbiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5zZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZ2VuLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4JztcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZ2VuKSkge1xuICAgIGdlbiA9IG5ldyBCdWZmZXIoZ2VuLCBlbmMpO1xuICB9XG4gIHRoaXMuX19nZW4gPSBnZW47XG4gIHRoaXMuX2dlbiA9IG5ldyBCTihnZW4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFJldHVyblZhbHVlKGJuLCBlbmMpIHtcbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYm4udG9BcnJheSgpKTtcbiAgaWYgKCFlbmMpIHtcbiAgICByZXR1cm4gYnVmO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoZW5jKTtcbiAgfVxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL3NpZ24nKVxudmFyIHZlcmlmeSA9IHJlcXVpcmUoJy4vdmVyaWZ5JylcblxudmFyIGFsZ29yaXRobXMgPSByZXF1aXJlKCcuL2FsZ29yaXRobXMuanNvbicpXG5PYmplY3Qua2V5cyhhbGdvcml0aG1zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgYWxnb3JpdGhtc1trZXldLmlkID0gQnVmZmVyLmZyb20oYWxnb3JpdGhtc1trZXldLmlkLCAnaGV4JylcbiAgYWxnb3JpdGhtc1trZXkudG9Mb3dlckNhc2UoKV0gPSBhbGdvcml0aG1zW2tleV1cbn0pXG5cbmZ1bmN0aW9uIFNpZ24gKGFsZ29yaXRobSkge1xuICBzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzKVxuXG4gIHZhciBkYXRhID0gYWxnb3JpdGhtc1thbGdvcml0aG1dXG4gIGlmICghZGF0YSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1lc3NhZ2UgZGlnZXN0JylcblxuICB0aGlzLl9oYXNoVHlwZSA9IGRhdGEuaGFzaFxuICB0aGlzLl9oYXNoID0gY3JlYXRlSGFzaChkYXRhLmhhc2gpXG4gIHRoaXMuX3RhZyA9IGRhdGEuaWRcbiAgdGhpcy5fc2lnblR5cGUgPSBkYXRhLnNpZ25cbn1cbmluaGVyaXRzKFNpZ24sIHN0cmVhbS5Xcml0YWJsZSlcblxuU2lnbi5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gX3dyaXRlIChkYXRhLCBfLCBkb25lKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIGRvbmUoKVxufVxuXG5TaWduLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jKVxuXG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIHJldHVybiB0aGlzXG59XG5cblNpZ24ucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduTWV0aG9kIChrZXksIGVuYykge1xuICB0aGlzLmVuZCgpXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICB2YXIgc2lnID0gc2lnbihoYXNoLCBrZXksIHRoaXMuX2hhc2hUeXBlLCB0aGlzLl9zaWduVHlwZSwgdGhpcy5fdGFnKVxuXG4gIHJldHVybiBlbmMgPyBzaWcudG9TdHJpbmcoZW5jKSA6IHNpZ1xufVxuXG5mdW5jdGlvbiBWZXJpZnkgKGFsZ29yaXRobSkge1xuICBzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzKVxuXG4gIHZhciBkYXRhID0gYWxnb3JpdGhtc1thbGdvcml0aG1dXG4gIGlmICghZGF0YSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1lc3NhZ2UgZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gY3JlYXRlSGFzaChkYXRhLmhhc2gpXG4gIHRoaXMuX3RhZyA9IGRhdGEuaWRcbiAgdGhpcy5fc2lnblR5cGUgPSBkYXRhLnNpZ25cbn1cbmluaGVyaXRzKFZlcmlmeSwgc3RyZWFtLldyaXRhYmxlKVxuXG5WZXJpZnkucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZSAoZGF0YSwgXywgZG9uZSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICBkb25lKClcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jKVxuXG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIHJldHVybiB0aGlzXG59XG5cblZlcmlmeS5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5TWV0aG9kIChrZXksIHNpZywgZW5jKSB7XG4gIGlmICh0eXBlb2Ygc2lnID09PSAnc3RyaW5nJykgc2lnID0gQnVmZmVyLmZyb20oc2lnLCBlbmMpXG5cbiAgdGhpcy5lbmQoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgcmV0dXJuIHZlcmlmeShzaWcsIGhhc2gsIGtleSwgdGhpcy5fc2lnblR5cGUsIHRoaXMuX3RhZylcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2lnbiAoYWxnb3JpdGhtKSB7XG4gIHJldHVybiBuZXcgU2lnbihhbGdvcml0aG0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVZlcmlmeSAoYWxnb3JpdGhtKSB7XG4gIHJldHVybiBuZXcgVmVyaWZ5KGFsZ29yaXRobSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFNpZ246IGNyZWF0ZVNpZ24sXG4gIFZlcmlmeTogY3JlYXRlVmVyaWZ5LFxuICBjcmVhdGVTaWduOiBjcmVhdGVTaWduLFxuICBjcmVhdGVWZXJpZnk6IGNyZWF0ZVZlcmlmeVxufVxuIiwiLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qc1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpXG52YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG5cbmZ1bmN0aW9uIHNpZ24gKGhhc2gsIGtleSwgaGFzaFR5cGUsIHNpZ25UeXBlLCB0YWcpIHtcbiAgdmFyIHByaXYgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHJpdi5jdXJ2ZSkge1xuICAgIC8vIHJzYSBrZXlzIGNhbiBiZSBpbnRlcnByZXRlZCBhcyBlY2RzYSBvbmVzIGluIG9wZW5zc2xcbiAgICBpZiAoc2lnblR5cGUgIT09ICdlY2RzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICAgIHJldHVybiBlY1NpZ24oaGFzaCwgcHJpdilcbiAgfSBlbHNlIGlmIChwcml2LnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgICByZXR1cm4gZHNhU2lnbihoYXNoLCBwcml2LCBoYXNoVHlwZSlcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdyc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgfVxuICBoYXNoID0gQnVmZmVyLmNvbmNhdChbdGFnLCBoYXNoXSlcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIHBhZCA9IFswLCAxXVxuICB3aGlsZSAoaGFzaC5sZW5ndGggKyBwYWQubGVuZ3RoICsgMSA8IGxlbikgcGFkLnB1c2goMHhmZilcbiAgcGFkLnB1c2goMHgwMClcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgaGFzaC5sZW5ndGgpIHBhZC5wdXNoKGhhc2hbaV0pXG5cbiAgdmFyIG91dCA9IGNydChwYWQsIHByaXYpXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gZWNTaWduIChoYXNoLCBwcml2KSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3ByaXYuY3VydmUuam9pbignLicpXVxuICBpZiAoIWN1cnZlSWQpIHRocm93IG5ldyBFcnJvcigndW5rbm93biBjdXJ2ZSAnICsgcHJpdi5jdXJ2ZS5qb2luKCcuJykpXG5cbiAgdmFyIGN1cnZlID0gbmV3IEVDKGN1cnZlSWQpXG4gIHZhciBrZXkgPSBjdXJ2ZS5rZXlGcm9tUHJpdmF0ZShwcml2LnByaXZhdGVLZXkpXG4gIHZhciBvdXQgPSBrZXkuc2lnbihoYXNoKVxuXG4gIHJldHVybiBCdWZmZXIuZnJvbShvdXQudG9ERVIoKSlcbn1cblxuZnVuY3Rpb24gZHNhU2lnbiAoaGFzaCwgcHJpdiwgYWxnbykge1xuICB2YXIgeCA9IHByaXYucGFyYW1zLnByaXZfa2V5XG4gIHZhciBwID0gcHJpdi5wYXJhbXMucFxuICB2YXIgcSA9IHByaXYucGFyYW1zLnFcbiAgdmFyIGcgPSBwcml2LnBhcmFtcy5nXG4gIHZhciByID0gbmV3IEJOKDApXG4gIHZhciBrXG4gIHZhciBIID0gYml0czJpbnQoaGFzaCwgcSkubW9kKHEpXG4gIHZhciBzID0gZmFsc2VcbiAgdmFyIGt2ID0gZ2V0S2V5KHgsIHEsIGhhc2gsIGFsZ28pXG4gIHdoaWxlIChzID09PSBmYWxzZSkge1xuICAgIGsgPSBtYWtlS2V5KHEsIGt2LCBhbGdvKVxuICAgIHIgPSBtYWtlUihnLCBrLCBwLCBxKVxuICAgIHMgPSBrLmludm0ocSkuaW11bChILmFkZCh4Lm11bChyKSkpLm1vZChxKVxuICAgIGlmIChzLmNtcG4oMCkgPT09IDApIHtcbiAgICAgIHMgPSBmYWxzZVxuICAgICAgciA9IG5ldyBCTigwKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG9ERVIociwgcylcbn1cblxuZnVuY3Rpb24gdG9ERVIgKHIsIHMpIHtcbiAgciA9IHIudG9BcnJheSgpXG4gIHMgPSBzLnRvQXJyYXkoKVxuXG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHJbMF0gJiAweDgwKSByID0gWzBdLmNvbmNhdChyKVxuICBpZiAoc1swXSAmIDB4ODApIHMgPSBbMF0uY29uY2F0KHMpXG5cbiAgdmFyIHRvdGFsID0gci5sZW5ndGggKyBzLmxlbmd0aCArIDRcbiAgdmFyIHJlcyA9IFsweDMwLCB0b3RhbCwgMHgwMiwgci5sZW5ndGhdXG4gIHJlcyA9IHJlcy5jb25jYXQociwgWzB4MDIsIHMubGVuZ3RoXSwgcylcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHJlcylcbn1cblxuZnVuY3Rpb24gZ2V0S2V5ICh4LCBxLCBoYXNoLCBhbGdvKSB7XG4gIHggPSBCdWZmZXIuZnJvbSh4LnRvQXJyYXkoKSlcbiAgaWYgKHgubGVuZ3RoIDwgcS5ieXRlTGVuZ3RoKCkpIHtcbiAgICB2YXIgemVyb3MgPSBCdWZmZXIuYWxsb2MocS5ieXRlTGVuZ3RoKCkgLSB4Lmxlbmd0aClcbiAgICB4ID0gQnVmZmVyLmNvbmNhdChbemVyb3MsIHhdKVxuICB9XG4gIHZhciBobGVuID0gaGFzaC5sZW5ndGhcbiAgdmFyIGhiaXRzID0gYml0czJvY3RldHMoaGFzaCwgcSlcbiAgdmFyIHYgPSBCdWZmZXIuYWxsb2MoaGxlbilcbiAgdi5maWxsKDEpXG4gIHZhciBrID0gQnVmZmVyLmFsbG9jKGhsZW4pXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS51cGRhdGUoQnVmZmVyLmZyb20oWzBdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS51cGRhdGUoQnVmZmVyLmZyb20oWzFdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gIHJldHVybiB7IGs6IGssIHY6IHYgfVxufVxuXG5mdW5jdGlvbiBiaXRzMmludCAob2JpdHMsIHEpIHtcbiAgdmFyIGJpdHMgPSBuZXcgQk4ob2JpdHMpXG4gIHZhciBzaGlmdCA9IChvYml0cy5sZW5ndGggPDwgMykgLSBxLmJpdExlbmd0aCgpXG4gIGlmIChzaGlmdCA+IDApIGJpdHMuaXNocm4oc2hpZnQpXG4gIHJldHVybiBiaXRzXG59XG5cbmZ1bmN0aW9uIGJpdHMyb2N0ZXRzIChiaXRzLCBxKSB7XG4gIGJpdHMgPSBiaXRzMmludChiaXRzLCBxKVxuICBiaXRzID0gYml0cy5tb2QocSlcbiAgdmFyIG91dCA9IEJ1ZmZlci5mcm9tKGJpdHMudG9BcnJheSgpKVxuICBpZiAob3V0Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gQnVmZmVyLmFsbG9jKHEuYnl0ZUxlbmd0aCgpIC0gb3V0Lmxlbmd0aClcbiAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFt6ZXJvcywgb3V0XSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIG1ha2VLZXkgKHEsIGt2LCBhbGdvKSB7XG4gIHZhciB0XG4gIHZhciBrXG5cbiAgZG8ge1xuICAgIHQgPSBCdWZmZXIuYWxsb2MoMClcblxuICAgIHdoaWxlICh0Lmxlbmd0aCAqIDggPCBxLmJpdExlbmd0aCgpKSB7XG4gICAgICBrdi52ID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikuZGlnZXN0KClcbiAgICAgIHQgPSBCdWZmZXIuY29uY2F0KFt0LCBrdi52XSlcbiAgICB9XG5cbiAgICBrID0gYml0czJpbnQodCwgcSlcbiAgICBrdi5rID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikudXBkYXRlKEJ1ZmZlci5mcm9tKFswXSkpLmRpZ2VzdCgpXG4gICAga3YudiA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaykudXBkYXRlKGt2LnYpLmRpZ2VzdCgpXG4gIH0gd2hpbGUgKGsuY21wKHEpICE9PSAtMSlcblxuICByZXR1cm4ga1xufVxuXG5mdW5jdGlvbiBtYWtlUiAoZywgaywgcCwgcSkge1xuICByZXR1cm4gZy50b1JlZChCTi5tb250KHApKS5yZWRQb3coaykuZnJvbVJlZCgpLm1vZChxKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNpZ25cbm1vZHVsZS5leHBvcnRzLmdldEtleSA9IGdldEtleVxubW9kdWxlLmV4cG9ydHMubWFrZUtleSA9IG1ha2VLZXlcbiIsIihmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBVdGlsc1xuICBmdW5jdGlvbiBhc3NlcnQgKHZhbCwgbXNnKSB7XG4gICAgaWYgKCF2YWwpIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbiAgfVxuXG4gIC8vIENvdWxkIHVzZSBgaW5oZXJpdHNgIG1vZHVsZSwgYnV0IGRvbid0IHdhbnQgdG8gbW92ZSBmcm9tIHNpbmdsZSBmaWxlXG4gIC8vIGFyY2hpdGVjdHVyZSB5ZXQuXG4gIGZ1bmN0aW9uIGluaGVyaXRzIChjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlO1xuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7XG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICB9XG5cbiAgLy8gQk5cblxuICBmdW5jdGlvbiBCTiAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAoQk4uaXNCTihudW1iZXIpKSB7XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIHRoaXMud29yZHMgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgIC8vIFJlZHVjdGlvbiBjb250ZXh0XG4gICAgdGhpcy5yZWQgPSBudWxsO1xuXG4gICAgaWYgKG51bWJlciAhPT0gbnVsbCkge1xuICAgICAgaWYgKGJhc2UgPT09ICdsZScgfHwgYmFzZSA9PT0gJ2JlJykge1xuICAgICAgICBlbmRpYW4gPSBiYXNlO1xuICAgICAgICBiYXNlID0gMTA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXQobnVtYmVyIHx8IDAsIGJhc2UgfHwgMTAsIGVuZGlhbiB8fCAnYmUnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBCTjtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJOID0gQk47XG4gIH1cblxuICBCTi5CTiA9IEJOO1xuICBCTi53b3JkU2l6ZSA9IDI2O1xuXG4gIHZhciBCdWZmZXI7XG4gIHRyeSB7XG4gICAgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cblxuICBCTi5pc0JOID0gZnVuY3Rpb24gaXNCTiAobnVtKSB7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIEJOKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtICE9PSBudWxsICYmIHR5cGVvZiBudW0gPT09ICdvYmplY3QnICYmXG4gICAgICBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTtcbiAgfTtcblxuICBCTi5tYXggPSBmdW5jdGlvbiBtYXggKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA+IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5taW4gPSBmdW5jdGlvbiBtaW4gKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA8IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBiYXNlID0gMTY7XG4gICAgfVxuICAgIGFzc2VydChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KTtcblxuICAgIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICBzdGFydCsrO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAxNikge1xuICAgICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhcnNlQmFzZShudW1iZXIsIGJhc2UsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXROdW1iZXIgPSBmdW5jdGlvbiBfaW5pdE51bWJlciAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICBudW1iZXIgPSAtbnVtYmVyO1xuICAgIH1cbiAgICBpZiAobnVtYmVyIDwgMHg0MDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyBudW1iZXIgJiAweDNmZmZmZmYgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA8IDB4MTAwMDAwMDAwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmZcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpXG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmLFxuICAgICAgICAxXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAzO1xuICAgIH1cblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIC8vIFJldmVyc2UgdGhlIGJ5dGVzXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdEFycmF5ID0gZnVuY3Rpb24gX2luaXRBcnJheSAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICAvLyBQZXJoYXBzIGEgVWludDhBcnJheVxuICAgIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIGlmIChudW1iZXIubGVuZ3RoIDw9IDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIHZhciBvZmYgPSAwO1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxLCBqID0gMDsgaSA+PSAwOyBpIC09IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSAtIDFdIDw8IDgpIHwgKG51bWJlcltpIC0gMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgKyAxXSA8PCA4KSB8IChudW1iZXJbaSArIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4IChzdHIsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciA8PD0gNDtcblxuICAgICAgLy8gJ2EnIC0gJ2YnXG4gICAgICBpZiAoYyA+PSA0OSAmJiBjIDw9IDU0KSB7XG4gICAgICAgIHIgfD0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQScgLSAnRidcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNyAmJiBjIDw9IDIyKSB7XG4gICAgICAgIHIgfD0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgfD0gYyAmIDB4ZjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlSGV4ID0gZnVuY3Rpb24gX3BhcnNlSGV4IChudW1iZXIsIHN0YXJ0KSB7XG4gICAgLy8gQ3JlYXRlIHBvc3NpYmx5IGJpZ2dlciBhcnJheSB0byBlbnN1cmUgdGhhdCBpdCBmaXRzIHRoZSBudW1iZXJcbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgLy8gU2NhbiAyNC1iaXQgY2h1bmtzIGFuZCBhZGQgdGhlbSB0byB0aGUgbnVtYmVyXG4gICAgdmFyIG9mZiA9IDA7XG4gICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDYsIGogPSAwOyBpID49IHN0YXJ0OyBpIC09IDYpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIGksIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIC8vIE5PVEU6IGAweDNmZmZmZmAgaXMgaW50ZW50aW9uYWwgaGVyZSwgMjZiaXRzIG1heCBzaGlmdCArIDI0Yml0IGhleCBsaW1iXG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgICBvZmYgKz0gMjQ7XG4gICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSArIDYgIT09IHN0YXJ0KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBzdGFydCwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgIH1cbiAgICB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VCYXNlIChzdHIsIHN0YXJ0LCBlbmQsIG11bCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByICo9IG11bDtcblxuICAgICAgLy8gJ2EnXG4gICAgICBpZiAoYyA+PSA0OSkge1xuICAgICAgICByICs9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcpIHtcbiAgICAgICAgciArPSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciArPSBjO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VCYXNlID0gZnVuY3Rpb24gX3BhcnNlQmFzZSAobnVtYmVyLCBiYXNlLCBzdGFydCkge1xuICAgIC8vIEluaXRpYWxpemUgYXMgemVyb1xuICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG5cbiAgICAvLyBGaW5kIGxlbmd0aCBvZiBsaW1iIGluIGJhc2VcbiAgICBmb3IgKHZhciBsaW1iTGVuID0gMCwgbGltYlBvdyA9IDE7IGxpbWJQb3cgPD0gMHgzZmZmZmZmOyBsaW1iUG93ICo9IGJhc2UpIHtcbiAgICAgIGxpbWJMZW4rKztcbiAgICB9XG4gICAgbGltYkxlbi0tO1xuICAgIGxpbWJQb3cgPSAobGltYlBvdyAvIGJhc2UpIHwgMDtcblxuICAgIHZhciB0b3RhbCA9IG51bWJlci5sZW5ndGggLSBzdGFydDtcbiAgICB2YXIgbW9kID0gdG90YWwgJSBsaW1iTGVuO1xuICAgIHZhciBlbmQgPSBNYXRoLm1pbih0b3RhbCwgdG90YWwgLSBtb2QpICsgc3RhcnQ7XG5cbiAgICB2YXIgd29yZCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGxpbWJMZW4pIHtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBpICsgbGltYkxlbiwgYmFzZSk7XG5cbiAgICAgIHRoaXMuaW11bG4obGltYlBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vZCAhPT0gMCkge1xuICAgICAgdmFyIHBvdyA9IDE7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgbnVtYmVyLmxlbmd0aCwgYmFzZSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtb2Q7IGkrKykge1xuICAgICAgICBwb3cgKj0gYmFzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbXVsbihwb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKGRlc3QpIHtcbiAgICBkZXN0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlc3Qud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgIH1cbiAgICBkZXN0Lmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIGRlc3QubmVnYXRpdmUgPSB0aGlzLm5lZ2F0aXZlO1xuICAgIGRlc3QucmVkID0gdGhpcy5yZWQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHZhciByID0gbmV3IEJOKG51bGwpO1xuICAgIHRoaXMuY29weShyKTtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2V4cGFuZCA9IGZ1bmN0aW9uIF9leHBhbmQgKHNpemUpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBzaXplKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gUmVtb3ZlIGxlYWRpbmcgYDBgIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdHJpcCA9IGZ1bmN0aW9uIHN0cmlwICgpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPiAxICYmIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9ub3JtU2lnbiA9IGZ1bmN0aW9uIF9ub3JtU2lnbiAoKSB7XG4gICAgLy8gLTAgPSAwXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICAgIHJldHVybiAodGhpcy5yZWQgPyAnPEJOLVI6ICcgOiAnPEJOOiAnKSArIHRoaXMudG9TdHJpbmcoMTYpICsgJz4nO1xuICB9O1xuXG4gIC8qXG5cbiAgdmFyIHplcm9zID0gW107XG4gIHZhciBncm91cFNpemVzID0gW107XG4gIHZhciBncm91cEJhc2VzID0gW107XG5cbiAgdmFyIHMgPSAnJztcbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IEJOLndvcmRTaXplKSB7XG4gICAgemVyb3NbaV0gPSBzO1xuICAgIHMgKz0gJzAnO1xuICB9XG4gIGdyb3VwU2l6ZXNbMF0gPSAwO1xuICBncm91cFNpemVzWzFdID0gMDtcbiAgZ3JvdXBCYXNlc1swXSA9IDA7XG4gIGdyb3VwQmFzZXNbMV0gPSAwO1xuICB2YXIgYmFzZSA9IDIgLSAxO1xuICB3aGlsZSAoKytiYXNlIDwgMzYgKyAxKSB7XG4gICAgdmFyIGdyb3VwU2l6ZSA9IDA7XG4gICAgdmFyIGdyb3VwQmFzZSA9IDE7XG4gICAgd2hpbGUgKGdyb3VwQmFzZSA8ICgxIDw8IEJOLndvcmRTaXplKSAvIGJhc2UpIHtcbiAgICAgIGdyb3VwQmFzZSAqPSBiYXNlO1xuICAgICAgZ3JvdXBTaXplICs9IDE7XG4gICAgfVxuICAgIGdyb3VwU2l6ZXNbYmFzZV0gPSBncm91cFNpemU7XG4gICAgZ3JvdXBCYXNlc1tiYXNlXSA9IGdyb3VwQmFzZTtcbiAgfVxuXG4gICovXG5cbiAgdmFyIHplcm9zID0gW1xuICAgICcnLFxuICAgICcwJyxcbiAgICAnMDAnLFxuICAgICcwMDAnLFxuICAgICcwMDAwJyxcbiAgICAnMDAwMDAnLFxuICAgICcwMDAwMDAnLFxuICAgICcwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ1xuICBdO1xuXG4gIHZhciBncm91cFNpemVzID0gW1xuICAgIDAsIDAsXG4gICAgMjUsIDE2LCAxMiwgMTEsIDEwLCA5LCA4LFxuICAgIDgsIDcsIDcsIDcsIDcsIDYsIDYsXG4gICAgNiwgNiwgNiwgNiwgNiwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDVcbiAgXTtcblxuICB2YXIgZ3JvdXBCYXNlcyA9IFtcbiAgICAwLCAwLFxuICAgIDMzNTU0NDMyLCA0MzA0NjcyMSwgMTY3NzcyMTYsIDQ4ODI4MTI1LCA2MDQ2NjE3NiwgNDAzNTM2MDcsIDE2Nzc3MjE2LFxuICAgIDQzMDQ2NzIxLCAxMDAwMDAwMCwgMTk0ODcxNzEsIDM1ODMxODA4LCA2Mjc0ODUxNywgNzUyOTUzNiwgMTEzOTA2MjUsXG4gICAgMTY3NzcyMTYsIDI0MTM3NTY5LCAzNDAxMjIyNCwgNDcwNDU4ODEsIDY0MDAwMDAwLCA0MDg0MTAxLCA1MTUzNjMyLFxuICAgIDY0MzYzNDMsIDc5NjI2MjQsIDk3NjU2MjUsIDExODgxMzc2LCAxNDM0ODkwNywgMTcyMTAzNjgsIDIwNTExMTQ5LFxuICAgIDI0MzAwMDAwLCAyODYyOTE1MSwgMzM1NTQ0MzIsIDM5MTM1MzkzLCA0NTQzNTQyNCwgNTI1MjE4NzUsIDYwNDY2MTc2XG4gIF07XG5cbiAgQk4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKGJhc2UsIHBhZGRpbmcpIHtcbiAgICBiYXNlID0gYmFzZSB8fCAxMDtcbiAgICBwYWRkaW5nID0gcGFkZGluZyB8IDAgfHwgMTtcblxuICAgIHZhciBvdXQ7XG4gICAgaWYgKGJhc2UgPT09IDE2IHx8IGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBvZmYgPSAwO1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgICAgIHZhciB3b3JkID0gKCgodyA8PCBvZmYpIHwgY2FycnkpICYgMHhmZmZmZmYpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY2FycnkgPSAodyA+Pj4gKDI0IC0gb2ZmKSkgJiAweGZmZmZmZjtcbiAgICAgICAgaWYgKGNhcnJ5ICE9PSAwIHx8IGkgIT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIG91dCA9IHplcm9zWzYgLSB3b3JkLmxlbmd0aF0gKyB3b3JkICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHdvcmQgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgb2ZmICs9IDI7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgICAgb3V0ID0gY2FycnkudG9TdHJpbmcoMTYpICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpIHtcbiAgICAgIC8vIHZhciBncm91cFNpemUgPSBNYXRoLmZsb29yKEJOLndvcmRTaXplICogTWF0aC5MTjIgLyBNYXRoLmxvZyhiYXNlKSk7XG4gICAgICB2YXIgZ3JvdXBTaXplID0gZ3JvdXBTaXplc1tiYXNlXTtcbiAgICAgIC8vIHZhciBncm91cEJhc2UgPSBNYXRoLnBvdyhiYXNlLCBncm91cFNpemUpO1xuICAgICAgdmFyIGdyb3VwQmFzZSA9IGdyb3VwQmFzZXNbYmFzZV07XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBjID0gdGhpcy5jbG9uZSgpO1xuICAgICAgYy5uZWdhdGl2ZSA9IDA7XG4gICAgICB3aGlsZSAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgdmFyIHIgPSBjLm1vZG4oZ3JvdXBCYXNlKS50b1N0cmluZyhiYXNlKTtcbiAgICAgICAgYyA9IGMuaWRpdm4oZ3JvdXBCYXNlKTtcblxuICAgICAgICBpZiAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1tncm91cFNpemUgLSByLmxlbmd0aF0gKyByICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHIgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGFzc2VydChmYWxzZSwgJ0Jhc2Ugc2hvdWxkIGJlIGJldHdlZW4gMiBhbmQgMzYnKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiB0b051bWJlciAoKSB7XG4gICAgdmFyIHJldCA9IHRoaXMud29yZHNbMF07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAyKSB7XG4gICAgICByZXQgKz0gdGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMDtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID09PSAzICYmIHRoaXMud29yZHNbMl0gPT09IDB4MDEpIHtcbiAgICAgIC8vIE5PVEU6IGF0IHRoaXMgc3RhZ2UgaXQgaXMga25vd24gdGhhdCB0aGUgdG9wIGJpdCBpcyBzZXRcbiAgICAgIHJldCArPSAweDEwMDAwMDAwMDAwMDAwICsgKHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiAyKSB7XG4gICAgICBhc3NlcnQoZmFsc2UsICdOdW1iZXIgY2FuIG9ubHkgc2FmZWx5IHN0b3JlIHVwIHRvIDUzIGJpdHMnKTtcbiAgICB9XG4gICAgcmV0dXJuICh0aGlzLm5lZ2F0aXZlICE9PSAwKSA/IC1yZXQgOiByZXQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoMTYpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uIHRvQnVmZmVyIChlbmRpYW4sIGxlbmd0aCkge1xuICAgIGFzc2VydCh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyk7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQnVmZmVyLCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5IChlbmRpYW4sIGxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEFycmF5LCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXlMaWtlID0gZnVuY3Rpb24gdG9BcnJheUxpa2UgKEFycmF5VHlwZSwgZW5kaWFuLCBsZW5ndGgpIHtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCgpO1xuICAgIHZhciByZXFMZW5ndGggPSBsZW5ndGggfHwgTWF0aC5tYXgoMSwgYnl0ZUxlbmd0aCk7XG4gICAgYXNzZXJ0KGJ5dGVMZW5ndGggPD0gcmVxTGVuZ3RoLCAnYnl0ZSBhcnJheSBsb25nZXIgdGhhbiBkZXNpcmVkIGxlbmd0aCcpO1xuICAgIGFzc2VydChyZXFMZW5ndGggPiAwLCAnUmVxdWVzdGVkIGFycmF5IGxlbmd0aCA8PSAwJyk7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG4gICAgdmFyIGxpdHRsZUVuZGlhbiA9IGVuZGlhbiA9PT0gJ2xlJztcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5VHlwZShyZXFMZW5ndGgpO1xuXG4gICAgdmFyIGIsIGk7XG4gICAgdmFyIHEgPSB0aGlzLmNsb25lKCk7XG4gICAgaWYgKCFsaXR0bGVFbmRpYW4pIHtcbiAgICAgIC8vIEFzc3VtZSBiaWctZW5kaWFuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcmVxTGVuZ3RoIC0gYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tyZXFMZW5ndGggLSBpIC0gMV0gPSBiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbaV0gPSBiO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaSA8IHJlcUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBpZiAoTWF0aC5jbHozMikge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgcmV0dXJuIDMyIC0gTWF0aC5jbHozMih3KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgdmFyIHQgPSB3O1xuICAgICAgdmFyIHIgPSAwO1xuICAgICAgaWYgKHQgPj0gMHgxMDAwKSB7XG4gICAgICAgIHIgKz0gMTM7XG4gICAgICAgIHQgPj4+PSAxMztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4NDApIHtcbiAgICAgICAgciArPSA3O1xuICAgICAgICB0ID4+Pj0gNztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4OCkge1xuICAgICAgICByICs9IDQ7XG4gICAgICAgIHQgPj4+PSA0O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHgwMikge1xuICAgICAgICByICs9IDI7XG4gICAgICAgIHQgPj4+PSAyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIgKyB0O1xuICAgIH07XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3plcm9CaXRzID0gZnVuY3Rpb24gX3plcm9CaXRzICh3KSB7XG4gICAgLy8gU2hvcnQtY3V0XG4gICAgaWYgKHcgPT09IDApIHJldHVybiAyNjtcblxuICAgIHZhciB0ID0gdztcbiAgICB2YXIgciA9IDA7XG4gICAgaWYgKCh0ICYgMHgxZmZmKSA9PT0gMCkge1xuICAgICAgciArPSAxMztcbiAgICAgIHQgPj4+PSAxMztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHg3ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNztcbiAgICAgIHQgPj4+PSA3O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweGYpID09PSAwKSB7XG4gICAgICByICs9IDQ7XG4gICAgICB0ID4+Pj0gNDtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgzKSA9PT0gMCkge1xuICAgICAgciArPSAyO1xuICAgICAgdCA+Pj49IDI7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MSkgPT09IDApIHtcbiAgICAgIHIrKztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG51bWJlciBvZiB1c2VkIGJpdHMgaW4gYSBCTlxuICBCTi5wcm90b3R5cGUuYml0TGVuZ3RoID0gZnVuY3Rpb24gYml0TGVuZ3RoICgpIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXTtcbiAgICB2YXIgaGkgPSB0aGlzLl9jb3VudEJpdHModyk7XG4gICAgcmV0dXJuICh0aGlzLmxlbmd0aCAtIDEpICogMjYgKyBoaTtcbiAgfTtcblxuICBmdW5jdGlvbiB0b0JpdEFycmF5IChudW0pIHtcbiAgICB2YXIgdyA9IG5ldyBBcnJheShudW0uYml0TGVuZ3RoKCkpO1xuXG4gICAgZm9yICh2YXIgYml0ID0gMDsgYml0IDwgdy5sZW5ndGg7IGJpdCsrKSB7XG4gICAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgICB3W2JpdF0gPSAobnVtLndvcmRzW29mZl0gJiAoMSA8PCB3Yml0KSkgPj4+IHdiaXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHc7XG4gIH1cblxuICAvLyBOdW1iZXIgb2YgdHJhaWxpbmcgemVybyBiaXRzXG4gIEJOLnByb3RvdHlwZS56ZXJvQml0cyA9IGZ1bmN0aW9uIHplcm9CaXRzICgpIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIDA7XG5cbiAgICB2YXIgciA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYiA9IHRoaXMuX3plcm9CaXRzKHRoaXMud29yZHNbaV0pO1xuICAgICAgciArPSBiO1xuICAgICAgaWYgKGIgIT09IDI2KSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiBieXRlTGVuZ3RoICgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkgLyA4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9Ud29zID0gZnVuY3Rpb24gdG9Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5hYnMoKS5pbm90bih3aWR0aCkuaWFkZG4oMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21Ud29zID0gZnVuY3Rpb24gZnJvbVR3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMudGVzdG4od2lkdGggLSAxKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90bih3aWR0aCkuaWFkZG4oMSkuaW5lZygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc05lZyA9IGZ1bmN0aW9uIGlzTmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZSAhPT0gMDtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5lZygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbmVnID0gZnVuY3Rpb24gaW5lZyAoKSB7XG4gICAgaWYgKCF0aGlzLmlzWmVybygpKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1b3IgPSBmdW5jdGlvbiBpdW9yIChudW0pIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gfCBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW9yID0gZnVuY3Rpb24gaW9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdW9yKG51bSk7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW9yID0gZnVuY3Rpb24gdW9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVvcih0aGlzKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1YW5kID0gZnVuY3Rpb24gaXVhbmQgKG51bSkge1xuICAgIC8vIGIgPSBtaW4tbGVuZ3RoKG51bSwgdGhpcylcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldICYgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYi5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYW5kID0gZnVuY3Rpb24gaWFuZCAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVhbmQobnVtKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhbmQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVhbmQgPSBmdW5jdGlvbiB1YW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1YW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1YW5kKHRoaXMpO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXV4b3IgPSBmdW5jdGlvbiBpdXhvciAobnVtKSB7XG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhO1xuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV0gXiBiLndvcmRzW2ldO1xuICAgIH1cblxuICAgIGlmICh0aGlzICE9PSBhKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLml4b3IgPSBmdW5jdGlvbiBpeG9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXhvcihudW0pO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXhvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXhvciA9IGZ1bmN0aW9uIHV4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXV4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXV4b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gTm90IGBgdGhpc2BgIHdpdGggYGB3aWR0aGBgIGJpdHdpZHRoXG4gIEJOLnByb3RvdHlwZS5pbm90biA9IGZ1bmN0aW9uIGlub3RuICh3aWR0aCkge1xuICAgIGFzc2VydCh0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInICYmIHdpZHRoID49IDApO1xuXG4gICAgdmFyIGJ5dGVzTmVlZGVkID0gTWF0aC5jZWlsKHdpZHRoIC8gMjYpIHwgMDtcbiAgICB2YXIgYml0c0xlZnQgPSB3aWR0aCAlIDI2O1xuXG4gICAgLy8gRXh0ZW5kIHRoZSBidWZmZXIgd2l0aCBsZWFkaW5nIHplcm9lc1xuICAgIHRoaXMuX2V4cGFuZChieXRlc05lZWRlZCk7XG5cbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICBieXRlc05lZWRlZC0tO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBjb21wbGV0ZSB3b3Jkc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXNOZWVkZWQ7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSB0aGUgcmVzaWR1ZVxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmICgweDNmZmZmZmYgPj4gKDI2IC0gYml0c0xlZnQpKTtcbiAgICB9XG5cbiAgICAvLyBBbmQgcmVtb3ZlIGxlYWRpbmcgemVyb2VzXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubm90biA9IGZ1bmN0aW9uIG5vdG4gKHdpZHRoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbm90bih3aWR0aCk7XG4gIH07XG5cbiAgLy8gU2V0IGBiaXRgIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc2V0biA9IGZ1bmN0aW9uIHNldG4gKGJpdCwgdmFsKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcblxuICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgdGhpcy5fZXhwYW5kKG9mZiArIDEpO1xuXG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdIHwgKDEgPDwgd2JpdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSAmIH4oMSA8PCB3Yml0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChudW0pIHtcbiAgICB2YXIgcjtcblxuICAgIC8vIG5lZ2F0aXZlICsgcG9zaXRpdmVcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG5cbiAgICAvLyBwb3NpdGl2ZSArIG5lZ2F0aXZlXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGhdID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIC8vIENvcHkgdGhlIHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgfSBlbHNlIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChudW0pIHtcbiAgICB2YXIgcmVzO1xuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDAgJiYgdGhpcy5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IHRoaXMuc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIGlmIChudW0ubmVnYXRpdmUgPT09IDAgJiYgdGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSBudW0uc3ViKHRoaXMpO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZChudW0pO1xuXG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhZGQodGhpcyk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChudW0pIHtcbiAgICAvLyB0aGlzIC0gKC1udW0pID0gdGhpcyArIG51bVxuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICB2YXIgciA9IHRoaXMuaWFkZChudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gLXRoaXMgLSBudW0gPSAtKHRoaXMgKyBudW0pXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZChudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmVcbiAgICB2YXIgY21wID0gdGhpcy5jbXAobnVtKTtcblxuICAgIC8vIE9wdGltaXphdGlvbiAtIHplcm9pZnlcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gYSA+IGJcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoY21wID4gMCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApIC0gKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIENvcHkgcmVzdCBvZiB0aGUgd29yZHNcbiAgICBpZiAoY2FycnkgPT09IDAgJiYgaSA8IGEubGVuZ3RoICYmIGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpKTtcblxuICAgIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1YihudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNtYWxsTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICB2YXIgbGVuID0gKHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aCkgfCAwO1xuICAgIG91dC5sZW5ndGggPSBsZW47XG4gICAgbGVuID0gKGxlbiAtIDEpIHwgMDtcblxuICAgIC8vIFBlZWwgb25lIGl0ZXJhdGlvbiAoY29tcGlsZXIgY2FuJ3QgZG8gaXQsIGJlY2F1c2Ugb2YgY29kZSBjb21wbGV4aXR5KVxuICAgIHZhciBhID0gc2VsZi53b3Jkc1swXSB8IDA7XG4gICAgdmFyIGIgPSBudW0ud29yZHNbMF0gfCAwO1xuICAgIHZhciByID0gYSAqIGI7XG5cbiAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgIHZhciBjYXJyeSA9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgb3V0LndvcmRzWzBdID0gbG87XG5cbiAgICBmb3IgKHZhciBrID0gMTsgayA8IGxlbjsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGNhcnJ5ID4+PiAyNjtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gKGsgLSBqKSB8IDA7XG4gICAgICAgIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHIgPSBhICogYiArIHJ3b3JkO1xuICAgICAgICBuY2FycnkgKz0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgICAgcndvcmQgPSByICYgMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQgfCAwO1xuICAgICAgY2FycnkgPSBuY2FycnkgfCAwO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5IHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIC8vIFRPRE8oaW5kdXRueSk6IGl0IG1heSBiZSByZWFzb25hYmxlIHRvIG9taXQgaXQgZm9yIHVzZXJzIHdobyBkb24ndCBuZWVkXG4gIC8vIHRvIHdvcmsgd2l0aCAyNTYtYml0IG51bWJlcnMsIG90aGVyd2lzZSBpdCBnaXZlcyAyMCUgaW1wcm92ZW1lbnQgZm9yIDI1Ni1iaXRcbiAgLy8gbXVsdGlwbGljYXRpb24gKGxpa2UgZWxsaXB0aWMgc2VjcDI1NmsxKS5cbiAgdmFyIGNvbWIxME11bFRvID0gZnVuY3Rpb24gY29tYjEwTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGEgPSBzZWxmLndvcmRzO1xuICAgIHZhciBiID0gbnVtLndvcmRzO1xuICAgIHZhciBvID0gb3V0LndvcmRzO1xuICAgIHZhciBjID0gMDtcbiAgICB2YXIgbG87XG4gICAgdmFyIG1pZDtcbiAgICB2YXIgaGk7XG4gICAgdmFyIGEwID0gYVswXSB8IDA7XG4gICAgdmFyIGFsMCA9IGEwICYgMHgxZmZmO1xuICAgIHZhciBhaDAgPSBhMCA+Pj4gMTM7XG4gICAgdmFyIGExID0gYVsxXSB8IDA7XG4gICAgdmFyIGFsMSA9IGExICYgMHgxZmZmO1xuICAgIHZhciBhaDEgPSBhMSA+Pj4gMTM7XG4gICAgdmFyIGEyID0gYVsyXSB8IDA7XG4gICAgdmFyIGFsMiA9IGEyICYgMHgxZmZmO1xuICAgIHZhciBhaDIgPSBhMiA+Pj4gMTM7XG4gICAgdmFyIGEzID0gYVszXSB8IDA7XG4gICAgdmFyIGFsMyA9IGEzICYgMHgxZmZmO1xuICAgIHZhciBhaDMgPSBhMyA+Pj4gMTM7XG4gICAgdmFyIGE0ID0gYVs0XSB8IDA7XG4gICAgdmFyIGFsNCA9IGE0ICYgMHgxZmZmO1xuICAgIHZhciBhaDQgPSBhNCA+Pj4gMTM7XG4gICAgdmFyIGE1ID0gYVs1XSB8IDA7XG4gICAgdmFyIGFsNSA9IGE1ICYgMHgxZmZmO1xuICAgIHZhciBhaDUgPSBhNSA+Pj4gMTM7XG4gICAgdmFyIGE2ID0gYVs2XSB8IDA7XG4gICAgdmFyIGFsNiA9IGE2ICYgMHgxZmZmO1xuICAgIHZhciBhaDYgPSBhNiA+Pj4gMTM7XG4gICAgdmFyIGE3ID0gYVs3XSB8IDA7XG4gICAgdmFyIGFsNyA9IGE3ICYgMHgxZmZmO1xuICAgIHZhciBhaDcgPSBhNyA+Pj4gMTM7XG4gICAgdmFyIGE4ID0gYVs4XSB8IDA7XG4gICAgdmFyIGFsOCA9IGE4ICYgMHgxZmZmO1xuICAgIHZhciBhaDggPSBhOCA+Pj4gMTM7XG4gICAgdmFyIGE5ID0gYVs5XSB8IDA7XG4gICAgdmFyIGFsOSA9IGE5ICYgMHgxZmZmO1xuICAgIHZhciBhaDkgPSBhOSA+Pj4gMTM7XG4gICAgdmFyIGIwID0gYlswXSB8IDA7XG4gICAgdmFyIGJsMCA9IGIwICYgMHgxZmZmO1xuICAgIHZhciBiaDAgPSBiMCA+Pj4gMTM7XG4gICAgdmFyIGIxID0gYlsxXSB8IDA7XG4gICAgdmFyIGJsMSA9IGIxICYgMHgxZmZmO1xuICAgIHZhciBiaDEgPSBiMSA+Pj4gMTM7XG4gICAgdmFyIGIyID0gYlsyXSB8IDA7XG4gICAgdmFyIGJsMiA9IGIyICYgMHgxZmZmO1xuICAgIHZhciBiaDIgPSBiMiA+Pj4gMTM7XG4gICAgdmFyIGIzID0gYlszXSB8IDA7XG4gICAgdmFyIGJsMyA9IGIzICYgMHgxZmZmO1xuICAgIHZhciBiaDMgPSBiMyA+Pj4gMTM7XG4gICAgdmFyIGI0ID0gYls0XSB8IDA7XG4gICAgdmFyIGJsNCA9IGI0ICYgMHgxZmZmO1xuICAgIHZhciBiaDQgPSBiNCA+Pj4gMTM7XG4gICAgdmFyIGI1ID0gYls1XSB8IDA7XG4gICAgdmFyIGJsNSA9IGI1ICYgMHgxZmZmO1xuICAgIHZhciBiaDUgPSBiNSA+Pj4gMTM7XG4gICAgdmFyIGI2ID0gYls2XSB8IDA7XG4gICAgdmFyIGJsNiA9IGI2ICYgMHgxZmZmO1xuICAgIHZhciBiaDYgPSBiNiA+Pj4gMTM7XG4gICAgdmFyIGI3ID0gYls3XSB8IDA7XG4gICAgdmFyIGJsNyA9IGI3ICYgMHgxZmZmO1xuICAgIHZhciBiaDcgPSBiNyA+Pj4gMTM7XG4gICAgdmFyIGI4ID0gYls4XSB8IDA7XG4gICAgdmFyIGJsOCA9IGI4ICYgMHgxZmZmO1xuICAgIHZhciBiaDggPSBiOCA+Pj4gMTM7XG4gICAgdmFyIGI5ID0gYls5XSB8IDA7XG4gICAgdmFyIGJsOSA9IGI5ICYgMHgxZmZmO1xuICAgIHZhciBiaDkgPSBiOSA+Pj4gMTM7XG5cbiAgICBvdXQubmVnYXRpdmUgPSBzZWxmLm5lZ2F0aXZlIF4gbnVtLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSAxOTtcbiAgICAvKiBrID0gMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwwLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgwLCBiaDApO1xuICAgIHZhciB3MCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzAgPj4+IDI2KSkgfCAwO1xuICAgIHcwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwxLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgxLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMSkpIHwgMDtcbiAgICB2YXIgdzEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxID4+PiAyNikpIHwgMDtcbiAgICB3MSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDIsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgyKSkgfCAwO1xuICAgIHZhciB3MiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzIgPj4+IDI2KSkgfCAwO1xuICAgIHcyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwzLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgzLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgzKSkgfCAwO1xuICAgIHZhciB3MyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzMgPj4+IDI2KSkgfCAwO1xuICAgIHczICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw0LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg0LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNCkpIHwgMDtcbiAgICB2YXIgdzQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc0ID4+PiAyNikpIHwgMDtcbiAgICB3NCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDUsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg1KSkgfCAwO1xuICAgIHZhciB3NSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzUgPj4+IDI2KSkgfCAwO1xuICAgIHc1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw2LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg2LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg2KSkgfCAwO1xuICAgIHZhciB3NiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzYgPj4+IDI2KSkgfCAwO1xuICAgIHc2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw3LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg3LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNykpIHwgMDtcbiAgICB2YXIgdzcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc3ID4+PiAyNikpIHwgMDtcbiAgICB3NyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDgsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg4KSkgfCAwO1xuICAgIHZhciB3OCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzggPj4+IDI2KSkgfCAwO1xuICAgIHc4ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg5KSkgfCAwO1xuICAgIHZhciB3OSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzkgPj4+IDI2KSkgfCAwO1xuICAgIHc5ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgxKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwxKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgxKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMCA+Pj4gMjYpKSB8IDA7XG4gICAgdzEwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgyKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwyKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgyKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzExID4+PiAyNikpIHwgMDtcbiAgICB3MTEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwzKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDMpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDMpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDMpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMiA+Pj4gMjYpKSB8IDA7XG4gICAgdzEyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg0KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw0KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg0KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMyA+Pj4gMjYpKSB8IDA7XG4gICAgdzEzICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg1KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw1KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg1KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE0ID4+PiAyNikpIHwgMDtcbiAgICB3MTQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw2KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDYpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDYpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDYpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNSA+Pj4gMjYpKSB8IDA7XG4gICAgdzE1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg3KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw3KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg3KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNiA+Pj4gMjYpKSB8IDA7XG4gICAgdzE2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg4KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw4KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg4KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE3ID4+PiAyNikpIHwgMDtcbiAgICB3MTcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw5KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDkpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDkpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDkpO1xuICAgIHZhciB3MTggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxOCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE4ICY9IDB4M2ZmZmZmZjtcbiAgICBvWzBdID0gdzA7XG4gICAgb1sxXSA9IHcxO1xuICAgIG9bMl0gPSB3MjtcbiAgICBvWzNdID0gdzM7XG4gICAgb1s0XSA9IHc0O1xuICAgIG9bNV0gPSB3NTtcbiAgICBvWzZdID0gdzY7XG4gICAgb1s3XSA9IHc3O1xuICAgIG9bOF0gPSB3ODtcbiAgICBvWzldID0gdzk7XG4gICAgb1sxMF0gPSB3MTA7XG4gICAgb1sxMV0gPSB3MTE7XG4gICAgb1sxMl0gPSB3MTI7XG4gICAgb1sxM10gPSB3MTM7XG4gICAgb1sxNF0gPSB3MTQ7XG4gICAgb1sxNV0gPSB3MTU7XG4gICAgb1sxNl0gPSB3MTY7XG4gICAgb1sxN10gPSB3MTc7XG4gICAgb1sxOF0gPSB3MTg7XG4gICAgaWYgKGMgIT09IDApIHtcbiAgICAgIG9bMTldID0gYztcbiAgICAgIG91dC5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfTtcblxuICAvLyBQb2x5ZmlsbCBjb21iXG4gIGlmICghTWF0aC5pbXVsKSB7XG4gICAgY29tYjEwTXVsVG8gPSBzbWFsbE11bFRvO1xuICB9XG5cbiAgZnVuY3Rpb24gYmlnTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICB2YXIgaG5jYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBvdXQubGVuZ3RoIC0gMTsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgICBobmNhcnJ5ID0gMDtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gayAtIGo7XG4gICAgICAgIHZhciBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIHZhciBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgdmFyIHIgPSBhICogYjtcblxuICAgICAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKChyIC8gMHg0MDAwMDAwKSB8IDApKSB8IDA7XG4gICAgICAgIGxvID0gKGxvICsgcndvcmQpIHwgMDtcbiAgICAgICAgcndvcmQgPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArIChsbyA+Pj4gMjYpKSB8IDA7XG5cbiAgICAgICAgaG5jYXJyeSArPSBuY2FycnkgPj4+IDI2O1xuICAgICAgICBuY2FycnkgJj0gMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQ7XG4gICAgICBjYXJyeSA9IG5jYXJyeTtcbiAgICAgIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2Fycnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICBmdW5jdGlvbiBqdW1ib011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBmZnRtID0gbmV3IEZGVE0oKTtcbiAgICByZXR1cm4gZmZ0bS5tdWxwKHNlbGYsIG51bSwgb3V0KTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uIG11bFRvIChudW0sIG91dCkge1xuICAgIHZhciByZXM7XG4gICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aDtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEwICYmIG51bS5sZW5ndGggPT09IDEwKSB7XG4gICAgICByZXMgPSBjb21iMTBNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCA2Mykge1xuICAgICAgcmVzID0gc21hbGxNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCAxMDI0KSB7XG4gICAgICByZXMgPSBiaWdNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29vbGV5LVR1a2V5IGFsZ29yaXRobSBmb3IgRkZUXG4gIC8vIHNsaWdodGx5IHJldmlzaXRlZCB0byByZWx5IG9uIGxvb3BpbmcgaW5zdGVhZCBvZiByZWN1cnNpb25cblxuICBmdW5jdGlvbiBGRlRNICh4LCB5KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgRkZUTS5wcm90b3R5cGUubWFrZVJCVCA9IGZ1bmN0aW9uIG1ha2VSQlQgKE4pIHtcbiAgICB2YXIgdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbCA9IEJOLnByb3RvdHlwZS5fY291bnRCaXRzKE4pIC0gMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdFtpXSA9IHRoaXMucmV2QmluKGksIGwsIE4pO1xuICAgIH1cblxuICAgIHJldHVybiB0O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYmluYXJ5LXJldmVyc2VkIHJlcHJlc2VudGF0aW9uIG9mIGB4YFxuICBGRlRNLnByb3RvdHlwZS5yZXZCaW4gPSBmdW5jdGlvbiByZXZCaW4gKHgsIGwsIE4pIHtcbiAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSBOIC0gMSkgcmV0dXJuIHg7XG5cbiAgICB2YXIgcmIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICByYiB8PSAoeCAmIDEpIDw8IChsIC0gaSAtIDEpO1xuICAgICAgeCA+Pj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmI7XG4gIH07XG5cbiAgLy8gUGVyZm9ybXMgXCJ0d2VlZGxpbmdcIiBwaGFzZSwgdGhlcmVmb3JlICdlbXVsYXRpbmcnXG4gIC8vIGJlaGF2aW91ciBvZiB0aGUgcmVjdXJzaXZlIGFsZ29yaXRobVxuICBGRlRNLnByb3RvdHlwZS5wZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZSAocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBydHdzW2ldID0gcndzW3JidFtpXV07XG4gICAgICBpdHdzW2ldID0gaXdzW3JidFtpXV07XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIHRyYW5zZm9ybSAocndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4sIHJidCkge1xuICAgIHRoaXMucGVybXV0ZShyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKTtcblxuICAgIGZvciAodmFyIHMgPSAxOyBzIDwgTjsgcyA8PD0gMSkge1xuICAgICAgdmFyIGwgPSBzIDw8IDE7XG5cbiAgICAgIHZhciBydHdkZiA9IE1hdGguY29zKDIgKiBNYXRoLlBJIC8gbCk7XG4gICAgICB2YXIgaXR3ZGYgPSBNYXRoLnNpbigyICogTWF0aC5QSSAvIGwpO1xuXG4gICAgICBmb3IgKHZhciBwID0gMDsgcCA8IE47IHAgKz0gbCkge1xuICAgICAgICB2YXIgcnR3ZGZfID0gcnR3ZGY7XG4gICAgICAgIHZhciBpdHdkZl8gPSBpdHdkZjtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHM7IGorKykge1xuICAgICAgICAgIHZhciByZSA9IHJ0d3NbcCArIGpdO1xuICAgICAgICAgIHZhciBpZSA9IGl0d3NbcCArIGpdO1xuXG4gICAgICAgICAgdmFyIHJvID0gcnR3c1twICsgaiArIHNdO1xuICAgICAgICAgIHZhciBpbyA9IGl0d3NbcCArIGogKyBzXTtcblxuICAgICAgICAgIHZhciByeCA9IHJ0d2RmXyAqIHJvIC0gaXR3ZGZfICogaW87XG5cbiAgICAgICAgICBpbyA9IHJ0d2RmXyAqIGlvICsgaXR3ZGZfICogcm87XG4gICAgICAgICAgcm8gPSByeDtcblxuICAgICAgICAgIHJ0d3NbcCArIGpdID0gcmUgKyBybztcbiAgICAgICAgICBpdHdzW3AgKyBqXSA9IGllICsgaW87XG5cbiAgICAgICAgICBydHdzW3AgKyBqICsgc10gPSByZSAtIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGogKyBzXSA9IGllIC0gaW87XG5cbiAgICAgICAgICAvKiBqc2hpbnQgbWF4ZGVwdGggOiBmYWxzZSAqL1xuICAgICAgICAgIGlmIChqICE9PSBsKSB7XG4gICAgICAgICAgICByeCA9IHJ0d2RmICogcnR3ZGZfIC0gaXR3ZGYgKiBpdHdkZl87XG5cbiAgICAgICAgICAgIGl0d2RmXyA9IHJ0d2RmICogaXR3ZGZfICsgaXR3ZGYgKiBydHdkZl87XG4gICAgICAgICAgICBydHdkZl8gPSByeDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuZ3Vlc3NMZW4xM2IgPSBmdW5jdGlvbiBndWVzc0xlbjEzYiAobiwgbSkge1xuICAgIHZhciBOID0gTWF0aC5tYXgobSwgbikgfCAxO1xuICAgIHZhciBvZGQgPSBOICYgMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yIChOID0gTiAvIDIgfCAwOyBOOyBOID0gTiA+Pj4gMSkge1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiAxIDw8IGkgKyAxICsgb2RkO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbmp1Z2F0ZSA9IGZ1bmN0aW9uIGNvbmp1Z2F0ZSAocndzLCBpd3MsIE4pIHtcbiAgICBpZiAoTiA8PSAxKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB0ID0gcndzW2ldO1xuXG4gICAgICByd3NbaV0gPSByd3NbTiAtIGkgLSAxXTtcbiAgICAgIHJ3c1tOIC0gaSAtIDFdID0gdDtcblxuICAgICAgdCA9IGl3c1tpXTtcblxuICAgICAgaXdzW2ldID0gLWl3c1tOIC0gaSAtIDFdO1xuICAgICAgaXdzW04gLSBpIC0gMV0gPSAtdDtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubm9ybWFsaXplMTNiID0gZnVuY3Rpb24gbm9ybWFsaXplMTNiICh3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdyA9IE1hdGgucm91bmQod3NbMiAqIGkgKyAxXSAvIE4pICogMHgyMDAwICtcbiAgICAgICAgTWF0aC5yb3VuZCh3c1syICogaV0gLyBOKSArXG4gICAgICAgIGNhcnJ5O1xuXG4gICAgICB3c1tpXSA9IHcgJiAweDNmZmZmZmY7XG5cbiAgICAgIGlmICh3IDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcnJ5ID0gdyAvIDB4NDAwMDAwMCB8IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdzO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbnZlcnQxM2IgPSBmdW5jdGlvbiBjb252ZXJ0MTNiICh3cywgbGVuLCByd3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNhcnJ5ID0gY2FycnkgKyAod3NbaV0gfCAwKTtcblxuICAgICAgcndzWzIgKiBpXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICAgIHJ3c1syICogaSArIDFdID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgIH1cblxuICAgIC8vIFBhZCB3aXRoIHplcm9lc1xuICAgIGZvciAoaSA9IDIgKiBsZW47IGkgPCBOOyArK2kpIHtcbiAgICAgIHJ3c1tpXSA9IDA7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAwKTtcbiAgICBhc3NlcnQoKGNhcnJ5ICYgfjB4MWZmZikgPT09IDApO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnN0dWIgPSBmdW5jdGlvbiBzdHViIChOKSB7XG4gICAgdmFyIHBoID0gbmV3IEFycmF5KE4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBwaFtpXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBoO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm11bHAgPSBmdW5jdGlvbiBtdWxwICh4LCB5LCBvdXQpIHtcbiAgICB2YXIgTiA9IDIgKiB0aGlzLmd1ZXNzTGVuMTNiKHgubGVuZ3RoLCB5Lmxlbmd0aCk7XG5cbiAgICB2YXIgcmJ0ID0gdGhpcy5tYWtlUkJUKE4pO1xuXG4gICAgdmFyIF8gPSB0aGlzLnN0dWIoTik7XG5cbiAgICB2YXIgcndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciByd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBpd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIG5yd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5yd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBuaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBybXdzID0gb3V0LndvcmRzO1xuICAgIHJtd3MubGVuZ3RoID0gTjtcblxuICAgIHRoaXMuY29udmVydDEzYih4LndvcmRzLCB4Lmxlbmd0aCwgcndzLCBOKTtcbiAgICB0aGlzLmNvbnZlcnQxM2IoeS53b3JkcywgeS5sZW5ndGgsIG5yd3MsIE4pO1xuXG4gICAgdGhpcy50cmFuc2Zvcm0ocndzLCBfLCByd3N0LCBpd3N0LCBOLCByYnQpO1xuICAgIHRoaXMudHJhbnNmb3JtKG5yd3MsIF8sIG5yd3N0LCBuaXdzdCwgTiwgcmJ0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB2YXIgcnggPSByd3N0W2ldICogbnJ3c3RbaV0gLSBpd3N0W2ldICogbml3c3RbaV07XG4gICAgICBpd3N0W2ldID0gcndzdFtpXSAqIG5pd3N0W2ldICsgaXdzdFtpXSAqIG5yd3N0W2ldO1xuICAgICAgcndzdFtpXSA9IHJ4O1xuICAgIH1cblxuICAgIHRoaXMuY29uanVnYXRlKHJ3c3QsIGl3c3QsIE4pO1xuICAgIHRoaXMudHJhbnNmb3JtKHJ3c3QsIGl3c3QsIHJtd3MsIF8sIE4sIHJidCk7XG4gICAgdGhpcy5jb25qdWdhdGUocm13cywgXywgTik7XG4gICAgdGhpcy5ub3JtYWxpemUxM2Iocm13cywgTik7XG5cbiAgICBvdXQubmVnYXRpdmUgPSB4Lm5lZ2F0aXZlIF4geS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0geC5sZW5ndGggKyB5Lmxlbmd0aDtcbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgYHRoaXNgIGJ5IGBudW1gXG4gIEJOLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMubXVsVG8obnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGVtcGxveWluZyBGRlRcbiAgQk4ucHJvdG90eXBlLm11bGYgPSBmdW5jdGlvbiBtdWxmIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBNdWx0aXBsaWNhdGlvblxuICBCTi5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubXVsVG8obnVtLCB0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW11bG4gPSBmdW5jdGlvbiBpbXVsbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcblxuICAgIC8vIENhcnJ5XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSAqIG51bTtcbiAgICAgIHZhciBsbyA9ICh3ICYgMHgzZmZmZmZmKSArIChjYXJyeSAmIDB4M2ZmZmZmZik7XG4gICAgICBjYXJyeSA+Pj0gMjY7XG4gICAgICBjYXJyeSArPSAodyAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgLy8gTk9URTogbG8gaXMgMjdiaXQgbWF4aW11bVxuICAgICAgY2FycnkgKz0gbG8gPj4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubXVsbiA9IGZ1bmN0aW9uIG11bG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW11bG4obnVtKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKHRoaXMpO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLmltdWwodGhpcy5jbG9uZSgpKTtcbiAgfTtcblxuICAvLyBNYXRoLnBvdyhgdGhpc2AsIGBudW1gKVxuICBCTi5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChudW0pIHtcbiAgICB2YXIgdyA9IHRvQml0QXJyYXkobnVtKTtcbiAgICBpZiAody5sZW5ndGggPT09IDApIHJldHVybiBuZXcgQk4oMSk7XG5cbiAgICAvLyBTa2lwIGxlYWRpbmcgemVyb2VzXG4gICAgdmFyIHJlcyA9IHRoaXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3Lmxlbmd0aDsgaSsrLCByZXMgPSByZXMuc3FyKCkpIHtcbiAgICAgIGlmICh3W2ldICE9PSAwKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoKytpIDwgdy5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIHEgPSByZXMuc3FyKCk7IGkgPCB3Lmxlbmd0aDsgaSsrLCBxID0gcS5zcXIoKSkge1xuICAgICAgICBpZiAod1tpXSA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gcmVzLm11bChxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnQgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1c2hsbiA9IGZ1bmN0aW9uIGl1c2hsbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcbiAgICB2YXIgY2FycnlNYXNrID0gKDB4M2ZmZmZmZiA+Pj4gKDI2IC0gcikpIDw8ICgyNiAtIHIpO1xuICAgIHZhciBpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXdDYXJyeSA9IHRoaXMud29yZHNbaV0gJiBjYXJyeU1hc2s7XG4gICAgICAgIHZhciBjID0gKCh0aGlzLndvcmRzW2ldIHwgMCkgLSBuZXdDYXJyeSkgPDwgcjtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGMgfCBjYXJyeTtcbiAgICAgICAgY2FycnkgPSBuZXdDYXJyeSA+Pj4gKDI2IC0gcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYXJyeSkge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHMgIT09IDApIHtcbiAgICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgc10gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlbmd0aCArPSBzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaGxuID0gZnVuY3Rpb24gaXNobG4gKGJpdHMpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0IGluLXBsYWNlXG4gIC8vIE5PVEU6IGBoaW50YCBpcyBhIGxvd2VzdCBiaXQgYmVmb3JlIHRyYWlsaW5nIHplcm9lc1xuICAvLyBOT1RFOiBpZiBgZXh0ZW5kZWRgIGlzIHByZXNlbnQgLSBpdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGRlc3Ryb3llZCBiaXRzXG4gIEJOLnByb3RvdHlwZS5pdXNocm4gPSBmdW5jdGlvbiBpdXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciBoO1xuICAgIGlmIChoaW50KSB7XG4gICAgICBoID0gKGhpbnQgLSAoaGludCAlIDI2KSkgLyAyNjtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IDA7XG4gICAgfVxuXG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSBNYXRoLm1pbigoYml0cyAtIHIpIC8gMjYsIHRoaXMubGVuZ3RoKTtcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICB2YXIgbWFza2VkV29yZHMgPSBleHRlbmRlZDtcblxuICAgIGggLT0gcztcbiAgICBoID0gTWF0aC5tYXgoMCwgaCk7XG5cbiAgICAvLyBFeHRlbmRlZCBtb2RlLCBjb3B5IG1hc2tlZCBwYXJ0XG4gICAgaWYgKG1hc2tlZFdvcmRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICBtYXNrZWRXb3Jkcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG4gICAgICBtYXNrZWRXb3Jkcy5sZW5ndGggPSBzO1xuICAgIH1cblxuICAgIGlmIChzID09PSAwKSB7XG4gICAgICAvLyBOby1vcCwgd2Ugc2hvdWxkIG5vdCBtb3ZlIGFueXRoaW5nIGF0IGFsbFxuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiBzKSB7XG4gICAgICB0aGlzLmxlbmd0aCAtPSBzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaSArIHNdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIChjYXJyeSAhPT0gMCB8fCBpID49IGgpOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKGNhcnJ5IDw8ICgyNiAtIHIpKSB8ICh3b3JkID4+PiByKTtcbiAgICAgIGNhcnJ5ID0gd29yZCAmIG1hc2s7XG4gICAgfVxuXG4gICAgLy8gUHVzaCBjYXJyaWVkIGJpdHMgYXMgYSBtYXNrXG4gICAgaWYgKG1hc2tlZFdvcmRzICYmIGNhcnJ5ICE9PSAwKSB7XG4gICAgICBtYXNrZWRXb3Jkcy53b3Jkc1ttYXNrZWRXb3Jkcy5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaHJuID0gZnVuY3Rpb24gaXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hybihiaXRzLCBoaW50LCBleHRlbmRlZCk7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdFxuICBCTi5wcm90b3R5cGUuc2hsbiA9IGZ1bmN0aW9uIHNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaGxuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hsbiA9IGZ1bmN0aW9uIHVzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHRcbiAgQk4ucHJvdG90eXBlLnNocm4gPSBmdW5jdGlvbiBzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hybihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNocm4gPSBmdW5jdGlvbiB1c2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaHJuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFRlc3QgaWYgbiBiaXQgaXMgc2V0XG4gIEJOLnByb3RvdHlwZS50ZXN0biA9IGZ1bmN0aW9uIHRlc3RuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIENoZWNrIGJpdCBhbmQgcmV0dXJuXG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3NdO1xuXG4gICAgcmV0dXJuICEhKHcgJiBxKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXIgKGluLXBsYWNlKVxuICBCTi5wcm90b3R5cGUuaW1hc2tuID0gZnVuY3Rpb24gaW1hc2tuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdpbWFza24gd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlIG51bWJlcnMnKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgcysrO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWluKHMsIHRoaXMubGVuZ3RoKTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSAmPSBtYXNrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5tYXNrbiA9IGZ1bmN0aW9uIG1hc2tuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbWFza24oYml0cyk7XG4gIH07XG5cbiAgLy8gQWRkIHBsYWluIG51bWJlciBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlhZGRuID0gZnVuY3Rpb24gaWFkZG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlzdWJuKC1udW0pO1xuXG4gICAgLy8gUG9zc2libGUgc2lnbiBjaGFuZ2VcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmICh0aGlzLndvcmRzWzBdIHwgMCkgPCBudW0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSA9IG51bSAtICh0aGlzLndvcmRzWzBdIHwgMCk7XG4gICAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlzdWJuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRob3V0IGNoZWNrc1xuICAgIHJldHVybiB0aGlzLl9pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faWFkZG4gPSBmdW5jdGlvbiBfaWFkZG4gKG51bSkge1xuICAgIHRoaXMud29yZHNbMF0gKz0gbnVtO1xuXG4gICAgLy8gQ2FycnlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPj0gMHg0MDAwMDAwOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gLT0gMHg0MDAwMDAwO1xuICAgICAgaWYgKGkgPT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSsrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpICsgMSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBwbGFpbiBudW1iZXIgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlzdWJuID0gZnVuY3Rpb24gaXN1Ym4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlhZGRuKC1udW0pO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkbihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLndvcmRzWzBdIC09IG51bTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdIDwgMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IC10aGlzLndvcmRzWzBdO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENhcnJ5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPCAwOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSArPSAweDQwMDAwMDA7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdIC09IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWRkbiA9IGZ1bmN0aW9uIGFkZG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuc3VibiA9IGZ1bmN0aW9uIHN1Ym4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1Ym4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFicyA9IGZ1bmN0aW9uIGlhYnMgKCkge1xuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uIGFicyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWJzKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pc2hsbnN1Ym11bCA9IGZ1bmN0aW9uIF9pc2hsbnN1Ym11bCAobnVtLCBtdWwsIHNoaWZ0KSB7XG4gICAgdmFyIGxlbiA9IG51bS5sZW5ndGggKyBzaGlmdDtcbiAgICB2YXIgaTtcblxuICAgIHRoaXMuX2V4cGFuZChsZW4pO1xuXG4gICAgdmFyIHc7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICB2YXIgcmlnaHQgPSAobnVtLndvcmRzW2ldIHwgMCkgKiBtdWw7XG4gICAgICB3IC09IHJpZ2h0ICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSAodyA+PiAyNikgLSAoKHJpZ2h0IC8gMHg0MDAwMDAwKSB8IDApO1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGkgPCB0aGlzLmxlbmd0aCAtIHNoaWZ0OyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ID09PSAwKSByZXR1cm4gdGhpcy5zdHJpcCgpO1xuXG4gICAgLy8gU3VidHJhY3Rpb24gb3ZlcmZsb3dcbiAgICBhc3NlcnQoY2FycnkgPT09IC0xKTtcbiAgICBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAtKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3dvcmREaXYgPSBmdW5jdGlvbiBfd29yZERpdiAobnVtLCBtb2RlKSB7XG4gICAgdmFyIHNoaWZ0ID0gdGhpcy5sZW5ndGggLSBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW07XG5cbiAgICAvLyBOb3JtYWxpemVcbiAgICB2YXIgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB2YXIgYmhpQml0cyA9IHRoaXMuX2NvdW50Qml0cyhiaGkpO1xuICAgIHNoaWZ0ID0gMjYgLSBiaGlCaXRzO1xuICAgIGlmIChzaGlmdCAhPT0gMCkge1xuICAgICAgYiA9IGIudXNobG4oc2hpZnQpO1xuICAgICAgYS5pdXNobG4oc2hpZnQpO1xuICAgICAgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHF1b3RpZW50XG4gICAgdmFyIG0gPSBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICAgIHZhciBxO1xuXG4gICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICBxID0gbmV3IEJOKG51bGwpO1xuICAgICAgcS5sZW5ndGggPSBtICsgMTtcbiAgICAgIHEud29yZHMgPSBuZXcgQXJyYXkocS5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHEud29yZHNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkaWZmID0gYS5jbG9uZSgpLl9pc2hsbnN1Ym11bChiLCAxLCBtKTtcbiAgICBpZiAoZGlmZi5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgYSA9IGRpZmY7XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW21dID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gbSAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICB2YXIgcWogPSAoYS53b3Jkc1tiLmxlbmd0aCArIGpdIHwgMCkgKiAweDQwMDAwMDAgK1xuICAgICAgICAoYS53b3Jkc1tiLmxlbmd0aCArIGogLSAxXSB8IDApO1xuXG4gICAgICAvLyBOT1RFOiAocWogLyBiaGkpIGlzICgweDNmZmZmZmYgKiAweDQwMDAwMDAgKyAweDNmZmZmZmYpIC8gMHgyMDAwMDAwIG1heFxuICAgICAgLy8gKDB4N2ZmZmZmZilcbiAgICAgIHFqID0gTWF0aC5taW4oKHFqIC8gYmhpKSB8IDAsIDB4M2ZmZmZmZik7XG5cbiAgICAgIGEuX2lzaGxuc3VibXVsKGIsIHFqLCBqKTtcbiAgICAgIHdoaWxlIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIHFqLS07XG4gICAgICAgIGEubmVnYXRpdmUgPSAwO1xuICAgICAgICBhLl9pc2hsbnN1Ym11bChiLCAxLCBqKTtcbiAgICAgICAgaWYgKCFhLmlzWmVybygpKSB7XG4gICAgICAgICAgYS5uZWdhdGl2ZSBePSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW2pdID0gcWo7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChxKSB7XG4gICAgICBxLnN0cmlwKCk7XG4gICAgfVxuICAgIGEuc3RyaXAoKTtcblxuICAgIC8vIERlbm9ybWFsaXplXG4gICAgaWYgKG1vZGUgIT09ICdkaXYnICYmIHNoaWZ0ICE9PSAwKSB7XG4gICAgICBhLml1c2hybihzaGlmdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpdjogcSB8fCBudWxsLFxuICAgICAgbW9kOiBhXG4gICAgfTtcbiAgfTtcblxuICAvLyBOT1RFOiAxKSBgbW9kZWAgY2FuIGJlIHNldCB0byBgbW9kYCB0byByZXF1ZXN0IG1vZCBvbmx5LFxuICAvLyAgICAgICB0byBgZGl2YCB0byByZXF1ZXN0IGRpdiBvbmx5LCBvciBiZSBhYnNlbnQgdG9cbiAgLy8gICAgICAgcmVxdWVzdCBib3RoIGRpdiAmIG1vZFxuICAvLyAgICAgICAyKSBgcG9zaXRpdmVgIGlzIHRydWUgaWYgdW5zaWduZWQgbW9kIGlzIHJlcXVlc3RlZFxuICBCTi5wcm90b3R5cGUuZGl2bW9kID0gZnVuY3Rpb24gZGl2bW9kIChudW0sIG1vZGUsIHBvc2l0aXZlKSB7XG4gICAgYXNzZXJ0KCFudW0uaXNaZXJvKCkpO1xuXG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IG5ldyBCTigwKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGl2LCBtb2QsIHJlcztcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pYWRkKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IHJlcy5tb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLm5lZ2F0aXZlICYgbnVtLm5lZ2F0aXZlKSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaXN1YihudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogcmVzLmRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZSBhdCB0aGlzIHBvaW50XG5cbiAgICAvLyBTdHJpcCBib3RoIG51bWJlcnMgdG8gYXBwcm94aW1hdGUgc2hpZnQgdmFsdWVcbiAgICBpZiAobnVtLmxlbmd0aCA+IHRoaXMubGVuZ3RoIHx8IHRoaXMuY21wKG51bSkgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiB0aGlzXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFZlcnkgc2hvcnQgcmVkdWN0aW9uXG4gICAgaWYgKG51bS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChtb2RlID09PSAnZGl2Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgICAgbW9kOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlID09PSAnbW9kJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogbnVsbCxcbiAgICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl93b3JkRGl2KG51bSwgbW9kZSk7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgLyBgbnVtYFxuICBCTi5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24gZGl2IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnZGl2JywgZmFsc2UpLmRpdjtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAlIGBudW1gXG4gIEJOLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiBtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCBmYWxzZSkubW9kO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51bW9kID0gZnVuY3Rpb24gdW1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIHRydWUpLm1vZDtcbiAgfTtcblxuICAvLyBGaW5kIFJvdW5kKGB0aGlzYCAvIGBudW1gKVxuICBCTi5wcm90b3R5cGUuZGl2Um91bmQgPSBmdW5jdGlvbiBkaXZSb3VuZCAobnVtKSB7XG4gICAgdmFyIGRtID0gdGhpcy5kaXZtb2QobnVtKTtcblxuICAgIC8vIEZhc3QgY2FzZSAtIGV4YWN0IGRpdmlzaW9uXG4gICAgaWYgKGRtLm1vZC5pc1plcm8oKSkgcmV0dXJuIGRtLmRpdjtcblxuICAgIHZhciBtb2QgPSBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5tb2QuaXN1YihudW0pIDogZG0ubW9kO1xuXG4gICAgdmFyIGhhbGYgPSBudW0udXNocm4oMSk7XG4gICAgdmFyIHIyID0gbnVtLmFuZGxuKDEpO1xuICAgIHZhciBjbXAgPSBtb2QuY21wKGhhbGYpO1xuXG4gICAgLy8gUm91bmQgZG93blxuICAgIGlmIChjbXAgPCAwIHx8IHIyID09PSAxICYmIGNtcCA9PT0gMCkgcmV0dXJuIGRtLmRpdjtcblxuICAgIC8vIFJvdW5kIHVwXG4gICAgcmV0dXJuIGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLmRpdi5pc3VibigxKSA6IGRtLmRpdi5pYWRkbigxKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubW9kbiA9IGZ1bmN0aW9uIG1vZG4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcbiAgICB2YXIgcCA9ICgxIDw8IDI2KSAlIG51bTtcblxuICAgIHZhciBhY2MgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBhY2MgPSAocCAqIGFjYyArICh0aGlzLndvcmRzW2ldIHwgMCkpICUgbnVtO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgZGl2aXNpb24gYnkgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5pZGl2biA9IGZ1bmN0aW9uIGlkaXZuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeSAqIDB4NDAwMDAwMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAodyAvIG51bSkgfCAwO1xuICAgICAgY2FycnkgPSB3ICUgbnVtO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmRpdm4gPSBmdW5jdGlvbiBkaXZuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlkaXZuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVnY2QgPSBmdW5jdGlvbiBlZ2NkIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgeCA9IHRoaXM7XG4gICAgdmFyIHkgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoeC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgeCA9IHgudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHguY2xvbmUoKTtcbiAgICB9XG5cbiAgICAvLyBBICogeCArIEIgKiB5ID0geFxuICAgIHZhciBBID0gbmV3IEJOKDEpO1xuICAgIHZhciBCID0gbmV3IEJOKDApO1xuXG4gICAgLy8gQyAqIHggKyBEICogeSA9IHlcbiAgICB2YXIgQyA9IG5ldyBCTigwKTtcbiAgICB2YXIgRCA9IG5ldyBCTigxKTtcblxuICAgIHZhciBnID0gMDtcblxuICAgIHdoaWxlICh4LmlzRXZlbigpICYmIHkuaXNFdmVuKCkpIHtcbiAgICAgIHguaXVzaHJuKDEpO1xuICAgICAgeS5pdXNocm4oMSk7XG4gICAgICArK2c7XG4gICAgfVxuXG4gICAgdmFyIHlwID0geS5jbG9uZSgpO1xuICAgIHZhciB4cCA9IHguY2xvbmUoKTtcblxuICAgIHdoaWxlICgheC5pc1plcm8oKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKHgud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICB4Lml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoQS5pc09kZCgpIHx8IEIuaXNPZGQoKSkge1xuICAgICAgICAgICAgQS5pYWRkKHlwKTtcbiAgICAgICAgICAgIEIuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQS5pdXNocm4oMSk7XG4gICAgICAgICAgQi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKHkud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICB5Lml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoQy5pc09kZCgpIHx8IEQuaXNPZGQoKSkge1xuICAgICAgICAgICAgQy5pYWRkKHlwKTtcbiAgICAgICAgICAgIEQuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQy5pdXNocm4oMSk7XG4gICAgICAgICAgRC5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHguY21wKHkpID49IDApIHtcbiAgICAgICAgeC5pc3ViKHkpO1xuICAgICAgICBBLmlzdWIoQyk7XG4gICAgICAgIEIuaXN1YihEKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkuaXN1Yih4KTtcbiAgICAgICAgQy5pc3ViKEEpO1xuICAgICAgICBELmlzdWIoQik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGE6IEMsXG4gICAgICBiOiBELFxuICAgICAgZ2NkOiB5Lml1c2hsbihnKVxuICAgIH07XG4gIH07XG5cbiAgLy8gVGhpcyBpcyByZWR1Y2VkIGluY2FybmF0aW9uIG9mIHRoZSBiaW5hcnkgRUVBXG4gIC8vIGFib3ZlLCBkZXNpZ25hdGVkIHRvIGludmVydCBtZW1iZXJzIG9mIHRoZVxuICAvLyBfcHJpbWVfIGZpZWxkcyBGKHApIGF0IGEgbWF4aW1hbCBzcGVlZFxuICBCTi5wcm90b3R5cGUuX2ludm1wID0gZnVuY3Rpb24gX2ludm1wIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgYSA9IHRoaXM7XG4gICAgdmFyIGIgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgYSA9IGEudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIHgyID0gbmV3IEJOKDApO1xuXG4gICAgdmFyIGRlbHRhID0gYi5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKGEuY21wbigxKSA+IDAgJiYgYi5jbXBuKDEpID4gMCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKGEud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICBhLml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDEuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDEuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDEuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7IChiLndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgYi5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgyLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgyLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgyLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYS5jbXAoYikgPj0gMCkge1xuICAgICAgICBhLmlzdWIoYik7XG4gICAgICAgIHgxLmlzdWIoeDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYi5pc3ViKGEpO1xuICAgICAgICB4Mi5pc3ViKHgxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmIChhLmNtcG4oMSkgPT09IDApIHtcbiAgICAgIHJlcyA9IHgxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSB4MjtcbiAgICB9XG5cbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZChwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5nY2QgPSBmdW5jdGlvbiBnY2QgKG51bSkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gbnVtLmFicygpO1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiB0aGlzLmFicygpO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW0uY2xvbmUoKTtcbiAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICBiLm5lZ2F0aXZlID0gMDtcblxuICAgIC8vIFJlbW92ZSBjb21tb24gZmFjdG9yIG9mIHR3b1xuICAgIGZvciAodmFyIHNoaWZ0ID0gMDsgYS5pc0V2ZW4oKSAmJiBiLmlzRXZlbigpOyBzaGlmdCsrKSB7XG4gICAgICBhLml1c2hybigxKTtcbiAgICAgIGIuaXVzaHJuKDEpO1xuICAgIH1cblxuICAgIGRvIHtcbiAgICAgIHdoaWxlIChhLmlzRXZlbigpKSB7XG4gICAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGIuaXNFdmVuKCkpIHtcbiAgICAgICAgYi5pdXNocm4oMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByID0gYS5jbXAoYik7XG4gICAgICBpZiAociA8IDApIHtcbiAgICAgICAgLy8gU3dhcCBgYWAgYW5kIGBiYCB0byBtYWtlIGBhYCBhbHdheXMgYmlnZ2VyIHRoYW4gYGJgXG4gICAgICAgIHZhciB0ID0gYTtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGIgPSB0O1xuICAgICAgfSBlbHNlIGlmIChyID09PSAwIHx8IGIuY21wbigxKSA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgYS5pc3ViKGIpO1xuICAgIH0gd2hpbGUgKHRydWUpO1xuXG4gICAgcmV0dXJuIGIuaXVzaGxuKHNoaWZ0KTtcbiAgfTtcblxuICAvLyBJbnZlcnQgbnVtYmVyIGluIHRoZSBmaWVsZCBGKG51bSlcbiAgQk4ucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5lZ2NkKG51bSkuYS51bW9kKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uIGlzRXZlbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzT2RkID0gZnVuY3Rpb24gaXNPZGQgKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAxO1xuICB9O1xuXG4gIC8vIEFuZCBmaXJzdCB3b3JkIGFuZCBudW1cbiAgQk4ucHJvdG90eXBlLmFuZGxuID0gZnVuY3Rpb24gYW5kbG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLndvcmRzWzBdICYgbnVtO1xuICB9O1xuXG4gIC8vIEluY3JlbWVudCBhdCB0aGUgYml0IHBvc2l0aW9uIGluLWxpbmVcbiAgQk4ucHJvdG90eXBlLmJpbmNuID0gZnVuY3Rpb24gYmluY24gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgdGhpcy5fZXhwYW5kKHMgKyAxKTtcbiAgICAgIHRoaXMud29yZHNbc10gfD0gcTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBiaXQgYW5kIHByb3BhZ2F0ZSwgaWYgbmVlZGVkXG4gICAgdmFyIGNhcnJ5ID0gcTtcbiAgICBmb3IgKHZhciBpID0gczsgY2FycnkgIT09IDAgJiYgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB3ICs9IGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+PiAyNjtcbiAgICAgIHcgJj0gMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHc7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uIGlzWmVybyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNtcG4gPSBmdW5jdGlvbiBjbXBuIChudW0pIHtcbiAgICB2YXIgbmVnYXRpdmUgPSBudW0gPCAwO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgIW5lZ2F0aXZlKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbmVnYXRpdmUpIHJldHVybiAxO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgdmFyIHJlcztcbiAgICBpZiAodGhpcy5sZW5ndGggPiAxKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmVnYXRpdmUpIHtcbiAgICAgICAgbnVtID0gLW51bTtcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYsICdOdW1iZXIgaXMgdG9vIGJpZycpO1xuXG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbMF0gfCAwO1xuICAgICAgcmVzID0gdyA9PT0gbnVtID8gMCA6IHcgPCBudW0gPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb21wYXJlIHR3byBudW1iZXJzIGFuZCByZXR1cm46XG4gIC8vIDEgLSBpZiBgdGhpc2AgPiBgbnVtYFxuICAvLyAwIC0gaWYgYHRoaXNgID09IGBudW1gXG4gIC8vIC0xIC0gaWYgYHRoaXNgIDwgYG51bWBcbiAgQk4ucHJvdG90eXBlLmNtcCA9IGZ1bmN0aW9uIGNtcCAobnVtKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gMTtcblxuICAgIHZhciByZXMgPSB0aGlzLnVjbXAobnVtKTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gVW5zaWduZWQgY29tcGFyaXNvblxuICBCTi5wcm90b3R5cGUudWNtcCA9IGZ1bmN0aW9uIHVjbXAgKG51bSkge1xuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGhhdmUgdGhlIHNhbWUgc2lnblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiAxO1xuICAgIGlmICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHJldHVybiAtMTtcblxuICAgIHZhciByZXMgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgYSA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdmFyIGIgPSBudW0ud29yZHNbaV0gfCAwO1xuXG4gICAgICBpZiAoYSA9PT0gYikgY29udGludWU7XG4gICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmVzID0gLTE7XG4gICAgICB9IGVsc2UgaWYgKGEgPiBiKSB7XG4gICAgICAgIHJlcyA9IDE7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RuID0gZnVuY3Rpb24gZ3RuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ID0gZnVuY3Rpb24gZ3QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGVuID0gZnVuY3Rpb24gZ3RlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZSA9IGZ1bmN0aW9uIGd0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRuID0gZnVuY3Rpb24gbHRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdCA9IGZ1bmN0aW9uIGx0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZW4gPSBmdW5jdGlvbiBsdGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlID0gZnVuY3Rpb24gbHRlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcW4gPSBmdW5jdGlvbiBlcW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDA7XG4gIH07XG5cbiAgLy9cbiAgLy8gQSByZWR1Y2UgY29udGV4dCwgY291bGQgYmUgdXNpbmcgbW9udGdvbWVyeSBvciBzb21ldGhpbmcgYmV0dGVyLCBkZXBlbmRpbmdcbiAgLy8gb24gdGhlIGBtYCBpdHNlbGYuXG4gIC8vXG4gIEJOLnJlZCA9IGZ1bmN0aW9uIHJlZCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBSZWQobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9SZWQgPSBmdW5jdGlvbiB0b1JlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgcmV0dXJuIGN0eC5jb252ZXJ0VG8odGhpcykuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21SZWQgPSBmdW5jdGlvbiBmcm9tUmVkICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdmcm9tUmVkIHdvcmtzIG9ubHkgd2l0aCBudW1iZXJzIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmNvbnZlcnRGcm9tKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZm9yY2VSZWQgPSBmdW5jdGlvbiBfZm9yY2VSZWQgKGN0eCkge1xuICAgIHRoaXMucmVkID0gY3R4O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mb3JjZVJlZCA9IGZ1bmN0aW9uIGZvcmNlUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRBZGQgPSBmdW5jdGlvbiByZWRBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElBZGQgPSBmdW5jdGlvbiByZWRJQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFN1YiA9IGZ1bmN0aW9uIHJlZFN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVN1YiA9IGZ1bmN0aW9uIHJlZElTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU2hsID0gZnVuY3Rpb24gcmVkU2hsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNobCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRNdWwgPSBmdW5jdGlvbiByZWRNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5tdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSU11bCA9IGZ1bmN0aW9uIHJlZElNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNxciA9IGZ1bmN0aW9uIHJlZFNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXIodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTcXIgPSBmdW5jdGlvbiByZWRJU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3FyKHRoaXMpO1xuICB9O1xuXG4gIC8vIFNxdWFyZSByb290IG92ZXIgcFxuICBCTi5wcm90b3R5cGUucmVkU3FydCA9IGZ1bmN0aW9uIHJlZFNxcnQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxcnQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcnQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEludm0gPSBmdW5jdGlvbiByZWRJbnZtICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJbnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbnZtKHRoaXMpO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2AgJSBgcmVkIG1vZHVsb2BcbiAgQk4ucHJvdG90eXBlLnJlZE5lZyA9IGZ1bmN0aW9uIHJlZE5lZyAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTmVnIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5uZWcodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFBvdyA9IGZ1bmN0aW9uIHJlZFBvdyAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkICYmICFudW0ucmVkLCAncmVkUG93KG5vcm1hbE51bSknKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQucG93KHRoaXMsIG51bSk7XG4gIH07XG5cbiAgLy8gUHJpbWUgbnVtYmVycyB3aXRoIGVmZmljaWVudCByZWR1Y3Rpb25cbiAgdmFyIHByaW1lcyA9IHtcbiAgICBrMjU2OiBudWxsLFxuICAgIHAyMjQ6IG51bGwsXG4gICAgcDE5MjogbnVsbCxcbiAgICBwMjU1MTk6IG51bGxcbiAgfTtcblxuICAvLyBQc2V1ZG8tTWVyc2VubmUgcHJpbWVcbiAgZnVuY3Rpb24gTVByaW1lIChuYW1lLCBwKSB7XG4gICAgLy8gUCA9IDIgXiBOIC0gS1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5wID0gbmV3IEJOKHAsIDE2KTtcbiAgICB0aGlzLm4gPSB0aGlzLnAuYml0TGVuZ3RoKCk7XG4gICAgdGhpcy5rID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLm4pLmlzdWIodGhpcy5wKTtcblxuICAgIHRoaXMudG1wID0gdGhpcy5fdG1wKCk7XG4gIH1cblxuICBNUHJpbWUucHJvdG90eXBlLl90bXAgPSBmdW5jdGlvbiBfdG1wICgpIHtcbiAgICB2YXIgdG1wID0gbmV3IEJOKG51bGwpO1xuICAgIHRtcC53b3JkcyA9IG5ldyBBcnJheShNYXRoLmNlaWwodGhpcy5uIC8gMTMpKTtcbiAgICByZXR1cm4gdG1wO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaXJlZHVjZSA9IGZ1bmN0aW9uIGlyZWR1Y2UgKG51bSkge1xuICAgIC8vIEFzc3VtZXMgdGhhdCBgbnVtYCBpcyBsZXNzIHRoYW4gYFBeMmBcbiAgICAvLyBudW0gPSBISSAqICgyIF4gTiAtIEspICsgSEkgKiBLICsgTE8gPSBISSAqIEsgKyBMTyAobW9kIFApXG4gICAgdmFyIHIgPSBudW07XG4gICAgdmFyIHJsZW47XG5cbiAgICBkbyB7XG4gICAgICB0aGlzLnNwbGl0KHIsIHRoaXMudG1wKTtcbiAgICAgIHIgPSB0aGlzLmltdWxLKHIpO1xuICAgICAgciA9IHIuaWFkZCh0aGlzLnRtcCk7XG4gICAgICBybGVuID0gci5iaXRMZW5ndGgoKTtcbiAgICB9IHdoaWxlIChybGVuID4gdGhpcy5uKTtcblxuICAgIHZhciBjbXAgPSBybGVuIDwgdGhpcy5uID8gLTEgOiByLnVjbXAodGhpcy5wKTtcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICByLndvcmRzWzBdID0gMDtcbiAgICAgIHIubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAgIHIuaXN1Yih0aGlzLnApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoci5zdHJpcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIHIgaXMgQk4gdjQgaW5zdGFuY2VcbiAgICAgICAgci5zdHJpcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gciBpcyBCTiB2NSBpbnN0YW5jZVxuICAgICAgICByLl9zdHJpcCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICAgIHJldHVybiBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKHR5cGVvZiBtb2R1bGUgPT09ICd1bmRlZmluZWQnIHx8IG1vZHVsZSwgdGhpcyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5cbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFNob3J0Q3VydmUoY29uZikge1xuICBCYXNlLmNhbGwodGhpcywgJ3Nob3J0JywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5iID0gbmV3IEJOKGNvbmYuYiwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy50aW52ID0gdGhpcy50d28ucmVkSW52bSgpO1xuXG4gIHRoaXMuemVyb0EgPSB0aGlzLmEuZnJvbVJlZCgpLmNtcG4oMCkgPT09IDA7XG4gIHRoaXMudGhyZWVBID0gdGhpcy5hLmZyb21SZWQoKS5zdWIodGhpcy5wKS5jbXBuKC0zKSA9PT0gMDtcblxuICAvLyBJZiB0aGUgY3VydmUgaXMgZW5kb21vcnBoaWMsIHByZWNhbGN1bGF0ZSBiZXRhIGFuZCBsYW1iZGFcbiAgdGhpcy5lbmRvID0gdGhpcy5fZ2V0RW5kb21vcnBoaXNtKGNvbmYpO1xuICB0aGlzLl9lbmRvV25hZlQxID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl9lbmRvV25hZlQyID0gbmV3IEFycmF5KDQpO1xufVxuaW5oZXJpdHMoU2hvcnRDdXJ2ZSwgQmFzZSk7XG5tb2R1bGUuZXhwb3J0cyA9IFNob3J0Q3VydmU7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvbW9ycGhpc20gPSBmdW5jdGlvbiBfZ2V0RW5kb21vcnBoaXNtKGNvbmYpIHtcbiAgLy8gTm8gZWZmaWNpZW50IGVuZG9tb3JwaGlzbVxuICBpZiAoIXRoaXMuemVyb0EgfHwgIXRoaXMuZyB8fCAhdGhpcy5uIHx8IHRoaXMucC5tb2RuKDMpICE9PSAxKVxuICAgIHJldHVybjtcblxuICAvLyBDb21wdXRlIGJldGEgYW5kIGxhbWJkYSwgdGhhdCBsYW1iZGEgKiBQID0gKGJldGEgKiBQeDsgUHkpXG4gIHZhciBiZXRhO1xuICB2YXIgbGFtYmRhO1xuICBpZiAoY29uZi5iZXRhKSB7XG4gICAgYmV0YSA9IG5ldyBCTihjb25mLmJldGEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJldGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMucCk7XG4gICAgLy8gQ2hvb3NlIHRoZSBzbWFsbGVzdCBiZXRhXG4gICAgYmV0YSA9IGJldGFzWzBdLmNtcChiZXRhc1sxXSkgPCAwID8gYmV0YXNbMF0gOiBiZXRhc1sxXTtcbiAgICBiZXRhID0gYmV0YS50b1JlZCh0aGlzLnJlZCk7XG4gIH1cbiAgaWYgKGNvbmYubGFtYmRhKSB7XG4gICAgbGFtYmRhID0gbmV3IEJOKGNvbmYubGFtYmRhLCAxNik7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2hvb3NlIHRoZSBsYW1iZGEgdGhhdCBpcyBtYXRjaGluZyBzZWxlY3RlZCBiZXRhXG4gICAgdmFyIGxhbWJkYXMgPSB0aGlzLl9nZXRFbmRvUm9vdHModGhpcy5uKTtcbiAgICBpZiAodGhpcy5nLm11bChsYW1iZGFzWzBdKS54LmNtcCh0aGlzLmcueC5yZWRNdWwoYmV0YSkpID09PSAwKSB7XG4gICAgICBsYW1iZGEgPSBsYW1iZGFzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYW1iZGEgPSBsYW1iZGFzWzFdO1xuICAgICAgYXNzZXJ0KHRoaXMuZy5tdWwobGFtYmRhKS54LmNtcCh0aGlzLmcueC5yZWRNdWwoYmV0YSkpID09PSAwKTtcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgYmFzaXMgdmVjdG9ycywgdXNlZCBmb3IgYmFsYW5jZWQgbGVuZ3RoLXR3byByZXByZXNlbnRhdGlvblxuICB2YXIgYmFzaXM7XG4gIGlmIChjb25mLmJhc2lzKSB7XG4gICAgYmFzaXMgPSBjb25mLmJhc2lzLm1hcChmdW5jdGlvbih2ZWMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGE6IG5ldyBCTih2ZWMuYSwgMTYpLFxuICAgICAgICBiOiBuZXcgQk4odmVjLmIsIDE2KVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBiYXNpcyA9IHRoaXMuX2dldEVuZG9CYXNpcyhsYW1iZGEpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiZXRhOiBiZXRhLFxuICAgIGxhbWJkYTogbGFtYmRhLFxuICAgIGJhc2lzOiBiYXNpc1xuICB9O1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9Sb290cyA9IGZ1bmN0aW9uIF9nZXRFbmRvUm9vdHMobnVtKSB7XG4gIC8vIEZpbmQgcm9vdHMgb2YgZm9yIHheMiArIHggKyAxIGluIEZcbiAgLy8gUm9vdCA9ICgtMSArLSBTcXJ0KC0zKSkgLyAyXG4gIC8vXG4gIHZhciByZWQgPSBudW0gPT09IHRoaXMucCA/IHRoaXMucmVkIDogQk4ubW9udChudW0pO1xuICB2YXIgdGludiA9IG5ldyBCTigyKS50b1JlZChyZWQpLnJlZEludm0oKTtcbiAgdmFyIG50aW52ID0gdGludi5yZWROZWcoKTtcblxuICB2YXIgcyA9IG5ldyBCTigzKS50b1JlZChyZWQpLnJlZE5lZygpLnJlZFNxcnQoKS5yZWRNdWwodGludik7XG5cbiAgdmFyIGwxID0gbnRpbnYucmVkQWRkKHMpLmZyb21SZWQoKTtcbiAgdmFyIGwyID0gbnRpbnYucmVkU3ViKHMpLmZyb21SZWQoKTtcbiAgcmV0dXJuIFsgbDEsIGwyIF07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb0Jhc2lzID0gZnVuY3Rpb24gX2dldEVuZG9CYXNpcyhsYW1iZGEpIHtcbiAgLy8gYXByeFNxcnQgPj0gc3FydCh0aGlzLm4pXG4gIHZhciBhcHJ4U3FydCA9IHRoaXMubi51c2hybihNYXRoLmZsb29yKHRoaXMubi5iaXRMZW5ndGgoKSAvIDIpKTtcblxuICAvLyAzLjc0XG4gIC8vIFJ1biBFR0NELCB1bnRpbCByKEwgKyAxKSA8IGFwcnhTcXJ0XG4gIHZhciB1ID0gbGFtYmRhO1xuICB2YXIgdiA9IHRoaXMubi5jbG9uZSgpO1xuICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gIHZhciB5MSA9IG5ldyBCTigwKTtcbiAgdmFyIHgyID0gbmV3IEJOKDApO1xuICB2YXIgeTIgPSBuZXcgQk4oMSk7XG5cbiAgLy8gTk9URTogYWxsIHZlY3RvcnMgYXJlIHJvb3RzIG9mOiBhICsgYiAqIGxhbWJkYSA9IDAgKG1vZCBuKVxuICB2YXIgYTA7XG4gIHZhciBiMDtcbiAgLy8gRmlyc3QgdmVjdG9yXG4gIHZhciBhMTtcbiAgdmFyIGIxO1xuICAvLyBTZWNvbmQgdmVjdG9yXG4gIHZhciBhMjtcbiAgdmFyIGIyO1xuXG4gIHZhciBwcmV2UjtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcjtcbiAgdmFyIHg7XG4gIHdoaWxlICh1LmNtcG4oMCkgIT09IDApIHtcbiAgICB2YXIgcSA9IHYuZGl2KHUpO1xuICAgIHIgPSB2LnN1YihxLm11bCh1KSk7XG4gICAgeCA9IHgyLnN1YihxLm11bCh4MSkpO1xuICAgIHZhciB5ID0geTIuc3ViKHEubXVsKHkxKSk7XG5cbiAgICBpZiAoIWExICYmIHIuY21wKGFwcnhTcXJ0KSA8IDApIHtcbiAgICAgIGEwID0gcHJldlIubmVnKCk7XG4gICAgICBiMCA9IHgxO1xuICAgICAgYTEgPSByLm5lZygpO1xuICAgICAgYjEgPSB4O1xuICAgIH0gZWxzZSBpZiAoYTEgJiYgKytpID09PSAyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcHJldlIgPSByO1xuXG4gICAgdiA9IHU7XG4gICAgdSA9IHI7XG4gICAgeDIgPSB4MTtcbiAgICB4MSA9IHg7XG4gICAgeTIgPSB5MTtcbiAgICB5MSA9IHk7XG4gIH1cbiAgYTIgPSByLm5lZygpO1xuICBiMiA9IHg7XG5cbiAgdmFyIGxlbjEgPSBhMS5zcXIoKS5hZGQoYjEuc3FyKCkpO1xuICB2YXIgbGVuMiA9IGEyLnNxcigpLmFkZChiMi5zcXIoKSk7XG4gIGlmIChsZW4yLmNtcChsZW4xKSA+PSAwKSB7XG4gICAgYTIgPSBhMDtcbiAgICBiMiA9IGIwO1xuICB9XG5cbiAgLy8gTm9ybWFsaXplIHNpZ25zXG4gIGlmIChhMS5uZWdhdGl2ZSkge1xuICAgIGExID0gYTEubmVnKCk7XG4gICAgYjEgPSBiMS5uZWcoKTtcbiAgfVxuICBpZiAoYTIubmVnYXRpdmUpIHtcbiAgICBhMiA9IGEyLm5lZygpO1xuICAgIGIyID0gYjIubmVnKCk7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIHsgYTogYTEsIGI6IGIxIH0sXG4gICAgeyBhOiBhMiwgYjogYjIgfVxuICBdO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2VuZG9TcGxpdCA9IGZ1bmN0aW9uIF9lbmRvU3BsaXQoaykge1xuICB2YXIgYmFzaXMgPSB0aGlzLmVuZG8uYmFzaXM7XG4gIHZhciB2MSA9IGJhc2lzWzBdO1xuICB2YXIgdjIgPSBiYXNpc1sxXTtcblxuICB2YXIgYzEgPSB2Mi5iLm11bChrKS5kaXZSb3VuZCh0aGlzLm4pO1xuICB2YXIgYzIgPSB2MS5iLm5lZygpLm11bChrKS5kaXZSb3VuZCh0aGlzLm4pO1xuXG4gIHZhciBwMSA9IGMxLm11bCh2MS5hKTtcbiAgdmFyIHAyID0gYzIubXVsKHYyLmEpO1xuICB2YXIgcTEgPSBjMS5tdWwodjEuYik7XG4gIHZhciBxMiA9IGMyLm11bCh2Mi5iKTtcblxuICAvLyBDYWxjdWxhdGUgYW5zd2VyXG4gIHZhciBrMSA9IGsuc3ViKHAxKS5zdWIocDIpO1xuICB2YXIgazIgPSBxMS5hZGQocTIpLm5lZygpO1xuICByZXR1cm4geyBrMTogazEsIGsyOiBrMiB9O1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWCA9IGZ1bmN0aW9uIHBvaW50RnJvbVgoeCwgb2RkKSB7XG4gIHggPSBuZXcgQk4oeCwgMTYpO1xuICBpZiAoIXgucmVkKVxuICAgIHggPSB4LnRvUmVkKHRoaXMucmVkKTtcblxuICB2YXIgeTIgPSB4LnJlZFNxcigpLnJlZE11bCh4KS5yZWRJQWRkKHgucmVkTXVsKHRoaXMuYSkpLnJlZElBZGQodGhpcy5iKTtcbiAgdmFyIHkgPSB5Mi5yZWRTcXJ0KCk7XG4gIGlmICh5LnJlZFNxcigpLnJlZFN1Yih5MikuY21wKHRoaXMuemVybykgIT09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG5cbiAgLy8gWFhYIElzIHRoZXJlIGFueSB3YXkgdG8gdGVsbCBpZiB0aGUgbnVtYmVyIGlzIG9kZCB3aXRob3V0IGNvbnZlcnRpbmcgaXRcbiAgLy8gdG8gbm9uLXJlZCBmb3JtP1xuICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpO1xuICBpZiAob2RkICYmICFpc09kZCB8fCAhb2RkICYmIGlzT2RkKVxuICAgIHkgPSB5LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHkpO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICBpZiAocG9pbnQuaW5mKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4ID0gcG9pbnQueDtcbiAgdmFyIHkgPSBwb2ludC55O1xuXG4gIHZhciBheCA9IHRoaXMuYS5yZWRNdWwoeCk7XG4gIHZhciByaHMgPSB4LnJlZFNxcigpLnJlZE11bCh4KS5yZWRJQWRkKGF4KS5yZWRJQWRkKHRoaXMuYik7XG4gIHJldHVybiB5LnJlZFNxcigpLnJlZElTdWIocmhzKS5jbXBuKDApID09PSAwO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2VuZG9XbmFmTXVsQWRkID1cbiAgICBmdW5jdGlvbiBfZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMsIGphY29iaWFuUmVzdWx0KSB7XG4gIHZhciBucG9pbnRzID0gdGhpcy5fZW5kb1duYWZUMTtcbiAgdmFyIG5jb2VmZnMgPSB0aGlzLl9lbmRvV25hZlQyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzcGxpdCA9IHRoaXMuX2VuZG9TcGxpdChjb2VmZnNbaV0pO1xuICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBiZXRhID0gcC5fZ2V0QmV0YSgpO1xuXG4gICAgaWYgKHNwbGl0LmsxLm5lZ2F0aXZlKSB7XG4gICAgICBzcGxpdC5rMS5pbmVnKCk7XG4gICAgICBwID0gcC5uZWcodHJ1ZSk7XG4gICAgfVxuICAgIGlmIChzcGxpdC5rMi5uZWdhdGl2ZSkge1xuICAgICAgc3BsaXQuazIuaW5lZygpO1xuICAgICAgYmV0YSA9IGJldGEubmVnKHRydWUpO1xuICAgIH1cblxuICAgIG5wb2ludHNbaSAqIDJdID0gcDtcbiAgICBucG9pbnRzW2kgKiAyICsgMV0gPSBiZXRhO1xuICAgIG5jb2VmZnNbaSAqIDJdID0gc3BsaXQuazE7XG4gICAgbmNvZWZmc1tpICogMiArIDFdID0gc3BsaXQuazI7XG4gIH1cbiAgdmFyIHJlcyA9IHRoaXMuX3duYWZNdWxBZGQoMSwgbnBvaW50cywgbmNvZWZmcywgaSAqIDIsIGphY29iaWFuUmVzdWx0KTtcblxuICAvLyBDbGVhbi11cCByZWZlcmVuY2VzIHRvIHBvaW50cyBhbmQgY29lZmZpY2llbnRzXG4gIGZvciAodmFyIGogPSAwOyBqIDwgaSAqIDI7IGorKykge1xuICAgIG5wb2ludHNbal0gPSBudWxsO1xuICAgIG5jb2VmZnNbal0gPSBudWxsO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgaXNSZWQpIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ2FmZmluZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gbnVsbDtcbiAgICB0aGlzLnkgPSBudWxsO1xuICAgIHRoaXMuaW5mID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7XG4gICAgLy8gRm9yY2UgcmVkZ29tZXJ5IHJlcHJlc2VudGF0aW9uIHdoZW4gbG9hZGluZyBmcm9tIEpTT05cbiAgICBpZiAoaXNSZWQpIHtcbiAgICAgIHRoaXMueC5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgICB0aGlzLnkuZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy55LnJlZClcbiAgICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgdGhpcy5pbmYgPSBmYWxzZTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB5LCBpc1JlZCkge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHksIGlzUmVkKTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaiwgcmVkKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmosIHJlZCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2dldEJldGEgPSBmdW5jdGlvbiBfZ2V0QmV0YSgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuO1xuXG4gIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICBpZiAocHJlICYmIHByZS5iZXRhKVxuICAgIHJldHVybiBwcmUuYmV0YTtcblxuICB2YXIgYmV0YSA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LnJlZE11bCh0aGlzLmN1cnZlLmVuZG8uYmV0YSksIHRoaXMueSk7XG4gIGlmIChwcmUpIHtcbiAgICB2YXIgY3VydmUgPSB0aGlzLmN1cnZlO1xuICAgIHZhciBlbmRvTXVsID0gZnVuY3Rpb24ocCkge1xuICAgICAgcmV0dXJuIGN1cnZlLnBvaW50KHAueC5yZWRNdWwoY3VydmUuZW5kby5iZXRhKSwgcC55KTtcbiAgICB9O1xuICAgIHByZS5iZXRhID0gYmV0YTtcbiAgICBiZXRhLnByZWNvbXB1dGVkID0ge1xuICAgICAgYmV0YTogbnVsbCxcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKGVuZG9NdWwpXG4gICAgICB9LFxuICAgICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgICBwb2ludHM6IHByZS5kb3VibGVzLnBvaW50cy5tYXAoZW5kb011bClcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiBiZXRhO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgaWYgKCF0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiBbIHRoaXMueCwgdGhpcy55IF07XG5cbiAgcmV0dXJuIFsgdGhpcy54LCB0aGlzLnksIHRoaXMucHJlY29tcHV0ZWQgJiYge1xuICAgIGRvdWJsZXM6IHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcyAmJiB7XG4gICAgICBzdGVwOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMuc3RlcCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnBvaW50cy5zbGljZSgxKVxuICAgIH0sXG4gICAgbmFmOiB0aGlzLnByZWNvbXB1dGVkLm5hZiAmJiB7XG4gICAgICB3bmQ6IHRoaXMucHJlY29tcHV0ZWQubmFmLnduZCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5uYWYucG9pbnRzLnNsaWNlKDEpXG4gICAgfVxuICB9IF07XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmosIHJlZCkge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpXG4gICAgb2JqID0gSlNPTi5wYXJzZShvYmopO1xuICB2YXIgcmVzID0gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7XG4gIGlmICghb2JqWzJdKVxuICAgIHJldHVybiByZXM7XG5cbiAgZnVuY3Rpb24gb2JqMnBvaW50KG9iaikge1xuICAgIHJldHVybiBjdXJ2ZS5wb2ludChvYmpbMF0sIG9ialsxXSwgcmVkKTtcbiAgfVxuXG4gIHZhciBwcmUgPSBvYmpbMl07XG4gIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICBiZXRhOiBudWxsLFxuICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5kb3VibGVzLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9LFxuICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgcG9pbnRzOiBbIHJlcyBdLmNvbmNhdChwcmUubmFmLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9XG4gIH07XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIHJldHVybiB0aGlzLmluZjtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiBwO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gUCArIFAgPSAyUFxuICBpZiAodGhpcy5lcShwKSlcbiAgICByZXR1cm4gdGhpcy5kYmwoKTtcblxuICAvLyBQICsgKC1QKSA9IE9cbiAgaWYgKHRoaXMubmVnKCkuZXEocCkpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgLy8gUCArIFEgPSBPXG4gIGlmICh0aGlzLnguY21wKHAueCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIGMgPSB0aGlzLnkucmVkU3ViKHAueSk7XG4gIGlmIChjLmNtcG4oMCkgIT09IDApXG4gICAgYyA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIocC54KS5yZWRJbnZtKCkpO1xuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodGhpcy54KS5yZWRJU3ViKHAueCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gMlAgPSBPXG4gIHZhciB5czEgPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIGlmICh5czEuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICB2YXIgeDIgPSB0aGlzLngucmVkU3FyKCk7XG4gIHZhciBkeWludiA9IHlzMS5yZWRJbnZtKCk7XG4gIHZhciBjID0geDIucmVkQWRkKHgyKS5yZWRJQWRkKHgyKS5yZWRJQWRkKGEpLnJlZE11bChkeWludik7XG5cbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueC5yZWRBZGQodGhpcy54KSk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFkgPSBmdW5jdGlvbiBnZXRZKCkge1xuICByZXR1cm4gdGhpcy55LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICBrID0gbmV3IEJOKGssIDE2KTtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuICBlbHNlIGlmICh0aGlzLl9oYXNEb3VibGVzKGspKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtcbiAgZWxzZSBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChbIHRoaXMgXSwgWyBrIF0pO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKGsxLCBwMiwgazIpIHtcbiAgdmFyIHBvaW50cyA9IFsgdGhpcywgcDIgXTtcbiAgdmFyIGNvZWZmcyA9IFsgazEsIGsyIF07XG4gIGlmICh0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIHBvaW50cywgY29lZmZzLCAyKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qbXVsQWRkID0gZnVuY3Rpb24gam11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcywgdHJ1ZSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMiwgdHJ1ZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShwKSB7XG4gIHJldHVybiB0aGlzID09PSBwIHx8XG4gICAgICAgICB0aGlzLmluZiA9PT0gcC5pbmYgJiZcbiAgICAgICAgICAgICAodGhpcy5pbmYgfHwgdGhpcy54LmNtcChwLngpID09PSAwICYmIHRoaXMueS5jbXAocC55KSA9PT0gMCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKF9wcmVjb21wdXRlKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngsIHRoaXMueS5yZWROZWcoKSk7XG4gIGlmIChfcHJlY29tcHV0ZSAmJiB0aGlzLnByZWNvbXB1dGVkKSB7XG4gICAgdmFyIHByZSA9IHRoaXMucHJlY29tcHV0ZWQ7XG4gICAgdmFyIG5lZ2F0ZSA9IGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBwLm5lZygpO1xuICAgIH07XG4gICAgcmVzLnByZWNvbXB1dGVkID0ge1xuICAgICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgICAgcG9pbnRzOiBwcmUubmFmLnBvaW50cy5tYXAobmVnYXRlKVxuICAgICAgfSxcbiAgICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgICAgcG9pbnRzOiBwcmUuZG91Ymxlcy5wb2ludHMubWFwKG5lZ2F0ZSlcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUudG9KID0gZnVuY3Rpb24gdG9KKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuXG4gIHZhciByZXMgPSB0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsIHRoaXMueSwgdGhpcy5jdXJ2ZS5vbmUpO1xuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gSlBvaW50KGN1cnZlLCB4LCB5LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdqYWNvYmlhbicpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnkgPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSBuZXcgQk4oMCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIHRoaXMueiA9IG5ldyBCTih6LCAxNik7XG4gIH1cbiAgaWYgKCF0aGlzLngucmVkKVxuICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIGlmICghdGhpcy55LnJlZClcbiAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMuei5yZWQpXG4gICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcblxuICB0aGlzLnpPbmUgPSB0aGlzLnogPT09IHRoaXMuY3VydmUub25lO1xufVxuaW5oZXJpdHMoSlBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6KSB7XG4gIHJldHVybiBuZXcgSlBvaW50KHRoaXMsIHgsIHksIHopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50b1AgPSBmdW5jdGlvbiB0b1AoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgemludiA9IHRoaXMuei5yZWRJbnZtKCk7XG4gIHZhciB6aW52MiA9IHppbnYucmVkU3FyKCk7XG4gIHZhciBheCA9IHRoaXMueC5yZWRNdWwoemludjIpO1xuICB2YXIgYXkgPSB0aGlzLnkucmVkTXVsKHppbnYyKS5yZWRNdWwoemludik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQoYXgsIGF5KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCksIHRoaXMueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHA7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyAxMk0gKyA0UyArIDdBXG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54LnJlZE11bChwejIpO1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55LnJlZE11bChwejIucmVkTXVsKHAueikpO1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyLnJlZE11bCh0aGlzLnopKTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChwLnopLnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gZnVuY3Rpb24gbWl4ZWRBZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwLnRvSigpO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gOE0gKyAzUyArIDdBXG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54O1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55O1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyKS5yZWRNdWwodGhpcy56KTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmRibHAgPSBmdW5jdGlvbiBkYmxwKHBvdykge1xuICBpZiAocG93ID09PSAwKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmICghcG93KVxuICAgIHJldHVybiB0aGlzLmRibCgpO1xuXG4gIGlmICh0aGlzLmN1cnZlLnplcm9BIHx8IHRoaXMuY3VydmUudGhyZWVBKSB7XG4gICAgdmFyIHIgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG93OyBpKyspXG4gICAgICByID0gci5kYmwoKTtcbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIC8vIDFNICsgMlMgKyAxQSArIE4gKiAoNFMgKyA1TSArIDhBKVxuICAvLyBOID0gMSA9PiA2TSArIDZTICsgOUFcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG4gIHZhciB0aW52ID0gdGhpcy5jdXJ2ZS50aW52O1xuXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICAvLyBSZXVzZSByZXN1bHRzXG4gIHZhciBqeWQgPSBqeS5yZWRBZGQoankpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvdzsgaSsrKSB7XG4gICAgdmFyIGp4MiA9IGp4LnJlZFNxcigpO1xuICAgIHZhciBqeWQyID0ganlkLnJlZFNxcigpO1xuICAgIHZhciBqeWQ0ID0ganlkMi5yZWRTcXIoKTtcbiAgICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICAgIHZhciB0MSA9IGp4LnJlZE11bChqeWQyKTtcbiAgICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7XG4gICAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG4gICAgdmFyIGRueSA9IGMucmVkTXVsKHQyKTtcbiAgICBkbnkgPSBkbnkucmVkSUFkZChkbnkpLnJlZElTdWIoanlkNCk7XG4gICAgdmFyIG56ID0ganlkLnJlZE11bChqeik7XG4gICAgaWYgKGkgKyAxIDwgcG93KVxuICAgICAgano0ID0gano0LnJlZE11bChqeWQ0KTtcblxuICAgIGp4ID0gbng7XG4gICAganogPSBuejtcbiAgICBqeWQgPSBkbnk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQoangsIGp5ZC5yZWRNdWwodGludiksIGp6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuemVyb0EpXG4gICAgcmV0dXJuIHRoaXMuX3plcm9EYmwoKTtcbiAgZWxzZSBpZiAodGhpcy5jdXJ2ZS50aHJlZUEpXG4gICAgcmV0dXJuIHRoaXMuX3RocmVlRGJsKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fZGJsKCk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl96ZXJvRGJsID0gZnVuY3Rpb24gX3plcm9EYmwoKSB7XG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIC8vIFogPSAxXG4gIGlmICh0aGlzLnpPbmUpIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctbWRibC0yMDA3LWJsXG4gICAgLy8gMU0gKyA1UyArIDE0QVxuXG4gICAgLy8gWFggPSBYMV4yXG4gICAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIFlZID0gWTFeMlxuICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBZWVlZID0gWVleMlxuICAgIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gICAgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpXG4gICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICAgIHMgPSBzLnJlZElBZGQocyk7XG4gICAgLy8gTSA9IDMgKiBYWCArIGE7IGEgPSAwXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO1xuICAgIC8vIFQgPSBNIF4gMiAtIDIqU1xuICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7XG5cbiAgICAvLyA4ICogWVlZWVxuICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG5cbiAgICAvLyBYMyA9IFRcbiAgICBueCA9IHQ7XG4gICAgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZXG4gICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO1xuICAgIC8vIFozID0gMipZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOS1sXG4gICAgLy8gMk0gKyA1UyArIDEzQVxuXG4gICAgLy8gQSA9IFgxXjJcbiAgICB2YXIgYSA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBCID0gWTFeMlxuICAgIHZhciBiID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIEMgPSBCXjJcbiAgICB2YXIgYyA9IGIucmVkU3FyKCk7XG4gICAgLy8gRCA9IDIgKiAoKFgxICsgQileMiAtIEEgLSBDKVxuICAgIHZhciBkID0gdGhpcy54LnJlZEFkZChiKS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYyk7XG4gICAgZCA9IGQucmVkSUFkZChkKTtcbiAgICAvLyBFID0gMyAqIEFcbiAgICB2YXIgZSA9IGEucmVkQWRkKGEpLnJlZElBZGQoYSk7XG4gICAgLy8gRiA9IEVeMlxuICAgIHZhciBmID0gZS5yZWRTcXIoKTtcblxuICAgIC8vIDggKiBDXG4gICAgdmFyIGM4ID0gYy5yZWRJQWRkKGMpO1xuICAgIGM4ID0gYzgucmVkSUFkZChjOCk7XG4gICAgYzggPSBjOC5yZWRJQWRkKGM4KTtcblxuICAgIC8vIFgzID0gRiAtIDIgKiBEXG4gICAgbnggPSBmLnJlZElTdWIoZCkucmVkSVN1YihkKTtcbiAgICAvLyBZMyA9IEUgKiAoRCAtIFgzKSAtIDggKiBDXG4gICAgbnkgPSBlLnJlZE11bChkLnJlZElTdWIobngpKS5yZWRJU3ViKGM4KTtcbiAgICAvLyBaMyA9IDIgKiBZMSAqIFoxXG4gICAgbnogPSB0aGlzLnkucmVkTXVsKHRoaXMueik7XG4gICAgbnogPSBuei5yZWRJQWRkKG56KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX3RocmVlRGJsID0gZnVuY3Rpb24gX3RocmVlRGJsKCkge1xuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICAvLyBaID0gMVxuICBpZiAodGhpcy56T25lKSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0zLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibFxuICAgIC8vIDFNICsgNVMgKyAxNUFcblxuICAgIC8vIFhYID0gWDFeMlxuICAgIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBZWSA9IFkxXjJcbiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gWVlZWSA9IFlZXjJcbiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAgIC8vIFMgPSAyICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKVxuICAgIHZhciBzID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgICBzID0gcy5yZWRJQWRkKHMpO1xuICAgIC8vIE0gPSAzICogWFggKyBhXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpLnJlZElBZGQodGhpcy5jdXJ2ZS5hKTtcbiAgICAvLyBUID0gTV4yIC0gMiAqIFNcbiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO1xuICAgIC8vIFgzID0gVFxuICAgIG54ID0gdDtcbiAgICAvLyBZMyA9IE0gKiAoUyAtIFQpIC0gOCAqIFlZWVlcbiAgICB2YXIgeXl5eTggPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIG55ID0gbS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtcbiAgICAvLyBaMyA9IDIgKiBZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMy5odG1sI2RvdWJsaW5nLWRibC0yMDAxLWJcbiAgICAvLyAzTSArIDVTXG5cbiAgICAvLyBkZWx0YSA9IFoxXjJcbiAgICB2YXIgZGVsdGEgPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgLy8gZ2FtbWEgPSBZMV4yXG4gICAgdmFyIGdhbW1hID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIGJldGEgPSBYMSAqIGdhbW1hXG4gICAgdmFyIGJldGEgPSB0aGlzLngucmVkTXVsKGdhbW1hKTtcbiAgICAvLyBhbHBoYSA9IDMgKiAoWDEgLSBkZWx0YSkgKiAoWDEgKyBkZWx0YSlcbiAgICB2YXIgYWxwaGEgPSB0aGlzLngucmVkU3ViKGRlbHRhKS5yZWRNdWwodGhpcy54LnJlZEFkZChkZWx0YSkpO1xuICAgIGFscGhhID0gYWxwaGEucmVkQWRkKGFscGhhKS5yZWRJQWRkKGFscGhhKTtcbiAgICAvLyBYMyA9IGFscGhhXjIgLSA4ICogYmV0YVxuICAgIHZhciBiZXRhNCA9IGJldGEucmVkSUFkZChiZXRhKTtcbiAgICBiZXRhNCA9IGJldGE0LnJlZElBZGQoYmV0YTQpO1xuICAgIHZhciBiZXRhOCA9IGJldGE0LnJlZEFkZChiZXRhNCk7XG4gICAgbnggPSBhbHBoYS5yZWRTcXIoKS5yZWRJU3ViKGJldGE4KTtcbiAgICAvLyBaMyA9IChZMSArIFoxKV4yIC0gZ2FtbWEgLSBkZWx0YVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnopLnJlZFNxcigpLnJlZElTdWIoZ2FtbWEpLnJlZElTdWIoZGVsdGEpO1xuICAgIC8vIFkzID0gYWxwaGEgKiAoNCAqIGJldGEgLSBYMykgLSA4ICogZ2FtbWFeMlxuICAgIHZhciBnZ2FtbWE4ID0gZ2FtbWEucmVkU3FyKCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgbnkgPSBhbHBoYS5yZWRNdWwoYmV0YTQucmVkSVN1YihueCkpLnJlZElTdWIoZ2dhbW1hOCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl9kYmwgPSBmdW5jdGlvbiBfZGJsKCkge1xuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICAvLyA0TSArIDZTICsgMTBBXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICB2YXIgangyID0gangucmVkU3FyKCk7XG4gIHZhciBqeTIgPSBqeS5yZWRTcXIoKTtcblxuICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICB2YXIganhkNCA9IGp4LnJlZEFkZChqeCk7XG4gIGp4ZDQgPSBqeGQ0LnJlZElBZGQoanhkNCk7XG4gIHZhciB0MSA9IGp4ZDQucmVkTXVsKGp5Mik7XG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTtcbiAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG5cbiAgdmFyIGp5ZDggPSBqeTIucmVkU3FyKCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHQyKS5yZWRJU3ViKGp5ZDgpO1xuICB2YXIgbnogPSBqeS5yZWRBZGQoankpLnJlZE11bChqeik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50cnBsID0gZnVuY3Rpb24gdHJwbCgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLnplcm9BKVxuICAgIHJldHVybiB0aGlzLmRibCgpLmFkZCh0aGlzKTtcblxuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbCN0cmlwbGluZy10cGwtMjAwNy1ibFxuICAvLyA1TSArIDEwUyArIC4uLlxuXG4gIC8vIFhYID0gWDFeMlxuICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIFlZID0gWTFeMlxuICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gIC8vIFpaID0gWjFeMlxuICB2YXIgenogPSB0aGlzLnoucmVkU3FyKCk7XG4gIC8vIFlZWVkgPSBZWV4yXG4gIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gIC8vIE0gPSAzICogWFggKyBhICogWloyOyBhID0gMFxuICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7XG4gIC8vIE1NID0gTV4yXG4gIHZhciBtbSA9IG0ucmVkU3FyKCk7XG4gIC8vIEUgPSA2ICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKSAtIE1NXG4gIHZhciBlID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgZSA9IGUucmVkSUFkZChlKTtcbiAgZSA9IGUucmVkQWRkKGUpLnJlZElBZGQoZSk7XG4gIGUgPSBlLnJlZElTdWIobW0pO1xuICAvLyBFRSA9IEVeMlxuICB2YXIgZWUgPSBlLnJlZFNxcigpO1xuICAvLyBUID0gMTYqWVlZWVxuICB2YXIgdCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgLy8gVSA9IChNICsgRSleMiAtIE1NIC0gRUUgLSBUXG4gIHZhciB1ID0gbS5yZWRJQWRkKGUpLnJlZFNxcigpLnJlZElTdWIobW0pLnJlZElTdWIoZWUpLnJlZElTdWIodCk7XG4gIC8vIFgzID0gNCAqIChYMSAqIEVFIC0gNCAqIFlZICogVSlcbiAgdmFyIHl5dTQgPSB5eS5yZWRNdWwodSk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHZhciBueCA9IHRoaXMueC5yZWRNdWwoZWUpLnJlZElTdWIoeXl1NCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIC8vIFkzID0gOCAqIFkxICogKFUgKiAoVCAtIFUpIC0gRSAqIEVFKVxuICB2YXIgbnkgPSB0aGlzLnkucmVkTXVsKHUucmVkTXVsKHQucmVkSVN1Yih1KSkucmVkSVN1YihlLnJlZE11bChlZSkpKTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgLy8gWjMgPSAoWjEgKyBFKV4yIC0gWlogLSBFRVxuICB2YXIgbnogPSB0aGlzLnoucmVkQWRkKGUpLnJlZFNxcigpLnJlZElTdWIoenopLnJlZElTdWIoZWUpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGssIGtiYXNlKSB7XG4gIGsgPSBuZXcgQk4oaywga2Jhc2UpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKHApIHtcbiAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgcmV0dXJuIHRoaXMuZXEocC50b0ooKSk7XG5cbiAgaWYgKHRoaXMgPT09IHApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8geDEgKiB6Ml4yID09IHgyICogejFeMlxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIGlmICh0aGlzLngucmVkTXVsKHB6MikucmVkSVN1YihwLngucmVkTXVsKHoyKSkuY21wbigwKSAhPT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8geTEgKiB6Ml4zID09IHkyICogejFeM1xuICB2YXIgejMgPSB6Mi5yZWRNdWwodGhpcy56KTtcbiAgdmFyIHB6MyA9IHB6Mi5yZWRNdWwocC56KTtcbiAgcmV0dXJuIHRoaXMueS5yZWRNdWwocHozKS5yZWRJU3ViKHAueS5yZWRNdWwoejMpKS5jbXBuKDApID09PSAwO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcVhUb1AgPSBmdW5jdGlvbiBlcVhUb1AoeCkge1xuICB2YXIgenMgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciByeCA9IHgudG9SZWQodGhpcy5jdXJ2ZS5yZWQpLnJlZE11bCh6cyk7XG4gIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeGMgPSB4LmNsb25lKCk7XG4gIHZhciB0ID0gdGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh6cyk7XG4gIGZvciAoOzspIHtcbiAgICB4Yy5pYWRkKHRoaXMuY3VydmUubik7XG4gICAgaWYgKHhjLmNtcCh0aGlzLmN1cnZlLnApID49IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByeC5yZWRJQWRkKHQpO1xuICAgIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgSlBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIEpQb2ludCB4OiAnICsgdGhpcy54LnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy56LmNtcG4oMCkgPT09IDA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIE1vbnRDdXJ2ZShjb25mKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnbW9udCcsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBCTihjb25mLmEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYiA9IG5ldyBCTihjb25mLmIsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuaTQgPSBuZXcgQk4oNCkudG9SZWQodGhpcy5yZWQpLnJlZEludm0oKTtcbiAgdGhpcy50d28gPSBuZXcgQk4oMikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmEyNCA9IHRoaXMuaTQucmVkTXVsKHRoaXMuYS5yZWRBZGQodGhpcy50d28pKTtcbn1cbmluaGVyaXRzKE1vbnRDdXJ2ZSwgQmFzZSk7XG5tb2R1bGUuZXhwb3J0cyA9IE1vbnRDdXJ2ZTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KSB7XG4gIHZhciB4ID0gcG9pbnQubm9ybWFsaXplKCkueDtcbiAgdmFyIHgyID0geC5yZWRTcXIoKTtcbiAgdmFyIHJocyA9IHgyLnJlZE11bCh4KS5yZWRBZGQoeDIucmVkTXVsKHRoaXMuYSkpLnJlZEFkZCh4KTtcbiAgdmFyIHkgPSByaHMucmVkU3FydCgpO1xuXG4gIHJldHVybiB5LnJlZFNxcigpLmNtcChyaHMpID09PSAwO1xufTtcblxuZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHopIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ3Byb2plY3RpdmUnKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeiA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueiA9IHRoaXMuY3VydmUuemVybztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueiA9IG5ldyBCTih6LCAxNik7XG4gICAgaWYgKCF0aGlzLngucmVkKVxuICAgICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMuei5yZWQpXG4gICAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICB9XG59XG5pbmhlcml0cyhQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5Nb250Q3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsIGVuYykge1xuICByZXR1cm4gdGhpcy5wb2ludCh1dGlscy50b0FycmF5KGJ5dGVzLCBlbmMpLCAxKTtcbn07XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB6KSB7XG4gIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeik7XG59O1xuXG5Nb250Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaikge1xuICByZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcywgb2JqKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5wcmVjb21wdXRlID0gZnVuY3Rpb24gcHJlY29tcHV0ZSgpIHtcbiAgLy8gTm8tb3Bcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZSgpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgdGhpcy5jdXJ2ZS5wLmJ5dGVMZW5ndGgoKSk7XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmopIHtcbiAgcmV0dXJuIG5ldyBQb2ludChjdXJ2ZSwgb2JqWzBdLCBvYmpbMV0gfHwgY3VydmUub25lKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMuei5jbXBuKDApID09PSAwO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgLy8gaHR0cDovL2h5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1tb250Z29tLXh6Lmh0bWwjZG91YmxpbmctZGJsLTE5ODctbS0zXG4gIC8vIDJNICsgMlMgKyA0QVxuXG4gIC8vIEEgPSBYMSArIFoxXG4gIHZhciBhID0gdGhpcy54LnJlZEFkZCh0aGlzLnopO1xuICAvLyBBQSA9IEFeMlxuICB2YXIgYWEgPSBhLnJlZFNxcigpO1xuICAvLyBCID0gWDEgLSBaMVxuICB2YXIgYiA9IHRoaXMueC5yZWRTdWIodGhpcy56KTtcbiAgLy8gQkIgPSBCXjJcbiAgdmFyIGJiID0gYi5yZWRTcXIoKTtcbiAgLy8gQyA9IEFBIC0gQkJcbiAgdmFyIGMgPSBhYS5yZWRTdWIoYmIpO1xuICAvLyBYMyA9IEFBICogQkJcbiAgdmFyIG54ID0gYWEucmVkTXVsKGJiKTtcbiAgLy8gWjMgPSBDICogKEJCICsgQTI0ICogQylcbiAgdmFyIG56ID0gYy5yZWRNdWwoYmIucmVkQWRkKHRoaXMuY3VydmUuYTI0LnJlZE11bChjKSkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmUnKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kaWZmQWRkID0gZnVuY3Rpb24gZGlmZkFkZChwLCBkaWZmKSB7XG4gIC8vIGh0dHA6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tbW9udGdvbS14ei5odG1sI2RpZmZhZGQtZGFkZC0xOTg3LW0tM1xuICAvLyA0TSArIDJTICsgNkFcblxuICAvLyBBID0gWDIgKyBaMlxuICB2YXIgYSA9IHRoaXMueC5yZWRBZGQodGhpcy56KTtcbiAgLy8gQiA9IFgyIC0gWjJcbiAgdmFyIGIgPSB0aGlzLngucmVkU3ViKHRoaXMueik7XG4gIC8vIEMgPSBYMyArIFozXG4gIHZhciBjID0gcC54LnJlZEFkZChwLnopO1xuICAvLyBEID0gWDMgLSBaM1xuICB2YXIgZCA9IHAueC5yZWRTdWIocC56KTtcbiAgLy8gREEgPSBEICogQVxuICB2YXIgZGEgPSBkLnJlZE11bChhKTtcbiAgLy8gQ0IgPSBDICogQlxuICB2YXIgY2IgPSBjLnJlZE11bChiKTtcbiAgLy8gWDUgPSBaMSAqIChEQSArIENCKV4yXG4gIHZhciBueCA9IGRpZmYuei5yZWRNdWwoZGEucmVkQWRkKGNiKS5yZWRTcXIoKSk7XG4gIC8vIFo1ID0gWDEgKiAoREEgLSBDQileMlxuICB2YXIgbnogPSBkaWZmLngucmVkTXVsKGRhLnJlZElTdWIoY2IpLnJlZFNxcigpKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICB2YXIgdCA9IGsuY2xvbmUoKTtcbiAgdmFyIGEgPSB0aGlzOyAvLyAoTiAvIDIpICogUSArIFFcbiAgdmFyIGIgPSB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpOyAvLyAoTiAvIDIpICogUVxuICB2YXIgYyA9IHRoaXM7IC8vIFFcblxuICBmb3IgKHZhciBiaXRzID0gW107IHQuY21wbigwKSAhPT0gMDsgdC5pdXNocm4oMSkpXG4gICAgYml0cy5wdXNoKHQuYW5kbG4oMSkpO1xuXG4gIGZvciAodmFyIGkgPSBiaXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGJpdHNbaV0gPT09IDApIHtcbiAgICAgIC8vIE4gKiBRICsgUSA9ICgoTiAvIDIpICogUSArIFEpKSArIChOIC8gMikgKiBRXG4gICAgICBhID0gYS5kaWZmQWRkKGIsIGMpO1xuICAgICAgLy8gTiAqIFEgPSAyICogKChOIC8gMikgKiBRICsgUSkpXG4gICAgICBiID0gYi5kYmwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTiAqIFEgPSAoKE4gLyAyKSAqIFEgKyBRKSArICgoTiAvIDIpICogUSlcbiAgICAgIGIgPSBhLmRpZmZBZGQoYiwgYyk7XG4gICAgICAvLyBOICogUSArIFEgPSAyICogKChOIC8gMikgKiBRICsgUSlcbiAgICAgIGEgPSBhLmRibCgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYjtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuanVtbEFkZCA9IGZ1bmN0aW9uIGp1bWxBZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShvdGhlcikge1xuICByZXR1cm4gdGhpcy5nZXRYKCkuY21wKG90aGVyLmdldFgoKSkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICB0aGlzLnggPSB0aGlzLngucmVkTXVsKHRoaXMuei5yZWRJbnZtKCkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIC8vIE5vcm1hbGl6ZSBjb29yZGluYXRlc1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSByZXF1aXJlKCcuL2Jhc2UnKTtcblxudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gRWR3YXJkc0N1cnZlKGNvbmYpIHtcbiAgLy8gTk9URTogSW1wb3J0YW50IGFzIHdlIGFyZSBjcmVhdGluZyBwb2ludCBpbiBCYXNlLmNhbGwoKVxuICB0aGlzLnR3aXN0ZWQgPSAoY29uZi5hIHwgMCkgIT09IDE7XG4gIHRoaXMubU9uZUEgPSB0aGlzLnR3aXN0ZWQgJiYgKGNvbmYuYSB8IDApID09PSAtMTtcbiAgdGhpcy5leHRlbmRlZCA9IHRoaXMubU9uZUE7XG5cbiAgQmFzZS5jYWxsKHRoaXMsICdlZHdhcmRzJywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnVtb2QodGhpcy5yZWQubSk7XG4gIHRoaXMuYSA9IHRoaXMuYS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYyA9IG5ldyBCTihjb25mLmMsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYzIgPSB0aGlzLmMucmVkU3FyKCk7XG4gIHRoaXMuZCA9IG5ldyBCTihjb25mLmQsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuZGQgPSB0aGlzLmQucmVkQWRkKHRoaXMuZCk7XG5cbiAgYXNzZXJ0KCF0aGlzLnR3aXN0ZWQgfHwgdGhpcy5jLmZyb21SZWQoKS5jbXBuKDEpID09PSAwKTtcbiAgdGhpcy5vbmVDID0gKGNvbmYuYyB8IDApID09PSAxO1xufVxuaW5oZXJpdHMoRWR3YXJkc0N1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gRWR3YXJkc0N1cnZlO1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxBID0gZnVuY3Rpb24gX211bEEobnVtKSB7XG4gIGlmICh0aGlzLm1PbmVBKVxuICAgIHJldHVybiBudW0ucmVkTmVnKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5hLnJlZE11bChudW0pO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5fbXVsQyA9IGZ1bmN0aW9uIF9tdWxDKG51bSkge1xuICBpZiAodGhpcy5vbmVDKVxuICAgIHJldHVybiBudW07XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jLnJlZE11bChudW0pO1xufTtcblxuLy8gSnVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIFNob3J0IGN1cnZlXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6LCB0KSB7XG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHksIHosIHQpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWCh4LCBvZGQpIHtcbiAgeCA9IG5ldyBCTih4LCAxNik7XG4gIGlmICgheC5yZWQpXG4gICAgeCA9IHgudG9SZWQodGhpcy5yZWQpO1xuXG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZFN1Yih0aGlzLmEucmVkTXVsKHgyKSk7XG4gIHZhciBsaHMgPSB0aGlzLm9uZS5yZWRTdWIodGhpcy5jMi5yZWRNdWwodGhpcy5kKS5yZWRNdWwoeDIpKTtcblxuICB2YXIgeTIgPSByaHMucmVkTXVsKGxocy5yZWRJbnZtKCkpO1xuICB2YXIgeSA9IHkyLnJlZFNxcnQoKTtcbiAgaWYgKHkucmVkU3FyKCkucmVkU3ViKHkyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpO1xuICBpZiAob2RkICYmICFpc09kZCB8fCAhb2RkICYmIGlzT2RkKVxuICAgIHkgPSB5LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHkpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21ZID0gZnVuY3Rpb24gcG9pbnRGcm9tWSh5LCBvZGQpIHtcbiAgeSA9IG5ldyBCTih5LCAxNik7XG4gIGlmICgheS5yZWQpXG4gICAgeSA9IHkudG9SZWQodGhpcy5yZWQpO1xuXG4gIC8vIHheMiA9ICh5XjIgLSBjXjIpIC8gKGNeMiBkIHleMiAtIGEpXG4gIHZhciB5MiA9IHkucmVkU3FyKCk7XG4gIHZhciBsaHMgPSB5Mi5yZWRTdWIodGhpcy5jMik7XG4gIHZhciByaHMgPSB5Mi5yZWRNdWwodGhpcy5kKS5yZWRNdWwodGhpcy5jMikucmVkU3ViKHRoaXMuYSk7XG4gIHZhciB4MiA9IGxocy5yZWRNdWwocmhzLnJlZEludm0oKSk7XG5cbiAgaWYgKHgyLmNtcCh0aGlzLnplcm8pID09PSAwKSB7XG4gICAgaWYgKG9kZClcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLnBvaW50KHRoaXMuemVybywgeSk7XG4gIH1cblxuICB2YXIgeCA9IHgyLnJlZFNxcnQoKTtcbiAgaWYgKHgucmVkU3FyKCkucmVkU3ViKHgyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICBpZiAoeC5mcm9tUmVkKCkuaXNPZGQoKSAhPT0gb2RkKVxuICAgIHggPSB4LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHkpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KSB7XG4gIGlmIChwb2ludC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8gQ3VydmU6IEEgKiBYXjIgKyBZXjIgPSBDXjIgKiAoMSArIEQgKiBYXjIgKiBZXjIpXG4gIHBvaW50Lm5vcm1hbGl6ZSgpO1xuXG4gIHZhciB4MiA9IHBvaW50LngucmVkU3FyKCk7XG4gIHZhciB5MiA9IHBvaW50LnkucmVkU3FyKCk7XG4gIHZhciBsaHMgPSB4Mi5yZWRNdWwodGhpcy5hKS5yZWRBZGQoeTIpO1xuICB2YXIgcmhzID0gdGhpcy5jMi5yZWRNdWwodGhpcy5vbmUucmVkQWRkKHRoaXMuZC5yZWRNdWwoeDIpLnJlZE11bCh5MikpKTtcblxuICByZXR1cm4gbGhzLmNtcChyaHMpID09PSAwO1xufTtcblxuZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHksIHosIHQpIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ3Byb2plY3RpdmUnKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICAgIHRoaXMueSA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMueiA9IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMudCA9IHRoaXMuY3VydmUuemVybztcbiAgICB0aGlzLnpPbmUgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICB0aGlzLnogPSB6ID8gbmV3IEJOKHosIDE2KSA6IHRoaXMuY3VydmUub25lO1xuICAgIHRoaXMudCA9IHQgJiYgbmV3IEJOKHQsIDE2KTtcbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy55LnJlZClcbiAgICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnoucmVkKVxuICAgICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAodGhpcy50ICYmICF0aGlzLnQucmVkKVxuICAgICAgdGhpcy50ID0gdGhpcy50LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB0aGlzLnpPbmUgPSB0aGlzLnogPT09IHRoaXMuY3VydmUub25lO1xuXG4gICAgLy8gVXNlIGV4dGVuZGVkIGNvb3JkaW5hdGVzXG4gICAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQgJiYgIXRoaXMudCkge1xuICAgICAgdGhpcy50ID0gdGhpcy54LnJlZE11bCh0aGlzLnkpO1xuICAgICAgaWYgKCF0aGlzLnpPbmUpXG4gICAgICAgIHRoaXMudCA9IHRoaXMudC5yZWRNdWwodGhpcy56LnJlZEludm0oKSk7XG4gICAgfVxuICB9XG59XG5pbmhlcml0cyhQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaikge1xuICByZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcywgb2JqKTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB5LCB6LCB0KSB7XG4gIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeSwgeiwgdCk7XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmopIHtcbiAgcmV0dXJuIG5ldyBQb2ludChjdXJ2ZSwgb2JqWzBdLCBvYmpbMV0sIG9ialsyXSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnguY21wbigwKSA9PT0gMCAmJlxuICAgICh0aGlzLnkuY21wKHRoaXMueikgPT09IDAgfHxcbiAgICAodGhpcy56T25lICYmIHRoaXMueS5jbXAodGhpcy5jdXJ2ZS5jKSA9PT0gMCkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9leHREYmwgPSBmdW5jdGlvbiBfZXh0RGJsKCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1leHRlbmRlZC0xLmh0bWxcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOC1od2NkXG4gIC8vIDRNICsgNFNcblxuICAvLyBBID0gWDFeMlxuICB2YXIgYSA9IHRoaXMueC5yZWRTcXIoKTtcbiAgLy8gQiA9IFkxXjJcbiAgdmFyIGIgPSB0aGlzLnkucmVkU3FyKCk7XG4gIC8vIEMgPSAyICogWjFeMlxuICB2YXIgYyA9IHRoaXMuei5yZWRTcXIoKTtcbiAgYyA9IGMucmVkSUFkZChjKTtcbiAgLy8gRCA9IGEgKiBBXG4gIHZhciBkID0gdGhpcy5jdXJ2ZS5fbXVsQShhKTtcbiAgLy8gRSA9IChYMSArIFkxKV4yIC0gQSAtIEJcbiAgdmFyIGUgPSB0aGlzLngucmVkQWRkKHRoaXMueSkucmVkU3FyKCkucmVkSVN1YihhKS5yZWRJU3ViKGIpO1xuICAvLyBHID0gRCArIEJcbiAgdmFyIGcgPSBkLnJlZEFkZChiKTtcbiAgLy8gRiA9IEcgLSBDXG4gIHZhciBmID0gZy5yZWRTdWIoYyk7XG4gIC8vIEggPSBEIC0gQlxuICB2YXIgaCA9IGQucmVkU3ViKGIpO1xuICAvLyBYMyA9IEUgKiBGXG4gIHZhciBueCA9IGUucmVkTXVsKGYpO1xuICAvLyBZMyA9IEcgKiBIXG4gIHZhciBueSA9IGcucmVkTXVsKGgpO1xuICAvLyBUMyA9IEUgKiBIXG4gIHZhciBudCA9IGUucmVkTXVsKGgpO1xuICAvLyBaMyA9IEYgKiBHXG4gIHZhciBueiA9IGYucmVkTXVsKGcpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56LCBudCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX3Byb2pEYmwgPSBmdW5jdGlvbiBfcHJvakRibCgpIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtcHJvamVjdGl2ZS5odG1sXG4gIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDgtYmJqbHBcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwNy1ibFxuICAvLyBhbmQgb3RoZXJzXG4gIC8vIEdlbmVyYWxseSAzTSArIDRTIG9yIDJNICsgNFNcblxuICAvLyBCID0gKFgxICsgWTEpXjJcbiAgdmFyIGIgPSB0aGlzLngucmVkQWRkKHRoaXMueSkucmVkU3FyKCk7XG4gIC8vIEMgPSBYMV4yXG4gIHZhciBjID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBEID0gWTFeMlxuICB2YXIgZCA9IHRoaXMueS5yZWRTcXIoKTtcblxuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICBpZiAodGhpcy5jdXJ2ZS50d2lzdGVkKSB7XG4gICAgLy8gRSA9IGEgKiBDXG4gICAgdmFyIGUgPSB0aGlzLmN1cnZlLl9tdWxBKGMpO1xuICAgIC8vIEYgPSBFICsgRFxuICAgIHZhciBmID0gZS5yZWRBZGQoZCk7XG4gICAgaWYgKHRoaXMuek9uZSkge1xuICAgICAgLy8gWDMgPSAoQiAtIEMgLSBEKSAqIChGIC0gMilcbiAgICAgIG54ID0gYi5yZWRTdWIoYykucmVkU3ViKGQpLnJlZE11bChmLnJlZFN1Yih0aGlzLmN1cnZlLnR3bykpO1xuICAgICAgLy8gWTMgPSBGICogKEUgLSBEKVxuICAgICAgbnkgPSBmLnJlZE11bChlLnJlZFN1YihkKSk7XG4gICAgICAvLyBaMyA9IEZeMiAtIDIgKiBGXG4gICAgICBueiA9IGYucmVkU3FyKCkucmVkU3ViKGYpLnJlZFN1YihmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSCA9IFoxXjJcbiAgICAgIHZhciBoID0gdGhpcy56LnJlZFNxcigpO1xuICAgICAgLy8gSiA9IEYgLSAyICogSFxuICAgICAgdmFyIGogPSBmLnJlZFN1YihoKS5yZWRJU3ViKGgpO1xuICAgICAgLy8gWDMgPSAoQi1DLUQpKkpcbiAgICAgIG54ID0gYi5yZWRTdWIoYykucmVkSVN1YihkKS5yZWRNdWwoaik7XG4gICAgICAvLyBZMyA9IEYgKiAoRSAtIEQpXG4gICAgICBueSA9IGYucmVkTXVsKGUucmVkU3ViKGQpKTtcbiAgICAgIC8vIFozID0gRiAqIEpcbiAgICAgIG56ID0gZi5yZWRNdWwoaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEUgPSBDICsgRFxuICAgIHZhciBlID0gYy5yZWRBZGQoZCk7XG4gICAgLy8gSCA9IChjICogWjEpXjJcbiAgICB2YXIgaCA9IHRoaXMuY3VydmUuX211bEModGhpcy56KS5yZWRTcXIoKTtcbiAgICAvLyBKID0gRSAtIDIgKiBIXG4gICAgdmFyIGogPSBlLnJlZFN1YihoKS5yZWRTdWIoaCk7XG4gICAgLy8gWDMgPSBjICogKEIgLSBFKSAqIEpcbiAgICBueCA9IHRoaXMuY3VydmUuX211bEMoYi5yZWRJU3ViKGUpKS5yZWRNdWwoaik7XG4gICAgLy8gWTMgPSBjICogRSAqIChDIC0gRClcbiAgICBueSA9IHRoaXMuY3VydmUuX211bEMoZSkucmVkTXVsKGMucmVkSVN1YihkKSk7XG4gICAgLy8gWjMgPSBFICogSlxuICAgIG56ID0gZS5yZWRNdWwoaik7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRG91YmxlIGluIGV4dGVuZGVkIGNvb3JkaW5hdGVzXG4gIGlmICh0aGlzLmN1cnZlLmV4dGVuZGVkKVxuICAgIHJldHVybiB0aGlzLl9leHREYmwoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9wcm9qRGJsKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2V4dEFkZCA9IGZ1bmN0aW9uIF9leHRBZGQocCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1leHRlbmRlZC0xLmh0bWxcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwOC1od2NkLTNcbiAgLy8gOE1cblxuICAvLyBBID0gKFkxIC0gWDEpICogKFkyIC0gWDIpXG4gIHZhciBhID0gdGhpcy55LnJlZFN1Yih0aGlzLngpLnJlZE11bChwLnkucmVkU3ViKHAueCkpO1xuICAvLyBCID0gKFkxICsgWDEpICogKFkyICsgWDIpXG4gIHZhciBiID0gdGhpcy55LnJlZEFkZCh0aGlzLngpLnJlZE11bChwLnkucmVkQWRkKHAueCkpO1xuICAvLyBDID0gVDEgKiBrICogVDJcbiAgdmFyIGMgPSB0aGlzLnQucmVkTXVsKHRoaXMuY3VydmUuZGQpLnJlZE11bChwLnQpO1xuICAvLyBEID0gWjEgKiAyICogWjJcbiAgdmFyIGQgPSB0aGlzLnoucmVkTXVsKHAuei5yZWRBZGQocC56KSk7XG4gIC8vIEUgPSBCIC0gQVxuICB2YXIgZSA9IGIucmVkU3ViKGEpO1xuICAvLyBGID0gRCAtIENcbiAgdmFyIGYgPSBkLnJlZFN1YihjKTtcbiAgLy8gRyA9IEQgKyBDXG4gIHZhciBnID0gZC5yZWRBZGQoYyk7XG4gIC8vIEggPSBCICsgQVxuICB2YXIgaCA9IGIucmVkQWRkKGEpO1xuICAvLyBYMyA9IEUgKiBGXG4gIHZhciBueCA9IGUucmVkTXVsKGYpO1xuICAvLyBZMyA9IEcgKiBIXG4gIHZhciBueSA9IGcucmVkTXVsKGgpO1xuICAvLyBUMyA9IEUgKiBIXG4gIHZhciBudCA9IGUucmVkTXVsKGgpO1xuICAvLyBaMyA9IEYgKiBHXG4gIHZhciBueiA9IGYucmVkTXVsKGcpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56LCBudCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX3Byb2pBZGQgPSBmdW5jdGlvbiBfcHJvakFkZChwKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLXByb2plY3RpdmUuaHRtbFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA4LWJiamxwXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDctYmxcbiAgLy8gMTBNICsgMVNcblxuICAvLyBBID0gWjEgKiBaMlxuICB2YXIgYSA9IHRoaXMuei5yZWRNdWwocC56KTtcbiAgLy8gQiA9IEFeMlxuICB2YXIgYiA9IGEucmVkU3FyKCk7XG4gIC8vIEMgPSBYMSAqIFgyXG4gIHZhciBjID0gdGhpcy54LnJlZE11bChwLngpO1xuICAvLyBEID0gWTEgKiBZMlxuICB2YXIgZCA9IHRoaXMueS5yZWRNdWwocC55KTtcbiAgLy8gRSA9IGQgKiBDICogRFxuICB2YXIgZSA9IHRoaXMuY3VydmUuZC5yZWRNdWwoYykucmVkTXVsKGQpO1xuICAvLyBGID0gQiAtIEVcbiAgdmFyIGYgPSBiLnJlZFN1YihlKTtcbiAgLy8gRyA9IEIgKyBFXG4gIHZhciBnID0gYi5yZWRBZGQoZSk7XG4gIC8vIFgzID0gQSAqIEYgKiAoKFgxICsgWTEpICogKFgyICsgWTIpIC0gQyAtIEQpXG4gIHZhciB0bXAgPSB0aGlzLngucmVkQWRkKHRoaXMueSkucmVkTXVsKHAueC5yZWRBZGQocC55KSkucmVkSVN1YihjKS5yZWRJU3ViKGQpO1xuICB2YXIgbnggPSBhLnJlZE11bChmKS5yZWRNdWwodG1wKTtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIGlmICh0aGlzLmN1cnZlLnR3aXN0ZWQpIHtcbiAgICAvLyBZMyA9IEEgKiBHICogKEQgLSBhICogQylcbiAgICBueSA9IGEucmVkTXVsKGcpLnJlZE11bChkLnJlZFN1Yih0aGlzLmN1cnZlLl9tdWxBKGMpKSk7XG4gICAgLy8gWjMgPSBGICogR1xuICAgIG56ID0gZi5yZWRNdWwoZyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gWTMgPSBBICogRyAqIChEIC0gQylcbiAgICBueSA9IGEucmVkTXVsKGcpLnJlZE11bChkLnJlZFN1YihjKSk7XG4gICAgLy8gWjMgPSBjICogRiAqIEdcbiAgICBueiA9IHRoaXMuY3VydmUuX211bEMoZikucmVkTXVsKGcpO1xuICB9XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gcDtcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGlmICh0aGlzLmN1cnZlLmV4dGVuZGVkKVxuICAgIHJldHVybiB0aGlzLl9leHRBZGQocCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fcHJvakFkZChwKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICBpZiAodGhpcy5faGFzRG91YmxlcyhrKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcywgayk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLCBrKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWxBZGQgPSBmdW5jdGlvbiBtdWxBZGQoazEsIHAsIGsyKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIFsgdGhpcywgcCBdLCBbIGsxLCBrMiBdLCAyLCBmYWxzZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuam11bEFkZCA9IGZ1bmN0aW9uIGptdWxBZGQoazEsIHAsIGsyKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIFsgdGhpcywgcCBdLCBbIGsxLCBrMiBdLCAyLCB0cnVlKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoKSB7XG4gIGlmICh0aGlzLnpPbmUpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gTm9ybWFsaXplIGNvb3JkaW5hdGVzXG4gIHZhciB6aSA9IHRoaXMuei5yZWRJbnZtKCk7XG4gIHRoaXMueCA9IHRoaXMueC5yZWRNdWwoemkpO1xuICB0aGlzLnkgPSB0aGlzLnkucmVkTXVsKHppKTtcbiAgaWYgKHRoaXMudClcbiAgICB0aGlzLnQgPSB0aGlzLnQucmVkTXVsKHppKTtcbiAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gIHRoaXMuek9uZSA9IHRydWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZygpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQodGhpcy54LnJlZE5lZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ICYmIHRoaXMudC5yZWROZWcoKSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIHRoaXMubm9ybWFsaXplKCk7XG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFkgPSBmdW5jdGlvbiBnZXRZKCkge1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuICByZXR1cm4gdGhpcy55LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKG90aGVyKSB7XG4gIHJldHVybiB0aGlzID09PSBvdGhlciB8fFxuICAgICAgICAgdGhpcy5nZXRYKCkuY21wKG90aGVyLmdldFgoKSkgPT09IDAgJiZcbiAgICAgICAgIHRoaXMuZ2V0WSgpLmNtcChvdGhlci5nZXRZKCkpID09PSAwO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxWFRvUCA9IGZ1bmN0aW9uIGVxWFRvUCh4KSB7XG4gIHZhciByeCA9IHgudG9SZWQodGhpcy5jdXJ2ZS5yZWQpLnJlZE11bCh0aGlzLnopO1xuICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHhjID0geC5jbG9uZSgpO1xuICB2YXIgdCA9IHRoaXMuY3VydmUucmVkTi5yZWRNdWwodGhpcy56KTtcbiAgZm9yICg7Oykge1xuICAgIHhjLmlhZGQodGhpcy5jdXJ2ZS5uKTtcbiAgICBpZiAoeGMuY21wKHRoaXMuY3VydmUucCkgPj0gMClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHJ4LnJlZElBZGQodCk7XG4gICAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbi8vIENvbXBhdGliaWxpdHkgd2l0aCBCYXNlQ3VydmVcblBvaW50LnByb3RvdHlwZS50b1AgPSBQb2ludC5wcm90b3R5cGUubm9ybWFsaXplO1xuUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gUG9pbnQucHJvdG90eXBlLmFkZDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGEvMScpO1xuZXhwb3J0cy5zaGEyMjQgPSByZXF1aXJlKCcuL3NoYS8yMjQnKTtcbmV4cG9ydHMuc2hhMjU2ID0gcmVxdWlyZSgnLi9zaGEvMjU2Jyk7XG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhLzM4NCcpO1xuZXhwb3J0cy5zaGE1MTIgPSByZXF1aXJlKCcuL3NoYS81MTInKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG52YXIgcm90bDMyID0gdXRpbHMucm90bDMyO1xudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgZnRfMSA9IHNoYUNvbW1vbi5mdF8xO1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGExX0sgPSBbXG4gIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsXG4gIDB4OEYxQkJDREMsIDB4Q0E2MkMxRDZcbl07XG5cbmZ1bmN0aW9uIFNIQTEoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEExKSlcbiAgICByZXR1cm4gbmV3IFNIQTEoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsXG4gICAgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoODApO1xufVxuXG51dGlscy5pbmhlcml0cyhTSEExLCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEExO1xuXG5TSEExLmJsb2NrU2l6ZSA9IDUxMjtcblNIQTEub3V0U2l6ZSA9IDE2MDtcblNIQTEuaG1hY1N0cmVuZ3RoID0gODA7XG5TSEExLnBhZExlbmd0aCA9IDY0O1xuXG5TSEExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG5cbiAgZm9yKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHJvdGwzMihXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdLCAxKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG5cbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcyA9IH5+KGkgLyAyMCk7XG4gICAgdmFyIHQgPSBzdW0zMl81KHJvdGwzMihhLCA1KSwgZnRfMShzLCBiLCBjLCBkKSwgZSwgV1tpXSwgc2hhMV9LW3NdKTtcbiAgICBlID0gZDtcbiAgICBkID0gYztcbiAgICBjID0gcm90bDMyKGIsIDMwKTtcbiAgICBiID0gYTtcbiAgICBhID0gdDtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG59O1xuXG5TSEExLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBTSEEyNTYgPSByZXF1aXJlKCcuLzI1NicpO1xuXG5mdW5jdGlvbiBTSEEyMjQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyMjQpKVxuICAgIHJldHVybiBuZXcgU0hBMjI0KCk7XG5cbiAgU0hBMjU2LmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGMxMDU5ZWQ4LCAweDM2N2NkNTA3LCAweDMwNzBkZDE3LCAweGY3MGU1OTM5LFxuICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTIyNCwgU0hBMjU2KTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjI0O1xuXG5TSEEyMjQuYmxvY2tTaXplID0gNTEyO1xuU0hBMjI0Lm91dFNpemUgPSAyMjQ7XG5TSEEyMjQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjI0LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyMjQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIC8vIEp1c3QgdHJ1bmNhdGUgb3V0cHV0XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBTSEE1MTIgPSByZXF1aXJlKCcuLzUxMicpO1xuXG5mdW5jdGlvbiBTSEEzODQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEzODQpKVxuICAgIHJldHVybiBuZXcgU0hBMzg0KCk7XG5cbiAgU0hBNTEyLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGNiYmI5ZDVkLCAweGMxMDU5ZWQ4LFxuICAgIDB4NjI5YTI5MmEsIDB4MzY3Y2Q1MDcsXG4gICAgMHg5MTU5MDE1YSwgMHgzMDcwZGQxNyxcbiAgICAweDE1MmZlY2Q4LCAweGY3MGU1OTM5LFxuICAgIDB4NjczMzI2NjcsIDB4ZmZjMDBiMzEsXG4gICAgMHg4ZWI0NGE4NywgMHg2ODU4MTUxMSxcbiAgICAweGRiMGMyZTBkLCAweDY0Zjk4ZmE3LFxuICAgIDB4NDdiNTQ4MWQsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTM4NCwgU0hBNTEyKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMzg0O1xuXG5TSEEzODQuYmxvY2tTaXplID0gMTAyNDtcblNIQTM4NC5vdXRTaXplID0gMzg0O1xuU0hBMzg0LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTM4NC5wYWRMZW5ndGggPSAxMjg7XG5cblNIQTM4NC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDEyKSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDEyKSwgJ2JpZycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl8zID0gdXRpbHMuc3VtMzJfMztcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG5mdW5jdGlvbiBSSVBFTUQxNjAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSSVBFTUQxNjApKVxuICAgIHJldHVybiBuZXcgUklQRU1EMTYwKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5oID0gWyAweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwIF07XG4gIHRoaXMuZW5kaWFuID0gJ2xpdHRsZSc7XG59XG51dGlscy5pbmhlcml0cyhSSVBFTUQxNjAsIEJsb2NrSGFzaCk7XG5leHBvcnRzLnJpcGVtZDE2MCA9IFJJUEVNRDE2MDtcblxuUklQRU1EMTYwLmJsb2NrU2l6ZSA9IDUxMjtcblJJUEVNRDE2MC5vdXRTaXplID0gMTYwO1xuUklQRU1EMTYwLmhtYWNTdHJlbmd0aCA9IDE5MjtcblJJUEVNRDE2MC5wYWRMZW5ndGggPSA2NDtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIEEgPSB0aGlzLmhbMF07XG4gIHZhciBCID0gdGhpcy5oWzFdO1xuICB2YXIgQyA9IHRoaXMuaFsyXTtcbiAgdmFyIEQgPSB0aGlzLmhbM107XG4gIHZhciBFID0gdGhpcy5oWzRdO1xuICB2YXIgQWggPSBBO1xuICB2YXIgQmggPSBCO1xuICB2YXIgQ2ggPSBDO1xuICB2YXIgRGggPSBEO1xuICB2YXIgRWggPSBFO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyBqKyspIHtcbiAgICB2YXIgVCA9IHN1bTMyKFxuICAgICAgcm90bDMyKFxuICAgICAgICBzdW0zMl80KEEsIGYoaiwgQiwgQywgRCksIG1zZ1tyW2pdICsgc3RhcnRdLCBLKGopKSxcbiAgICAgICAgc1tqXSksXG4gICAgICBFKTtcbiAgICBBID0gRTtcbiAgICBFID0gRDtcbiAgICBEID0gcm90bDMyKEMsIDEwKTtcbiAgICBDID0gQjtcbiAgICBCID0gVDtcbiAgICBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQWgsIGYoNzkgLSBqLCBCaCwgQ2gsIERoKSwgbXNnW3JoW2pdICsgc3RhcnRdLCBLaChqKSksXG4gICAgICAgIHNoW2pdKSxcbiAgICAgIEVoKTtcbiAgICBBaCA9IEVoO1xuICAgIEVoID0gRGg7XG4gICAgRGggPSByb3RsMzIoQ2gsIDEwKTtcbiAgICBDaCA9IEJoO1xuICAgIEJoID0gVDtcbiAgfVxuICBUID0gc3VtMzJfMyh0aGlzLmhbMV0sIEMsIERoKTtcbiAgdGhpcy5oWzFdID0gc3VtMzJfMyh0aGlzLmhbMl0sIEQsIEVoKTtcbiAgdGhpcy5oWzJdID0gc3VtMzJfMyh0aGlzLmhbM10sIEUsIEFoKTtcbiAgdGhpcy5oWzNdID0gc3VtMzJfMyh0aGlzLmhbNF0sIEEsIEJoKTtcbiAgdGhpcy5oWzRdID0gc3VtMzJfMyh0aGlzLmhbMF0sIEIsIENoKTtcbiAgdGhpcy5oWzBdID0gVDtcbn07XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnbGl0dGxlJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdsaXR0bGUnKTtcbn07XG5cbmZ1bmN0aW9uIGYoaiwgeCwgeSwgeikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4geCBeIHkgXiB6O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAoeCAmIHkpIHwgKCh+eCkgJiB6KTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gKHggfCAofnkpKSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuICh4ICYgeikgfCAoeSAmICh+eikpO1xuICBlbHNlXG4gICAgcmV0dXJuIHggXiAoeSB8ICh+eikpO1xufVxuXG5mdW5jdGlvbiBLKGopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuIDB4NWE4Mjc5OTk7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuIDB4NmVkOWViYTE7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuIDB4OGYxYmJjZGM7XG4gIGVsc2VcbiAgICByZXR1cm4gMHhhOTUzZmQ0ZTtcbn1cblxuZnVuY3Rpb24gS2goaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHg1MGEyOGJlNjtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YzRkZDEyNDtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZDcwM2VmMztcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg3YTZkNzZlOTtcbiAgZWxzZVxuICAgIHJldHVybiAweDAwMDAwMDAwO1xufVxuXG52YXIgciA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXTtcblxudmFyIHJoID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dO1xuXG52YXIgcyA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl07XG5cbnZhciBzaCA9IFtcbiAgOCwgOSwgOSwgMTEsIDEzLCAxNSwgMTUsIDUsIDcsIDcsIDgsIDExLCAxNCwgMTQsIDEyLCA2LFxuICA5LCAxMywgMTUsIDcsIDEyLCA4LCA5LCAxMSwgNywgNywgMTIsIDcsIDYsIDE1LCAxMywgMTEsXG4gIDksIDcsIDE1LCAxMSwgOCwgNiwgNiwgMTQsIDEyLCAxMywgNSwgMTQsIDEzLCAxMywgNywgNSxcbiAgMTUsIDUsIDgsIDExLCAxNCwgMTQsIDYsIDE0LCA2LCA5LCAxMiwgOSwgMTIsIDUsIDE1LCA4LFxuICA4LCA1LCAxMiwgOSwgMTIsIDUsIDE0LCA2LCA4LCAxMywgNiwgNSwgMTUsIDEzLCAxMSwgMTFcbl07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEhtYWMoaGFzaCwga2V5LCBlbmMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWMpKVxuICAgIHJldHVybiBuZXcgSG1hYyhoYXNoLCBrZXksIGVuYyk7XG4gIHRoaXMuSGFzaCA9IGhhc2g7XG4gIHRoaXMuYmxvY2tTaXplID0gaGFzaC5ibG9ja1NpemUgLyA4O1xuICB0aGlzLm91dFNpemUgPSBoYXNoLm91dFNpemUgLyA4O1xuICB0aGlzLmlubmVyID0gbnVsbDtcbiAgdGhpcy5vdXRlciA9IG51bGw7XG5cbiAgdGhpcy5faW5pdCh1dGlscy50b0FycmF5KGtleSwgZW5jKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWM7XG5cbkhtYWMucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChrZXkpIHtcbiAgLy8gU2hvcnRlbiBrZXksIGlmIG5lZWRlZFxuICBpZiAoa2V5Lmxlbmd0aCA+IHRoaXMuYmxvY2tTaXplKVxuICAgIGtleSA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KS5kaWdlc3QoKTtcbiAgYXNzZXJ0KGtleS5sZW5ndGggPD0gdGhpcy5ibG9ja1NpemUpO1xuXG4gIC8vIEFkZCBwYWRkaW5nIHRvIGtleVxuICBmb3IgKHZhciBpID0ga2V5Lmxlbmd0aDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAga2V5LnB1c2goMCk7XG5cbiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHgzNjtcbiAgdGhpcy5pbm5lciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcblxuICAvLyAweDM2IF4gMHg1YyA9IDB4NmFcbiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHg2YTtcbiAgdGhpcy5vdXRlciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcbn07XG5cbkhtYWMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICB0aGlzLmlubmVyLnVwZGF0ZShtc2csIGVuYyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuSG1hYy5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLm91dGVyLnVwZGF0ZSh0aGlzLmlubmVyLmRpZ2VzdCgpKTtcbiAgcmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KGVuYyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRvdWJsZXM6IHtcbiAgICBzdGVwOiA0LFxuICAgIHBvaW50czogW1xuICAgICAgW1xuICAgICAgICAnZTYwZmNlOTNiNTllOWVjNTMwMTFhYWJjMjFjMjNlOTdiMmEzMTM2OWI4N2E1YWU5YzQ0ZWU4OWUyYTZkZWMwYScsXG4gICAgICAgICdmN2UzNTA3Mzk5ZTU5NTkyOWRiOTlmMzRmNTc5MzcxMDEyOTY4OTFlNDRkMjNmMGJlMWYzMmNjZTY5NjE2ODIxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgyODIyNjMyMTJjNjA5ZDllYTJhNmUzZTE3MmRlMjM4ZDhjMzljYWJkNWFjMWNhMTA2NDZlMjNmZDVmNTE1MDgnLFxuICAgICAgICAnMTFmOGE4MDk4NTU3ZGZlNDVlODI1NmU4MzBiNjBhY2U2MmQ2MTNhYzJmN2IxN2JlZDMxYjZlYWZmNmUyNmNhZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzVlMTU5ZjcyOGI4NjVhNzJmOTljYzZjNmZjODQ2ZGUwYjkzODMzZmQyMjIyZWQ3M2ZjZTViNTUxZTViNzM5JyxcbiAgICAgICAgJ2QzNTA2ZTBkOWUzYzc5ZWJhNGVmOTdhNTFmZjcxZjVlYWNiNTk1NWFkZDI0MzQ1YzZlZmE2ZmZlZTlmZWQ2OTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzYzZDkwZDQ0N2IwMGM5Yzk5Y2VhYzA1YjYyNjJlZTA1MzQ0MWM3ZTU1NTUyZmZlNTI2YmFkOGY4M2ZmNDY0MCcsXG4gICAgICAgICc0ZTI3M2FkZmM3MzIyMjE5NTNiNDQ1Mzk3ZjMzNjMxNDViOWE4OTAwODE5OWVjYjYyMDAzYzdmM2JlZTlkZTknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGI0YjVmMTY1ZGYzYzJiZThjNjI0NGI1Yjc0NTYzODg0M2U0YTc4MWExNWJjZDFiNjlmNzlhNTVkZmZkZjgwYycsXG4gICAgICAgICc0YWFkMGE2ZjY4ZDMwOGI0YjNmYmQ3ODEzYWIwZGEwNGY5ZTMzNjU0NjE2MmVlNTZiM2VmZjBjNjVmZDRmZDM2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzcyM2NiYWE2ZTVkYjk5NmQ2YmY3NzFjMDBiZDU0OGM3YjcwMGRiZmZhNmMwZTc3YmNiNjExNTkyNTIzMmZjZGEnLFxuICAgICAgICAnOTZlODY3YjU1OTVjYzQ5OGE5MjExMzc0ODg4MjRkNmUyNjYwYTA2NTM3Nzk0OTQ4MDFkYzA2OWQ5ZWIzOWY1ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZWJmYTRkNDkzYmViZjk4YmE1ZmVlYzgxMmMyZDNiNTA5NDc5NjEyMzdhOTE5ODM5YTUzM2VjYTBlN2RkN2ZhJyxcbiAgICAgICAgJzVkOWE4Y2EzOTcwZWYwZjI2OWVlN2VkYWYxNzgwODlkOWFlNGNkYzNhNzExZjcxMmRkZmQ0ZmRhZTFkZTg5OTknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTAwZjQ0ZGE2OTZlNzE2NzI3OTFkMGEwOWI3YmRlNDU5ZjEyMTVhMjliM2MwM2JmZWZkNzgzNWIzOWE0OGRiMCcsXG4gICAgICAgICdjZGQ5ZTEzMTkyYTAwYjc3MmVjOGYzMzAwYzA5MDY2NmI3ZmY0YTE4ZmY1MTk1YWMwZmJkNWNkNjJiYzY1YTA5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UxMDMxYmUyNjJjN2VkMWIxZGM5MjI3YTRhMDRjMDE3YTc3ZjhkNDQ2NGYzYjM4NTJjOGFjZGU2ZTUzNGZkMmQnLFxuICAgICAgICAnOWQ3MDYxOTI4OTQwNDA1ZTZiYjZhNDE3NjU5NzUzNWFmMjkyZGQ0MTllMWNlZDc5YTQ0ZjE4ZjI5NDU2YTAwZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZWVhNmNhZTQ2ZDU1YjUzMGFjMjgzOWYxNDNiZDdlYzVjZjhiMjY2YTQxZDZhZjUyZDVlNjg4ZDkwOTQ2OTZkJyxcbiAgICAgICAgJ2U1N2M2YjZjOTdkY2UxYmFiMDZlNGUxMmJmM2VjZDVjOTgxYzg5NTdjYzQxNDQyZDMxNTVkZWJmMTgwOTAwODgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGE2N2E5MWQ5MTA0OWNkY2IzNjdiZTRiZTZmZmNhM2NmZWVkNjU3ZDgwODU4M2RlMzNmYTk3OGJjMWVjNmNiMScsXG4gICAgICAgICc5YmFjYWEzNTQ4MTY0MmJjNDFmNDYzZjdlYzk3ODBlNWRlYzdhZGM1MDhmNzQwYTE3ZTllYThlMjdhNjhiZTFkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUzOTA0ZmFhMGIzMzRjZGRhNmUwMDA5MzVlZjIyMTUxZWMwOGQwZjdiYjExMDY5ZjU3NTQ1Y2NjMWEzN2I3YzAnLFxuICAgICAgICAnNWJjMDg3ZDBiYzgwMTA2ZDg4YzllY2NhYzIwZDNjMWMxMzk5OTk4MWUxNDQzNDY5OWRjYjA5NmIwMjI3NzFjOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZTdiY2QwYmQzNTk4M2E3NzE5Y2NhNzc2NGNhOTA2Nzc5YjUzYTA0M2E5YjhiY2FlZmY5NTlmNDNhZDg2MDQ3JyxcbiAgICAgICAgJzEwYjc3NzBiMmEzZGE0YjM5NDAzMTA0MjBjYTk1MTQ1NzllODhlMmU0N2ZkNjhiM2VhMTAwNDdlODQ2MDM3MmEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzg1ZWVkMzRjMWNkZmYyMWU2ZDA4MTg2ODliODFiZGU3MWE3ZjRmMTgzOTdlNjY5MGE4NDFlMTU5OWM0Mzg2MicsXG4gICAgICAgICcyODNiZWJjM2U4ZWEyM2Y1NjcwMWRlMTllOWViZjQ1NzZiMzA0ZWVjMjA4NmRjOGNjMDQ1OGZlNTU0MmU1NDUzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZmOWQ5YjgwM2VjZjE5MTYzN2M3M2E0NDEzZGZhMTgwZmRkZjg0YTU5NDdmYmM5YzYwNmVkODZjM2ZhYzNhNycsXG4gICAgICAgICc3YzgwYzY4ZTYwMzA1OWJhNjliOGUyYTMwZTQ1YzRkNDdlYTRkZDJmNWMyODEwMDJkODY4OTA2MDNhODQyMTYwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMzMjJkNDAxMjQzYzRlMjU4MmEyMTQ3YzEwNGQ2ZWNiZjc3NGQxNjNkYjBmNWU1MzEzYjdlMGU3NDJkMGU2YmQnLFxuICAgICAgICAnNTZlNzA3OTdlOTY2NGVmNWJmYjAxOWJjNGRkYWY5YjcyODA1ZjYzZWEyODczYWY2MjRmM2EyZTk2YzI4YjJhMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NTY3MmM3ZDJkZTBiN2RhMmJkMTc3MGQ4OTY2NTg2ODc0MWIzZjlhZjc2NDMzOTc3MjFkNzRkMjgxMzRhYjgzJyxcbiAgICAgICAgJzdjNDgxYjliNWI0M2IyZWI2Mzc0MDQ5YmZhNjJjMmU1ZTc3ZjE3ZmNjNTI5OGY0NGM4ZTMwOTRmNzkwMzEzYTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTQ4YmY4MDliMTk4OGE0NmIwNmM5ZjE5MTk0MTNiMTBmOTIyNmM2MGY2Njg4MzJmZmQ5NTlhZjYwYzgyYTBhJyxcbiAgICAgICAgJzUzYTU2Mjg1NmRjYjY2NDZkYzZiNzRjNWQxYzM0MThjNmQ0ZGZmMDhjOTdjZDJiZWQ0Y2I3Zjg4ZDhjOGU1ODknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjI2MGNlN2Y0NjE4MDFjMzRmMDY3Y2UwZjAyODczYThmMWIwZTQ0ZGZjNjk3NTJhY2NlY2Q4MTlmMzhmZDhlOCcsXG4gICAgICAgICdiYzJkYTgyYjZmYTViNTcxYTdmMDkwNDk3NzZhMWVmN2VjZDI5MjIzODA1MWMxOThjMWE4NGU5NWIyYjRhZTE3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U1MDM3ZGUwYWZjMWQ4ZDQzZDgzNDg0MTRiYmY0MTAzMDQzZWM4ZjU3NWJmZGM0MzI5NTNjYzhkMjAzN2ZhMmQnLFxuICAgICAgICAnNDU3MTUzNGJhYTk0ZDNiNWY5Zjk4ZDA5ZmI5OTBiZGRiZDVmNWIwM2VjNDgxZjEwZTBlNWRjODQxZDc1NWJkYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMDYzNzJiMGY0YTIwN2FkZjVlYTkwNWU4ZjE3NzFiNGU3ZThkYmQxYzZhNmM1YjcyNTg2NmEwYWU0ZmNlNzI1JyxcbiAgICAgICAgJzdhOTA4OTc0YmNlMThjZmUxMmEyN2JiMmFkNWE0ODhjZDc0ODRhNzc4NzEwNDg3MGIyNzAzNGY5NGVlZTMxZGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjEzYzdhNzE1Y2Q1ZDQ1MzU4ZDBiYmY5ZGMwY2UwMjIwNGIxMGJkZGUyYTNmNTg1NDBhZDY5MDhkMDU1OTc1NCcsXG4gICAgICAgICc0YjZkYWQwYjVhZTQ2MjUwNzAxM2FkMDYyNDViYTE5MGJiNDg1MGY1ZjM2YTdlZWRkZmYyYzI3NTM0YjQ1OGYyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlN2MyNzJhN2FmNGIzNGU4ZGJiOTM1MmE1NDE5YTg3ZTI4MzhjNzBhZGM2MmNkZGYwY2MzYTNiMDhmYmQ1M2MnLFxuICAgICAgICAnMTc3NDljNzY2YzlkMGIxOGUxNmZkMDlmNmRlZjY4MWI1MzBiOTYxNGJmZjdkZDMzZTBiMzk0MTgxN2RjYWFlNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZWE3NGUzZGJlNzc4YjFiMTBmMjM4YWQ2MTY4NmFhNWM3NmUzZGIyYmU0MzA1NzYzMjQyN2UyODQwZmIyN2I2JyxcbiAgICAgICAgJzZlMDU2OGRiOWIwYjEzMjk3Y2Y2NzRkZWNjYjZhZjkzMTI2YjU5NmI5NzNmN2I3NzcwMWQzZGI3ZjIzY2I5NmYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzZlNjQxMTNmNjc3Y2YwZTEwYTI1NzBkNTk5OTY4ZDMxNTQ0ZTE3OWI3NjA0MzI5NTJjMDJhNDQxN2JkZGUzOScsXG4gICAgICAgICdjOTBkZGY4ZGVlNGU5NWNmNTc3MDY2ZDcwNjgxZjBkMzVlMmEzM2QyYjU2ZDIwMzJiNGIxNzUyZDE5MDFhYzAxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M3MzhjNTZiMDNiMmFiZTFlODI4MWJhYTc0M2Y4ZjlhOGY3Y2M2NDNkZjI2Y2JlZTNhYjE1MDI0MmJjYmI4OTEnLFxuICAgICAgICAnODkzZmI1Nzg5NTFhZDI1MzdmNzE4ZjJlYWNiZmJiYmI4MjMxNGVlZjc4ODBjZmU5MTdlNzM1ZDk2OTlhODRjMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkODk1NjI2NTQ4YjY1YjgxZTI2NGM3NjM3Yzk3Mjg3N2QxZDcyZTVmM2E5MjUwMTQzNzJlOWY2NTg4ZjZjMTRiJyxcbiAgICAgICAgJ2ZlYmZhYTM4ZjJiYzdlYWU3MjhlYzYwODE4YzM0MGViMDM0MjhkNjMyYmIwNjdlMTc5MzYzZWQ3NWQ3ZDk5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjhkYTk0MDMyYTk1NzUxOGViMGY2NDMzNTcxZTg3NjFjZWZmYzczNjkzZTg0ZWRkNDkxNTBhNTY0ZjY3NmUwMycsXG4gICAgICAgICcyODA0ZGZhNDQ4MDVhMWU0ZDdjOTljYzk3NjI4MDhiMDkyY2M1ODRkOTVmZjNiNTExNDg4ZTRlNzRlZmRmNmU3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U4MGZlYTE0NDQxZmIzM2E3ZDhhZGFiOTQ3NWQ3ZmFiMjAxOWVmZmI1MTU2YTc5MmYxYTExNzc4ZTNjMGRmNWQnLFxuICAgICAgICAnZWVkMWRlN2Y2MzhlMDA3NzFlODk3NjhjYTNjYTk0NDcyZDE1NWU4MGFmMzIyZWE5ZmNiNDI5MWI2YWM5ZWM3OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMzAxNjk3YmRmY2Q3MDQzMTNiYTQ4ZTUxZDU2NzU0M2YyYTE4MjAzMWVmZDY5MTVkZGMwN2JiY2M0ZTE2MDcwJyxcbiAgICAgICAgJzczNzBmOTFjZmI2N2U0ZjUwODE4MDlmYTI1ZDQwZjliMTczNWRiZjdjMGExMWExMzBjMGQxYTA0MWUxNzdlYTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTBhZDg1YjM4OWQ2YjkzNjQ2M2Y5ZDA1MTI2NzhkZTIwOGNjMzMwYjExMzA3ZmZmYWI3YWM2M2UzZmIwNGVkNCcsXG4gICAgICAgICdlNTA3YTM2MjBhMzgyNjFhZmZkY2JkOTQyNzIyMmI4MzlhZWZhYmUxNTgyODk0ZDk5MWQ0ZDQ4Y2I2ZWYxNTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGY2OGI5ZDJmNjNiNWYzMzkyMzljMWFkOTgxZjE2MmVlODhjNTY3ODcyM2VhMzM1MWI3YjQ0NGM5ZWM0YzBkYScsXG4gICAgICAgICc2NjJhOWYyZGJhMDYzOTg2ZGUxZDkwYzJiNmJlMjE1ZGJiZWEyY2ZlOTU1MTBiZmRmMjNjYmY3OTUwMWZmZjgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U0ZjNmYjAxNzZhZjg1ZDY1ZmY5OWZmOTE5OGMzNjA5MWY0OGU4NjUwMzY4MWUzZTY2ODZmZDUwNTMyMzFlMTEnLFxuICAgICAgICAnMWU2MzYzM2FkMGVmNGYxYzE2NjFhNmQwZWEwMmI3Mjg2Y2M3ZTc0ZWM5NTFkMWM5ODIyYzM4NTc2ZmViNzNiYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YzAwZmE5YjE4ZWJmMzMxZWI5NjE1MzdhNDVhNDI2NmM3MDM0ZjJmMGQ0ZTFkMDcxNmZiNmVhZTIwZWFlMjllJyxcbiAgICAgICAgJ2VmYTQ3MjY3ZmVhNTIxYTFhOWRjMzQzYTM3MzZjOTc0YzJmYWRhZmE4MWUzNmM1NGU3ZDJhNGM2NjcwMjQxNGInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTdhMjZjZTY5ZGQ0ODI5ZjNlMTBjZWMwYTllOThlZDMxNDNkMDg0ZjMwOGI5MmMwOTk3ZmRkZmM2MGNiM2U0MScsXG4gICAgICAgICcyYTc1OGUzMDBmYTc5ODRiNDcxYjAwNmExYWFmYmIxOGQwYTZiMmMwNDIwZTgzZTIwZThhOTQyMWNmMmNmZDUxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I2NDU5ZTBlZTM2NjJlYzhkMjM1NDBjMjIzYmNiZGM1NzFjYmNiOTY3ZDc5NDI0ZjNjZjI5ZWIzZGU2YjgwZWYnLFxuICAgICAgICAnNjdjODc2ZDA2ZjNlMDZkZTFkYWRmMTZlNTY2MWRiM2M0YjNhZTZkNDhlMzViMmZmMzBiZjBiNjFhNzFiYTQ1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q2OGE4MGM4MjgwYmI4NDA3OTMyMzRhYTExOGYwNjIzMWQ2ZjFmYzY3ZTczYzVhNWRlZGEwZjViNDk2OTQzZTgnLFxuICAgICAgICAnZGI4YmE5ZmZmNGI1ODZkMDBjNGIxZjkxNzdiMGUyOGI1YjBlN2I4Zjc4NDUyOTVhMjk0Yzg0MjY2YjEzMzEyMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMjRhZWQ3ZGY2NWM4MDQyNTJkYzAyNzA5MDdhMzBiMDk2MTJhZWI5NzM0NDljZWE0MDk1OTgwZmMyOGQzZDVkJyxcbiAgICAgICAgJzY0OGEzNjU3NzRiNjFmMmZmMTMwYzBjMzVhZWMxZjRmMTkyMTNiMGM3ZTMzMjg0Mzk2NzIyNGFmOTZhYjdjODQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGRmOWMxNDkxOWNkZTYxZjZkNTFkZmRiZTVmZWU1ZGNlZWM0MTQzYmE4ZDFjYTg4OGU4YmQzNzNmZDA1NGM5NicsXG4gICAgICAgICczNWVjNTEwOTJkODcyODA1MDk3NGMyM2ExZDg1ZDRiNWQ1MDZjZGMyODg0OTAxOTJlYmFjMDZjYWQxMGQ1ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5YzM5MTlhODRhNDc0ODcwZmFlZDhhOWMxY2M2NjAyMTUyMzQ4OTA1NGQ3ZjAzMDhjYmZjOTljOGFjMWY5OGNkJyxcbiAgICAgICAgJ2RkYjg0ZjBmNGE0ZGRkNTc1ODRmMDQ0YmYyNjBlNjQxOTA1MzI2Zjc2YzY0YzhlNmJlN2U1ZTAzZDRmYzU5OWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjA1NzE3MGIxZGQxMmZkZjhkZTA1ZjI4MWQ4ZTA2YmI5MWUxNDkzYThiOTFkNGNjNWEyMTM4MjEyMGE5NTllNScsXG4gICAgICAgICc5YTFhZjBiMjZhNmE0ODA3YWRkOWEyZGFmNzFkZjI2MjQ2NTE1MmJjM2VlMjRjNjVlODk5YmU5MzIzODVhMmE4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E1NzZkZjhlMjNhMDg0MTE0MjE0MzlhNDUxOGRhMzE4ODBjZWYwZmJhN2Q0ZGYxMmIxYTY5NzNlZWNiOTQyNjYnLFxuICAgICAgICAnNDBhNmJmMjBlNzY2NDBiMmM5MmI5N2FmZTU4Y2Q4MmM0MzJlMTBhN2Y1MTRkOWYzZWU4YmUxMWFlMWIyOGVjOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3Nzc4YTc4YzI4ZGVjM2UzMGEwNWZlOTYyOWRlOGMzOGJiMzBkMWY1Y2Y5YTNhMjA4Zjc2Mzg4OWJlNThhZDcxJyxcbiAgICAgICAgJzM0NjI2ZDlhYjVhNWIyMmZmNzA5OGUxMmYyZmY1ODAwODdiMzg0MTFmZjI0YWM1NjNiNTEzZmMxZmQ5ZjQzYWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTI4OTU1ZWU2MzdhODQ0NjM3MjlmZDMwZTdhZmQyZWQ1Zjk2Mjc0ZTVhZDdlNWNiMDllZGE5YzA2ZDkwM2FjJyxcbiAgICAgICAgJ2MyNTYyMTAwM2QzZjQyYTgyN2I3OGExMzA5M2E5NWVlYWMzZDI2ZWZhOGE4ZDgzZmM1MTgwZTkzNWJjZDA5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODVkMGZlZjNlYzZkYjEwOTM5OTA2NGYzYTBlM2IyODU1NjQ1YjRhOTA3YWQzNTQ1MjdhYWU3NTE2M2Q4Mjc1MScsXG4gICAgICAgICcxZjAzNjQ4NDEzYTM4YzBiZTI5ZDQ5NmU1ODJjZjU2NjNlODc1MWU5Njg3NzMzMTU4MmMyMzdhMjRlYjFmOTYyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZmMmIwZGNlOTdlZWNlOTdjMWM5YjYwNDE3OThiODVkZmRmYjZkODg4MmRhMjAzMDhmNTQwNDgyNDUyNjA4N2UnLFxuICAgICAgICAnNDkzZDEzZmVmNTI0YmExODhhZjRjNGRjNTRkMDc5MzZjN2I3ZWQ2ZmI5MGUyY2ViMmM5NTFlMDFmMGMyOTkwNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MjdmYmJlNGIxZTg4MGVhOWVkMmIyZTYzMDFiMjEyYjU3ZjFlZTE0OGNkNmRkMjg3ODBlNWUyY2Y4NTZlMjQxJyxcbiAgICAgICAgJ2M2MGY5YzkyM2M3MjdiMGI3MWJlZjJjNjdkMWQxMjY4N2ZmN2E2MzE4NjkwMzE2NmQ2MDViNjhiYWVjMjkzZWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWFhNjQ5ZjIxZjUxYmRiYWU3YmU0YWUzNGNlNmU1MjE3YTU4ZmRjZTdmNDdmOWFhN2YzYjU4ZmEyMTIwZTJiMycsXG4gICAgICAgICdiZTMyNzllZDViYmJiMDNhYzY5YTgwZjg5ODc5YWE1YTAxYTZiOTY1ZjEzZjdlNTlkNDdhNTMwNWJhNWFkOTNkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U0YTQyZDQzYzVjZjE2OWQ5MzkxZGY2ZGVjZjQyZWU1NDFiNmQ4ZjBjOWExMzc0MDFlMjM2MzJkZGEzNGQyNGYnLFxuICAgICAgICAnNGQ5ZjkyZTcxNmQxYzczNTI2ZmM5OWNjZmI4YWQzNGNlODg2ZWVkZmE4ZDhlNGYxM2E3ZjcxMzFkZWJhOTQxNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxZWM4MGZlZjM2MGNiZGQ5NTQxNjBmYWRhYjM1MmI2YjkyYjUzNTc2YTg4ZmVhNDk0NzE3M2I5ZDQzMDBiZjE5JyxcbiAgICAgICAgJ2FlZWZlOTM3NTZiNTM0MGQyZjNhNDk1OGE3YWJiZjVlMDE0NmU3N2Y2Mjk1YTA3YjY3MWNkYzFjYzEwN2NlZmQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTQ2YTc3OGMwNDY3MGMyZjkxYjAwYWY0NjgwZGZhOGJjZTM0OTA3MTdkNThiYTg4OWRkYjU5MjgzNjY2NDJiZScsXG4gICAgICAgICdiMzE4ZTBlYzMzNTQwMjhhZGQ2Njk4MjdmOWQ0YjI4NzBhYWE5NzFkMmY3ZTVlZDFkMGIyOTc0ODNkODNlZmQwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZhNTBjMGY2MWQyMmU1ZjA3ZTNhY2ViYjFhYTA3YjEyOGQwMDEyMjA5YTI4Yjk3NzZkNzZhODc5MzE4MGVlZjknLFxuICAgICAgICAnNmI4NGM2OTIyMzk3ZWJhOWI3MmNkMjg3MjI4MWE2OGE1ZTY4MzI5M2E1N2EyMTNiMzhjZDhkN2QzZjRmMjgxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTFkNjFkMGNhNzIxYTExYjFhNWJmNmI3ZDg4ZTg0MjFhMjg4YWI1ZDViYmE1MjIwZTUzZDMyYjVmMDY3ZWMyJyxcbiAgICAgICAgJzgxNTdmNTVhN2M5OTMwNmM3OWMwNzY2MTYxYzkxZTI5NjZhNzM4OTlkMjc5YjQ4YTY1NWZiYTBmMWFkODM2ZjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYThlMjgyZmYwYzk3MDY5MDcyMTVmZjk4ZThmZDQxNjYxNTMxMWRlMDQ0NmYxZTA2MmE3M2IwNjEwZDA2NGUxMycsXG4gICAgICAgICc3Zjk3MzU1YjhkYjgxYzA5YWJmYjdmM2M1YjI1MTU4ODhiNjc5YTNlNTBkZDZiZDZjZWY3YzczMTExZjRjYzBjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NGE1M2I5YzlhMjg1ODcyZDM5ZTU2ZTY5MTNjYWIxNWQ1OWIxZmE1MTI1MDhjMDIyZjM4MmRlODMxOTQ5N2MnLFxuICAgICAgICAnY2NjOWRjMzdhYmZjOWMxNjU3YjQxNTVmMmM0N2Y5ZTY2NDZiM2ExZDhjYjk4NTQzODNkYTEzYWMwNzlhZmE3MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5NTkzOTY5ODE5NDM3ODVjM2QzZTU3ZWRmNTAxOGNkYmUwMzllNzMwZTQ5MThiM2Q4ODRmZGZmMDk0NzViN2JhJyxcbiAgICAgICAgJzJlN2U1NTI4ODhjMzMxZGQ4YmEwMzg2YTRiOWNkNjg0OWM2NTNmNjRjODcwOTM4NWU5YjhhYmY4NzUyNGYyZmQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDJhNjNhNTBhZTQwMWU1NmQ2NDVhMTE1M2IxMDlhOGZjY2EwYTQzZDU2MWZiYTJkYmI1MTM0MGM5ZDgyYjE1MScsXG4gICAgICAgICdlODJkODZmYjY0NDNmY2I3NTY1YWVlNThiMjk0ODIyMGE3MGY3NTBhZjQ4NGNhNTJkNDE0MjE3NGRjZjg5NDA1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzY0NTg3ZTIzMzU0NzFlYjg5MGVlNzg5NmQ3Y2ZkYzg2NmJhY2JkYmQzODM5MzE3YjM0MzZmOWI0NTYxN2UwNzMnLFxuICAgICAgICAnZDk5ZmNkZDViZjY5MDJlMmFlOTZkZDY0NDdjMjk5YTE4NWI5MGEzOTEzM2FlYWIzNTgyOTllNWU5ZmFmNjU4OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDgxYmRlMGU0ZTRkODg1YjNhNTQ2ZDNlNTQ5ZGUwNDJmMGFhNmNlYTI1MGU3ZmQzNThkNmM4NmRkNDVlNDU4JyxcbiAgICAgICAgJzM4ZWU3YjhjYmE1NDA0ZGQ4NGEyNWJmMzljZWNiMmNhOTAwYTc5YzQyYjI2MmU1NTZkNjRiMWI1OTc3OTA1N2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTM0NjRhNTdhNzgxMDJhYTYyYjY5NzlhZTgxN2Y0NjM3ZmZjZmVkM2M0YjFjZTMwYmNkNjMwM2Y2Y2FmNjY2YicsXG4gICAgICAgICc2OWJlMTU5MDA0NjE0NTgwZWY3ZTQzMzQ1M2NjYjBjYTQ4ZjMwMGE4MWQwOTQyZTEzZjQ5NWE5MDdmNmVjYzI3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2JjNGE5ZGY1YjcxM2ZlMmU5YWVmNDMwYmNjMWRjOTdhMGNkOWNjZWRlMmYyODU4OGNhZGEzYTBkMmQ4M2YzNjYnLFxuICAgICAgICAnZDNhODFjYTZlNzg1YzA2MzgzOTM3YWRmNGI3OThjYWE2ZThhOWZiZmE1NDdiMTZkNzU4ZDY2NjU4MWYzM2MxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhjMjhhOTdiZjgyOThiYzBkMjNkOGM3NDk0NTJhMzJlNjk0YjY1ZTMwYTk0NzJhMzk1NGFiMzBmZTUzMjRjYWEnLFxuICAgICAgICAnNDBhMzA0NjNhMzMwNTE5MzM3OGZlZGYzMWY3Y2MwZWI3YWU3ODRmMDQ1MWNiOTQ1OWU3MWRjNzNjYmVmOTQ4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZWE5NjY2MTM5NTI3YThjMWRkOTRjZTRmMDcxZmQyM2M4YjM1MGM1YTRiYjMzNzQ4YzRiYTExMWZhY2NhZTAnLFxuICAgICAgICAnNjIwZWZhYmJjOGVlMjc4MmUyNGU3YzBjZmI5NWM1ZDczNWI3ODNiZTljZjBmOGU5NTVhZjM0YTMwZTYyYjk0NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZDM2MjVmYWVmNWJhMDYwNzQ2Njk3MTZiYmQzNzg4ZDg5YmRkZTgxNTk1OTk2ODA5MmY3NmNjNGViOWE5Nzg3JyxcbiAgICAgICAgJzdhMTg4ZmEzNTIwZTMwZDQ2MWRhMjUwMTA0NTczMWNhOTQxNDYxOTgyODgzMzk1OTM3ZjY4ZDAwYzY0NGE1NzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjcxMGQ3OWQ5ZWI5NjIyOTdlNGY2MjMyYjQwZThmN2ZlYjJiYzYzODE0NjE0ZDY5MmMxMmRlNzUyNDA4MjIxZScsXG4gICAgICAgICdlYTk4ZTY3MjMyZDNiMzI5NWQzYjUzNTUzMjExNWNjYWM4NjEyYzcyMTg1MTYxNzUyNmFlNDdhOWM3N2JmYzgyJ1xuICAgICAgXVxuICAgIF1cbiAgfSxcbiAgbmFmOiB7XG4gICAgd25kOiA3LFxuICAgIHBvaW50czogW1xuICAgICAgW1xuICAgICAgICAnZjkzMDhhMDE5MjU4YzMxMDQ5MzQ0Zjg1Zjg5ZDUyMjliNTMxYzg0NTgzNmY5OWIwODYwMWYxMTNiY2UwMzZmOScsXG4gICAgICAgICczODhmN2IwZjYzMmRlODE0MGZlMzM3ZTYyYTM3ZjM1NjY1MDBhOTk5MzRjMjIzMWI2Y2I5ZmQ3NTg0YjhlNjcyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJmOGJkZTRkMWEwNzIwOTM1NWI0YTcyNTBhNWM1MTI4ZTg4Yjg0YmRkYzYxOWFiN2NiYThkNTY5YjI0MGVmZTQnLFxuICAgICAgICAnZDhhYzIyMjYzNmU1ZTNkNmQ0ZGJhOWRkYTZjOWM0MjZmNzg4MjcxYmFiMGQ2ODQwZGNhODdkM2FhNmFjNjJkNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1Y2JkZjA2NDZlNWRiNGVhYTM5OGYzNjVmMmVhN2EwZTNkNDE5YjdlMDMzMGUzOWNlOTJiZGRlZGNhYzRmOWJjJyxcbiAgICAgICAgJzZhZWJjYTQwYmEyNTU5NjBhMzE3OGQ2ZDg2MWE1NGRiYTgxM2QwYjgxM2ZkZTdiNWE1MDgyNjI4MDg3MjY0ZGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYWNkNDg0ZTJmMGM3ZjY1MzA5YWQxNzhhOWY1NTlhYmRlMDk3OTY5NzRjNTdlNzE0YzM1ZjExMGRmYzI3Y2NiZScsXG4gICAgICAgICdjYzMzODkyMWIwYTdkOWZkNjQzODA5NzE3NjNiNjFlOWFkZDg4OGE0Mzc1ZjhlMGYwNWNjMjYyYWM2NGY5YzM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3NGFlN2Y4NThhOTQxMWU1ZWY0MjQ2YjcwYzY1YWFjNTY0OTk4MGJlNWMxNzg5MWJiZWMxNzg5NWRhMDA4Y2InLFxuICAgICAgICAnZDk4NGEwMzJlYjZiNWUxOTAyNDNkZDU2ZDdiN2IzNjUzNzJkYjFlMmRmZjlkNmE4MzAxZDc0YzljOTUzYzYxYidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMjg3NzNjMmQ5NzUyODhiYzdkMWQyMDVjMzc0ODY1MWIwNzVmYmM2NjEwZTU4Y2RkZWVkZGY4ZjE5NDA1YWE4JyxcbiAgICAgICAgJ2FiMDkwMmU4ZDg4MGE4OTc1ODIxMmViNjVjZGFmNDczYTFhMDZkYTUyMWZhOTFmMjliNWNiNTJkYjAzZWQ4MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNzkyNGQ0ZjdkNDNlYTk2NWE0NjVhZTMwOTVmZjQxMTMxZTU5NDZmM2M4NWY3OWU0NGFkYmNmOGUyN2UwODBlJyxcbiAgICAgICAgJzU4MWUyODcyYTg2YzcyYTY4Mzg0MmVjMjI4Y2M2ZGVmZWE0MGFmMmJkODk2ZDNhNWM1MDRkYzlmZjZhMjZiNTgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGVmZGVhNGNkYjY3Nzc1MGE0MjBmZWU4MDdlYWNmMjFlYjk4OThhZTc5Yjk3Njg3NjZlNGZhYTA0YTJkNGEzNCcsXG4gICAgICAgICc0MjExYWIwNjk0NjM1MTY4ZTk5N2IwZWFkMmE5M2RhZWNlZDFmNGEwNGE5NWMwZjZjZmIxOTlmNjllNTZlYjc3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJiNGVhMGE3OTdhNDQzZDI5M2VmNWNmZjQ0NGY0OTc5ZjA2YWNmZWJkN2U4NmQyNzc0NzU2NTYxMzgzODViNmMnLFxuICAgICAgICAnODVlODliYzAzNzk0NWQ5M2IzNDMwODNiNWExYzg2MTMxYTAxZjYwYzUwMjY5NzYzYjU3MGM4NTRlNWMwOWI3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNTJiYmY0YTRjZGQxMjU2NGY5M2ZhMzMyY2UzMzMzMDFkOWFkNDAyNzFmODEwNzE4MTM0MGFlZjI1YmU1OWQ1JyxcbiAgICAgICAgJzMyMWViNDA3NTM0OGY1MzRkNTljMTgyNTlkZGEzZTFmNGExYjNiMmU3MWIxMDM5YzY3YmQzZDhiY2Y4MTk5OGMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMmZhMjEwNGQ2YjM4ZDExYjAyMzAwMTA1NTk4NzkxMjRlNDJhYjhkZmVmZjVmZjI5ZGM5Y2RhZGQ0ZWNhY2MzZicsXG4gICAgICAgICcyZGUxMDY4Mjk1ZGQ4NjViNjQ1NjkzMzViZDVkZDgwMTgxZDcwZWNmYzg4MjY0ODQyM2JhNzZiNTMyYjdkNjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTI0ODI3OWIwOWI0ZDY4ZGFiMjFhOWIwNjZlZGRhODMyNjNjM2Q4NGUwOTU3MmUyNjljYTBjZDdmNTQ1MzcxNCcsXG4gICAgICAgICc3MzAxNmY3YmYyMzRhYWRlNWQxYWE3MWJkZWEyYjFmZjNmYzBkZTJhODg3OTEyZmZlNTRhMzJjZTk3Y2IzNDAyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhZWQ0ZjJiZTNhOGJmMjc4ZTcwMTMyZmIwYmViNzUyMmY1NzBlMTQ0YmY2MTVjMDdlOTk2ZDQ0M2RlZTg3MjknLFxuICAgICAgICAnYTY5ZGNlNGE3ZDZjOThlOGQ0YTFhY2E4N2VmOGQ3MDAzZjgzYzIzMGYzYWZhNzI2YWI0MGU1MjI5MGJlMWM1NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNDRkMTJjNzA2NWQ4MTJlOGFjZjI4ZDdjYmIxOWY5MDExZWNkOWU5ZmRmMjgxYjBlNmEzYjVlODdkMjJlN2RiJyxcbiAgICAgICAgJzIxMTlhNDYwY2UzMjZjZGM3NmM0NTkyNmM5ODJmZGFjMGUxMDZlODYxZWRmNjFjNWEwMzkwNjNmMGUwZTY0ODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNmEyNDViZjZkYzY5ODUwNGM4OWEyMGNmZGVkNjA4NTMxNTJiNjk1MzM2YzI4MDYzYjYxYzY1Y2JkMjY5ZTZiNCcsXG4gICAgICAgICdlMDIyY2Y0MmMyYmQ0YTcwOGIzZjUxMjZmMTZhMjRhZDhiMzNiYTQ4ZDA0MjNiNmVmZDVlNjM0ODEwMGQ4YTgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE2OTdmZmE2ZmQ5ZGU2MjdjMDc3ZTNkMmZlNTQxMDg0Y2UxMzMwMGIwYmVjMTE0NmY5NWFlNTdmMGQwYmQ2YTUnLFxuICAgICAgICAnYjljMzk4ZjE4NjgwNmY1ZDI3NTYxNTA2ZTQ1NTc0MzNhMmNmMTUwMDllNDk4YWU3YWRlZTlkNjNkMDFiMjM5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MDViZGIwMTk5ODE3MThiOTg2ZDBmMDdlODM0Y2IwZDlkZWI4MzYwZmZiN2Y2MWRmOTgyMzQ1ZWYyN2E3NDc5JyxcbiAgICAgICAgJzI5NzJkMmRlNGY4ZDIwNjgxYTc4ZDkzZWM5NmZlMjNjMjZiZmFlODRmYjE0ZGI0M2IwMWUxZTkwNTZiOGM0OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MmQxNGRhYjQxNTBiZjQ5NzQwMmZkYzQ1YTIxNWUxMGRjYjAxYzM1NDk1OWIxMGNmZTMxYzdlOWQ4N2ZmMzNkJyxcbiAgICAgICAgJzgwZmMwNmJkOGNjNWIwMTA5ODA4OGExOTUwZWVkMGRiMDFhYTEzMjk2N2FiNDcyMjM1ZjU2NDI0ODNiMjVlYWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODBjNjBhZDAwNDBmMjdkYWRlNWI0YjA2YzQwOGU1NmIyYzUwZTlmNTZiOWI4YjQyNWU1NTVjMmY4NjMwOGI2ZicsXG4gICAgICAgICcxYzM4MzAzZjFjYzVjMzBmMjZlNjZiYWQ3ZmU3MmY3MGE2NWVlZDRjYmU3MDI0ZWIxYWEwMWY1NjQzMGJkNTdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzdhOTM3NWFkNjE2N2FkNTRhYTc0YzYzNDhjYzU0ZDM0NGNjNWRjOTQ4N2Q4NDcwNDlkNWVhYmIwZmEwM2M4ZmInLFxuICAgICAgICAnZDBlM2ZhOWVjYTg3MjY5MDk1NTllMGQ3OTI2OTA0NmJkYzU5ZWExMGM3MGNlMmIwMmQ0OTllYzIyNGRjN2Y3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q1MjhlY2Q5YjY5NmI1NGM5MDdhOWVkMDQ1NDQ3YTc5YmI0MDhlYzM5YjY4ZGY1MDRiYjUxZjQ1OWJjM2ZmYzknLFxuICAgICAgICAnZWVjZjQxMjUzMTM2ZTVmOTk5NjZmMjE4ODFmZDY1NmViYzQzNDU0MDVjNTIwZGJjMDYzNDY1YjUyMTQwOTkzMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0OTM3MGE0YjVmNDM0MTJlYTI1ZjUxNGU4ZWNkYWQwNTI2NjExNWU0YTdlY2IxMzg3MjMxODA4ZjhiNDU5NjMnLFxuICAgICAgICAnNzU4ZjNmNDFhZmQ2ZWQ0MjhiMzA4MWIwNTEyZmQ2MmE1NGMzZjNhZmJiNWI2NzY0YjY1MzA1MmExMjk0OWM5YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3N2YyMzA5MzZlZTg4Y2JiZDczZGY5MzBkNjQ3MDJlZjg4MWQ4MTFlMGUxNDk4ZTJmMWMxM2ViMWZjMzQ1ZDc0JyxcbiAgICAgICAgJzk1OGVmNDJhNzg4NmI2NDAwYTA4MjY2ZTliYTFiMzc4OTZjOTUzMzBkOTcwNzdjYmJlOGViM2M3NjcxYzYwZDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjJkYWM5OTFjYzRjZTRiOWVhNDQ4ODdlNWM3YzBiY2U1OGM4MDA3NGFiOWQ0ZGJhZWIyODUzMWI3NzM5ZjUzMCcsXG4gICAgICAgICdlMGRlZGM5YjNiMmY4ZGFkNGRhMWYzMmRlYzI1MzFkZjllYjVmYmViMDU5OGU0ZmQxYTExN2RiYTcwM2EzYzM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ2M2IzZDlmNjYyNjIxZmIxYjRiZThmYmJlMjUyMDEyNWEyMTZjZGZjOWRhZTNkZWJjYmE0ODUwYzY5MGQ0NWInLFxuICAgICAgICAnNWVkNDMwZDc4YzI5NmMzNTQzMTE0MzA2ZGQ4NjIyZDdjNjIyZTI3Yzk3MGExZGUzMWNiMzc3YjAxYWY3MzA3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMTZmODA0MjQ0ZTQ2ZTJhMDkyMzJkNGFmZjNiNTk5NzZiOThmYWMxNDMyOGEyZDFhMzI0OTZiNDk5OThmMjQ3JyxcbiAgICAgICAgJ2NlZGFiZDliODIyMDNmN2UxM2QyMDZmY2RmNGUzM2Q5MmE2YzUzYzI2ZTVjY2UyNmQ2NTc5OTYyYzRlMzFkZjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2FmNzU0MjcyZGM4NDU2M2IwMzUyYjdhMTQzMTFhZjU1ZDI0NTMxNWFjZTI3YzY1MzY5ZTE1ZjcxNTFkNDFkMScsXG4gICAgICAgICdjYjQ3NDY2MGVmMzVmNWYyYTQxYjY0M2ZhNWU0NjA1NzVmNGZhOWI3OTYyMjMyYTVjMzJmOTA4MzE4YTA0NDc2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI2MDBjYTRiMjgyY2I5ODZmODVkMGYxNzA5OTc5ZDhiNDRhMDljMDdjYjg2ZDdjMTI0NDk3YmM4NmYwODIxMjAnLFxuICAgICAgICAnNDExOWI4ODc1M2MxNWJkNmE2OTNiMDNmY2RkYmI0NWQ1YWM2YmU3NGFiNWYwZWY0NGIwYmU5NDc1YTdlNGI0MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NjM1Y2E3MmQ3ZTg0MzJjMzM4ZWM1M2NkMTIyMjBiYzAxYzQ4Njg1ZTI0ZjdkYzhjNjAyYTc3NDY5OThlNDM1JyxcbiAgICAgICAgJzkxYjY0OTYwOTQ4OWQ2MTNkMWQ1ZTU5MGY3OGU2ZDc0ZWNmYzA2MWQ1NzA0OGJhZDllNzZmMzAyYzViOWM2MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NTRlMzIzOWYzMjU1NzBjZGJiZjRhODdkZWVlOGE2NmI3ZjJiMzM0NzlkNDY4ZmJjMWE1MDc0M2JmNTZjYzE4JyxcbiAgICAgICAgJzY3M2ZiODZlNWJkYTMwZmIzY2QwZWQzMDRlYTQ5YTAyM2VlMzNkMDE5N2E2OTVkMGM1ZDk4MDkzYzUzNjY4MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlM2U2YmQxMDcxYTFlOTZhZmY1Nzg1OWM4MmQ1NzBmMDMzMDgwMDY2MWQxYzk1MmY5ZmUyNjk0NjkxZDliOWU4JyxcbiAgICAgICAgJzU5YzllMGJiYTM5NGU3NmY0MGMwYWE1ODM3OWEzY2I2YTVhMjI4Mzk5M2U5MGM0MTY3MDAyYWY0OTIwZTM3ZjUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTg2YjQ4M2QwNTZhMDMzODI2YWU3M2Q4OGY3MzI5ODVjNGNjYjFmMzJiYTM1ZjRiNGNjNDdmZGNmMDRhYTZlYicsXG4gICAgICAgICczYjk1MmQzMmM2N2NmNzdlMmUxNzQ0NmUyMDQxODBhYjIxZmI4MDkwODk1MTM4YjRhNGE3OTdmODZlODA4ODhiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RmOWQ3MGE2Yjk4NzZjZTU0NGM5ODU2MWY0YmU0ZjcyNTQ0MmU2ZDJiNzM3ZDljOTFhODMyMTcyNGNlMDk2M2YnLFxuICAgICAgICAnNTVlYjJkYWZkODRkNmNjZDVmODYyYjc4NWRjMzlkNGFiMTU3MjIyNzIwZWY5ZGEyMTdiOGM0NWNmMmJhMjQxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1ZWRkNWNjMjNjNTFlODdhNDk3Y2E4MTVkNWRjZTBmOGFiNTI1NTRmODQ5ZWQ4OTk1ZGU2NGM1ZjM0Y2U3MTQzJyxcbiAgICAgICAgJ2VmYWU5YzhkYmMxNDEzMDY2MWU4Y2VjMDMwYzg5YWQwYzEzYzY2YzBkMTdhMjkwNWNkYzcwNmFiNzM5OWE4NjgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjkwNzk4YzJiNjQ3NjgzMGRhMTJmZTAyMjg3ZTllNzc3YWEzZmJhMWMzNTViMTdhNzIyZDM2MmY4NDYxNGZiYScsXG4gICAgICAgICdlMzhkYTc2ZGNkNDQwNjIxOTg4ZDAwYmNmNzlhZjI1ZDViMjljMDk0ZGIyYTIzMTQ2ZDAwM2FmZDQxOTQzZTdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FmM2M0MjNhOTVkOWY1YjMwNTQ3NTRlZmExNTBhYzM5Y2QyOTU1MmZlMzYwMjU3MzYyZGZkZWNlZjQwNTNiNDUnLFxuICAgICAgICAnZjk4YTNmZDgzMWViMmI3NDlhOTNiMGU2ZjM1Y2ZiNDBjOGNkNWFhNjY3YTE1NTgxYmMyZmVkZWQ0OThmZDljNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NjZkYmIyNGQxMzRlNzQ1Y2NjYWEyOGM5OWJmMjc0OTA2YmI2NmIyNmRjZjk4ZGY4ZDJmZWQ1MGQ4ODQyNDlhJyxcbiAgICAgICAgJzc0NGIxMTUyZWFjYmU1ZTM4ZGNjODg3OTgwZGEzOGI4OTc1ODRhNjVmYTA2Y2VkZDJjOTI0Zjk3Y2JhYzU5OTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTlkYmY0NmY4Yzk0NzU5YmEyMTI3N2MzMzc4NGY0MTY0NWY3YjQ0ZjZjNTk2YTU4Y2U5MmU2NjYxOTFhYmUzZScsXG4gICAgICAgICdjNTM0YWQ0NDE3NWZiYzMwMGY0ZWE2Y2U2NDgzMDlhMDQyY2U3MzlhNzkxOTc5OGNkODVlMjE2YzRhMzA3ZjZlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YxM2FkYTk1MTAzYzQ1MzczMDVlNjkxZTc0ZTlhNGE4ZGQ2NDdlNzExYTk1ZTczY2I2MmRjNjAxOGNmZDg3YjgnLFxuICAgICAgICAnZTEzODE3YjQ0ZWUxNGRlNjYzYmY0YmM4MDgzNDFmMzI2OTQ5ZTIxYTZhNzVjMjU3MDc3ODQxOWJkYWY1NzMzZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NzU0YjRmYTBlOGFjZWQwNmQ0MTY3YTJjNTljY2E0Y2RhMTg2OWMwNmViYWRmYjY0ODg1NTAwMTVhODg1MjJjJyxcbiAgICAgICAgJzMwZTkzZTg2NGU2NjlkODIyMjRiOTY3YzMwMjBiOGZhOGQxZTRlMzUwYjZjYmNjNTM3YTQ4YjU3ODQxMTYzYTInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTQ4ZGNhZGY1OTkwZTA0OGFhMzg3NGQ0NmFiZWY5ZDcwMTg1OGY5NWRlODA0MWQyYTY4MjhjOTllMjI2MjUxOScsXG4gICAgICAgICdlNDkxYTQyNTM3ZjZlNTk3ZDVkMjhhMzIyNGIxYmMyNWRmOTE1NGVmYmQyZWYxZDJjYmJhMmNhZTUzNDdkNTdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc5NjI0MTQ0NTBjNzZjMTY4OWM3YjQ4ZjgyMDJlYzM3ZmIyMjRjZjVhYzBiZmExNTcwMzI4YThhM2Q3Yzc3YWInLFxuICAgICAgICAnMTAwYjYxMGVjNGZmYjQ3NjBkNWMxZmMxMzNlZjZmNmIxMjUwN2EwNTFmMDRhYzU3NjBhZmE1YjI5ZGI4MzQzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNTE0MDg3ODM0OTY0YjU0YjE1YjE2MDY0NGQ5MTU0ODVhMTY5NzcyMjViODg0N2JiMGRkMDg1MTM3ZWM0N2NhJyxcbiAgICAgICAgJ2VmMGFmYmIyMDU2MjA1NDQ4ZTE2NTJjNDhlODEyN2ZjNjAzOWU3N2MxNWMyMzc4YjdlN2QxNWEwZGUyOTMzMTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDNjYzMwYWQ2YjQ4M2U0YmM3OWNlMmM5ZGQ4YmM1NDk5M2U5NDdlYjhkZjc4N2I0NDI5NDNkM2Y3YjUyN2VhZicsXG4gICAgICAgICc4YjM3OGEyMmQ4MjcyNzhkODljNWU5YmU4Zjk1MDhhZTNjMmFkNDYyOTAzNTg2MzBhZmIzNGRiMDRlZWRlMGE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE2MjRkODQ3ODA3MzI4NjBjZTFjNzhmY2JmZWZlMDhiMmIyOTgyM2RiOTEzZjY0OTM5NzViYTBmZjQ4NDc2MTAnLFxuICAgICAgICAnNjg2NTFjZjliNmRhOTAzZTA5MTQ0NDhjNmNkOWQ0Y2E4OTY4NzhmNTI4MmJlNGM4Y2MwNmUyYTQwNDA3ODU3NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3MzNjZTgwZGE5NTVhOGEyNjkwMmM5NTYzM2U2MmE5ODUxOTI0NzRiNWFmMjA3ZGE2ZGY3YjRmZDVmYzYxY2Q0JyxcbiAgICAgICAgJ2Y1NDM1YTJiZDJiYWRmN2Q0ODVhNGQ4YjhkYjlmY2NlM2UxZWY4ZTAyMDFlNDU3OGM1NDY3M2JjMWRjNWVhMWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTVkOTQ0MTI1NDk0NTA2NGNmMWExYzMzYmJkM2I0OWY4OTY2YzUwOTIxNzFlNjk5ZWYyNThkZmFiODFjMDQ1YycsXG4gICAgICAgICdkNTZlYjMwYjY5NDYzZTcyMzRmNTEzN2I3M2I4NDE3NzQzNDgwMGJhY2ViZmM2ODVmYzM3YmJlOWVmZTQwNzBkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ExZDBmY2YyZWM5ZGU2NzViNjEyMTM2ZTVjZTcwZDI3MWMyMTQxN2M5ZDJiOGFhYWFjMTM4NTk5ZDA3MTc5NDAnLFxuICAgICAgICAnZWRkNzdmNTBiY2I1YTNjYWIyZTkwNzM3MzA5NjY3ZjI2NDE0NjJhNTQwNzBmM2Q1MTkyMTJkMzljMTk3YTYyOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMjJmYmUxNWMwYWY4Y2NjNTc4MGMwNzM1Zjg0ZGJlOWE3OTBiYWRlZTgyNDVjMDZjN2NhMzczMzFjYjM2OTgwJyxcbiAgICAgICAgJ2E4NTViYWJhZDVjZDYwYzg4YjQzMGE2OWY1M2ExYTdhMzgyODkxNTQ5NjQ3OTliZTQzZDA2ZDc3ZDMxZGEwNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMTEwOTFkZDk4NjBlOGUyMGVlMTM0NzNjMTE1NWY1ZjY5NjM1ZTM5NDcwNGVhYTc0MDA5NDUyMjQ2Y2ZhOWIzJyxcbiAgICAgICAgJzY2ZGI2NTZmODdkMWYwNGZmZmQxZjA0Nzg4YzA2ODMwODcxZWM1YTY0ZmVlZTY4NWJkODBmMGIxMjg2ZDgzNzQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzRjMWZkMDRkMzAxYmU4OWIzMWMwNDQyZDNlNmFjMjQ4ODM5MjhiNDVhOTM0MDc4MTg2N2Q0MjMyZWMyZGJkZicsXG4gICAgICAgICc5NDE0Njg1ZTk3YjFiNTk1NGJkNDZmNzMwMTc0MTM2ZDU3ZjFjZWViNDg3NDQzZGM1MzIxODU3YmE3M2FiZWUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjIxOWVhNWQ2YjU0NzAxYzFjMTRkZTViNTU3ZWI0MmE4ZDEzZjNhYmJjZDA4YWZmY2MyYTVlNmIwNDliOGQ2MycsXG4gICAgICAgICc0Y2I5NTk1N2U4M2Q0MGIwZjczYWY0NTQ0Y2NjZjZiMWY0YjA4ZDNjMDdiMjdmYjhkOGMyOTYyYTQwMDc2NmQxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q3Yjg3NDBmNzRhOGZiYWFiMWY2ODNkYjhmNDVkZTI2NTQzYTU0OTBiY2E2MjcwODcyMzY5MTI0NjlhMGI0NDgnLFxuICAgICAgICAnZmE3Nzk2ODEyOGQ5YzkyZWUxMDEwZjMzN2FkNDcxN2VmZjE1ZGI1ZWQzYzA0OWIzNDExZTAzMTVlYWE0NTkzYidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMmQzMWMyMjJmOGY2ZjBlZjg2ZjdjOThkM2EzMzM1ZWFkNWJjZDMyYWJkZDk0Mjg5ZmU0ZDMwOTFhYTgyNGJmJyxcbiAgICAgICAgJzVmMzAzMmY1ODkyMTU2ZTM5Y2NkM2Q3OTE1YjllMWRhMmU2ZGFjOWU2ZjI2ZTk2MTExOGQxNGI4NDYyZTE2NjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzQ2MWYzNzE5MTRhYjMyNjcxMDQ1YTE1NWQ5ODMxZWE4NzkzZDc3Y2Q1OTU5MmM0MzQwZjg2Y2JjMTgzNDdiNScsXG4gICAgICAgICc4ZWMwYmEyMzhiOTZiZWMwY2JkZGRjYWUwYWE0NDI1NDJlZWUxZmY1MGM5ODZlYTZiMzk4NDdiM2NjMDkyZmY2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VlMDc5YWRiMWRmMTg2MDA3NDM1NmEyNWFhMzgyMDZhNmQ3MTZiMmMzZTY3NDUzZDI4NzY5OGJhZDdiMmIyZDYnLFxuICAgICAgICAnOGRjMjQxMmFhZmUzYmU1YzRjNWYzN2UwZWNjNWY5ZjZhNDQ2OTg5YWYwNGM0ZTI1ZWJhYWM0NzllYzFjOGMxZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNmVjOTNlNDQ3ZWM4M2YwNDY3YjE4MzAyZWU2MjBmN2U2NWRlMzMxODc0YzlkYzcyYmZkODYxNmJhOWRhNmI1JyxcbiAgICAgICAgJzVlNDYzMTE1MGU2MmZiNDBkMGU4YzJhN2NhNTgwNGEzOWQ1ODE4NmE1MGU0OTcxMzk2MjY3NzhlMjViMDY3NGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWFhNWY5ODBjMjQ1ZjZmMDM4OTc4MjkwYWZhNzBiNmJkODg1NTg5N2Y5OGI2YWE0ODViOTYwNjVkNTM3YmQ5OScsXG4gICAgICAgICdmNjVmNWQzZTI5MmMyZTA4MTlhNTI4MzkxYzk5NDYyNGQ3ODQ4NjlkN2U2ZWE2N2ZiMTgwNDEwMjRlZGMwN2RjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc4Yzk0MDc1NDRhYzEzMjY5MmVlMTkxMGEwMjQzOTk1OGFlMDQ4NzcxNTEzNDJlYTk2YzRiNmIzNWE0OWY1MScsXG4gICAgICAgICdmM2UwMzE5MTY5ZWI5Yjg1ZDU0MDQ3OTU1MzlhNWU2OGZhMWZiZDU4M2MwNjRkMjQ2MmI2NzVmMTk0YTNkZGI0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ5NGY0YmUyMTlhMWE3NzAxNmRjZDgzODQzMWFlYTAwMDFjZGM4YWU3YTZmYzY4ODcyNjU3OGQ5NzAyODU3YTUnLFxuICAgICAgICAnNDIyNDJhOTY5MjgzYTVmMzM5YmE3ZjA3NWUzNmJhMmFmOTI1Y2UzMGQ3NjdlZDZlNTVmNGIwMzE4ODBkNTYyYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNTk4YTgwMzBkYTZkODZjNmJjN2YyZjUxNDRlYTU0OWQyODIxMWVhNThmYWE3MGViZjRjMWU2NjVjMWZlOWI1JyxcbiAgICAgICAgJzIwNGI1ZDZmODQ4MjJjMzA3ZTRiNGE3MTQwNzM3YWVjMjNmYzYzYjY1YjM1Zjg2YTEwMDI2ZGJkMmQ4NjRlNmInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQxOTE2MzY1YWJiMmI1ZDA5MTkyZjVmMmRiZWFmZWMyMDhmMDIwZjEyNTcwYTE4NGRiYWRjM2U1ODU5NTk5NycsXG4gICAgICAgICc0ZjE0MzUxZDAwODdlZmE0OWQyNDViMzI4OTg0OTg5ZDVjYWY5NDUwZjM0YmZjMGVkMTZlOTZiNThmYTk5MTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQxZDYwNjNhNTg2ZmE0NzVhNzI0NjA0ZGEwM2JjNWI5MmEyZTBkMmUwYTM2YWNmZTRjNzNhNTUxNDc0Mjg4MScsXG4gICAgICAgICc3Mzg2N2Y1OWMwNjU5ZTgxOTA0ZjlhMWM3NTQzNjk4ZTYyNTYyZDY3NDRjMTY5Y2U3YTM2ZGUwMWE4ZDYxNTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWU5NWJiMzk5YTY5NzFkMzc2MDI2OTQ3Zjg5YmRlMmYyODJiMzM4MTA5MjhiZTRkZWQxMTJhYzRkNzBlMjBkNScsXG4gICAgICAgICczOWYyM2YzNjY4MDkwODViZWViZmM3MTE4MTMxMzc3NWE5OWM5YWVkN2Q4YmEzOGIxNjEzODRjNzQ2MDEyODY1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM2ZTQ2NDFhNTM5NDhmZDQ3NmMzOWY4YTk5ZmQ5NzRlNWVjMDc1NjRiNTMxNWQ4YmY5OTQ3MWJjYTBlZjJmNjYnLFxuICAgICAgICAnZDI0MjRiMWIxYWJlNGViODE2NDIyN2IwODVjOWFhOTQ1NmVhMTM0OTNmZDU2M2UwNmZkNTFjZjU2OTRjNzhmYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMzY1ODFlYTdiZmJiYjI5MGMxOTFhMmY1MDdhNDFjZjU2NDM4NDIxNzBlOTE0ZmFlYWIyN2MyYzU3OWY3MjYnLFxuICAgICAgICAnZWFkMTIxNjg1OTVmZTFiZTk5MjUyMTI5YjZlNTZiMzM5MWY3YWIxNDEwY2QxZTBlZjNkY2RjYWJkMmZkYTIyNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YWI4OTgxNmRhZGZkNmI2YTFmMjYzNGZjZjAwZWM4NDAzNzgxMDI1ZWQ2ODkwYzQ4NDk3NDI3MDZiZDQzZWRlJyxcbiAgICAgICAgJzZmZGNlZjA5ZjJmNmQwYTA0NGU2NTRhZWY2MjQxMzZmNTAzZDQ1OWMzZTg5ODQ1ODU4YTQ3YTkxMjljZGQyNGUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWUzM2YxYTc0NmM5YzU3NzgxMzMzNDRkOTI5OWZjYWEyMGIwOTM4ZThhY2ZmMjU0NGJiNDAyODRiOGM1ZmI5NCcsXG4gICAgICAgICc2MDY2MDI1N2RkMTFiM2FhOWM4ZWQ2MThkMjRlZGZmMjMwNmQzMjBmMWQwMzAxMGUzM2E3ZDIwNTdmM2IzYjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODViN2MxZGNiM2NlYzFiN2VlN2YzMGRlZDc5ZGQyMGEwZWQxZjRjYzE4Y2JjZmNmYTQxMDM2MWZkOGYwOGYzMScsXG4gICAgICAgICczZDk4YTljZGQwMjZkZDQzZjM5MDQ4ZjI1YTg4NDdmNGZjYWZhZDE4OTVkN2E2MzNjNmZlZDNjMzVlOTk5NTExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI5ZGY5ZmJkOGQ5ZTQ2NTA5Mjc1ZjRiMTI1ZDZkNDVkN2ZiZTlhM2I4NzhhN2FmODcyYTI4MDA2NjFhYzVmNTEnLFxuICAgICAgICAnYjRjNGZlOTljNzc1YTYwNmUyZDg4NjIxNzkxMzlmZmRhNjFkYzg2MWMwMTllNTVjZDI4NzZlYjJhMjdkODRiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2EwYjFjYWUwNmIwYTg0N2EzZmVhNmU2NzFhYWY4YWRmZGZlNThjYTJmNzY4MTA1YzgwODJiMmU0NDlmY2UyNTInLFxuICAgICAgICAnYWU0MzQxMDJlZGRlMDk1OGVjNGIxOWQ5MTdhNmEyOGU2YjcyZGExODM0YWZmMGU2NTBmMDQ5NTAzYTI5NmNmMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZThjZWFmYjliM2U5YTEzNmRjN2ZmNjdlODQwMjk1YjQ5OWRmYjNiMjEzM2U0YmExMTNmMmU0YzBlMTIxZTUnLFxuICAgICAgICAnY2YyMTc0MTE4YzhiNmQ3YTRiNDhmNmQ1MzRjZTVjNzk0MjJjMDg2YTYzNDYwNTAyYjgyN2NlNjJhMzI2NjgzYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMjRhNDRlMDQ3ZTE5YjZmNWFmYjgxYzdjYTJmNjkwODBhNTA3NjY4OWEwMTA5MTlmNDI3MjVjMmI3ODlhMzNiJyxcbiAgICAgICAgJzZmYjhkNTU5MWI0NjZmOGZjNjNkYjUwZjFjMGYxYzY5MDEzZjk5Njg4N2I4MjQ0ZDJjZGVjNDE3YWZlYThmYTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWEwMTYwNmE3YTZjOWNkZDI0OWZkZmNmYWNiOTk1ODQwMDFlZGQyOGFiYmFiNzdiNTEwNGU5OGU4ZTNiMzVkNCcsXG4gICAgICAgICczMjJhZjQ5MDhjNzMxMmIwY2ZiZmUzNjlmN2E3YjNjZGI3ZDQ0OTRiYzI4MjM3MDBjZmQ2NTIxODhhM2VhOThkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FmOGFkZGJmMmI2NjFjOGE2YzYzMjg2NTVlYjk2NjUxMjUyMDA3ZDhjNWVhMzFiZTRhZDE5NmRlOGNlMjEzMWYnLFxuICAgICAgICAnNjc0OWU2N2MwMjliODVmNTJhMDM0ZWFmZDA5NjgzNmIyNTIwODE4NjgwZTI2YWM4ZjNkZmJjZGI3MTc0OTcwMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlM2FlMTk3NDU2NmNhMDZjYzUxNmQ0N2UwZmIxNjVhNjc0YTNkYWJjZmNhMTVlNzIyZjBlMzQ1MGY0NTg4OScsXG4gICAgICAgICcyYWVhYmU3ZTQ1MzE1MTAxMTYyMTdmMDdiZjRkMDczMDBkZTk3ZTQ4NzRmODFmNTMzNDIwYTcyZWViMGJkNmE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzU5MWVlMzU1MzEzZDk5NzIxY2Y2OTkzZmZlZDFlM2UzMDE5OTNmZjNlZDI1ODgwMjA3NWVhOGNlZDM5N2UyNDYnLFxuICAgICAgICAnYjBlYTU1OGExMTNjMzBiZWE2MGZjNDc3NTQ2MGM3OTAxZmYwYjA1M2QyNWNhMmJkZWVlOThmMWE0YmU1ZDE5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxMTM5NmQ1NWZkYTU0YzQ5ZjE5YWE5NzMxOGQ4ZGE2MWZhODU4NGU0N2IwODQ5NDUwNzdjZjAzMjU1YjUyOTg0JyxcbiAgICAgICAgJzk5OGM3NGE4Y2Q0NWFjMDEyODlkNTgzM2E3YmViNDc0NGZmNTM2YjAxYjI1N2JlNGM1NzY3YmVhOTNlYTU3YTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnM2M1ZDJhMWJhMzljNWExNzkwMDAwNzM4YzllMGM0MGI4ZGNkZmQ1NDY4NzU0YjY0MDU1NDAxNTdlMDE3YWE3YScsXG4gICAgICAgICdiMjI4NDI3OTk5NWEzNGUyZjlkNGRlNzM5NmZjMThiODBmOWI4YjlmZGQyNzBmNjY2MWY3OWNhNGM4MWJkMjU3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NjODcwNGI4YTYwYTBkZWZhM2E5OWE3Mjk5ZjJlOWMzZmJjMzk1YWZiMDRhYzA3ODQyNWVmOGExNzkzY2MwMzAnLFxuICAgICAgICAnYmRkNDYwMzlmZWVkMTc4ODFkMWUwODYyZGIzNDdmOGNmMzk1Yjc0ZmM0YmNkYzRlOTQwYjc0ZTNhYzFmMWIxMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNTMzZTRmN2VhODU1NWFhY2Q5Nzc3YWM1Y2FkMjliOTdkZDRkZWZjY2M1M2VlN2VhMjA0MTE5YjI4ODliMTk3JyxcbiAgICAgICAgJzZmMGEyNTZiYzVlZmRmNDI5YTJmYjYyNDJmMWE0M2EyZDliOTI1YmI0YTRiM2EyNmJiOGUwZjQ1ZWI1OTYwOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzE0ZjhmMmNjYjI3ZDZmMTA5ZjZkMDhkMDNjYzk2YTY5YmE4YzM0ZWVjMDdiYmNmNTY2ZDQ4ZTMzZGE2NTkzJyxcbiAgICAgICAgJ2MzNTlkNjkyM2JiMzk4ZjdmZDQ0NzNlMTZmZTFjMjg0NzViNzQwZGQwOTgwNzVlNmMwZTg2NDkxMTNkYzNhMzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTZjYmMzMDQ2YmM2YTQ1MGJhYzI0Nzg5ZmExNzExNWE0Yzk3MzllZDc1ZjhmMjFjZTQ0MWY3MmUwYjkwZTZlZicsXG4gICAgICAgICcyMWFlN2Y0NjgwZTg4OWJiMTMwNjE5ZTJjMGY5NWEzNjBjZWI1NzNjNzA2MDMxMzk4NjJhZmQ2MTdmYTliOWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzQ3ZDZkOWEwMmM0ODkyN2ViZmI4NmMxMzU5YjFjYWYxMzBhM2MwMjY3ZDExY2U2MzQ0YjM5Zjk5ZDQzY2MzOCcsXG4gICAgICAgICc2MGVhN2Y2MWEzNTM1MjRkMWM5ODdmNmVjZWM5MmYwODZkNTY1YWI2ODc4NzBjYjEyNjg5ZmYxZTMxYzc0NDQ4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhNjU0NWQyMTgxZGI4ZDk4M2Y3ZGNiMzc1ZWY1ODY2ZDQ3YzY3YjFiZjMxYzhjZjg1NWVmNzQzN2I3MjY1NmEnLFxuICAgICAgICAnNDliOTY3MTVhYjY4NzhhNzllNzhmMDdjZTU2ODBjNWQ2NjczMDUxYjQ5MzViZDg5N2ZlYTgyNGI3N2RjMjA4YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNDA3NDdjYzlkMDEyY2IxYTEzYjgxNDgzMDljNmRlN2VjMjVkNjk0NWQ2NTcxNDZiOWQ1OTk0YjhmZWIxMTExJyxcbiAgICAgICAgJzVjYTU2MDc1M2JlMmExMmZjNmRlNmNhZjJjYjQ4OTU2NWRiOTM2MTU2Yjk1MTRlMWJiNWU4MzAzN2UwZmEyZDQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU0MmM4ZWM4MmM5OTc5OGNjZjNhNjEwYmU4NzBlNzgzMzhjN2Y3MTMzNDhiZDM0YzgyMDNlZjQwMzdmMzUwMicsXG4gICAgICAgICc3NTcxZDc0ZWU1ZTBmYjkyYTdhOGIzM2EwNzc4MzM0MWE1NDkyMTQ0Y2M1NGJjYzQwYTk0NDczNjkzNjA2NDM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM3NzVhYjcwODliYzZhZjgyM2FiYTJlMWFmNzBiMjM2ZDI1MWNhZGIwYzg2NzQzMjg3NTIyYTFiM2IwZGVkZWEnLFxuICAgICAgICAnYmU1MmQxMDdiY2ZhMDlkOGJjYjk3MzZhODI4Y2ZhN2ZhYzhkYjE3YmY3YTc2YTJjNDJhZDk2MTQwOTAxOGNmNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjZWUzMWNiZjdlMzRlYzM3OWQ5NGZiODE0ZDNkNzc1YWQ5NTQ1OTVkMTMxNGJhODg0Njk1OWUzZTgyZjc0ZTI2JyxcbiAgICAgICAgJzhmZDY0YTE0YzA2YjU4OWMyNmI5NDdhZTJiY2Y2YmZhMDE0OWVmMGJlMTRlZDRkODBmNDQ4YTAxYzQzYjFjNmQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjRmOWVhZWEwOWI2OTE3NjE5ZjZlYTZhNGViNTQ2NGVmZGRiNThmZDQ1YjFlYmVmY2RjMWEwMWQwOGI0Nzk4NicsXG4gICAgICAgICczOWU1Yzk5MjViNWE1NGIwNzQzM2E0ZjE4YzYxNzI2ZjhiYjEzMWMwMTJjYTU0MmViMjRhOGFjMDcyMDA2ODJhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q0MjYzZGZjM2QyZGY5MjNhMDE3OWE0ODk2NmQzMGNlODRlMjUxNWFmYzNkY2NjMWI3NzkwNzc5MmViY2M2MGUnLFxuICAgICAgICAnNjJkZmFmMDdhMGY3OGZlYjMwZTMwZDYyOTU4NTNjZTE4OWUxMjc3NjBhZDZjZjdmYWUxNjRlMTIyYTIwOGQ1NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ODQ1NzUyNDgyMGZhNjVhNGY4ZDM1ZWI2OTMwODU3YzAwMzJhY2MwYTRhMmRlNDIyMjMzZWVkYTg5NzYxMmM0JyxcbiAgICAgICAgJzI1YTc0OGFiMzY3OTc5ZDk4NzMzYzM4YTFmYTFjMmU3ZGM2Y2MwN2RiMmQ2MGE5YWU3YTc2YWFhNDliZDBmNzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGZlZWVmMTg4MTEwMWYyY2IxMTY0NGYzYTJhZmRmYzIwNDVlMTk5MTkxNTI5MjNmMzY3YTE3NjdjMTFjY2VkYScsXG4gICAgICAgICdlY2ZiNzA1NmNmMWRlMDQyZjk0MjBiYWIzOTY3OTNjMGMzOTBiZGU3NGI0YmJkZmYxNmE4M2FlMDlhOWE3NTE3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZkN2VmNmIxNzU0M2Y4MzczYzU3M2Y0NGUxZjM4OTgzNWQ4OWJjYmM2MDYyY2VkMzZjODJkZjgzYjhmYWU4NTknLFxuICAgICAgICAnY2Q0NTBlYzMzNTQzODk4NmRmZWZhMTBjNTdmZWE5YmNjNTIxYTA5NTliMmQ4MGJiZjc0YjE5MGRjYTcxMmQxMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNzU2MDVkNTkxMDJhNWEyNjg0NTAwZDNiOTkxZjJlM2YzYzg4YjkzMjI1NTQ3MDM1YWYyNWFmNjZlMDQ1NDFmJyxcbiAgICAgICAgJ2Y1YzU0NzU0YThmNzFlZTU0MGI5YjQ4NzI4NDczZTMxNGY3MjlhYzUzMDhiMDY5MzgzNjA5OTBlMmJmYWQxMjUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWI5ODY2MGY0YzRkZmFhMDZhMmJlNDUzZDUwMjBiYzk5YTBjMmU2MGFiZTM4ODQ1N2RkNDNmZWZiMWVkNjIwYycsXG4gICAgICAgICc2Y2I5YTg4NzZkOWNiODUyMDYwOWFmM2FkZDI2Y2QyMGEwYTdjZDhhOTQxMTEzMWNlODVmNDQxMDAwOTkyMjNlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEzZTg3YjAyN2Q4NTE0ZDM1OTM5ZjJlNjg5MmIxOTkyMjE1NDU5Njk0MTg4ODMzNmRjMzU2M2UzYjhkYmE5NDInLFxuICAgICAgICAnZmVmNWEzYzY4MDU5YTZkZWM1ZDYyNDExNGJmMWU5MWFhYzJiOWRhNTY4ZDZhYmViMjU3MGQ1NTY0NmI4YWRmMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZTE2MzAyNmU5ZmQ2ZmUwMTdjMzhmMDZhNWJlNmZjMTI1NDI0YjM3MWNlMjcwOGU3YmY0NDkxNjkxZTU3NjRhJyxcbiAgICAgICAgJzFhY2IyNTBmMjU1ZGQ2MWM0M2Q5NGNjYzY3MGQwZjU4ZjQ5YWUzZmExNWI5NjYyM2U1NDMwZGEwYWQ2YzYyYjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjI2OGY1ZWY5YWQ1MWU0ZDc4ZGUzYTc1MGMyZGM4OWIxZTYyNmQ0MzUwNTg2Nzk5OTkzMmU1ZGIzM2FmM2Q4MCcsXG4gICAgICAgICc1ZjMxMGQ0YjNjOTliOWViYjE5Zjc3ZDQxYzFkZWUwMThjZjBkMzRmZDQxOTE2MTQwMDNlOTQ1YTEyMTZlNDIzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZmMDdmMzExOGE5ZGYwMzVlOWZhZDg1ZWI2YzdiZmU0MmIwMmYwMWNhOTljZWVhM2JmN2ZmZGJhOTNjNDc1MGQnLFxuICAgICAgICAnNDM4MTM2ZDYwM2U4NThhM2E1YzQ0MGMzOGVjY2JhZGRjMWQyOTQyMTE0ZTJlZGRkNDc0MGQwOThjZWQxZjBkOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZDhiOTg1NWM3YzA1MmEzNDE0NmZkMjBmZmI2NThiZWE0YjlmNjllMGQ4MjVlYmVjMTZlOGMzY2UyYjUyNmExJyxcbiAgICAgICAgJ2NkYjU1OWVlZGMyZDc5ZjkyNmJhZjQ0ZmI4NGVhNGQ0NGJjZjUwZmVlNTFkN2NlYjMwZTJlN2Y0NjMwMzY3NTgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTJkYjBiNTM4NGRmYmYwNWJmYTlkNDcyZDdhZTI2ZGZlNGI4NTFjZWNhOTFiMWViYTU0MjYzMTgwZGEzMmI2MycsXG4gICAgICAgICdjM2I5OTdkMDUwZWU1ZDQyM2ViYWY2NmE2ZGI5ZjU3YjMxODBjOTAyODc1Njc5ZGU5MjRiNjlkODRhN2IzNzUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTYyZjk0OTBkM2Q1MWRhNjM5NWVmZDI0ZTgwOTE5Y2M3ZDBmMjljM2YzZmE0OGM2ZmZmNTQzYmVjYmQ0MzM1MicsXG4gICAgICAgICc2ZDg5YWQ3YmE0ODc2YjBiMjJjMmNhMjgwYzY4Mjg2MmYzNDJjODU5MWYxZGFmNTE3MGUwN2JmZDljY2FmYTdkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzdmMzBlYTI0NzZiMzk5YjQ5NTc1MDljODhmNzdkMDE5MWFmYTJmZjVjYjdiMTRmZDZkOGU3ZDY1YWFhYjExOTMnLFxuICAgICAgICAnY2E1ZWY3ZDRiMjMxYzk0YzNiMTUzODlhNWY2MzExZTlkYWZmN2JiNjdiMTAzZTk4ODBlZjRiZmY2MzdhY2FlYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MDk4ZmYxZTFkOWYxNGZiNDZhMjEwZmFkYTZjOTAzZmVmMGZiN2I0YTFkZDFkOWFjNjBhMDM2MTgwMGI3YTAwJyxcbiAgICAgICAgJzk3MzExNDFkODFmYzhmODA4NGQzN2M2ZTc1NDIwMDZiM2VlMWI0MGQ2MGRmZTUzNjJhNWIxMzJmZDE3ZGRjMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMmI3OGM3ZGU5ZWU1MTJhNzI4OTViZTZiOWNiZWZhNmUyZjNjNGNjY2U0NDVjOTZiOWYyYzgxZTI3NzhhZDU4JyxcbiAgICAgICAgJ2VlMTg0OWY1MTNkZjcxZTMyZWZjMzg5NmVlMjgyNjBjNzNiYjgwNTQ3YWUyMjc1YmE0OTcyMzc3OTRjODc1M2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTJjYjc0ZmRkYzhlOWZiY2QwNzZlZWYyYTdjNzJiMGNlMzdkNTBmMDgyNjlkZmMwNzRiNTgxNTUwNTQ3YTRmNycsXG4gICAgICAgICdkM2FhMmVkNzFjOWRkMjI0N2E2MmRmMDYyNzM2ZWIwYmFkZGVhOWUzNjEyMmQyYmU4NjQxYWJjYjAwNWNjNGE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0Mzg0NDc1NjZkNGQ3YmVkYWRjMjk5NDk2YWIzNTc0MjYwMDlhMzVmMjM1Y2IxNDFiZTBkOTljZDEwYWUzYTgnLFxuICAgICAgICAnYzRlMTAyMDkxNjk4MGE0ZGE1ZDAxYWM1ZTZhZDMzMDczNGVmMGQ3OTA2NjMxYzRmMjM5MDQyNmIyZWRkNzkxZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0MTYyZDQ4OGI4OTQwMjAzOWI1ODRjNmZjNmMzMDg4NzA1ODdkOWM0NmY2NjBiODc4YWI2NWM4MmM3MTFkNjdlJyxcbiAgICAgICAgJzY3MTYzZTkwMzIzNjI4OWY3NzZmMjJjMjVmYjhhM2FmYzE3MzJmMmI4NGI0ZTk1ZGJkYTQ3YWU1YTA4NTI2NDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnM2ZhZDNmYTg0Y2FmMGYzNGYwZjg5YmZkMmRjZjU0ZmMxNzVkNzY3YWVjM2U1MDY4NGYzYmE0YTRiZjVmNjgzZCcsXG4gICAgICAgICdjZDFiYzdjYjZjYzQwN2JiMmYwY2E2NDdjNzE4YTczMGNmNzE4NzJlN2QwZDJhNTNmYTIwZWZjZGZlNjE4MjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjc0ZjI2MDBhMzAwN2EwMDU2OGMxYTdjZTA1ZDA4MTZjMWZiODRiZjEzNzA3OThmMWM2OTUzMmZhZWIxYTg2YicsXG4gICAgICAgICcyOTlkMjFmOTQxM2YzM2IzZWRmNDNiMjU3MDA0NTgwYjcwZGI1N2RhMGIxODIyNTllMDllZWNjNjllMGQzOGE1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzMmY0ZGE1NGFkZTc0YWJiODFiODE1YWQxZmIzYjI2M2Q4MmQ2YzY5MjcxNGJjZmY4N2QyOWJkNWVlOWYwOGYnLFxuICAgICAgICAnZjk0MjllNzM4YjhlNTNiOTY4ZTk5MDE2YzA1OTcwNzc4MmUxNGY0NTM1MzU5ZDU4MmZjNDE2OTEwYjNlZWE4NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMGU0ZTY3MDQzNTM4NTU1NmU1OTM2NTcxMzU4NDVkMzZmYmI2OTMxZjcyYjA4Y2IxZWQ5NTRmMWUzY2UzZmY2JyxcbiAgICAgICAgJzQ2MmY5YmNlNjE5ODk4NjM4NDk5MzUwMTEzYmJjOWIxMGE4NzhkMzVkYTcwNzQwZGM2OTVhNTU5ZWI4OGRiN2InXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYmUyMDYyMDAzYzUxY2MzMDA0NjgyOTA0MzMwZTRkZWU3ZjNkY2QxMGIwMWU1ODBiZjE5NzFiMDRkNGNhZDI5NycsXG4gICAgICAgICc2MjE4OGJjNDlkNjFlNTQyODU3M2Q0OGE3NGUxYzY1NWIxYzYxMDkwOTA1NjgyYTBkNTU1OGVkNzJkY2NiOWJjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkzMTQ0NDIzYWNlMzQ1MWVkMjllMGZiOWFjMmFmMjExY2I2ZTg0YTYwMWRmNTk5M2M0MTk4NTlmZmY1ZGYwNGEnLFxuICAgICAgICAnN2MxMGRmYjE2NGMzNDI1ZjVjNzFhM2Y5ZDc5OTIwMzhmMTA2NTIyNGY3MmJiOWQxZDkwMmE2ZDEzMDM3YjQ3YydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiMDE1ZjgwNDRmNWZjYmRjZjIxY2EyNmQ2YzM0ZmI4MTk3ODI5MjA1YzdiN2QyYTdjYjY2NDE4YzE1N2IxMTJjJyxcbiAgICAgICAgJ2FiOGMxZTA4NmQwNGU4MTM3NDRhNjU1YjJkZjhkNWY4M2IzY2RjNmZhYTMwODhjMWQzYWVhMTQ1NGUzYTFkNWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDVlOWUxZGE2NDlkOTdkODllNDg2ODExN2E0NjVhM2E0ZjhhMThkZTU3YTE0MGQzNmIzZjJhZjM0MWEyMWI1MicsXG4gICAgICAgICc0Y2IwNDQzN2YzOTFlZDczMTExYTEzY2MxZDRkZDBkYjE2OTM0NjVjMjI0MDQ4MGQ4OTU1ZTg1OTJmMjc0NDdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzYWU0MTA0N2RkN2NhMDY1ZGJmOGVkNzdiOTkyNDM5OTgzMDA1Y2Q3MmUxNmQ2Zjk5NmE1MzE2ZDM2OTY2YmInLFxuICAgICAgICAnYmQxYWViMjFhZDIyZWJiMjJhMTBmMDMwMzQxN2M2ZDk2NGY4Y2RkN2RmMGFjYTYxNGIxMGRjMTRkMTI1YWM0NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0NjNlMjc2M2Q4ODVmOTU4ZmM2NmNkZDIyODAwZjBhNDg3MTk3ZDBhODJlMzc3YjQ5ZjgwYWY4N2M4OTdiMDY1JyxcbiAgICAgICAgJ2JmZWZhY2RiMGU1ZDBmZDdkZjNhMzExYTk0ZGUwNjJiMjZiODBjNjFmYmM5NzUwOGI3OTk5MjY3MWVmN2NhN2YnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzk4NWZkZmQxMjdjMDU2N2M2ZjUzZWMxYmI2M2VjMzE1OGU1OTdjNDBiZmU3NDdjODNjZGRmYzkxMDY0MTkxNycsXG4gICAgICAgICc2MDNjMTJkYWYzZDk4NjJlZjJiMjVmZTFkZTI4OWFlZDI0ZWQyOTFlMGVjNjcwODcwM2E1YmQ1NjdmMzJlZDAzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc0YTFhZDZiNWY3NmUzOWRiMmRkMjQ5NDEwZWFjN2Y5OWU3NGM1OWNiODNkMmQwZWQ1ZmYxNTQzZGE3NzAzZTknLFxuICAgICAgICAnY2M2MTU3ZWYxOGM5YzYzY2Q2MTkzZDgzNjMxYmJlYTAwOTNlMDk2ODk0MmU4YzMzZDU3MzdmZDc5MGUwZGIwOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMDY4MmE1MDcwMzM3NWY2MDJkNDE2NjY0YmExOWI3ZmM5YmFiNDJjNzI3NDc0NjNhNzFkMDg5NmIyMmY2ZGEzJyxcbiAgICAgICAgJzU1M2UwNGY2YjAxOGI0ZmE2YzhmMzllN2YzMTFkMzE3NjI5MGQwZTBmMTljYTczZjE3NzE0ZDk5NzdhMjJmZjgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOWUyMTU4ZjBkN2MwZDVmMjZjMzc5MWVmZWZhNzk1OTc2NTRlN2EyYjI0NjRmNTJiMWVlNmMxMzQ3NzY5ZWY1NycsXG4gICAgICAgICc3MTJmY2RkMWI5MDUzZjA5MDAzYTM0ODFmYTc3NjJlOWZmZDdjOGVmMzVhMzg1MDllMmZiZjI2MjkwMDgzNzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc2ZTI2OTg5YTQzYzljZmViYTQwMjljMjAyNTM4YzI4MTcyZTU2NmUzYzRmY2U3MzIyODU3ZjNiZTMyN2Q2NicsXG4gICAgICAgICdlZDhjYzlkMDRiMjllYjg3N2QyNzBiNDg3OGRjNDNjMTlhZWZkMzFmNGVlZTA5ZWU3YjQ3ODM0YzFmYTRiMWMzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc1ZDQ2ZWZlYTM3NzFlNmU2OGFiYjg5YTEzYWQ3NDdlY2YxODkyMzkzZGZjNGYxYjcwMDQ3ODhjNTAzNzRkYTgnLFxuICAgICAgICAnOTg1MjM5MGE5OTUwNzY3OWZkMGI4NmZkMmIzOWE4NjhkN2VmYzIyMTUxMzQ2ZTFhM2NhNDcyNjU4NmE2YmVkOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MDlhMjBjNjdkNjQ5MDBmZmI2OThjNGM4MjVmNmQ1ZjIzMTBmYjA0NTFjODY5MzQ1YjczMTlmNjQ1NjA1NzIxJyxcbiAgICAgICAgJzllOTk0OTgwZDk5MTdlMjJiNzZiMDYxOTI3ZmEwNDE0M2QwOTZjY2M1NDk2M2U2YTVlYmZhNWYzZjhlMjg2YzEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWIzODkwM2E0M2Y3ZjExNGVkNDUwMGI0ZWFjNzA4M2ZkZWZlY2UxY2YyOWM2MzUyOGQ1NjM0NDZmOTcyYzE4MCcsXG4gICAgICAgICc0MDM2ZWRjOTMxYTYwYWU4ODkzNTNmNzdmZDUzZGU0YTI3MDhiMjZiNmY1ZGE3MmFkMzM5NDExOWRhZjQwOGY5J1xuICAgICAgXVxuICAgIF1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBIbWFjRFJCRyA9IHJlcXVpcmUoJ2htYWMtZHJiZycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuLi9jdXJ2ZXMnKTtcbnZhciByYW5kID0gcmVxdWlyZSgnYnJvcmFuZCcpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxudmFyIEtleVBhaXIgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG5cbmZ1bmN0aW9uIEVDKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEVDKSlcbiAgICByZXR1cm4gbmV3IEVDKG9wdGlvbnMpO1xuXG4gIC8vIFNob3J0Y3V0IGBlbGxpcHRpYy5lYyhjdXJ2ZS1uYW1lKWBcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgIGFzc2VydChjdXJ2ZXMuaGFzT3duUHJvcGVydHkob3B0aW9ucyksICdVbmtub3duIGN1cnZlICcgKyBvcHRpb25zKTtcblxuICAgIG9wdGlvbnMgPSBjdXJ2ZXNbb3B0aW9uc107XG4gIH1cblxuICAvLyBTaG9ydGN1dCBmb3IgYGVsbGlwdGljLmVjKGVsbGlwdGljLmN1cnZlcy5jdXJ2ZU5hbWUpYFxuICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIGN1cnZlcy5QcmVzZXRDdXJ2ZSlcbiAgICBvcHRpb25zID0geyBjdXJ2ZTogb3B0aW9ucyB9O1xuXG4gIHRoaXMuY3VydmUgPSBvcHRpb25zLmN1cnZlLmN1cnZlO1xuICB0aGlzLm4gPSB0aGlzLmN1cnZlLm47XG4gIHRoaXMubmggPSB0aGlzLm4udXNocm4oMSk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcblxuICAvLyBQb2ludCBvbiBjdXJ2ZVxuICB0aGlzLmcgPSBvcHRpb25zLmN1cnZlLmc7XG4gIHRoaXMuZy5wcmVjb21wdXRlKG9wdGlvbnMuY3VydmUubi5iaXRMZW5ndGgoKSArIDEpO1xuXG4gIC8vIEhhc2ggZm9yIGZ1bmN0aW9uIGZvciBEUkJHXG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaCB8fCBvcHRpb25zLmN1cnZlLmhhc2g7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEVDO1xuXG5FQy5wcm90b3R5cGUua2V5UGFpciA9IGZ1bmN0aW9uIGtleVBhaXIob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEtleVBhaXIodGhpcywgb3B0aW9ucyk7XG59O1xuXG5FQy5wcm90b3R5cGUua2V5RnJvbVByaXZhdGUgPSBmdW5jdGlvbiBrZXlGcm9tUHJpdmF0ZShwcml2LCBlbmMpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVByaXZhdGUodGhpcywgcHJpdiwgZW5jKTtcbn07XG5cbkVDLnByb3RvdHlwZS5rZXlGcm9tUHVibGljID0gZnVuY3Rpb24ga2V5RnJvbVB1YmxpYyhwdWIsIGVuYykge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHVibGljKHRoaXMsIHB1YiwgZW5jKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZW5LZXlQYWlyID0gZnVuY3Rpb24gZ2VuS2V5UGFpcihvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0ge307XG5cbiAgLy8gSW5zdGFudGlhdGUgSG1hY19EUkJHXG4gIHZhciBkcmJnID0gbmV3IEhtYWNEUkJHKHtcbiAgICBoYXNoOiB0aGlzLmhhc2gsXG4gICAgcGVyczogb3B0aW9ucy5wZXJzLFxuICAgIHBlcnNFbmM6IG9wdGlvbnMucGVyc0VuYyB8fCAndXRmOCcsXG4gICAgZW50cm9weTogb3B0aW9ucy5lbnRyb3B5IHx8IHJhbmQodGhpcy5oYXNoLmhtYWNTdHJlbmd0aCksXG4gICAgZW50cm9weUVuYzogb3B0aW9ucy5lbnRyb3B5ICYmIG9wdGlvbnMuZW50cm9weUVuYyB8fCAndXRmOCcsXG4gICAgbm9uY2U6IHRoaXMubi50b0FycmF5KClcbiAgfSk7XG5cbiAgdmFyIGJ5dGVzID0gdGhpcy5uLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIG5zMiA9IHRoaXMubi5zdWIobmV3IEJOKDIpKTtcbiAgZG8ge1xuICAgIHZhciBwcml2ID0gbmV3IEJOKGRyYmcuZ2VuZXJhdGUoYnl0ZXMpKTtcbiAgICBpZiAocHJpdi5jbXAobnMyKSA+IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHByaXYuaWFkZG4oMSk7XG4gICAgcmV0dXJuIHRoaXMua2V5RnJvbVByaXZhdGUocHJpdik7XG4gIH0gd2hpbGUgKHRydWUpO1xufTtcblxuRUMucHJvdG90eXBlLl90cnVuY2F0ZVRvTiA9IGZ1bmN0aW9uIHRydW5jYXRlVG9OKG1zZywgdHJ1bmNPbmx5KSB7XG4gIHZhciBkZWx0YSA9IG1zZy5ieXRlTGVuZ3RoKCkgKiA4IC0gdGhpcy5uLmJpdExlbmd0aCgpO1xuICBpZiAoZGVsdGEgPiAwKVxuICAgIG1zZyA9IG1zZy51c2hybihkZWx0YSk7XG4gIGlmICghdHJ1bmNPbmx5ICYmIG1zZy5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBtc2cuc3ViKHRoaXMubik7XG4gIGVsc2VcbiAgICByZXR1cm4gbXNnO1xufTtcblxuRUMucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1zZywga2V5LCBlbmMsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBlbmMgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IGVuYztcbiAgICBlbmMgPSBudWxsO1xuICB9XG4gIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0ge307XG5cbiAga2V5ID0gdGhpcy5rZXlGcm9tUHJpdmF0ZShrZXksIGVuYyk7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBCTihtc2csIDE2KSk7XG5cbiAgLy8gWmVyby1leHRlbmQga2V5IHRvIHByb3ZpZGUgZW5vdWdoIGVudHJvcHlcbiAgdmFyIGJ5dGVzID0gdGhpcy5uLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIGJrZXkgPSBrZXkuZ2V0UHJpdmF0ZSgpLnRvQXJyYXkoJ2JlJywgYnl0ZXMpO1xuXG4gIC8vIFplcm8tZXh0ZW5kIG5vbmNlIHRvIGhhdmUgdGhlIHNhbWUgYnl0ZSBzaXplIGFzIE5cbiAgdmFyIG5vbmNlID0gbXNnLnRvQXJyYXkoJ2JlJywgYnl0ZXMpO1xuXG4gIC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCR1xuICB2YXIgZHJiZyA9IG5ldyBIbWFjRFJCRyh7XG4gICAgaGFzaDogdGhpcy5oYXNoLFxuICAgIGVudHJvcHk6IGJrZXksXG4gICAgbm9uY2U6IG5vbmNlLFxuICAgIHBlcnM6IG9wdGlvbnMucGVycyxcbiAgICBwZXJzRW5jOiBvcHRpb25zLnBlcnNFbmMgfHwgJ3V0ZjgnXG4gIH0pO1xuXG4gIC8vIE51bWJlciBvZiBieXRlcyB0byBnZW5lcmF0ZVxuICB2YXIgbnMxID0gdGhpcy5uLnN1YihuZXcgQk4oMSkpO1xuXG4gIGZvciAodmFyIGl0ZXIgPSAwOyB0cnVlOyBpdGVyKyspIHtcbiAgICB2YXIgayA9IG9wdGlvbnMuayA/XG4gICAgICAgIG9wdGlvbnMuayhpdGVyKSA6XG4gICAgICAgIG5ldyBCTihkcmJnLmdlbmVyYXRlKHRoaXMubi5ieXRlTGVuZ3RoKCkpKTtcbiAgICBrID0gdGhpcy5fdHJ1bmNhdGVUb04oaywgdHJ1ZSk7XG4gICAgaWYgKGsuY21wbigxKSA8PSAwIHx8IGsuY21wKG5zMSkgPj0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgdmFyIGtwID0gdGhpcy5nLm11bChrKTtcbiAgICBpZiAoa3AuaXNJbmZpbml0eSgpKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIga3BYID0ga3AuZ2V0WCgpO1xuICAgIHZhciByID0ga3BYLnVtb2QodGhpcy5uKTtcbiAgICBpZiAoci5jbXBuKDApID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIgcyA9IGsuaW52bSh0aGlzLm4pLm11bChyLm11bChrZXkuZ2V0UHJpdmF0ZSgpKS5pYWRkKG1zZykpO1xuICAgIHMgPSBzLnVtb2QodGhpcy5uKTtcbiAgICBpZiAocy5jbXBuKDApID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIgcmVjb3ZlcnlQYXJhbSA9IChrcC5nZXRZKCkuaXNPZGQoKSA/IDEgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAgICAgICAoa3BYLmNtcChyKSAhPT0gMCA/IDIgOiAwKTtcblxuICAgIC8vIFVzZSBjb21wbGVtZW50IG9mIGBzYCwgaWYgaXQgaXMgPiBgbiAvIDJgXG4gICAgaWYgKG9wdGlvbnMuY2Fub25pY2FsICYmIHMuY21wKHRoaXMubmgpID4gMCkge1xuICAgICAgcyA9IHRoaXMubi5zdWIocyk7XG4gICAgICByZWNvdmVyeVBhcmFtIF49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTaWduYXR1cmUoeyByOiByLCBzOiBzLCByZWNvdmVyeVBhcmFtOiByZWNvdmVyeVBhcmFtIH0pO1xuICB9XG59O1xuXG5FQy5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1zZywgc2lnbmF0dXJlLCBrZXksIGVuYykge1xuICBtc2cgPSB0aGlzLl90cnVuY2F0ZVRvTihuZXcgQk4obXNnLCAxNikpO1xuICBrZXkgPSB0aGlzLmtleUZyb21QdWJsaWMoa2V5LCBlbmMpO1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgJ2hleCcpO1xuXG4gIC8vIFBlcmZvcm0gcHJpbWl0aXZlIHZhbHVlcyB2YWxpZGF0aW9uXG4gIHZhciByID0gc2lnbmF0dXJlLnI7XG4gIHZhciBzID0gc2lnbmF0dXJlLnM7XG4gIGlmIChyLmNtcG4oMSkgPCAwIHx8IHIuY21wKHRoaXMubikgPj0gMClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChzLmNtcG4oMSkgPCAwIHx8IHMuY21wKHRoaXMubikgPj0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gVmFsaWRhdGUgc2lnbmF0dXJlXG4gIHZhciBzaW52ID0gcy5pbnZtKHRoaXMubik7XG4gIHZhciB1MSA9IHNpbnYubXVsKG1zZykudW1vZCh0aGlzLm4pO1xuICB2YXIgdTIgPSBzaW52Lm11bChyKS51bW9kKHRoaXMubik7XG5cbiAgaWYgKCF0aGlzLmN1cnZlLl9tYXh3ZWxsVHJpY2spIHtcbiAgICB2YXIgcCA9IHRoaXMuZy5tdWxBZGQodTEsIGtleS5nZXRQdWJsaWMoKSwgdTIpO1xuICAgIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBwLmdldFgoKS51bW9kKHRoaXMubikuY21wKHIpID09PSAwO1xuICB9XG5cbiAgLy8gTk9URTogR3JlZyBNYXh3ZWxsJ3MgdHJpY2ssIGluc3BpcmVkIGJ5OlxuICAvLyBodHRwczovL2dpdC5pby92YWQzS1xuXG4gIHZhciBwID0gdGhpcy5nLmptdWxBZGQodTEsIGtleS5nZXRQdWJsaWMoKSwgdTIpO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIENvbXBhcmUgYHAueGAgb2YgSmFjb2JpYW4gcG9pbnQgd2l0aCBgcmAsXG4gIC8vIHRoaXMgd2lsbCBkbyBgcC54ID09IHIgKiBwLnpeMmAgaW5zdGVhZCBvZiBtdWx0aXBseWluZyBgcC54YCBieSB0aGVcbiAgLy8gaW52ZXJzZSBvZiBgcC56XjJgXG4gIHJldHVybiBwLmVxWFRvUChyKTtcbn07XG5cbkVDLnByb3RvdHlwZS5yZWNvdmVyUHViS2V5ID0gZnVuY3Rpb24obXNnLCBzaWduYXR1cmUsIGosIGVuYykge1xuICBhc3NlcnQoKDMgJiBqKSA9PT0gaiwgJ1RoZSByZWNvdmVyeSBwYXJhbSBpcyBtb3JlIHRoYW4gdHdvIGJpdHMnKTtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsIGVuYyk7XG5cbiAgdmFyIG4gPSB0aGlzLm47XG4gIHZhciBlID0gbmV3IEJOKG1zZyk7XG4gIHZhciByID0gc2lnbmF0dXJlLnI7XG4gIHZhciBzID0gc2lnbmF0dXJlLnM7XG5cbiAgLy8gQSBzZXQgTFNCIHNpZ25pZmllcyB0aGF0IHRoZSB5LWNvb3JkaW5hdGUgaXMgb2RkXG4gIHZhciBpc1lPZGQgPSBqICYgMTtcbiAgdmFyIGlzU2Vjb25kS2V5ID0gaiA+PiAxO1xuICBpZiAoci5jbXAodGhpcy5jdXJ2ZS5wLnVtb2QodGhpcy5jdXJ2ZS5uKSkgPj0gMCAmJiBpc1NlY29uZEtleSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHNlbmNvbmQga2V5IGNhbmRpbmF0ZScpO1xuXG4gIC8vIDEuMS4gTGV0IHggPSByICsgam4uXG4gIGlmIChpc1NlY29uZEtleSlcbiAgICByID0gdGhpcy5jdXJ2ZS5wb2ludEZyb21YKHIuYWRkKHRoaXMuY3VydmUubiksIGlzWU9kZCk7XG4gIGVsc2VcbiAgICByID0gdGhpcy5jdXJ2ZS5wb2ludEZyb21YKHIsIGlzWU9kZCk7XG5cbiAgdmFyIHJJbnYgPSBzaWduYXR1cmUuci5pbnZtKG4pO1xuICB2YXIgczEgPSBuLnN1YihlKS5tdWwockludikudW1vZChuKTtcbiAgdmFyIHMyID0gcy5tdWwockludikudW1vZChuKTtcblxuICAvLyAxLjYuMSBDb21wdXRlIFEgPSByXi0xIChzUiAtICBlRylcbiAgLy8gICAgICAgICAgICAgICBRID0gcl4tMSAoc1IgKyAtZUcpXG4gIHJldHVybiB0aGlzLmcubXVsQWRkKHMxLCByLCBzMik7XG59O1xuXG5FQy5wcm90b3R5cGUuZ2V0S2V5UmVjb3ZlcnlQYXJhbSA9IGZ1bmN0aW9uKGUsIHNpZ25hdHVyZSwgUSwgZW5jKSB7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpO1xuICBpZiAoc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW0gIT09IG51bGwpXG4gICAgcmV0dXJuIHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIFFwcmltZTtcbiAgICB0cnkge1xuICAgICAgUXByaW1lID0gdGhpcy5yZWNvdmVyUHViS2V5KGUsIHNpZ25hdHVyZSwgaSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKFFwcmltZS5lcShRKSlcbiAgICAgIHJldHVybiBpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgdmFsaWQgcmVjb3ZlcnkgZmFjdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJ2hhc2guanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEhtYWNEUkJHKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWNEUkJHKSlcbiAgICByZXR1cm4gbmV3IEhtYWNEUkJHKG9wdGlvbnMpO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG4gIHRoaXMucHJlZFJlc2lzdCA9ICEhb3B0aW9ucy5wcmVkUmVzaXN0O1xuXG4gIHRoaXMub3V0TGVuID0gdGhpcy5oYXNoLm91dFNpemU7XG4gIHRoaXMubWluRW50cm9weSA9IG9wdGlvbnMubWluRW50cm9weSB8fCB0aGlzLmhhc2guaG1hY1N0cmVuZ3RoO1xuXG4gIHRoaXMuX3Jlc2VlZCA9IG51bGw7XG4gIHRoaXMucmVzZWVkSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLksgPSBudWxsO1xuICB0aGlzLlYgPSBudWxsO1xuXG4gIHZhciBlbnRyb3B5ID0gdXRpbHMudG9BcnJheShvcHRpb25zLmVudHJvcHksIG9wdGlvbnMuZW50cm9weUVuYyB8fCAnaGV4Jyk7XG4gIHZhciBub25jZSA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5ub25jZSwgb3B0aW9ucy5ub25jZUVuYyB8fCAnaGV4Jyk7XG4gIHZhciBwZXJzID0gdXRpbHMudG9BcnJheShvcHRpb25zLnBlcnMsIG9wdGlvbnMucGVyc0VuYyB8fCAnaGV4Jyk7XG4gIGFzc2VydChlbnRyb3B5Lmxlbmd0aCA+PSAodGhpcy5taW5FbnRyb3B5IC8gOCksXG4gICAgICAgICAnTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiAnICsgdGhpcy5taW5FbnRyb3B5ICsgJyBiaXRzJyk7XG4gIHRoaXMuX2luaXQoZW50cm9weSwgbm9uY2UsIHBlcnMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjRFJCRztcblxuSG1hY0RSQkcucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChlbnRyb3B5LCBub25jZSwgcGVycykge1xuICB2YXIgc2VlZCA9IGVudHJvcHkuY29uY2F0KG5vbmNlKS5jb25jYXQocGVycyk7XG5cbiAgdGhpcy5LID0gbmV3IEFycmF5KHRoaXMub3V0TGVuIC8gOCk7XG4gIHRoaXMuViA9IG5ldyBBcnJheSh0aGlzLm91dExlbiAvIDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuVi5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuS1tpXSA9IDB4MDA7XG4gICAgdGhpcy5WW2ldID0gMHgwMTtcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZShzZWVkKTtcbiAgdGhpcy5fcmVzZWVkID0gMTtcbiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IDB4MTAwMDAwMDAwMDAwMDsgIC8vIDJeNDhcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faG1hYyA9IGZ1bmN0aW9uIGhtYWMoKSB7XG4gIHJldHVybiBuZXcgaGFzaC5obWFjKHRoaXMuaGFzaCwgdGhpcy5LKTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHNlZWQpIHtcbiAgdmFyIGttYWMgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgICAgLnVwZGF0ZSh0aGlzLlYpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUoWyAweDAwIF0pO1xuICBpZiAoc2VlZClcbiAgICBrbWFjID0ga21hYy51cGRhdGUoc2VlZCk7XG4gIHRoaXMuSyA9IGttYWMuZGlnZXN0KCk7XG4gIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbiAgaWYgKCFzZWVkKVxuICAgIHJldHVybjtcblxuICB0aGlzLksgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgIC51cGRhdGUodGhpcy5WKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShbIDB4MDEgXSlcbiAgICAgICAgICAgICAgIC51cGRhdGUoc2VlZClcbiAgICAgICAgICAgICAgIC5kaWdlc3QoKTtcbiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLnJlc2VlZCA9IGZ1bmN0aW9uIHJlc2VlZChlbnRyb3B5LCBlbnRyb3B5RW5jLCBhZGQsIGFkZEVuYykge1xuICAvLyBPcHRpb25hbCBlbnRyb3B5IGVuY1xuICBpZiAodHlwZW9mIGVudHJvcHlFbmMgIT09ICdzdHJpbmcnKSB7XG4gICAgYWRkRW5jID0gYWRkO1xuICAgIGFkZCA9IGVudHJvcHlFbmM7XG4gICAgZW50cm9weUVuYyA9IG51bGw7XG4gIH1cblxuICBlbnRyb3B5ID0gdXRpbHMudG9BcnJheShlbnRyb3B5LCBlbnRyb3B5RW5jKTtcbiAgYWRkID0gdXRpbHMudG9BcnJheShhZGQsIGFkZEVuYyk7XG5cbiAgYXNzZXJ0KGVudHJvcHkubGVuZ3RoID49ICh0aGlzLm1pbkVudHJvcHkgLyA4KSxcbiAgICAgICAgICdOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6ICcgKyB0aGlzLm1pbkVudHJvcHkgKyAnIGJpdHMnKTtcblxuICB0aGlzLl91cGRhdGUoZW50cm9weS5jb25jYXQoYWRkIHx8IFtdKSk7XG4gIHRoaXMuX3Jlc2VlZCA9IDE7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShsZW4sIGVuYywgYWRkLCBhZGRFbmMpIHtcbiAgaWYgKHRoaXMuX3Jlc2VlZCA+IHRoaXMucmVzZWVkSW50ZXJ2YWwpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZXNlZWQgaXMgcmVxdWlyZWQnKTtcblxuICAvLyBPcHRpb25hbCBlbmNvZGluZ1xuICBpZiAodHlwZW9mIGVuYyAhPT0gJ3N0cmluZycpIHtcbiAgICBhZGRFbmMgPSBhZGQ7XG4gICAgYWRkID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cblxuICAvLyBPcHRpb25hbCBhZGRpdGlvbmFsIGRhdGFcbiAgaWYgKGFkZCkge1xuICAgIGFkZCA9IHV0aWxzLnRvQXJyYXkoYWRkLCBhZGRFbmMgfHwgJ2hleCcpO1xuICAgIHRoaXMuX3VwZGF0ZShhZGQpO1xuICB9XG5cbiAgdmFyIHRlbXAgPSBbXTtcbiAgd2hpbGUgKHRlbXAubGVuZ3RoIDwgbGVuKSB7XG4gICAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xuICAgIHRlbXAgPSB0ZW1wLmNvbmNhdCh0aGlzLlYpO1xuICB9XG5cbiAgdmFyIHJlcyA9IHRlbXAuc2xpY2UoMCwgbGVuKTtcbiAgdGhpcy5fdXBkYXRlKGFkZCk7XG4gIHRoaXMuX3Jlc2VlZCsrO1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHJlcywgZW5jKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gS2V5UGFpcihlYywgb3B0aW9ucykge1xuICB0aGlzLmVjID0gZWM7XG4gIHRoaXMucHJpdiA9IG51bGw7XG4gIHRoaXMucHViID0gbnVsbDtcblxuICAvLyBLZXlQYWlyKGVjLCB7IHByaXY6IC4uLiwgcHViOiAuLi4gfSlcbiAgaWYgKG9wdGlvbnMucHJpdilcbiAgICB0aGlzLl9pbXBvcnRQcml2YXRlKG9wdGlvbnMucHJpdiwgb3B0aW9ucy5wcml2RW5jKTtcbiAgaWYgKG9wdGlvbnMucHViKVxuICAgIHRoaXMuX2ltcG9ydFB1YmxpYyhvcHRpb25zLnB1Yiwgb3B0aW9ucy5wdWJFbmMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBLZXlQYWlyO1xuXG5LZXlQYWlyLmZyb21QdWJsaWMgPSBmdW5jdGlvbiBmcm9tUHVibGljKGVjLCBwdWIsIGVuYykge1xuICBpZiAocHViIGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHViO1xuXG4gIHJldHVybiBuZXcgS2V5UGFpcihlYywge1xuICAgIHB1YjogcHViLFxuICAgIHB1YkVuYzogZW5jXG4gIH0pO1xufTtcblxuS2V5UGFpci5mcm9tUHJpdmF0ZSA9IGZ1bmN0aW9uIGZyb21Qcml2YXRlKGVjLCBwcml2LCBlbmMpIHtcbiAgaWYgKHByaXYgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBwcml2O1xuXG4gIHJldHVybiBuZXcgS2V5UGFpcihlYywge1xuICAgIHByaXY6IHByaXYsXG4gICAgcHJpdkVuYzogZW5jXG4gIH0pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgdmFyIHB1YiA9IHRoaXMuZ2V0UHVibGljKCk7XG5cbiAgaWYgKHB1Yi5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnSW52YWxpZCBwdWJsaWMga2V5JyB9O1xuICBpZiAoIXB1Yi52YWxpZGF0ZSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ1B1YmxpYyBrZXkgaXMgbm90IGEgcG9pbnQnIH07XG4gIGlmICghcHViLm11bCh0aGlzLmVjLmN1cnZlLm4pLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdQdWJsaWMga2V5ICogTiAhPSBPJyB9O1xuXG4gIHJldHVybiB7IHJlc3VsdDogdHJ1ZSwgcmVhc29uOiBudWxsIH07XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRQdWJsaWMgPSBmdW5jdGlvbiBnZXRQdWJsaWMoY29tcGFjdCwgZW5jKSB7XG4gIC8vIGNvbXBhY3QgaXMgb3B0aW9uYWwgYXJndW1lbnRcbiAgaWYgKHR5cGVvZiBjb21wYWN0ID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGNvbXBhY3Q7XG4gICAgY29tcGFjdCA9IG51bGw7XG4gIH1cblxuICBpZiAoIXRoaXMucHViKVxuICAgIHRoaXMucHViID0gdGhpcy5lYy5nLm11bCh0aGlzLnByaXYpO1xuXG4gIGlmICghZW5jKVxuICAgIHJldHVybiB0aGlzLnB1YjtcblxuICByZXR1cm4gdGhpcy5wdWIuZW5jb2RlKGVuYywgY29tcGFjdCk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRQcml2YXRlID0gZnVuY3Rpb24gZ2V0UHJpdmF0ZShlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHRoaXMucHJpdi50b1N0cmluZygxNiwgMik7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5wcml2O1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFByaXZhdGUgPSBmdW5jdGlvbiBfaW1wb3J0UHJpdmF0ZShrZXksIGVuYykge1xuICB0aGlzLnByaXYgPSBuZXcgQk4oa2V5LCBlbmMgfHwgMTYpO1xuXG4gIC8vIEVuc3VyZSB0aGF0IHRoZSBwcml2IHdvbid0IGJlIGJpZ2dlciB0aGFuIG4sIG90aGVyd2lzZSB3ZSBtYXkgZmFpbFxuICAvLyBpbiBmaXhlZCBtdWx0aXBsaWNhdGlvbiBtZXRob2RcbiAgdGhpcy5wcml2ID0gdGhpcy5wcml2LnVtb2QodGhpcy5lYy5jdXJ2ZS5uKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQdWJsaWMgPSBmdW5jdGlvbiBfaW1wb3J0UHVibGljKGtleSwgZW5jKSB7XG4gIGlmIChrZXkueCB8fCBrZXkueSkge1xuICAgIC8vIE1vbnRnb21lcnkgcG9pbnRzIG9ubHkgaGF2ZSBhbiBgeGAgY29vcmRpbmF0ZS5cbiAgICAvLyBXZWllcnN0cmFzcy9FZHdhcmRzIHBvaW50cyBvbiB0aGUgb3RoZXIgaGFuZCBoYXZlIGJvdGggYHhgIGFuZFxuICAgIC8vIGB5YCBjb29yZGluYXRlcy5cbiAgICBpZiAodGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnbW9udCcpIHtcbiAgICAgIGFzc2VydChrZXkueCwgJ05lZWQgeCBjb29yZGluYXRlJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdzaG9ydCcgfHxcbiAgICAgICAgICAgICAgIHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ2Vkd2FyZHMnKSB7XG4gICAgICBhc3NlcnQoa2V5LnggJiYga2V5LnksICdOZWVkIGJvdGggeCBhbmQgeSBjb29yZGluYXRlJyk7XG4gICAgfVxuICAgIHRoaXMucHViID0gdGhpcy5lYy5jdXJ2ZS5wb2ludChrZXkueCwga2V5LnkpO1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnB1YiA9IHRoaXMuZWMuY3VydmUuZGVjb2RlUG9pbnQoa2V5LCBlbmMpO1xufTtcblxuLy8gRUNESFxuS2V5UGFpci5wcm90b3R5cGUuZGVyaXZlID0gZnVuY3Rpb24gZGVyaXZlKHB1Yikge1xuICByZXR1cm4gcHViLm11bCh0aGlzLnByaXYpLmdldFgoKTtcbn07XG5cbi8vIEVDRFNBXG5LZXlQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtc2csIGVuYywgb3B0aW9ucykge1xuICByZXR1cm4gdGhpcy5lYy5zaWduKG1zZywgdGhpcywgZW5jLCBvcHRpb25zKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtc2csIHNpZ25hdHVyZSkge1xuICByZXR1cm4gdGhpcy5lYy52ZXJpZnkobXNnLCBzaWduYXR1cmUsIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIHJldHVybiAnPEtleSBwcml2OiAnICsgKHRoaXMucHJpdiAmJiB0aGlzLnByaXYudG9TdHJpbmcoMTYsIDIpKSArXG4gICAgICAgICAnIHB1YjogJyArICh0aGlzLnB1YiAmJiB0aGlzLnB1Yi5pbnNwZWN0KCkpICsgJyA+Jztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaWduYXR1cmUob3B0aW9ucywgZW5jKSB7XG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBvcHRpb25zO1xuXG4gIGlmICh0aGlzLl9pbXBvcnRERVIob3B0aW9ucywgZW5jKSlcbiAgICByZXR1cm47XG5cbiAgYXNzZXJ0KG9wdGlvbnMuciAmJiBvcHRpb25zLnMsICdTaWduYXR1cmUgd2l0aG91dCByIG9yIHMnKTtcbiAgdGhpcy5yID0gbmV3IEJOKG9wdGlvbnMuciwgMTYpO1xuICB0aGlzLnMgPSBuZXcgQk4ob3B0aW9ucy5zLCAxNik7XG4gIGlmIChvcHRpb25zLnJlY292ZXJ5UGFyYW0gPT09IHVuZGVmaW5lZClcbiAgICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBudWxsO1xuICBlbHNlXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gb3B0aW9ucy5yZWNvdmVyeVBhcmFtO1xufVxubW9kdWxlLmV4cG9ydHMgPSBTaWduYXR1cmU7XG5cbmZ1bmN0aW9uIFBvc2l0aW9uKCkge1xuICB0aGlzLnBsYWNlID0gMDtcbn1cblxuZnVuY3Rpb24gZ2V0TGVuZ3RoKGJ1ZiwgcCkge1xuICB2YXIgaW5pdGlhbCA9IGJ1ZltwLnBsYWNlKytdO1xuICBpZiAoIShpbml0aWFsICYgMHg4MCkpIHtcbiAgICByZXR1cm4gaW5pdGlhbDtcbiAgfVxuICB2YXIgb2N0ZXRMZW4gPSBpbml0aWFsICYgMHhmO1xuXG4gIC8vIEluZGVmaW5pdGUgbGVuZ3RoIG9yIG92ZXJmbG93XG4gIGlmIChvY3RldExlbiA9PT0gMCB8fCBvY3RldExlbiA+IDQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgdmFsID0gMDtcbiAgZm9yICh2YXIgaSA9IDAsIG9mZiA9IHAucGxhY2U7IGkgPCBvY3RldExlbjsgaSsrLCBvZmYrKykge1xuICAgIHZhbCA8PD0gODtcbiAgICB2YWwgfD0gYnVmW29mZl07XG4gICAgdmFsID4+Pj0gMDtcbiAgfVxuXG4gIC8vIExlYWRpbmcgemVyb2VzXG4gIGlmICh2YWwgPD0gMHg3Zikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHAucGxhY2UgPSBvZmY7XG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIHJtUGFkZGluZyhidWYpIHtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aCAtIDE7XG4gIHdoaWxlICghYnVmW2ldICYmICEoYnVmW2kgKyAxXSAmIDB4ODApICYmIGkgPCBsZW4pIHtcbiAgICBpKys7XG4gIH1cbiAgaWYgKGkgPT09IDApIHtcbiAgICByZXR1cm4gYnVmO1xuICB9XG4gIHJldHVybiBidWYuc2xpY2UoaSk7XG59XG5cblNpZ25hdHVyZS5wcm90b3R5cGUuX2ltcG9ydERFUiA9IGZ1bmN0aW9uIF9pbXBvcnRERVIoZGF0YSwgZW5jKSB7XG4gIGRhdGEgPSB1dGlscy50b0FycmF5KGRhdGEsIGVuYyk7XG4gIHZhciBwID0gbmV3IFBvc2l0aW9uKCk7XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MzApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgaWYgKGxlbiA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKChsZW4gKyBwLnBsYWNlKSAhPT0gZGF0YS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgwMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcmxlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgaWYgKHJsZW4gPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciByID0gZGF0YS5zbGljZShwLnBsYWNlLCBybGVuICsgcC5wbGFjZSk7XG4gIHAucGxhY2UgKz0gcmxlbjtcbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgwMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgc2xlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgaWYgKHNsZW4gPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChkYXRhLmxlbmd0aCAhPT0gc2xlbiArIHAucGxhY2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHMgPSBkYXRhLnNsaWNlKHAucGxhY2UsIHNsZW4gKyBwLnBsYWNlKTtcbiAgaWYgKHJbMF0gPT09IDApIHtcbiAgICBpZiAoclsxXSAmIDB4ODApIHtcbiAgICAgIHIgPSByLnNsaWNlKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMZWFkaW5nIHplcm9lc1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoc1swXSA9PT0gMCkge1xuICAgIGlmIChzWzFdICYgMHg4MCkge1xuICAgICAgcyA9IHMuc2xpY2UoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExlYWRpbmcgemVyb2VzXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5yID0gbmV3IEJOKHIpO1xuICB0aGlzLnMgPSBuZXcgQk4ocyk7XG4gIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG51bGw7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBjb25zdHJ1Y3RMZW5ndGgoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA8IDB4ODApIHtcbiAgICBhcnIucHVzaChsZW4pO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgb2N0ZXRzID0gMSArIChNYXRoLmxvZyhsZW4pIC8gTWF0aC5MTjIgPj4+IDMpO1xuICBhcnIucHVzaChvY3RldHMgfCAweDgwKTtcbiAgd2hpbGUgKC0tb2N0ZXRzKSB7XG4gICAgYXJyLnB1c2goKGxlbiA+Pj4gKG9jdGV0cyA8PCAzKSkgJiAweGZmKTtcbiAgfVxuICBhcnIucHVzaChsZW4pO1xufVxuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvREVSID0gZnVuY3Rpb24gdG9ERVIoZW5jKSB7XG4gIHZhciByID0gdGhpcy5yLnRvQXJyYXkoKTtcbiAgdmFyIHMgPSB0aGlzLnMudG9BcnJheSgpO1xuXG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHJbMF0gJiAweDgwKVxuICAgIHIgPSBbIDAgXS5jb25jYXQocik7XG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHNbMF0gJiAweDgwKVxuICAgIHMgPSBbIDAgXS5jb25jYXQocyk7XG5cbiAgciA9IHJtUGFkZGluZyhyKTtcbiAgcyA9IHJtUGFkZGluZyhzKTtcblxuICB3aGlsZSAoIXNbMF0gJiYgIShzWzFdICYgMHg4MCkpIHtcbiAgICBzID0gcy5zbGljZSgxKTtcbiAgfVxuICB2YXIgYXJyID0gWyAweDAyIF07XG4gIGNvbnN0cnVjdExlbmd0aChhcnIsIHIubGVuZ3RoKTtcbiAgYXJyID0gYXJyLmNvbmNhdChyKTtcbiAgYXJyLnB1c2goMHgwMik7XG4gIGNvbnN0cnVjdExlbmd0aChhcnIsIHMubGVuZ3RoKTtcbiAgdmFyIGJhY2tIYWxmID0gYXJyLmNvbmNhdChzKTtcbiAgdmFyIHJlcyA9IFsgMHgzMCBdO1xuICBjb25zdHJ1Y3RMZW5ndGgocmVzLCBiYWNrSGFsZi5sZW5ndGgpO1xuICByZXMgPSByZXMuY29uY2F0KGJhY2tIYWxmKTtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZShyZXMsIGVuYyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJ2hhc2guanMnKTtcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuLi9jdXJ2ZXMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIEtleVBhaXIgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG5cbmZ1bmN0aW9uIEVERFNBKGN1cnZlKSB7XG4gIGFzc2VydChjdXJ2ZSA9PT0gJ2VkMjU1MTknLCAnb25seSB0ZXN0ZWQgd2l0aCBlZDI1NTE5IHNvIGZhcicpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFRERTQSkpXG4gICAgcmV0dXJuIG5ldyBFRERTQShjdXJ2ZSk7XG5cbiAgdmFyIGN1cnZlID0gY3VydmVzW2N1cnZlXS5jdXJ2ZTtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLmcgPSBjdXJ2ZS5nO1xuICB0aGlzLmcucHJlY29tcHV0ZShjdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgdGhpcy5wb2ludENsYXNzID0gY3VydmUucG9pbnQoKS5jb25zdHJ1Y3RvcjtcbiAgdGhpcy5lbmNvZGluZ0xlbmd0aCA9IE1hdGguY2VpbChjdXJ2ZS5uLmJpdExlbmd0aCgpIC8gOCk7XG4gIHRoaXMuaGFzaCA9IGhhc2guc2hhNTEyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVERFNBO1xuXG4vKipcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd9IG1lc3NhZ2UgLSBtZXNzYWdlIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfEtleVBhaXJ9IHNlY3JldCAtIHNlY3JldCBieXRlcyBvciBhIGtleXBhaXJcbiogQHJldHVybnMge1NpZ25hdHVyZX0gLSBzaWduYXR1cmVcbiovXG5FRERTQS5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obWVzc2FnZSwgc2VjcmV0KSB7XG4gIG1lc3NhZ2UgPSBwYXJzZUJ5dGVzKG1lc3NhZ2UpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tU2VjcmV0KHNlY3JldCk7XG4gIHZhciByID0gdGhpcy5oYXNoSW50KGtleS5tZXNzYWdlUHJlZml4KCksIG1lc3NhZ2UpO1xuICB2YXIgUiA9IHRoaXMuZy5tdWwocik7XG4gIHZhciBSZW5jb2RlZCA9IHRoaXMuZW5jb2RlUG9pbnQoUik7XG4gIHZhciBzXyA9IHRoaXMuaGFzaEludChSZW5jb2RlZCwga2V5LnB1YkJ5dGVzKCksIG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAubXVsKGtleS5wcml2KCkpO1xuICB2YXIgUyA9IHIuYWRkKHNfKS51bW9kKHRoaXMuY3VydmUubik7XG4gIHJldHVybiB0aGlzLm1ha2VTaWduYXR1cmUoeyBSOiBSLCBTOiBTLCBSZW5jb2RlZDogUmVuY29kZWQgfSk7XG59O1xuXG4vKipcbiogQHBhcmFtIHtBcnJheX0gbWVzc2FnZSAtIG1lc3NhZ2UgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8U2lnbmF0dXJlfSBzaWcgLSBzaWcgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8UG9pbnR8S2V5UGFpcn0gcHViIC0gcHVibGljIGtleVxuKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIHB1YmxpYyBrZXkgbWF0Y2hlcyBzaWcgb2YgbWVzc2FnZVxuKi9cbkVERFNBLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnLCBwdWIpIHtcbiAgbWVzc2FnZSA9IHBhcnNlQnl0ZXMobWVzc2FnZSk7XG4gIHNpZyA9IHRoaXMubWFrZVNpZ25hdHVyZShzaWcpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKHB1Yik7XG4gIHZhciBoID0gdGhpcy5oYXNoSW50KHNpZy5SZW5jb2RlZCgpLCBrZXkucHViQnl0ZXMoKSwgbWVzc2FnZSk7XG4gIHZhciBTRyA9IHRoaXMuZy5tdWwoc2lnLlMoKSk7XG4gIHZhciBScGx1c0FoID0gc2lnLlIoKS5hZGQoa2V5LnB1YigpLm11bChoKSk7XG4gIHJldHVybiBScGx1c0FoLmVxKFNHKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5oYXNoSW50ID0gZnVuY3Rpb24gaGFzaEludCgpIHtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgaGFzaC51cGRhdGUoYXJndW1lbnRzW2ldKTtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShoYXNoLmRpZ2VzdCgpKS51bW9kKHRoaXMuY3VydmUubik7XG59O1xuXG5FRERTQS5wcm90b3R5cGUua2V5RnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5rZXlGcm9tU2VjcmV0ID0gZnVuY3Rpb24ga2V5RnJvbVNlY3JldChzZWNyZXQpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVNlY3JldCh0aGlzLCBzZWNyZXQpO1xufTtcblxuRUREU0EucHJvdG90eXBlLm1ha2VTaWduYXR1cmUgPSBmdW5jdGlvbiBtYWtlU2lnbmF0dXJlKHNpZykge1xuICBpZiAoc2lnIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBzaWc7XG4gIHJldHVybiBuZXcgU2lnbmF0dXJlKHRoaXMsIHNpZyk7XG59O1xuXG4vKipcbiogKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtam9zZWZzc29uLWVkZHNhLWVkMjU1MTktMDMjc2VjdGlvbi01LjJcbipcbiogRUREU0EgZGVmaW5lcyBtZXRob2RzIGZvciBlbmNvZGluZyBhbmQgZGVjb2RpbmcgcG9pbnRzIGFuZCBpbnRlZ2Vycy4gVGhlc2UgYXJlXG4qIGhlbHBlciBjb252ZW5pZW5jZSBtZXRob2RzLCB0aGF0IHBhc3MgYWxvbmcgdG8gdXRpbGl0eSBmdW5jdGlvbnMgaW1wbGllZFxuKiBwYXJhbWV0ZXJzLlxuKlxuKi9cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVQb2ludCA9IGZ1bmN0aW9uIGVuY29kZVBvaW50KHBvaW50KSB7XG4gIHZhciBlbmMgPSBwb2ludC5nZXRZKCkudG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbiAgZW5jW3RoaXMuZW5jb2RpbmdMZW5ndGggLSAxXSB8PSBwb2ludC5nZXRYKCkuaXNPZGQoKSA/IDB4ODAgOiAwO1xuICByZXR1cm4gZW5jO1xufTtcblxuRUREU0EucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMpIHtcbiAgYnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzKGJ5dGVzKTtcblxuICB2YXIgbGFzdEl4ID0gYnl0ZXMubGVuZ3RoIC0gMTtcbiAgdmFyIG5vcm1lZCA9IGJ5dGVzLnNsaWNlKDAsIGxhc3RJeCkuY29uY2F0KGJ5dGVzW2xhc3RJeF0gJiB+MHg4MCk7XG4gIHZhciB4SXNPZGQgPSAoYnl0ZXNbbGFzdEl4XSAmIDB4ODApICE9PSAwO1xuXG4gIHZhciB5ID0gdXRpbHMuaW50RnJvbUxFKG5vcm1lZCk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50RnJvbVkoeSwgeElzT2RkKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVJbnQgPSBmdW5jdGlvbiBlbmNvZGVJbnQobnVtKSB7XG4gIHJldHVybiBudW0udG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5kZWNvZGVJbnQgPSBmdW5jdGlvbiBkZWNvZGVJbnQoYnl0ZXMpIHtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShieXRlcyk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuaXNQb2ludCA9IGZ1bmN0aW9uIGlzUG9pbnQodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiB0aGlzLnBvaW50Q2xhc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcbnZhciBjYWNoZWRQcm9wZXJ0eSA9IHV0aWxzLmNhY2hlZFByb3BlcnR5O1xuXG4vKipcbiogQHBhcmFtIHtFRERTQX0gZWRkc2EgLSBpbnN0YW5jZVxuKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gcHVibGljL3ByaXZhdGUga2V5IHBhcmFtZXRlcnNcbipcbiogQHBhcmFtIHtBcnJheTxCeXRlPn0gW3BhcmFtcy5zZWNyZXRdIC0gc2VjcmV0IHNlZWQgYnl0ZXNcbiogQHBhcmFtIHtQb2ludH0gW3BhcmFtcy5wdWJdIC0gcHVibGljIGtleSBwb2ludCAoYWthIGBBYCBpbiBlZGRzYSB0ZXJtcylcbiogQHBhcmFtIHtBcnJheTxCeXRlPn0gW3BhcmFtcy5wdWJdIC0gcHVibGljIGtleSBwb2ludCBlbmNvZGVkIGFzIGJ5dGVzXG4qXG4qL1xuZnVuY3Rpb24gS2V5UGFpcihlZGRzYSwgcGFyYW1zKSB7XG4gIHRoaXMuZWRkc2EgPSBlZGRzYTtcbiAgdGhpcy5fc2VjcmV0ID0gcGFyc2VCeXRlcyhwYXJhbXMuc2VjcmV0KTtcbiAgaWYgKGVkZHNhLmlzUG9pbnQocGFyYW1zLnB1YikpXG4gICAgdGhpcy5fcHViID0gcGFyYW1zLnB1YjtcbiAgZWxzZVxuICAgIHRoaXMuX3B1YkJ5dGVzID0gcGFyc2VCeXRlcyhwYXJhbXMucHViKTtcbn1cblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlZGRzYSwgcHViKSB7XG4gIGlmIChwdWIgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBwdWI7XG4gIHJldHVybiBuZXcgS2V5UGFpcihlZGRzYSwgeyBwdWI6IHB1YiB9KTtcbn07XG5cbktleVBhaXIuZnJvbVNlY3JldCA9IGZ1bmN0aW9uIGZyb21TZWNyZXQoZWRkc2EsIHNlY3JldCkge1xuICBpZiAoc2VjcmV0IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gc2VjcmV0O1xuICByZXR1cm4gbmV3IEtleVBhaXIoZWRkc2EsIHsgc2VjcmV0OiBzZWNyZXQgfSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5zZWNyZXQgPSBmdW5jdGlvbiBzZWNyZXQoKSB7XG4gIHJldHVybiB0aGlzLl9zZWNyZXQ7XG59O1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViQnl0ZXMnLCBmdW5jdGlvbiBwdWJCeXRlcygpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlUG9pbnQodGhpcy5wdWIoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3B1YicsIGZ1bmN0aW9uIHB1YigpIHtcbiAgaWYgKHRoaXMuX3B1YkJ5dGVzKVxuICAgIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZVBvaW50KHRoaXMuX3B1YkJ5dGVzKTtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZy5tdWwodGhpcy5wcml2KCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwcml2Qnl0ZXMnLCBmdW5jdGlvbiBwcml2Qnl0ZXMoKSB7XG4gIHZhciBlZGRzYSA9IHRoaXMuZWRkc2E7XG4gIHZhciBoYXNoID0gdGhpcy5oYXNoKCk7XG4gIHZhciBsYXN0SXggPSBlZGRzYS5lbmNvZGluZ0xlbmd0aCAtIDE7XG5cbiAgdmFyIGEgPSBoYXNoLnNsaWNlKDAsIGVkZHNhLmVuY29kaW5nTGVuZ3RoKTtcbiAgYVswXSAmPSAyNDg7XG4gIGFbbGFzdEl4XSAmPSAxMjc7XG4gIGFbbGFzdEl4XSB8PSA2NDtcblxuICByZXR1cm4gYTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHJpdicsIGZ1bmN0aW9uIHByaXYoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLnByaXZCeXRlcygpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAnaGFzaCcsIGZ1bmN0aW9uIGhhc2goKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmhhc2goKS51cGRhdGUodGhpcy5zZWNyZXQoKSkuZGlnZXN0KCk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ21lc3NhZ2VQcmVmaXgnLCBmdW5jdGlvbiBtZXNzYWdlUHJlZml4KCkge1xuICByZXR1cm4gdGhpcy5oYXNoKCkuc2xpY2UodGhpcy5lZGRzYS5lbmNvZGluZ0xlbmd0aCk7XG59KTtcblxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obWVzc2FnZSkge1xuICBhc3NlcnQodGhpcy5fc2VjcmV0LCAnS2V5UGFpciBjYW4gb25seSB2ZXJpZnknKTtcbiAgcmV0dXJuIHRoaXMuZWRkc2Euc2lnbihtZXNzYWdlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlLCBzaWcpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EudmVyaWZ5KG1lc3NhZ2UsIHNpZywgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRTZWNyZXQgPSBmdW5jdGlvbiBnZXRTZWNyZXQoZW5jKSB7XG4gIGFzc2VydCh0aGlzLl9zZWNyZXQsICdLZXlQYWlyIGlzIHB1YmxpYyBvbmx5Jyk7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5zZWNyZXQoKSwgZW5jKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhlbmMpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnB1YkJ5dGVzKCksIGVuYyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleVBhaXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcbnZhciBjYWNoZWRQcm9wZXJ0eSA9IHV0aWxzLmNhY2hlZFByb3BlcnR5O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xuXG4vKipcbiogQHBhcmFtIHtFRERTQX0gZWRkc2EgLSBlZGRzYSBpbnN0YW5jZVxuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxPYmplY3R9IHNpZyAtXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fFBvaW50fSBbc2lnLlJdIC0gUiBwb2ludCBhcyBQb2ludCBvciBieXRlc1xuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxibn0gW3NpZy5TXSAtIFMgc2NhbGFyIGFzIGJuIG9yIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fSBbc2lnLlJlbmNvZGVkXSAtIFIgcG9pbnQgZW5jb2RlZFxuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPn0gW3NpZy5TZW5jb2RlZF0gLSBTIHNjYWxhciBlbmNvZGVkXG4qL1xuZnVuY3Rpb24gU2lnbmF0dXJlKGVkZHNhLCBzaWcpIHtcbiAgdGhpcy5lZGRzYSA9IGVkZHNhO1xuXG4gIGlmICh0eXBlb2Ygc2lnICE9PSAnb2JqZWN0JylcbiAgICBzaWcgPSBwYXJzZUJ5dGVzKHNpZyk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoc2lnKSkge1xuICAgIHNpZyA9IHtcbiAgICAgIFI6IHNpZy5zbGljZSgwLCBlZGRzYS5lbmNvZGluZ0xlbmd0aCksXG4gICAgICBTOiBzaWcuc2xpY2UoZWRkc2EuZW5jb2RpbmdMZW5ndGgpXG4gICAgfTtcbiAgfVxuXG4gIGFzc2VydChzaWcuUiAmJiBzaWcuUywgJ1NpZ25hdHVyZSB3aXRob3V0IFIgb3IgUycpO1xuXG4gIGlmIChlZGRzYS5pc1BvaW50KHNpZy5SKSlcbiAgICB0aGlzLl9SID0gc2lnLlI7XG4gIGlmIChzaWcuUyBpbnN0YW5jZW9mIEJOKVxuICAgIHRoaXMuX1MgPSBzaWcuUztcblxuICB0aGlzLl9SZW5jb2RlZCA9IEFycmF5LmlzQXJyYXkoc2lnLlIpID8gc2lnLlIgOiBzaWcuUmVuY29kZWQ7XG4gIHRoaXMuX1NlbmNvZGVkID0gQXJyYXkuaXNBcnJheShzaWcuUykgPyBzaWcuUyA6IHNpZy5TZW5jb2RlZDtcbn1cblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUycsIGZ1bmN0aW9uIFMoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLlNlbmNvZGVkKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1InLCBmdW5jdGlvbiBSKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVQb2ludCh0aGlzLlJlbmNvZGVkKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1JlbmNvZGVkJywgZnVuY3Rpb24gUmVuY29kZWQoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZVBvaW50KHRoaXMuUigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdTZW5jb2RlZCcsIGZ1bmN0aW9uIFNlbmNvZGVkKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVJbnQodGhpcy5TKCkpO1xufSk7XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9CeXRlcyA9IGZ1bmN0aW9uIHRvQnl0ZXMoKSB7XG4gIHJldHVybiB0aGlzLlJlbmNvZGVkKCkuY29uY2F0KHRoaXMuU2VuY29kZWQoKSk7XG59O1xuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvSGV4ID0gZnVuY3Rpb24gdG9IZXgoKSB7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy50b0J5dGVzKCksICdoZXgnKS50b1VwcGVyQ2FzZSgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaWduYXR1cmU7XG4iLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL2FzbjEuanNcbi8vIEZlZG9yLCB5b3UgYXJlIGFtYXppbmcuXG4ndXNlIHN0cmljdCdcblxudmFyIGFzbjEgPSByZXF1aXJlKCdhc24xLmpzJylcblxuZXhwb3J0cy5jZXJ0aWZpY2F0ZSA9IHJlcXVpcmUoJy4vY2VydGlmaWNhdGUnKVxuXG52YXIgUlNBUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdSU0FQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdtb2R1bHVzJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0V4cG9uZW50JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZhdGVFeHBvbmVudCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcmltZTEnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpbWUyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2V4cG9uZW50MScpLmludCgpLFxuICAgIHRoaXMua2V5KCdleHBvbmVudDInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnY29lZmZpY2llbnQnKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5SU0FQcml2YXRlS2V5ID0gUlNBUHJpdmF0ZUtleVxuXG52YXIgUlNBUHVibGljS2V5ID0gYXNuMS5kZWZpbmUoJ1JTQVB1YmxpY0tleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ21vZHVsdXMnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHVibGljRXhwb25lbnQnKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5SU0FQdWJsaWNLZXkgPSBSU0FQdWJsaWNLZXlcblxudmFyIFB1YmxpY0tleSA9IGFzbjEuZGVmaW5lKCdTdWJqZWN0UHVibGljS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleScpLmJpdHN0cigpXG4gIClcbn0pXG5leHBvcnRzLlB1YmxpY0tleSA9IFB1YmxpY0tleVxuXG52YXIgQWxnb3JpdGhtSWRlbnRpZmllciA9IGFzbjEuZGVmaW5lKCdBbGdvcml0aG1JZGVudGlmaWVyJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgnbm9uZScpLm51bGxfKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnY3VydmUnKS5vYmppZCgpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtcycpLnNlcSgpLm9iaihcbiAgICAgIHRoaXMua2V5KCdwJykuaW50KCksXG4gICAgICB0aGlzLmtleSgncScpLmludCgpLFxuICAgICAgdGhpcy5rZXkoJ2cnKS5pbnQoKVxuICAgICkub3B0aW9uYWwoKVxuICApXG59KVxuXG52YXIgUHJpdmF0ZUtleUluZm8gPSBhc24xLmRlZmluZSgnUHJpdmF0ZUtleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFByaXZhdGVLZXknKS5vY3RzdHIoKVxuICApXG59KVxuZXhwb3J0cy5Qcml2YXRlS2V5ID0gUHJpdmF0ZUtleUluZm9cbnZhciBFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbyA9IGFzbjEuZGVmaW5lKCdFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnNlcSgpLm9iaihcbiAgICAgIHRoaXMua2V5KCdpZCcpLm9iamlkKCksXG4gICAgICB0aGlzLmtleSgnZGVjcnlwdCcpLnNlcSgpLm9iaihcbiAgICAgICAgdGhpcy5rZXkoJ2tkZScpLnNlcSgpLm9iaihcbiAgICAgICAgICB0aGlzLmtleSgnaWQnKS5vYmppZCgpLFxuICAgICAgICAgIHRoaXMua2V5KCdrZGVwYXJhbXMnKS5zZXEoKS5vYmooXG4gICAgICAgICAgICB0aGlzLmtleSgnc2FsdCcpLm9jdHN0cigpLFxuICAgICAgICAgICAgdGhpcy5rZXkoJ2l0ZXJzJykuaW50KClcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIHRoaXMua2V5KCdjaXBoZXInKS5zZXEoKS5vYmooXG4gICAgICAgICAgdGhpcy5rZXkoJ2FsZ28nKS5vYmppZCgpLFxuICAgICAgICAgIHRoaXMua2V5KCdpdicpLm9jdHN0cigpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHJpdmF0ZUtleScpLm9jdHN0cigpXG4gIClcbn0pXG5cbmV4cG9ydHMuRW5jcnlwdGVkUHJpdmF0ZUtleSA9IEVuY3J5cHRlZFByaXZhdGVLZXlJbmZvXG5cbnZhciBEU0FQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0RTQVByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3AnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncScpLmludCgpLFxuICAgIHRoaXMua2V5KCdnJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1Yl9rZXknKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdl9rZXknKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5EU0FQcml2YXRlS2V5ID0gRFNBUHJpdmF0ZUtleVxuXG5leHBvcnRzLkRTQXBhcmFtID0gYXNuMS5kZWZpbmUoJ0RTQXBhcmFtJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmludCgpXG59KVxuXG52YXIgRUNQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0VDUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdmF0ZUtleScpLm9jdHN0cigpLFxuICAgIHRoaXMua2V5KCdwYXJhbWV0ZXJzJykub3B0aW9uYWwoKS5leHBsaWNpdCgwKS51c2UoRUNQYXJhbWV0ZXJzKSxcbiAgICB0aGlzLmtleSgncHVibGljS2V5Jykub3B0aW9uYWwoKS5leHBsaWNpdCgxKS5iaXRzdHIoKVxuICApXG59KVxuZXhwb3J0cy5FQ1ByaXZhdGVLZXkgPSBFQ1ByaXZhdGVLZXlcblxudmFyIEVDUGFyYW1ldGVycyA9IGFzbjEuZGVmaW5lKCdFQ1BhcmFtZXRlcnMnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICBuYW1lZEN1cnZlOiB0aGlzLm9iamlkKClcbiAgfSlcbn0pXG5cbmV4cG9ydHMuc2lnbmF0dXJlID0gYXNuMS5kZWZpbmUoJ3NpZ25hdHVyZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3InKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncycpLmludCgpXG4gIClcbn0pXG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGVuY29kZXJzID0gcmVxdWlyZSgnLi9lbmNvZGVycycpO1xuY29uc3QgZGVjb2RlcnMgPSByZXF1aXJlKCcuL2RlY29kZXJzJyk7XG5jb25zdCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmNvbnN0IGFwaSA9IGV4cG9ydHM7XG5cbmFwaS5kZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUobmFtZSwgYm9keSkge1xuICByZXR1cm4gbmV3IEVudGl0eShuYW1lLCBib2R5KTtcbn07XG5cbmZ1bmN0aW9uIEVudGl0eShuYW1lLCBib2R5KSB7XG4gIHRoaXMubmFtZSA9IG5hbWU7XG4gIHRoaXMuYm9keSA9IGJvZHk7XG5cbiAgdGhpcy5kZWNvZGVycyA9IHt9O1xuICB0aGlzLmVuY29kZXJzID0ge307XG59XG5cbkVudGl0eS5wcm90b3R5cGUuX2NyZWF0ZU5hbWVkID0gZnVuY3Rpb24gY3JlYXRlTmFtZWQoQmFzZSkge1xuICBjb25zdCBuYW1lID0gdGhpcy5uYW1lO1xuXG4gIGZ1bmN0aW9uIEdlbmVyYXRlZChlbnRpdHkpIHtcbiAgICB0aGlzLl9pbml0TmFtZWQoZW50aXR5LCBuYW1lKTtcbiAgfVxuICBpbmhlcml0cyhHZW5lcmF0ZWQsIEJhc2UpO1xuICBHZW5lcmF0ZWQucHJvdG90eXBlLl9pbml0TmFtZWQgPSBmdW5jdGlvbiBfaW5pdE5hbWVkKGVudGl0eSwgbmFtZSkge1xuICAgIEJhc2UuY2FsbCh0aGlzLCBlbnRpdHksIG5hbWUpO1xuICB9O1xuXG4gIHJldHVybiBuZXcgR2VuZXJhdGVkKHRoaXMpO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5fZ2V0RGVjb2RlciA9IGZ1bmN0aW9uIF9nZXREZWNvZGVyKGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ2Rlcic7XG4gIC8vIExhemlseSBjcmVhdGUgZGVjb2RlclxuICBpZiAoIXRoaXMuZGVjb2RlcnMuaGFzT3duUHJvcGVydHkoZW5jKSlcbiAgICB0aGlzLmRlY29kZXJzW2VuY10gPSB0aGlzLl9jcmVhdGVOYW1lZChkZWNvZGVyc1tlbmNdKTtcbiAgcmV0dXJuIHRoaXMuZGVjb2RlcnNbZW5jXTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIGVuYywgb3B0aW9ucykge1xuICByZXR1cm4gdGhpcy5fZ2V0RGVjb2RlcihlbmMpLmRlY29kZShkYXRhLCBvcHRpb25zKTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2dldEVuY29kZXIgPSBmdW5jdGlvbiBfZ2V0RW5jb2RlcihlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICdkZXInO1xuICAvLyBMYXppbHkgY3JlYXRlIGVuY29kZXJcbiAgaWYgKCF0aGlzLmVuY29kZXJzLmhhc093blByb3BlcnR5KGVuYykpXG4gICAgdGhpcy5lbmNvZGVyc1tlbmNdID0gdGhpcy5fY3JlYXRlTmFtZWQoZW5jb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmVuY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCBlbmMsIC8qIGludGVybmFsICovIHJlcG9ydGVyKSB7XG4gIHJldHVybiB0aGlzLl9nZXRFbmNvZGVyKGVuYykuZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuY29uc3QgREVSRW5jb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5cbmZ1bmN0aW9uIFBFTUVuY29kZXIoZW50aXR5KSB7XG4gIERFUkVuY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB0aGlzLmVuYyA9ICdwZW0nO1xufVxuaW5oZXJpdHMoUEVNRW5jb2RlciwgREVSRW5jb2Rlcik7XG5tb2R1bGUuZXhwb3J0cyA9IFBFTUVuY29kZXI7XG5cblBFTUVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCBvcHRpb25zKSB7XG4gIGNvbnN0IGJ1ZiA9IERFUkVuY29kZXIucHJvdG90eXBlLmVuY29kZS5jYWxsKHRoaXMsIGRhdGEpO1xuXG4gIGNvbnN0IHAgPSBidWYudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICBjb25zdCBvdXQgPSBbICctLS0tLUJFR0lOICcgKyBvcHRpb25zLmxhYmVsICsgJy0tLS0tJyBdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHAubGVuZ3RoOyBpICs9IDY0KVxuICAgIG91dC5wdXNoKHAuc2xpY2UoaSwgaSArIDY0KSk7XG4gIG91dC5wdXNoKCctLS0tLUVORCAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLScpO1xuICByZXR1cm4gb3V0LmpvaW4oJ1xcbicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuY29uc3QgQnVmZmVyID0gcmVxdWlyZSgnc2FmZXItYnVmZmVyJykuQnVmZmVyO1xuXG5jb25zdCBERVJEZWNvZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcblxuZnVuY3Rpb24gUEVNRGVjb2RlcihlbnRpdHkpIHtcbiAgREVSRGVjb2Rlci5jYWxsKHRoaXMsIGVudGl0eSk7XG4gIHRoaXMuZW5jID0gJ3BlbSc7XG59XG5pbmhlcml0cyhQRU1EZWNvZGVyLCBERVJEZWNvZGVyKTtcbm1vZHVsZS5leHBvcnRzID0gUEVNRGVjb2RlcjtcblxuUEVNRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgY29uc3QgbGluZXMgPSBkYXRhLnRvU3RyaW5nKCkuc3BsaXQoL1tcXHJcXG5dKy9nKTtcblxuICBjb25zdCBsYWJlbCA9IG9wdGlvbnMubGFiZWwudG9VcHBlckNhc2UoKTtcblxuICBjb25zdCByZSA9IC9eLS0tLS0oQkVHSU58RU5EKSAoW14tXSspLS0tLS0kLztcbiAgbGV0IHN0YXJ0ID0gLTE7XG4gIGxldCBlbmQgPSAtMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG1hdGNoID0gbGluZXNbaV0ubWF0Y2gocmUpO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKG1hdGNoWzJdICE9PSBsYWJlbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnQkVHSU4nKVxuICAgICAgICBicmVhaztcbiAgICAgIHN0YXJ0ID0gaTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnRU5EJylcbiAgICAgICAgYnJlYWs7XG4gICAgICBlbmQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChzdGFydCA9PT0gLTEgfHwgZW5kID09PSAtMSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BFTSBzZWN0aW9uIG5vdCBmb3VuZCBmb3I6ICcgKyBsYWJlbCk7XG5cbiAgY29uc3QgYmFzZTY0ID0gbGluZXMuc2xpY2Uoc3RhcnQgKyAxLCBlbmQpLmpvaW4oJycpO1xuICAvLyBSZW1vdmUgZXhjZXNzaXZlIHN5bWJvbHNcbiAgYmFzZTY0LnJlcGxhY2UoL1teYS16MC05Ky89XSsvZ2ksICcnKTtcblxuICBjb25zdCBpbnB1dCA9IEJ1ZmZlci5mcm9tKGJhc2U2NCwgJ2Jhc2U2NCcpO1xuICByZXR1cm4gREVSRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlLmNhbGwodGhpcywgaW5wdXQsIG9wdGlvbnMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgYmFzZSA9IGV4cG9ydHM7XG5cbmJhc2UuUmVwb3J0ZXIgPSByZXF1aXJlKCcuL3JlcG9ydGVyJykuUmVwb3J0ZXI7XG5iYXNlLkRlY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuL2J1ZmZlcicpLkRlY29kZXJCdWZmZXI7XG5iYXNlLkVuY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuL2J1ZmZlcicpLkVuY29kZXJCdWZmZXI7XG5iYXNlLk5vZGUgPSByZXF1aXJlKCcuL25vZGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY29uc3RhbnRzID0gZXhwb3J0cztcblxuLy8gSGVscGVyXG5jb25zdGFudHMuX3JldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKG1hcCkge1xuICBjb25zdCByZXMgPSB7fTtcblxuICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgLy8gQ29udmVydCBrZXkgdG8gaW50ZWdlciBpZiBpdCBpcyBzdHJpbmdpZmllZFxuICAgIGlmICgoa2V5IHwgMCkgPT0ga2V5KVxuICAgICAga2V5ID0ga2V5IHwgMDtcblxuICAgIGNvbnN0IHZhbHVlID0gbWFwW2tleV07XG4gICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbmNvbnN0YW50cy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuIiwiLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vUmFudGFuZW4vbm9kZS1kdGxzL2Jsb2IvMjVhN2RjODYxYmRhMzhjZmVhYzkzYTcyMzUwMGVlYTRmMGFjMmU4Ni9DZXJ0aWZpY2F0ZS5qc1xuLy8gdGhhbmtzIHRvIEBSYW50YW5lblxuXG4ndXNlIHN0cmljdCdcblxudmFyIGFzbiA9IHJlcXVpcmUoJ2FzbjEuanMnKVxuXG52YXIgVGltZSA9IGFzbi5kZWZpbmUoJ1RpbWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICB1dGNUaW1lOiB0aGlzLnV0Y3RpbWUoKSxcbiAgICBnZW5lcmFsVGltZTogdGhpcy5nZW50aW1lKClcbiAgfSlcbn0pXG5cbnZhciBBdHRyaWJ1dGVUeXBlVmFsdWUgPSBhc24uZGVmaW5lKCdBdHRyaWJ1dGVUeXBlVmFsdWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd0eXBlJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgndmFsdWUnKS5hbnkoKVxuICApXG59KVxuXG52YXIgQWxnb3JpdGhtSWRlbnRpZmllciA9IGFzbi5kZWZpbmUoJ0FsZ29yaXRobUlkZW50aWZpZXInLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCdwYXJhbWV0ZXJzJykub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnY3VydmUnKS5vYmppZCgpLm9wdGlvbmFsKClcbiAgKVxufSlcblxudmFyIFN1YmplY3RQdWJsaWNLZXlJbmZvID0gYXNuLmRlZmluZSgnU3ViamVjdFB1YmxpY0tleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQdWJsaWNLZXknKS5iaXRzdHIoKVxuICApXG59KVxuXG52YXIgUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZSA9IGFzbi5kZWZpbmUoJ1JlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2V0b2YoQXR0cmlidXRlVHlwZVZhbHVlKVxufSlcblxudmFyIFJETlNlcXVlbmNlID0gYXNuLmRlZmluZSgnUkROU2VxdWVuY2UnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2Vxb2YoUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZSlcbn0pXG5cbnZhciBOYW1lID0gYXNuLmRlZmluZSgnTmFtZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaG9pY2Uoe1xuICAgIHJkblNlcXVlbmNlOiB0aGlzLnVzZShSRE5TZXF1ZW5jZSlcbiAgfSlcbn0pXG5cbnZhciBWYWxpZGl0eSA9IGFzbi5kZWZpbmUoJ1ZhbGlkaXR5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnbm90QmVmb3JlJykudXNlKFRpbWUpLFxuICAgIHRoaXMua2V5KCdub3RBZnRlcicpLnVzZShUaW1lKVxuICApXG59KVxuXG52YXIgRXh0ZW5zaW9uID0gYXNuLmRlZmluZSgnRXh0ZW5zaW9uJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnZXh0bklEJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgnY3JpdGljYWwnKS5ib29sKCkuZGVmKGZhbHNlKSxcbiAgICB0aGlzLmtleSgnZXh0blZhbHVlJykub2N0c3RyKClcbiAgKVxufSlcblxudmFyIFRCU0NlcnRpZmljYXRlID0gYXNuLmRlZmluZSgnVEJTQ2VydGlmaWNhdGUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuZXhwbGljaXQoMCkuaW50KCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnc2VyaWFsTnVtYmVyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3NpZ25hdHVyZScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnaXNzdWVyJykudXNlKE5hbWUpLFxuICAgIHRoaXMua2V5KCd2YWxpZGl0eScpLnVzZShWYWxpZGl0eSksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3QnKS51c2UoTmFtZSksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQdWJsaWNLZXlJbmZvJykudXNlKFN1YmplY3RQdWJsaWNLZXlJbmZvKSxcbiAgICB0aGlzLmtleSgnaXNzdWVyVW5pcXVlSUQnKS5pbXBsaWNpdCgxKS5iaXRzdHIoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0VW5pcXVlSUQnKS5pbXBsaWNpdCgyKS5iaXRzdHIoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdleHRlbnNpb25zJykuZXhwbGljaXQoMykuc2Vxb2YoRXh0ZW5zaW9uKS5vcHRpb25hbCgpXG4gIClcbn0pXG5cbnZhciBYNTA5Q2VydGlmaWNhdGUgPSBhc24uZGVmaW5lKCdYNTA5Q2VydGlmaWNhdGUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd0YnNDZXJ0aWZpY2F0ZScpLnVzZShUQlNDZXJ0aWZpY2F0ZSksXG4gICAgdGhpcy5rZXkoJ3NpZ25hdHVyZUFsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlVmFsdWUnKS5iaXRzdHIoKVxuICApXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IFg1MDlDZXJ0aWZpY2F0ZVxuIiwiLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hcGF0aWwvcGVtc3RyaXBcbnZhciBmaW5kUHJvYyA9IC9Qcm9jLVR5cGU6IDQsRU5DUllQVEVEW1xcblxccl0rREVLLUluZm86IEFFUy0oKD86MTI4KXwoPzoxOTIpfCg/OjI1NikpLUNCQywoWzAtOUEtSF0rKVtcXG5cXHJdKyhbMC05QS16XFxuXFxyKy89XSspW1xcblxccl0rL21cbnZhciBzdGFydFJlZ2V4ID0gL14tLS0tLUJFR0lOICgoPzouKj8gS0VZKXxDRVJUSUZJQ0FURSktLS0tLS9tXG52YXIgZnVsbFJlZ2V4ID0gL14tLS0tLUJFR0lOICgoPzouKj8gS0VZKXxDRVJUSUZJQ0FURSktLS0tLShbMC05QS16XFxuXFxyKy89XSspLS0tLS1FTkQgXFwxLS0tLS0kL21cbnZhciBldnAgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2tleSwgcGFzc3dvcmQpIHtcbiAgdmFyIGtleSA9IG9rZXkudG9TdHJpbmcoKVxuICB2YXIgbWF0Y2ggPSBrZXkubWF0Y2goZmluZFByb2MpXG4gIHZhciBkZWNyeXB0ZWRcbiAgaWYgKCFtYXRjaCkge1xuICAgIHZhciBtYXRjaDIgPSBrZXkubWF0Y2goZnVsbFJlZ2V4KVxuICAgIGRlY3J5cHRlZCA9IEJ1ZmZlci5mcm9tKG1hdGNoMlsyXS5yZXBsYWNlKC9bXFxyXFxuXS9nLCAnJyksICdiYXNlNjQnKVxuICB9IGVsc2Uge1xuICAgIHZhciBzdWl0ZSA9ICdhZXMnICsgbWF0Y2hbMV1cbiAgICB2YXIgaXYgPSBCdWZmZXIuZnJvbShtYXRjaFsyXSwgJ2hleCcpXG4gICAgdmFyIGNpcGhlclRleHQgPSBCdWZmZXIuZnJvbShtYXRjaFszXS5yZXBsYWNlKC9bXFxyXFxuXS9nLCAnJyksICdiYXNlNjQnKVxuICAgIHZhciBjaXBoZXJLZXkgPSBldnAocGFzc3dvcmQsIGl2LnNsaWNlKDAsIDgpLCBwYXJzZUludChtYXRjaFsxXSwgMTApKS5rZXlcbiAgICB2YXIgb3V0ID0gW11cbiAgICB2YXIgY2lwaGVyID0gY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBjaXBoZXJLZXksIGl2KVxuICAgIG91dC5wdXNoKGNpcGhlci51cGRhdGUoY2lwaGVyVGV4dCkpXG4gICAgb3V0LnB1c2goY2lwaGVyLmZpbmFsKCkpXG4gICAgZGVjcnlwdGVkID0gQnVmZmVyLmNvbmNhdChvdXQpXG4gIH1cbiAgdmFyIHRhZyA9IGtleS5tYXRjaChzdGFydFJlZ2V4KVsxXVxuICByZXR1cm4ge1xuICAgIHRhZzogdGFnLFxuICAgIGRhdGE6IGRlY3J5cHRlZFxuICB9XG59XG4iLCIvLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWNcbnZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuL2N1cnZlcy5qc29uJylcblxuZnVuY3Rpb24gdmVyaWZ5IChzaWcsIGhhc2gsIGtleSwgc2lnblR5cGUsIHRhZykge1xuICB2YXIgcHViID0gcGFyc2VLZXlzKGtleSlcbiAgaWYgKHB1Yi50eXBlID09PSAnZWMnKSB7XG4gICAgLy8gcnNhIGtleXMgY2FuIGJlIGludGVycHJldGVkIGFzIGVjZHNhIG9uZXMgaW4gb3BlbnNzbFxuICAgIGlmIChzaWduVHlwZSAhPT0gJ2VjZHNhJyAmJiBzaWduVHlwZSAhPT0gJ2VjZHNhL3JzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJylcbiAgICByZXR1cm4gZWNWZXJpZnkoc2lnLCBoYXNoLCBwdWIpXG4gIH0gZWxzZSBpZiAocHViLnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIHJldHVybiBkc2FWZXJpZnkoc2lnLCBoYXNoLCBwdWIpXG4gIH0gZWxzZSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAncnNhJyAmJiBzaWduVHlwZSAhPT0gJ2VjZHNhL3JzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJylcbiAgfVxuICBoYXNoID0gQnVmZmVyLmNvbmNhdChbdGFnLCBoYXNoXSlcbiAgdmFyIGxlbiA9IHB1Yi5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgcGFkID0gWzFdXG4gIHZhciBwYWROdW0gPSAwXG4gIHdoaWxlIChoYXNoLmxlbmd0aCArIHBhZC5sZW5ndGggKyAyIDwgbGVuKSB7XG4gICAgcGFkLnB1c2goMHhmZilcbiAgICBwYWROdW0rK1xuICB9XG4gIHBhZC5wdXNoKDB4MDApXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGhhc2gubGVuZ3RoKSB7XG4gICAgcGFkLnB1c2goaGFzaFtpXSlcbiAgfVxuICBwYWQgPSBCdWZmZXIuZnJvbShwYWQpXG4gIHZhciByZWQgPSBCTi5tb250KHB1Yi5tb2R1bHVzKVxuICBzaWcgPSBuZXcgQk4oc2lnKS50b1JlZChyZWQpXG5cbiAgc2lnID0gc2lnLnJlZFBvdyhuZXcgQk4ocHViLnB1YmxpY0V4cG9uZW50KSlcbiAgc2lnID0gQnVmZmVyLmZyb20oc2lnLmZyb21SZWQoKS50b0FycmF5KCkpXG4gIHZhciBvdXQgPSBwYWROdW0gPCA4ID8gMSA6IDBcbiAgbGVuID0gTWF0aC5taW4oc2lnLmxlbmd0aCwgcGFkLmxlbmd0aClcbiAgaWYgKHNpZy5sZW5ndGggIT09IHBhZC5sZW5ndGgpIG91dCA9IDFcblxuICBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikgb3V0IHw9IHNpZ1tpXSBeIHBhZFtpXVxuICByZXR1cm4gb3V0ID09PSAwXG59XG5cbmZ1bmN0aW9uIGVjVmVyaWZ5IChzaWcsIGhhc2gsIHB1Yikge1xuICB2YXIgY3VydmVJZCA9IGN1cnZlc1twdWIuZGF0YS5hbGdvcml0aG0uY3VydmUuam9pbignLicpXVxuICBpZiAoIWN1cnZlSWQpIHRocm93IG5ldyBFcnJvcigndW5rbm93biBjdXJ2ZSAnICsgcHViLmRhdGEuYWxnb3JpdGhtLmN1cnZlLmpvaW4oJy4nKSlcblxuICB2YXIgY3VydmUgPSBuZXcgRUMoY3VydmVJZClcbiAgdmFyIHB1YmtleSA9IHB1Yi5kYXRhLnN1YmplY3RQcml2YXRlS2V5LmRhdGFcblxuICByZXR1cm4gY3VydmUudmVyaWZ5KGhhc2gsIHNpZywgcHVia2V5KVxufVxuXG5mdW5jdGlvbiBkc2FWZXJpZnkgKHNpZywgaGFzaCwgcHViKSB7XG4gIHZhciBwID0gcHViLmRhdGEucFxuICB2YXIgcSA9IHB1Yi5kYXRhLnFcbiAgdmFyIGcgPSBwdWIuZGF0YS5nXG4gIHZhciB5ID0gcHViLmRhdGEucHViX2tleVxuICB2YXIgdW5wYWNrZWQgPSBwYXJzZUtleXMuc2lnbmF0dXJlLmRlY29kZShzaWcsICdkZXInKVxuICB2YXIgcyA9IHVucGFja2VkLnNcbiAgdmFyIHIgPSB1bnBhY2tlZC5yXG4gIGNoZWNrVmFsdWUocywgcSlcbiAgY2hlY2tWYWx1ZShyLCBxKVxuICB2YXIgbW9udHAgPSBCTi5tb250KHApXG4gIHZhciB3ID0gcy5pbnZtKHEpXG4gIHZhciB2ID0gZy50b1JlZChtb250cClcbiAgICAucmVkUG93KG5ldyBCTihoYXNoKS5tdWwodykubW9kKHEpKVxuICAgIC5mcm9tUmVkKClcbiAgICAubXVsKHkudG9SZWQobW9udHApLnJlZFBvdyhyLm11bCh3KS5tb2QocSkpLmZyb21SZWQoKSlcbiAgICAubW9kKHApXG4gICAgLm1vZChxKVxuICByZXR1cm4gdi5jbXAocikgPT09IDBcbn1cblxuZnVuY3Rpb24gY2hlY2tWYWx1ZSAoYiwgcSkge1xuICBpZiAoYi5jbXBuKDApIDw9IDApIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWcnKVxuICBpZiAoYi5jbXAocSkgPj0gcSkgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNpZycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyaWZ5XG4iLCJ2YXIgZWxsaXB0aWMgPSByZXF1aXJlKCdlbGxpcHRpYycpXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRUNESCAoY3VydmUpIHtcbiAgcmV0dXJuIG5ldyBFQ0RIKGN1cnZlKVxufVxuXG52YXIgYWxpYXNlcyA9IHtcbiAgc2VjcDI1NmsxOiB7XG4gICAgbmFtZTogJ3NlY3AyNTZrMScsXG4gICAgYnl0ZUxlbmd0aDogMzJcbiAgfSxcbiAgc2VjcDIyNHIxOiB7XG4gICAgbmFtZTogJ3AyMjQnLFxuICAgIGJ5dGVMZW5ndGg6IDI4XG4gIH0sXG4gIHByaW1lMjU2djE6IHtcbiAgICBuYW1lOiAncDI1NicsXG4gICAgYnl0ZUxlbmd0aDogMzJcbiAgfSxcbiAgcHJpbWUxOTJ2MToge1xuICAgIG5hbWU6ICdwMTkyJyxcbiAgICBieXRlTGVuZ3RoOiAyNFxuICB9LFxuICBlZDI1NTE5OiB7XG4gICAgbmFtZTogJ2VkMjU1MTknLFxuICAgIGJ5dGVMZW5ndGg6IDMyXG4gIH0sXG4gIHNlY3AzODRyMToge1xuICAgIG5hbWU6ICdwMzg0JyxcbiAgICBieXRlTGVuZ3RoOiA0OFxuICB9LFxuICBzZWNwNTIxcjE6IHtcbiAgICBuYW1lOiAncDUyMScsXG4gICAgYnl0ZUxlbmd0aDogNjZcbiAgfVxufVxuXG5hbGlhc2VzLnAyMjQgPSBhbGlhc2VzLnNlY3AyMjRyMVxuYWxpYXNlcy5wMjU2ID0gYWxpYXNlcy5zZWNwMjU2cjEgPSBhbGlhc2VzLnByaW1lMjU2djFcbmFsaWFzZXMucDE5MiA9IGFsaWFzZXMuc2VjcDE5MnIxID0gYWxpYXNlcy5wcmltZTE5MnYxXG5hbGlhc2VzLnAzODQgPSBhbGlhc2VzLnNlY3AzODRyMVxuYWxpYXNlcy5wNTIxID0gYWxpYXNlcy5zZWNwNTIxcjFcblxuZnVuY3Rpb24gRUNESCAoY3VydmUpIHtcbiAgdGhpcy5jdXJ2ZVR5cGUgPSBhbGlhc2VzW2N1cnZlXVxuICBpZiAoIXRoaXMuY3VydmVUeXBlKSB7XG4gICAgdGhpcy5jdXJ2ZVR5cGUgPSB7XG4gICAgICBuYW1lOiBjdXJ2ZVxuICAgIH1cbiAgfVxuICB0aGlzLmN1cnZlID0gbmV3IGVsbGlwdGljLmVjKHRoaXMuY3VydmVUeXBlLm5hbWUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuICB0aGlzLmtleXMgPSB2b2lkIDBcbn1cblxuRUNESC5wcm90b3R5cGUuZ2VuZXJhdGVLZXlzID0gZnVuY3Rpb24gKGVuYywgZm9ybWF0KSB7XG4gIHRoaXMua2V5cyA9IHRoaXMuY3VydmUuZ2VuS2V5UGFpcigpXG4gIHJldHVybiB0aGlzLmdldFB1YmxpY0tleShlbmMsIGZvcm1hdClcbn1cblxuRUNESC5wcm90b3R5cGUuY29tcHV0ZVNlY3JldCA9IGZ1bmN0aW9uIChvdGhlciwgaW5lbmMsIGVuYykge1xuICBpbmVuYyA9IGluZW5jIHx8ICd1dGY4J1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihvdGhlcikpIHtcbiAgICBvdGhlciA9IG5ldyBCdWZmZXIob3RoZXIsIGluZW5jKVxuICB9XG4gIHZhciBvdGhlclB1YiA9IHRoaXMuY3VydmUua2V5RnJvbVB1YmxpYyhvdGhlcikuZ2V0UHVibGljKClcbiAgdmFyIG91dCA9IG90aGVyUHViLm11bCh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpKS5nZXRYKClcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKG91dCwgZW5jLCB0aGlzLmN1cnZlVHlwZS5ieXRlTGVuZ3RoKVxufVxuXG5FQ0RILnByb3RvdHlwZS5nZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAoZW5jLCBmb3JtYXQpIHtcbiAgdmFyIGtleSA9IHRoaXMua2V5cy5nZXRQdWJsaWMoZm9ybWF0ID09PSAnY29tcHJlc3NlZCcsIHRydWUpXG4gIGlmIChmb3JtYXQgPT09ICdoeWJyaWQnKSB7XG4gICAgaWYgKGtleVtrZXkubGVuZ3RoIC0gMV0gJSAyKSB7XG4gICAgICBrZXlbMF0gPSA3XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleVswXSA9IDZcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKGtleSwgZW5jKVxufVxuXG5FQ0RILnByb3RvdHlwZS5nZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5rZXlzLmdldFByaXZhdGUoKSwgZW5jKVxufVxuXG5FQ0RILnByb3RvdHlwZS5zZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAocHViLCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4J1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwdWIpKSB7XG4gICAgcHViID0gbmV3IEJ1ZmZlcihwdWIsIGVuYylcbiAgfVxuICB0aGlzLmtleXMuX2ltcG9ydFB1YmxpYyhwdWIpXG4gIHJldHVybiB0aGlzXG59XG5cbkVDREgucHJvdG90eXBlLnNldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAocHJpdiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHtcbiAgICBwcml2ID0gbmV3IEJ1ZmZlcihwcml2LCBlbmMpXG4gIH1cblxuICB2YXIgX3ByaXYgPSBuZXcgQk4ocHJpdilcbiAgX3ByaXYgPSBfcHJpdi50b1N0cmluZygxNilcbiAgdGhpcy5rZXlzID0gdGhpcy5jdXJ2ZS5nZW5LZXlQYWlyKClcbiAgdGhpcy5rZXlzLl9pbXBvcnRQcml2YXRlKF9wcml2KVxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZXR1cm5WYWx1ZSAoYm4sIGVuYywgbGVuKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShibikpIHtcbiAgICBibiA9IGJuLnRvQXJyYXkoKVxuICB9XG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKGJuKVxuICBpZiAobGVuICYmIGJ1Zi5sZW5ndGggPCBsZW4pIHtcbiAgICB2YXIgemVyb3MgPSBuZXcgQnVmZmVyKGxlbiAtIGJ1Zi5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoW3plcm9zLCBidWZdKVxuICB9XG4gIGlmICghZW5jKSB7XG4gICAgcmV0dXJuIGJ1ZlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoZW5jKVxuICB9XG59XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgPDw9IDQ7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICByIHw9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnIC0gJ0YnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcgJiYgYyA8PSAyMikge1xuICAgICAgICByIHw9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByIHw9IGMgJiAweGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHIuc3RyaXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyByIGlzIEJOIHY0IGluc3RhbmNlXG4gICAgICAgIHIuc3RyaXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHIgaXMgQk4gdjUgaW5zdGFuY2VcbiAgICAgICAgci5fc3RyaXAoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwiZXhwb3J0cy5wdWJsaWNFbmNyeXB0ID0gcmVxdWlyZSgnLi9wdWJsaWNFbmNyeXB0JylcbmV4cG9ydHMucHJpdmF0ZURlY3J5cHQgPSByZXF1aXJlKCcuL3ByaXZhdGVEZWNyeXB0JylcblxuZXhwb3J0cy5wcml2YXRlRW5jcnlwdCA9IGZ1bmN0aW9uIHByaXZhdGVFbmNyeXB0IChrZXksIGJ1Zikge1xuICByZXR1cm4gZXhwb3J0cy5wdWJsaWNFbmNyeXB0KGtleSwgYnVmLCB0cnVlKVxufVxuXG5leHBvcnRzLnB1YmxpY0RlY3J5cHQgPSBmdW5jdGlvbiBwdWJsaWNEZWNyeXB0IChrZXksIGJ1Zikge1xuICByZXR1cm4gZXhwb3J0cy5wcml2YXRlRGVjcnlwdChrZXksIGJ1ZiwgdHJ1ZSlcbn1cbiIsInZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIG1nZiA9IHJlcXVpcmUoJy4vbWdmJylcbnZhciB4b3IgPSByZXF1aXJlKCcuL3hvcicpXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpXG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHVibGljRW5jcnlwdCAocHVibGljS2V5LCBtc2csIHJldmVyc2UpIHtcbiAgdmFyIHBhZGRpbmdcbiAgaWYgKHB1YmxpY0tleS5wYWRkaW5nKSB7XG4gICAgcGFkZGluZyA9IHB1YmxpY0tleS5wYWRkaW5nXG4gIH0gZWxzZSBpZiAocmV2ZXJzZSkge1xuICAgIHBhZGRpbmcgPSAxXG4gIH0gZWxzZSB7XG4gICAgcGFkZGluZyA9IDRcbiAgfVxuICB2YXIga2V5ID0gcGFyc2VLZXlzKHB1YmxpY0tleSlcbiAgdmFyIHBhZGRlZE1zZ1xuICBpZiAocGFkZGluZyA9PT0gNCkge1xuICAgIHBhZGRlZE1zZyA9IG9hZXAoa2V5LCBtc2cpXG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMSkge1xuICAgIHBhZGRlZE1zZyA9IHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKVxuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDMpIHtcbiAgICBwYWRkZWRNc2cgPSBuZXcgQk4obXNnKVxuICAgIGlmIChwYWRkZWRNc2cuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgdG9vIGxvbmcgZm9yIG1vZHVsdXMnKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcGFkZGluZycpXG4gIH1cbiAgaWYgKHJldmVyc2UpIHtcbiAgICByZXR1cm4gY3J0KHBhZGRlZE1zZywga2V5KVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KVxuICB9XG59XG5cbmZ1bmN0aW9uIG9hZXAgKGtleSwgbXNnKSB7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBtTGVuID0gbXNnLmxlbmd0aFxuICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKEJ1ZmZlci5hbGxvYygwKSkuZGlnZXN0KClcbiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGhcbiAgdmFyIGhMZW4yID0gMiAqIGhMZW5cbiAgaWYgKG1MZW4gPiBrIC0gaExlbjIgLSAyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJylcbiAgfVxuICB2YXIgcHMgPSBCdWZmZXIuYWxsb2MoayAtIG1MZW4gLSBoTGVuMiAtIDIpXG4gIHZhciBkYmxlbiA9IGsgLSBoTGVuIC0gMVxuICB2YXIgc2VlZCA9IHJhbmRvbUJ5dGVzKGhMZW4pXG4gIHZhciBtYXNrZWREYiA9IHhvcihCdWZmZXIuY29uY2F0KFtpSGFzaCwgcHMsIEJ1ZmZlci5hbGxvYygxLCAxKSwgbXNnXSwgZGJsZW4pLCBtZ2Yoc2VlZCwgZGJsZW4pKVxuICB2YXIgbWFza2VkU2VlZCA9IHhvcihzZWVkLCBtZ2YobWFza2VkRGIsIGhMZW4pKVxuICByZXR1cm4gbmV3IEJOKEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5hbGxvYygxKSwgbWFza2VkU2VlZCwgbWFza2VkRGJdLCBrKSlcbn1cbmZ1bmN0aW9uIHBrY3MxIChrZXksIG1zZywgcmV2ZXJzZSkge1xuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGhcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgaWYgKG1MZW4gPiBrIC0gMTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgdG9vIGxvbmcnKVxuICB9XG4gIHZhciBwc1xuICBpZiAocmV2ZXJzZSkge1xuICAgIHBzID0gQnVmZmVyLmFsbG9jKGsgLSBtTGVuIC0gMywgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBwcyA9IG5vblplcm8oayAtIG1MZW4gLSAzKVxuICB9XG4gIHJldHVybiBuZXcgQk4oQnVmZmVyLmNvbmNhdChbQnVmZmVyLmZyb20oWzAsIHJldmVyc2UgPyAxIDogMl0pLCBwcywgQnVmZmVyLmFsbG9jKDEpLCBtc2ddLCBrKSlcbn1cbmZ1bmN0aW9uIG5vblplcm8gKGxlbikge1xuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAwXG4gIHZhciBjYWNoZSA9IHJhbmRvbUJ5dGVzKGxlbiAqIDIpXG4gIHZhciBjdXIgPSAwXG4gIHZhciBudW1cbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBpZiAoY3VyID09PSBjYWNoZS5sZW5ndGgpIHtcbiAgICAgIGNhY2hlID0gcmFuZG9tQnl0ZXMobGVuICogMilcbiAgICAgIGN1ciA9IDBcbiAgICB9XG4gICAgbnVtID0gY2FjaGVbY3VyKytdXG4gICAgaWYgKG51bSkge1xuICAgICAgb3V0W2krK10gPSBudW1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKVxudmFyIG1nZiA9IHJlcXVpcmUoJy4vbWdmJylcbnZhciB4b3IgPSByZXF1aXJlKCcuL3hvcicpXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKVxudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpXG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcml2YXRlRGVjcnlwdCAocHJpdmF0ZUtleSwgZW5jLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nXG4gIGlmIChwcml2YXRlS2V5LnBhZGRpbmcpIHtcbiAgICBwYWRkaW5nID0gcHJpdmF0ZUtleS5wYWRkaW5nXG4gIH0gZWxzZSBpZiAocmV2ZXJzZSkge1xuICAgIHBhZGRpbmcgPSAxXG4gIH0gZWxzZSB7XG4gICAgcGFkZGluZyA9IDRcbiAgfVxuXG4gIHZhciBrZXkgPSBwYXJzZUtleXMocHJpdmF0ZUtleSlcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgaWYgKGVuYy5sZW5ndGggPiBrIHx8IG5ldyBCTihlbmMpLmNtcChrZXkubW9kdWx1cykgPj0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgdmFyIG1zZ1xuICBpZiAocmV2ZXJzZSkge1xuICAgIG1zZyA9IHdpdGhQdWJsaWMobmV3IEJOKGVuYyksIGtleSlcbiAgfSBlbHNlIHtcbiAgICBtc2cgPSBjcnQoZW5jLCBrZXkpXG4gIH1cbiAgdmFyIHpCdWZmZXIgPSBCdWZmZXIuYWxsb2MoayAtIG1zZy5sZW5ndGgpXG4gIG1zZyA9IEJ1ZmZlci5jb25jYXQoW3pCdWZmZXIsIG1zZ10sIGspXG4gIGlmIChwYWRkaW5nID09PSA0KSB7XG4gICAgcmV0dXJuIG9hZXAoa2V5LCBtc2cpXG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMSkge1xuICAgIHJldHVybiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSlcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAzKSB7XG4gICAgcmV0dXJuIG1zZ1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBwYWRkaW5nJylcbiAgfVxufVxuXG5mdW5jdGlvbiBvYWVwIChrZXksIG1zZykge1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgaUhhc2ggPSBjcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKEJ1ZmZlci5hbGxvYygwKSkuZGlnZXN0KClcbiAgdmFyIGhMZW4gPSBpSGFzaC5sZW5ndGhcbiAgaWYgKG1zZ1swXSAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgdmFyIG1hc2tlZFNlZWQgPSBtc2cuc2xpY2UoMSwgaExlbiArIDEpXG4gIHZhciBtYXNrZWREYiA9IG1zZy5zbGljZShoTGVuICsgMSlcbiAgdmFyIHNlZWQgPSB4b3IobWFza2VkU2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSlcbiAgdmFyIGRiID0geG9yKG1hc2tlZERiLCBtZ2Yoc2VlZCwgayAtIGhMZW4gLSAxKSlcbiAgaWYgKGNvbXBhcmUoaUhhc2gsIGRiLnNsaWNlKDAsIGhMZW4pKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgdmFyIGkgPSBoTGVuXG4gIHdoaWxlIChkYltpXSA9PT0gMCkge1xuICAgIGkrK1xuICB9XG4gIGlmIChkYltpKytdICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJylcbiAgfVxuICByZXR1cm4gZGIuc2xpY2UoaSlcbn1cblxuZnVuY3Rpb24gcGtjczEgKGtleSwgbXNnLCByZXZlcnNlKSB7XG4gIHZhciBwMSA9IG1zZy5zbGljZSgwLCAyKVxuICB2YXIgaSA9IDJcbiAgdmFyIHN0YXR1cyA9IDBcbiAgd2hpbGUgKG1zZ1tpKytdICE9PSAwKSB7XG4gICAgaWYgKGkgPj0gbXNnLmxlbmd0aCkge1xuICAgICAgc3RhdHVzKytcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHZhciBwcyA9IG1zZy5zbGljZSgyLCBpIC0gMSlcblxuICBpZiAoKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDInICYmICFyZXZlcnNlKSB8fCAocDEudG9TdHJpbmcoJ2hleCcpICE9PSAnMDAwMScgJiYgcmV2ZXJzZSkpIHtcbiAgICBzdGF0dXMrK1xuICB9XG4gIGlmIChwcy5sZW5ndGggPCA4KSB7XG4gICAgc3RhdHVzKytcbiAgfVxuICBpZiAoc3RhdHVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJylcbiAgfVxuICByZXR1cm4gbXNnLnNsaWNlKGkpXG59XG5mdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGEgPSBCdWZmZXIuZnJvbShhKVxuICBiID0gQnVmZmVyLmZyb20oYilcbiAgdmFyIGRpZiA9IDBcbiAgdmFyIGxlbiA9IGEubGVuZ3RoXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICBkaWYrK1xuICAgIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgfVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBkaWYgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG4gIHJldHVybiBkaWZcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5mdW5jdGlvbiBvbGRCcm93c2VyICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdzZWN1cmUgcmFuZG9tIG51bWJlciBnZW5lcmF0aW9uIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyXFxudXNlIGNocm9tZSwgRmlyZUZveCBvciBJbnRlcm5ldCBFeHBsb3JlciAxMScpXG59XG52YXIgc2FmZUJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJylcbnZhciByYW5kb21ieXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJylcbnZhciBCdWZmZXIgPSBzYWZlQnVmZmVyLkJ1ZmZlclxudmFyIGtCdWZmZXJNYXhMZW5ndGggPSBzYWZlQnVmZmVyLmtNYXhMZW5ndGhcbnZhciBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0b1xudmFyIGtNYXhVaW50MzIgPSBNYXRoLnBvdygyLCAzMikgLSAxXG5mdW5jdGlvbiBhc3NlcnRPZmZzZXQgKG9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0ICE9PSAnbnVtYmVyJyB8fCBvZmZzZXQgIT09IG9mZnNldCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29mZnNldCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChvZmZzZXQgPiBrTWF4VWludDMyIHx8IG9mZnNldCA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvZmZzZXQgbXVzdCBiZSBhIHVpbnQzMicpXG4gIH1cblxuICBpZiAob2Zmc2V0ID4ga0J1ZmZlck1heExlbmd0aCB8fCBvZmZzZXQgPiBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IG91dCBvZiByYW5nZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJyB8fCBzaXplICE9PSBzaXplKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZSBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChzaXplID4ga01heFVpbnQzMiB8fCBzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemUgbXVzdCBiZSBhIHVpbnQzMicpXG4gIH1cblxuICBpZiAoc2l6ZSArIG9mZnNldCA+IGxlbmd0aCB8fCBzaXplID4ga0J1ZmZlck1heExlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdidWZmZXIgdG9vIHNtYWxsJylcbiAgfVxufVxuaWYgKChjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykgfHwgIXByb2Nlc3MuYnJvd3Nlcikge1xuICBleHBvcnRzLnJhbmRvbUZpbGwgPSByYW5kb21GaWxsXG4gIGV4cG9ydHMucmFuZG9tRmlsbFN5bmMgPSByYW5kb21GaWxsU3luY1xufSBlbHNlIHtcbiAgZXhwb3J0cy5yYW5kb21GaWxsID0gb2xkQnJvd3NlclxuICBleHBvcnRzLnJhbmRvbUZpbGxTeW5jID0gb2xkQnJvd3NlclxufVxuZnVuY3Rpb24gcmFuZG9tRmlsbCAoYnVmLCBvZmZzZXQsIHNpemUsIGNiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikgJiYgIShidWYgaW5zdGFuY2VvZiBnbG9iYWwuVWludDhBcnJheSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZlwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgb3IgVWludDhBcnJheScpXG4gIH1cblxuICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb2Zmc2V0XG4gICAgb2Zmc2V0ID0gMFxuICAgIHNpemUgPSBidWYubGVuZ3RoXG4gIH0gZWxzZSBpZiAodHlwZW9mIHNpemUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IHNpemVcbiAgICBzaXplID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICB9IGVsc2UgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2JcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKVxuICB9XG4gIGFzc2VydE9mZnNldChvZmZzZXQsIGJ1Zi5sZW5ndGgpXG4gIGFzc2VydFNpemUoc2l6ZSwgb2Zmc2V0LCBidWYubGVuZ3RoKVxuICByZXR1cm4gYWN0dWFsRmlsbChidWYsIG9mZnNldCwgc2l6ZSwgY2IpXG59XG5cbmZ1bmN0aW9uIGFjdHVhbEZpbGwgKGJ1Ziwgb2Zmc2V0LCBzaXplLCBjYikge1xuICBpZiAocHJvY2Vzcy5icm93c2VyKSB7XG4gICAgdmFyIG91ckJ1ZiA9IGJ1Zi5idWZmZXJcbiAgICB2YXIgdWludCA9IG5ldyBVaW50OEFycmF5KG91ckJ1Ziwgb2Zmc2V0LCBzaXplKVxuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXModWludClcbiAgICBpZiAoY2IpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBjYihudWxsLCBidWYpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHJldHVybiBidWZcbiAgfVxuICBpZiAoY2IpIHtcbiAgICByYW5kb21ieXRlcyhzaXplLCBmdW5jdGlvbiAoZXJyLCBieXRlcykge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gY2IoZXJyKVxuICAgICAgfVxuICAgICAgYnl0ZXMuY29weShidWYsIG9mZnNldClcbiAgICAgIGNiKG51bGwsIGJ1ZilcbiAgICB9KVxuICAgIHJldHVyblxuICB9XG4gIHZhciBieXRlcyA9IHJhbmRvbWJ5dGVzKHNpemUpXG4gIGJ5dGVzLmNvcHkoYnVmLCBvZmZzZXQpXG4gIHJldHVybiBidWZcbn1cbmZ1bmN0aW9uIHJhbmRvbUZpbGxTeW5jIChidWYsIG9mZnNldCwgc2l6ZSkge1xuICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvZmZzZXQgPSAwXG4gIH1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSAmJiAhKGJ1ZiBpbnN0YW5jZW9mIGdsb2JhbC5VaW50OEFycmF5KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBvciBVaW50OEFycmF5JylcbiAgfVxuXG4gIGFzc2VydE9mZnNldChvZmZzZXQsIGJ1Zi5sZW5ndGgpXG5cbiAgaWYgKHNpemUgPT09IHVuZGVmaW5lZCkgc2l6ZSA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcblxuICBhc3NlcnRTaXplKHNpemUsIG9mZnNldCwgYnVmLmxlbmd0aClcblxuICByZXR1cm4gYWN0dWFsRmlsbChidWYsIG9mZnNldCwgc2l6ZSlcbn1cbiIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIENoZWNrIGlmIHR5cGVkIGFycmF5cyBhcmUgc3VwcG9ydGVkXG5cdCAgICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICB9XG5cblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblxuXHQgICAgLy8gUmVmZXJlbmNlIG9yaWdpbmFsIGluaXRcblx0ICAgIHZhciBzdXBlckluaXQgPSBXb3JkQXJyYXkuaW5pdDtcblxuXHQgICAgLy8gQXVnbWVudCBXb3JkQXJyYXkuaW5pdCB0byBoYW5kbGUgdHlwZWQgYXJyYXlzXG5cdCAgICB2YXIgc3ViSW5pdCA9IFdvcmRBcnJheS5pbml0ID0gZnVuY3Rpb24gKHR5cGVkQXJyYXkpIHtcblx0ICAgICAgICAvLyBDb252ZXJ0IGJ1ZmZlcnMgdG8gdWludDhcblx0ICAgICAgICBpZiAodHlwZWRBcnJheSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgPSBuZXcgVWludDhBcnJheSh0eXBlZEFycmF5KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBDb252ZXJ0IG90aGVyIGFycmF5IHZpZXdzIHRvIHVpbnQ4XG5cdCAgICAgICAgaWYgKFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5IHx8XG5cdCAgICAgICAgICAgICh0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5KSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgSW50MTZBcnJheSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDMyQXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheVxuXHQgICAgICAgICkge1xuXHQgICAgICAgICAgICB0eXBlZEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodHlwZWRBcnJheS5idWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5ieXRlTGVuZ3RoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBIYW5kbGUgVWludDhBcnJheVxuXHQgICAgICAgIGlmICh0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgdHlwZWRBcnJheUJ5dGVMZW5ndGggPSB0eXBlZEFycmF5LmJ5dGVMZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gRXh0cmFjdCBieXRlc1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZEFycmF5Qnl0ZUxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAyXSB8PSB0eXBlZEFycmF5W2ldIDw8ICgyNCAtIChpICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhpcyB3b3JkIGFycmF5XG5cdCAgICAgICAgICAgIHN1cGVySW5pdC5jYWxsKHRoaXMsIHdvcmRzLCB0eXBlZEFycmF5Qnl0ZUxlbmd0aCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgLy8gRWxzZSBjYWxsIG5vcm1hbCBpbml0XG5cdCAgICAgICAgICAgIHN1cGVySW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIHN1YkluaXQucHJvdG90eXBlID0gV29yZEFycmF5O1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLmxpYi5Xb3JkQXJyYXk7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYztcblxuXHQgICAgLyoqXG5cdCAgICAgKiBVVEYtMTYgQkUgZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBVdGYxNkJFID0gQ19lbmMuVXRmMTYgPSBDX2VuYy5VdGYxNkJFID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIFVURi0xNiBCRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVRGLTE2IEJFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHV0ZjE2U3RyaW5nID0gQ3J5cHRvSlMuZW5jLlV0ZjE2LnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgdXRmMTZDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpICs9IDIpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSAod29yZHNbaSA+Pj4gMl0gPj4+ICgxNiAtIChpICUgNCkgKiA4KSkgJiAweGZmZmY7XG5cdCAgICAgICAgICAgICAgICB1dGYxNkNoYXJzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiB1dGYxNkNoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIFVURi0xNiBCRSBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHV0ZjE2U3RyIFRoZSBVVEYtMTYgQkUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5VdGYxNi5wYXJzZSh1dGYxNlN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICh1dGYxNlN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgdXRmMTZTdHJMZW5ndGggPSB1dGYxNlN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1dGYxNlN0ckxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAxXSB8PSB1dGYxNlN0ci5jaGFyQ29kZUF0KGkpIDw8ICgxNiAtIChpICUgMikgKiAxNik7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgdXRmMTZTdHJMZW5ndGggKiAyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFVURi0xNiBMRSBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgQ19lbmMuVXRmMTZMRSA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtMTYgTEUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi0xNiBMRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB1dGYxNlN0ciA9IENyeXB0b0pTLmVuYy5VdGYxNkxFLnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgdXRmMTZDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpICs9IDIpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBzd2FwRW5kaWFuKCh3b3Jkc1tpID4+PiAyXSA+Pj4gKDE2IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmZmZik7XG5cdCAgICAgICAgICAgICAgICB1dGYxNkNoYXJzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiB1dGYxNkNoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIFVURi0xNiBMRSBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHV0ZjE2U3RyIFRoZSBVVEYtMTYgTEUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5VdGYxNkxFLnBhcnNlKHV0ZjE2U3RyKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjE2U3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciB1dGYxNlN0ckxlbmd0aCA9IHV0ZjE2U3RyLmxlbmd0aDtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHV0ZjE2U3RyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDFdIHw9IHN3YXBFbmRpYW4odXRmMTZTdHIuY2hhckNvZGVBdChpKSA8PCAoMTYgLSAoaSAlIDIpICogMTYpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBXb3JkQXJyYXkuY3JlYXRlKHdvcmRzLCB1dGYxNlN0ckxlbmd0aCAqIDIpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIGZ1bmN0aW9uIHN3YXBFbmRpYW4od29yZCkge1xuXHQgICAgICAgIHJldHVybiAoKHdvcmQgPDwgOCkgJiAweGZmMDBmZjAwKSB8ICgod29yZCA+Pj4gOCkgJiAweDAwZmYwMGZmKTtcblx0ICAgIH1cblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5lbmMuVXRmMTY7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vc2hhMjU2XCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3NoYTI1NlwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cdCAgICB2YXIgU0hBMjU2ID0gQ19hbGdvLlNIQTI1NjtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtMjI0IGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBMjI0ID0gQ19hbGdvLlNIQTIyNCA9IFNIQTI1Ni5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgMHhjMTA1OWVkOCwgMHgzNjdjZDUwNywgMHgzMDcwZGQxNywgMHhmNzBlNTkzOSxcblx0ICAgICAgICAgICAgICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTRcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gU0hBMjU2Ll9kb0ZpbmFsaXplLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgaGFzaC5zaWdCeXRlcyAtPSA0O1xuXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjI0KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyMjQod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEyMjQgPSBTSEEyNTYuX2NyZWF0ZUhlbHBlcihTSEEyMjQpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTIyNChtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEyMjQgPSBTSEEyNTYuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMjI0KTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5TSEEyMjQ7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4veDY0LWNvcmVcIiksIHJlcXVpcmUoXCIuL3NoYTUxMlwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi94NjQtY29yZVwiLCBcIi4vc2hhNTEyXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQ7XG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7XG5cdCAgICB2YXIgWDY0V29yZEFycmF5ID0gQ194NjQuV29yZEFycmF5O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblx0ICAgIHZhciBTSEE1MTIgPSBDX2FsZ28uU0hBNTEyO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS0zODQgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEEzODQgPSBDX2FsZ28uU0hBMzg0ID0gU0hBNTEyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBYNjRXb3JkQXJyYXkuaW5pdChbXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4Y2JiYjlkNWQsIDB4YzEwNTllZDgpLCBuZXcgWDY0V29yZC5pbml0KDB4NjI5YTI5MmEsIDB4MzY3Y2Q1MDcpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDkxNTkwMTVhLCAweDMwNzBkZDE3KSwgbmV3IFg2NFdvcmQuaW5pdCgweDE1MmZlY2Q4LCAweGY3MGU1OTM5KSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHg2NzMzMjY2NywgMHhmZmMwMGIzMSksIG5ldyBYNjRXb3JkLmluaXQoMHg4ZWI0NGE4NywgMHg2ODU4MTUxMSksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4ZGIwYzJlMGQsIDB4NjRmOThmYTcpLCBuZXcgWDY0V29yZC5pbml0KDB4NDdiNTQ4MWQsIDB4YmVmYTRmYTQpXG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IFNIQTUxMi5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIGhhc2guc2lnQnl0ZXMgLT0gMTY7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzODQoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTM4NCh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLlNIQTM4NCA9IFNIQTUxMi5fY3JlYXRlSGVscGVyKFNIQTM4NCk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMzg0KG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY1NIQTM4NCA9IFNIQTUxMi5fY3JlYXRlSG1hY0hlbHBlcihTSEEzODQpO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlNIQTM4NDtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi94NjQtY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi94NjQtY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQ7XG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBDb25zdGFudHMgdGFibGVzXG5cdCAgICB2YXIgUkhPX09GRlNFVFMgPSBbXTtcblx0ICAgIHZhciBQSV9JTkRFWEVTICA9IFtdO1xuXHQgICAgdmFyIFJPVU5EX0NPTlNUQU5UUyA9IFtdO1xuXG5cdCAgICAvLyBDb21wdXRlIENvbnN0YW50c1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvLyBDb21wdXRlIHJobyBvZmZzZXQgY29uc3RhbnRzXG5cdCAgICAgICAgdmFyIHggPSAxLCB5ID0gMDtcblx0ICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IDI0OyB0KyspIHtcblx0ICAgICAgICAgICAgUkhPX09GRlNFVFNbeCArIDUgKiB5XSA9ICgodCArIDEpICogKHQgKyAyKSAvIDIpICUgNjQ7XG5cblx0ICAgICAgICAgICAgdmFyIG5ld1ggPSB5ICUgNTtcblx0ICAgICAgICAgICAgdmFyIG5ld1kgPSAoMiAqIHggKyAzICogeSkgJSA1O1xuXHQgICAgICAgICAgICB4ID0gbmV3WDtcblx0ICAgICAgICAgICAgeSA9IG5ld1k7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ29tcHV0ZSBwaSBpbmRleCBjb25zdGFudHNcblx0ICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IDU7IHkrKykge1xuXHQgICAgICAgICAgICAgICAgUElfSU5ERVhFU1t4ICsgNSAqIHldID0geSArICgoMiAqIHggKyAzICogeSkgJSA1KSAqIDU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBDb21wdXRlIHJvdW5kIGNvbnN0YW50c1xuXHQgICAgICAgIHZhciBMRlNSID0gMHgwMTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIHJvdW5kQ29uc3RhbnRNc3cgPSAwO1xuXHQgICAgICAgICAgICB2YXIgcm91bmRDb25zdGFudExzdyA9IDA7XG5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA3OyBqKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChMRlNSICYgMHgwMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBiaXRQb3NpdGlvbiA9ICgxIDw8IGopIC0gMTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoYml0UG9zaXRpb24gPCAzMikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByb3VuZENvbnN0YW50THN3IF49IDEgPDwgYml0UG9zaXRpb247XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8qIGlmIChiaXRQb3NpdGlvbiA+PSAzMikgKi8ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByb3VuZENvbnN0YW50TXN3IF49IDEgPDwgKGJpdFBvc2l0aW9uIC0gMzIpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gQ29tcHV0ZSBuZXh0IExGU1Jcblx0ICAgICAgICAgICAgICAgIGlmIChMRlNSICYgMHg4MCkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFByaW1pdGl2ZSBwb2x5bm9taWFsIG92ZXIgR0YoMik6IHheOCArIHheNiArIHheNSArIHheNCArIDFcblx0ICAgICAgICAgICAgICAgICAgICBMRlNSID0gKExGU1IgPDwgMSkgXiAweDcxO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBMRlNSIDw8PSAxO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgUk9VTkRfQ09OU1RBTlRTW2ldID0gWDY0V29yZC5jcmVhdGUocm91bmRDb25zdGFudE1zdywgcm91bmRDb25zdGFudExzdyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0cyBmb3IgdGVtcG9yYXJ5IHZhbHVlc1xuXHQgICAgdmFyIFQgPSBbXTtcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG5cdCAgICAgICAgICAgIFRbaV0gPSBYNjRXb3JkLmNyZWF0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTMgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEEzID0gQ19hbGdvLlNIQTMgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gb3V0cHV0TGVuZ3RoXG5cdCAgICAgICAgICogICBUaGUgZGVzaXJlZCBudW1iZXIgb2YgYml0cyBpbiB0aGUgb3V0cHV0IGhhc2guXG5cdCAgICAgICAgICogICBPbmx5IHZhbHVlcyBwZXJtaXR0ZWQgYXJlOiAyMjQsIDI1NiwgMzg0LCA1MTIuXG5cdCAgICAgICAgICogICBEZWZhdWx0OiA1MTJcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEhhc2hlci5jZmcuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgb3V0cHV0TGVuZ3RoOiA1MTJcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlID0gW11cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBzdGF0ZVtpXSA9IG5ldyBYNjRXb3JkLmluaXQoKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHRoaXMuYmxvY2tTaXplID0gKDE2MDAgLSAyICogdGhpcy5jZmcub3V0cHV0TGVuZ3RoKSAvIDMyO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXHQgICAgICAgICAgICB2YXIgbkJsb2NrU2l6ZUxhbmVzID0gdGhpcy5ibG9ja1NpemUgLyAyO1xuXG5cdCAgICAgICAgICAgIC8vIEFic29yYlxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5CbG9ja1NpemVMYW5lczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBNMmkgID0gTVtvZmZzZXQgKyAyICogaV07XG5cdCAgICAgICAgICAgICAgICB2YXIgTTJpMSA9IE1bb2Zmc2V0ICsgMiAqIGkgKyAxXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgICAgIE0yaSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNMmkgPDwgOCkgIHwgKE0yaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAoKChNMmkgPDwgMjQpIHwgKE0yaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICAgICAgTTJpMSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNMmkxIDw8IDgpICB8IChNMmkxID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE0yaTEgPDwgMjQpIHwgKE0yaTEgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gQWJzb3JiIG1lc3NhZ2UgaW50byBzdGF0ZVxuXHQgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtpXTtcblx0ICAgICAgICAgICAgICAgIGxhbmUuaGlnaCBePSBNMmkxO1xuXHQgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IE0yaTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciByb3VuZCA9IDA7IHJvdW5kIDwgMjQ7IHJvdW5kKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFRoZXRhXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIE1peCBjb2x1bW4gbGFuZXNcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdyA9IDAsIHRMc3cgPSAwO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbeCArIDUgKiB5XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdE1zdyBePSBsYW5lLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRMc3cgXj0gbGFuZS5sb3c7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gVGVtcG9yYXJ5IHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeCA9IFRbeF07XG5cdCAgICAgICAgICAgICAgICAgICAgVHguaGlnaCA9IHRNc3c7XG5cdCAgICAgICAgICAgICAgICAgICAgVHgubG93ICA9IHRMc3c7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeDQgPSBUWyh4ICsgNCkgJSA1XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgVHgxID0gVFsoeCArIDEpICUgNV07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFR4MU1zdyA9IFR4MS5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeDFMc3cgPSBUeDEubG93O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gTWl4IHN1cnJvdW5kaW5nIGNvbHVtbnNcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdyA9IFR4NC5oaWdoIF4gKChUeDFNc3cgPDwgMSkgfCAoVHgxTHN3ID4+PiAzMSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0THN3ID0gVHg0LmxvdyAgXiAoKFR4MUxzdyA8PCAxKSB8IChUeDFNc3cgPj4+IDMxKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVt4ICsgNSAqIHldO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gdE1zdztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IHRMc3c7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBSaG8gUGlcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGxhbmVJbmRleCA9IDE7IGxhbmVJbmRleCA8IDI1OyBsYW5lSW5kZXgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0TXN3O1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0THN3O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtsYW5lSW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lTXN3ID0gbGFuZS5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lTHN3ID0gbGFuZS5sb3c7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHJob09mZnNldCA9IFJIT19PRkZTRVRTW2xhbmVJbmRleF07XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBSb3RhdGUgbGFuZXNcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocmhvT2Zmc2V0IDwgMzIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdE1zdyA9IChsYW5lTXN3IDw8IHJob09mZnNldCkgfCAobGFuZUxzdyA+Pj4gKDMyIC0gcmhvT2Zmc2V0KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRMc3cgPSAobGFuZUxzdyA8PCByaG9PZmZzZXQpIHwgKGxhbmVNc3cgPj4+ICgzMiAtIHJob09mZnNldCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAocmhvT2Zmc2V0ID49IDMyKSAqLyB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRNc3cgPSAobGFuZUxzdyA8PCAocmhvT2Zmc2V0IC0gMzIpKSB8IChsYW5lTXN3ID4+PiAoNjQgLSByaG9PZmZzZXQpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdExzdyA9IChsYW5lTXN3IDw8IChyaG9PZmZzZXQgLSAzMikpIHwgKGxhbmVMc3cgPj4+ICg2NCAtIHJob09mZnNldCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFRyYW5zcG9zZSBsYW5lc1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUUGlMYW5lID0gVFtQSV9JTkRFWEVTW2xhbmVJbmRleF1dO1xuXHQgICAgICAgICAgICAgICAgICAgIFRQaUxhbmUuaGlnaCA9IHRNc3c7XG5cdCAgICAgICAgICAgICAgICAgICAgVFBpTGFuZS5sb3cgID0gdExzdztcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gUmhvIHBpIGF0IHggPSB5ID0gMFxuXHQgICAgICAgICAgICAgICAgdmFyIFQwID0gVFswXTtcblx0ICAgICAgICAgICAgICAgIHZhciBzdGF0ZTAgPSBzdGF0ZVswXTtcblx0ICAgICAgICAgICAgICAgIFQwLmhpZ2ggPSBzdGF0ZTAuaGlnaDtcblx0ICAgICAgICAgICAgICAgIFQwLmxvdyAgPSBzdGF0ZTAubG93O1xuXG5cdCAgICAgICAgICAgICAgICAvLyBDaGlcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lSW5kZXggPSB4ICsgNSAqIHk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbbGFuZUluZGV4XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFRMYW5lID0gVFtsYW5lSW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgVHgxTGFuZSA9IFRbKCh4ICsgMSkgJSA1KSArIDUgKiB5XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFR4MkxhbmUgPSBUWygoeCArIDIpICUgNSkgKyA1ICogeV07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWl4IHJvd3Ncblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5oaWdoID0gVExhbmUuaGlnaCBeICh+VHgxTGFuZS5oaWdoICYgVHgyTGFuZS5oaWdoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5sb3cgID0gVExhbmUubG93ICBeICh+VHgxTGFuZS5sb3cgICYgVHgyTGFuZS5sb3cpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gSW90YVxuXHQgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVswXTtcblx0ICAgICAgICAgICAgICAgIHZhciByb3VuZENvbnN0YW50ID0gUk9VTkRfQ09OU1RBTlRTW3JvdW5kXTtcblx0ICAgICAgICAgICAgICAgIGxhbmUuaGlnaCBePSByb3VuZENvbnN0YW50LmhpZ2g7XG5cdCAgICAgICAgICAgICAgICBsYW5lLmxvdyAgXj0gcm91bmRDb25zdGFudC5sb3c7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJpdHMgPSB0aGlzLmJsb2NrU2l6ZSAqIDMyO1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4MSA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKE1hdGguY2VpbCgobkJpdHNMZWZ0ICsgMSkgLyBibG9ja1NpemVCaXRzKSAqIGJsb2NrU2l6ZUJpdHMpID4+PiA1KSAtIDFdIHw9IDB4ODA7XG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXHQgICAgICAgICAgICB2YXIgb3V0cHV0TGVuZ3RoQnl0ZXMgPSB0aGlzLmNmZy5vdXRwdXRMZW5ndGggLyA4O1xuXHQgICAgICAgICAgICB2YXIgb3V0cHV0TGVuZ3RoTGFuZXMgPSBvdXRwdXRMZW5ndGhCeXRlcyAvIDg7XG5cblx0ICAgICAgICAgICAgLy8gU3F1ZWV6ZVxuXHQgICAgICAgICAgICB2YXIgaGFzaFdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0cHV0TGVuZ3RoTGFuZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW2ldO1xuXHQgICAgICAgICAgICAgICAgdmFyIGxhbmVNc3cgPSBsYW5lLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICB2YXIgbGFuZUxzdyA9IGxhbmUubG93O1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICAgICAgbGFuZU1zdyA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChsYW5lTXN3IDw8IDgpICB8IChsYW5lTXN3ID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKGxhbmVNc3cgPDwgMjQpIHwgKGxhbmVNc3cgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgICAgIGxhbmVMc3cgPSAoXG5cdCAgICAgICAgICAgICAgICAgICAgKCgobGFuZUxzdyA8PCA4KSAgfCAobGFuZUxzdyA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAoKChsYW5lTHN3IDw8IDI0KSB8IChsYW5lTHN3ID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgICAgICk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNxdWVlemUgc3RhdGUgdG8gcmV0cmlldmUgaGFzaFxuXHQgICAgICAgICAgICAgICAgaGFzaFdvcmRzLnB1c2gobGFuZUxzdyk7XG5cdCAgICAgICAgICAgICAgICBoYXNoV29yZHMucHVzaChsYW5lTXN3KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQoaGFzaFdvcmRzLCBvdXRwdXRMZW5ndGhCeXRlcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IGNsb25lLl9zdGF0ZSA9IHRoaXMuX3N0YXRlLnNsaWNlKDApO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHN0YXRlW2ldID0gc3RhdGVbaV0uY2xvbmUoKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTMoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTMod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEzID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMyk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMyhtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEzID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTMpO1xuXHR9KE1hdGgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5TSEEzO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKiogQHByZXNlcnZlXG5cdChjKSAyMDEyIGJ5IEPDqWRyaWMgTWVzbmlsLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5cdFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuXHQgICAgLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cdCAgICAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuXHRUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cdCovXG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gQ29uc3RhbnRzIHRhYmxlXG5cdCAgICB2YXIgX3psID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgMCwgIDEsICAyLCAgMywgIDQsICA1LCAgNiwgIDcsICA4LCAgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcblx0ICAgICAgICA3LCAgNCwgMTMsICAxLCAxMCwgIDYsIDE1LCAgMywgMTIsICAwLCAgOSwgIDUsICAyLCAxNCwgMTEsICA4LFxuXHQgICAgICAgIDMsIDEwLCAxNCwgIDQsICA5LCAxNSwgIDgsICAxLCAgMiwgIDcsICAwLCAgNiwgMTMsIDExLCAgNSwgMTIsXG5cdCAgICAgICAgMSwgIDksIDExLCAxMCwgIDAsICA4LCAxMiwgIDQsIDEzLCAgMywgIDcsIDE1LCAxNCwgIDUsICA2LCAgMixcblx0ICAgICAgICA0LCAgMCwgIDUsICA5LCAgNywgMTIsICAyLCAxMCwgMTQsICAxLCAgMywgIDgsIDExLCAgNiwgMTUsIDEzXSk7XG5cdCAgICB2YXIgX3pyID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgNSwgMTQsICA3LCAgMCwgIDksICAyLCAxMSwgIDQsIDEzLCAgNiwgMTUsICA4LCAgMSwgMTAsICAzLCAxMixcblx0ICAgICAgICA2LCAxMSwgIDMsICA3LCAgMCwgMTMsICA1LCAxMCwgMTQsIDE1LCAgOCwgMTIsICA0LCAgOSwgIDEsICAyLFxuXHQgICAgICAgIDE1LCAgNSwgIDEsICAzLCAgNywgMTQsICA2LCAgOSwgMTEsICA4LCAxMiwgIDIsIDEwLCAgMCwgIDQsIDEzLFxuXHQgICAgICAgIDgsICA2LCAgNCwgIDEsICAzLCAxMSwgMTUsICAwLCAgNSwgMTIsICAyLCAxMywgIDksICA3LCAxMCwgMTQsXG5cdCAgICAgICAgMTIsIDE1LCAxMCwgIDQsICAxLCAgNSwgIDgsICA3LCAgNiwgIDIsIDEzLCAxNCwgIDAsICAzLCAgOSwgMTFdKTtcblx0ICAgIHZhciBfc2wgPSBXb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICAgMTEsIDE0LCAxNSwgMTIsICA1LCAgOCwgIDcsICA5LCAxMSwgMTMsIDE0LCAxNSwgIDYsICA3LCAgOSwgIDgsXG5cdCAgICAgICAgNywgNiwgICA4LCAxMywgMTEsICA5LCAgNywgMTUsICA3LCAxMiwgMTUsICA5LCAxMSwgIDcsIDEzLCAxMixcblx0ICAgICAgICAxMSwgMTMsICA2LCAgNywgMTQsICA5LCAxMywgMTUsIDE0LCAgOCwgMTMsICA2LCAgNSwgMTIsICA3LCAgNSxcblx0ICAgICAgICAgIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsICA5LCAgOCwgIDksIDE0LCAgNSwgIDYsICA4LCAgNiwgIDUsIDEyLFxuXHQgICAgICAgIDksIDE1LCAgNSwgMTEsICA2LCAgOCwgMTMsIDEyLCAgNSwgMTIsIDEzLCAxNCwgMTEsICA4LCAgNSwgIDYgXSk7XG5cdCAgICB2YXIgX3NyID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgOCwgIDksICA5LCAxMSwgMTMsIDE1LCAxNSwgIDUsICA3LCAgNywgIDgsIDExLCAxNCwgMTQsIDEyLCAgNixcblx0ICAgICAgICA5LCAxMywgMTUsICA3LCAxMiwgIDgsICA5LCAxMSwgIDcsICA3LCAxMiwgIDcsICA2LCAxNSwgMTMsIDExLFxuXHQgICAgICAgIDksICA3LCAxNSwgMTEsICA4LCAgNiwgIDYsIDE0LCAxMiwgMTMsICA1LCAxNCwgMTMsIDEzLCAgNywgIDUsXG5cdCAgICAgICAgMTUsICA1LCAgOCwgMTEsIDE0LCAxNCwgIDYsIDE0LCAgNiwgIDksIDEyLCAgOSwgMTIsICA1LCAxNSwgIDgsXG5cdCAgICAgICAgOCwgIDUsIDEyLCAgOSwgMTIsICA1LCAxNCwgIDYsICA4LCAxMywgIDYsICA1LCAxNSwgMTMsIDExLCAxMSBdKTtcblxuXHQgICAgdmFyIF9obCA9ICBXb3JkQXJyYXkuY3JlYXRlKFsgMHgwMDAwMDAwMCwgMHg1QTgyNzk5OSwgMHg2RUQ5RUJBMSwgMHg4RjFCQkNEQywgMHhBOTUzRkQ0RV0pO1xuXHQgICAgdmFyIF9ociA9ICBXb3JkQXJyYXkuY3JlYXRlKFsgMHg1MEEyOEJFNiwgMHg1QzRERDEyNCwgMHg2RDcwM0VGMywgMHg3QTZENzZFOSwgMHgwMDAwMDAwMF0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFJJUEVNRDE2MCBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJJUEVNRDE2MCA9IENfYWxnby5SSVBFTUQxNjAgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoICA9IFdvcmRBcnJheS5jcmVhdGUoWzB4Njc0NTIzMDEsIDB4RUZDREFCODksIDB4OThCQURDRkUsIDB4MTAzMjU0NzYsIDB4QzNEMkUxRjBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGk7XG5cdCAgICAgICAgICAgICAgICB2YXIgTV9vZmZzZXRfaSA9IE1bb2Zmc2V0X2ldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwXG5cdCAgICAgICAgICAgICAgICBNW29mZnNldF9pXSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDgpICB8IChNX29mZnNldF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgMjQpIHwgKE1fb2Zmc2V0X2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgSCAgPSB0aGlzLl9oYXNoLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgaGwgPSBfaGwud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBociA9IF9oci53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHpsID0gX3psLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgenIgPSBfenIud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzbCA9IF9zbC53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNyID0gX3NyLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgIHZhciBhbCwgYmwsIGNsLCBkbCwgZWw7XG5cdCAgICAgICAgICAgIHZhciBhciwgYnIsIGNyLCBkciwgZXI7XG5cblx0ICAgICAgICAgICAgYXIgPSBhbCA9IEhbMF07XG5cdCAgICAgICAgICAgIGJyID0gYmwgPSBIWzFdO1xuXHQgICAgICAgICAgICBjciA9IGNsID0gSFsyXTtcblx0ICAgICAgICAgICAgZHIgPSBkbCA9IEhbM107XG5cdCAgICAgICAgICAgIGVyID0gZWwgPSBIWzRdO1xuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICB2YXIgdDtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgICAgICB0ID0gKGFsICsgIE1bb2Zmc2V0K3psW2ldXSl8MDtcblx0ICAgICAgICAgICAgICAgIGlmIChpPDE2KXtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMShibCxjbCxkbCkgKyBobFswXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTwzMikge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGYyKGJsLGNsLGRsKSArIGhsWzFdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDQ4KSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjMoYmwsY2wsZGwpICsgaGxbMl07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NjQpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNChibCxjbCxkbCkgKyBobFszXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNShibCxjbCxkbCkgKyBobFs0XTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHQgPSB0fDA7XG5cdCAgICAgICAgICAgICAgICB0ID0gIHJvdGwodCxzbFtpXSk7XG5cdCAgICAgICAgICAgICAgICB0ID0gKHQrZWwpfDA7XG5cdCAgICAgICAgICAgICAgICBhbCA9IGVsO1xuXHQgICAgICAgICAgICAgICAgZWwgPSBkbDtcblx0ICAgICAgICAgICAgICAgIGRsID0gcm90bChjbCwgMTApO1xuXHQgICAgICAgICAgICAgICAgY2wgPSBibDtcblx0ICAgICAgICAgICAgICAgIGJsID0gdDtcblxuXHQgICAgICAgICAgICAgICAgdCA9IChhciArIE1bb2Zmc2V0K3pyW2ldXSl8MDtcblx0ICAgICAgICAgICAgICAgIGlmIChpPDE2KXtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNShicixjcixkcikgKyBoclswXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTwzMikge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGY0KGJyLGNyLGRyKSArIGhyWzFdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDQ4KSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjMoYnIsY3IsZHIpICsgaHJbMl07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NjQpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMihicixjcixkcikgKyBoclszXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMShicixjcixkcikgKyBocls0XTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHQgPSB0fDA7XG5cdCAgICAgICAgICAgICAgICB0ID0gIHJvdGwodCxzcltpXSkgO1xuXHQgICAgICAgICAgICAgICAgdCA9ICh0K2VyKXwwO1xuXHQgICAgICAgICAgICAgICAgYXIgPSBlcjtcblx0ICAgICAgICAgICAgICAgIGVyID0gZHI7XG5cdCAgICAgICAgICAgICAgICBkciA9IHJvdGwoY3IsIDEwKTtcblx0ICAgICAgICAgICAgICAgIGNyID0gYnI7XG5cdCAgICAgICAgICAgICAgICBiciA9IHQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgdCAgICA9IChIWzFdICsgY2wgKyBkcil8MDtcblx0ICAgICAgICAgICAgSFsxXSA9IChIWzJdICsgZGwgKyBlcil8MDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzNdICsgZWwgKyBhcil8MDtcblx0ICAgICAgICAgICAgSFszXSA9IChIWzRdICsgYWwgKyBicil8MDtcblx0ICAgICAgICAgICAgSFs0XSA9IChIWzBdICsgYmwgKyBjcil8MDtcblx0ICAgICAgICAgICAgSFswXSA9ICB0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbCA8PCA4KSAgfCAobkJpdHNUb3RhbCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWwgPDwgMjQpIHwgKG5CaXRzVG90YWwgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gKGRhdGFXb3Jkcy5sZW5ndGggKyAxKSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2g7XG5cdCAgICAgICAgICAgIHZhciBIID0gaGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgICAgIHZhciBIX2kgPSBIW2ldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwXG5cdCAgICAgICAgICAgICAgICBIW2ldID0gKCgoSF9pIDw8IDgpICB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgKCgoSF9pIDw8IDI0KSB8IChIX2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cblx0ICAgIGZ1bmN0aW9uIGYxKHgsIHksIHopIHtcblx0ICAgICAgICByZXR1cm4gKCh4KSBeICh5KSBeICh6KSk7XG5cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZjIoeCwgeSwgeikge1xuXHQgICAgICAgIHJldHVybiAoKCh4KSYoeSkpIHwgKCh+eCkmKHopKSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGYzKHgsIHksIHopIHtcblx0ICAgICAgICByZXR1cm4gKCgoeCkgfCAofih5KSkpIF4gKHopKTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZjQoeCwgeSwgeikge1xuXHQgICAgICAgIHJldHVybiAoKCh4KSAmICh6KSkgfCAoKHkpJih+KHopKSkpO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBmNSh4LCB5LCB6KSB7XG5cdCAgICAgICAgcmV0dXJuICgoeCkgXiAoKHkpIHwofih6KSkpKTtcblxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiByb3RsKHgsbikge1xuXHQgICAgICAgIHJldHVybiAoeDw8bikgfCAoeD4+PigzMi1uKSk7XG5cdCAgICB9XG5cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlJJUEVNRDE2MCgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuUklQRU1EMTYwKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuUklQRU1EMTYwID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoUklQRU1EMTYwKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNSSVBFTUQxNjAobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjUklQRU1EMTYwID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFJJUEVNRDE2MCk7XG5cdH0oTWF0aCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlJJUEVNRDE2MDtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9zaGExXCIpLCByZXF1aXJlKFwiLi9obWFjXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3NoYTFcIiwgXCIuL2htYWNcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIFNIQTEgPSBDX2FsZ28uU0hBMTtcblx0ICAgIHZhciBITUFDID0gQ19hbGdvLkhNQUM7XG5cblx0ICAgIC8qKlxuXHQgICAgICogUGFzc3dvcmQtQmFzZWQgS2V5IERlcml2YXRpb24gRnVuY3Rpb24gMiBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBQQktERjIgPSBDX2FsZ28uUEJLREYyID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBrZXlTaXplIFRoZSBrZXkgc2l6ZSBpbiB3b3JkcyB0byBnZW5lcmF0ZS4gRGVmYXVsdDogNCAoMTI4IGJpdHMpXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaGVyIHRvIHVzZS4gRGVmYXVsdDogU0hBMVxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpdGVyYXRpb25zIFRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0byBwZXJmb3JtLiBEZWZhdWx0OiAxXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGtleVNpemU6IDEyOC8zMixcblx0ICAgICAgICAgICAgaGFzaGVyOiBTSEExLFxuXHQgICAgICAgICAgICBpdGVyYXRpb25zOiAxXG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoZSBkZXJpdmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5QQktERjIuY3JlYXRlKCk7XG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLlBCS0RGMi5jcmVhdGUoeyBrZXlTaXplOiA4IH0pO1xuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5QQktERjIuY3JlYXRlKHsga2V5U2l6ZTogOCwgaXRlcmF0aW9uczogMTAwMCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2ZnKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbXB1dGVzIHRoZSBQYXNzd29yZC1CYXNlZCBLZXkgRGVyaXZhdGlvbiBGdW5jdGlvbiAyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRlcml2ZWQga2V5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIga2V5ID0ga2RmLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNvbXB1dGU6IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2ZnID0gdGhpcy5jZmc7XG5cblx0ICAgICAgICAgICAgLy8gSW5pdCBITUFDXG5cdCAgICAgICAgICAgIHZhciBobWFjID0gSE1BQy5jcmVhdGUoY2ZnLmhhc2hlciwgcGFzc3dvcmQpO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkS2V5ID0gV29yZEFycmF5LmNyZWF0ZSgpO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tJbmRleCA9IFdvcmRBcnJheS5jcmVhdGUoWzB4MDAwMDAwMDFdKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRlcml2ZWRLZXlXb3JkcyA9IGRlcml2ZWRLZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBibG9ja0luZGV4V29yZHMgPSBibG9ja0luZGV4LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIga2V5U2l6ZSA9IGNmZy5rZXlTaXplO1xuXHQgICAgICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IGNmZy5pdGVyYXRpb25zO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleVxuXHQgICAgICAgICAgICB3aGlsZSAoZGVyaXZlZEtleVdvcmRzLmxlbmd0aCA8IGtleVNpemUpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBibG9jayA9IGhtYWMudXBkYXRlKHNhbHQpLmZpbmFsaXplKGJsb2NrSW5kZXgpO1xuXHQgICAgICAgICAgICAgICAgaG1hYy5yZXNldCgpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBibG9ja1dvcmRzID0gYmxvY2sud29yZHM7XG5cdCAgICAgICAgICAgICAgICB2YXIgYmxvY2tXb3Jkc0xlbmd0aCA9IGJsb2NrV29yZHMubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBJdGVyYXRpb25zXG5cdCAgICAgICAgICAgICAgICB2YXIgaW50ZXJtZWRpYXRlID0gYmxvY2s7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGludGVybWVkaWF0ZSA9IGhtYWMuZmluYWxpemUoaW50ZXJtZWRpYXRlKTtcblx0ICAgICAgICAgICAgICAgICAgICBobWFjLnJlc2V0KCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcm1lZGlhdGVXb3JkcyA9IGludGVybWVkaWF0ZS53b3JkcztcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFhPUiBpbnRlcm1lZGlhdGUgd2l0aCBibG9ja1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYmxvY2tXb3Jkc0xlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrV29yZHNbal0gXj0gaW50ZXJtZWRpYXRlV29yZHNbal07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBkZXJpdmVkS2V5LmNvbmNhdChibG9jayk7XG5cdCAgICAgICAgICAgICAgICBibG9ja0luZGV4V29yZHNbMF0rKztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBkZXJpdmVkS2V5LnNpZ0J5dGVzID0ga2V5U2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGRlcml2ZWRLZXk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQ29tcHV0ZXMgdGhlIFBhc3N3b3JkLUJhc2VkIEtleSBEZXJpdmF0aW9uIEZ1bmN0aW9uIDIuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LlxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIGNvbXB1dGF0aW9uLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRlcml2ZWQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDggfSk7XG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLlBCS0RGMihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pO1xuXHQgICAgICovXG5cdCAgICBDLlBCS0RGMiA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgY2ZnKSB7XG5cdCAgICAgICAgcmV0dXJuIFBCS0RGMi5jcmVhdGUoY2ZnKS5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgIH07XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuUEJLREYyO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogQ2lwaGVyIEZlZWRiYWNrIGJsb2NrIG1vZGUuXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLkNGQiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgQ0ZCID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgQ0ZCLkVuY3J5cHRvciA9IENGQi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXI7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgIGdlbmVyYXRlS2V5c3RyZWFtQW5kRW5jcnlwdC5jYWxsKHRoaXMsIHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSwgY2lwaGVyKTtcblxuXHQgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2tcblx0ICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gd29yZHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBibG9ja1NpemUpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBDRkIuRGVjcnlwdG9yID0gQ0ZCLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcjtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrXG5cdCAgICAgICAgICAgIHZhciB0aGlzQmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7XG5cblx0ICAgICAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1BbmRFbmNyeXB0LmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpO1xuXG5cdCAgICAgICAgICAgIC8vIFRoaXMgYmxvY2sgYmVjb21lcyB0aGUgcHJldmlvdXMgYmxvY2tcblx0ICAgICAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gdGhpc0Jsb2NrO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBmdW5jdGlvbiBnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQod29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpIHtcblx0ICAgICAgICB2YXIga2V5c3RyZWFtO1xuXG5cdCAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjtcblxuXHQgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbVxuXHQgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICBrZXlzdHJlYW0gPSBpdi5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGtleXN0cmVhbSA9IHRoaXMuX3ByZXZCbG9jaztcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayhrZXlzdHJlYW0sIDApO1xuXG5cdCAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0ga2V5c3RyZWFtW2ldO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIENGQjtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5tb2RlLkNGQjtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqXG5cdCAqIENvdW50ZXIgYmxvY2sgbW9kZS5cblx0ICovXG5cdENyeXB0b0pTLm1vZGUuQ1RSID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBDVFIgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdCAgICB2YXIgRW5jcnlwdG9yID0gQ1RSLkVuY3J5cHRvciA9IENUUi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXHQgICAgICAgICAgICB2YXIgY291bnRlciA9IHRoaXMuX2NvdW50ZXI7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgY291bnRlciA9IHRoaXMuX2NvdW50ZXIgPSBpdi5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIGtleXN0cmVhbSA9IGNvdW50ZXIuc2xpY2UoMCk7XG5cdCAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTtcblxuXHQgICAgICAgICAgICAvLyBJbmNyZW1lbnQgY291bnRlclxuXHQgICAgICAgICAgICBjb3VudGVyW2Jsb2NrU2l6ZSAtIDFdID0gKGNvdW50ZXJbYmxvY2tTaXplIC0gMV0gKyAxKSB8IDBcblxuXHQgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBDVFIuRGVjcnlwdG9yID0gRW5jcnlwdG9yO1xuXG5cdCAgICByZXR1cm4gQ1RSO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLm1vZGUuQ1RSO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKiogQHByZXNlcnZlXG5cdCAqIENvdW50ZXIgYmxvY2sgbW9kZSBjb21wYXRpYmxlIHdpdGggIERyIEJyaWFuIEdsYWRtYW4gZmlsZWVuYy5jXG5cdCAqIGRlcml2ZWQgZnJvbSBDcnlwdG9KUy5tb2RlLkNUUlxuXHQgKiBKYW4gSHJ1YnkgamhydWJ5LndlYkBnbWFpbC5jb21cblx0ICovXG5cdENyeXB0b0pTLm1vZGUuQ1RSR2xhZG1hbiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgQ1RSR2xhZG1hbiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7XG5cblx0XHRmdW5jdGlvbiBpbmNXb3JkKHdvcmQpXG5cdFx0e1xuXHRcdFx0aWYgKCgod29yZCA+PiAyNCkgJiAweGZmKSA9PT0gMHhmZikgeyAvL292ZXJmbG93XG5cdFx0XHR2YXIgYjEgPSAod29yZCA+PiAxNikmMHhmZjtcblx0XHRcdHZhciBiMiA9ICh3b3JkID4+IDgpJjB4ZmY7XG5cdFx0XHR2YXIgYjMgPSB3b3JkICYgMHhmZjtcblxuXHRcdFx0aWYgKGIxID09PSAweGZmKSAvLyBvdmVyZmxvdyBiMVxuXHRcdFx0e1xuXHRcdFx0YjEgPSAwO1xuXHRcdFx0aWYgKGIyID09PSAweGZmKVxuXHRcdFx0e1xuXHRcdFx0XHRiMiA9IDA7XG5cdFx0XHRcdGlmIChiMyA9PT0gMHhmZilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGIzID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQrK2IzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdCsrYjI7XG5cdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHQrK2IxO1xuXHRcdFx0fVxuXG5cdFx0XHR3b3JkID0gMDtcblx0XHRcdHdvcmQgKz0gKGIxIDw8IDE2KTtcblx0XHRcdHdvcmQgKz0gKGIyIDw8IDgpO1xuXHRcdFx0d29yZCArPSBiMztcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdHdvcmQgKz0gKDB4MDEgPDwgMjQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHdvcmQ7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaW5jQ291bnRlcihjb3VudGVyKVxuXHRcdHtcblx0XHRcdGlmICgoY291bnRlclswXSA9IGluY1dvcmQoY291bnRlclswXSkpID09PSAwKVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBlbmNyX2RhdGEgaW4gZmlsZWVuYy5jIGZyb20gIERyIEJyaWFuIEdsYWRtYW4ncyBjb3VudHMgb25seSB3aXRoIERXT1JEIGogPCA4XG5cdFx0XHRcdGNvdW50ZXJbMV0gPSBpbmNXb3JkKGNvdW50ZXJbMV0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNvdW50ZXI7XG5cdFx0fVxuXG5cdCAgICB2YXIgRW5jcnlwdG9yID0gQ1RSR2xhZG1hbi5FbmNyeXB0b3IgPSBDVFJHbGFkbWFuLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlclxuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7XG5cdCAgICAgICAgICAgIHZhciBjb3VudGVyID0gdGhpcy5fY291bnRlcjtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBrZXlzdHJlYW1cblx0ICAgICAgICAgICAgaWYgKGl2KSB7XG5cdCAgICAgICAgICAgICAgICBjb3VudGVyID0gdGhpcy5fY291bnRlciA9IGl2LnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9pdiA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgICAgfVxuXG5cdFx0XHRcdGluY0NvdW50ZXIoY291bnRlcik7XG5cblx0XHRcdFx0dmFyIGtleXN0cmVhbSA9IGNvdW50ZXIuc2xpY2UoMCk7XG5cdCAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTtcblxuXHQgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBDVFJHbGFkbWFuLkRlY3J5cHRvciA9IEVuY3J5cHRvcjtcblxuXHQgICAgcmV0dXJuIENUUkdsYWRtYW47XG5cdH0oKSk7XG5cblxuXG5cblx0cmV0dXJuIENyeXB0b0pTLm1vZGUuQ1RSR2xhZG1hbjtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqXG5cdCAqIE91dHB1dCBGZWVkYmFjayBibG9jayBtb2RlLlxuXHQgKi9cblx0Q3J5cHRvSlMubW9kZS5PRkIgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIE9GQiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7XG5cblx0ICAgIHZhciBFbmNyeXB0b3IgPSBPRkIuRW5jcnlwdG9yID0gT0ZCLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlclxuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7XG5cdCAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSB0aGlzLl9rZXlzdHJlYW07XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAga2V5c3RyZWFtID0gdGhpcy5fa2V5c3RyZWFtID0gaXYuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKTtcblxuXHQgICAgICAgICAgICAvLyBFbmNyeXB0XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBPRkIuRGVjcnlwdG9yID0gRW5jcnlwdG9yO1xuXG5cdCAgICByZXR1cm4gT0ZCO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLm1vZGUuT0ZCO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogRWxlY3Ryb25pYyBDb2RlYm9vayBibG9jayBtb2RlLlxuXHQgKi9cblx0Q3J5cHRvSlMubW9kZS5FQ0IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIEVDQiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKCk7XG5cblx0ICAgIEVDQi5FbmNyeXB0b3IgPSBFQ0IuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sod29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIEVDQi5EZWNyeXB0b3IgPSBFQ0IuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NpcGhlci5kZWNyeXB0QmxvY2sod29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIHJldHVybiBFQ0I7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMubW9kZS5FQ0I7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBBTlNJIFguOTIzIHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAqL1xuXHRDcnlwdG9KUy5wYWQuQW5zaVg5MjMgPSB7XG5cdCAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgZGF0YVNpZ0J5dGVzID0gZGF0YS5zaWdCeXRlcztcblx0ICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgLy8gQ291bnQgcGFkZGluZyBieXRlc1xuXHQgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gYmxvY2tTaXplQnl0ZXMgLSBkYXRhU2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcztcblxuXHQgICAgICAgIC8vIENvbXB1dGUgbGFzdCBieXRlIHBvc2l0aW9uXG5cdCAgICAgICAgdmFyIGxhc3RCeXRlUG9zID0gZGF0YVNpZ0J5dGVzICsgblBhZGRpbmdCeXRlcyAtIDE7XG5cblx0ICAgICAgICAvLyBQYWRcblx0ICAgICAgICBkYXRhLmNsYW1wKCk7XG5cdCAgICAgICAgZGF0YS53b3Jkc1tsYXN0Qnl0ZVBvcyA+Pj4gMl0gfD0gblBhZGRpbmdCeXRlcyA8PCAoMjQgLSAobGFzdEJ5dGVQb3MgJSA0KSAqIDgpO1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgKz0gblBhZGRpbmdCeXRlcztcblx0ICAgIH0sXG5cblx0ICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIC8vIEdldCBudW1iZXIgb2YgcGFkZGluZyBieXRlcyBmcm9tIGxhc3QgYnl0ZVxuXHQgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gZGF0YS53b3Jkc1soZGF0YS5zaWdCeXRlcyAtIDEpID4+PiAyXSAmIDB4ZmY7XG5cblx0ICAgICAgICAvLyBSZW1vdmUgcGFkZGluZ1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlcztcblx0ICAgIH1cblx0fTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5wYWQuQW5zaXg5MjM7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBJU08gMTAxMjYgcGFkZGluZyBzdHJhdGVneS5cblx0ICovXG5cdENyeXB0b0pTLnBhZC5Jc28xMDEyNiA9IHtcblx0ICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXNcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzO1xuXG5cdCAgICAgICAgLy8gUGFkXG5cdCAgICAgICAgZGF0YS5jb25jYXQoQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oblBhZGRpbmdCeXRlcyAtIDEpKS5cblx0ICAgICAgICAgICAgIGNvbmNhdChDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbblBhZGRpbmdCeXRlcyA8PCAyNF0sIDEpKTtcblx0ICAgIH0sXG5cblx0ICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIC8vIEdldCBudW1iZXIgb2YgcGFkZGluZyBieXRlcyBmcm9tIGxhc3QgYnl0ZVxuXHQgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gZGF0YS53b3Jkc1soZGF0YS5zaWdCeXRlcyAtIDEpID4+PiAyXSAmIDB4ZmY7XG5cblx0ICAgICAgICAvLyBSZW1vdmUgcGFkZGluZ1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlcztcblx0ICAgIH1cblx0fTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5wYWQuSXNvMTAxMjY7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBJU08vSUVDIDk3OTctMSBQYWRkaW5nIE1ldGhvZCAyLlxuXHQgKi9cblx0Q3J5cHRvSlMucGFkLklzbzk3OTcxID0ge1xuXHQgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgLy8gQWRkIDB4ODAgYnl0ZVxuXHQgICAgICAgIGRhdGEuY29uY2F0KENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDgwMDAwMDAwXSwgMSkpO1xuXG5cdCAgICAgICAgLy8gWmVybyBwYWQgdGhlIHJlc3Rcblx0ICAgICAgICBDcnlwdG9KUy5wYWQuWmVyb1BhZGRpbmcucGFkKGRhdGEsIGJsb2NrU2l6ZSk7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAvLyBSZW1vdmUgemVybyBwYWRkaW5nXG5cdCAgICAgICAgQ3J5cHRvSlMucGFkLlplcm9QYWRkaW5nLnVucGFkKGRhdGEpO1xuXG5cdCAgICAgICAgLy8gUmVtb3ZlIG9uZSBtb3JlIGJ5dGUgLS0gdGhlIDB4ODAgYnl0ZVxuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMtLTtcblx0ICAgIH1cblx0fTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5wYWQuSXNvOTc5NzE7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBaZXJvIHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAqL1xuXHRDcnlwdG9KUy5wYWQuWmVyb1BhZGRpbmcgPSB7XG5cdCAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAvLyBQYWRcblx0ICAgICAgICBkYXRhLmNsYW1wKCk7XG5cdCAgICAgICAgZGF0YS5zaWdCeXRlcyArPSBibG9ja1NpemVCeXRlcyAtICgoZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzKSB8fCBibG9ja1NpemVCeXRlcyk7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgLy8gVW5wYWRcblx0ICAgICAgICB2YXIgaSA9IGRhdGEuc2lnQnl0ZXMgLSAxO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSBkYXRhLnNpZ0J5dGVzIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgICAgICAgaWYgKCgoZGF0YVdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZikpIHtcblx0ICAgICAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBpICsgMTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9O1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLnBhZC5aZXJvUGFkZGluZztcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqXG5cdCAqIEEgbm9vcCBwYWRkaW5nIHN0cmF0ZWd5LlxuXHQgKi9cblx0Q3J5cHRvSlMucGFkLk5vUGFkZGluZyA9IHtcblx0ICAgIHBhZDogZnVuY3Rpb24gKCkge1xuXHQgICAgfSxcblxuXHQgICAgdW5wYWQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgIH1cblx0fTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5wYWQuTm9QYWRkaW5nO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQ2lwaGVyUGFyYW1zID0gQ19saWIuQ2lwaGVyUGFyYW1zO1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cdCAgICB2YXIgSGV4ID0gQ19lbmMuSGV4O1xuXHQgICAgdmFyIENfZm9ybWF0ID0gQy5mb3JtYXQ7XG5cblx0ICAgIHZhciBIZXhGb3JtYXR0ZXIgPSBDX2Zvcm1hdC5IZXggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgdGhlIGNpcGhlcnRleHQgb2YgYSBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc30gY2lwaGVyUGFyYW1zIFRoZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBoZXhTdHJpbmcgPSBDcnlwdG9KUy5mb3JtYXQuSGV4LnN0cmluZ2lmeShjaXBoZXJQYXJhbXMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKGNpcGhlclBhcmFtcykge1xuXHQgICAgICAgICAgICByZXR1cm4gY2lwaGVyUGFyYW1zLmNpcGhlcnRleHQudG9TdHJpbmcoSGV4KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgY2lwaGVydGV4dCBzdHJpbmcgdG8gYSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBUaGUgaGV4YWRlY2ltYWxseSBlbmNvZGVkIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMuZm9ybWF0LkhleC5wYXJzZShoZXhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoaW5wdXQpIHtcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBIZXgucGFyc2UoaW5wdXQpO1xuXHQgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7IGNpcGhlcnRleHQ6IGNpcGhlcnRleHQgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5mb3JtYXQuSGV4O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9lbmMtYmFzZTY0XCIsIFwiLi9tZDVcIiwgXCIuL2V2cGtkZlwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBCbG9ja0NpcGhlciA9IENfbGliLkJsb2NrQ2lwaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gTG9va3VwIHRhYmxlc1xuXHQgICAgdmFyIFNCT1ggPSBbXTtcblx0ICAgIHZhciBJTlZfU0JPWCA9IFtdO1xuXHQgICAgdmFyIFNVQl9NSVhfMCA9IFtdO1xuXHQgICAgdmFyIFNVQl9NSVhfMSA9IFtdO1xuXHQgICAgdmFyIFNVQl9NSVhfMiA9IFtdO1xuXHQgICAgdmFyIFNVQl9NSVhfMyA9IFtdO1xuXHQgICAgdmFyIElOVl9TVUJfTUlYXzAgPSBbXTtcblx0ICAgIHZhciBJTlZfU1VCX01JWF8xID0gW107XG5cdCAgICB2YXIgSU5WX1NVQl9NSVhfMiA9IFtdO1xuXHQgICAgdmFyIElOVl9TVUJfTUlYXzMgPSBbXTtcblxuXHQgICAgLy8gQ29tcHV0ZSBsb29rdXAgdGFibGVzXG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8vIENvbXB1dGUgZG91YmxlIHRhYmxlXG5cdCAgICAgICAgdmFyIGQgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG5cdCAgICAgICAgICAgIGlmIChpIDwgMTI4KSB7XG5cdCAgICAgICAgICAgICAgICBkW2ldID0gaSA8PCAxO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgZFtpXSA9IChpIDw8IDEpIF4gMHgxMWI7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBXYWxrIEdGKDJeOClcblx0ICAgICAgICB2YXIgeCA9IDA7XG5cdCAgICAgICAgdmFyIHhpID0gMDtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgc2JveFxuXHQgICAgICAgICAgICB2YXIgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KTtcblx0ICAgICAgICAgICAgc3ggPSAoc3ggPj4+IDgpIF4gKHN4ICYgMHhmZikgXiAweDYzO1xuXHQgICAgICAgICAgICBTQk9YW3hdID0gc3g7XG5cdCAgICAgICAgICAgIElOVl9TQk9YW3N4XSA9IHg7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBtdWx0aXBsaWNhdGlvblxuXHQgICAgICAgICAgICB2YXIgeDIgPSBkW3hdO1xuXHQgICAgICAgICAgICB2YXIgeDQgPSBkW3gyXTtcblx0ICAgICAgICAgICAgdmFyIHg4ID0gZFt4NF07XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zIHRhYmxlc1xuXHQgICAgICAgICAgICB2YXIgdCA9IChkW3N4XSAqIDB4MTAxKSBeIChzeCAqIDB4MTAxMDEwMCk7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfMFt4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KTtcblx0ICAgICAgICAgICAgU1VCX01JWF8xW3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KTtcblx0ICAgICAgICAgICAgU1VCX01JWF8yW3hdID0gKHQgPDwgOCkgIHwgKHQgPj4+IDI0KTtcblx0ICAgICAgICAgICAgU1VCX01JWF8zW3hdID0gdDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIGludiBzdWIgYnl0ZXMsIGludiBtaXggY29sdW1ucyB0YWJsZXNcblx0ICAgICAgICAgICAgdmFyIHQgPSAoeDggKiAweDEwMTAxMDEpIF4gKHg0ICogMHgxMDAwMSkgXiAoeDIgKiAweDEwMSkgXiAoeCAqIDB4MTAxMDEwMCk7XG5cdCAgICAgICAgICAgIElOVl9TVUJfTUlYXzBbc3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpO1xuXHQgICAgICAgICAgICBJTlZfU1VCX01JWF8xW3N4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNik7XG5cdCAgICAgICAgICAgIElOVl9TVUJfTUlYXzJbc3hdID0gKHQgPDwgOCkgIHwgKHQgPj4+IDI0KTtcblx0ICAgICAgICAgICAgSU5WX1NVQl9NSVhfM1tzeF0gPSB0O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgbmV4dCBjb3VudGVyXG5cdCAgICAgICAgICAgIGlmICgheCkge1xuXHQgICAgICAgICAgICAgICAgeCA9IHhpID0gMTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHggPSB4MiBeIGRbZFtkW3g4IF4geDJdXV07XG5cdCAgICAgICAgICAgICAgICB4aSBePSBkW2RbeGldXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8vIFByZWNvbXB1dGVkIFJjb24gbG9va3VwXG5cdCAgICB2YXIgUkNPTiA9IFsweDAwLCAweDAxLCAweDAyLCAweDA0LCAweDA4LCAweDEwLCAweDIwLCAweDQwLCAweDgwLCAweDFiLCAweDM2XTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBRVMgYmxvY2sgY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEFFUyA9IENfYWxnby5BRVMgPSBCbG9ja0NpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciB0O1xuXG5cdCAgICAgICAgICAgIC8vIFNraXAgcmVzZXQgb2YgblJvdW5kcyBoYXMgYmVlbiBzZXQgYmVmb3JlIGFuZCBrZXkgZGlkIG5vdCBjaGFuZ2Vcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX25Sb3VuZHMgJiYgdGhpcy5fa2V5UHJpb3JSZXNldCA9PT0gdGhpcy5fa2V5KSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuX2tleVByaW9yUmVzZXQgPSB0aGlzLl9rZXk7XG5cdCAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGtleVNpemUgPSBrZXkuc2lnQnl0ZXMgLyA0O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgbnVtYmVyIG9mIHJvdW5kc1xuXHQgICAgICAgICAgICB2YXIgblJvdW5kcyA9IHRoaXMuX25Sb3VuZHMgPSBrZXlTaXplICsgNjtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIG51bWJlciBvZiBrZXkgc2NoZWR1bGUgcm93c1xuXHQgICAgICAgICAgICB2YXIga3NSb3dzID0gKG5Sb3VuZHMgKyAxKSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBrZXkgc2NoZWR1bGVcblx0ICAgICAgICAgICAgdmFyIGtleVNjaGVkdWxlID0gdGhpcy5fa2V5U2NoZWR1bGUgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIga3NSb3cgPSAwOyBrc1JvdyA8IGtzUm93czsga3NSb3crKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKGtzUm93IDwga2V5U2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGtleVNjaGVkdWxlW2tzUm93XSA9IGtleVdvcmRzW2tzUm93XTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdCA9IGtleVNjaGVkdWxlW2tzUm93IC0gMV07XG5cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIShrc1JvdyAlIGtleVNpemUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJvdCB3b3JkXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHQgPSAodCA8PCA4KSB8ICh0ID4+PiAyNCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3ViIHdvcmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCA9IChTQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3QgJiAweGZmXTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaXggUmNvblxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0IF49IFJDT05bKGtzUm93IC8ga2V5U2l6ZSkgfCAwXSA8PCAyNDtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleVNpemUgPiA2ICYmIGtzUm93ICUga2V5U2l6ZSA9PSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YiB3b3JkXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHQgPSAoU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFt0ICYgMHhmZl07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAga2V5U2NoZWR1bGVba3NSb3ddID0ga2V5U2NoZWR1bGVba3NSb3cgLSBrZXlTaXplXSBeIHQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIGludiBrZXkgc2NoZWR1bGVcblx0ICAgICAgICAgICAgdmFyIGludktleVNjaGVkdWxlID0gdGhpcy5faW52S2V5U2NoZWR1bGUgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaW52S3NSb3cgPSAwOyBpbnZLc1JvdyA8IGtzUm93czsgaW52S3NSb3crKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGtzUm93ID0ga3NSb3dzIC0gaW52S3NSb3c7XG5cblx0ICAgICAgICAgICAgICAgIGlmIChpbnZLc1JvdyAlIDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2tzUm93XTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrc1JvdyAtIDRdO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBpZiAoaW52S3NSb3cgPCA0IHx8IGtzUm93IDw9IDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSB0O1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBpbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSBJTlZfU1VCX01JWF8wW1NCT1hbdCA+Pj4gMjRdXSBeIElOVl9TVUJfTUlYXzFbU0JPWFsodCA+Pj4gMTYpICYgMHhmZl1dIF5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTlZfU1VCX01JWF8yW1NCT1hbKHQgPj4+IDgpICYgMHhmZl1dIF4gSU5WX1NVQl9NSVhfM1tTQk9YW3QgJiAweGZmXV07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZW5jcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2RvQ3J5cHRCbG9jayhNLCBvZmZzZXQsIHRoaXMuX2tleVNjaGVkdWxlLCBTVUJfTUlYXzAsIFNVQl9NSVhfMSwgU1VCX01JWF8yLCBTVUJfTUlYXzMsIFNCT1gpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBkZWNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU3dhcCAybmQgYW5kIDR0aCByb3dzXG5cdCAgICAgICAgICAgIHZhciB0ID0gTVtvZmZzZXQgKyAxXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IE1bb2Zmc2V0ICsgM107XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgM10gPSB0O1xuXG5cdCAgICAgICAgICAgIHRoaXMuX2RvQ3J5cHRCbG9jayhNLCBvZmZzZXQsIHRoaXMuX2ludktleVNjaGVkdWxlLCBJTlZfU1VCX01JWF8wLCBJTlZfU1VCX01JWF8xLCBJTlZfU1VCX01JWF8yLCBJTlZfU1VCX01JWF8zLCBJTlZfU0JPWCk7XG5cblx0ICAgICAgICAgICAgLy8gSW52IHN3YXAgMm5kIGFuZCA0dGggcm93c1xuXHQgICAgICAgICAgICB2YXIgdCA9IE1bb2Zmc2V0ICsgMV07XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgMV0gPSBNW29mZnNldCArIDNdO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDNdID0gdDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvQ3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCwga2V5U2NoZWR1bGUsIFNVQl9NSVhfMCwgU1VCX01JWF8xLCBTVUJfTUlYXzIsIFNVQl9NSVhfMywgU0JPWCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgblJvdW5kcyA9IHRoaXMuX25Sb3VuZHM7XG5cblx0ICAgICAgICAgICAgLy8gR2V0IGlucHV0LCBhZGQgcm91bmQga2V5XG5cdCAgICAgICAgICAgIHZhciBzMCA9IE1bb2Zmc2V0XSAgICAgXiBrZXlTY2hlZHVsZVswXTtcblx0ICAgICAgICAgICAgdmFyIHMxID0gTVtvZmZzZXQgKyAxXSBeIGtleVNjaGVkdWxlWzFdO1xuXHQgICAgICAgICAgICB2YXIgczIgPSBNW29mZnNldCArIDJdIF4ga2V5U2NoZWR1bGVbMl07XG5cdCAgICAgICAgICAgIHZhciBzMyA9IE1bb2Zmc2V0ICsgM10gXiBrZXlTY2hlZHVsZVszXTtcblxuXHQgICAgICAgICAgICAvLyBLZXkgc2NoZWR1bGUgcm93IGNvdW50ZXJcblx0ICAgICAgICAgICAgdmFyIGtzUm93ID0gNDtcblxuXHQgICAgICAgICAgICAvLyBSb3VuZHNcblx0ICAgICAgICAgICAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IG5Sb3VuZHM7IHJvdW5kKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNoaWZ0IHJvd3MsIHN1YiBieXRlcywgbWl4IGNvbHVtbnMsIGFkZCByb3VuZCBrZXlcblx0ICAgICAgICAgICAgICAgIHZhciB0MCA9IFNVQl9NSVhfMFtzMCA+Pj4gMjRdIF4gU1VCX01JWF8xWyhzMSA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYXzJbKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWF8zW3MzICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblx0ICAgICAgICAgICAgICAgIHZhciB0MSA9IFNVQl9NSVhfMFtzMSA+Pj4gMjRdIF4gU1VCX01JWF8xWyhzMiA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYXzJbKHMzID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWF8zW3MwICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblx0ICAgICAgICAgICAgICAgIHZhciB0MiA9IFNVQl9NSVhfMFtzMiA+Pj4gMjRdIF4gU1VCX01JWF8xWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYXzJbKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWF8zW3MxICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblx0ICAgICAgICAgICAgICAgIHZhciB0MyA9IFNVQl9NSVhfMFtzMyA+Pj4gMjRdIF4gU1VCX01JWF8xWyhzMCA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYXzJbKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWF8zW3MyICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHN0YXRlXG5cdCAgICAgICAgICAgICAgICBzMCA9IHQwO1xuXHQgICAgICAgICAgICAgICAgczEgPSB0MTtcblx0ICAgICAgICAgICAgICAgIHMyID0gdDI7XG5cdCAgICAgICAgICAgICAgICBzMyA9IHQzO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hpZnQgcm93cywgc3ViIGJ5dGVzLCBhZGQgcm91bmQga2V5XG5cdCAgICAgICAgICAgIHZhciB0MCA9ICgoU0JPWFtzMCA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMSA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMyID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMyAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICB2YXIgdDEgPSAoKFNCT1hbczEgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczIgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMyA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczAgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblx0ICAgICAgICAgICAgdmFyIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cdCAgICAgICAgICAgIHZhciB0MyA9ICgoU0JPWFtzMyA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMxID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMiAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXG5cdCAgICAgICAgICAgIC8vIFNldCBvdXRwdXRcblx0ICAgICAgICAgICAgTVtvZmZzZXRdICAgICA9IHQwO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDFdID0gdDE7XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgMl0gPSB0Mjtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAzXSA9IHQzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBrZXlTaXplOiAyNTYvMzJcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLkFFUy5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5BRVMgPSBCbG9ja0NpcGhlci5fY3JlYXRlSGVscGVyKEFFUyk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuQUVTO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9lbmMtYmFzZTY0XCIsIFwiLi9tZDVcIiwgXCIuL2V2cGtkZlwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIFBlcm11dGVkIENob2ljZSAxIGNvbnN0YW50c1xuXHQgICAgdmFyIFBDMSA9IFtcblx0ICAgICAgICA1NywgNDksIDQxLCAzMywgMjUsIDE3LCA5LCAgMSxcblx0ICAgICAgICA1OCwgNTAsIDQyLCAzNCwgMjYsIDE4LCAxMCwgMixcblx0ICAgICAgICA1OSwgNTEsIDQzLCAzNSwgMjcsIDE5LCAxMSwgMyxcblx0ICAgICAgICA2MCwgNTIsIDQ0LCAzNiwgNjMsIDU1LCA0NywgMzksXG5cdCAgICAgICAgMzEsIDIzLCAxNSwgNywgIDYyLCA1NCwgNDYsIDM4LFxuXHQgICAgICAgIDMwLCAyMiwgMTQsIDYsICA2MSwgNTMsIDQ1LCAzNyxcblx0ICAgICAgICAyOSwgMjEsIDEzLCA1LCAgMjgsIDIwLCAxMiwgNFxuXHQgICAgXTtcblxuXHQgICAgLy8gUGVybXV0ZWQgQ2hvaWNlIDIgY29uc3RhbnRzXG5cdCAgICB2YXIgUEMyID0gW1xuXHQgICAgICAgIDE0LCAxNywgMTEsIDI0LCAxLCAgNSxcblx0ICAgICAgICAzLCAgMjgsIDE1LCA2LCAgMjEsIDEwLFxuXHQgICAgICAgIDIzLCAxOSwgMTIsIDQsICAyNiwgOCxcblx0ICAgICAgICAxNiwgNywgIDI3LCAyMCwgMTMsIDIsXG5cdCAgICAgICAgNDEsIDUyLCAzMSwgMzcsIDQ3LCA1NSxcblx0ICAgICAgICAzMCwgNDAsIDUxLCA0NSwgMzMsIDQ4LFxuXHQgICAgICAgIDQ0LCA0OSwgMzksIDU2LCAzNCwgNTMsXG5cdCAgICAgICAgNDYsIDQyLCA1MCwgMzYsIDI5LCAzMlxuXHQgICAgXTtcblxuXHQgICAgLy8gQ3VtdWxhdGl2ZSBiaXQgc2hpZnQgY29uc3RhbnRzXG5cdCAgICB2YXIgQklUX1NISUZUUyA9IFsxLCAgMiwgIDQsICA2LCAgOCwgIDEwLCAxMiwgMTQsIDE1LCAxNywgMTksIDIxLCAyMywgMjUsIDI3LCAyOF07XG5cblx0ICAgIC8vIFNCT1hlcyBhbmQgcm91bmQgcGVybXV0YXRpb24gY29uc3RhbnRzXG5cdCAgICB2YXIgU0JPWF9QID0gW1xuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDgwODIwMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDAwMDogMHg4MDAwLFxuXHQgICAgICAgICAgICAweDIwMDAwMDAwOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHgzMDAwMDAwMDogMHgyLFxuXHQgICAgICAgICAgICAweDQwMDAwMDAwOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg1MDAwMDAwMDogMHg4MDgyMDIsXG5cdCAgICAgICAgICAgIDB4NjAwMDAwMDA6IDB4ODAwMjAyLFxuXHQgICAgICAgICAgICAweDcwMDAwMDAwOiAweDgwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMDogMHgyMDIsXG5cdCAgICAgICAgICAgIDB4OTAwMDAwMDA6IDB4ODAwMjAwLFxuXHQgICAgICAgICAgICAweGEwMDAwMDAwOiAweDgyMDAsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwMDA6IDB4ODA4MDAwLFxuXHQgICAgICAgICAgICAweGMwMDAwMDAwOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwMDA6IDB4ODAwMDAyLFxuXHQgICAgICAgICAgICAweGUwMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZjAwMDAwMDA6IDB4ODIwMixcblx0ICAgICAgICAgICAgMHg4MDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDAwMDA6IDB4ODA4MjAyLFxuXHQgICAgICAgICAgICAweDI4MDAwMDAwOiAweDgyMDIsXG5cdCAgICAgICAgICAgIDB4MzgwMDAwMDA6IDB4ODAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDAwMDogMHg4MDgyMDAsXG5cdCAgICAgICAgICAgIDB4NTgwMDAwMDA6IDB4MjAwLFxuXHQgICAgICAgICAgICAweDY4MDAwMDAwOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHg3ODAwMDAwMDogMHgyLFxuXHQgICAgICAgICAgICAweDg4MDAwMDAwOiAweDgwMDIwMCxcblx0ICAgICAgICAgICAgMHg5ODAwMDAwMDogMHg4MjAwLFxuXHQgICAgICAgICAgICAweGE4MDAwMDAwOiAweDgwODAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDAwMDogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwMDA6IDB4ODAwMDAyLFxuXHQgICAgICAgICAgICAweGQ4MDAwMDAwOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZTgwMDAwMDA6IDB4MjAyLFxuXHQgICAgICAgICAgICAweGY4MDAwMDAwOiAweDgwMDAwMCxcblx0ICAgICAgICAgICAgMHgxOiAweDgwMDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwMDE6IDB4Mixcblx0ICAgICAgICAgICAgMHgyMDAwMDAwMTogMHg4MDgyMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwMDE6IDB4ODAwMDAwLFxuXHQgICAgICAgICAgICAweDQwMDAwMDAxOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHg1MDAwMDAwMTogMHg4MjAwLFxuXHQgICAgICAgICAgICAweDYwMDAwMDAxOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg3MDAwMDAwMTogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDE6IDB4ODA4MjAyLFxuXHQgICAgICAgICAgICAweDkwMDAwMDAxOiAweDgwODAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDAwMTogMHg4MDAwMDIsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwMDE6IDB4ODIwMixcblx0ICAgICAgICAgICAgMHhjMDAwMDAwMTogMHgyMDIsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwMDE6IDB4ODAwMjAwLFxuXHQgICAgICAgICAgICAweGUwMDAwMDAxOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZjAwMDAwMDE6IDB4MCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxOiAweDgwODIwMixcblx0ICAgICAgICAgICAgMHgxODAwMDAwMTogMHg4MDgwMDAsXG5cdCAgICAgICAgICAgIDB4MjgwMDAwMDE6IDB4ODAwMDAwLFxuXHQgICAgICAgICAgICAweDM4MDAwMDAxOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDAwMTogMHg4MDAwLFxuXHQgICAgICAgICAgICAweDU4MDAwMDAxOiAweDgwMDAwMixcblx0ICAgICAgICAgICAgMHg2ODAwMDAwMTogMHgyLFxuXHQgICAgICAgICAgICAweDc4MDAwMDAxOiAweDgyMDIsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwMDE6IDB4ODAwMixcblx0ICAgICAgICAgICAgMHg5ODAwMDAwMTogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4YTgwMDAwMDE6IDB4MjAyLFxuXHQgICAgICAgICAgICAweGI4MDAwMDAxOiAweDgwODIwMCxcblx0ICAgICAgICAgICAgMHhjODAwMDAwMTogMHg4MDAyMDAsXG5cdCAgICAgICAgICAgIDB4ZDgwMDAwMDE6IDB4MCxcblx0ICAgICAgICAgICAgMHhlODAwMDAwMTogMHg4MjAwLFxuXHQgICAgICAgICAgICAweGY4MDAwMDAxOiAweDgwODAwMlxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICAweDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwMDogMHg0MDAwLFxuXHQgICAgICAgICAgICAweDIwMDAwMDA6IDB4ODAwMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwMDogMHg0MDA4MDAxMCxcblx0ICAgICAgICAgICAgMHg0MDAwMDAwOiAweDQwMDAwMDEwLFxuXHQgICAgICAgICAgICAweDUwMDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4NjAwMDAwMDogMHg0MDAwNDAwMCxcblx0ICAgICAgICAgICAgMHg3MDAwMDAwOiAweDEwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA6IDB4ODQwMDAsXG5cdCAgICAgICAgICAgIDB4OTAwMDAwMDogMHg0MDAwNDAxMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDAwOiAweDQwMDAwMDAwLFxuXHQgICAgICAgICAgICAweGIwMDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4YzAwMDAwMDogMHg4MDAxMCxcblx0ICAgICAgICAgICAgMHhkMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZTAwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweGYwMDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwOiAweDQwMDA0MDAwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4MjgwMDAwMDogMHgxMCxcblx0ICAgICAgICAgICAgMHgzODAwMDAwOiAweDQwMDA0MDEwLFxuXHQgICAgICAgICAgICAweDQ4MDAwMDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4NTgwMDAwMDogMHg0MDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg2ODAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDc4MDAwMDA6IDB4NDAwODAwMTAsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwMDogMHg4MDAxMCxcblx0ICAgICAgICAgICAgMHg5ODAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4YTgwMDAwMDogMHg0MDAwLFxuXHQgICAgICAgICAgICAweGI4MDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwMDogMHg0MDAwMDAxMCxcblx0ICAgICAgICAgICAgMHhkODAwMDAwOiAweDg0MDAwLFxuXHQgICAgICAgICAgICAweGU4MDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTEwMDAwMDA6IDB4NDAwODAwMTAsXG5cdCAgICAgICAgICAgIDB4MTIwMDAwMDA6IDB4NDAwMDQwMTAsXG5cdCAgICAgICAgICAgIDB4MTMwMDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4MTQwMDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4MTUwMDAwMDA6IDB4MTAsXG5cdCAgICAgICAgICAgIDB4MTYwMDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTcwMDAwMDA6IDB4NDAwMCxcblx0ICAgICAgICAgICAgMHgxODAwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDE5MDAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDFhMDAwMDAwOiAweDgwMDEwLFxuXHQgICAgICAgICAgICAweDFiMDAwMDAwOiAweDQwMDAwMDEwLFxuXHQgICAgICAgICAgICAweDFjMDAwMDAwOiAweDg0MDAwLFxuXHQgICAgICAgICAgICAweDFkMDAwMDAwOiAweDQwMDA0MDAwLFxuXHQgICAgICAgICAgICAweDFlMDAwMDAwOiAweDQwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFmMDAwMDAwOiAweDQwMDg0MDEwLFxuXHQgICAgICAgICAgICAweDEwODAwMDAwOiAweDg0MDEwLFxuXHQgICAgICAgICAgICAweDExODAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDEyODAwMDAwOiAweDQwMDgwMDAwLFxuXHQgICAgICAgICAgICAweDEzODAwMDAwOiAweDQwMDAsXG5cdCAgICAgICAgICAgIDB4MTQ4MDAwMDA6IDB4NDAwMDQwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4MDAwMDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTY4MDAwMDA6IDB4MTAsXG5cdCAgICAgICAgICAgIDB4MTc4MDAwMDA6IDB4NDAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg4MDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4MTk4MDAwMDA6IDB4NDAwMDAwMTAsXG5cdCAgICAgICAgICAgIDB4MWE4MDAwMDA6IDB4NDAwMDQwMTAsXG5cdCAgICAgICAgICAgIDB4MWI4MDAwMDA6IDB4ODAwMTAsXG5cdCAgICAgICAgICAgIDB4MWM4MDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZDgwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDFlODAwMDAwOiAweDQwMDgwMDEwLFxuXHQgICAgICAgICAgICAweDFmODAwMDAwOiAweDg0MDAwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHgxMDQsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MjAwMDAwOiAweDQwMDAxMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwOiAweDEwMTA0LFxuXHQgICAgICAgICAgICAweDQwMDAwMDogMHgxMDAwNCxcblx0ICAgICAgICAgICAgMHg1MDAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHg2MDAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHg3MDAwMDA6IDB4NDAxMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDA6IDB4NDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg5MDAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDA6IDB4MTAxMDAsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwOiAweDQwMTAwMDQsXG5cdCAgICAgICAgICAgIDB4YzAwMDAwOiAweDQwMDAxMDQsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwOiAweDEwMDAwLFxuXHQgICAgICAgICAgICAweGUwMDAwMDogMHg0LFxuXHQgICAgICAgICAgICAweGYwMDAwMDogMHgxMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHgxODAwMDA6IDB4NDAxMDAwNCxcblx0ICAgICAgICAgICAgMHgyODAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgzODAwMDA6IDB4NDAwMDEwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHg1ODAwMDA6IDB4MTAwMDAsXG5cdCAgICAgICAgICAgIDB4NjgwMDAwOiAweDEwMDA0LFxuXHQgICAgICAgICAgICAweDc4MDAwMDogMHgxMDQsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwOiAweDQsXG5cdCAgICAgICAgICAgIDB4OTgwMDAwOiAweDEwMCxcblx0ICAgICAgICAgICAgMHhhODAwMDA6IDB4NDAxMDAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDA6IDB4MTAxMDQsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwOiAweDEwMTAwLFxuXHQgICAgICAgICAgICAweGQ4MDAwMDogMHg0MDAwMTA0LFxuXHQgICAgICAgICAgICAweGU4MDAwMDogMHg0MDEwMTA0LFxuXHQgICAgICAgICAgICAweGY4MDAwMDogMHg0MDAwMDAwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHgxMTAwMDAwOiAweDEwMDA0LFxuXHQgICAgICAgICAgICAweDEyMDAwMDA6IDB4MTAwMDAsXG5cdCAgICAgICAgICAgIDB4MTMwMDAwMDogMHg0MDAwMTAwLFxuXHQgICAgICAgICAgICAweDE0MDAwMDA6IDB4MTAwLFxuXHQgICAgICAgICAgICAweDE1MDAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHgxNjAwMDAwOiAweDQwMDAwMDQsXG5cdCAgICAgICAgICAgIDB4MTcwMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDA6IDB4NDAwMDEwNCxcblx0ICAgICAgICAgICAgMHgxOTAwMDAwOiAweDQwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWEwMDAwMDogMHg0LFxuXHQgICAgICAgICAgICAweDFiMDAwMDA6IDB4MTAxMDAsXG5cdCAgICAgICAgICAgIDB4MWMwMDAwMDogMHg0MDEwMDAwLFxuXHQgICAgICAgICAgICAweDFkMDAwMDA6IDB4MTA0LFxuXHQgICAgICAgICAgICAweDFlMDAwMDA6IDB4MTAxMDQsXG5cdCAgICAgICAgICAgIDB4MWYwMDAwMDogMHg0MDEwMDA0LFxuXHQgICAgICAgICAgICAweDEwODAwMDA6IDB4NDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMTgwMDAwOiAweDEwNCxcblx0ICAgICAgICAgICAgMHgxMjgwMDAwOiAweDQwMTAxMDAsXG5cdCAgICAgICAgICAgIDB4MTM4MDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDE0ODAwMDA6IDB4MTAwMDQsXG5cdCAgICAgICAgICAgIDB4MTU4MDAwMDogMHg0MDAwMTAwLFxuXHQgICAgICAgICAgICAweDE2ODAwMDA6IDB4MTAwLFxuXHQgICAgICAgICAgICAweDE3ODAwMDA6IDB4NDAxMDAwNCxcblx0ICAgICAgICAgICAgMHgxODgwMDAwOiAweDEwMDAwLFxuXHQgICAgICAgICAgICAweDE5ODAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHgxYTgwMDAwOiAweDEwMTA0LFxuXHQgICAgICAgICAgICAweDFiODAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHgxYzgwMDAwOiAweDQwMDAxMDQsXG5cdCAgICAgICAgICAgIDB4MWQ4MDAwMDogMHg0MDEwMDAwLFxuXHQgICAgICAgICAgICAweDFlODAwMDA6IDB4NCxcblx0ICAgICAgICAgICAgMHgxZjgwMDAwOiAweDEwMTAwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MDQwMTAwMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgyMDAwMDogMHg0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDA6IDB4ODA0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4NDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHg1MDAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4NjAwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4NzAwMDA6IDB4NDAwMDQwLFxuXHQgICAgICAgICAgICAweDgwMDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDkwMDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHhiMDAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHhjMDAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHhkMDAwMDogMHgxMDQwLFxuXHQgICAgICAgICAgICAweGUwMDAwOiAweDEwMDAsXG5cdCAgICAgICAgICAgIDB4ZjAwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgxODAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgyODAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgzODAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4NTgwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4NjgwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHg3ODAwMDogMHg4MDQwMDAwMCxcblx0ICAgICAgICAgICAgMHg4ODAwMDogMHgxMDAwLFxuXHQgICAgICAgICAgICAweDk4MDAwOiAweDgwNDAxMDAwLFxuXHQgICAgICAgICAgICAweGE4MDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDogMHgxMDQwLFxuXHQgICAgICAgICAgICAweGM4MDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweGQ4MDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHhlODAwMDogMHg0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxMTAwMDA6IDB4NDAxMDAwLFxuXHQgICAgICAgICAgICAweDEyMDAwMDogMHg4MDAwMDA0MCxcblx0ICAgICAgICAgICAgMHgxMzAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxNDAwMDA6IDB4MTA0MCxcblx0ICAgICAgICAgICAgMHgxNTAwMDA6IDB4ODA0MDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTYwMDAwOiAweDgwNDAxMDAwLFxuXHQgICAgICAgICAgICAweDE3MDAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgxODAwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4MTkwMDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFhMDAwMDogMHg4MDQwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYjAwMDA6IDB4NDAxMDQwLFxuXHQgICAgICAgICAgICAweDFjMDAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHgxZDAwMDA6IDB4NDAwMDAwLFxuXHQgICAgICAgICAgICAweDFlMDAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgxZjAwMDA6IDB4MTAwMCxcblx0ICAgICAgICAgICAgMHgxMDgwMDA6IDB4ODA0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTE4MDAwOiAweDgwNDAxMDQwLFxuXHQgICAgICAgICAgICAweDEyODAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDEzODAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4MTQ4MDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxNTgwMDA6IDB4ODAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTY4MDAwOiAweDgwMDAxMDQwLFxuXHQgICAgICAgICAgICAweDE3ODAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgxODgwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTk4MDAwOiAweDEwMDAsXG5cdCAgICAgICAgICAgIDB4MWE4MDAwOiAweDgwMDAxMDAwLFxuXHQgICAgICAgICAgICAweDFiODAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxYzgwMDA6IDB4MTA0MCxcblx0ICAgICAgICAgICAgMHgxZDgwMDA6IDB4ODA0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4MWU4MDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHgxZjgwMDA6IDB4NDAxMDQwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MCxcblx0ICAgICAgICAgICAgMHgxMDAwOiAweDEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MjAwMDogMHg0MDAwMCxcblx0ICAgICAgICAgICAgMHgzMDAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDQwMDA6IDB4MjAwNDAwODAsXG5cdCAgICAgICAgICAgIDB4NTAwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDYwMDA6IDB4MjEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4NzAwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHg4MDAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4OTAwMDogMHgyMDA0MDAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwOiAweDIwMDAwMDgwLFxuXHQgICAgICAgICAgICAweGIwMDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4YzAwMDogMHgyMTA0MDAwMCxcblx0ICAgICAgICAgICAgMHhkMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZTAwMDogMHgxMDQwMDgwLFxuXHQgICAgICAgICAgICAweGYwMDA6IDB4MjEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTgwMDogMHgyMTAwMDA4MCxcblx0ICAgICAgICAgICAgMHgyODAwOiAweDgwLFxuXHQgICAgICAgICAgICAweDM4MDA6IDB4MTA0MDAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwOiAweDQwMDAwLFxuXHQgICAgICAgICAgICAweDU4MDA6IDB4MjAwNDAwODAsXG5cdCAgICAgICAgICAgIDB4NjgwMDogMHgyMTA0MDAwMCxcblx0ICAgICAgICAgICAgMHg3ODAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDg4MDA6IDB4MjAwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4OTgwMDogMHgwLFxuXHQgICAgICAgICAgICAweGE4MDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4YjgwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweGM4MDA6IDB4MjAwMDAwODAsXG5cdCAgICAgICAgICAgIDB4ZDgwMDogMHgyMTAwMDAwMCxcblx0ICAgICAgICAgICAgMHhlODAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHgxMDAwMDogMHg0MDAwMCxcblx0ICAgICAgICAgICAgMHgxMTAwMDogMHg4MCxcblx0ICAgICAgICAgICAgMHgxMjAwMDogMHgyMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMzAwMDogMHgyMTAwMDA4MCxcblx0ICAgICAgICAgICAgMHgxNDAwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDE1MDAwOiAweDIxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDE2MDAwOiAweDIwMDQwMDgwLFxuXHQgICAgICAgICAgICAweDE3MDAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTkwMDA6IDB4MjEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWEwMDA6IDB4MTA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxYjAwMDogMHgyMDA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxYzAwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHgxZDAwMDogMHgyMDAwMDA4MCxcblx0ICAgICAgICAgICAgMHgxZTAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDFmMDAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTA4MDA6IDB4MjEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4MTE4MDA6IDB4MTAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMjgwMDogMHgxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDEzODAwOiAweDIwMDQwMDgwLFxuXHQgICAgICAgICAgICAweDE0ODAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDE1ODAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTY4MDA6IDB4ODAsXG5cdCAgICAgICAgICAgIDB4MTc4MDA6IDB4MjEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg4MDA6IDB4NDAwODAsXG5cdCAgICAgICAgICAgIDB4MTk4MDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MWE4MDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxYjgwMDogMHgyMTAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYzgwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDFkODAwOiAweDQwMDAwLFxuXHQgICAgICAgICAgICAweDFlODAwOiAweDIwMDQwMDAwLFxuXHQgICAgICAgICAgICAweDFmODAwOiAweDIwMDAwMDgwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHgxMDAwMDAwOCxcblx0ICAgICAgICAgICAgMHgxMDA6IDB4MjAwMCxcblx0ICAgICAgICAgICAgMHgyMDA6IDB4MTAyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MzAwOiAweDEwMjAyMDA4LFxuXHQgICAgICAgICAgICAweDQwMDogMHgxMDAwMjAwMCxcblx0ICAgICAgICAgICAgMHg1MDA6IDB4MjAwMDAwLFxuXHQgICAgICAgICAgICAweDYwMDogMHgyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4NzAwOiAweDEwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDogMHgwLFxuXHQgICAgICAgICAgICAweDkwMDogMHgxMDAwMjAwOCxcblx0ICAgICAgICAgICAgMHhhMDA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweGIwMDogMHg4LFxuXHQgICAgICAgICAgICAweGMwMDogMHgxMDIwMDAwOCxcblx0ICAgICAgICAgICAgMHhkMDA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweGUwMDogMHgyMDA4LFxuXHQgICAgICAgICAgICAweGYwMDogMHgxMDIwMjAwMCxcblx0ICAgICAgICAgICAgMHg4MDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxODA6IDB4MTAyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MjgwOiAweDgsXG5cdCAgICAgICAgICAgIDB4MzgwOiAweDIwMDAwMCxcblx0ICAgICAgICAgICAgMHg0ODA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDU4MDogMHgxMDAwMDAwOCxcblx0ICAgICAgICAgICAgMHg2ODA6IDB4MTAwMDIwMDAsXG5cdCAgICAgICAgICAgIDB4NzgwOiAweDIwMDgsXG5cdCAgICAgICAgICAgIDB4ODgwOiAweDIwMDAwOCxcblx0ICAgICAgICAgICAgMHg5ODA6IDB4MjAwMCxcblx0ICAgICAgICAgICAgMHhhODA6IDB4MTAwMDIwMDgsXG5cdCAgICAgICAgICAgIDB4YjgwOiAweDEwMjAwMDA4LFxuXHQgICAgICAgICAgICAweGM4MDogMHgwLFxuXHQgICAgICAgICAgICAweGQ4MDogMHgxMDIwMjAwMCxcblx0ICAgICAgICAgICAgMHhlODA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweGY4MDogMHgxMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMDAwOiAweDEwMDAyMDAwLFxuXHQgICAgICAgICAgICAweDExMDA6IDB4MTAyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MTIwMDogMHgxMDIwMjAwOCxcblx0ICAgICAgICAgICAgMHgxMzAwOiAweDIwMDgsXG5cdCAgICAgICAgICAgIDB4MTQwMDogMHgyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTUwMDogMHgxMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNjAwOiAweDEwMDAwMDA4LFxuXHQgICAgICAgICAgICAweDE3MDA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweDE4MDA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDE5MDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxYTAwOiAweDgsXG5cdCAgICAgICAgICAgIDB4MWIwMDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYzAwOiAweDIwMDAsXG5cdCAgICAgICAgICAgIDB4MWQwMDogMHgxMDAwMjAwOCxcblx0ICAgICAgICAgICAgMHgxZTAwOiAweDEwMjAyMDAwLFxuXHQgICAgICAgICAgICAweDFmMDA6IDB4MjAwMDA4LFxuXHQgICAgICAgICAgICAweDEwODA6IDB4OCxcblx0ICAgICAgICAgICAgMHgxMTgwOiAweDIwMjAwMCxcblx0ICAgICAgICAgICAgMHgxMjgwOiAweDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMzgwOiAweDEwMDAwMDA4LFxuXHQgICAgICAgICAgICAweDE0ODA6IDB4MTAwMDIwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4MDogMHgyMDA4LFxuXHQgICAgICAgICAgICAweDE2ODA6IDB4MTAyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MTc4MDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxODgwOiAweDEwMjAyMDAwLFxuXHQgICAgICAgICAgICAweDE5ODA6IDB4MTAyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MWE4MDogMHgyMDAwLFxuXHQgICAgICAgICAgICAweDFiODA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDFjODA6IDB4MjAwMDA4LFxuXHQgICAgICAgICAgICAweDFkODA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZTgwOiAweDEwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFmODA6IDB4MTAwMDIwMDhcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMDogMHgyMDAwNDAxLFxuXHQgICAgICAgICAgICAweDIwOiAweDQwMCxcblx0ICAgICAgICAgICAgMHgzMDogMHgxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4NDA6IDB4MjEwMDQwMSxcblx0ICAgICAgICAgICAgMHg1MDogMHgwLFxuXHQgICAgICAgICAgICAweDYwOiAweDEsXG5cdCAgICAgICAgICAgIDB4NzA6IDB4MjEwMDAwMSxcblx0ICAgICAgICAgICAgMHg4MDogMHgyMDAwNDAwLFxuXHQgICAgICAgICAgICAweDkwOiAweDEwMDAwMSxcblx0ICAgICAgICAgICAgMHhhMDogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweGIwOiAweDIxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4YzA6IDB4MjEwMDAwMCxcblx0ICAgICAgICAgICAgMHhkMDogMHg0MDEsXG5cdCAgICAgICAgICAgIDB4ZTA6IDB4MTAwNDAwLFxuXHQgICAgICAgICAgICAweGYwOiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODogMHgyMTAwMDAxLFxuXHQgICAgICAgICAgICAweDE4OiAweDAsXG5cdCAgICAgICAgICAgIDB4Mjg6IDB4MjAwMDQwMSxcblx0ICAgICAgICAgICAgMHgzODogMHgyMTAwNDAwLFxuXHQgICAgICAgICAgICAweDQ4OiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHg1ODogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweDY4OiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4Nzg6IDB4NDAxLFxuXHQgICAgICAgICAgICAweDg4OiAweDEwMDQwMSxcblx0ICAgICAgICAgICAgMHg5ODogMHgyMDAwNDAwLFxuXHQgICAgICAgICAgICAweGE4OiAweDIxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4Yjg6IDB4MTAwMDAxLFxuXHQgICAgICAgICAgICAweGM4OiAweDQwMCxcblx0ICAgICAgICAgICAgMHhkODogMHgyMTAwNDAxLFxuXHQgICAgICAgICAgICAweGU4OiAweDEsXG5cdCAgICAgICAgICAgIDB4Zjg6IDB4MTAwNDAwLFxuXHQgICAgICAgICAgICAweDEwMDogMHgyMDAwMDAwLFxuXHQgICAgICAgICAgICAweDExMDogMHgxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTIwOiAweDIwMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MTMwOiAweDIxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MTQwOiAweDEwMDAwMSxcblx0ICAgICAgICAgICAgMHgxNTA6IDB4MjAwMDQwMCxcblx0ICAgICAgICAgICAgMHgxNjA6IDB4MjEwMDQwMCxcblx0ICAgICAgICAgICAgMHgxNzA6IDB4MTAwNDAxLFxuXHQgICAgICAgICAgICAweDE4MDogMHg0MDEsXG5cdCAgICAgICAgICAgIDB4MTkwOiAweDIxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MWEwOiAweDEwMDQwMCxcblx0ICAgICAgICAgICAgMHgxYjA6IDB4MSxcblx0ICAgICAgICAgICAgMHgxYzA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZDA6IDB4MjEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxZTA6IDB4MjAwMDAwMSxcblx0ICAgICAgICAgICAgMHgxZjA6IDB4NDAwLFxuXHQgICAgICAgICAgICAweDEwODogMHgxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4MTE4OiAweDIwMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MTI4OiAweDIxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MTM4OiAweDEsXG5cdCAgICAgICAgICAgIDB4MTQ4OiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4OiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNjg6IDB4NDAxLFxuXHQgICAgICAgICAgICAweDE3ODogMHgyMTAwNDAwLFxuXHQgICAgICAgICAgICAweDE4ODogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweDE5ODogMHgyMTAwMDAwLFxuXHQgICAgICAgICAgICAweDFhODogMHgwLFxuXHQgICAgICAgICAgICAweDFiODogMHgyMTAwNDAxLFxuXHQgICAgICAgICAgICAweDFjODogMHgxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MWQ4OiAweDQwMCxcblx0ICAgICAgICAgICAgMHgxZTg6IDB4MjAwMDQwMCxcblx0ICAgICAgICAgICAgMHgxZjg6IDB4MTAwMDAxXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MDAwODIwLFxuXHQgICAgICAgICAgICAweDE6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MjogMHg4MDAwMDAwLFxuXHQgICAgICAgICAgICAweDM6IDB4MjAsXG5cdCAgICAgICAgICAgIDB4NDogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHg1OiAweDgwMjA4MjAsXG5cdCAgICAgICAgICAgIDB4NjogMHg4MDIwODAwLFxuXHQgICAgICAgICAgICAweDc6IDB4ODAwLFxuXHQgICAgICAgICAgICAweDg6IDB4ODAyMDAwMCxcblx0ICAgICAgICAgICAgMHg5OiAweDgwMDA4MDAsXG5cdCAgICAgICAgICAgIDB4YTogMHgyMDgwMCxcblx0ICAgICAgICAgICAgMHhiOiAweDgwMjAwMjAsXG5cdCAgICAgICAgICAgIDB4YzogMHg4MjAsXG5cdCAgICAgICAgICAgIDB4ZDogMHgwLFxuXHQgICAgICAgICAgICAweGU6IDB4ODAwMDAyMCxcblx0ICAgICAgICAgICAgMHhmOiAweDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAwOiAweDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMTogMHg4MDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAyOiAweDgwMDA4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDM6IDB4ODAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwNDogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA1OiAweDIwODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA2OiAweDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA3OiAweDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA4OiAweDgwMDAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDk6IDB4ODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBhOiAweDIwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBiOiAweDgwMjA4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGM6IDB4MCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwZDogMHg4MDIwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBlOiAweDgwMDA4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGY6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MTA6IDB4MjA4MjAsXG5cdCAgICAgICAgICAgIDB4MTE6IDB4ODAyMDgwMCxcblx0ICAgICAgICAgICAgMHgxMjogMHgyMCxcblx0ICAgICAgICAgICAgMHgxMzogMHg4MDAsXG5cdCAgICAgICAgICAgIDB4MTQ6IDB4ODAwMDgwMCxcblx0ICAgICAgICAgICAgMHgxNTogMHg4MDAwMDIwLFxuXHQgICAgICAgICAgICAweDE2OiAweDgwMjAwMjAsXG5cdCAgICAgICAgICAgIDB4MTc6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg6IDB4MCxcblx0ICAgICAgICAgICAgMHgxOTogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHgxYTogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDFiOiAweDgwMDA4MjAsXG5cdCAgICAgICAgICAgIDB4MWM6IDB4ODAyMDgyMCxcblx0ICAgICAgICAgICAgMHgxZDogMHgyMDgwMCxcblx0ICAgICAgICAgICAgMHgxZTogMHg4MjAsXG5cdCAgICAgICAgICAgIDB4MWY6IDB4ODAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMDogMHgyMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMTogMHg4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTI6IDB4ODAyMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMzogMHgyMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxNDogMHgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxNTogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE2OiAweDgwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTc6IDB4ODAwMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxODogMHg4MDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE5OiAweDgwMDAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMWE6IDB4ODAwMDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxYjogMHgwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFjOiAweDIwODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFkOiAweDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxZTogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxZjogMHg4MDIwODAwXG5cdCAgICAgICAgfVxuXHQgICAgXTtcblxuXHQgICAgLy8gTWFza3MgdGhhdCBzZWxlY3QgdGhlIFNCT1ggaW5wdXRcblx0ICAgIHZhciBTQk9YX01BU0sgPSBbXG5cdCAgICAgICAgMHhmODAwMDAwMSwgMHgxZjgwMDAwMCwgMHgwMWY4MDAwMCwgMHgwMDFmODAwMCxcblx0ICAgICAgICAweDAwMDFmODAwLCAweDAwMDAxZjgwLCAweDAwMDAwMWY4LCAweDgwMDAwMDFmXG5cdCAgICBdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIERFUyBibG9jayBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgREVTID0gQ19hbGdvLkRFUyA9IEJsb2NrQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXk7XG5cdCAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBTZWxlY3QgNTYgYml0cyBhY2NvcmRpbmcgdG8gUEMxXG5cdCAgICAgICAgICAgIHZhciBrZXlCaXRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGtleUJpdFBvcyA9IFBDMVtpXSAtIDE7XG5cdCAgICAgICAgICAgICAgICBrZXlCaXRzW2ldID0gKGtleVdvcmRzW2tleUJpdFBvcyA+Pj4gNV0gPj4+ICgzMSAtIGtleUJpdFBvcyAlIDMyKSkgJiAxO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQXNzZW1ibGUgMTYgc3Via2V5c1xuXHQgICAgICAgICAgICB2YXIgc3ViS2V5cyA9IHRoaXMuX3N1YktleXMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgblN1YktleSA9IDA7IG5TdWJLZXkgPCAxNjsgblN1YktleSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDcmVhdGUgc3Via2V5XG5cdCAgICAgICAgICAgICAgICB2YXIgc3ViS2V5ID0gc3ViS2V5c1tuU3ViS2V5XSA9IFtdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIGJpdFNoaWZ0ID0gQklUX1NISUZUU1tuU3ViS2V5XTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU2VsZWN0IDQ4IGJpdHMgYWNjb3JkaW5nIHRvIFBDMlxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2VsZWN0IGZyb20gdGhlIGxlZnQgMjgga2V5IGJpdHNcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbKGkgLyA2KSB8IDBdIHw9IGtleUJpdHNbKChQQzJbaV0gLSAxKSArIGJpdFNoaWZ0KSAlIDI4XSA8PCAoMzEgLSBpICUgNik7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3QgZnJvbSB0aGUgcmlnaHQgMjgga2V5IGJpdHNcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbNCArICgoaSAvIDYpIHwgMCldIHw9IGtleUJpdHNbMjggKyAoKChQQzJbaSArIDI0XSAtIDEpICsgYml0U2hpZnQpICUgMjgpXSA8PCAoMzEgLSBpICUgNik7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNpbmNlIGVhY2ggc3Via2V5IGlzIGFwcGxpZWQgdG8gYW4gZXhwYW5kZWQgMzItYml0IGlucHV0LFxuXHQgICAgICAgICAgICAgICAgLy8gdGhlIHN1YmtleSBjYW4gYmUgYnJva2VuIGludG8gOCB2YWx1ZXMgc2NhbGVkIHRvIDMyLWJpdHMsXG5cdCAgICAgICAgICAgICAgICAvLyB3aGljaCBhbGxvd3MgdGhlIGtleSB0byBiZSB1c2VkIHdpdGhvdXQgZXhwYW5zaW9uXG5cdCAgICAgICAgICAgICAgICBzdWJLZXlbMF0gPSAoc3ViS2V5WzBdIDw8IDEpIHwgKHN1YktleVswXSA+Pj4gMzEpO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCA3OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbaV0gPSBzdWJLZXlbaV0gPj4+ICgoaSAtIDEpICogNCArIDMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgc3ViS2V5WzddID0gKHN1YktleVs3XSA8PCA1KSB8IChzdWJLZXlbN10gPj4+IDI3KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgaW52ZXJzZSBzdWJrZXlzXG5cdCAgICAgICAgICAgIHZhciBpbnZTdWJLZXlzID0gdGhpcy5faW52U3ViS2V5cyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGludlN1YktleXNbaV0gPSBzdWJLZXlzWzE1IC0gaV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZW5jcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2RvQ3J5cHRCbG9jayhNLCBvZmZzZXQsIHRoaXMuX3N1YktleXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBkZWNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5faW52U3ViS2V5cyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0NyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQsIHN1YktleXMpIHtcblx0ICAgICAgICAgICAgLy8gR2V0IGlucHV0XG5cdCAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IE1bb2Zmc2V0XTtcblx0ICAgICAgICAgICAgdGhpcy5fckJsb2NrID0gTVtvZmZzZXQgKyAxXTtcblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHBlcm11dGF0aW9uXG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCA0LCAgMHgwZjBmMGYwZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxNiwgMHgwMDAwZmZmZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCAyLCAgMHgzMzMzMzMzMyk7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCA4LCAgMHgwMGZmMDBmZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxLCAgMHg1NTU1NTU1NSk7XG5cblx0ICAgICAgICAgICAgLy8gUm91bmRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIHJvdW5kID0gMDsgcm91bmQgPCAxNjsgcm91bmQrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgc3ViS2V5ID0gc3ViS2V5c1tyb3VuZF07XG5cdCAgICAgICAgICAgICAgICB2YXIgbEJsb2NrID0gdGhpcy5fbEJsb2NrO1xuXHQgICAgICAgICAgICAgICAgdmFyIHJCbG9jayA9IHRoaXMuX3JCbG9jaztcblxuXHQgICAgICAgICAgICAgICAgLy8gRmVpc3RlbCBmdW5jdGlvblxuXHQgICAgICAgICAgICAgICAgdmFyIGYgPSAwO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBmIHw9IFNCT1hfUFtpXVsoKHJCbG9jayBeIHN1YktleVtpXSkgJiBTQk9YX01BU0tbaV0pID4+PiAwXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IHJCbG9jaztcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3JCbG9jayA9IGxCbG9jayBeIGY7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBVbmRvIHN3YXAgZnJvbSBsYXN0IHJvdW5kXG5cdCAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fbEJsb2NrO1xuXHQgICAgICAgICAgICB0aGlzLl9sQmxvY2sgPSB0aGlzLl9yQmxvY2s7XG5cdCAgICAgICAgICAgIHRoaXMuX3JCbG9jayA9IHQ7XG5cblx0ICAgICAgICAgICAgLy8gRmluYWwgcGVybXV0YXRpb25cblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDEsICAweDU1NTU1NTU1KTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDgsICAweDAwZmYwMGZmKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDIsICAweDMzMzMzMzMzKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDE2LCAweDAwMDBmZmZmKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDQsICAweDBmMGYwZjBmKTtcblxuXHQgICAgICAgICAgICAvLyBTZXQgb3V0cHV0XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0XSA9IHRoaXMuX2xCbG9jaztcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IHRoaXMuX3JCbG9jaztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogNjQvMzIsXG5cblx0ICAgICAgICBpdlNpemU6IDY0LzMyLFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8vIFN3YXAgYml0cyBhY3Jvc3MgdGhlIGxlZnQgYW5kIHJpZ2h0IHdvcmRzXG5cdCAgICBmdW5jdGlvbiBleGNoYW5nZUxSKG9mZnNldCwgbWFzaykge1xuXHQgICAgICAgIHZhciB0ID0gKCh0aGlzLl9sQmxvY2sgPj4+IG9mZnNldCkgXiB0aGlzLl9yQmxvY2spICYgbWFzaztcblx0ICAgICAgICB0aGlzLl9yQmxvY2sgXj0gdDtcblx0ICAgICAgICB0aGlzLl9sQmxvY2sgXj0gdCA8PCBvZmZzZXQ7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGV4Y2hhbmdlUkwob2Zmc2V0LCBtYXNrKSB7XG5cdCAgICAgICAgdmFyIHQgPSAoKHRoaXMuX3JCbG9jayA+Pj4gb2Zmc2V0KSBeIHRoaXMuX2xCbG9jaykgJiBtYXNrO1xuXHQgICAgICAgIHRoaXMuX2xCbG9jayBePSB0O1xuXHQgICAgICAgIHRoaXMuX3JCbG9jayBePSB0IDw8IG9mZnNldDtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5ERVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5ERVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuREVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihERVMpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFRyaXBsZS1ERVMgYmxvY2sgY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFRyaXBsZURFUyA9IENfYWxnby5UcmlwbGVERVMgPSBCbG9ja0NpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5O1xuXHQgICAgICAgICAgICB2YXIga2V5V29yZHMgPSBrZXkud29yZHM7XG5cdCAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUga2V5IGxlbmd0aCBpcyB2YWxpZCAoNjQsIDEyOCBvciA+PSAxOTIgYml0KVxuXHQgICAgICAgICAgICBpZiAoa2V5V29yZHMubGVuZ3RoICE9PSAyICYmIGtleVdvcmRzLmxlbmd0aCAhPT0gNCAmJiBrZXlXb3Jkcy5sZW5ndGggPCA2KSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQga2V5IGxlbmd0aCAtIDNERVMgcmVxdWlyZXMgdGhlIGtleSBsZW5ndGggdG8gYmUgNjQsIDEyOCwgMTkyIG9yID4xOTIuJyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBFeHRlbmQgdGhlIGtleSBhY2NvcmRpbmcgdG8gdGhlIGtleWluZyBvcHRpb25zIGRlZmluZWQgaW4gM0RFUyBzdGFuZGFyZFxuXHQgICAgICAgICAgICB2YXIga2V5MSA9IGtleVdvcmRzLnNsaWNlKDAsIDIpO1xuXHQgICAgICAgICAgICB2YXIga2V5MiA9IGtleVdvcmRzLmxlbmd0aCA8IDQgPyBrZXlXb3Jkcy5zbGljZSgwLCAyKSA6IGtleVdvcmRzLnNsaWNlKDIsIDQpO1xuXHQgICAgICAgICAgICB2YXIga2V5MyA9IGtleVdvcmRzLmxlbmd0aCA8IDYgPyBrZXlXb3Jkcy5zbGljZSgwLCAyKSA6IGtleVdvcmRzLnNsaWNlKDQsIDYpO1xuXG5cdCAgICAgICAgICAgIC8vIENyZWF0ZSBERVMgaW5zdGFuY2VzXG5cdCAgICAgICAgICAgIHRoaXMuX2RlczEgPSBERVMuY3JlYXRlRW5jcnlwdG9yKFdvcmRBcnJheS5jcmVhdGUoa2V5MSkpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMyID0gREVTLmNyZWF0ZUVuY3J5cHRvcihXb3JkQXJyYXkuY3JlYXRlKGtleTIpKTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMyA9IERFUy5jcmVhdGVFbmNyeXB0b3IoV29yZEFycmF5LmNyZWF0ZShrZXkzKSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGVuY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMxLmVuY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMyLmRlY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMzLmVuY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBkZWNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMy5kZWNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMi5lbmNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMS5kZWNyeXB0QmxvY2soTSwgb2Zmc2V0KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogMTkyLzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiA2NC8zMixcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogNjQvMzJcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlRyaXBsZURFUy5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlRyaXBsZURFUy5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5UcmlwbGVERVMgPSBCbG9ja0NpcGhlci5fY3JlYXRlSGVscGVyKFRyaXBsZURFUyk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuVHJpcGxlREVTO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9lbmMtYmFzZTY0XCIsIFwiLi9tZDVcIiwgXCIuL2V2cGtkZlwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFJDNCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJDNCA9IENfYWxnby5SQzQgPSBTdHJlYW1DaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuX2tleTtcblx0ICAgICAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIga2V5U2lnQnl0ZXMgPSBrZXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gSW5pdCBzYm94XG5cdCAgICAgICAgICAgIHZhciBTID0gdGhpcy5fUyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBTW2ldID0gaTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEtleSBzZXR1cFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGtleUJ5dGVJbmRleCA9IGkgJSBrZXlTaWdCeXRlcztcblx0ICAgICAgICAgICAgICAgIHZhciBrZXlCeXRlID0gKGtleVdvcmRzW2tleUJ5dGVJbmRleCA+Pj4gMl0gPj4+ICgyNCAtIChrZXlCeXRlSW5kZXggJSA0KSAqIDgpKSAmIDB4ZmY7XG5cblx0ICAgICAgICAgICAgICAgIGogPSAoaiArIFNbaV0gKyBrZXlCeXRlKSAlIDI1NjtcblxuXHQgICAgICAgICAgICAgICAgLy8gU3dhcFxuXHQgICAgICAgICAgICAgICAgdmFyIHQgPSBTW2ldO1xuXHQgICAgICAgICAgICAgICAgU1tpXSA9IFNbal07XG5cdCAgICAgICAgICAgICAgICBTW2pdID0gdDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvdW50ZXJzXG5cdCAgICAgICAgICAgIHRoaXMuX2kgPSB0aGlzLl9qID0gMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0XSBePSBnZW5lcmF0ZUtleXN0cmVhbVdvcmQuY2FsbCh0aGlzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogMjU2LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiAwXG5cdCAgICB9KTtcblxuXHQgICAgZnVuY3Rpb24gZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkKCkge1xuXHQgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgIHZhciBTID0gdGhpcy5fUztcblx0ICAgICAgICB2YXIgaSA9IHRoaXMuX2k7XG5cdCAgICAgICAgdmFyIGogPSB0aGlzLl9qO1xuXG5cdCAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtIHdvcmRcblx0ICAgICAgICB2YXIga2V5c3RyZWFtV29yZCA9IDA7XG5cdCAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCA0OyBuKyspIHtcblx0ICAgICAgICAgICAgaSA9IChpICsgMSkgJSAyNTY7XG5cdCAgICAgICAgICAgIGogPSAoaiArIFNbaV0pICUgMjU2O1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXBcblx0ICAgICAgICAgICAgdmFyIHQgPSBTW2ldO1xuXHQgICAgICAgICAgICBTW2ldID0gU1tqXTtcblx0ICAgICAgICAgICAgU1tqXSA9IHQ7XG5cblx0ICAgICAgICAgICAga2V5c3RyZWFtV29yZCB8PSBTWyhTW2ldICsgU1tqXSkgJSAyNTZdIDw8ICgyNCAtIG4gKiA4KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBVcGRhdGUgY291bnRlcnNcblx0ICAgICAgICB0aGlzLl9pID0gaTtcblx0ICAgICAgICB0aGlzLl9qID0gajtcblxuXHQgICAgICAgIHJldHVybiBrZXlzdHJlYW1Xb3JkO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJDNC5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJDNC5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5SQzQgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSQzQpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIE1vZGlmaWVkIFJDNCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJDNERyb3AgPSBDX2FsZ28uUkM0RHJvcCA9IFJDNC5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkcm9wIFRoZSBudW1iZXIgb2Yga2V5c3RyZWFtIHdvcmRzIHRvIGRyb3AuIERlZmF1bHQgMTkyXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBSQzQuY2ZnLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGRyb3A6IDE5MlxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgUkM0Ll9kb1Jlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gRHJvcFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5jZmcuZHJvcDsgaSA+IDA7IGktLSkge1xuXHQgICAgICAgICAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5SQzREcm9wLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUkM0RHJvcC5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5SQzREcm9wID0gU3RyZWFtQ2lwaGVyLl9jcmVhdGVIZWxwZXIoUkM0RHJvcCk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuUkM0O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9lbmMtYmFzZTY0XCIsIFwiLi9tZDVcIiwgXCIuL2V2cGtkZlwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzXG5cdCAgICB2YXIgUyAgPSBbXTtcblx0ICAgIHZhciBDXyA9IFtdO1xuXHQgICAgdmFyIEcgID0gW107XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmFiYml0IHN0cmVhbSBjaXBoZXIgYWxnb3JpdGhtXG5cdCAgICAgKi9cblx0ICAgIHZhciBSYWJiaXQgPSBDX2FsZ28uUmFiYml0ID0gU3RyZWFtQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBLID0gdGhpcy5fa2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLmNmZy5pdjtcblxuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgS1tpXSA9ICgoKEtbaV0gPDwgOCkgIHwgKEtbaV0gPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgKCgoS1tpXSA8PCAyNCkgfCAoS1tpXSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YID0gW1xuXHQgICAgICAgICAgICAgICAgS1swXSwgKEtbM10gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbMV0sIChLWzBdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzJdLCAoS1sxXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1szXSwgKEtbMl0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KVxuXHQgICAgICAgICAgICBdO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIEMgPSB0aGlzLl9DID0gW1xuXHQgICAgICAgICAgICAgICAgKEtbMl0gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSwgKEtbMF0gJiAweGZmZmYwMDAwKSB8IChLWzFdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1szXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLCAoS1sxXSAmIDB4ZmZmZjAwMDApIHwgKEtbMl0gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzBdIDw8IDE2KSB8IChLWzBdID4+PiAxNiksIChLWzJdICYgMHhmZmZmMDAwMCkgfCAoS1szXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbMV0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KSwgKEtbM10gJiAweGZmZmYwMDAwKSB8IChLWzBdICYgMHgwMDAwZmZmZilcblx0ICAgICAgICAgICAgXTtcblxuXHQgICAgICAgICAgICAvLyBDYXJyeSBiaXRcblx0ICAgICAgICAgICAgdGhpcy5fYiA9IDA7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gTW9kaWZ5IHRoZSBjb3VudGVyc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgQ1tpXSBePSBYWyhpICsgNCkgJiA3XTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIElWIHNldHVwXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgSVYgPSBpdi53b3Jkcztcblx0ICAgICAgICAgICAgICAgIHZhciBJVl8wID0gSVZbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgSVZfMSA9IElWWzFdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIHN1YnZlY3RvcnNcblx0ICAgICAgICAgICAgICAgIHZhciBpMCA9ICgoKElWXzAgPDwgOCkgfCAoSVZfMCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMCA8PCAyNCkgfCAoSVZfMCA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTIgPSAoKChJVl8xIDw8IDgpIHwgKElWXzEgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzEgPDwgMjQpIHwgKElWXzEgPj4+IDgpKSAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkxID0gKGkwID4+PiAxNikgfCAoaTIgJiAweGZmZmYwMDAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMyA9IChpMiA8PCAxNikgIHwgKGkwICYgMHgwMDAwZmZmZik7XG5cblx0ICAgICAgICAgICAgICAgIC8vIE1vZGlmeSBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgQ1swXSBePSBpMDtcblx0ICAgICAgICAgICAgICAgIENbMV0gXj0gaTE7XG5cdCAgICAgICAgICAgICAgICBDWzJdIF49IGkyO1xuXHQgICAgICAgICAgICAgICAgQ1szXSBePSBpMztcblx0ICAgICAgICAgICAgICAgIENbNF0gXj0gaTA7XG5cdCAgICAgICAgICAgICAgICBDWzVdIF49IGkxO1xuXHQgICAgICAgICAgICAgICAgQ1s2XSBePSBpMjtcblx0ICAgICAgICAgICAgICAgIENbN10gXj0gaTM7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtXG5cdCAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGZvdXIga2V5c3RyZWFtIHdvcmRzXG5cdCAgICAgICAgICAgIFNbMF0gPSBYWzBdIF4gKFhbNV0gPj4+IDE2KSBeIChYWzNdIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1sxXSA9IFhbMl0gXiAoWFs3XSA+Pj4gMTYpIF4gKFhbNV0gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzJdID0gWFs0XSBeIChYWzFdID4+PiAxNikgXiAoWFs3XSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbM10gPSBYWzZdIF4gKFhbM10gPj4+IDE2KSBeIChYWzFdIDw8IDE2KTtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgICAgIFNbaV0gPSAoKChTW2ldIDw8IDgpICB8IChTW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICAgICgoKFNbaV0gPDwgMjQpIHwgKFNbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICAgICAgTVtvZmZzZXQgKyBpXSBePSBTW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIG5leHRTdGF0ZSgpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cdCAgICAgICAgdmFyIEMgPSB0aGlzLl9DO1xuXG5cdCAgICAgICAgLy8gU2F2ZSBvbGQgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICBDX1tpXSA9IENbaV07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgIENbMF0gPSAoQ1swXSArIDB4NGQzNGQzNGQgKyB0aGlzLl9iKSB8IDA7XG5cdCAgICAgICAgQ1sxXSA9IChDWzFdICsgMHhkMzRkMzRkMyArICgoQ1swXSA+Pj4gMCkgPCAoQ19bMF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1syXSA9IChDWzJdICsgMHgzNGQzNGQzNCArICgoQ1sxXSA+Pj4gMCkgPCAoQ19bMV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1szXSA9IChDWzNdICsgMHg0ZDM0ZDM0ZCArICgoQ1syXSA+Pj4gMCkgPCAoQ19bMl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s0XSA9IChDWzRdICsgMHhkMzRkMzRkMyArICgoQ1szXSA+Pj4gMCkgPCAoQ19bM10gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s1XSA9IChDWzVdICsgMHgzNGQzNGQzNCArICgoQ1s0XSA+Pj4gMCkgPCAoQ19bNF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s2XSA9IChDWzZdICsgMHg0ZDM0ZDM0ZCArICgoQ1s1XSA+Pj4gMCkgPCAoQ19bNV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s3XSA9IChDWzddICsgMHhkMzRkMzRkMyArICgoQ1s2XSA+Pj4gMCkgPCAoQ19bNl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgdGhpcy5fYiA9IChDWzddID4+PiAwKSA8IChDX1s3XSA+Pj4gMCkgPyAxIDogMDtcblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZy12YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgZ3ggPSBYW2ldICsgQ1tpXTtcblxuXHQgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgaGlnaCBhbmQgbG93IGFyZ3VtZW50IGZvciBzcXVhcmluZ1xuXHQgICAgICAgICAgICB2YXIgZ2EgPSBneCAmIDB4ZmZmZjtcblx0ICAgICAgICAgICAgdmFyIGdiID0gZ3ggPj4+IDE2O1xuXG5cdCAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBoaWdoIGFuZCBsb3cgcmVzdWx0IG9mIHNxdWFyaW5nXG5cdCAgICAgICAgICAgIHZhciBnaCA9ICgoKChnYSAqIGdhKSA+Pj4gMTcpICsgZ2EgKiBnYikgPj4+IDE1KSArIGdiICogZ2I7XG5cdCAgICAgICAgICAgIHZhciBnbCA9ICgoKGd4ICYgMHhmZmZmMDAwMCkgKiBneCkgfCAwKSArICgoKGd4ICYgMHgwMDAwZmZmZikgKiBneCkgfCAwKTtcblxuXHQgICAgICAgICAgICAvLyBIaWdoIFhPUiBsb3dcblx0ICAgICAgICAgICAgR1tpXSA9IGdoIF4gZ2w7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICBYWzBdID0gKEdbMF0gKyAoKEdbN10gPDwgMTYpIHwgKEdbN10gPj4+IDE2KSkgKyAoKEdbNl0gPDwgMTYpIHwgKEdbNl0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzFdID0gKEdbMV0gKyAoKEdbMF0gPDwgOCkgIHwgKEdbMF0gPj4+IDI0KSkgKyBHWzddKSB8IDA7XG5cdCAgICAgICAgWFsyXSA9IChHWzJdICsgKChHWzFdIDw8IDE2KSB8IChHWzFdID4+PiAxNikpICsgKChHWzBdIDw8IDE2KSB8IChHWzBdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFszXSA9IChHWzNdICsgKChHWzJdIDw8IDgpICB8IChHWzJdID4+PiAyNCkpICsgR1sxXSkgfCAwO1xuXHQgICAgICAgIFhbNF0gPSAoR1s0XSArICgoR1szXSA8PCAxNikgfCAoR1szXSA+Pj4gMTYpKSArICgoR1syXSA8PCAxNikgfCAoR1syXSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbNV0gPSAoR1s1XSArICgoR1s0XSA8PCA4KSAgfCAoR1s0XSA+Pj4gMjQpKSArIEdbM10pIHwgMDtcblx0ICAgICAgICBYWzZdID0gKEdbNl0gKyAoKEdbNV0gPDwgMTYpIHwgKEdbNV0gPj4+IDE2KSkgKyAoKEdbNF0gPDwgMTYpIHwgKEdbNF0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzddID0gKEdbN10gKyAoKEdbNl0gPDwgOCkgIHwgKEdbNl0gPj4+IDI0KSkgKyBHWzVdKSB8IDA7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUmFiYml0LmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUmFiYml0LmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLlJhYmJpdCA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJhYmJpdCk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuUmFiYml0O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9lbmMtYmFzZTY0XCIsIFwiLi9tZDVcIiwgXCIuL2V2cGtkZlwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzXG5cdCAgICB2YXIgUyAgPSBbXTtcblx0ICAgIHZhciBDXyA9IFtdO1xuXHQgICAgdmFyIEcgID0gW107XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmFiYml0IHN0cmVhbSBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICpcblx0ICAgICAqIFRoaXMgaXMgYSBsZWdhY3kgdmVyc2lvbiB0aGF0IG5lZ2xlY3RlZCB0byBjb252ZXJ0IHRoZSBrZXkgdG8gbGl0dGxlLWVuZGlhbi5cblx0ICAgICAqIFRoaXMgZXJyb3IgZG9lc24ndCBhZmZlY3QgdGhlIGNpcGhlcidzIHNlY3VyaXR5LFxuXHQgICAgICogYnV0IGl0IGRvZXMgYWZmZWN0IGl0cyBjb21wYXRpYmlsaXR5IHdpdGggb3RoZXIgaW1wbGVtZW50YXRpb25zLlxuXHQgICAgICovXG5cdCAgICB2YXIgUmFiYml0TGVnYWN5ID0gQ19hbGdvLlJhYmJpdExlZ2FjeSA9IFN0cmVhbUNpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSyA9IHRoaXMuX2tleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5jZmcuaXY7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YID0gW1xuXHQgICAgICAgICAgICAgICAgS1swXSwgKEtbM10gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbMV0sIChLWzBdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzJdLCAoS1sxXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1szXSwgKEtbMl0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KVxuXHQgICAgICAgICAgICBdO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIEMgPSB0aGlzLl9DID0gW1xuXHQgICAgICAgICAgICAgICAgKEtbMl0gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSwgKEtbMF0gJiAweGZmZmYwMDAwKSB8IChLWzFdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1szXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLCAoS1sxXSAmIDB4ZmZmZjAwMDApIHwgKEtbMl0gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzBdIDw8IDE2KSB8IChLWzBdID4+PiAxNiksIChLWzJdICYgMHhmZmZmMDAwMCkgfCAoS1szXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbMV0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KSwgKEtbM10gJiAweGZmZmYwMDAwKSB8IChLWzBdICYgMHgwMDAwZmZmZilcblx0ICAgICAgICAgICAgXTtcblxuXHQgICAgICAgICAgICAvLyBDYXJyeSBiaXRcblx0ICAgICAgICAgICAgdGhpcy5fYiA9IDA7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gTW9kaWZ5IHRoZSBjb3VudGVyc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgQ1tpXSBePSBYWyhpICsgNCkgJiA3XTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIElWIHNldHVwXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgSVYgPSBpdi53b3Jkcztcblx0ICAgICAgICAgICAgICAgIHZhciBJVl8wID0gSVZbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgSVZfMSA9IElWWzFdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIHN1YnZlY3RvcnNcblx0ICAgICAgICAgICAgICAgIHZhciBpMCA9ICgoKElWXzAgPDwgOCkgfCAoSVZfMCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMCA8PCAyNCkgfCAoSVZfMCA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTIgPSAoKChJVl8xIDw8IDgpIHwgKElWXzEgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzEgPDwgMjQpIHwgKElWXzEgPj4+IDgpKSAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkxID0gKGkwID4+PiAxNikgfCAoaTIgJiAweGZmZmYwMDAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMyA9IChpMiA8PCAxNikgIHwgKGkwICYgMHgwMDAwZmZmZik7XG5cblx0ICAgICAgICAgICAgICAgIC8vIE1vZGlmeSBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgQ1swXSBePSBpMDtcblx0ICAgICAgICAgICAgICAgIENbMV0gXj0gaTE7XG5cdCAgICAgICAgICAgICAgICBDWzJdIF49IGkyO1xuXHQgICAgICAgICAgICAgICAgQ1szXSBePSBpMztcblx0ICAgICAgICAgICAgICAgIENbNF0gXj0gaTA7XG5cdCAgICAgICAgICAgICAgICBDWzVdIF49IGkxO1xuXHQgICAgICAgICAgICAgICAgQ1s2XSBePSBpMjtcblx0ICAgICAgICAgICAgICAgIENbN10gXj0gaTM7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtXG5cdCAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGZvdXIga2V5c3RyZWFtIHdvcmRzXG5cdCAgICAgICAgICAgIFNbMF0gPSBYWzBdIF4gKFhbNV0gPj4+IDE2KSBeIChYWzNdIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1sxXSA9IFhbMl0gXiAoWFs3XSA+Pj4gMTYpIF4gKFhbNV0gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzJdID0gWFs0XSBeIChYWzFdID4+PiAxNikgXiAoWFs3XSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbM10gPSBYWzZdIF4gKFhbM10gPj4+IDE2KSBeIChYWzFdIDw8IDE2KTtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgICAgIFNbaV0gPSAoKChTW2ldIDw8IDgpICB8IChTW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICAgICgoKFNbaV0gPDwgMjQpIHwgKFNbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICAgICAgTVtvZmZzZXQgKyBpXSBePSBTW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIG5leHRTdGF0ZSgpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cdCAgICAgICAgdmFyIEMgPSB0aGlzLl9DO1xuXG5cdCAgICAgICAgLy8gU2F2ZSBvbGQgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICBDX1tpXSA9IENbaV07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgIENbMF0gPSAoQ1swXSArIDB4NGQzNGQzNGQgKyB0aGlzLl9iKSB8IDA7XG5cdCAgICAgICAgQ1sxXSA9IChDWzFdICsgMHhkMzRkMzRkMyArICgoQ1swXSA+Pj4gMCkgPCAoQ19bMF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1syXSA9IChDWzJdICsgMHgzNGQzNGQzNCArICgoQ1sxXSA+Pj4gMCkgPCAoQ19bMV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1szXSA9IChDWzNdICsgMHg0ZDM0ZDM0ZCArICgoQ1syXSA+Pj4gMCkgPCAoQ19bMl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s0XSA9IChDWzRdICsgMHhkMzRkMzRkMyArICgoQ1szXSA+Pj4gMCkgPCAoQ19bM10gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s1XSA9IChDWzVdICsgMHgzNGQzNGQzNCArICgoQ1s0XSA+Pj4gMCkgPCAoQ19bNF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s2XSA9IChDWzZdICsgMHg0ZDM0ZDM0ZCArICgoQ1s1XSA+Pj4gMCkgPCAoQ19bNV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s3XSA9IChDWzddICsgMHhkMzRkMzRkMyArICgoQ1s2XSA+Pj4gMCkgPCAoQ19bNl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgdGhpcy5fYiA9IChDWzddID4+PiAwKSA8IChDX1s3XSA+Pj4gMCkgPyAxIDogMDtcblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZy12YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgZ3ggPSBYW2ldICsgQ1tpXTtcblxuXHQgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgaGlnaCBhbmQgbG93IGFyZ3VtZW50IGZvciBzcXVhcmluZ1xuXHQgICAgICAgICAgICB2YXIgZ2EgPSBneCAmIDB4ZmZmZjtcblx0ICAgICAgICAgICAgdmFyIGdiID0gZ3ggPj4+IDE2O1xuXG5cdCAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBoaWdoIGFuZCBsb3cgcmVzdWx0IG9mIHNxdWFyaW5nXG5cdCAgICAgICAgICAgIHZhciBnaCA9ICgoKChnYSAqIGdhKSA+Pj4gMTcpICsgZ2EgKiBnYikgPj4+IDE1KSArIGdiICogZ2I7XG5cdCAgICAgICAgICAgIHZhciBnbCA9ICgoKGd4ICYgMHhmZmZmMDAwMCkgKiBneCkgfCAwKSArICgoKGd4ICYgMHgwMDAwZmZmZikgKiBneCkgfCAwKTtcblxuXHQgICAgICAgICAgICAvLyBIaWdoIFhPUiBsb3dcblx0ICAgICAgICAgICAgR1tpXSA9IGdoIF4gZ2w7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICBYWzBdID0gKEdbMF0gKyAoKEdbN10gPDwgMTYpIHwgKEdbN10gPj4+IDE2KSkgKyAoKEdbNl0gPDwgMTYpIHwgKEdbNl0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzFdID0gKEdbMV0gKyAoKEdbMF0gPDwgOCkgIHwgKEdbMF0gPj4+IDI0KSkgKyBHWzddKSB8IDA7XG5cdCAgICAgICAgWFsyXSA9IChHWzJdICsgKChHWzFdIDw8IDE2KSB8IChHWzFdID4+PiAxNikpICsgKChHWzBdIDw8IDE2KSB8IChHWzBdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFszXSA9IChHWzNdICsgKChHWzJdIDw8IDgpICB8IChHWzJdID4+PiAyNCkpICsgR1sxXSkgfCAwO1xuXHQgICAgICAgIFhbNF0gPSAoR1s0XSArICgoR1szXSA8PCAxNikgfCAoR1szXSA+Pj4gMTYpKSArICgoR1syXSA8PCAxNikgfCAoR1syXSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbNV0gPSAoR1s1XSArICgoR1s0XSA8PCA4KSAgfCAoR1s0XSA+Pj4gMjQpKSArIEdbM10pIHwgMDtcblx0ICAgICAgICBYWzZdID0gKEdbNl0gKyAoKEdbNV0gPDwgMTYpIHwgKEdbNV0gPj4+IDE2KSkgKyAoKEdbNF0gPDwgMTYpIHwgKEdbNF0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzddID0gKEdbN10gKyAoKEdbNl0gPDwgOCkgIHwgKEdbNl0gPj4+IDI0KSkgKyBHWzVdKSB8IDA7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUmFiYml0TGVnYWN5LmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUmFiYml0TGVnYWN5LmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLlJhYmJpdExlZ2FjeSA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJhYmJpdExlZ2FjeSk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuUmFiYml0TGVnYWN5O1xuXG59KSk7Il0sInNvdXJjZVJvb3QiOiIifQ==
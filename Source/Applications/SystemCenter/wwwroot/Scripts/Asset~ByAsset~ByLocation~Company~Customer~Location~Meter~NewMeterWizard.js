(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{33:function(e,t,r){"use strict";r.d(t,"a",(function(){return l}));var l,n=r(0),s=r(35),i=function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var l,n,s=r.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(l=s.next()).done;)i.push(l.value)}catch(e){n={error:e}}finally{try{l&&!l.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}return i},a=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};!function(e){function t(t){var r=[];return null!=t.AssetKey&&0!=t.AssetKey.length||r.push("A Key is required."),null!=t.AssetName&&0!=t.AssetName.length||r.push("A Name is required."),null!=t.VoltageKV&&e.isRealNumber(t.VoltageKV)||r.push("A valid nominal Voltage is required."),r}e.AssetAttributeFields=function(t){function r(r){return"AssetKey"==r?null!=t.Asset.AssetKey&&0!=t.Asset.AssetKey.length&&("New"==t.NewEdit?0!=t.Asset.ID||t.AllAssets.map((function(e){return e.AssetKey.toLowerCase()})).indexOf(t.Asset.AssetKey.toLowerCase())<0:(null==t.AllAssets.find((function(e){return e.ID===t.Asset.ID}))?"":t.AllAssets.find((function(e){return e.ID===t.Asset.ID})).AssetKey)==t.Asset.AssetKey||t.AllAssets.map((function(e){return e.AssetKey.toLowerCase()})).indexOf(t.Asset.AssetKey.toLowerCase())<0):"AssetName"==r?null!=t.Asset.AssetName&&t.Asset.AssetName.length>0:"VoltageKV"==r?null!=t.Asset.VoltageKV&&e.isRealNumber(t.Asset.VoltageKV):"Description"==r}return null==t.Asset?null:n.createElement(n.Fragment,null,t.HideSelectAsset?null:n.createElement(s.Select,{Record:t.Asset,Label:"Select Asset",Field:"ID",Options:a([{Value:"0",Label:"Add New"}],t.AllAssets.map((function(e){return{Value:e.ID.toString(),Label:e.AssetKey}}))),Setter:function(r){0!=parseInt(r.ID.toString())?t.GetDifferentAsset(parseInt(r.ID.toString())):t.UpdateState(e.getNewAsset("Line"))},Disabled:"Edit"==t.NewEdit}),t.HideAssetType?null:n.createElement(s.Select,{Record:t.Asset,Label:"Type",Field:"AssetType",Options:t.AssetTypes.filter((function(e){return"LineSegment"!=e.Name})).map((function(e){return{Value:e.Name,Label:e.Name}})),Setter:function(r){!function(r){var l={ID:t.Asset.ID,AssetKey:t.Asset.AssetKey,AssetName:t.Asset.AssetName,AssetType:r,Description:t.Asset.Description,VoltageKV:t.Asset.VoltageKV,Channels:t.Asset.Channels,Spare:t.Asset.Spare};(l=e.getNewAssetAttributes(l,r)).AssetTypeID=t.AssetTypes.find((function(e){return e.Name==r})).ID,t.UpdateState(l)}(r.AssetType)},Disabled:"Edit"==t.NewEdit||0!=t.Asset.ID}),n.createElement(s.Input,{Record:t.Asset,Field:"AssetKey",Label:"Key",Feedback:"A unique key of less than 50 characters is required.",Valid:r,Setter:t.UpdateState,Disabled:"New"==t.NewEdit&&0!=t.Asset.ID}),n.createElement(s.Input,{Record:t.Asset,Field:"AssetName",Label:"Name",Feedback:"Name must be less than 200 and is required.",Valid:r,Setter:t.UpdateState,Disabled:"New"==t.NewEdit&&0!=t.Asset.ID}),n.createElement(s.Input,{Record:t.Asset,Field:"VoltageKV",Label:"Nominal Voltage (L-L kV)",Feedback:"Nominal Voltage requires a numerical value.",Valid:r,Setter:t.UpdateState,Disabled:"New"==t.NewEdit&&0!=t.Asset.ID}),n.createElement(s.TextArea,{Rows:3,Record:t.Asset,Field:"Description",Valid:r,Setter:t.UpdateState,Disabled:"New"==t.NewEdit&&0!=t.Asset.ID}))},e.getNewAsset=function(t){var r={ID:0,AssetKey:null,AssetName:null,AssetType:t,Description:null,VoltageKV:null,Spare:!1,Channels:[]};return r=e.getNewAssetAttributes(r,t)},e.getNewLineDetails=function(){return{Length:0,X0:0,R0:0,X1:0,R1:0,ThermalRating:0}},e.getNewAssetAttributes=function(e,t){var r;return"Line"==t?((r=e).MaxFaultDistance=null,r.MinFaultDistance=null,r.Detail=this.getNewAsset("LineSegment"),r):"Breaker"==t?((r=e).ThermalRating=null,r.Speed=null,r.TripTime=null,r.PickupTime=null,r.TripCoilCondition=null,r):"Bus"==t||"CapacitorBankRelay"==t?r=e:"CapacitorBank"==t?((r=e).NumberOfBanks=null,r.CapacitancePerBank=null,r):"LineSegment"==t?((r=e).R0=null,r.X0=null,r.R1=null,r.X1=null,r.ThermalRating=null,r.Length=null,r):((r=e).R0=null,r.X0=null,r.R1=null,r.X1=null,r.ThermalRating=null,r.PrimaryVoltageKV=null,r.SecondaryVoltageKV=null,r.Tap=null,r)},e.isInteger=function(e){return null!=e.toString().match(/^-?[0-9]+$/)},e.isRealNumber=function(e){return null!=e.toString().match(/^-?[0-9]+(\.[0-9]+)?$/)},e.AttributeError=t,e.AssetError=function(r,l){var n=[];return n=t(r),"LineSegment"==l&&(null!=r.Length&&e.isRealNumber(r.Length)||n.push("A valid Length is required."),null!=r.R0&&e.isRealNumber(r.R0)||n.push("A valid R0 is required."),null!=r.X0&&e.isRealNumber(r.X0)||n.push("A valid X0 is required."),null!=r.R1&&e.isRealNumber(r.R1)||n.push("A valid R1 is required."),null!=r.X1&&e.isRealNumber(r.X1)||n.push("A valid X1 is required."),null!=r.ThermalRating&&e.isRealNumber(r.ThermalRating)||n.push("A valid ThermalRating is required.")),"Breaker"==l&&(null!=r.ThermalRating&&e.isRealNumber(r.ThermalRating)||n.push("A valid ThermalRating is required."),null!=r.Speed&&e.isRealNumber(r.Speed)||n.push("A valid Breaker Speed id required."),null==r.TripTime||e.isRealNumber(r.TripTime)||n.push("Trip Time Limit needs to be a numeric value or empty."),null==r.PickupTime||e.isRealNumber(r.PickupTime)||n.push("Pickup Time Limit needs to be a numeric value or empty."),null==r.TripCoilCondition||e.isRealNumber(r.TripCoilCondition)||n.push("Trip Coil Condition Limit needs to be a numeric value or empty.")),"CapacitorBankRelay"==l&&(null!=r.OnVoltageThreshhold&&e.isRealNumber(r.OnVoltageThreshhold)||n.push("A valid On Voltage Threshold  is required.")),"Transformer"==l&&(null!=r.R0&&e.isRealNumber(r.R0)||n.push("A valid R0 is required."),null!=r.X0&&e.isRealNumber(r.X0)||n.push("A valid X0 is required."),null!=r.R1&&e.isRealNumber(r.R1)||n.push("A valid R1 is required."),null!=r.X1&&e.isRealNumber(r.X1)||n.push("A valid X1 is required."),null!=r.ThermalRating&&e.isRealNumber(r.ThermalRating)||n.push("A valid ThermalRating is required.")),"CapacitorBank"==l&&(null!=r.NumberOfBanks&&e.isInteger(r.NumberOfBanks)||n.push("A valid Number Of Banks is required."),null!=r.CapacitancePerBank&&e.isRealNumber(r.CapacitancePerBank)||n.push("A valid Capacitor Step Size is required."),null!=r.MaxKV&&e.isRealNumber(r.MaxKV)||n.push("A valid Maximum Operating Voltage is required."),null!=r.UnitKV&&e.isRealNumber(r.UnitKV)||n.push("A valid Rated Voltage for a Unit is required."),null!=r.UnitKVAr&&e.isRealNumber(r.UnitKVAr)||n.push("A valid kVAR Rating for a Unit is required."),null!=r.PosReactanceTol&&e.isRealNumber(r.PosReactanceTol)||n.push("A valid pos. Reactance Tolerance is required."),null!=r.NegReactanceTol&&e.isRealNumber(r.NegReactanceTol)||n.push("A valid neg. Reactance Tolerance is required."),r.Fused?(null!=r.Nparalell&&e.isInteger(r.Nparalell)||n.push("A valid num. of units per Group is required."),null!=r.Nseries&&e.isInteger(r.Nseries)||n.push("A valid num. of Series Groups per Phase is required."),null!=r.LowerXFRRatio&&e.isRealNumber(r.LowerXFRRatio)||n.push("A valid Midgroup VT Ratio is required."),null!=r.Nshorted&&e.isRealNumber(r.Nshorted)||n.push("A valid initial guess of shorted Elements is required."),null!=r.BlownFuses&&e.isRealNumber(r.BlownFuses)||n.push("A valid initial guess of blown Fuses per Group is required."),null!=r.BlownGroups&&e.isRealNumber(r.BlownGroups)||n.push("A valid initial guess of Groups with Blown fuse is required.")):(null!=r.Nparalell&&e.isInteger(r.Nparalell)||n.push("A valid num. of Parallel Strings is required."),null!=r.Nseries&&e.isInteger(r.Nseries)||n.push("A valid num. of Units per String is required."),null!=r.NSeriesGroup&&e.isInteger(r.NSeriesGroup)||n.push("A valid valid num. of Series Groups in each Unit is required."),null!=r.NParalellGroup&&e.isInteger(r.NParalellGroup)||n.push("A valid num. of Elements per Group is required."),null!=r.VTratioBus&&e.isRealNumber(r.VTratioBus)||n.push("A valid Bus VT ratio is required."),null!=r.NumberLVCaps&&e.isInteger(r.NumberLVCaps)||n.push("A valid num. of Relay Caps is required."),null!=r.NumberLVUnits&&e.isInteger(r.NumberLVUnits)||n.push("A valid num. of elements per Relay Cap is required."),null!=r.LVKVAr&&e.isRealNumber(r.LVKVAr)||n.push("A valid Low Voltage Cap Size is required."),null!=r.LVKV&&e.isRealNumber(r.LVKV)||n.push("A valid Low Voltage Cap rating is required."),null!=r.LVNegReactanceTol&&e.isRealNumber(r.LVNegReactanceTol)||n.push("A valid neg. Reactance Tolerance for LV Units is required."),null!=r.LVPosReactanceTol&&e.isRealNumber(r.LVPosReactanceTol)||n.push("A valid pos. Reactance Tolerance for LV Units is required."),null!=r.Nshorted&&e.isRealNumber(r.Nshorted)||n.push("A valid initial guess of shorted elements is required."),r.Compensated?(null!=r.RelayPTRatioPrimary&&e.isRealNumber(r.RelayPTRatioPrimary)||n.push("A valid Relay PT ratio is required."),null!=r.Rh&&e.isRealNumber(r.Rh)||n.push("A valid Vt Input Resistor is required."),null!=r.Sh&&e.isRealNumber(r.Sh)||n.push("A valid VT Input Resistor Wattage is required.")):(null!=r.Rv&&e.isRealNumber(r.Rv)||n.push("A valid Voltage Divider Output R is required."),null!=r.Rh&&e.isRealNumber(r.Rh)||n.push("A valid Voltage Divider Input R is required.")))),n}}(l||(l={}))},39:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SelectTable=void 0;var l=r(44),n=r(51);Object.defineProperty(t,"SelectTable",{enumerable:!0,get:function(){return n.SelectTable}}),t.default=l.default},44:function(e,t,r){"use strict";var l,n=this&&this.__extends||(l=function(e,t){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=this&&this.__assign||function(){return(s=Object.assign||function(e){for(var t,r=1,l=arguments.length;r<l;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=function(e){return i.createElement("span",{style:{width:10,height:10,margin:3},className:"fa fa-angle-"+(e.ascending?"up":"down")})},u=function(e){function t(t){return e.call(this,t)||this}return n(t,e),t.prototype.render=function(){var e=this.generateRows(),t=this.generateHeaders();return i.createElement("table",{className:void 0!==this.props.tableClass?this.props.tableClass:"",style:this.props.tableStyle},i.createElement("thead",{style:this.props.theadStyle},t),i.createElement("tbody",{style:this.props.tbodyStyle},e))},t.prototype.generateHeaders=function(){var e=this;if(0===this.props.cols.length)return null;var t=this.props.cols.map((function(t,r){var l;return void 0===(l=void 0!==t.headerStyle?t.headerStyle:{}).cursor&&(l.cursor="pointer"),i.createElement("th",{key:r,style:l,onClick:function(r){return e.handleSort({col:t.key,ascending:e.props.ascending},r)}},t.label,e.props.sortField===t.key?i.createElement(a,{ascending:e.props.ascending}):null)}));return i.createElement("tr",null,t)},t.prototype.generateRows=function(){var e=this;return 0===this.props.data.length?null:this.props.data.map((function(t,r){var l,n=e.props.cols.map((function(l){var n;return n=void 0===l.rowStyle?{}:s({},l.rowStyle),i.createElement("td",{key:r.toString()+(null===l.key?"":t[l.key])+l.key,style:n,onClick:e.handleClick.bind(e,{col:l.key,row:t,data:null===l.key?null:t[l.key],index:r})},void 0!==l.content?l.content(t,l.key,n,r):null===l.key?null:t[l.key])}));return void 0===(l=void 0!==e.props.rowStyle?s({},e.props.rowStyle):{}).cursor&&(l.cursor="pointer"),void 0!==e.props.selected&&e.props.selected(t)&&(l.backgroundColor="yellow"),i.createElement("tr",{style:l,key:r.toString()},n)}))},t.prototype.handleClick=function(e,t){this.props.onClick(e,t)},t.prototype.handleSort=function(e,t){this.props.onSort(e)},t}(i.Component);t.default=u},51:function(e,t,r){"use strict";var l=this&&this.__assign||function(){return(l=Object.assign||function(e){for(var t,r=1,l=arguments.length;r<l;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},n=this&&this.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var l=Array(e),n=0;for(t=0;t<r;t++)for(var s=arguments[t],i=0,a=s.length;i<a;i++,n++)l[n]=s[i];return l};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectTable=void 0;var s=r(0),i=r(31),a=r(44);t.SelectTable=function(e){var t=s.useRef(!1),r=s.useState(e.data),u=r[0],o=r[1],d=s.useState([]),c=d[0],p=d[1],h=s.useState(e.sortField),m=h[0],f=h[1],A=s.useState(e.ascending),y=A[0],g=A[1];s.useEffect((function(){t.current?p((function(t){return t.length===u.length?[]:u.map((function(t){return t[e.KeyField]}))})):t.current=!0}),[e.selectAllCounter]),s.useEffect((function(){e.data.length!==u.length&&o(e.data)}),[e.data]),s.useEffect((function(){p((function(t){return t.filter((function(t){return u.findIndex((function(r){return r[e.KeyField]===t}))>-1}))}))}),[u]),s.useEffect((function(){o((function(e){return i.orderBy(e,[m],[y?"asc":"desc"])}))}),[y,m]),s.useEffect((function(){e.onSelection(u.filter((function(t){return c.findIndex((function(r){return r===t[e.KeyField]}))>-1})))}),[c]);var R={cols:n([{key:e.KeyField,label:"",headerStyle:{width:"4em"},rowStyle:{width:"4em"},content:function(t,r,l){return c.findIndex((function(r){return r===t[e.KeyField]}))>-1?s.createElement("div",{style:{marginTop:"16px",textAlign:"center"}},s.createElement("i",{className:"fa fa-check-square-o fa-3x","aria-hidden":"true"})):null}}],e.cols),data:u,onClick:function(t,r){var l=c.findIndex((function(r){return r===t.row[e.KeyField]}));p(-1===l?function(r){return n(r,[t.row[e.KeyField]])}:function(r){return r.filter((function(r){return r!==t.row[e.KeyField]}))})},sortField:m,ascending:y,onSort:function(e){e.col===m?g(!y):f(e.col)},tableClass:e.tableClass,tableStyle:e.tableStyle,theadStyle:e.theadStyle,theadClass:e.theadClass,tbodyStyle:e.tbodyStyle,tbodyClass:e.tbodyClass,selected:function(e){return!1},rowStyle:e.rowStyle};return s.createElement(a.default,l({},R))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
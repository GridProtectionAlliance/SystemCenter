(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{315:function(e,t,a){"use strict";a.r(t);var n=a(0),l=a(39),r=a.n(l),o=a(31),i=a(3),s=a(37),c=a(91),u=a(33),d=a(49),m=a(38),p=a(62),y=function(){return(y=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var l in t=arguments[a])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},h=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)o.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return o};t.default=function(e){var t=Object(i.useHistory)(),a=h(n.useState([]),2),l=a[0],f=a[1],b=h(n.useState([]),2),E=b[0],N=b[1],g=h(n.useState({ID:0,LocationKey:null,Name:null,Alias:null,Description:null,Latitude:null,Longitude:null,ShortName:null}),2),v=g[0],S=g[1],F=h(n.useState("LocationKey"),2),D=F[0],A=F[1],w=h(n.useState(p.b.Location),2),L=w[0],k=w[1],C=h(n.useState("Idle"),2),T=C[0],x=C[1],O=h(n.useState(!0),2),I=O[0],P=O[1];function R(e){return"LocationKey"==e?null!=v.LocationKey:"Name"==e?null!=v.Name&&v.Name.length>0&&v.Name.length<=200:"Alias"==e?null==v.Alias||v.Alias.length<=200:"ShortName"==e?null==v.ShortName||v.ShortName.length<=50:"Latitude"==e?null!=v.Latitude&&u.a.isRealNumber(v.Latitude):"Longitude"==e?null!=v.Longitude&&u.a.isRealNumber(v.Longitude):"Description"==e}return n.useEffect((function(){var e=(x("Loading"),$.ajax({type:"Post",url:homePath+"api/openXDA/Location/SearchableListIncludingMeter",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:p.c.Location(l),OrderBy:D,Ascending:I}),cache:!1,async:!0}));return e.done((function(e){x("Idle"),N(JSON.parse(e))})).fail((function(e){return x("Error")})),function(){null!=e.abort&&e.abort()}}),[D,I,l]),n.useEffect((function(){S({ID:0,LocationKey:null,Name:null,Alias:null,Description:null,Latitude:null,Longitude:null,ShortName:null})}),[]),n.useEffect((function(){var e=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/Location/FieldName/0",contentType:"application/json; charset=utf-8",cache:!1,async:!0});return e.done((function(e){var t=o.orderBy(p.b.Location.concat(e.map((function(e){return y({label:"[AF"+(null!=e.ExternalDB?" "+e.ExternalDB:"")+"] "+e.FieldName,key:e.FieldName},"string"==(t=e.Type)||"integer"==t||"number"==t||"datetime"==t||"boolean"==t?{type:t}:{type:"enum",enum:[{Label:t,Value:t}]});var t}))),["label"],["asc"]);k(t)})),e}();return function(){null!=e.abort&&e.abort()}}),[]),n.createElement("div",{style:{width:"100%",height:"100%"}},n.createElement(m.SearchBar,{CollumnList:L,SetFilter:function(e){return f(e)},Direction:"left",defaultCollumn:p.a.Location,Width:"50%",Label:"Search",ShowLoading:"Loading"==T,ResultNote:"Error"==T?"Could not complete Search":"Found "+E.length+" Locations",GetEnum:function(e,t){var a=null;return"enum"!=t.type||null==t.enum||1!=t.enum.length?function(){}:((a=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+t.enum[0].Value,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return e(t.map((function(e){return{Value:e.Value.toString(),Label:e.Text}})))})),function(){null!=a&&null==a.abort&&a.abort()})}},n.createElement("li",{className:"nav-item",style:{width:"20%",paddingRight:10}},n.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},n.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Actions:"),n.createElement("form",null,n.createElement("div",{className:"form-group"},n.createElement("button",{className:"btn btn-primary","data-toggle":"modal","data-target":"#locationModal",hidden:e.Roles.indexOf("Administrator")<0&&e.Roles.indexOf("Transmission SME")<0,onClick:function(e){e.preventDefault()}},"Add Substation")),n.createElement("div",{className:"form-group"},n.createElement("button",{className:"btn btn-primary","data-toggle":"modal","data-target":"#extDBModal",hidden:e.Roles.indexOf("Administrator")<0&&e.Roles.indexOf("Transmission SME")<0,onClick:function(e){e.preventDefault()}},"Update Ext DB ")))))),n.createElement("div",{style:{width:"100%",height:"calc( 100% - 136px)"}},n.createElement(r.a,{cols:[{key:"Name",label:"Name",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"LocationKey",label:"Key",headerStyle:{width:"30%"},rowStyle:{width:"30%"}},{key:"Meters",label:"Meters",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:"Assets",label:"Assets",headerStyle:{width:"10%"},rowStyle:{width:"10%"}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}],tableClass:"table table-hover",data:E,sortField:D,ascending:I,onSort:function(e){e.col==D?P(!I):(P(!0),A(e.col))},onClick:function(e){t.push({pathname:homePath+"index.cshtml",search:"?name=Location&LocationID="+e.row.ID,state:{}})},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-300,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),n.createElement("div",{className:"modal",id:"locationModal"},n.createElement("div",{className:"modal-dialog",style:{maxWidth:"100%",width:"75%"}},n.createElement("div",{className:"modal-content"},n.createElement("div",{className:"modal-header"},n.createElement("h4",{className:"modal-title"},"Add Substation"),n.createElement("button",{type:"button",className:"close","data-dismiss":"modal"},"×")),n.createElement("div",{className:"modal-body"},n.createElement("div",{className:"row"},n.createElement("div",{className:"col"},n.createElement(s.a,{Record:v,Field:"LocationKey",Feedback:"A unique key of less than 50 characters is required.",Valid:R,Setter:S}),n.createElement(s.a,{Record:v,Field:"Name",Feedback:"Name must be less than 200 characters and is required.",Valid:R,Setter:S}),n.createElement(s.a,{Record:v,Field:"ShortName",Feedback:"ShortName must be less than 50 characters.",Valid:R,Setter:S}),n.createElement(s.a,{Record:v,Field:"Alias",Feedback:"Alias must be less than 200 characters.",Valid:R,Setter:S})),n.createElement("div",{className:"col"},n.createElement(s.a,{Record:v,Field:"Latitude",Feedback:"Latitude is a require numeric field.",Valid:R,Setter:S}),n.createElement(s.a,{Record:v,Field:"Longitude",Feedback:"Longitude is a require numeric field.",Valid:R,Setter:S}),n.createElement(c.a,{Rows:3,Record:v,Field:"Description",Valid:R,Setter:S})))),n.createElement("div",{className:"modal-footer"},n.createElement("button",{type:"button",className:"btn btn-primary","data-dismiss":"modal",onClick:function(){$.ajax({type:"POST",url:homePath+"api/OpenXDA/Location/Add",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(v),cache:!1,async:!0})}},"Save"),n.createElement("button",{type:"button",className:"btn btn-danger","data-dismiss":"modal"},"Close"))))),n.createElement("div",{className:"modal",id:"extDBModal"},n.createElement("div",{className:"modal-dialog",style:{maxWidth:"100%",width:"75%"}},n.createElement("div",{className:"modal-content"},n.createElement("div",{className:"modal-header"},n.createElement("h4",{className:"modal-title"},"Substation External Database Fields"),n.createElement("button",{type:"button",className:"close","data-dismiss":"modal"},"×")),n.createElement("div",{className:"modal-body"},n.createElement(d.a,{ID:-1,Type:"Location",Tab:""})),n.createElement("div",{className:"modal-footer"},n.createElement("button",{type:"button",className:"btn btn-danger","data-dismiss":"modal"},"Close"))))))}},37:function(e,t,a){"use strict";var n,l=a(0),r=a(31),o=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){var e=this;return l.createElement("div",{className:"form-group"},l.createElement("label",null,null==this.props.Label?this.props.Field:this.props.Label),l.createElement("input",{className:this.props.Valid(this.props.Field)?"form-control":"form-control is-invalid",onChange:function(t){var a=r.clone(e.props.Record);""!=t.target.value?a[e.props.Field]=t.target.value:a[e.props.Field]=null,e.props.Setter(a)},value:null==this.props.Record[this.props.Field]?"":this.props.Record[this.props.Field].toString(),disabled:null!=this.props.Disabled&&this.props.Disabled}),l.createElement("div",{className:"invalid-feedback"},null==this.props.Feedback?this.props.Field+" is a required field.":this.props.Feedback))},t}(l.Component);t.a=i},49:function(e,t,a){"use strict";var n=a(0),l=a(31),r=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)o.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return o};function o(e){return n.createElement("tr",null,n.createElement("td",null,e.ExternalDB),n.createElement("td",null,null==e.updated?"N/A":moment(e.updated).format("MM/DD/YYYY")),n.createElement("td",null,n.createElement("button",{className:"btn btn-primary",onClick:function(t){return e.Update(e.ExternalDB)}},"Update ",e.ExternalDB)))}function i(e){var t=l.clone(e.Values),a=t.find((function(t){return t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField}));return n.createElement("tr",null,-1==e.ParentTableID?n.createElement("td",null,e.Field.DisplayName):null,n.createElement("td",null,e.Field.FieldName),n.createElement("td",null,null==e.Field.PreviousValue?"":e.Field.PreviousValue),e.Field.Error?n.createElement("td",null,e.Field.Message):n.createElement("td",null,n.createElement("input",{className:e.Field.Changed?"form-control is-invalid":"form-control",onChange:function(n){""!=n.target.value?a.Value=n.target.value:a.Value=null,a.Changed=!0,e.Setter(t)},value:null==a.Value?"":a.Value.toString()})),n.createElement("td",null,e.Field.Error?n.createElement("span",null,n.createElement("i",{className:"fa fa-exclamation-triangle"})):null),n.createElement("td",null,n.createElement("button",{className:"btn btn-sm",onClick:function(a){return t=t.filter((function(t){return!(t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField)})),void e.Setter(t)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-times"})))))}t.a=function(e){var t=r(n.useState([]),2),a=t[0],l=t[1],s=r(n.useState([]),2),c=s[0],u=s[1],d=r(n.useState(!1),2),m=d[0],p=d[1],y=r(n.useState(""),2),h=y[0],f=y[1];function b(){var t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/"+e.Type+"/extDataBases",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){l(e)})),function(){null!=t.abort&&t.abort()}}function E(){u([]),p(!1)}function N(e){e.length<1?E():u(e)}return n.useEffect((function(){return p(!1),u([]),b()}),[e.ID,e.Type,e.Tab]),n.createElement("div",{className:"card",style:{marginBottom:10}},n.createElement("div",{className:"card-header"},n.createElement("h4",null," External Data Base Connections:")),n.createElement("div",{className:"card-body"},n.createElement("div",{style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540,overflowY:"auto"}},m?n.createElement("table",{id:"fields",className:"table"},n.createElement("thead",null,n.createElement("tr",null,-1==e.ID?n.createElement("th",null," ",e.Type," "):null,n.createElement("th",null,"Field"),n.createElement("th",{style:{width:300}},"Previous Value"),n.createElement("th",{style:{width:300}},"Updated Value"),n.createElement("th",{style:{width:30}}),n.createElement("th",{style:{width:30}}))),n.createElement("tbody",null,c.map((function(t,a){return n.createElement(i,{key:a,ParentTableID:e.ID,Field:t,Values:c,Setter:N})})))):n.createElement("table",{id:"overview",className:"table"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null,"External DB"),n.createElement("th",{style:{width:250}},"Last Updated"),n.createElement("th",{style:{width:300}}))),n.createElement("tbody",null,a.map((function(t,a){return n.createElement(o,{key:a,ParentTableID:e.ID,ExternalDB:t.name,updated:t.lastupdate,Update:function(t){var a;a=t,$.ajax({type:"GET",url:homePath+"api/ExternalDB/"+a+"/"+e.Type+"/Update/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){u(e),p(!0),f(a),e.length<1&&E()}))}})})))))),m?n.createElement("div",{className:"card-footer"},n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-primary",onClick:function(){var t=$.ajax({type:"POST",url:homePath+"api/ExternalDB/"+h+"/"+e.Type+"/ConfirmUpdate",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({data:c}),cache:!1,async:!0});return u([]),p(!1),b(),function(){null!=t.abort&&t.abort()}}},"Save Changes")),n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-default",onClick:E},"Cancel"))):null)}},62:function(e,t,a){"use strict";a.d(t,"b",(function(){return n})),a.d(t,"a",(function(){return l})),a.d(t,"c",(function(){return r}));var n,l,r,o=function(){return(o=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var l in t=arguments[a])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};!function(e){e.Customer=[{label:"Account Name",key:"CustomerKey",type:"string"},{label:"Name",key:"Name",type:"string"},{label:"Phone",key:"Phone",type:"string"},{label:"Description",key:"Description",type:"string"},{label:"PQView Site Name",key:"PQViewSite",type:"string"},{label:"Number of Assigned Meters",key:"Meters",type:"integer"}],e.Company=[{label:"Name",key:"Name",type:"string"},{label:"CompanyID",key:"CompanyID",type:"string"},{label:"Description",key:"Description",type:"string"},{label:"Company Type",key:"CompanyTypeID",type:"enum"}],e.UserAccount=[{label:"First Name",key:"UserAccount.FirstName",type:"string"},{label:"Last Name",key:"UserAccount.LastName",type:"string"},{label:"Phone",key:"UserAccount.Phone",type:"string"},{label:"Mobile Phone",key:"UserAccount.MobilePhone",type:"string"},{label:"Email",key:"UserAccount.Email",type:"string"},{label:"TSC",key:"UserAccount.TSC",type:"string"},{label:"Role",key:"Role.Name",type:"string"},{label:"Security Role",key:"ApplicationRole.Name",type:"string"}],e.Location=[{label:"Name",key:"Name",type:"string"},{label:"Key",key:"LocationKey",type:"string"},{label:"Asset",key:"Asset",type:"string"},{label:"Meter",key:"Meter",type:"string"},{label:"Number of Assets",key:"Assets",type:"integer"},{label:"Number of Meters",key:"Meters",type:"integer"}]}(n||(n={})),function(e){e.Company={label:"Name",key:"Name",type:"string"},e.Customer={label:"Account Name",key:"CustomerKey",type:"string"},e.UserAccount={label:"First Name",key:"UserAccount.FirstName",type:"string"},e.Location={label:"Name",key:"Name",type:"string"}}(l||(l={})),function(e){e.Company=function(e){return e.map((function(e){return-1==n.Company.findIndex((function(t){return t.key==e.FieldName}))?o(o({},e),{isPivotColumn:!0}):e}))},e.Customer=function(e){return e.map((function(e){if("PQViewSite"==e.FieldName){var t=e.SearchText;return 0==t.length&&(t="%"),t.replace("*","%"),t="'"+t+"'",{FieldName:"ID",SearchText:"(SELECT Customer.ID FROM PQViewSite LEFT JOIN [systemCenter.CustomerAccess] ON[systemCenter.CustomerAccess].PQViewSiteID = PQViewSite.ID LEFT JOIN Customer C ON C.ID = [systemCenter.CustomerAccess].CustomerID WHERE  PQViewSite.Name "+e.Operator+t+" )",Operator:"IN",Type:"number",isPivotColumn:!1}}return-1==n.Customer.findIndex((function(t){return t.key==e.FieldName}))?o(o({},e),{isPivotColumn:!0}):e}))},e.Location=function(e){return e.map((function(e){var t;return"Meter"==e.FieldName?(0==(t=e.SearchText).length&&(t="%"),t.replace("*","%"),t=" '"+t+"'",{FieldName:"ID",SearchText:"(SELECT Meter.LocationID FROM Meter WHERE  Meter.AssetKey "+e.Operator+t+" or Meter.Name "+e.Operator+t+" )",Operator:"IN",Type:"number",isPivotColumn:!1}):"Asset"==e.FieldName?(0==(t=e.SearchText).length&&(t="%"),t.replace("*","%"),t=" '"+t+"'",{FieldName:"ID",SearchText:"(SELECT AssetLocation.LocationID FROM Asset LEFT JOIN AssetLocation ON AssetLocation.AssetID = Asset.ID WHERE  Asset.AssetName "+e.Operator+t+" or Asset.AssetKey "+e.Operator+t+" )",Operator:"IN",Type:"number",isPivotColumn:!1}):-1==n.Location.findIndex((function(t){return t.key==e.FieldName}))?o(o({},e),{isPivotColumn:!0}):e}))}}(r||(r={}))},91:function(e,t,a){"use strict";var n,l=a(0),r=a(31),o=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){var e=this;return l.createElement("div",{className:"form-group"},l.createElement("label",null,null==this.props.Label?this.props.Field:this.props.Label),l.createElement("textarea",{rows:this.props.Rows,className:this.props.Valid(this.props.Field)?"form-control":"form-control is-invalid",onChange:function(t){var a=r.clone(e.props.Record);""!=t.target.value?a[e.props.Field]=t.target.value:a[e.props.Field]=null,e.props.Setter(a)},value:null==this.props.Record[this.props.Field]?"":this.props.Record[this.props.Field].toString(),disabled:null!=this.props.Disabled&&this.props.Disabled}),l.createElement("div",{className:"invalid-feedback"},null==this.props.Feedback?this.props.Field+" is a required field.":this.props.Feedback))},t}(l.Component);t.a=i}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{118:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=n(0),l=n(11),r=n(35),o=n(12);function i(e){var t=Object(l.b)(),n=Object(l.c)(o.b),i=Object(l.c)(o.c);function c(t){return"CompanyID"==t?null!=e.Company.CompanyID&&null!=e.Company.CompanyID.match(/[0-9,a-z,A-Z]{8}/):"Name"==t?null!=e.Company.Name&&e.Company.Name.length>0&&e.Company.Name.length<=200:"Description"==t}return a.useEffect((function(){var t=[];null!=e.Company.CompanyID&&null!=e.Company.CompanyID.match(/[0-9]{8}/)||t.push("CompanyID must be a 8 character alphanumeric Identifier."),null!=e.Company.Name&&0!=e.Company.Name.length||t.push("A name is required."),null!=e.Company.Name&&e.Company.Name.length>200&&t.push("Company Name must be less than 200 characters."),null!=e.setErrors&&e.setErrors(t)}),[e.Company]),a.useEffect((function(){if("unintiated"==i){var e=t(Object(o.a)());return function(){void 0!==e.abort()&&e.abort()}}}),[]),a.createElement("form",null,a.createElement(r.Select,{Record:e.Company,Label:"Company Type",Field:"CompanyTypeID",Options:n.map((function(e){return{Value:e.ID.toString(),Label:e.Name}})),Setter:e.Setter}),a.createElement(r.Input,{Record:e.Company,Field:"Name",Feedback:"Name must be less than 200 characters.",Valid:c,Setter:e.Setter}),a.createElement(r.Input,{Record:e.Company,Field:"CompanyID",Feedback:"CompanyID must be 8 numeric characters.",Valid:c,Setter:e.Setter}),a.createElement(r.TextArea,{Rows:3,Record:e.Company,Field:"Description",Valid:c,Setter:e.Setter}))}},331:function(e,t,n){"use strict";n.r(t);var a,l=n(0),r=n(59),o=n(60),i=n(31),c=n(118),u=(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(t,n){var a=e.call(this,t,n)||this;return a.state={Company:a.props.Company},a}return u(t,e),t.prototype.componentDidMount=function(){},t.prototype.componentWillReceiveProps=function(e){this.setState({Company:e.Company})},t.prototype.updateCompany=function(){var e=this,t=i.clone(this.state.Company);return $.ajax({type:"PATCH",url:homePath+"api/SystemCenter/Company/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(this.state.Company),dataType:"json",cache:!0,async:!0}).done((function(n){e.props.stateSetter(t)}))},t.prototype.render=function(){var e=this;return l.createElement("div",{className:"card",style:{marginBottom:10}},l.createElement("div",{className:"card-header"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h4",null,"Company Information:")))),l.createElement("div",{className:"card-body"},l.createElement(c.a,{Company:this.state.Company,Setter:function(t){return e.setState({Company:t})}})),l.createElement("div",{className:"card-footer"},l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary",onClick:function(){return e.updateCompany()},hidden:0==this.state.Company.ID,disabled:this.state.Company==this.props.Company},"Update")),l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-default",onClick:function(){return e.setState({Company:e.props.Company})},disabled:this.state.Company==this.props.Company},"Reset"))))},t}(l.Component),m=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return o};function d(e){var t=m(l.useState([]),2),n=t[0],a=t[1],r=m(l.useState([]),2),o=r[0],c=r[1],u=m(l.useState(""),2),s=u[0],d=u[1],p=m(l.useState(""),2),f=p[0],y=p[1],h=m(l.useState([]),2),E=h[0],b=h[1],N=m(l.useReducer((function(e){return e+1}),0),2),T=N[0],g=N[1];return l.useEffect((function(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/CompanyMeter/"+e.Company.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});t.done((function(e){return a(e)}));var n=$.ajax({type:"GET",url:homePath+"api/OpenXDA/Meter",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return n.done((function(e){return c(i.orderBy(e,["AssetKey"],["asc"]))})),function(){null!=t.abort&&t.abort(),null!=n.abort&&n.abort()}}),[T]),l.createElement("div",{className:"card",style:{marginBottom:10}},l.createElement("div",{className:"card-header"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h4",null,"Sites:")))),l.createElement("div",{className:"card-body"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("div",{style:{width:"100%",height:window.innerHeight-421,maxHeight:window.innerHeight-421,padding:0,overflowY:"auto"}},l.createElement("input",{className:"form-control",placeholder:"Search filter for select box ...",value:f,onChange:function(e){return y(e.target.value)}}),l.createElement("table",{className:"table"},l.createElement("thead",null,l.createElement("tr",null,l.createElement("th",null,"Assigned Sites:"),l.createElement("th",null))),l.createElement("tbody",null,n.length>0?n.filter((function(e){return e.DisplayName.toLowerCase().indexOf(f.toLowerCase())>=0})).map((function(e,t){return l.createElement("tr",{key:t},l.createElement("td",null,e.DisplayName),l.createElement("td",null,l.createElement("button",{className:"btn btn-sm",onClick:function(t){var n;t.preventDefault(),n=e,$.ajax({type:"DELETE",url:homePath+"api/SystemCenter/CompanyMeter/Delete",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(n),cache:!1,async:!0}).done((function(){g(1)})).fail((function(e){500==e.status?alert(e.responseJSON.ExceptionMessage):g(1)}))}},l.createElement("span",null,l.createElement("i",{className:"fa fa-times"})))))})):null)))),l.createElement("div",{className:"col"},l.createElement("input",{className:"form-control",placeholder:"Search filter for select box ...",value:s,onChange:function(e){return d(e.target.value)}}),l.createElement("select",{className:"form-control",style:{paddingTop:5,height:"calc(100% - 35px)"},value:E.map((function(e){return e.ID.toString()})),multiple:!0,onChange:function(e){b(Array.from(e.target.selectedOptions).map((function(e){return{ID:e.value,Name:e.text}})))}},o.filter((function(e){return e.AssetKey.toLowerCase().indexOf(s.toLowerCase())>=0})).map((function(e){return l.createElement("option",{key:e.ID,value:e.ID,hidden:null!=n.find((function(t){return t.MeterID==e.ID})),disabled:null!=n.find((function(t){return t.MeterID==e.ID}))},e.AssetKey)})))))),l.createElement("div",{className:"card-footer"},l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){$.ajax({type:"POST",url:homePath+"api/SystemCenter/CompanyMeter/AddMultiple",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify(E.map((function(t){return{ID:0,CompanyID:e.Company.ID,MeterID:parseInt(t.ID.toString()),DisplayName:t.Name,Enabled:!0}}))),cache:!1,async:!0}).done((function(){g(1)})).fail((function(e){500==e.status?alert(e.responseJSON.ExceptionMessage):g(1)}))}},"Add Sites"))))}n.d(t,"default",(function(){return f}));var p=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return o};function f(e){var t=p(l.useState(null),2),n=t[0],a=t[1],i=p(l.useState((function(){return sessionStorage.hasOwnProperty("Company.Tab")?JSON.parse(sessionStorage.getItem("Company.Tab")):"companyInfo"})),2),c=i[0],u=i[1];return l.useEffect((function(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/Company/One/"+e.CompanyID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){return a(e)})),function(){null!=t.abort&&t.abort()}}),[]),l.useEffect((function(){sessionStorage.setItem("Company.Tab",JSON.stringify(c))}),[c]),null==n?null:l.createElement("div",{style:{width:"100%",height:window.innerHeight-63,maxHeight:window.innerHeight-63,overflow:"hidden",padding:15}},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h2",null,null!=n?n.Name:"")),l.createElement("div",{className:"col"},l.createElement("button",{className:"btn btn-danger pull-right",hidden:null==n,onClick:function(){return function(){if(confirm("This will delete the Company Permanently"))return $.ajax({type:"DELETE",url:homePath+"api/SystemCenter/Company/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(n),dataType:"json",cache:!0,async:!0})}().done((function(){return window.location.href=homePath+"index.cshtml?name=PCompanies"}))}},"Delete Company (Permanent)"))),l.createElement("hr",null),l.createElement("ul",{className:"nav nav-tabs"},l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("companyInfo"==c?" active":""),onClick:function(){return u("companyInfo")},"data-toggle":"tab",href:"#companyInfo"},"Company Info")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("additionalFields"==c?" active":""),onClick:function(){return u("additionalFields")},"data-toggle":"tab"},"Additional Fields")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("meters"==c?" active":""),onClick:function(){return u("meters")},"data-toggle":"tab",href:"#meters"},"Assigned Meters")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("notes"==c?" active":""),onClick:function(){return u("notes")},"data-toggle":"tab",href:"#notes"},"Notes"))),l.createElement("div",{className:"tab-content",style:{maxHeight:window.innerHeight-235,overflow:"hidden"}},l.createElement("div",{className:"tab-pane "+("companyInfo"==c?" active":"fade"),id:"companyInfo"},l.createElement(s,{Company:n,stateSetter:a})),l.createElement("div",{className:"tab-pane "+("additionalFields"==c?" active":"fade"),id:"additionalFields"},l.createElement(o.a,{ID:n.ID,Type:"Company",Tab:c})),l.createElement("div",{className:"tab-pane "+("meters"==c?" active":"fade"),id:"meters"},l.createElement(d,{Company:n})),l.createElement("div",{className:"tab-pane "+("notes"==c?" active":"fade"),id:"notes"},l.createElement(r.a,{ID:e.CompanyID,Type:"Company"}))))}},59:function(e,t,n){"use strict";var a=n(35),l=n(38),r=n(39),o=n.n(r),i=n(31),c=n.n(i),u=n(0),s=function(){return(s=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},m=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return o};t.a=function(e){var t=m(u.useState(0),2),n=t[0],r=t[1],i=m(u.useState({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),2),d=i[0],p=i[1],f=m(u.useState(!1),2),y=f[0],h=f[1],E=m(u.useState([]),2),b=E[0],N=E[1],T=m(u.useState("Timestamp"),2),g=T[0],S=T[1],v=m(u.useState(!1),2),D=v[0],C=v[1],w=m(u.useState(!1),2),x=w[0],I=w[1],F=m(u.useState(!1),2),j=F[0],k=F[1];function O(){var t=$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/ForObject/"+e.Type+"/"+e.ID+"/Search",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[],OrderBy:g,Ascending:D}),cache:!1,async:!0});return t.done((function(e){var t=JSON.parse(e);N(t)})),t}function A(e){$.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Note/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),cache:!0,async:!0}).done((function(){return O()}))}function V(t){p({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify({ID:0,NoteTypeID:n,ReferenceTableID:e.ID,Note:t.Note,Timestamp:moment().format("MM/DD/YYYY HH:mm"),UserAccount:""}),dataType:"json",cache:!0,async:!0}).done((function(e){O()}))}return u.useEffect((function(){var t,n=((t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/NoteType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).then((function(t){var n=t.find((function(t){return t.ReferenceTableName==e.Type}));r(n.ID)})),t);return O(),function(){null!=n&&null!=n.abort&&n.abort()}}),[e.Type]),u.useEffect((function(){var e=O();return function(){null!=e&&null!=e.abort&&e.abort()}}),[e.ID,g,D]),u.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},u.createElement("div",{className:"card-header"},u.createElement("div",{className:"row"},u.createElement("div",{className:"col"},u.createElement("h4",null,"Notes:")))),u.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},u.createElement("div",null,u.createElement(o.a,{cols:[{key:"Note",label:"Note",headerStyle:{width:"50%"},rowStyle:{width:"50%"}},{key:"Timestamp",label:"Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return moment.utc(e.Timestamp).format("MM/DD/YYYY HH:mm")}},{key:"UserAccount",label:"User",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return u.createElement(u.Fragment,null,u.createElement("button",{className:"btn btn-sm",onClick:function(t){return p(e),void h(!0)}},u.createElement("span",null,u.createElement("i",{className:"fa fa-pencil"}))),u.createElement("button",{className:"btn btn-sm",onClick:function(t){return A(e)}},u.createElement("span",null,u.createElement("i",{className:"fa fa-times"}))))}}],tableClass:"table table-hover",data:b,sortField:g,ascending:D,onSort:function(e){e.col==g?C(!D):(C(!0),S(e.col))},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-615,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return e.ID==d.ID}})),u.createElement(a.TextArea,{Record:d,Rows:4,Field:"Note",Setter:function(e){return p(e)},Valid:function(){return d.Note.length>0},Label:""}),u.createElement(l.Modal,{Show:y,Title:"Edit Note",ShowCancel:!0,CallBack:function(e){if(0!=d.Note.length||!e){if(h(!1),e){var t=c.a.cloneDeep(d);A(t),V(t)}p({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""})}},DisableConfirm:0==d.Note.length,ShowX:!0,ConfirmShowToolTip:0==d.Note.length,ConfirmToolTipContent:u.createElement("p",null," ",u.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"An empty Note can not be saved. ")},u.createElement(a.TextArea,{Record:d,Rows:4,Field:"Note",Setter:function(e){null==e.Note?p(s(s({},e),{Note:""})):p(e)},Valid:function(){return d.Note.length>0},Label:""}))),u.createElement("div",{className:"card-footer"},u.createElement("div",{className:"btn-group mr-2"},u.createElement("button",{className:"btn btn-primary"+(0==d.Note.length?" disabled":""),onClick:function(){d.Note.length>0&&V(d)},"data-tooltip":"Add",style:{cursor:0==d.Note.length?"not-allowed":"pointer"},onMouseOver:function(){return I(!0)},onMouseOut:function(){return I(!1)}},"Add Note"),u.createElement(l.ToolTip,{Show:x&&0==d.Note.length,Position:"top",Theme:"dark",Target:"Add"},u.createElement("p",null," A note needs to be entered. "))),u.createElement("div",{className:"btn-group mr-2"},u.createElement("button",{className:"btn btn-default"+(0==d.Note.length?" disabled":""),onClick:function(){return p((function(e){return s(s({},e),{Note:""})}))},style:{cursor:0==d.Note.length?"not-allowed":"pointer"},"data-tooltip":"Remove",onMouseOver:function(){return k(!0)},onMouseOut:function(){return k(!1)}},"Clear"),u.createElement(l.ToolTip,{Show:j&&0==d.Note.length,Position:"top",Theme:"dark",Target:"Remove"},u.createElement("p",null," The note field is already empty. ")))))}},60:function(e,t,n){"use strict";var a=n(0),l=n(31),r=n(33),o=n(38),i=n(35),c=n(39),u=n.n(c),s=function(){return(s=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var l in t=arguments[n])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},m=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var a,l,r=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(a=r.next()).done;)o.push(a.value)}catch(e){l={error:e}}finally{try{a&&!a.done&&(n=r.return)&&n.call(r)}finally{if(l)throw l.error}}return o},d=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e};t.a=function(e){var t=m(a.useState([]),2),n=t[0],l=t[1],c=m(a.useState([]),2),d=c[0],f=c[1],y=m(a.useState([]),2),h=y[0],E=y[1],b=m(a.useState([]),2),N=b[0],T=b[1],g=m(a.useState([]),2),S=g[0],v=g[1],D=m(a.useState([]),2),C=D[0],w=D[1],x=m(a.useState(!1),2),I=x[0],F=x[1],j=m(a.useState("FieldName"),2),k=j[0],O=j[1],A=m(a.useState(!1),2),V=A[0],B=A[1],P=m(a.useState({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),2),L=P[0],R=P[1],M=m(a.useState(!1),2),H=M[0],J=M[1],K=m(a.useState(!1),2),Y=K[0],G=K[1],X=m(a.useState(!1),2),U=X[0],_=X[1],q=m(a.useState("None"),2),z=q[0],W=q[1],Z=m(a.useState(!0),2),Q=Z[0],ee=Z[1],te={ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1};function ne(){var t,n=ae(),a=le(),r=((t=$.ajax({type:"GET",url:homePath+"api/ValueListGroup",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(e){l(e)})),t),o=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ExternalDataBase",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){f(e.map((function(e){return e.ExternalDB})))})),e}(),i=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/ExternalDBTables/TableName/0",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){var t=JSON.parse(e);E(t.map((function(e){return e.TableName})))})),e}();return R({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),function(){null!=n.abort&&n.abort(),null!=a.abort&&a.abort(),null!=r.abort&&r.abort(),null!=o.abort&&o.abort(),null!=i.abort&&i.abort()}}function ae(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/"+e.Type+"/"+k+"/"+(V?"1":"0"),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){T(e)})),t}function le(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalFieldValue/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){v(e)})),t}function re(){return Q&&null!=L.FieldName&&L.FieldName.length>0&&(null==L.ExternalDB||0==L.ExternalDB.length||!(null==L.ExternalDBTable||0==L.ExternalDBTable.length)&&!(null==L.ExternalDBTableKey||0==L.ExternalDBTableKey.length))}function oe(){return C.some((function(e,t){var n=S.findIndex((function(t){return t.AdditionalFieldID==e.AdditionalFieldID}));return(-1!=n||null!=e.Value)&&(-1==n||e.Value!=S[n].Value)}))}function ie(e){var t=[];return C.forEach((function(n,l){var r=N.findIndex((function(e){return e.ID==n.AdditionalFieldID})),o=S.findIndex((function(e){return e.AdditionalFieldID==n.AdditionalFieldID}));-1==r||-1==o&&null==n.Value||(-1!=o?n.Value!=S[o].Value&&t.push(e?a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",N[r].FieldName,"' will be lost."):a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",N[r].FieldName,"' are valid.")):t.push(e?a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",N[r].FieldName,"' will be lost."):a.createElement("p",{key:l}," ",a.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",N[r].FieldName,"' are valid.")))})),t}function ce(){return C.some((function(e){var t=N.findIndex((function(t){return t.ID==e.AdditionalFieldID}));return-1!=t&&("integer"==N[t].Type&&!(null==e.Value||r.a.isInteger(e.Value)))}))}return a.useEffect((function(){return ne()}),[e.ID,e.Type,e.Tab]),a.useEffect((function(){w(S)}),[S]),a.useEffect((function(){var e=ae();return function(){null!=e.abort&&e.abort()}}),[k,V]),a.useEffect((function(){var e=function(){if(null==L.FieldName||0==L.FieldName.length)return null;var e=$.ajax({type:"Post",url:homePath+"api/SystemCenter/AdditionalField/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[{FieldName:"FieldName",Operator:"=",SearchText:L.FieldName,Type:"string"}],OrderBy:"FieldName",Ascending:!0}),cache:!1,async:!0});return e.done((function(e){var t=JSON.parse(e);0==t.length?ee(!0):t.length>1?ee(!1):t[0].ID==L.ID?ee(!0):ee(!1)})),e}();return function(){null!=e&&null!=e.abort&&e.abort()}}),[L.ID,L.FieldName]),a.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},a.createElement("div",{className:"card-header"},a.createElement("div",{className:"row"},a.createElement("div",{className:"col"},a.createElement("h4",null,"Additional Fields:")),a.createElement("div",{className:"col"},I?a.createElement("button",{className:"btn btn-default pull-right","data-tooltip":"View",onClick:function(){F(!1),le()},onMouseEnter:function(){return W("View")},onMouseLeave:function(){return W("None")}},"View"):a.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){return F(!0)}},"Edit"),a.createElement(o.ToolTip,{Show:"View"==z&&oe(),Position:"left",Theme:"dark",Target:"View"},ie(!0))))),a.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},a.createElement(u.a,{cols:[{key:"FieldName",label:"Field",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"ExternalDB",label:"Ext DB",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Type",label:"Type",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"IsSecure",label:"Value",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t){var n=S.findIndex((function(e){return e.AdditionalFieldID==t.ID}));return I?a.createElement(p,{Field:t,ParentTableID:e.ID,Values:C,Setter:function(e){return w(e)}}):n>-1&&null!=S[n].Value?S[n].Value.toString():""}},{key:"ID",label:"",headerStyle:{width:40,paddingRight:0,paddingLeft:10},rowStyle:{width:40,paddingRight:0,paddingLeft:10,paddingTop:36},content:function(e){return I?a.createElement("button",{className:"btn btn-sm",onClick:function(){R(e),_(!0)}},a.createElement("span",null,a.createElement("i",{className:"fa fa-pencil"}))):""}},{key:null,label:"",headerStyle:{width:40,paddingLeft:0,paddingRight:10},rowStyle:{width:40,paddingLeft:0,paddingTop:36,paddingRight:10},content:function(e){return I?a.createElement("button",{className:"btn btn-sm",onClick:function(){R(e),J(!0)}},a.createElement("span",null,a.createElement("i",{className:"fa fa-times"}))):""}}],tableClass:"table table-hover",data:N,sortField:k,ascending:V,onSort:function(e){null!=e.col&&"ID"!=e.col&&"IsSecure"!=e.col&&(e.col==k?B(!V):(B(!0),O(e.col)))},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-455},rowStyle:{display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),a.createElement("div",{className:"card-footer"},a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-primary"+(I?"":" disabled"),onMouseEnter:function(){return W("New")},onMouseLeave:function(){return W("None")},onClick:function(){I&&(_(!0),R(te))},"data-tooltip":"New"},"Add Field")),a.createElement(o.ToolTip,{Show:"New"==z&&!I,Position:"top",Theme:"dark",Target:"New"},I?null:a.createElement("p",null," To add a new Field switch to Edit mode by clicking on the Edit Button on the upper right corner.")),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-primary"+(oe()&&I&&!ce()?"":" disabled"),onClick:function(){oe()&&!ce()&&I&&$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalFieldValue/Array",contentType:"application/json; charset=utf-8",data:JSON.stringify(C),dataType:"json",cache:!0,async:!0}).done((function(e){ne()}))},onMouseEnter:function(){return W("Save")},onMouseLeave:function(){return W("None")},"data-tooltip":"SaveValues"},"Save Changes")),a.createElement(o.ToolTip,{Show:"Save"==z&&(!I||oe()),Position:"top",Theme:"dark",Target:"SaveValues"},I?null:a.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),oe()&&!ce()?ie(!1):null,oe()&&ce()?function(){if(!ce())return[];var e=[];return C.forEach((function(t,n){var l=N.findIndex((function(e){return e.ID==t.AdditionalFieldID}));-1!=l&&("integer"!=N[l].Type||null==t.Value||r.a.isInteger(t.Value)||e.push(a.createElement("p",{key:n}," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Value for '",N[l].FieldName,"' is required to be an integer.")))})),e}():null),a.createElement("div",{className:"btn-group mr-2"},a.createElement("button",{className:"btn btn-default"+(oe()&&I?"":" disabled"),onClick:function(){oe()&&I&&le()},onMouseEnter:function(){return W("Clear")},onMouseLeave:function(){return W("None")},"data-tooltip":"Clear"},"Reset")),a.createElement(o.ToolTip,{Show:"Clear"==z&&(!I||oe()),Position:"top",Theme:"dark",Target:"Clear"},I?null:a.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),oe()?ie(!0):null)),a.createElement(o.LoadingScreen,{Show:Y}),a.createElement(o.Warning,{Show:H,Title:"Delete "+L.FieldName,Message:"This will delete the field '"+L.FieldName+"' from all "+e.Type+"s and will also delete all information assigned to these fields.",CallBack:function(e){var t;e&&(t=L,G(!0),$.ajax({type:"DELETE",url:homePath+"api/SystemCenter/AdditionalField/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),dataType:"json",cache:!0,async:!0}).done((function(e){ne(),G(!1)}))),J(!1)}}),a.createElement(o.Modal,{Title:"Additional Field",ConfirmText:"Save",CancelText:"Close",ConfirmBtnClass:"btn-primary"+(re()?"":" disabled"),Show:U,Size:"lg",ShowX:!0,CallBack:function(e,t){!re()&&e||(e&&(G(!0),$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalField/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(L),dataType:"json",cache:!0,async:!0}).done((function(e){ne(),G(!1)}))),_(!1))},ConfirmShowToolTip:!re(),ConfirmToolTipContent:a.createElement(a.Fragment,null,null!=L.FieldName&&0!=L.FieldName.length&&Q?null:a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Field Name is required and has to be unique."),null!=L.ExternalDB&&null==L.ExternalDBTable?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table."):null,null!=L.ExternalDB&&null==L.ExternalDBTableKey?a.createElement("p",null," ",a.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table Key."):null)},a.createElement(i.Input,{Record:L,Field:"FieldName",Valid:function(e){return null!=L.FieldName&&L.FieldName.length>0&&Q},Label:"Field Name",Setter:R,Feedback:"The additional field needs to have a unique Field Name"}),a.createElement(i.Select,{Record:L,Field:"Type",Options:[{Value:"string",Label:"string"},{Value:"integer",Label:"integer"},{Value:"number",Label:"number"}].concat(n.filter((function(e){return e.Enabled})).map((function(e){return{Value:e.Name,Label:e.Name}}))),Label:"Field Type",Setter:R}),a.createElement(i.Select,{Record:L,Field:"ExternalDB",Label:"External Database",Setter:function(e){null!=e.ExternalDB&&""!=e.ExternalDB||(e=s(s({},e),{ExternalDB:null,ExternalDBTable:null,ExternalDBTableKey:null})),R(e)},EmptyOption:!0,Options:d.map((function(e){return{Value:e,Label:e}}))}),a.createElement("div",{"data-tooltip":"ExternalDB",onMouseEnter:function(){return W("ExternalDB")},onMouseLeave:function(){return W("None")}},a.createElement(i.Select,{EmptyOption:!0,Disabled:null==L.ExternalDB||0==L.ExternalDB.length,Record:L,Field:"ExternalDBTable",Options:h.map((function(e){return{Value:e,Label:e}})),Label:"External Database Table",Setter:R})),a.createElement(i.Input,{Disabled:null==L.ExternalDB||0==L.ExternalDB.length,Record:L,Field:"ExternalDBTableKey",Valid:function(e){return!0},Label:"External Database Table Key",Setter:R}),a.createElement(i.CheckBox,{Record:L,Field:"IsSecure",Label:"Secure Data",Setter:R})),a.createElement(o.ToolTip,{Zindex:9999,Show:"ExternalDB"==z&&(null==L.ExternalDB||0==L.ExternalDB.length),Position:"bottom",Theme:"dark",Target:"ExternalDB"},a.createElement("p",null," No External Database selected.")))};var p=function(e){var t=m(a.useState([]),2),n=t[0],o=t[1],c=m(a.useState(-1),2),u=c[0],s=c[1];function p(t){var n=l.cloneDeep(e.Values);n[u]=t,e.Setter(n)}function f(t){return"integer"==e.Field.Type?null==e.Values[u].Value||r.a.isInteger(e.Values[u].Value):"number"==e.Field.Type?null==e.Values[u].Value||r.a.isRealNumber(e.Values[u].Value):(e.Field.Type,!0)}return a.useEffect((function(){var t=e.Values.findIndex((function(t){return t.AdditionalFieldID==e.Field.ID}));s(t),-1==t&&e.Setter(d(e.Values,[{ID:0,AdditionalFieldID:e.Field.ID,OpenXDAParentTableID:e.ParentTableID,Value:null}]))}),[e.Values,e.Field]),a.useEffect((function(){if(["integer","number","boolean","string"].indexOf(e.Field.Type)<0){var t=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+e.Field.Type,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){o(e)})),function(){null!=t.abort&&t.abort()}}}),[e.Field.Type]),-1==u||null==e.Values[u]?null:"number"==e.Field.Type||"integer"==e.Field.Type?a.createElement(i.Input,{Record:e.Values[u],Field:"Value",Valid:f,Label:"",Type:"number",Setter:p,Feedback:e.Field.FieldName+" is an integer field."}):"string"==e.Field.Type?a.createElement(i.Input,{Record:e.Values[u],Field:"Value",Valid:f,Label:"",Type:"text",Setter:p}):"boolean"==e.Field.Type?a.createElement(i.CheckBox,{Record:e.Values[u],Field:"Value",Label:"",Setter:p}):a.createElement(i.Select,{EmptyOption:!0,Record:e.Values[u],Field:"Value",Label:"",Setter:p,Options:n.map((function(e){return{Value:e.ID.toString(),Label:e.Text}}))})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
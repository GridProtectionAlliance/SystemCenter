(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{116:function(e,t,a){"use strict";var n=a(0),l=a(35),r=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)i.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return i};t.a=function(e){var t=r(n.useState(!0),2),a=t[0],i=t[1],s=r(n.useState(e.Meter.AssetKey),2),o=s[0],c=s[1],u=r(n.useState([]),2),d=u[0],m=u[1];function p(t){return"AssetKey"==t?null!=e.Meter.AssetKey&&e.Meter.AssetKey.length>0&&e.Meter.AssetKey.length<=50&&a:"Name"==t?null!=e.Meter.Name&&e.Meter.Name.length>0&&e.Meter.Name.length<=200:"Alias"==t?null==e.Meter.Alias||e.Meter.Alias.length<=200:"ShortName"==t?null==e.Meter.ShortName||e.Meter.ShortName.length<=50:"Make"==t?null!=e.Meter.Make&&e.Meter.Make.length>0&&e.Meter.Make.length<=200:"Model"==t?null!=e.Meter.Model&&e.Meter.Model.length>0&&e.Meter.Model.length<=200:"Description"==t}return n.useEffect((function(){var e=function(){if(sessionStorage.hasOwnProperty("SystemCenter.TimeZones"))return m(JSON.parse(sessionStorage.getItem("SystemCenter.TimeZones"))),null;var e=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/TimeZones",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){m(e),sessionStorage.setItem("SystemCenter.TimeZones",JSON.stringify(e))})),e}();return function(){null!=e&&null!=e.abort&&e.abort()}}),[]),n.useEffect((function(){o!=e.Meter.AssetKey&&c(e.Meter.AssetKey)}),[e.Meter]),n.useEffect((function(){var t=function(){if(null==o||0==o.length||o.length>50)return null;var t=$.ajax({type:"Post",url:homePath+"api/OpenXDA/MeterList/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[{FieldName:"AssetKey",Operator:"=",SearchText:o,Type:"string"}],OrderBy:"AssetKey",Ascending:!0}),cache:!1,async:!0});return t.done((function(t){var a=JSON.parse(t);0==a.length?i(!0):a.length>1?i(!1):a[0].ID==e.Meter.ID?i(!0):i(!1)})),t}();return function(){null!=t&&null!=t.abort&&t.abort()}}),[o]),null==e.Meter?null:n.createElement("div",{className:"row"},n.createElement("div",{className:"col"},n.createElement(l.Input,{Record:e.Meter,Field:"AssetKey",Feedback:"A unique key of less than 50 characters is required.",Valid:p,Setter:function(t){return e.StateSetter(t)}}),n.createElement(l.Input,{Record:e.Meter,Field:"Name",Feedback:"Name must be less than 200 characters and is required.",Valid:p,Setter:function(t){return e.StateSetter(t)}}),n.createElement(l.Input,{Record:e.Meter,Field:"ShortName",Feedback:"ShortName must be less than 50 characters.",Valid:p,Setter:function(t){return e.StateSetter(t)}}),n.createElement(l.Input,{Record:e.Meter,Field:"Alias",Feedback:"Alias must be less than 200 characters.",Valid:p,Setter:function(t){return e.StateSetter(t)}})),n.createElement("div",{className:"col"},n.createElement(l.Input,{Record:e.Meter,Field:"Make",Feedback:"Make must be less than 200 characters.",Valid:p,Setter:function(t){return e.StateSetter(t)}}),n.createElement(l.Input,{Record:e.Meter,Field:"Model",Feedback:"Model must be less than 200 characters.",Valid:p,Setter:function(t){return e.StateSetter(t)}}),n.createElement(l.Select,{Record:e.Meter,Field:"TimeZone",Options:d.map((function(e){return{Value:e.Text,Label:e.AltText1}})),Label:"Time Zone",Setter:function(t){return e.StateSetter(t)},EmptyOption:!0,EmptyLabel:"None Selected"}),n.createElement(l.TextArea,{Rows:3,Record:e.Meter,Field:"Description",Valid:p,Setter:function(t){return e.StateSetter(t)}})))}},117:function(e,t,a){"use strict";var n=a(0),l=a(35),r=a(33),i=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)i.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return i};t.a=function(e){var t=i(n.useState(!0),2),a=t[0],s=t[1];function o(t){return"LocationKey"==t?null!=e.Location.LocationKey&&e.Location.LocationKey.length>0&&e.Location.LocationKey.length<=50&&a:"Name"==t?null!=e.Location.Name&&e.Location.Name.length>0&&e.Location.Name.length<=200:"Alias"==t?null==e.Location.Alias||e.Location.Alias.length<=200:"ShortName"==t?null==e.Location.ShortName||e.Location.ShortName.length<=50:"Latitude"==t?null!=e.Location.Latitude&&r.a.isRealNumber(e.Location.Latitude):"Longitude"==t?null!=e.Location.Longitude&&r.a.isRealNumber(e.Location.Longitude):"Description"==t}return n.useEffect((function(){var t=e.Location.LocationKey;if(null!=t&&""!=t){var a=e.Locationlist.filter((function(e){return e.LocationKey==t}));0==a.length?s(!0):a.length>1?s(!1):s(e.Location.ID==a[0].ID)}}),[e.Location,e.Locationlist]),null==e.Location||null==e.Meter?null:n.createElement("div",{className:"row"},n.createElement("div",{className:"col"},n.createElement(l.Select,{Record:e.Meter,Field:"LocationID",Label:"Select location",Setter:function(t){return e.UpdateMeter(t)},Options:e.Locationlist.map((function(e){return{Label:e.LocationKey,Value:e.ID.toString()}})),EmptyOption:!0,EmptyLabel:"Add New"}),n.createElement(l.Input,{Record:e.Location,Field:"LocationKey",Label:"Key",Feedback:"A unique key of less than 50 characters is required.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation}),n.createElement(l.Input,{Record:e.Location,Field:"Name",Feedback:"Name must be less than 200 characters and is required.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation}),n.createElement(l.Input,{Record:e.Location,Field:"ShortName",Feedback:"ShortName must be less than 50 characters.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation})),n.createElement("div",{className:"col"},n.createElement(l.Input,{Record:e.Location,Field:"Alias",Feedback:"Alias must be less than 200 characters.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation}),n.createElement(l.Input,{Record:e.Location,Field:"Latitude",Feedback:"Latitude is a required numeric field.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation}),n.createElement(l.Input,{Record:e.Location,Field:"Longitude",Feedback:"Longitude is a required numeric field.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation}),n.createElement(l.TextArea,{Rows:3,Record:e.Location,Field:"Description",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation})))}},326:function(e,t,a){"use strict";a.r(t);var n,l=a(0),r=a(31),i=a(33),s=a(38),o=a(117),c=function(){return(c=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var l in t=arguments[a])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},u=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)i.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return i},d=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(u(arguments[t]));return e},m=function(e){var t={ID:0,LocationKey:null,Name:null,Alias:null,ShortName:null,Latitude:null,Longitude:null,Description:null},a=u(l.useState(t),2),n=a[0],m=a[1],p=u(l.useState(e.Meter),2),h=p[0],f=p[1],y=u(l.useState([]),2),E=y[0],b=y[1],N=u(l.useState(!0),2),g=N[0],S=N[1],A=u(l.useState(!1),2),v=A[0],D=A[1],T=u(l.useState("None"),2),w=T[0],C=T[1];function F(){if(sessionStorage.hasOwnProperty("SystemCenter.Locations"))return b(JSON.parse(sessionStorage.getItem("SystemCenter.Locations"))),null;var e=$.ajax({type:"GET",url:homePath+"api/OpenXDA/Location",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){b(e),sessionStorage.setItem("SystemCenter.Locations",JSON.stringify(e))})),e}function R(e){return"LocationKey"==e?null!=n.LocationKey&&n.LocationKey.length>0&&n.LocationKey.length<=50&&g:"Name"==e?null!=n.Name&&n.Name.length>0&&n.Name.length<=200:"Alias"==e?null==n.Alias||n.Alias.length<=200:"ShortName"==e?null==n.ShortName||n.ShortName.length<=50:"Latitude"==e?null!=n.Latitude&&i.a.isRealNumber(n.Latitude):"Longitude"==e?null!=n.Longitude&&i.a.isRealNumber(n.Longitude):"Description"==e}l.useEffect((function(){var e=F();return function(){null!=e&&null!=e.abort&&e.abort()}}),[]),l.useEffect((function(){var e=function(){if(null==h||null==h.LocationID)return null;if(0==h.LocationID)return void m(t);var e=$.ajax({type:"GET",url:homePath+"api/OpenXDA/Location/One/"+h.LocationID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){m(e),b((function(t){var a=t.findIndex((function(t){return t.ID==e.ID}));if(-1==a)return d(t,[e]);var n=r.cloneDeep(t);return n[a]=e,n}))})),e}(),a=F();return function(){null!=e&&null!=e.abort&&e.abort(),null!=a&&null!=a.abort&&a.abort()}}),[h]),l.useEffect((function(){f(e.Meter)}),[e.Meter]),l.useEffect((function(){E.length>0&&sessionStorage.setItem("SystemCenter.Locations",JSON.stringify(E))}),[E]),l.useEffect((function(){var e=n.LocationKey;if(null!=e&&""!=e){var t=E.filter((function(t){return t.LocationKey==e}));0==t.length?S(!0):t.length>1?S(!1):S(n.ID==t[0].ID)}}),[n,E]);var I=R("LocationKey")&&R("Name")&&R("Alias")&&R("ShortName")&&R("Latitude")&&R("Longitude");return l.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},l.createElement("div",{className:"card-header"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h4",null,"Meter Location / Substation Information:")))),l.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},l.createElement(o.a,{Meter:h,Location:n,Locationlist:E,SetLocation:function(e){m(e),D(!0)},UpdateMeter:function(t){D(e.Meter.LocationID!=(null!=t.LocationID?parseInt(t.LocationID.toString()):0)),f(c(c({},t),{LocationID:null!=t.LocationID?parseInt(t.LocationID.toString()):0}))},DisableLocation:!1})),l.createElement("div",{className:"card-footer"},l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary"+(v&&I?"":" disabled"),onClick:function(){I&&v&&function(){r.clone(n).MeterID=this.props.Meter.ID,$.ajax({type:"POST",url:homePath+"api/OpenXDA/Location/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify(n),dataType:"json",cache:!0,async:!0}).done((function(t){D(!1),m(t),e.StateSetter(Object(r.cloneDeep)(e.Meter))}))}()},hidden:0!=n.ID,onMouseEnter:function(){return C("New")},onMouseLeave:function(){return C("None")},"data-tooltip":"NewLocation"},"Add New"),l.createElement(s.ToolTip,{Show:!("New"!=w||v&&I),Position:"top",Theme:"dark",Target:"NewLocation"},g?null:l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Key needs to be unique.  "),!R("LocationKey")&&g?l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Key is required and needs to be less than 50 characters. "):null,R("Name")?null:l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Name is required and needs to be less than 200 characters. "),R("ShortName")?null:l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," ShortName needs to be less than 50 characters. "),R("Latitude")?null:l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Latitude is required. "),R("Longitude")?null:l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Longtitude is required. "))),l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary"+(v&&I?"":" disabled"),onClick:function(){I&&v&&$.ajax({type:"PATCH",url:homePath+"api/OpenXDA/Location/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(n),dataType:"json",cache:!0,async:!0}).done((function(t){if(n.ID!=e.Meter.LocationID){var a=Object(r.cloneDeep)(e.Meter);a.LocationID=n.ID,$.ajax({type:"PATCH",url:homePath+"api/OpenXDA/Meter/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(a),dataType:"json",cache:!0,async:!0}).done((function(t){e.StateSetter(Object(r.cloneDeep)(a))}))}D(!1)}))},hidden:0==n.ID,onMouseEnter:function(){return C("Update")},onMouseLeave:function(){return C("None")},"data-tooltip":"UpdateLocation"},"Update"),l.createElement(s.ToolTip,{Show:!("Update"!=w||v&&I),Position:"top",Theme:"dark",Target:"UpdateLocation"},v?null:l.createElement("p",null," No Changes have been made. "),g?null:l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Key needs to be unique. "),!R("LocationKey")&&g?l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Key is required and needs to be less than 50 characters. "):null,R("Name")?null:l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Name is required and needs to be less than 200 characters. "),R("ShortName")?null:l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," ShortName needs to be less than 50 characters. "),R("Latitude")?null:l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Latitude is required. "),R("Longitude")?null:l.createElement("p",null," ",l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Longtitude is required. "))),l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-default"+(v?"":" disabled"),"data-tooltip":"ResetLocation",onMouseEnter:function(){return C("Reset")},onMouseLeave:function(){return C("None")},onClick:function(){v&&(f(e.Meter),D(!1))}},"Reset"),l.createElement(s.ToolTip,{Show:"Reset"==w&&!v,Position:"top",Theme:"dark",Target:"ResetLocation"},l.createElement("p",null," No Changes have been made.")))))},p=a(116),h=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)i.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return i},f=function(){return l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})},y=function(){return l.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})},E=function(e){var t=h(l.useState(e.Meter),2),a=t[0],n=t[1],i=h(l.useState(!1),2),o=i[0],c=i[1],u=h(l.useState(!0),2),d=u[0],m=u[1],E=h(l.useState(e.Meter.AssetKey),2),b=E[0],N=E[1],g=h(l.useState("none"),2),S=g[0],A=g[1];function v(e){return"AssetKey"==e?null!=a.AssetKey&&a.AssetKey.length>0&&a.AssetKey.length<=50&&d:"Name"==e?null!=a.Name&&a.Name.length>0&&a.Name.length<=200:"Alias"==e?null==a.Alias||a.Alias.length<=200:"ShortName"==e?null==a.ShortName||a.ShortName.length<=50:"Make"==e?null!=a.Make&&a.Make.length>0&&a.Make.length<=200:"Model"==e?null!=a.Model&&a.Model.length>0&&a.Model.length<=200:"Description"==e}function D(){return v("AssetKey")&&v("Name")&&v("ShortName")&&v("Alias")&&v("Make")&&v("Model")}function T(){return null!=e.Meter&&(e.Meter.AssetKey!=a.AssetKey||e.Meter.Name!=a.Name||e.Meter.ShortName!=a.ShortName||e.Meter.Alias!=a.Alias||e.Meter.Make!=a.Make||e.Meter.Model!=a.Model||e.Meter.TimeZone!=a.TimeZone||e.Meter.Description!=a.Description)}return l.useEffect((function(){n(e.Meter)}),[e.Meter]),l.useEffect((function(){b!=a.AssetKey&&N(a.AssetKey)}),[a]),l.useEffect((function(){var e=function(){if(null==b||0==b.length||b.length>50)return null;var e=$.ajax({type:"Post",url:homePath+"api/OpenXDA/MeterList/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[{FieldName:"AssetKey",Operator:"=",SearchText:b,Type:"string"}],OrderBy:"AssetKey",Ascending:!0}),cache:!1,async:!0});return e.done((function(e){var t=JSON.parse(e);0==t.length?m(!0):t.length>1?m(!1):t[0].ID==a.ID?m(!0):m(!1)})),e}();return function(){null!=e&&null!=e.abort&&e.abort()}}),[b]),null==a?null:l.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},l.createElement("div",{className:"card-header"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h4",null,"Meter Information:")))),l.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},l.createElement(p.a,{Meter:a,StateSetter:n}),l.createElement(s.LoadingScreen,{Show:o})),l.createElement("div",{className:"card-footer"},l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary"+(D()&&T()?"":" disabled"),type:"submit",onClick:function(){D()&&T()&&function(){c(!0);var t=r.clone(a);$.ajax({type:"PATCH",url:homePath+"api/OpenXDA/Meter/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),dataType:"json",cache:!0,async:!0}).done((function(a){e.StateSetter(t),c(!1)}))}()},"data-tooltip":"submit",onMouseEnter:function(){return A("submit")},onMouseLeave:function(){return A("none")}},"Save Changes")),l.createElement(s.ToolTip,{Show:!(D()&&T()||"submit"!=S),Position:"top",Theme:"dark",Target:"submit"},T()?null:l.createElement("p",null," No changes made."),v("AssetKey")?null:l.createElement("p",null," ",l.createElement(f,null)," A unique AssetKey of less than 50 characters is required."),v("Name")?null:l.createElement("p",null," ",l.createElement(f,null)," Name must be less than 200 characters and is required."),v("ShortName")?null:l.createElement("p",null," ",l.createElement(f,null),"ShortName must be less than 50 characters."),v("Alias")?null:l.createElement("p",null," ",l.createElement(f,null),"Alias must be less than 200 characters."),v("Make")?null:l.createElement("p",null," ",l.createElement(f,null),"Make must be less than 200 characters."),v("Model")?null:l.createElement("p",null," ",l.createElement(f,null)," Model must be less than 200 characters.")),l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-default"+(T()?"":" disabled"),"data-tooltip":"clear",onClick:function(){return n(e.Meter)},onMouseEnter:function(){return A("clear")},onMouseLeave:function(){return A("none")}},"Clear Changes")),l.createElement(s.ToolTip,{Show:T()&&"clear"==S,Position:"top",Theme:"dark",Target:"clear"},e.Meter.AssetKey!=a.AssetKey?l.createElement("p",null," ",l.createElement(y,null)," Changes to assetKey will be discarded."):null,e.Meter.Name!=a.Name?l.createElement("p",null," ",l.createElement(y,null)," Changes to Name will be discarded."):null,e.Meter.ShortName!=a.ShortName?l.createElement("p",null," ",l.createElement(y,null)," Changes to ShortName will be discarded."):null,e.Meter.Alias!=a.Alias?l.createElement("p",null," ",l.createElement(y,null)," Changes to Alias will be discarded."):null,e.Meter.Make!=a.Make?l.createElement("p",null," ",l.createElement(y,null)," Changes to Make will be discarded."):null,e.Meter.Model!=a.Model?l.createElement("p",null," ",l.createElement(y,null)," Changes to Model will be discarded."):null,e.Meter.TimeZone!=a.TimeZone?l.createElement("p",null," ",l.createElement(y,null)," Changes to TimeZone will be discarded."):null,e.Meter.Description!=a.Description?l.createElement("p",null," ",l.createElement(y,null)," Changes to Description will be discarded."):null)))},b=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),N=function(e){function t(t,a){var n=e.call(this,t,a)||this;return n.state={Channels:[],Phases:[],MeasurementTypes:[],AllAssets:[]},n.getChannels=n.getChannels.bind(n),n.updateChannels=n.updateChannels.bind(n),n}return b(t,e),t.prototype.componentDidMount=function(){this.getPhases(),this.getAssets(),this.getMeasurementTypes(),this.getChannels()},t.prototype.getChannels=function(){var e=this;$.ajax({type:"GET",url:homePath+"api/OpenXDA/Meter/"+this.props.Meter.ID+"/Channels/Event",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){var a=t.map((function(e){return e}));e.setState({Channels:a})}))},t.prototype.updateChannels=function(){var e=this;$.ajax({type:"POST",url:homePath+"api/OpenXDA/Meter/"+this.props.Meter.ID+"/Channel/Update/Event",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Channels:this.state.Channels}),cache:!1,async:!0}).done((function(){e.getChannels()})).fail((function(t){500==t.status?alert(t.responseJSON.ExceptionMessage):e.getChannels()}))},t.prototype.getAssets=function(){var e=this;$.ajax({type:"GET",url:homePath+"api/OpenXDA/Meter/"+this.props.Meter.ID+"/Asset",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){e.setState({AllAssets:t})}))},t.prototype.getPhases=function(){var e=this;sessionStorage.hasOwnProperty("SystemCenter.Phases")?this.setState({Phases:JSON.parse(sessionStorage.getItem("SystemCenter.Phases"))}):$.ajax({type:"GET",url:homePath+"api/OpenXDA/Phase",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){e.setState({Phases:t}),sessionStorage.setItem("NewMeterWizard.Phases",JSON.stringify(t))}))},t.prototype.getMeasurementTypes=function(){var e=this;sessionStorage.hasOwnProperty("OpenXDA.MeasurementTypes")?this.setState({MeasurementTypes:JSON.parse(sessionStorage.getItem("OpenXDA.MeasurementTypes"))}):$.ajax({type:"GET",url:homePath+"api/OpenXDA/MeasurementType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){e.setState({MeasurementTypes:t}),sessionStorage.setItem("OpenXDA.MeasurementTypes",JSON.stringify(t))}))},t.prototype.deleteChannel=function(e){var t=r.clone(this.state.Channels);t.splice(e,1)[0];this.setState({Channels:t})},t.prototype.render=function(){var e=this;return l.createElement("div",{className:"card",style:{marginBottom:10}},l.createElement("div",{className:"card-header"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h4",null,"Channels:")))),l.createElement("div",{className:"card-body"},l.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-420,padding:30,overflowY:"auto"}},l.createElement("table",{className:"table table-hover"},l.createElement("thead",null,l.createElement("tr",null,l.createElement("th",null,"Channel"),l.createElement("th",null,"Name"),l.createElement("th",null,"Desc"),l.createElement("th",null,"Type"),l.createElement("th",null,"Phase"),l.createElement("th",null,"Adder"),l.createElement("th",null,"Multiplier"),l.createElement("th",null,"Asset"),l.createElement("th",null))),l.createElement("tbody",null,this.state.Channels.map((function(t,a,n){return l.createElement("tr",{key:a},l.createElement("td",{style:{width:"5%"}},l.createElement("input",{className:"form-control",value:t.Series[0].SourceIndexes,onChange:function(a){t.Series[0].SourceIndexes=a.target.value,e.setState({Channels:n})}})),l.createElement("td",{style:{width:"15%"}},l.createElement("input",{className:"form-control",value:t.Name,onChange:function(a){t.Name=a.target.value,e.setState({Channels:n})}})),l.createElement("td",{style:{width:"30%"}},l.createElement("input",{className:"form-control",value:null==t.Description?"":t.Description,onChange:function(a){t.Description=a.target.value,e.setState({Channels:n})}})),l.createElement("td",{style:{width:"10%"}},l.createElement("select",{className:"form-control",value:t.MeasurementType,onChange:function(a){t.MeasurementType=a.target.value,e.setState({Channels:n})}},e.state.MeasurementTypes.map((function(e){return l.createElement("option",{key:e.ID,value:e.Name},e.Name)})))),l.createElement("td",{style:{width:"10%"}},l.createElement("select",{className:"form-control",value:t.Phase,onChange:function(a){t.Phase=a.target.value,e.setState({Channels:n})}},e.state.Phases.map((function(e){return l.createElement("option",{key:e.ID,value:e.Name},e.Name)})))),l.createElement("td",{style:{width:"5%"}},l.createElement("input",{className:"form-control",value:t.Adder,onChange:function(a){t.Adder=Object(r.toNumber)(a.target.value),e.setState({Channels:n})}})),l.createElement("td",{style:{width:"5%"}},l.createElement("input",{className:"form-control",value:t.Multiplier,onChange:function(a){t.Multiplier=Object(r.toNumber)(a.target.value),e.setState({Channels:n})}})),l.createElement("td",{style:{width:"10%"}},l.createElement("select",{className:"form-control",value:t.Asset,onChange:function(a){t.Asset=a.target.value,e.setState({Channels:n})}},l.createElement("option",{value:""}),e.state.AllAssets.map((function(e){return l.createElement("option",{key:e.ID,value:e.AssetKey},e.AssetKey)})))),l.createElement("td",{style:{width:"5%"}},l.createElement("button",{className:"btn btn-sm",onClick:function(t){return e.deleteChannel(a)}},l.createElement("span",null,l.createElement("i",{className:"fa fa-times"})))))})))))),l.createElement("div",{className:"card-footer"},l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){var t={ID:0,Meter:e.props.Meter.AssetKey,Asset:"",MeasurementType:"Voltage",MeasurementCharacteristic:"Instantaneous",Phase:"AN",Name:"VAN",Adder:0,Multiplier:1,SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Description:"Voltage AN",Enabled:!0,Series:[{ID:0,ChannelID:0,SeriesType:"Values",SourceIndexes:""}]},a=r.clone(e.state.Channels);a.push(t),e.setState({Channels:a})}},"Add Channel")),l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary pull-right",onClick:this.updateChannels},"Save Changes")),l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-default",onClick:this.getChannels},"Clear Changes"))))},t}(l.Component),g=function(){var e=function(t,a){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(t,a)};return function(t,a){function n(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}}(),S=function(e){function t(t,a){var n=e.call(this,t,a)||this;return n.state={Channels:[],Phases:[],MeasurementTypes:[],MeasurementCharacteristics:[],AllAssets:[]},n.getChannels=n.getChannels.bind(n),n.updateChannels=n.updateChannels.bind(n),n}return g(t,e),t.prototype.componentDidMount=function(){this.getPhases(),this.getAssets(),this.getMeasurementTypes(),this.getMeasurementCharacteristics(),this.getChannels()},t.prototype.getChannels=function(){var e=this;$.ajax({type:"GET",url:homePath+"api/OpenXDA/Meter/"+this.props.Meter.ID+"/Channels/Trend",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){var a=t.map((function(e){return e}));e.setState({Channels:a})}))},t.prototype.updateChannels=function(){var e=this;$.ajax({type:"POST",url:homePath+"api/OpenXDA/Meter/"+this.props.Meter.ID+"/Channel/Update/Trend",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Channels:this.state.Channels}),cache:!1,async:!0}).done((function(){e.getChannels()})).fail((function(t){500==t.status?alert(t.responseJSON.ExceptionMessage):e.getChannels()}))},t.prototype.getAssets=function(){var e=this;$.ajax({type:"GET",url:homePath+"api/OpenXDA/Meter/"+this.props.Meter.ID+"/Asset",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){e.setState({AllAssets:t})}))},t.prototype.getPhases=function(){var e=this;sessionStorage.hasOwnProperty("SystemCenter.Phases")?this.setState({Phases:JSON.parse(sessionStorage.getItem("SystemCenter.Phases"))}):$.ajax({type:"GET",url:homePath+"api/OpenXDA/Phase",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){e.setState({Phases:t}),sessionStorage.setItem("NewMeterWizard.Phases",JSON.stringify(t))}))},t.prototype.getMeasurementTypes=function(){var e=this;sessionStorage.hasOwnProperty("OpenXDA.MeasurementTypes")?this.setState({MeasurementTypes:JSON.parse(sessionStorage.getItem("OpenXDA.MeasurementTypes"))}):$.ajax({type:"GET",url:homePath+"api/OpenXDA/MeasurementType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){e.setState({MeasurementTypes:t}),sessionStorage.setItem("OpenXDA.MeasurementTypes",JSON.stringify(t))}))},t.prototype.getMeasurementCharacteristics=function(){var e=this;sessionStorage.hasOwnProperty("OpenXDA.MeasurementCharacteristics")?this.setState({MeasurementTypes:JSON.parse(sessionStorage.getItem("OpenXDA.MeasurementCharacteristics"))}):$.ajax({type:"GET",url:homePath+"api/OpenXDA/MeasurementCharacteristic",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){e.setState({MeasurementCharacteristics:t}),sessionStorage.setItem("OpenXDA.MeasurementCharacteristics",JSON.stringify(t))}))},t.prototype.deleteChannel=function(e){var t=r.clone(this.state.Channels);t.splice(e,1)[0];this.setState({Channels:t})},t.prototype.render=function(){var e=this;return l.createElement("div",{className:"card",style:{marginBottom:10}},l.createElement("div",{className:"card-header"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h4",null,"Channels:")))),l.createElement("div",{className:"card-body"},l.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-420,padding:30,overflowY:"auto"}},l.createElement("table",{className:"table table-hover"},l.createElement("thead",null,l.createElement("tr",null,l.createElement("th",null,"Name"),l.createElement("th",null,"Desc"),l.createElement("th",null,"Type"),l.createElement("th",null,"Characteristic"),l.createElement("th",null,"Phase"),l.createElement("th",null,"Harmonic"),l.createElement("th",null,"Adder"),l.createElement("th",null,"Multiplier"),l.createElement("th",null,"Asset"),l.createElement("th",null))),l.createElement("tbody",null,this.state.Channels.map((function(t,a,n){return l.createElement("tr",{key:a},l.createElement("td",{style:{width:"15%"}},l.createElement("input",{className:"form-control",value:t.Name,onChange:function(a){t.Name=a.target.value,e.setState({Channels:n})}})),l.createElement("td",{style:{width:"20%"}},l.createElement("input",{className:"form-control",value:null==t.Description?"":t.Description,onChange:function(a){t.Description=a.target.value,e.setState({Channels:n})}})),l.createElement("td",{style:{width:"10%"}},l.createElement("select",{className:"form-control",value:t.MeasurementType,onChange:function(a){t.MeasurementType=a.target.value,e.setState({Channels:n})}},e.state.MeasurementTypes.map((function(e){return l.createElement("option",{key:e.ID,value:e.Name},e.Name)})))),l.createElement("td",{style:{width:"10%"}},l.createElement("select",{className:"form-control",value:t.MeasurementCharacteristic,onChange:function(a){t.MeasurementCharacteristic=a.target.value,e.setState({Channels:n})}},e.state.MeasurementCharacteristics.map((function(e){return l.createElement("option",{key:e.ID,value:e.Name},e.Name)})))),l.createElement("td",{style:{width:"10%"}},l.createElement("select",{className:"form-control",value:t.Phase,onChange:function(a){t.Phase=a.target.value,e.setState({Channels:n})}},e.state.Phases.map((function(e){return l.createElement("option",{key:e.ID,value:e.Name},e.Name)})))),l.createElement("td",{style:{width:"5%"}},l.createElement("input",{className:"form-control",value:t.HarmonicGroup,onChange:function(a){t.HarmonicGroup=Object(r.toNumber)(a.target.value),e.setState({Channels:n})}})),l.createElement("td",{style:{width:"5%"}},l.createElement("input",{className:"form-control",value:t.Adder,onChange:function(a){t.Adder=Object(r.toNumber)(a.target.value),e.setState({Channels:n})}})),l.createElement("td",{style:{width:"5%"}},l.createElement("input",{className:"form-control",value:t.Multiplier,onChange:function(a){t.Multiplier=Object(r.toNumber)(a.target.value),e.setState({Channels:n})}})),l.createElement("td",{style:{width:"10%"}},l.createElement("select",{className:"form-control",value:t.Asset,onChange:function(a){t.Asset=a.target.value,e.setState({Channels:n})}},l.createElement("option",{value:""}),e.state.AllAssets.map((function(e){return l.createElement("option",{key:e.ID,value:e.AssetKey},e.AssetKey)})))),l.createElement("td",{style:{width:"5%"}},l.createElement("button",{className:"btn btn-sm",onClick:function(t){return e.deleteChannel(a)}},l.createElement("span",null,l.createElement("i",{className:"fa fa-times"})))))})))))),l.createElement("div",{className:"card-footer"},l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){var t={ID:0,Meter:e.props.Meter.AssetKey,Asset:"",MeasurementType:"Voltage",MeasurementCharacteristic:"RMS",Phase:"AN",Name:"VAN RMS",Adder:0,Multiplier:1,SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Description:"Voltage AN RMS",Enabled:!0,Series:[{ID:0,ChannelID:0,SeriesType:"Maximum",SourceIndexes:""},{ID:0,ChannelID:0,SeriesType:"Minimum",SourceIndexes:""},{ID:0,ChannelID:0,SeriesType:"Average",SourceIndexes:""}]},a=r.clone(e.state.Channels);a.push(t),e.setState({Channels:a})}},"Add Channel")),l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary pull-right",onClick:this.updateChannels},"Save Changes")),l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-default",onClick:this.getChannels},"Clear Changes"))))},t}(l.Component),A=a(55),v=a(53),D=a(54),T=a(56),w=a(57),C=a(43),F=a(39),R=a.n(F),I=a(65),L=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)i.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return i},k=function(e){var t=L(l.useState([]),2),a=t[0],n=t[1],r=L(l.useState(i.a.getNewAsset("Line")),2),o=r[0],c=r[1],u=L(l.useState([]),2),d=u[0],m=u[1],p=L(l.useState([]),2),h=p[0],f=p[1],y=L(l.useState("New"),2),E=y[0],b=y[1],N=L(l.useState(0),2),g=N[0],S=N[1],F=L(l.useState("Line"),2),k=F[0],x=F[1],V=L(l.useState(!1),2),P=V[0],O=V[1],j=L(l.useState(!1),2),B=j[0],U=j[1],K=L(l.useState("AssetKey"),2),X=K[0],H=K[1],G=L(l.useState(!0),2),q=G[0],J=G[1],_=L(l.useState(!1),2),Y=_[0],z=_[1],W=L(l.useState(0),2),Z=W[0],Q=W[1];return l.useEffect((function(){var e=Object(C.c)();return e.done((function(e){f(e)})),function(){null!=e&&null!=e.abort&&e.abort()}}),[]),l.useEffect((function(){var e=Object(C.b)();return e.done((function(e){m(e)})),function(){null!=e&&null!=e.abort&&e.abort()}}),[Z]),l.useEffect((function(){var e=Object(C.b)();return e.done((function(e){m(e)})),function(){null!=e&&null!=e.abort&&e.abort()}}),[]),l.useEffect((function(){var t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/Meter/"+e.Meter.ID+"/Asset/"+X+"/"+(q?1:0),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){n(e)})),function(){null!=t&&null!=t.abort&&t.abort()}}),[e.Meter,q,X]),l.useEffect((function(){if(0==g)return c(i.a.getNewAsset(k)),void b("New");Object(C.d)(g,k).then((function(e){c(e),b("Edit")}))}),[g,k]),l.createElement("div",{className:"card",style:{marginBottom:10}},l.createElement("div",{className:"card-header"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h4",null,"Assets:")))),l.createElement("div",{className:"card-body"},l.createElement("div",{className:"row",style:{margin:-20}},l.createElement("div",{className:"col",style:{padding:20}},l.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-420,padding:30,overflowY:"auto"}},l.createElement(R.a,{cols:[{key:"AssetKey",label:"Key",headerStyle:{width:"calc(20%-16px)"},rowStyle:{width:"calc(20%-16px)"}},{key:"AssetName",label:"Name",headerStyle:{width:"calc(30%-16px)"},rowStyle:{width:"calc(30%-16px)"}},{key:"AssetType",label:"Type",headerStyle:{width:"calc(10%-16px)"},rowStyle:{width:"calc(10%-16px)"}},{key:"VoltageKV",label:"Base kV",headerStyle:{width:"calc(10%-16x)"},rowStyle:{width:"calc(10%-16px)"}},{key:"Channels",label:"Channels",headerStyle:{width:"calc(10%-16px)"},rowStyle:{width:"calc(10%-16px)"}},{key:null,label:"",headerStyle:{width:80,paddingLeft:0,paddingRight:5},rowStyle:{width:80,paddingLeft:0,paddingRight:5},content:function(e){return l.createElement(l.Fragment,null," ",l.createElement("button",{className:"btn btn-sm",onClick:function(t){x(e.AssetType),S(e.ID),O(!0)}},l.createElement("span",null,I.Pencil)),l.createElement("button",{className:"btn btn-sm",onClick:function(t){x(e.AssetType),S(e.ID),U(!0)}},l.createElement("span",null,I.TrashCan)))}}],tableClass:"table table-hover",data:a,sortField:X,ascending:q,onSort:function(e){null!=e.col&&"ID"!=e.col&&(e.col==X?J(!q):(J(!0),H(e.col)))},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-455},rowStyle:{display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}}),l.createElement(s.Warning,{Show:B,CallBack:function(t){t&&(z(!0),$.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Meter/"+e.Meter.ID+"/Asset/"+g+"/"+e.Meter.LocationID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){H("AssetKey"),Q((function(e){return e+1})),z(!1)})).fail((function(e){z(!1),500==e.status?alert(e.responseJSON.ExceptionMessage):sessionStorage.clear()}))),U(!1)},Title:"Remove this Asset",Message:"This will permanently remove this Asset from the Meter."}),l.createElement(s.LoadingScreen,{Show:Y}),l.createElement(s.Modal,{Show:P,Title:"New"==E?"Add New Asset to Meter":"Edit "+o.AssetKey+" for Meter",Size:"lg",ShowX:!0,ShowCancel:!1,ConfirmText:"Save",CallBack:function(e){O(!1)},ConfirmShowToolTip:i.a.AttributeError(o).length>0,DisableConfirm:i.a.AttributeError(o).length>0,ConfirmToolTipContent:i.a.AttributeError(o).map((function(e,t){return l.createElement("p",{key:t},l.createElement(M,null)," ",e)}))},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement(i.a.AssetAttributeFields,{Asset:o,NewEdit:E,AssetTypes:h,AllAssets:d,UpdateState:c,GetDifferentAsset:function(e){S(e),x(d.find((function(t){return t.ID==e})).AssetType)},HideSelectAsset:!1,HideAssetType:!1})),l.createElement("div",{className:"col"},function(){if("Breaker"==o.AssetType)return l.createElement(v.a,{NewEdit:E,Asset:o,UpdateState:c,ShowSpare:!0});if("Bus"==o.AssetType)return l.createElement(A.a,{NewEdit:E,Asset:o,UpdateState:c});if("CapacitorBank"==o.AssetType)return l.createElement(D.a,{NewEdit:E,Asset:o,UpdateState:c});if("Line"==o.AssetType)return l.createElement(T.a,{NewEdit:E,Asset:o,UpdateState:c});if("Transformer"==o.AssetType)return l.createElement(w.a,{NewEdit:E,Asset:o,UpdateState:c})}()))))))),l.createElement("div",{className:"card-footer"},l.createElement("div",{className:"btn-group mr-2"},l.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){S(0),x("Line"),O(!0)}},"Add Asset"))))},M=function(){return l.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})},x=a(59),V=a(60),P=a(3),O=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)i.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return i};var j=function(e){var t=Object(P.useHistory)(),a=O(l.useState([]),2),n=a[0],r=a[1];return l.useEffect((function(){$.ajax({type:"GET",url:homePath+"api/OpenXDA/MeterConfiguration/Meter/"+e.Meter.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){return r(e)}))}),[e.Meter]),l.createElement("div",{className:"card",style:{marginBottom:10}},l.createElement("div",{className:"card-header"},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h4",null,"Configuration History:")))),l.createElement("div",{className:"card-body"},l.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-420,padding:30,overflowY:"auto"}},l.createElement("table",{className:"table"},l.createElement("thead",null,l.createElement("tr",null,l.createElement("td",null,"Revision"),l.createElement("td",null,"Files Processed"),l.createElement("td",null,"Last Processed Time"))),l.createElement("tbody",null,n.map((function(a,n){return l.createElement("tr",{key:n,style:{cursor:"pointer"},onClick:function(n){return l=a,void t.push({pathname:homePath+"index.cshtml",search:"?name=ConfigurationHistory&MeterKey="+e.Meter.AssetKey+"&MeterConfigurationID="+l.ID,state:{}});var l}},l.createElement("td",null,a.Revision),l.createElement("td",null,a.FilesProcessed),l.createElement("td",null,a.LastProcessedTime))})))))))},B=a(49),U=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)i.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return i};t.default=function(e){var t=U(l.useState(null),2),a=t[0],n=t[1],r=U(l.useState(null),2),i=r[0],o=r[1],c=U(l.useState(!1),2),u=c[0],d=c[1],p=U(l.useState(!1),2),h=p[0],f=p[1];return l.useEffect((function(){return o(sessionStorage.hasOwnProperty("Meter.Tab")?JSON.parse(sessionStorage.getItem("Meter.Tab")):"notes"),function(){sessionStorage.clear()}}),[]),l.useEffect((function(){null!=i&&sessionStorage.setItem("Meter.Tab",JSON.stringify(i))}),[i]),l.useEffect((function(){var t=null==e.MeterID?null:$.ajax({type:"GET",url:homePath+"api/OpenXDA/Meter/One/"+e.MeterID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.then((function(e){return n(e)})),function(){null!=t&&null!=t.abort&&t.abort()}}),[e.MeterID]),l.useEffect((function(){}),[]),null==a?null:l.createElement("div",{style:{width:"100%",height:"100%",overflow:"hidden",padding:15}},l.createElement("div",{className:"row"},l.createElement("div",{className:"col"},l.createElement("h2",null,a.AssetKey)),l.createElement("div",{className:"col",style:{maxHeight:50}},l.createElement("button",{className:"btn btn-danger pull-right",onClick:function(){return d(!0)}},"Delete Meter (Permanent)"))),l.createElement("hr",null),l.createElement("ul",{className:"nav nav-tabs",style:{maxHeight:38}},l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("notes"==i?" active":""),onClick:function(){return o("notes")},"data-toggle":"tab",href:"#notes"},"Notes")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("meterInfo"==i?" active":""),onClick:function(){return o("meterInfo")},"data-toggle":"tab",href:"#meterInfo"},"Meter Info")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("additionalFields"==i?" active":""),onClick:function(){return o("additionalFields")},"data-toggle":"tab",href:"#additionalFields"},"Additional Fields")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("substation"==i?" active":""),onClick:function(){return o("substation")},"data-toggle":"tab",href:"#substation"},"Substation")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("assets"==i?" active":""),onClick:function(){return o("assets")},"data-toggle":"tab",href:"#assets"},"Assets")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("eventChannels"==i?" active":""),onClick:function(){return o("eventChannels")},"data-toggle":"tab",href:"#eventChannels"},"Event Channels")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("trendChannels"==i?" active":""),onClick:function(){return o("trendChannels")},"data-toggle":"tab",href:"#trendChannels"},"Trend Channels")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("configurationHistory"==i?" active":""),onClick:function(){return o("configurationHistory")},"data-toggle":"tab",href:"#configurationHistory"},"Configuration History")),l.createElement("li",{className:"nav-item"},l.createElement("a",{className:"nav-link"+("extDB"==i?" active":""),onClick:function(){return o("extDB")},"data-toggle":"tab",href:"#extDB"},"External DB"))),l.createElement("div",{className:"tab-content",style:{maxHeight:window.innerHeight-215,overflow:"hidden"}},l.createElement("div",{className:"tab-pane "+("notes"==i?" active":"fade"),id:"notes",style:{maxHeight:window.innerHeight-215}},l.createElement(x.a,{ID:e.MeterID,Type:"Meter"})),l.createElement("div",{className:"tab-pane "+("meterInfo"==i?" active":"fade"),id:"meterInfo",style:{maxHeight:window.innerHeight-215}},l.createElement(E,{Meter:a,StateSetter:function(e){return n(e)}})),l.createElement("div",{className:"tab-pane "+("additionalFields"==i?" active":"fade"),id:"additionalFields",style:{maxHeight:window.innerHeight-215}},l.createElement(V.a,{ID:e.MeterID,Type:"Meter",Tab:i})),l.createElement("div",{className:"tab-pane "+("substation"==i?" active":"fade"),id:"substation",style:{maxHeight:window.innerHeight-215}},l.createElement(m,{Meter:a,StateSetter:function(e){return n(e)}})),l.createElement("div",{className:"tab-pane "+("eventChannels"==i?" active":"fade"),id:"eventChannels"},l.createElement(N,{Meter:a})),l.createElement("div",{className:"tab-pane "+("trendChannels"==i?" active":"fade"),id:"trendChannels"},l.createElement(S,{Meter:a})),l.createElement("div",{className:"tab-pane "+("assets"==i?" active":"fade"),id:"assets"},l.createElement(k,{Meter:a})),l.createElement("div",{className:"tab-pane "+("configurationHistory"==i?" active":"fade"),id:"configurationHistory"},l.createElement(j,{Meter:a})),l.createElement("div",{className:"tab-pane "+("extDB"==i?" active":"fade"),id:"extDB"},l.createElement(B.a,{ID:e.MeterID,Type:"Meter",Tab:i}))),l.createElement(s.Warning,{Message:"This will permanently Delete this meter and can not be undone.",Show:u,Title:"Delete Meter "+a.AssetKey,CallBack:function(e){e&&function(){f(!0);var e=$.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Meter/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(a),dataType:"json",cache:!0,async:!0});e.done((function(){window.location.href=homePath+"index.cshtml?name=Meters"})),e.then((function(e){return f(!1)}))}(),d(!1)}}),l.createElement(s.LoadingScreen,{Show:h}))}},37:function(e,t,a){"use strict";var n,l=a(0),r=a(31),i=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.render=function(){var e=this;return l.createElement("div",{className:"form-group"},l.createElement("label",null,null==this.props.Label?this.props.Field:this.props.Label),l.createElement("input",{className:this.props.Valid(this.props.Field)?"form-control":"form-control is-invalid",onChange:function(t){var a=r.clone(e.props.Record);""!=t.target.value?a[e.props.Field]=t.target.value:a[e.props.Field]=null,e.props.Setter(a)},value:null==this.props.Record[this.props.Field]?"":this.props.Record[this.props.Field].toString(),disabled:null!=this.props.Disabled&&this.props.Disabled}),l.createElement("div",{className:"invalid-feedback"},null==this.props.Feedback?this.props.Field+" is a required field.":this.props.Feedback))},t}(l.Component);t.a=s},41:function(e,t,a){"use strict";var n,l=a(0),r=a(31),i=a.n(r),s=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.render=function(){var e=this;return l.createElement("div",{className:"form-check"},l.createElement("input",{type:"checkbox",className:"form-check-input",style:{zIndex:1},onChange:function(t){var a=i.a.clone(e.props.Record);a[e.props.Field]=t.target.checked,e.props.Setter(a)},value:this.props.Record[this.props.Field]?"on":"off",checked:!!this.props.Record[this.props.Field],disabled:null!=this.props.Disabled&&this.props.Disabled}),l.createElement("label",{className:"form-check-label"},null==this.props.Label?this.props.Field:this.props.Label))},t}(l.Component);t.a=o},43:function(e,t,a){"use strict";a.d(t,"e",(function(){return o})),a.d(t,"c",(function(){return c})),a.d(t,"b",(function(){return u})),a.d(t,"d",(function(){return m})),a.d(t,"a",(function(){return p}));var n=function(e,t,a,n){return new(a||(a=Promise))((function(l,r){function i(e){try{o(n.next(e))}catch(e){r(e)}}function s(e){try{o(n.throw(e))}catch(e){r(e)}}function o(e){var t;e.done?l(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,s)}o((n=n.apply(e,t||[])).next())}))},l=function(e,t){var a,n,l,r,i={label:0,sent:function(){if(1&l[0])throw l[1];return l[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(a)throw new TypeError("Generator is already executing.");for(;i;)try{if(a=1,n&&(l=2&r[0]?n.return:r[0]?n.throw||((l=n.return)&&l.call(n),0):n.next)&&!(l=l.call(n,r[1])).done)return l;switch(n=0,l&&(r=[2&r[0],l.value]),r[0]){case 0:case 1:l=r;break;case 4:return i.label++,{value:r[1],done:!1};case 5:i.label++,n=r[1],r=[0];continue;case 7:r=i.ops.pop(),i.trys.pop();continue;default:if(!(l=i.trys,(l=l.length>0&&l[l.length-1])||6!==r[0]&&2!==r[0])){i=0;continue}if(3===r[0]&&(!l||r[1]>l[0]&&r[1]<l[3])){i.label=r[1];break}if(6===r[0]&&i.label<l[1]){i.label=l[1],l=r;break}if(l&&i.label<l[2]){i.label=l[2],i.ops.push(r);break}l[2]&&i.ops.pop(),i.trys.pop();continue}r=t.call(e,i)}catch(e){r=[6,e],n=0}finally{a=l=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};function r(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+e.ID+"/SpareBreaker",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function i(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+e.ID+"/Location",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function s(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/SpareBreakers/Substation/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function o(e){return n(this,void 0,void 0,(function(){var t;return l(this,(function(a){switch(a.label){case 0:return[4,i(e)];case 1:return null==(t=a.sent())?[2,[]]:[4,s(t)];case 2:return[2,a.sent()]}}))}))}function c(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/AssetType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})}function u(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0})}function d(e,t){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/"+t+"/One/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})}function m(e,t){return n(this,void 0,void 0,(function(){var a,n,i,s,o;return l(this,(function(l){switch(l.label){case 0:return[4,d(e,t)];case 1:return(a=l.sent()).AssetType=t,a.Channels=[],"Breaker"!=t?[3,5]:[4,(u=a,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+u.ID+"/EDNAPoint",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise())];case 2:return n=l.sent(),a.EDNAPoint=null!=n?n.Point:null,[4,r(a)];case 3:return[4,l.sent()];case 4:return i=l.sent(),a.SpareBreakerID=null!=i?i.ID:null,[3,7];case 5:return"Line"!=t?[3,7]:(s=a,o="Detail",[4,(c=a,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Line/"+c.ID+"/LineSegment",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise())]);case 6:s[o]=l.sent(),l.label=7;case 7:return[2,a]}var c,u}))}))}function p(e){return $.ajax({type:"POST",url:homePath+"api/OpenXDA/Asset/Edit",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Asset:e}),cache:!1,async:!0}).promise()}},49:function(e,t,a){"use strict";var n=a(0),l=a(31),r=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)i.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return i};function i(e){return n.createElement("tr",null,n.createElement("td",null,e.ExternalDB),n.createElement("td",null,null==e.updated?"N/A":moment(e.updated).format("MM/DD/YYYY")),n.createElement("td",null,n.createElement("button",{className:"btn btn-primary",onClick:function(t){return e.Update(e.ExternalDB)}},"Update ",e.ExternalDB)))}function s(e){var t=l.clone(e.Values),a=t.find((function(t){return t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField}));return n.createElement("tr",null,-1==e.ParentTableID?n.createElement("td",null,e.Field.DisplayName):null,n.createElement("td",null,e.Field.FieldName),n.createElement("td",null,null==e.Field.PreviousValue?"":e.Field.PreviousValue),e.Field.Error?n.createElement("td",null,e.Field.Message):n.createElement("td",null,n.createElement("input",{className:e.Field.Changed?"form-control is-invalid":"form-control",onChange:function(n){""!=n.target.value?a.Value=n.target.value:a.Value=null,a.Changed=!0,e.Setter(t)},value:null==a.Value?"":a.Value.toString()})),n.createElement("td",null,e.Field.Error?n.createElement("span",null,n.createElement("i",{className:"fa fa-exclamation-triangle"})):null),n.createElement("td",null,n.createElement("button",{className:"btn btn-sm",onClick:function(a){return t=t.filter((function(t){return!(t.AdditionalFieldID==e.Field.AdditionalFieldID&&t.OpenXDAParentTableID==e.Field.OpenXDAParentTableID&&t.isXDAField==e.Field.isXDAField)})),void e.Setter(t)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-times"})))))}t.a=function(e){var t=r(n.useState([]),2),a=t[0],l=t[1],o=r(n.useState([]),2),c=o[0],u=o[1],d=r(n.useState(!1),2),m=d[0],p=d[1],h=r(n.useState(""),2),f=h[0],y=h[1];function E(){var t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/"+e.Type+"/extDataBases",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0});return t.done((function(e){l(e)})),function(){null!=t.abort&&t.abort()}}function b(){u([]),p(!1)}function N(e){e.length<1?b():u(e)}return n.useEffect((function(){return p(!1),u([]),E()}),[e.ID,e.Type,e.Tab]),n.createElement("div",{className:"card",style:{marginBottom:10}},n.createElement("div",{className:"card-header"},n.createElement("h4",null," External Data Base Connections:")),n.createElement("div",{className:"card-body"},n.createElement("div",{style:{height:window.innerHeight-540,maxHeight:window.innerHeight-540,overflowY:"auto"}},m?n.createElement("table",{id:"fields",className:"table"},n.createElement("thead",null,n.createElement("tr",null,-1==e.ID?n.createElement("th",null," ",e.Type," "):null,n.createElement("th",null,"Field"),n.createElement("th",{style:{width:300}},"Previous Value"),n.createElement("th",{style:{width:300}},"Updated Value"),n.createElement("th",{style:{width:30}}),n.createElement("th",{style:{width:30}}))),n.createElement("tbody",null,c.map((function(t,a){return n.createElement(s,{key:a,ParentTableID:e.ID,Field:t,Values:c,Setter:N})})))):n.createElement("table",{id:"overview",className:"table"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null,"External DB"),n.createElement("th",{style:{width:250}},"Last Updated"),n.createElement("th",{style:{width:300}}))),n.createElement("tbody",null,a.map((function(t,a){return n.createElement(i,{key:a,ParentTableID:e.ID,ExternalDB:t.name,updated:t.lastupdate,Update:function(t){var a;a=t,$.ajax({type:"GET",url:homePath+"api/ExternalDB/"+a+"/"+e.Type+"/Update/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}).done((function(e){u(e),p(!0),y(a),e.length<1&&b()}))}})})))))),m?n.createElement("div",{className:"card-footer"},n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-primary",onClick:function(){var t=$.ajax({type:"POST",url:homePath+"api/ExternalDB/"+f+"/"+e.Type+"/ConfirmUpdate",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({data:c}),cache:!1,async:!0});return u([]),p(!1),E(),function(){null!=t.abort&&t.abort()}}},"Save Changes")),n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-default",onClick:b},"Cancel"))):null)}},53:function(e,t,a){"use strict";var n=a(0),l=a(31),r=a(33),i=a(37),s=a(41),o=a(43),c=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)i.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return i};t.a=function(e){function t(t){return"ThermalRating"==t?null!=e.Asset.ThermalRating&&r.a.isRealNumber(e.Asset.ThermalRating):"Speed"==t?null!=e.Asset.Speed&&r.a.isRealNumber(e.Asset.Speed):"TripTime"==t?null==e.Asset.TripTime||r.a.isInteger(e.Asset.TripTime):"PickupTime"==t?null==e.Asset.PickupTime||r.a.isInteger(e.Asset.PickupTime):"TripCoilCondition"==t?null==e.Asset.TripCoilCondition||r.a.isRealNumber(e.Asset.TripCoilCondition):"EDNAPoint"==t||("Spare"==t||"SpareBreakerID"==t)}var a=c(n.useState([]),2),u=a[0],d=a[1];return n.useEffect((function(){Object(o.e)(e.Asset).then((function(e){d(e)}))}),[e.Asset]),null==e.Asset?null:n.createElement(n.Fragment,null,n.createElement(i.a,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.a,{Record:e.Asset,Field:"Speed",Feedback:"Speed is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.a,{Record:e.Asset,Field:"TripTime",Label:"Trip Time Limit",Feedback:"Trip Time is an integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.a,{Record:e.Asset,Field:"PickupTime",Label:"Pickup Time Limit",Feedback:"Pickup Time is an integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.a,{Record:e.Asset,Field:"TripCoilCondition",Label:"Trip Coil Condition Limit",Feedback:"Trip Coil Condition is an numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.a,{Record:e.Asset,Field:"EDNAPoint",Label:"EDNA Point",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement("div",{className:"form-group",hidden:1!=e.ShowSpare},n.createElement("label",null,"Spare Breaker"),n.createElement("select",{className:"form-control",value:null==e.Asset.SpareBreakerID?0:e.Asset.SpareBreakerID,onChange:function(t){var a=l.clone(e.Asset);"0"==t.target.value?a.SpareBreakerID=null:a.SpareBreakerID=parseInt(t.target.value),e.UpdateState(a)},disabled:"New"==e.NewEdit&&0!=e.Asset.ID},n.createElement("option",{value:0,key:0},"None"),u.map((function(e){return n.createElement("option",{value:e.ID,key:e.ID},e.AssetKey)})))),n.createElement(s.a,{Record:e.Asset,Field:"Spare",Label:"Is Spare",Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},54:function(e,t,a){"use strict";var n,l=a(0),r=a(31),i=a(33),s=a(37),o=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),c=function(){return(c=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var l in t=arguments[a])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};t.a=function(e){function t(t){return"NumberOfBanks"==t?null!=e.Asset.NumberOfBanks&&i.a.isInteger(e.Asset.NumberOfBanks):"CapacitancePerBank"==t?null!=e.Asset.CapacitancePerBank&&i.a.isRealNumber(e.Asset.CapacitancePerBank):"MaxKV"==t?null!=e.Asset.MaxKV&&i.a.isRealNumber(e.Asset.MaxKV):"UnitKV"==t?null!=e.Asset.UnitKV&&i.a.isRealNumber(e.Asset.UnitKV):"UnitKVAr"==t?null!=e.Asset.UnitKVAr&&i.a.isRealNumber(e.Asset.UnitKVAr):"PosReactanceTol"==t?null!=e.Asset.PosReactanceTol&&i.a.isRealNumber(e.Asset.PosReactanceTol):"NegReactanceTol"==t?null!=e.Asset.NegReactanceTol&&i.a.isRealNumber(e.Asset.NegReactanceTol):"Nparalell"==t?null!=e.Asset.Nparalell&&i.a.isInteger(e.Asset.Nparalell):"Nseries"==t?null!=e.Asset.Nseries&&i.a.isInteger(e.Asset.Nseries):"NSeriesGroup"==t?null!=e.Asset.NSeriesGroup&&i.a.isInteger(e.Asset.NSeriesGroup):"NParalellGroup"==t?null!=e.Asset.NParalellGroup&&i.a.isInteger(e.Asset.NParalellGroup):"VTratioBus"==t?null!=e.Asset.VTratioBus&&i.a.isRealNumber(e.Asset.VTratioBus):"NumberLVCaps"==t?null!=e.Asset.NumberLVCaps&&i.a.isInteger(e.Asset.NumberLVCaps):"NumberLVUnits"==t?null!=e.Asset.NumberLVUnits&&i.a.isInteger(e.Asset.NumberLVUnits):"LVKVAr"==t?null!=e.Asset.LVKVAr&&i.a.isRealNumber(e.Asset.LVKVAr):"LVKV"==t?null!=e.Asset.LVKV&&i.a.isRealNumber(e.Asset.LVKV):"LVNegReactanceTol"==t?null!=e.Asset.LVNegReactanceTol&&i.a.isRealNumber(e.Asset.LVNegReactanceTol):"LVPosReactanceTol"==t?null!=e.Asset.LVPosReactanceTol&&i.a.isRealNumber(e.Asset.LVPosReactanceTol):"LowerXFRRatio"==t?null!=e.Asset.LowerXFRRatio&&i.a.isRealNumber(e.Asset.LowerXFRRatio):"Nshorted"==t?null!=e.Asset.Nshorted&&i.a.isRealNumber(e.Asset.Nshorted):"BlownFuses"==t?null!=e.Asset.BlownFuses&&i.a.isRealNumber(e.Asset.BlownFuses):"BlownGroups"==t?null!=e.Asset.BlownGroups&&i.a.isRealNumber(e.Asset.BlownGroups):"Rv"==t?null!=e.Asset.Rv&&i.a.isRealNumber(e.Asset.Rv):"Rh"==t?null!=e.Asset.Rh&&i.a.isRealNumber(e.Asset.Rh):"NLowerGroups"==t?null!=e.Asset.NLowerGroups&&i.a.isInteger(e.Asset.NLowerGroups):"ShortedGroups"==t?null!=e.Asset.ShortedGroups&&i.a.isRealNumber(e.Asset.ShortedGroups):"RelayPTRatioPrimary"==t?null!=e.Asset.RelayPTRatioPrimary&&i.a.isRealNumber(e.Asset.RelayPTRatioPrimary):"RelayPTRatioSecondary"==t?null!=e.Asset.RelayPTRatioSecondary&&i.a.isRealNumber(e.Asset.RelayPTRatioSecondary):"Sh"==t&&(null!=e.Asset.Sh&&i.a.isRealNumber(e.Asset.Sh))}return l.useEffect((function(){null!=e.Asset.Fused&&null!=e.Asset.Compensated&&null!=e.Asset.CktSwitcher&&0!=e.Asset.CktSwitcher.length||e.UpdateState(c(c({},e.Asset),{Fused:!0,Compensated:!1,CktSwitcher:"0"}))}),[e.Asset]),null==e.Asset?null:l.createElement(l.Fragment,null,l.createElement(u,{Record:e.Asset,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"NumberOfBanks",Label:"Number Of Banks",Feedback:"Number Of Banks is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(d,{Record:e.Asset,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"CapacitancePerBank",Label:"Capacitor Step Size (kVAR)",Feedback:"Capacitor Step Size is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"MaxKV",Label:"Maximum Operating Voltage (kV)",Feedback:"Maximum Operating Voltage is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"UnitKV",Label:"Rated Voltage of a Unit (kV)",Feedback:"Rated Voltage of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"UnitKVAr",Label:"Rating of a Unit (kVAR)",Feedback:"Rating of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"PosReactanceTol",Label:"pos. Reactance Tolerance of a Unit (%)",Feedback:"pos. Reactance Tolerance of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"NegReactanceTol",Label:"neg. Reactance Tolerance of a Unit (%)",Feedback:"neg. Reactance Tolerance of a Unit (%) is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"Nparalell",Label:e.Asset.Fused?"Num. of Units per group":"Num. of Parallel Strings",Feedback:(e.Asset.Fused?"Num. of Caps. per group":"Num. of Parallel Strings")+" is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"Nseries",Label:e.Asset.Fused?"Num. of Series Groups per Phase":"Num. Units in each String",Feedback:(e.Asset.Fused?"Num. of Series Groups per Phase":"Num. Units in each String")+" is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),e.Asset.Fused?l.createElement(l.Fragment,null,l.createElement(s.a,{Record:e.Asset,Field:"LowerXFRRatio",Label:"Midgroup VT Ratio",Feedback:"Midgroup VT Ratio is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"Nshorted",Label:"Initial guess of shorted elements",Feedback:"Initial guess of shorted elements is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"BlownFuses",Label:"Initial Guess of blown fuses per group",Feedback:"Initial Guess of blown fuses per group is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"BlownGroups",Label:"Initial guess of Groups with blown Fuse",Feedback:"Initial guess of Groups with blown Fuse is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})):l.createElement(l.Fragment,null,e.Asset.Compensated?l.createElement(l.Fragment,null,l.createElement(m,{Record:e.Asset,Field2:"RelayPTRatioSecondary",Field1:"RelayPTRatioPrimary",Label:"Relay PT Ratio (primary - secondary V)",Feedback:"Relay PT ratio  is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"Rh",Label:"Vt Input Resistor (Ohm)",Feedback:"Vt input resistor is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"Sh",Label:"Vt Input Resistor Wattage (W)",Feedback:"Vt input resistor wattage is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})):l.createElement(l.Fragment,null,l.createElement(s.a,{Record:e.Asset,Field:"Rv",Label:"Voltage Divider output R (Ohm)",Feedback:"Voltage Divider output R is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"Rh",Label:"Voltage Divider input R (Ohm)",Feedback:"Voltage Divider input R is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})),l.createElement(s.a,{Record:e.Asset,Field:"NSeriesGroup",Label:"Num. of Series Groups in each Unit",Feedback:"Num. of Series Groups in each Unit is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"NParalellGroup",Label:"Num. of Elements in each Group",Feedback:"Num. of Elements in each Group is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"VTratioBus",Label:"Bus VT Ratio",Feedback:"Bus VT Ratio is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"NumberLVCaps",Label:"Num.of Relay Caps",Feedback:"Num. of Relay Caps is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"NumberLVUnits",Label:"Num. of Elements per Relay Cap",Feedback:"Num. of Elements per Relay Cap is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"LVKVAr",Label:"Low Voltage Cap size (kVAR)",Feedback:"Low Voltage Cap size is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"LVKV",Label:"Low Voltage Cap rating (V)",Feedback:"Low Volatage Cap rating is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"LVNegReactanceTol",Label:"neg. Reactance Tolerance of LV Unit (%)",Feedback:"neg. Reactance Tolerance of LV Unitis a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"LVPosReactanceTol",Label:"pos. Reactance Tolerance of LV Unit (%)",Feedback:"pos. Reactance Tolerance of LV Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),l.createElement(s.a,{Record:e.Asset,Field:"Nshorted",Label:"Initial guess of shorted elements",Feedback:"Initial guess of shorted elements is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})))};var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.computBools=function(e){var t=r.clone(this.props.Record);"0"==e?(t.Compensated=!0,t.Fused=!1):"1"==e?(t.Compensated=!1,t.Fused=!1):"2"==e&&(t.Compensated=!1,t.Fused=!0),this.props.Setter(t)},t.prototype.computeSelection=function(e){return e.Compensated?"0":e.Fused?"2":"1"},t.prototype.render=function(){var e=this;return l.createElement("div",{className:"form-group"},l.createElement("label",null,"Design"),l.createElement("select",{className:"form-control",value:this.computeSelection(this.props.Record),disabled:null!=this.props.Disabled&&this.props.Disabled,onChange:function(t){return e.computBools(t.target.value)}},l.createElement("option",{key:0,value:"0"},"Fuseless Compensated"),l.createElement("option",{key:1,value:"1"},"Fuseless Uncompensated"),l.createElement("option",{key:2,value:"2"},"Fused")))},t}(l.Component),d=function(e){function t(t,a){var n=e.call(this,t,a)||this,l=[];null!=n.props.Record.CktSwitcher&&(l=n.props.Record.CktSwitcher.trim().split(","));var r=1;return null!=n.props.Record.NumberOfBanks&&(r=n.props.Record.NumberOfBanks),l.length!==parseInt(r.toString())&&(l=Array.from(Array(parseInt(r.toString())),(function(e,t){return"0"}))),n.state={preSwitch:l.map((function(e){return"1"==e.trim()}))},n}return o(t,e),t.prototype.updateValues=function(e){var t=[];null!=e&&(t=e.trim().split(","));var a=1;null!=this.props.Record.NumberOfBanks&&(a=this.props.Record.NumberOfBanks),t.length!==parseInt(a.toString())&&(t=Array.from(Array(parseInt(a.toString())),(function(e,t){return"0"}))),this.setState({preSwitch:t.map((function(e){return"1"==e.trim()}))})},t.prototype.componentDidUpdate=function(e,t){if(e.Record.NumberOfBanks===this.props.Record.NumberOfBanks&&e.Record.CktSwitcher===this.props.Record.CktSwitcher||this.updateValues(this.props.Record.CktSwitcher),!r.isEqual(t,this.state)){var a=r.clone(this.props.Record);a.CktSwitcher=this.state.preSwitch.map((function(e){return e?"1":"0"})).join(","),this.props.Setter(a)}},t.prototype.render=function(){var e=this;return l.createElement("div",{className:"form-group"},l.createElement("label",null,"CapBank with Pre-insertion Switcher"),l.createElement("div",null,this.state.preSwitch.map((function(t,a){return l.createElement("div",{className:"from-check form-check-inline",key:a},l.createElement("input",{className:"form-check-input",type:"checkbox",id:"inlineCheckbox-"+a,onChange:function(t){var n=r.clone(e.state.preSwitch);n[a]=!n[a],e.setState({preSwitch:n})},value:t?1:0,checked:t,disabled:null!=e.props.Disabled&&e.props.Disabled}),l.createElement("label",{className:"form-check-label",htmlFor:"inlineCheckbox-"+a},a+1))}))))},t}(l.Component);function m(e){return l.createElement("div",{className:"form-group"},l.createElement("label",null,null==e.Label?e.Field1+" "+e.Field2:e.Label),l.createElement("div",{className:"input-group"},l.createElement("input",{type:void 0===e.Type?"text":e.Type,className:e.Valid(e.Field1)?"form-control":"form-control is-invalid",onChange:function(t){var a;return e.Setter(c(c({},e.Record),((a={})[e.Field1]=""!==t.target.value?t.target.value:null,a)))},value:null==e.Record[e.Field1]?"":e.Record[e.Field1].toString(),disabled:null!=e.Disabled&&e.Disabled}),l.createElement("input",{type:void 0===e.Type?"text":e.Type,className:e.Valid(e.Field2)?"form-control":"form-control is-invalid",onChange:function(t){var a;return e.Setter(c(c({},e.Record),((a={})[e.Field2]=""!==t.target.value?t.target.value:null,a)))},value:null==e.Record[e.Field2]?"":e.Record[e.Field2].toString(),disabled:null!=e.Disabled&&e.Disabled})),l.createElement("div",{className:"invalid-feedback"},null==e.Feedback?e.Field1+" "+e.Field2+" is a required field.":e.Feedback))}},55:function(e,t,a){"use strict";var n=a(0);t.a=function(e){return n.createElement("span",null,"No Additional Attributes")}},56:function(e,t,a){"use strict";var n=a(0),l=a(31),r=a(33),i=a(35);t.a=function(e){function t(t){return"MaxFaultDistance"==t?null==e.Asset.MaxFaultDistance||r.a.isRealNumber(e.Asset.MaxFaultDistance):"MinFaultDistance"==t?null==e.Asset.MinFaultDistance||r.a.isRealNumber(e.Asset.MinFaultDistance):"Length"==t?null==e.Asset.Detail.Length||r.a.isRealNumber(e.Asset.Detail.Length):"R0"==t?null==e.Asset.Detail.R0||r.a.isRealNumber(e.Asset.Detail.R0):"X0"==t?null==e.Asset.Detail.X0||r.a.isRealNumber(e.Asset.Detail.X0):"R1"==t?null==e.Asset.Detail.R1||r.a.isRealNumber(e.Asset.Detail.R1):"X1"==t?null==e.Asset.Detail.X1||r.a.isRealNumber(e.Asset.Detail.X1):"ThermalRating"==t&&(null==e.Asset.Detail.ThermalRating||r.a.isRealNumber(e.Asset.Detail.ThermalRating))}function a(t){var a=l.clone(e.Asset);a.Detail=t,e.UpdateState(a)}return n.useEffect((function(){}),[e.Asset]),null==e.Asset||null==e.Asset.Detail?null:n.createElement(n.Fragment,null,n.createElement(i.Input,{Record:e.Asset,Field:"MaxFaultDistance",Label:"Max Fault Distance",Feedback:"Max Fault Distance is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(i.Input,{Record:e.Asset,Field:"MinFaultDistance",Label:"Min Fault Distance",Feedback:"Min Fault Distance is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement("div",{className:"alert alert-info",role:"alert"},n.createElement("p",null,"Reactance, Length and Thermal rating are based on the LineSegments associated with this Line."),n.createElement("p",null,"To edit these values the properties of the LineSegement need to be changed.")),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"Length",Feedback:"Length is a required numeric field.",Valid:t,Setter:a,Disabled:!0}),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"R0",Valid:t,Setter:a,Disabled:!0}),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"X0",Valid:t,Setter:a,Disabled:!0}),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"R1",Valid:t,Setter:a,Disabled:!0}),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"X1",Valid:t,Setter:a,Disabled:!0}),n.createElement(i.Input,{Record:e.Asset.Detail,Field:"ThermalRating",Label:"Thermal Rating",Valid:t,Setter:a,Disabled:!0}))}},57:function(e,t,a){"use strict";var n=a(0),l=a(33),r=a(37);t.a=function(e){function t(t){return"PrimaryVoltageKV"==t?null==e.Asset.PrimaryVoltageKV||l.a.isRealNumber(e.Asset.PrimaryVoltageKV):"SecondaryVoltageKV"==t?null==e.Asset.SecondaryVoltageKV||l.a.isRealNumber(e.Asset.SecondaryVoltageKV):"Tap"==t?null==e.Asset.Tap||l.a.isRealNumber(e.Asset.Tap):"R0"==t?null!=e.Asset.R0&&l.a.isRealNumber(e.Asset.R0):"X0"==t?null!=e.Asset.X0&&l.a.isRealNumber(e.Asset.X0):"R1"==t?null!=e.Asset.R1&&l.a.isRealNumber(e.Asset.R1):"X1"==t?null!=e.Asset.X1&&l.a.isRealNumber(e.Asset.X1):"ThermalRating"==t&&(null!=e.Asset.ThermalRating&&l.a.isRealNumber(e.Asset.ThermalRating))}return null==e.Asset?null:n.createElement(n.Fragment,null,n.createElement(r.a,{Record:e.Asset,Field:"R0",Feedback:"R0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(r.a,{Record:e.Asset,Field:"X0",Feedback:"X0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(r.a,{Record:e.Asset,Field:"R1",Feedback:"R1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(r.a,{Record:e.Asset,Field:"X1",Feedback:"X1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(r.a,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal Rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(r.a,{Record:e.Asset,Field:"PrimaryVoltageKV",Label:"Primary Voltage (kV)",Feedback:"Primary Voltage (kV) is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(r.a,{Record:e.Asset,Field:"SecondaryVoltageKV",Label:"Secondary Voltage (kV)",Feedback:"Secondary Voltage (kV) is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(r.a,{Record:e.Asset,Field:"Tap",Feedback:"Tap is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},59:function(e,t,a){"use strict";var n=a(35),l=a(38),r=a(39),i=a.n(r),s=a(31),o=a.n(s),c=a(0),u=function(){return(u=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var l in t=arguments[a])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},d=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)i.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return i};t.a=function(e){var t=d(c.useState(0),2),a=t[0],r=t[1],s=d(c.useState({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),2),m=s[0],p=s[1],h=d(c.useState(!1),2),f=h[0],y=h[1],E=d(c.useState([]),2),b=E[0],N=E[1],g=d(c.useState("Timestamp"),2),S=g[0],A=g[1],v=d(c.useState(!1),2),D=v[0],T=v[1],w=d(c.useState(!1),2),C=w[0],F=w[1],R=d(c.useState(!1),2),I=R[0],L=R[1];function k(){var t=$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/ForObject/"+e.Type+"/"+e.ID+"/Search",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[],OrderBy:S,Ascending:D}),cache:!1,async:!0});return t.done((function(e){var t=JSON.parse(e);N(t)})),t}function M(e){$.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Note/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(e),cache:!0,async:!0}).done((function(){return k()}))}function x(t){p({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""}),$.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/Add",contentType:"application/json; charset=utf-8",data:JSON.stringify({ID:0,NoteTypeID:a,ReferenceTableID:e.ID,Note:t.Note,Timestamp:moment().format("MM/DD/YYYY HH:mm"),UserAccount:""}),dataType:"json",cache:!0,async:!0}).done((function(e){k()}))}return c.useEffect((function(){var t,a=((t=$.ajax({type:"GET",url:homePath+"api/OpenXDA/NoteType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).then((function(t){var a=t.find((function(t){return t.ReferenceTableName==e.Type}));r(a.ID)})),t);return k(),function(){null!=a&&null!=a.abort&&a.abort()}}),[e.Type]),c.useEffect((function(){var e=k();return function(){null!=e&&null!=e.abort&&e.abort()}}),[e.ID,S,D]),c.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},c.createElement("div",{className:"card-header"},c.createElement("div",{className:"row"},c.createElement("div",{className:"col"},c.createElement("h4",null,"Notes:")))),c.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},c.createElement("div",null,c.createElement(i.a,{cols:[{key:"Note",label:"Note",headerStyle:{width:"50%"},rowStyle:{width:"50%"}},{key:"Timestamp",label:"Time",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return moment.utc(e.Timestamp).format("MM/DD/YYYY HH:mm")}},{key:"UserAccount",label:"User",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:null,label:"",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(e){return c.createElement(c.Fragment,null,c.createElement("button",{className:"btn btn-sm",onClick:function(t){return p(e),void y(!0)}},c.createElement("span",null,c.createElement("i",{className:"fa fa-pencil"}))),c.createElement("button",{className:"btn btn-sm",onClick:function(t){return M(e)}},c.createElement("span",null,c.createElement("i",{className:"fa fa-times"}))))}}],tableClass:"table table-hover",data:b,sortField:S,ascending:D,onSort:function(e){e.col==S?T(!D):(T(!0),A(e.col))},onClick:function(){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-615,width:"100%"},rowStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return e.ID==m.ID}})),c.createElement(n.TextArea,{Record:m,Rows:4,Field:"Note",Setter:function(e){return p(e)},Valid:function(){return m.Note.length>0},Label:""}),c.createElement(l.Modal,{Show:f,Title:"Edit Note",ShowCancel:!0,CallBack:function(e){if(0!=m.Note.length||!e){if(y(!1),e){var t=o.a.cloneDeep(m);M(t),x(t)}p({ID:-1,UserAccount:"",Note:"",NoteTypeID:-1,ReferenceTableID:-1,Timestamp:""})}},DisableConfirm:0==m.Note.length,ShowX:!0,ConfirmShowToolTip:0==m.Note.length,ConfirmToolTipContent:c.createElement("p",null," ",c.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"}),"An empty Note can not be saved. ")},c.createElement(n.TextArea,{Record:m,Rows:4,Field:"Note",Setter:function(e){null==e.Note?p(u(u({},e),{Note:""})):p(e)},Valid:function(){return m.Note.length>0},Label:""}))),c.createElement("div",{className:"card-footer"},c.createElement("div",{className:"btn-group mr-2"},c.createElement("button",{className:"btn btn-primary"+(0==m.Note.length?" disabled":""),onClick:function(){m.Note.length>0&&x(m)},"data-tooltip":"Add",style:{cursor:0==m.Note.length?"not-allowed":"pointer"},onMouseOver:function(){return F(!0)},onMouseOut:function(){return F(!1)}},"Add Note"),c.createElement(l.ToolTip,{Show:C&&0==m.Note.length,Position:"top",Theme:"dark",Target:"Add"},c.createElement("p",null," A note needs to be entered. "))),c.createElement("div",{className:"btn-group mr-2"},c.createElement("button",{className:"btn btn-default"+(0==m.Note.length?" disabled":""),onClick:function(){return p((function(e){return u(u({},e),{Note:""})}))},style:{cursor:0==m.Note.length?"not-allowed":"pointer"},"data-tooltip":"Remove",onMouseOver:function(){return L(!0)},onMouseOut:function(){return L(!1)}},"Clear"),c.createElement(l.ToolTip,{Show:I&&0==m.Note.length,Position:"top",Theme:"dark",Target:"Remove"},c.createElement("p",null," The note field is already empty. ")))))}},60:function(e,t,a){"use strict";var n=a(0),l=a(31),r=a(33),i=a(38),s=a(35),o=a(39),c=a.n(o),u=function(){return(u=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var l in t=arguments[a])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)},d=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,r=a.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(n=r.next()).done;)i.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=r.return)&&a.call(r)}finally{if(l)throw l.error}}return i},m=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e};t.a=function(e){var t=d(n.useState([]),2),a=t[0],l=t[1],o=d(n.useState([]),2),m=o[0],h=o[1],f=d(n.useState([]),2),y=f[0],E=f[1],b=d(n.useState([]),2),N=b[0],g=b[1],S=d(n.useState([]),2),A=S[0],v=S[1],D=d(n.useState([]),2),T=D[0],w=D[1],C=d(n.useState(!1),2),F=C[0],R=C[1],I=d(n.useState("FieldName"),2),L=I[0],k=I[1],M=d(n.useState(!1),2),x=M[0],V=M[1],P=d(n.useState({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),2),O=P[0],j=P[1],B=d(n.useState(!1),2),U=B[0],K=B[1],X=d(n.useState(!1),2),H=X[0],G=X[1],q=d(n.useState(!1),2),J=q[0],_=q[1],Y=d(n.useState("None"),2),z=Y[0],W=Y[1],Z=d(n.useState(!0),2),Q=Z[0],ee=Z[1],te={ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1};function ae(){var t,a=ne(),n=le(),r=((t=$.ajax({type:"GET",url:homePath+"api/ValueListGroup",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(e){l(e)})),t),i=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ExternalDataBase",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){h(e.map((function(e){return e.ExternalDB})))})),e}(),s=function(){var e=$.ajax({type:"GET",url:homePath+"api/SystemCenter/ExternalDBTables/TableName/0",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){var t=JSON.parse(e);E(t.map((function(e){return e.TableName})))})),e}();return j({ID:0,FieldName:"",Type:"string",OpenXDAParentTable:e.Type,ExternalDB:"",ExternalDBTable:"",ExternalDBTableKey:"",IsSecure:!1}),function(){null!=a.abort&&a.abort(),null!=n.abort&&n.abort(),null!=r.abort&&r.abort(),null!=i.abort&&i.abort(),null!=s.abort&&s.abort()}}function ne(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalField/ParentTable/"+e.Type+"/"+L+"/"+(x?"1":"0"),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){g(e)})),t}function le(){var t=$.ajax({type:"GET",url:homePath+"api/SystemCenter/AdditionalFieldValue/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){v(e)})),t}function re(){return Q&&null!=O.FieldName&&O.FieldName.length>0&&(null==O.ExternalDB||0==O.ExternalDB.length||!(null==O.ExternalDBTable||0==O.ExternalDBTable.length)&&!(null==O.ExternalDBTableKey||0==O.ExternalDBTableKey.length))}function ie(){return T.some((function(e,t){var a=A.findIndex((function(t){return t.AdditionalFieldID==e.AdditionalFieldID}));return(-1!=a||null!=e.Value)&&(-1==a||e.Value!=A[a].Value)}))}function se(e){var t=[];return T.forEach((function(a,l){var r=N.findIndex((function(e){return e.ID==a.AdditionalFieldID})),i=A.findIndex((function(e){return e.AdditionalFieldID==a.AdditionalFieldID}));-1==r||-1==i&&null==a.Value||(-1!=i?a.Value!=A[i].Value&&t.push(e?n.createElement("p",{key:l}," ",n.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",N[r].FieldName,"' will be lost."):n.createElement("p",{key:l}," ",n.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",N[r].FieldName,"' are valid.")):t.push(e?n.createElement("p",{key:l}," ",n.createElement("i",{style:{marginRight:"10px",color:"#ffc107"},className:"fa fa-exclamation-triangle"})," Changes to '",N[r].FieldName,"' will be lost."):n.createElement("p",{key:l}," ",n.createElement("i",{style:{marginRight:"10px",color:"#28A745"},className:"fa fa-check-circle"})," Changes to '",N[r].FieldName,"' are valid.")))})),t}function oe(){return T.some((function(e){var t=N.findIndex((function(t){return t.ID==e.AdditionalFieldID}));return-1!=t&&("integer"==N[t].Type&&!(null==e.Value||r.a.isInteger(e.Value)))}))}return n.useEffect((function(){return ae()}),[e.ID,e.Type,e.Tab]),n.useEffect((function(){w(A)}),[A]),n.useEffect((function(){var e=ne();return function(){null!=e.abort&&e.abort()}}),[L,x]),n.useEffect((function(){var e=function(){if(null==O.FieldName||0==O.FieldName.length)return null;var e=$.ajax({type:"Post",url:homePath+"api/SystemCenter/AdditionalField/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[{FieldName:"FieldName",Operator:"=",SearchText:O.FieldName,Type:"string"}],OrderBy:"FieldName",Ascending:!0}),cache:!1,async:!0});return e.done((function(e){var t=JSON.parse(e);0==t.length?ee(!0):t.length>1?ee(!1):t[0].ID==O.ID?ee(!0):ee(!1)})),e}();return function(){null!=e&&null!=e.abort&&e.abort()}}),[O.ID,O.FieldName]),n.createElement("div",{className:"card",style:{marginBottom:10,maxHeight:window.innerHeight-215}},n.createElement("div",{className:"card-header"},n.createElement("div",{className:"row"},n.createElement("div",{className:"col"},n.createElement("h4",null,"Additional Fields:")),n.createElement("div",{className:"col"},F?n.createElement("button",{className:"btn btn-default pull-right","data-tooltip":"View",onClick:function(){R(!1),le()},onMouseEnter:function(){return W("View")},onMouseLeave:function(){return W("None")}},"View"):n.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){return R(!0)}},"Edit"),n.createElement(i.ToolTip,{Show:"View"==z&&ie(),Position:"left",Theme:"dark",Target:"View"},se(!0))))),n.createElement("div",{className:"card-body",style:{maxHeight:window.innerHeight-315,overflowY:"auto"}},n.createElement(c.a,{cols:[{key:"FieldName",label:"Field",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"ExternalDB",label:"Ext DB",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"Type",label:"Type",headerStyle:{width:"auto"},rowStyle:{width:"auto"}},{key:"IsSecure",label:"Value",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t){var a=A.findIndex((function(e){return e.AdditionalFieldID==t.ID}));return F?n.createElement(p,{Field:t,ParentTableID:e.ID,Values:T,Setter:function(e){return w(e)}}):a>-1&&null!=A[a].Value?A[a].Value.toString():""}},{key:"ID",label:"",headerStyle:{width:40,paddingRight:0,paddingLeft:10},rowStyle:{width:40,paddingRight:0,paddingLeft:10,paddingTop:36},content:function(e){return F?n.createElement("button",{className:"btn btn-sm",onClick:function(){j(e),_(!0)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-pencil"}))):""}},{key:null,label:"",headerStyle:{width:40,paddingLeft:0,paddingRight:10},rowStyle:{width:40,paddingLeft:0,paddingTop:36,paddingRight:10},content:function(e){return F?n.createElement("button",{className:"btn btn-sm",onClick:function(){j(e),K(!0)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-times"}))):""}}],tableClass:"table table-hover",data:N,sortField:L,ascending:x,onSort:function(e){null!=e.col&&"ID"!=e.col&&"IsSecure"!=e.col&&(e.col==L?V(!x):(V(!0),k(e.col)))},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-455},rowStyle:{display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),n.createElement("div",{className:"card-footer"},n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-primary"+(F?"":" disabled"),onMouseEnter:function(){return W("New")},onMouseLeave:function(){return W("None")},onClick:function(){F&&(_(!0),j(te))},"data-tooltip":"New"},"Add Field")),n.createElement(i.ToolTip,{Show:"New"==z&&!F,Position:"top",Theme:"dark",Target:"New"},F?null:n.createElement("p",null," To add a new Field switch to Edit mode by clicking on the Edit Button on the upper right corner.")),n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-primary"+(ie()&&F&&!oe()?"":" disabled"),onClick:function(){ie()&&!oe()&&F&&$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalFieldValue/Array",contentType:"application/json; charset=utf-8",data:JSON.stringify(T),dataType:"json",cache:!0,async:!0}).done((function(e){ae()}))},onMouseEnter:function(){return W("Save")},onMouseLeave:function(){return W("None")},"data-tooltip":"SaveValues"},"Save Changes")),n.createElement(i.ToolTip,{Show:"Save"==z&&(!F||ie()),Position:"top",Theme:"dark",Target:"SaveValues"},F?null:n.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),ie()&&!oe()?se(!1):null,ie()&&oe()?function(){if(!oe())return[];var e=[];return T.forEach((function(t,a){var l=N.findIndex((function(e){return e.ID==t.AdditionalFieldID}));-1!=l&&("integer"!=N[l].Type||null==t.Value||r.a.isInteger(t.Value)||e.push(n.createElement("p",{key:a}," ",n.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Value for '",N[l].FieldName,"' is required to be an integer.")))})),e}():null),n.createElement("div",{className:"btn-group mr-2"},n.createElement("button",{className:"btn btn-default"+(ie()&&F?"":" disabled"),onClick:function(){ie()&&F&&le()},onMouseEnter:function(){return W("Clear")},onMouseLeave:function(){return W("None")},"data-tooltip":"Clear"},"Reset")),n.createElement(i.ToolTip,{Show:"Clear"==z&&(!F||ie()),Position:"top",Theme:"dark",Target:"Clear"},F?null:n.createElement("p",null," To change any Fields switch to Edit mode by clicking on the Edit Button on the upper right corner."),ie()?se(!0):null)),n.createElement(i.LoadingScreen,{Show:H}),n.createElement(i.Warning,{Show:U,Title:"Delete "+O.FieldName,Message:"This will delete the field '"+O.FieldName+"' from all "+e.Type+"s and will also delete all information assigned to these fields.",CallBack:function(e){var t;e&&(t=O,G(!0),$.ajax({type:"DELETE",url:homePath+"api/SystemCenter/AdditionalField/Delete",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),dataType:"json",cache:!0,async:!0}).done((function(e){ae(),G(!1)}))),K(!1)}}),n.createElement(i.Modal,{Title:"Additional Field",ConfirmText:"Save",CancelText:"Close",ConfirmBtnClass:"btn-primary"+(re()?"":" disabled"),Show:J,Size:"lg",ShowX:!0,CallBack:function(e,t){!re()&&e||(e&&(G(!0),$.ajax({type:"PATCH",url:homePath+"api/SystemCenter/AdditionalField/Update",contentType:"application/json; charset=utf-8",data:JSON.stringify(O),dataType:"json",cache:!0,async:!0}).done((function(e){ae(),G(!1)}))),_(!1))},ConfirmShowToolTip:!re(),ConfirmToolTipContent:n.createElement(n.Fragment,null,null!=O.FieldName&&0!=O.FieldName.length&&Q?null:n.createElement("p",null," ",n.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," Field Name is required and has to be unique."),null!=O.ExternalDB&&null==O.ExternalDBTable?n.createElement("p",null," ",n.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table."):null,null!=O.ExternalDB&&null==O.ExternalDBTableKey?n.createElement("p",null," ",n.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})," A Field from an External Database requires an External Database Table Key."):null)},n.createElement(s.Input,{Record:O,Field:"FieldName",Valid:function(e){return null!=O.FieldName&&O.FieldName.length>0&&Q},Label:"Field Name",Setter:j,Feedback:"The additional field needs to have a unique Field Name"}),n.createElement(s.Select,{Record:O,Field:"Type",Options:[{Value:"string",Label:"string"},{Value:"integer",Label:"integer"},{Value:"number",Label:"number"}].concat(a.filter((function(e){return e.Enabled})).map((function(e){return{Value:e.Name,Label:e.Name}}))),Label:"Field Type",Setter:j}),n.createElement(s.Select,{Record:O,Field:"ExternalDB",Label:"External Database",Setter:function(e){null!=e.ExternalDB&&""!=e.ExternalDB||(e=u(u({},e),{ExternalDB:null,ExternalDBTable:null,ExternalDBTableKey:null})),j(e)},EmptyOption:!0,Options:m.map((function(e){return{Value:e,Label:e}}))}),n.createElement("div",{"data-tooltip":"ExternalDB",onMouseEnter:function(){return W("ExternalDB")},onMouseLeave:function(){return W("None")}},n.createElement(s.Select,{EmptyOption:!0,Disabled:null==O.ExternalDB||0==O.ExternalDB.length,Record:O,Field:"ExternalDBTable",Options:y.map((function(e){return{Value:e,Label:e}})),Label:"External Database Table",Setter:j})),n.createElement(s.Input,{Disabled:null==O.ExternalDB||0==O.ExternalDB.length,Record:O,Field:"ExternalDBTableKey",Valid:function(e){return!0},Label:"External Database Table Key",Setter:j}),n.createElement(s.CheckBox,{Record:O,Field:"IsSecure",Label:"Secure Data",Setter:j})),n.createElement(i.ToolTip,{Zindex:9999,Show:"ExternalDB"==z&&(null==O.ExternalDB||0==O.ExternalDB.length),Position:"bottom",Theme:"dark",Target:"ExternalDB"},n.createElement("p",null," No External Database selected.")))};var p=function(e){var t=d(n.useState([]),2),a=t[0],i=t[1],o=d(n.useState(-1),2),c=o[0],u=o[1];function p(t){var a=l.cloneDeep(e.Values);a[c]=t,e.Setter(a)}function h(t){return"integer"==e.Field.Type?null==e.Values[c].Value||r.a.isInteger(e.Values[c].Value):"number"==e.Field.Type?null==e.Values[c].Value||r.a.isRealNumber(e.Values[c].Value):(e.Field.Type,!0)}return n.useEffect((function(){var t=e.Values.findIndex((function(t){return t.AdditionalFieldID==e.Field.ID}));u(t),-1==t&&e.Setter(m(e.Values,[{ID:0,AdditionalFieldID:e.Field.ID,OpenXDAParentTableID:e.ParentTableID,Value:null}]))}),[e.Values,e.Field]),n.useEffect((function(){if(["integer","number","boolean","string"].indexOf(e.Field.Type)<0){var t=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/"+e.Field.Type,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return t.done((function(e){i(e)})),function(){null!=t.abort&&t.abort()}}}),[e.Field.Type]),-1==c||null==e.Values[c]?null:"number"==e.Field.Type||"integer"==e.Field.Type?n.createElement(s.Input,{Record:e.Values[c],Field:"Value",Valid:h,Label:"",Type:"number",Setter:p,Feedback:e.Field.FieldName+" is an integer field."}):"string"==e.Field.Type?n.createElement(s.Input,{Record:e.Values[c],Field:"Value",Valid:h,Label:"",Type:"text",Setter:p}):"boolean"==e.Field.Type?n.createElement(s.CheckBox,{Record:e.Values[c],Field:"Value",Label:"",Setter:p}):n.createElement(s.Select,{EmptyOption:!0,Record:e.Values[c],Field:"Value",Label:"",Setter:p,Options:a.map((function(e){return{Value:e.ID.toString(),Label:e.Text}}))})}},65:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RightArrow=t.LeftArrow=t.PlayButton=t.Scroll=t.FourWayArrow=t.House=t.MagnifyingGlass=t.InputNumbers=t.DNA=t.DownArrow=t.UpArrow=t.Flag=t.Wrench=t.Spinner=t.Warning=t.Plus=t.CrossMark=t.TrashCan=t.Pencil=t.HeavyCheckMark=void 0;t.HeavyCheckMark="✔️";t.Pencil="✏️";t.TrashCan="🗑️";t.CrossMark="❌";t.Plus="➕";t.Warning="⚠️";t.Spinner="🔄";t.Wrench="🔧";t.Flag="🚩";t.UpArrow="⬆️";t.LeftArrow="⬅";t.RightArrow="➡";t.DownArrow="⬇️";t.DNA="🧬";t.InputNumbers="🔢";t.FourWayArrow="☩";t.MagnifyingGlass="🔍";t.House="🏠";t.Scroll="📜";t.PlayButton="▶️"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
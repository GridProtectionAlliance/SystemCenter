(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{116:function(e,t,a){"use strict";var n=a(0),r=a(35),s=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,s=a.call(e),l=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)l.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=s.return)&&a.call(s)}finally{if(r)throw r.error}}return l};t.a=function(e){var t=s(n.useState(!0),2),a=t[0],l=t[1],i=s(n.useState(e.Meter.AssetKey),2),o=i[0],c=i[1],u=s(n.useState([]),2),d=u[0],p=u[1];function m(t){return"AssetKey"==t?null!=e.Meter.AssetKey&&e.Meter.AssetKey.length>0&&e.Meter.AssetKey.length<=50&&a:"Name"==t?null!=e.Meter.Name&&e.Meter.Name.length>0&&e.Meter.Name.length<=200:"Alias"==t?null==e.Meter.Alias||e.Meter.Alias.length<=200:"ShortName"==t?null==e.Meter.ShortName||e.Meter.ShortName.length<=50:"Make"==t?null!=e.Meter.Make&&e.Meter.Make.length>0&&e.Meter.Make.length<=200:"Model"==t?null!=e.Meter.Model&&e.Meter.Model.length>0&&e.Meter.Model.length<=200:"Description"==t}return n.useEffect((function(){var e=function(){if(sessionStorage.hasOwnProperty("SystemCenter.TimeZones"))return p(JSON.parse(sessionStorage.getItem("SystemCenter.TimeZones"))),null;var e=$.ajax({type:"GET",url:homePath+"api/ValueList/Group/TimeZones",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return e.done((function(e){p(e),sessionStorage.setItem("SystemCenter.TimeZones",JSON.stringify(e))})),e}();return function(){null!=e&&null!=e.abort&&e.abort()}}),[]),n.useEffect((function(){o!=e.Meter.AssetKey&&c(e.Meter.AssetKey)}),[e.Meter]),n.useEffect((function(){var t=function(){if(null==o||0==o.length||o.length>50)return null;var t=$.ajax({type:"Post",url:homePath+"api/OpenXDA/MeterList/SearchableList",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Searches:[{FieldName:"AssetKey",Operator:"=",SearchText:o,Type:"string"}],OrderBy:"AssetKey",Ascending:!0}),cache:!1,async:!0});return t.done((function(t){var a=JSON.parse(t);0==a.length?l(!0):a.length>1?l(!1):a[0].ID==e.Meter.ID?l(!0):l(!1)})),t}();return function(){null!=t&&null!=t.abort&&t.abort()}}),[o]),null==e.Meter?null:n.createElement("div",{className:"row"},n.createElement("div",{className:"col"},n.createElement(r.Input,{Record:e.Meter,Field:"AssetKey",Feedback:"A unique key of less than 50 characters is required.",Valid:m,Setter:function(t){return e.StateSetter(t)}}),n.createElement(r.Input,{Record:e.Meter,Field:"Name",Feedback:"Name must be less than 200 characters and is required.",Valid:m,Setter:function(t){return e.StateSetter(t)}}),n.createElement(r.Input,{Record:e.Meter,Field:"ShortName",Feedback:"ShortName must be less than 50 characters.",Valid:m,Setter:function(t){return e.StateSetter(t)}}),n.createElement(r.Input,{Record:e.Meter,Field:"Alias",Feedback:"Alias must be less than 200 characters.",Valid:m,Setter:function(t){return e.StateSetter(t)}})),n.createElement("div",{className:"col"},n.createElement(r.Input,{Record:e.Meter,Field:"Make",Feedback:"Make must be less than 200 characters.",Valid:m,Setter:function(t){return e.StateSetter(t)}}),n.createElement(r.Input,{Record:e.Meter,Field:"Model",Feedback:"Model must be less than 200 characters.",Valid:m,Setter:function(t){return e.StateSetter(t)}}),n.createElement(r.Select,{Record:e.Meter,Field:"TimeZone",Options:d.map((function(e){return{Value:e.Text,Label:e.AltText1}})),Label:"Time Zone",Setter:function(t){return e.StateSetter(t)},EmptyOption:!0,EmptyLabel:"None Selected"}),n.createElement(r.TextArea,{Rows:3,Record:e.Meter,Field:"Description",Valid:m,Setter:function(t){return e.StateSetter(t)}})))}},117:function(e,t,a){"use strict";var n=a(0),r=a(35),s=a(33),l=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,s=a.call(e),l=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)l.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=s.return)&&a.call(s)}finally{if(r)throw r.error}}return l};t.a=function(e){var t=l(n.useState(!0),2),a=t[0],i=t[1];function o(t){return"LocationKey"==t?null!=e.Location.LocationKey&&e.Location.LocationKey.length>0&&e.Location.LocationKey.length<=50&&a:"Name"==t?null!=e.Location.Name&&e.Location.Name.length>0&&e.Location.Name.length<=200:"Alias"==t?null==e.Location.Alias||e.Location.Alias.length<=200:"ShortName"==t?null==e.Location.ShortName||e.Location.ShortName.length<=50:"Latitude"==t?null!=e.Location.Latitude&&s.a.isRealNumber(e.Location.Latitude):"Longitude"==t?null!=e.Location.Longitude&&s.a.isRealNumber(e.Location.Longitude):"Description"==t}return n.useEffect((function(){var t=e.Location.LocationKey;if(null!=t&&""!=t){var a=e.Locationlist.filter((function(e){return e.LocationKey==t}));0==a.length?i(!0):a.length>1?i(!1):i(e.Location.ID==a[0].ID)}}),[e.Location,e.Locationlist]),null==e.Location||null==e.Meter?null:n.createElement("div",{className:"row"},n.createElement("div",{className:"col"},n.createElement(r.Select,{Record:e.Meter,Field:"LocationID",Label:"Select location",Setter:function(t){return e.UpdateMeter(t)},Options:e.Locationlist.map((function(e){return{Label:e.LocationKey,Value:e.ID.toString()}})),EmptyOption:!0,EmptyLabel:"Add New"}),n.createElement(r.Input,{Record:e.Location,Field:"LocationKey",Label:"Key",Feedback:"A unique key of less than 50 characters is required.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation}),n.createElement(r.Input,{Record:e.Location,Field:"Name",Feedback:"Name must be less than 200 characters and is required.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation}),n.createElement(r.Input,{Record:e.Location,Field:"ShortName",Feedback:"ShortName must be less than 50 characters.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation})),n.createElement("div",{className:"col"},n.createElement(r.Input,{Record:e.Location,Field:"Alias",Feedback:"Alias must be less than 200 characters.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation}),n.createElement(r.Input,{Record:e.Location,Field:"Latitude",Feedback:"Latitude is a required numeric field.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation}),n.createElement(r.Input,{Record:e.Location,Field:"Longitude",Feedback:"Longitude is a required numeric field.",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation}),n.createElement(r.TextArea,{Rows:3,Record:e.Location,Field:"Description",Valid:o,Setter:function(t){return e.SetLocation(t)},Disabled:e.DisableLocation})))}},325:function(e,t,a){"use strict";a.r(t);var n=a(0),r=a(11),s=a(13),l=a(14),i=a(116);function o(e){var t=Object(r.b)(),a=Object(r.c)(s.b),l=Object(r.c)(s.c);function o(t){return"AssetKey"==t?null!=e.MeterInfo.AssetKey&&a.indexOf(e.MeterInfo.AssetKey.toLowerCase())<0&&e.MeterInfo.AssetKey.length>0&&e.MeterInfo.AssetKey.length<=50:"Name"==t?null!=e.MeterInfo.Name&&e.MeterInfo.Name.length>0&&e.MeterInfo.Name.length<=200:"Alias"==t?null==e.MeterInfo.Alias||e.MeterInfo.Alias.length<=200:"ShortName"==t?null==e.MeterInfo.ShortName||e.MeterInfo.ShortName.length<=50:"Make"==t?null!=e.MeterInfo.Make&&e.MeterInfo.Make.length>0&&e.MeterInfo.Make.length<=200:"Model"==t?null!=e.MeterInfo.Model&&e.MeterInfo.Model.length>0&&e.MeterInfo.Model.length<=200:"Description"==t}return n.useEffect((function(){if("unintiated"===l||"changed"===l)return t(Object(s.a)()),function(){}}),[t,l]),n.useEffect((function(){var t=[];o("AssetKey")||t.push("A unique AssetKey of less than 50 characters is required."),o("Name")||t.push("Name must be less than 200 characters and is required."),o("ShortName")||t.push("ShortName must be less than 50 characters."),o("Alias")||t.push("Alias must be less than 200 characters."),o("Make")||t.push("Make must be less than 200 characters."),o("Model")||t.push("Model must be less than 200 characters."),e.SetError(t)}),[e.MeterInfo,a]),n.createElement(i.a,{Meter:e.MeterInfo,StateSetter:e.UpdateMeterInfo})}var c=a(33),u=a(117);function d(e){var t=Object(r.b)(),a=Object(r.c)(l.d),s=Object(r.c)(l.c);return n.useEffect((function(){if("unintiated"===s||"changed"===s)return t(Object(l.a)()),function(){}}),[t,s]),n.useEffect((function(){var t=[];null==e.LocationInfo.LocationKey||0==e.LocationInfo.LocationKey.length||e.LocationInfo.LocationKey.length>50?t.push("Key is required and needs to be less than 50 characters."):0==e.LocationInfo.ID&&null!=a.find((function(t){return t.LocationKey.toLowerCase()==e.LocationInfo.LocationKey.toLowerCase()}))&&t.push("Key needs to be unique."),(null==e.LocationInfo.Name||0==e.LocationInfo.Name.length||e.LocationInfo.Name.length>200)&&t.push("Name is required and needs to be less than 200 characters."),null!=e.LocationInfo.ShortName&&e.LocationInfo.ShortName.length>50&&t.push("ShortName needs to be less than 50 characters."),null!=e.LocationInfo.Alias&&e.LocationInfo.Alias.length>200&&t.push("Alias needs to be less than 200 characters."),null!=e.LocationInfo.Latitude&&c.a.isRealNumber(e.LocationInfo.Latitude)||t.push("Latitude is required."),null!=e.LocationInfo.Longitude&&c.a.isRealNumber(e.LocationInfo.Longitude)||t.push("Longitude is required."),e.SetError(t)}),[e.LocationInfo,e.SetError]),n.createElement(u.a,{Meter:{LocationID:null==e.LocationInfo.ID?"0":e.LocationInfo.ID},Location:e.LocationInfo,SetLocation:e.UpdateLocationInfo,UpdateMeter:function(t){var n;0!=t.LocationID?(n=t.LocationID,e.UpdateLocationInfo(a.find((function(e,t,a){return e.ID==n})))):e.UpdateLocationInfo({ID:0,LocationKey:"",Name:"",Alias:"",ShortName:"",Latitude:0,Longitude:0,Description:""})},Locationlist:null!=a?a:[],DisableLocation:0!=e.LocationInfo.ID})}var p=a(31),m=function(){function e(e,t){var a=this,n=e.split("\n").map((function(e){return e.split(",")})),r=parseInt(n[1][1].slice(0,n[1][1].length-1)),s=parseInt(n[1][2].slice(0,n[1][2].length-1));this.Analogs=n.slice(2,r+2).map((function(e,n){return{ID:n,Meter:t,Asset:"",MeasurementType:a.parseType(e[4]),MeasurementCharacteristic:"Instantaneous",Phase:a.parsePhase(e[2]),Name:e[1],SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Description:e[3],Enabled:!0,Adder:0,Multiplier:1,Series:[{ID:0,ChannelID:0,SeriesType:"Values",SourceIndexes:e[0]}]}})),this.Digitals=n.slice(2+r,2+r+s).map((function(e,n){return{ID:r+n,Meter:t,Asset:"",MeasurementType:"Digital",MeasurementCharacteristic:"Instantaneous",Phase:a.parsePhase(e[2]),Name:e[1],SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Adder:0,Multiplier:1,Description:e[3],Enabled:!0,Series:[{ID:0,ChannelID:0,SeriesType:"Values",SourceIndexes:e[0]}]}})),this.Channels=this.Analogs.concat(this.Digitals)}return e.prototype.parsePhase=function(e){return e.toLowerCase().indexOf("a")>=0&&e.toLowerCase().indexOf("b")>=0?"AB":e.toLowerCase().indexOf("b")>=0&&e.toLowerCase().indexOf("c")>=0?"BC":e.toLowerCase().indexOf("c")>=0&&e.toLowerCase().indexOf("a")>=0?"CA":e.toLowerCase().indexOf("a")>=0?"AN":e.toLowerCase().indexOf("b")>=0?"BN":e.toLowerCase().indexOf("c")>=0?"CN":e.toLowerCase().indexOf("n")>=0?"NG":e.toLowerCase().indexOf("r")>=0?"RES":"None"},e.prototype.parseType=function(e){return e.toLowerCase().indexOf("v")>=0?"Voltage":"Current"},e}(),f=a(16),h=a(17),b=a(39),A=a.n(b),S=a(35),y=a(38),N=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,s=a.call(e),l=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)l.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=s.return)&&a.call(s)}finally{if(r)throw r.error}}return l},g=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(N(arguments[t]));return e};function E(e){var t=n.useRef(null),a=Object(r.b)(),s=Object(r.c)(f.c),l=Object(r.c)(f.b),i=Object(r.c)(h.c),o=Object(r.c)(h.b),c=N(n.useState(!1),2),u=c[0],d=c[1];function b(){var t=JSON.parse(localStorage.getItem("NewMeterWizard.Assets"));null!=t&&t.length>0&&($.each(t,(function(e,t){t.Channels=[]})),e.UpdateAssets(t))}function E(t){var a=e.Channels.findIndex((function(e){return e.ID==t.ID})),n=p.cloneDeep(e.Channels);a>-1?n[a]=t:n.push(t),e.UpdateChannels(n)}return n.useEffect((function(){return $(".custom-file-input").on("change",(function(a){var n=a.target.value.split("\\").pop();$(t).siblings(".custom-file-label").addClass("selected").html(n),function(t){var a=t.target.files[0];if(a){var n=new FileReader;n.onload=function(t){var n,r=t.target.result;a.name.indexOf(".cfg")>=0?(n=new m(r,e.MeterKey),e.UpdateChannels(n.Channels),b()):d(!0)},n.readAsText(a)}}(a)})),function(){$(".custom-file-input").off("change")}}),[]),n.useEffect((function(){if("unintiated"===l||"changed"===l)return a(Object(f.a)()),function(){}}),[a,l]),n.useEffect((function(){if("unintiated"===o||"changed"===o)return a(Object(h.a)()),function(){}}),[a,o]),n.useEffect((function(){var t=[];0==e.Channels.length&&t.push("At Least 1 Channel has to be set up."),e.SetError(t)}),[e.Channels]),n.createElement(n.Fragment,null,n.createElement("div",{className:"row"},n.createElement("div",{className:"col"},n.createElement("button",{className:"btn btn-primary",onClick:function(){var t=[{ID:0,Meter:e.MeterKey,Asset:"",MeasurementType:"Voltage",MeasurementCharacteristic:"Instantaneous",Phase:"AN",Name:"VAN",Adder:0,Multiplier:1,SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Description:"Voltage AN",Enabled:!0,Series:[{ID:0,ChannelID:0,SeriesType:"Values",SourceIndexes:""}]},{ID:1,Meter:e.MeterKey,Asset:"",MeasurementType:"Voltage",MeasurementCharacteristic:"Instantaneous",Phase:"BN",Name:"VBN",Adder:0,Multiplier:1,SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Description:"Voltage BN",Enabled:!0,Series:[{ID:0,ChannelID:0,SeriesType:"Values",SourceIndexes:""}]},{ID:2,Meter:e.MeterKey,Asset:"",MeasurementType:"Voltage",MeasurementCharacteristic:"Instantaneous",Phase:"CN",Name:"VCN",Adder:0,Multiplier:1,SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Description:"Voltage CN",Enabled:!0,Series:[{ID:0,ChannelID:0,SeriesType:"Values",SourceIndexes:""}]},{ID:3,Meter:e.MeterKey,Asset:"",MeasurementType:"Current",MeasurementCharacteristic:"Instantaneous",Phase:"AN",Name:"IA",Adder:0,Multiplier:1,SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Description:"Current A",Enabled:!0,Series:[{ID:0,ChannelID:0,SeriesType:"Values",SourceIndexes:""}]},{ID:4,Meter:e.MeterKey,Asset:"",MeasurementType:"Current",MeasurementCharacteristic:"Instantaneous",Phase:"BN",Name:"IB",Adder:0,Multiplier:1,SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Description:"Current B",Enabled:!0,Series:[{ID:0,ChannelID:0,SeriesType:"Values",SourceIndexes:""}]},{ID:5,Meter:e.MeterKey,Asset:"",MeasurementType:"Current",MeasurementCharacteristic:"Instantaneous",Phase:"CN",Name:"IC",Adder:0,Multiplier:1,SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Description:"Current C",Enabled:!0,Series:[{ID:0,ChannelID:0,SeriesType:"Values",SourceIndexes:""}]},{ID:6,Meter:e.MeterKey,Asset:"",MeasurementType:"Current",MeasurementCharacteristic:"Instantaneous",Phase:"RES",Name:"IR",Adder:0,Multiplier:1,SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Description:"Current RES",Enabled:!0,Series:[{ID:0,ChannelID:0,SeriesType:"Values",SourceIndexes:""}]}];e.UpdateChannels(t),b()}},"Default Setup")),n.createElement("div",{className:"col"},n.createElement("div",{className:"form-group",style:{width:"100%"}},n.createElement("div",{className:"custom-file"},n.createElement("input",{type:"file",className:"custom-file-input",ref:t,accept:".cfg,.par"}),n.createElement("label",{className:"custom-file-label"},"Choose a comtrade standard cfg file if applicable")))),n.createElement("div",{className:"col"},n.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){var t={ID:0==e.Channels.length?1:Math.max.apply(Math,g(e.Channels.map((function(e){return e.ID}))))+1,Meter:e.MeterKey,Asset:"",MeasurementType:"Voltage",MeasurementCharacteristic:"Instantaneous",Phase:"AN",Name:"VAN",Adder:0,Multiplier:1,SamplesPerHour:0,PerUnitValue:null,HarmonicGroup:0,Description:"Voltage AN",Enabled:!0,Series:[{ID:0,ChannelID:0,SeriesType:"Values",SourceIndexes:""}]},a=p.clone(e.Channels);a.push(t),e.UpdateChannels(a)}},"Add Channel"))),n.createElement("div",{style:{width:"100%",maxHeight:innerHeight-380,padding:30}},n.createElement(A.a,{cols:[{key:"Series",label:"Channel",headerStyle:{width:"5%"},rowStyle:{width:"5%"},content:function(e){return n.createElement(S.Input,{Field:"SourceIndexes",Record:e.Series[0],Setter:function(t){e.Series[0].SourceIndexes=t.SourceIndexes,E(e)},Label:"",Valid:function(){return!0}})}},{key:"Name",label:"Name",headerStyle:{width:"20%"},rowStyle:{width:"20%"},content:function(e){return n.createElement(S.Input,{Field:"Name",Record:e,Valid:function(){return!0},Setter:function(e){return E(e)},Label:""})}},{key:"Description",label:"Desc",headerStyle:{width:"33%"},rowStyle:{width:"33%"},content:function(e){return n.createElement(S.Input,{Field:"Description",Record:e,Valid:function(){return!0},Setter:function(e){return E(e)},Label:""})}},{key:"MeasurementType",label:"Type",headerStyle:{width:"10%"},rowStyle:{width:"10%"},content:function(e){return n.createElement(S.Select,{Field:"MeasurementType",Record:e,Setter:function(e){return E(e)},Label:"",Options:s.map((function(e){return{Value:e.Name,Label:e.Name}}))})}},{key:"Phase",label:"Phase",headerStyle:{width:"10%"},rowStyle:{width:"10%"},content:function(e){return n.createElement(S.Select,{Field:"Phase",Record:e,Setter:function(e){return E(e)},Label:"",Options:i.map((function(e){return{Value:e.Name,Label:e.Name}}))})}},{key:"Adder",label:"Adder",headerStyle:{width:"5%"},rowStyle:{width:"5%"},content:function(e){return n.createElement(S.Input,{Field:"Adder",Type:"number",Record:e,Valid:function(){return!0},Setter:function(e){return E(e)},Label:""})}},{key:"Multiplier",label:"Multiplier",headerStyle:{width:"7%"},rowStyle:{width:"7%"},content:function(e){return n.createElement(S.Input,{Field:"Multiplier",Type:"number",Record:e,Valid:function(){return!0},Setter:function(e){return E(e)},Label:""})}},{key:null,label:"",headerStyle:{width:"10%"},rowStyle:{width:"10%",paddingTop:36,paddingBottom:36},content:function(t){return n.createElement("button",{className:"btn btn-sm",onClick:function(a){return function(t){var a=p.clone(e.Channels),n=a.findIndex((function(e){return e.ID==t}));if(-1!=n){var r=a.splice(n,1)[0];if(e.UpdateChannels(a),""!=r.Asset){var s=JSON.parse(localStorage.getItem("NewMeterWizard.Assets"));if(null!=s&&s.length>0){var l=s.find((function(e){return e.AssetKey==r.Asset}));if(null==l)return;var i=l.Channels.findIndex((function(e){return e.ID=r.ID}));if(i<0)return;l.Channels.splice(i,1),e.UpdateAssets(s)}}}}(t.ID)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-times"})))}}],tableClass:"table table-hover",data:e.Channels,sortField:"SourceIndexes",ascending:!1,onSort:function(e){},onClick:function(e){},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:innerHeight-460},rowStyle:{display:"table",tableLayout:"fixed",width:"100%"},selected:function(e){return!1}})),n.createElement(y.Warning,{Show:u,Title:"Error Parsing File",Message:"File is not of type cfg. Please only use comtrade standard cfg files.",CallBack:function(){return d(!1)}}))}var w=a(53),D=a(55),I=a(54),R=a(56),L=a(57),v=a(73),C=a(18),T=a(15),V=function(){return(V=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},F=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,s=a.call(e),l=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)l.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=s.return)&&a.call(s)}finally{if(r)throw r.error}}return l};function M(e){var t=Object(r.b)(),a=Object(r.c)(C.c),s=Object(r.c)(C.b),l=Object(r.c)(T.c),i=Object(r.c)(T.b),o=F(n.useState(c.a.getNewAsset("Line")),2),u=o[0],d=o[1],m=F(n.useState("New"),2),f=m[0],h=m[1],b=F(n.useState(!1),2),A=b[0],S=b[1];return n.useEffect((function(){if("unintiated"===s||"changed"===s)return t(Object(C.a)()),function(){}}),[t,s]),n.useEffect((function(){if("unintiated"===i||"changed"===i)return t(Object(T.a)()),function(){}}),[t,i]),n.useEffect((function(){var t=[];0==e.Assets.length&&t.push("At least 1 Assets needs to be set up."),e.SetError(t)}),[e.Assets.length]),n.useEffect((function(){if("Breaker"==u.AssetType){var e=(n=u.ID,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+n+"/EDNAPoint",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}));return e.done((function(e){var t=V({},u);null!=e&&(t.EDNAPoint=e.Point,d(t))})),function(){void 0!==e.abort&&e.abort()}}if("Line"==u.AssetType){var t=(a=u.ID,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Line/"+a+"/LineSegment",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}));return t.done((function(e){var t=p.clone(u);t.Detail=null!=e?e:c.a.getNewLineDetails(),d(t)})),function(){void 0!==t.abort&&t.abort()}}var a,n}),[u.AssetType]),n.createElement(n.Fragment,null,n.createElement("div",{className:"row",style:{margin:-20}},n.createElement("div",{className:"col-lg-4"},n.createElement("ul",{style:{width:"100%",height:window.innerHeight-305,maxHeight:window.innerHeight-305,overflowY:"auto",padding:0,margin:0}},e.Channels.map((function(e,t){return n.createElement("li",{style:{textDecoration:e.Asset.length>0?"line-through":null},key:t},e.Name+" - "+e.Description)})))),n.createElement("div",{className:"col",style:{padding:20}},n.createElement("div",{style:{width:"100%",height:38}},n.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){h("New"),S(!0)}},"Add Asset")),n.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-350,padding:30,overflowY:"auto"}},n.createElement("table",{className:"table table-hover"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null,"Status"),n.createElement("th",null,"Key"),n.createElement("th",null,"Name"),n.createElement("th",null,"Type"),n.createElement("th",null,"kV"),n.createElement("th",null,"Channels"),n.createElement("th",null))),n.createElement("tbody",null,e.Assets.map((function(t,a,r){return n.createElement("tr",{key:a},n.createElement("td",{style:{width:"10%"}},0==t.ID?"New":"Existing"),n.createElement("td",{style:{width:"20%"}},t.AssetKey),n.createElement("td",{style:{width:"30%"}},t.AssetName),n.createElement("td",{style:{width:"10%"}},t.AssetType),n.createElement("td",{style:{width:"10%"}},t.VoltageKV),n.createElement("td",{style:{width:"10%"}},t.Channels.length),n.createElement("td",{style:{width:"10%"}},n.createElement("button",{className:"btn btn-sm","data-toggle":"modal","data-target":"#assetModal",onClick:function(t){return function(t){h("Edit"),d(e.Assets[t]),S(!0)}(a)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-pencil"}))),n.createElement("button",{className:"btn btn-sm",onClick:function(t){return function(t){var a=p.clone(e.Assets),n=a.splice(t,1),r=p.clone(e.AssetConnections),s=p.clone(e.Channels);for($.each(s,(function(e,t){t.Asset==n[0].AssetKey&&(t.Asset="")})),t=r.findIndex((function(e){return e.Parent==n[0].AssetKey||e.Child==n[0].AssetKey}));t>=0;)r.splice(t,1),t=r.findIndex((function(e){return e.Parent==n[0].AssetKey||e.Child==n[0].AssetKey}));e.UpdateAssets(a),e.UpdateChannels(s),e.UpdateAssetConnections(r)}(a)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-times"})))))}))))))),n.createElement(y.Modal,{Show:A,Title:"New"==f?"Add New Asset to Meter":"Edit "+u.AssetKey+" for Meter",ConfirmBtnClass:"btn-success",ConfirmText:"Edit"==f?"Add":"Save",CancelBtnClass:"btn-danger",CancelText:"Close",Size:"xlg",CallBack:function(t){if(S(!1),t){var a=p.clone(u),n=p.clone(e.Assets),r=p.clone(e.Channels);$.each(r,(function(e,t){t.Asset==a.AssetKey&&(t.Asset=""),a.Channels.findIndex((function(e){return e.ID==t.ID}))>=0&&(t.Asset=a.AssetKey)})),"New"==f&&n.push(a),e.UpdateChannels(r),e.UpdateAssets(n),d(c.a.getNewAsset("Line"))}else d(c.a.getNewAsset("Line"))},DisableConfirm:"New"==f&&c.a.AssetError(u,u.AssetType).length>0,ConfirmShowToolTip:"New"==f&&c.a.AssetError(u,u.AssetType).length>0,ConfirmToolTipContent:c.a.AssetError(u,u.AssetType).map((function(e,t){return n.createElement("p",{key:t},n.createElement(k,null)," ",e)}))},n.createElement("div",{className:"row",style:{maxHeight:innerHeight-300,overflow:"auto"}},n.createElement("div",{className:"col"},n.createElement(c.a.AssetAttributeFields,{Asset:u,NewEdit:f,AssetTypes:a,AllAssets:l,UpdateState:d,GetDifferentAsset:function(e){var t=l.find((function(t){return t.ID==e})).AssetTypeID,n=a.find((function(e){return e.ID==t}));$.ajax({type:"GET",url:homePath+"api/OpenXDA/"+n.Name+"/One/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){e.AssetType=n.Name,e.Channels=[],d(e)}))},HideAssetType:"Edit"==f,HideSelectAsset:!1})),n.createElement("div",{className:"col"},"Breaker"==u.AssetType?n.createElement(w.a,{NewEdit:f,Asset:u,UpdateState:d}):"Bus"==u.AssetType?n.createElement(D.a,{NewEdit:f,Asset:u,UpdateState:d}):"CapacitorBank"==u.AssetType?n.createElement(I.a,{NewEdit:f,Asset:u,UpdateState:d}):"CapacitorBankRelay"==u.AssetType?n.createElement(v.a,{NewEdit:f,Asset:u,UpdateState:d}):"Line"==u.AssetType?n.createElement(R.a,{NewEdit:f,Asset:u,UpdateState:d}):"Transformer"==u.AssetType?n.createElement(L.a,{NewEdit:f,Asset:u,UpdateState:d}):void 0),n.createElement("div",{className:"col"},n.createElement("label",null,"Associated Channels"),n.createElement("select",{multiple:!0,style:{height:innerHeight-330,width:"100%"},onChange:function(t){var a=p.clone(u);a.Channels=$(t.target).val().map((function(t){return e.Channels[parseInt(t)]})),d(a)},value:u.Channels.map((function(e){return e.ID.toString()}))},e.Channels.map((function(e,t){return n.createElement("option",{key:t,value:t,hidden:e.Asset!=u.AssetKey&&e.Asset.length>0},e.Name+" - "+e.Description)})))))))}var k=function(){return n.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})},O=a(19),P=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,s=a.call(e),l=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)l.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=s.return)&&a.call(s)}finally{if(r)throw r.error}}return l};function U(e){var t=n.useRef(null),a=n.useRef(null),s=Object(r.b)(),l=Object(r.c)(O.c),i=Object(r.c)(O.b),o=P(n.useState(!1),2),c=o[0],u=o[1],d=P(n.useState(0),2),m=d[0],f=d[1];n.useEffect((function(){if("unintiated"===i||"changed"===i){s(Object(O.a)());return function(){}}}),[s,i]);var h=e.Assets[m];return n.createElement(n.Fragment,null,n.createElement("div",{className:"row",style:{margin:-20,height:"100%"}},n.createElement("div",{className:"col-lg-4",style:{height:"100%"}},n.createElement("ul",{style:{width:"100%",height:"100%",maxHeight:window.innerHeight-285,overflowY:"auto",padding:0,margin:0}},e.Assets.map((function(e,t){return n.createElement("li",{style:{textDecoration:t<=m?"line-through":null},key:t},e.AssetKey)})))),n.createElement("div",{className:"col",style:{padding:0,height:"100%"}},n.createElement("div",{className:"card",style:{height:"100%"}},n.createElement("div",{className:"card-header"},n.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){return u(!0)},disabled:e.Assets.length<=1},"Add Connection"),n.createElement("h4",{style:{width:"100%"}},h.AssetKey)),n.createElement("div",{className:"card-body",style:{overflowY:"scroll",maxHeight:window.innerHeight-415}},n.createElement("table",{className:"table table-hover"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null,"Asset"),n.createElement("th",null,"Type"),n.createElement("th",null,"Connection"),n.createElement("th",null))),n.createElement("tbody",null,e.AssetConnections.filter((function(e){return e.Parent==h.AssetKey||e.Child==h.AssetKey})).map((function(t,a,r){var s;s=t.Parent==h.AssetKey?e.Assets.find((function(e){return e.AssetKey==t.Child})):e.Assets.find((function(e){return e.AssetKey==t.Parent}));var i=l.find((function(e){return e.ID==t.AssetRelationshipTypeID}));return n.createElement("tr",{key:a},n.createElement("td",{style:{width:"20%"}},s.AssetKey),n.createElement("td",{style:{width:"20%"}},s.AssetType),n.createElement("td",{style:{width:"50%"}},null!=i?i.Name:""),n.createElement("td",{style:{width:"10%"}},n.createElement("button",{className:"btn btn-sm",onClick:function(a){return function(t){var a=p.clone(e.AssetConnections),n=a.findIndex((function(e){return e==t}));a.splice(n,1),e.UpdateAssetConnections(a)}(t)}},n.createElement("span",null,n.createElement("i",{className:"fa fa-times"})))))}))))),n.createElement("div",{className:"card-footer"},n.createElement("button",{className:"btn btn-primary pull-left",onClick:function(){f(m<=0?0:m-1)},hidden:!1,disabled:m<1},"Previous Asset"),n.createElement("button",{className:"btn btn-primary pull-right",onClick:function(){m>=e.Assets.length-1?f(e.Assets.length-1):f(m+1)},disabled:m==e.Assets.length-1},"Next Asset"))))),n.createElement(y.Modal,{Show:c,Size:"sm",Title:"Add a Connection to "+h.AssetKey,CancelText:"Close",ConfirmText:"Save",CallBack:function(n){if(u(!1),n){var r=$(t.current).val(),s=parseInt($(a.current).val()),l=p.clone(e.AssetConnections);l.push({ID:0,AssetRelationshipTypeID:s,Parent:h.AssetKey,Child:r}),e.UpdateAssetConnections(l)}}},n.createElement("div",{className:"form-group"},n.createElement("label",null,"Select Connecting Asset"),n.createElement("select",{ref:t,className:"form-control",onChange:function(e){}},e.Assets.filter((function(e){return e.AssetKey!=h.AssetKey})).map((function(e,t){return n.createElement("option",{key:t,value:e.AssetKey},e.AssetKey)})))),n.createElement("div",{className:"form-group"},n.createElement("label",null,"Select Connection Type"),n.createElement("select",{ref:a,className:"form-control",onChange:function(e){}},l.map((function(e,t){return n.createElement("option",{key:t,value:e.ID},e.Name)}))))))}a.d(t,"default",(function(){return K}));var x=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,s=a.call(e),l=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)l.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=s.return)&&a.call(s)}finally{if(r)throw r.error}}return l};function K(e){var t=Object(r.b)(),a=(Object(r.c)(s.b),Object(r.c)(s.c)),i=(Object(r.c)(l.b),Object(r.c)(l.c)),c=x(n.useState(K()),2),u=c[0],p=c[1],m=x(n.useState(B()),2),f=m[0],h=m[1],b=x(n.useState(q()),2),A=b[0],S=b[1],N=x(n.useState(G()),2),g=N[0],w=N[1],D=x(n.useState(z()),2),I=D[0],R=D[1],L=x(n.useState(localStorage.hasOwnProperty("NewMeterWizard.AssetConnections")?JSON.parse(localStorage.getItem("NewMeterWizard.AssetConnections")):[]),2),v=L[0],C=L[1],T=x(n.useState([]),2),V=T[0],F=T[1],k=x(n.useState(!1),2),O=k[0],P=k[1];function K(){return localStorage.hasOwnProperty("NewMeterWizard.CurrentStep")?JSON.parse(localStorage.getItem("NewMeterWizard.CurrentStep")):1}function B(){return localStorage.hasOwnProperty("NewMeterWizard.MeterInfo")?JSON.parse(localStorage.getItem("NewMeterWizard.MeterInfo")):{ID:0,AssetKey:null,Name:null,ShortName:null,Alias:null,Make:null,Model:null,TimeZone:null,Description:null,LocationID:0}}function q(){return localStorage.hasOwnProperty("NewMeterWizard.LocationInfo")?JSON.parse(localStorage.getItem("NewMeterWizard.LocationInfo")):{ID:0,LocationKey:null,Name:null,Alias:null,ShortName:null,Latitude:null,Longitude:null,Description:null}}function G(){return localStorage.hasOwnProperty("NewMeterWizard.Channels")?JSON.parse(localStorage.getItem("NewMeterWizard.Channels")):[]}function z(){return localStorage.hasOwnProperty("NewMeterWizard.Assets")?JSON.parse(localStorage.getItem("NewMeterWizard.Assets")):[]}function H(){!function(){localStorage.hasOwnProperty("NewMeterWizard.MeterInfo")&&localStorage.removeItem("NewMeterWizard.MeterInfo");localStorage.hasOwnProperty("NewMeterWizard.LocationInfo")&&localStorage.removeItem("NewMeterWizard.LocationInfo");localStorage.hasOwnProperty("NewMeterWizard.Channels")&&localStorage.removeItem("NewMeterWizard.Channels");localStorage.hasOwnProperty("NewMeterWizard.Assets")&&localStorage.removeItem("NewMeterWizard.Assets");localStorage.hasOwnProperty("NewMeterWizard.AssetConnections")&&localStorage.removeItem("NewMeterWizard.AssetConnections");localStorage.hasOwnProperty("NewMeterWizard.CurrentStep")&&localStorage.removeItem("NewMeterWizard.CurrentStep")}(),sessionStorage.clear(),h(B()),S(q()),w(G()),p(K()),R(z())}function W(){return 1==u||2==u?V.length>0:3==u?0==g.length:4!=u||0==I.length}return n.useEffect((function(){if("unintiated"===a||"changed"===a)return t(Object(s.a)()),function(){}}),[t,a]),n.useEffect((function(){if("unintiated"===i||"changed"===i)return t(Object(l.a)()),function(){}}),[t,i]),n.useEffect((function(){localStorage.setItem("NewMeterWizard.CurrentStep",u.toString())}),[u]),n.useEffect((function(){return function(){sessionStorage.clear()}}),[]),n.useEffect((function(){localStorage.setItem("NewMeterWizard.MeterInfo",JSON.stringify(f))}),[f]),n.useEffect((function(){localStorage.setItem("NewMeterWizard.LocationInfo",JSON.stringify(A))}),[A]),n.useEffect((function(){localStorage.setItem("NewMeterWizard.Channels",JSON.stringify(g))}),[g]),n.useEffect((function(){localStorage.setItem("NewMeterWizard.Assets",JSON.stringify(I))}),[I]),n.useEffect((function(){localStorage.setItem("NewMeterWizard.AssetConnections",JSON.stringify(v))}),[v]),n.createElement("div",{style:{padding:10,height:"inherit",overflowY:"hidden"}},n.createElement("h2",null,"New Meter Wizard"),n.createElement("hr",null),n.createElement("div",{className:"card",style:{height:"calc(100% - 75px)"}},n.createElement("div",{className:"card-header"},n.createElement("button",{className:"btn btn-primary pull-right",onClick:H},"Clear Data"),n.createElement("h4",{style:{width:"90%"}},1==u?"Step 1: General information about the new meter":2==u?"Step 2: Substation information for the new meter":3==u?"Step 3: Populate channels for the new meter":4==u?"Step 4: Populate assets monitored by the new meter":5==u?"Step 5: Add connection between the assets that are monitored by the new meter":void 0)),n.createElement("div",{className:"card-body",style:{maxHeight:"calc(100% - 126px)"}},1==u?n.createElement(o,{MeterInfo:f,UpdateMeterInfo:h,SetError:F}):2==u?n.createElement(d,{LocationInfo:A,UpdateLocationInfo:S,SetError:function(e){F(e)}}):3==u?n.createElement(E,{MeterKey:f.AssetKey,Channels:g,UpdateChannels:w,UpdateAssets:R,SetError:F}):4==u?n.createElement(M,{AssetConnections:v,Channels:g,Assets:I,UpdateChannels:w,UpdateAssets:R,UpdateAssetConnections:C,SetError:F}):5==u?n.createElement(U,{Assets:I,AssetConnections:v,UpdateAssetConnections:C}):void 0),n.createElement("div",{className:"card-footer"},u>1?n.createElement("button",{className:"btn btn-danger pull-left",onClick:function(){F([]),p(u<=1?1:u-1),localStorage.setItem("NewMeterWizard.CurrentStep",u.toString())}},"Prev"):null,u<5?n.createElement("button",{className:"btn btn-success pull-right"+(W()?" disabled":""),onClick:function(){W()||(F([]),p(u>=4?5:u+1))},"data-tooltip":"Next",onMouseEnter:function(){return P(!0)},onMouseLeave:function(){return P(!1)}},"Next"):null,n.createElement("button",{className:"btn btn-success pull-right",onClick:function(e){e.preventDefault(),$.ajax({type:"POST",url:homePath+"api/OpenXDA/Meter/New",contentType:"application/json; charset=utf-8",data:JSON.stringify({MeterInfo:f,LocationInfo:A,Channels:g,Assets:I,AssetConnections:v}),dataType:"json",cache:!0,async:!0}).done((function(){H(),window.location.href=homePath+"index.cshtml?name=Meters"})).fail((function(e){500==e.status?alert(e.responseJSON.ExceptionMessage):(H(),window.location.href=homePath+"index.cshtml?name=Meters")}))},hidden:u<5},"Submit")),n.createElement(y.ToolTip,{Show:O&&V.length>0,Position:"top",Theme:"dark",Target:"Next"},V.map((function(e,t){return n.createElement("p",{key:t}," ",j()," ",e," ")})))))}var j=function(){return n.createElement("i",{style:{marginRight:"10px",color:"#dc3545"},className:"fa fa-exclamation-circle"})}},37:function(e,t,a){"use strict";var n,r=a(0),s=a(31),l=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return l(t,e),t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,null==this.props.Label?this.props.Field:this.props.Label),r.createElement("input",{className:this.props.Valid(this.props.Field)?"form-control":"form-control is-invalid",onChange:function(t){var a=s.clone(e.props.Record);""!=t.target.value?a[e.props.Field]=t.target.value:a[e.props.Field]=null,e.props.Setter(a)},value:null==this.props.Record[this.props.Field]?"":this.props.Record[this.props.Field].toString(),disabled:null!=this.props.Disabled&&this.props.Disabled}),r.createElement("div",{className:"invalid-feedback"},null==this.props.Feedback?this.props.Field+" is a required field.":this.props.Feedback))},t}(r.Component);t.a=i},41:function(e,t,a){"use strict";var n,r=a(0),s=a(31),l=a.n(s),i=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-check"},r.createElement("input",{type:"checkbox",className:"form-check-input",style:{zIndex:1},onChange:function(t){var a=l.a.clone(e.props.Record);a[e.props.Field]=t.target.checked,e.props.Setter(a)},value:this.props.Record[this.props.Field]?"on":"off",checked:!!this.props.Record[this.props.Field],disabled:null!=this.props.Disabled&&this.props.Disabled}),r.createElement("label",{className:"form-check-label"},null==this.props.Label?this.props.Field:this.props.Label))},t}(r.Component);t.a=o},43:function(e,t,a){"use strict";a.d(t,"e",(function(){return o})),a.d(t,"c",(function(){return c})),a.d(t,"b",(function(){return u})),a.d(t,"d",(function(){return p})),a.d(t,"a",(function(){return m}));var n=function(e,t,a,n){return new(a||(a=Promise))((function(r,s){function l(e){try{o(n.next(e))}catch(e){s(e)}}function i(e){try{o(n.throw(e))}catch(e){s(e)}}function o(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,i)}o((n=n.apply(e,t||[])).next())}))},r=function(e,t){var a,n,r,s,l={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(a)throw new TypeError("Generator is already executing.");for(;l;)try{if(a=1,n&&(r=2&s[0]?n.return:s[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,s[1])).done)return r;switch(n=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return l.label++,{value:s[1],done:!1};case 5:l.label++,n=s[1],s=[0];continue;case 7:s=l.ops.pop(),l.trys.pop();continue;default:if(!(r=l.trys,(r=r.length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){l=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){l.label=s[1];break}if(6===s[0]&&l.label<r[1]){l.label=r[1],r=s;break}if(r&&l.label<r[2]){l.label=r[2],l.ops.push(s);break}r[2]&&l.ops.pop(),l.trys.pop();continue}s=t.call(e,l)}catch(e){s=[6,e],n=0}finally{a=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}};function s(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+e.ID+"/SpareBreaker",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function l(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+e.ID+"/Location",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function i(e){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/SpareBreakers/Substation/"+e.ID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise()}function o(e){return n(this,void 0,void 0,(function(){var t;return r(this,(function(a){switch(a.label){case 0:return[4,l(e)];case 1:return null==(t=a.sent())?[2,[]]:[4,i(t)];case 2:return[2,a.sent()]}}))}))}function c(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/AssetType",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})}function u(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/Asset",contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0})}function d(e,t){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/"+t+"/One/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})}function p(e,t){return n(this,void 0,void 0,(function(){var a,n,l,i,o;return r(this,(function(r){switch(r.label){case 0:return[4,d(e,t)];case 1:return(a=r.sent()).AssetType=t,a.Channels=[],"Breaker"!=t?[3,5]:[4,(u=a,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Breaker/"+u.ID+"/EDNAPoint",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise())];case 2:return n=r.sent(),a.EDNAPoint=null!=n?n.Point:null,[4,s(a)];case 3:return[4,r.sent()];case 4:return l=r.sent(),a.SpareBreakerID=null!=l?l.ID:null,[3,7];case 5:return"Line"!=t?[3,7]:(i=a,o="Detail",[4,(c=a,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Line/"+c.ID+"/LineSegment",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).promise())]);case 6:i[o]=r.sent(),r.label=7;case 7:return[2,a]}var c,u}))}))}function m(e){return $.ajax({type:"POST",url:homePath+"api/OpenXDA/Asset/Edit",contentType:"application/json; charset=utf-8",dataType:"json",data:JSON.stringify({Asset:e}),cache:!1,async:!0}).promise()}},53:function(e,t,a){"use strict";var n=a(0),r=a(31),s=a(33),l=a(37),i=a(41),o=a(43),c=function(e,t){var a="function"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,r,s=a.call(e),l=[];try{for(;(void 0===t||t-- >0)&&!(n=s.next()).done;)l.push(n.value)}catch(e){r={error:e}}finally{try{n&&!n.done&&(a=s.return)&&a.call(s)}finally{if(r)throw r.error}}return l};t.a=function(e){function t(t){return"ThermalRating"==t?null!=e.Asset.ThermalRating&&s.a.isRealNumber(e.Asset.ThermalRating):"Speed"==t?null!=e.Asset.Speed&&s.a.isRealNumber(e.Asset.Speed):"TripTime"==t?null==e.Asset.TripTime||s.a.isInteger(e.Asset.TripTime):"PickupTime"==t?null==e.Asset.PickupTime||s.a.isInteger(e.Asset.PickupTime):"TripCoilCondition"==t?null==e.Asset.TripCoilCondition||s.a.isRealNumber(e.Asset.TripCoilCondition):"EDNAPoint"==t||("Spare"==t||"SpareBreakerID"==t)}var a=c(n.useState([]),2),u=a[0],d=a[1];return n.useEffect((function(){Object(o.e)(e.Asset).then((function(e){d(e)}))}),[e.Asset]),null==e.Asset?null:n.createElement(n.Fragment,null,n.createElement(l.a,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"Speed",Feedback:"Speed is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"TripTime",Label:"Trip Time Limit",Feedback:"Trip Time is an integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"PickupTime",Label:"Pickup Time Limit",Feedback:"Pickup Time is an integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"TripCoilCondition",Label:"Trip Coil Condition Limit",Feedback:"Trip Coil Condition is an numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.a,{Record:e.Asset,Field:"EDNAPoint",Label:"EDNA Point",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement("div",{className:"form-group",hidden:1!=e.ShowSpare},n.createElement("label",null,"Spare Breaker"),n.createElement("select",{className:"form-control",value:null==e.Asset.SpareBreakerID?0:e.Asset.SpareBreakerID,onChange:function(t){var a=r.clone(e.Asset);"0"==t.target.value?a.SpareBreakerID=null:a.SpareBreakerID=parseInt(t.target.value),e.UpdateState(a)},disabled:"New"==e.NewEdit&&0!=e.Asset.ID},n.createElement("option",{value:0,key:0},"None"),u.map((function(e){return n.createElement("option",{value:e.ID,key:e.ID},e.AssetKey)})))),n.createElement(i.a,{Record:e.Asset,Field:"Spare",Label:"Is Spare",Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},54:function(e,t,a){"use strict";var n,r=a(0),s=a(31),l=a(33),i=a(37),o=(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)t.hasOwnProperty(a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),c=function(){return(c=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var r in t=arguments[a])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};t.a=function(e){function t(t){return"NumberOfBanks"==t?null!=e.Asset.NumberOfBanks&&l.a.isInteger(e.Asset.NumberOfBanks):"CapacitancePerBank"==t?null!=e.Asset.CapacitancePerBank&&l.a.isRealNumber(e.Asset.CapacitancePerBank):"MaxKV"==t?null!=e.Asset.MaxKV&&l.a.isRealNumber(e.Asset.MaxKV):"UnitKV"==t?null!=e.Asset.UnitKV&&l.a.isRealNumber(e.Asset.UnitKV):"UnitKVAr"==t?null!=e.Asset.UnitKVAr&&l.a.isRealNumber(e.Asset.UnitKVAr):"PosReactanceTol"==t?null!=e.Asset.PosReactanceTol&&l.a.isRealNumber(e.Asset.PosReactanceTol):"NegReactanceTol"==t?null!=e.Asset.NegReactanceTol&&l.a.isRealNumber(e.Asset.NegReactanceTol):"Nparalell"==t?null!=e.Asset.Nparalell&&l.a.isInteger(e.Asset.Nparalell):"Nseries"==t?null!=e.Asset.Nseries&&l.a.isInteger(e.Asset.Nseries):"NSeriesGroup"==t?null!=e.Asset.NSeriesGroup&&l.a.isInteger(e.Asset.NSeriesGroup):"NParalellGroup"==t?null!=e.Asset.NParalellGroup&&l.a.isInteger(e.Asset.NParalellGroup):"VTratioBus"==t?null!=e.Asset.VTratioBus&&l.a.isRealNumber(e.Asset.VTratioBus):"NumberLVCaps"==t?null!=e.Asset.NumberLVCaps&&l.a.isInteger(e.Asset.NumberLVCaps):"NumberLVUnits"==t?null!=e.Asset.NumberLVUnits&&l.a.isInteger(e.Asset.NumberLVUnits):"LVKVAr"==t?null!=e.Asset.LVKVAr&&l.a.isRealNumber(e.Asset.LVKVAr):"LVKV"==t?null!=e.Asset.LVKV&&l.a.isRealNumber(e.Asset.LVKV):"LVNegReactanceTol"==t?null!=e.Asset.LVNegReactanceTol&&l.a.isRealNumber(e.Asset.LVNegReactanceTol):"LVPosReactanceTol"==t?null!=e.Asset.LVPosReactanceTol&&l.a.isRealNumber(e.Asset.LVPosReactanceTol):"LowerXFRRatio"==t?null!=e.Asset.LowerXFRRatio&&l.a.isRealNumber(e.Asset.LowerXFRRatio):"Nshorted"==t?null!=e.Asset.Nshorted&&l.a.isRealNumber(e.Asset.Nshorted):"BlownFuses"==t?null!=e.Asset.BlownFuses&&l.a.isRealNumber(e.Asset.BlownFuses):"BlownGroups"==t?null!=e.Asset.BlownGroups&&l.a.isRealNumber(e.Asset.BlownGroups):"Rv"==t?null!=e.Asset.Rv&&l.a.isRealNumber(e.Asset.Rv):"Rh"==t?null!=e.Asset.Rh&&l.a.isRealNumber(e.Asset.Rh):"NLowerGroups"==t?null!=e.Asset.NLowerGroups&&l.a.isInteger(e.Asset.NLowerGroups):"ShortedGroups"==t?null!=e.Asset.ShortedGroups&&l.a.isRealNumber(e.Asset.ShortedGroups):"RelayPTRatioPrimary"==t?null!=e.Asset.RelayPTRatioPrimary&&l.a.isRealNumber(e.Asset.RelayPTRatioPrimary):"RelayPTRatioSecondary"==t?null!=e.Asset.RelayPTRatioSecondary&&l.a.isRealNumber(e.Asset.RelayPTRatioSecondary):"Sh"==t&&(null!=e.Asset.Sh&&l.a.isRealNumber(e.Asset.Sh))}return r.useEffect((function(){null!=e.Asset.Fused&&null!=e.Asset.Compensated&&null!=e.Asset.CktSwitcher&&0!=e.Asset.CktSwitcher.length||e.UpdateState(c(c({},e.Asset),{Fused:!0,Compensated:!1,CktSwitcher:"0"}))}),[e.Asset]),null==e.Asset?null:r.createElement(r.Fragment,null,r.createElement(u,{Record:e.Asset,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"NumberOfBanks",Label:"Number Of Banks",Feedback:"Number Of Banks is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(d,{Record:e.Asset,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"CapacitancePerBank",Label:"Capacitor Step Size (kVAR)",Feedback:"Capacitor Step Size is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"MaxKV",Label:"Maximum Operating Voltage (kV)",Feedback:"Maximum Operating Voltage is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"UnitKV",Label:"Rated Voltage of a Unit (kV)",Feedback:"Rated Voltage of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"UnitKVAr",Label:"Rating of a Unit (kVAR)",Feedback:"Rating of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"PosReactanceTol",Label:"pos. Reactance Tolerance of a Unit (%)",Feedback:"pos. Reactance Tolerance of a Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"NegReactanceTol",Label:"neg. Reactance Tolerance of a Unit (%)",Feedback:"neg. Reactance Tolerance of a Unit (%) is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Nparalell",Label:e.Asset.Fused?"Num. of Units per group":"Num. of Parallel Strings",Feedback:(e.Asset.Fused?"Num. of Caps. per group":"Num. of Parallel Strings")+" is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Nseries",Label:e.Asset.Fused?"Num. of Series Groups per Phase":"Num. Units in each String",Feedback:(e.Asset.Fused?"Num. of Series Groups per Phase":"Num. Units in each String")+" is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),e.Asset.Fused?r.createElement(r.Fragment,null,r.createElement(i.a,{Record:e.Asset,Field:"LowerXFRRatio",Label:"Midgroup VT Ratio",Feedback:"Midgroup VT Ratio is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Nshorted",Label:"Initial guess of shorted elements",Feedback:"Initial guess of shorted elements is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"BlownFuses",Label:"Initial Guess of blown fuses per group",Feedback:"Initial Guess of blown fuses per group is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"BlownGroups",Label:"Initial guess of Groups with blown Fuse",Feedback:"Initial guess of Groups with blown Fuse is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})):r.createElement(r.Fragment,null,e.Asset.Compensated?r.createElement(r.Fragment,null,r.createElement(p,{Record:e.Asset,Field2:"RelayPTRatioSecondary",Field1:"RelayPTRatioPrimary",Label:"Relay PT Ratio (primary - secondary V)",Feedback:"Relay PT ratio  is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Rh",Label:"Vt Input Resistor (Ohm)",Feedback:"Vt input resistor is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Sh",Label:"Vt Input Resistor Wattage (W)",Feedback:"Vt input resistor wattage is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})):r.createElement(r.Fragment,null,r.createElement(i.a,{Record:e.Asset,Field:"Rv",Label:"Voltage Divider output R (Ohm)",Feedback:"Voltage Divider output R is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Rh",Label:"Voltage Divider input R (Ohm)",Feedback:"Voltage Divider input R is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})),r.createElement(i.a,{Record:e.Asset,Field:"NSeriesGroup",Label:"Num. of Series Groups in each Unit",Feedback:"Num. of Series Groups in each Unit is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"NParalellGroup",Label:"Num. of Elements in each Group",Feedback:"Num. of Elements in each Group is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"VTratioBus",Label:"Bus VT Ratio",Feedback:"Bus VT Ratio is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"NumberLVCaps",Label:"Num.of Relay Caps",Feedback:"Num. of Relay Caps is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"NumberLVUnits",Label:"Num. of Elements per Relay Cap",Feedback:"Num. of Elements per Relay Cap is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"LVKVAr",Label:"Low Voltage Cap size (kVAR)",Feedback:"Low Voltage Cap size is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"LVKV",Label:"Low Voltage Cap rating (V)",Feedback:"Low Volatage Cap rating is a required integer field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"LVNegReactanceTol",Label:"neg. Reactance Tolerance of LV Unit (%)",Feedback:"neg. Reactance Tolerance of LV Unitis a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"LVPosReactanceTol",Label:"pos. Reactance Tolerance of LV Unit (%)",Feedback:"pos. Reactance Tolerance of LV Unit is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),r.createElement(i.a,{Record:e.Asset,Field:"Nshorted",Label:"Initial guess of shorted elements",Feedback:"Initial guess of shorted elements is a required field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID})))};var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.computBools=function(e){var t=s.clone(this.props.Record);"0"==e?(t.Compensated=!0,t.Fused=!1):"1"==e?(t.Compensated=!1,t.Fused=!1):"2"==e&&(t.Compensated=!1,t.Fused=!0),this.props.Setter(t)},t.prototype.computeSelection=function(e){return e.Compensated?"0":e.Fused?"2":"1"},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,"Design"),r.createElement("select",{className:"form-control",value:this.computeSelection(this.props.Record),disabled:null!=this.props.Disabled&&this.props.Disabled,onChange:function(t){return e.computBools(t.target.value)}},r.createElement("option",{key:0,value:"0"},"Fuseless Compensated"),r.createElement("option",{key:1,value:"1"},"Fuseless Uncompensated"),r.createElement("option",{key:2,value:"2"},"Fused")))},t}(r.Component),d=function(e){function t(t,a){var n=e.call(this,t,a)||this,r=[];null!=n.props.Record.CktSwitcher&&(r=n.props.Record.CktSwitcher.trim().split(","));var s=1;return null!=n.props.Record.NumberOfBanks&&(s=n.props.Record.NumberOfBanks),r.length!==parseInt(s.toString())&&(r=Array.from(Array(parseInt(s.toString())),(function(e,t){return"0"}))),n.state={preSwitch:r.map((function(e){return"1"==e.trim()}))},n}return o(t,e),t.prototype.updateValues=function(e){var t=[];null!=e&&(t=e.trim().split(","));var a=1;null!=this.props.Record.NumberOfBanks&&(a=this.props.Record.NumberOfBanks),t.length!==parseInt(a.toString())&&(t=Array.from(Array(parseInt(a.toString())),(function(e,t){return"0"}))),this.setState({preSwitch:t.map((function(e){return"1"==e.trim()}))})},t.prototype.componentDidUpdate=function(e,t){if(e.Record.NumberOfBanks===this.props.Record.NumberOfBanks&&e.Record.CktSwitcher===this.props.Record.CktSwitcher||this.updateValues(this.props.Record.CktSwitcher),!s.isEqual(t,this.state)){var a=s.clone(this.props.Record);a.CktSwitcher=this.state.preSwitch.map((function(e){return e?"1":"0"})).join(","),this.props.Setter(a)}},t.prototype.render=function(){var e=this;return r.createElement("div",{className:"form-group"},r.createElement("label",null,"CapBank with Pre-insertion Switcher"),r.createElement("div",null,this.state.preSwitch.map((function(t,a){return r.createElement("div",{className:"from-check form-check-inline",key:a},r.createElement("input",{className:"form-check-input",type:"checkbox",id:"inlineCheckbox-"+a,onChange:function(t){var n=s.clone(e.state.preSwitch);n[a]=!n[a],e.setState({preSwitch:n})},value:t?1:0,checked:t,disabled:null!=e.props.Disabled&&e.props.Disabled}),r.createElement("label",{className:"form-check-label",htmlFor:"inlineCheckbox-"+a},a+1))}))))},t}(r.Component);function p(e){return r.createElement("div",{className:"form-group"},r.createElement("label",null,null==e.Label?e.Field1+" "+e.Field2:e.Label),r.createElement("div",{className:"input-group"},r.createElement("input",{type:void 0===e.Type?"text":e.Type,className:e.Valid(e.Field1)?"form-control":"form-control is-invalid",onChange:function(t){var a;return e.Setter(c(c({},e.Record),((a={})[e.Field1]=""!==t.target.value?t.target.value:null,a)))},value:null==e.Record[e.Field1]?"":e.Record[e.Field1].toString(),disabled:null!=e.Disabled&&e.Disabled}),r.createElement("input",{type:void 0===e.Type?"text":e.Type,className:e.Valid(e.Field2)?"form-control":"form-control is-invalid",onChange:function(t){var a;return e.Setter(c(c({},e.Record),((a={})[e.Field2]=""!==t.target.value?t.target.value:null,a)))},value:null==e.Record[e.Field2]?"":e.Record[e.Field2].toString(),disabled:null!=e.Disabled&&e.Disabled})),r.createElement("div",{className:"invalid-feedback"},null==e.Feedback?e.Field1+" "+e.Field2+" is a required field.":e.Feedback))}},55:function(e,t,a){"use strict";var n=a(0);t.a=function(e){return n.createElement("span",null,"No Additional Attributes")}},56:function(e,t,a){"use strict";var n=a(0),r=a(31),s=a(33),l=a(35);t.a=function(e){function t(t){return"MaxFaultDistance"==t?null==e.Asset.MaxFaultDistance||s.a.isRealNumber(e.Asset.MaxFaultDistance):"MinFaultDistance"==t?null==e.Asset.MinFaultDistance||s.a.isRealNumber(e.Asset.MinFaultDistance):"Length"==t?null==e.Asset.Detail.Length||s.a.isRealNumber(e.Asset.Detail.Length):"R0"==t?null==e.Asset.Detail.R0||s.a.isRealNumber(e.Asset.Detail.R0):"X0"==t?null==e.Asset.Detail.X0||s.a.isRealNumber(e.Asset.Detail.X0):"R1"==t?null==e.Asset.Detail.R1||s.a.isRealNumber(e.Asset.Detail.R1):"X1"==t?null==e.Asset.Detail.X1||s.a.isRealNumber(e.Asset.Detail.X1):"ThermalRating"==t&&(null==e.Asset.Detail.ThermalRating||s.a.isRealNumber(e.Asset.Detail.ThermalRating))}function a(t){var a=r.clone(e.Asset);a.Detail=t,e.UpdateState(a)}return n.useEffect((function(){}),[e.Asset]),null==e.Asset||null==e.Asset.Detail?null:n.createElement(n.Fragment,null,n.createElement(l.Input,{Record:e.Asset,Field:"MaxFaultDistance",Label:"Max Fault Distance",Feedback:"Max Fault Distance is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(l.Input,{Record:e.Asset,Field:"MinFaultDistance",Label:"Min Fault Distance",Feedback:"Min Fault Distance is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement("div",{className:"alert alert-info",role:"alert"},n.createElement("p",null,"Reactance, Length and Thermal rating are based on the LineSegments associated with this Line."),n.createElement("p",null,"To edit these values the properties of the LineSegement need to be changed.")),n.createElement(l.Input,{Record:e.Asset.Detail,Field:"Length",Feedback:"Length is a required numeric field.",Valid:t,Setter:a,Disabled:!0}),n.createElement(l.Input,{Record:e.Asset.Detail,Field:"R0",Valid:t,Setter:a,Disabled:!0}),n.createElement(l.Input,{Record:e.Asset.Detail,Field:"X0",Valid:t,Setter:a,Disabled:!0}),n.createElement(l.Input,{Record:e.Asset.Detail,Field:"R1",Valid:t,Setter:a,Disabled:!0}),n.createElement(l.Input,{Record:e.Asset.Detail,Field:"X1",Valid:t,Setter:a,Disabled:!0}),n.createElement(l.Input,{Record:e.Asset.Detail,Field:"ThermalRating",Label:"Thermal Rating",Valid:t,Setter:a,Disabled:!0}))}},57:function(e,t,a){"use strict";var n=a(0),r=a(33),s=a(37);t.a=function(e){function t(t){return"PrimaryVoltageKV"==t?null==e.Asset.PrimaryVoltageKV||r.a.isRealNumber(e.Asset.PrimaryVoltageKV):"SecondaryVoltageKV"==t?null==e.Asset.SecondaryVoltageKV||r.a.isRealNumber(e.Asset.SecondaryVoltageKV):"Tap"==t?null==e.Asset.Tap||r.a.isRealNumber(e.Asset.Tap):"R0"==t?null!=e.Asset.R0&&r.a.isRealNumber(e.Asset.R0):"X0"==t?null!=e.Asset.X0&&r.a.isRealNumber(e.Asset.X0):"R1"==t?null!=e.Asset.R1&&r.a.isRealNumber(e.Asset.R1):"X1"==t?null!=e.Asset.X1&&r.a.isRealNumber(e.Asset.X1):"ThermalRating"==t&&(null!=e.Asset.ThermalRating&&r.a.isRealNumber(e.Asset.ThermalRating))}return null==e.Asset?null:n.createElement(n.Fragment,null,n.createElement(s.a,{Record:e.Asset,Field:"R0",Feedback:"R0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"X0",Feedback:"X0 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"R1",Feedback:"R1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"X1",Feedback:"X1 is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"ThermalRating",Label:"Thermal Rating",Feedback:"Thermal Rating is a required numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"PrimaryVoltageKV",Label:"Primary Voltage (kV)",Feedback:"Primary Voltage (kV) is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"SecondaryVoltageKV",Label:"Secondary Voltage (kV)",Feedback:"Secondary Voltage (kV) is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}),n.createElement(s.a,{Record:e.Asset,Field:"Tap",Feedback:"Tap is a numeric field.",Valid:t,Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}},73:function(e,t,a){"use strict";var n=a(0),r=a(37),s=a(33);t.a=function(e){return n.createElement(n.Fragment,null,n.createElement(r.a,{Record:e.Asset,Field:"OnVoltageThreshhold",Label:"Relay On Voltage Threshhold (pu)",Feedback:"Relay On Voltage Threshhold (pu) is a required field.",Valid:function(t){return"OnVoltageThreshhold"!=t||null!=e.Asset.OnVoltageThreshhold&&s.a.isRealNumber(e.Asset.OnVoltageThreshhold)},Setter:e.UpdateState,Disabled:"New"==e.NewEdit&&0!=e.Asset.ID}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,